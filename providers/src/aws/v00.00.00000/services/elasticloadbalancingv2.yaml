openapi: 3.0.0
info:
  title: ElasticLoadBalancingV2
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    MutualAuthentication:
      description: Specifies the configuration information for mutual authentication.
      additionalProperties: false
      type: object
      properties:
        IgnoreClientCertificateExpiry:
          description: Indicates whether expired client certificates are ignored.
          type: boolean
        Mode:
          description: The client certificate handling method. Options are ``off``, ``passthrough`` or ``verify``. The default value is ``off``.
          type: string
        TrustStoreArn:
          description: The Amazon Resource Name (ARN) of the trust store.
          type: string
        AdvertiseTrustStoreCaNames:
          description: ''
          type: string
    FixedResponseConfig:
      type: object
      additionalProperties: false
      properties:
        ContentType:
          type: string
          description: |-
            The content type.
             Valid Values: text/plain | text/css | text/html | application/javascript | application/json
        StatusCode:
          type: string
          description: The HTTP response code (2XX, 4XX, or 5XX).
        MessageBody:
          type: string
          description: The message.
      required:
        - StatusCode
      description: Specifies information required when returning a custom HTTP response.
    TargetGroupTuple:
      type: object
      additionalProperties: false
      properties:
        TargetGroupArn:
          type: string
          description: The Amazon Resource Name (ARN) of the target group.
        Weight:
          type: integer
          description: The weight. The range is 0 to 999.
      description: Information about how traffic will be distributed between multiple target groups in a forward rule.
    Action:
      type: object
      additionalProperties: false
      properties:
        Order:
          type: integer
          description: The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.
        TargetGroupArn:
          type: string
          description: The Amazon Resource Name (ARN) of the target group. Specify only when ``Type`` is ``forward`` and you want to route to a single target group. To route to one or more target groups, use ``ForwardConfig`` instead.
        FixedResponseConfig:
          $ref: '#/components/schemas/FixedResponseConfig'
          description: '[Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when ``Type`` is ``fixed-response``.'
        AuthenticateCognitoConfig:
          $ref: '#/components/schemas/AuthenticateCognitoConfig'
          description: '[HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when ``Type`` is ``authenticate-cognito``.'
        Type:
          type: string
          description: The type of action.
        RedirectConfig:
          $ref: '#/components/schemas/RedirectConfig'
          description: '[Application Load Balancer] Information for creating a redirect action. Specify only when ``Type`` is ``redirect``.'
        ForwardConfig:
          $ref: '#/components/schemas/ForwardConfig'
          description: Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is ``forward``. If you specify both ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn``.
        AuthenticateOidcConfig:
          $ref: '#/components/schemas/AuthenticateOidcConfig'
          description: '[HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when ``Type`` is ``authenticate-oidc``.'
      required:
        - Type
      description: Specifies an action for a listener rule.
    AuthenticateCognitoConfig:
      type: object
      additionalProperties: false
      properties:
        OnUnauthenticatedRequest:
          type: string
          description: |-
            The behavior if the user is not authenticated. The following are possible values:
              +  deny```` - Return an HTTP 401 Unauthorized error.
              +  allow```` - Allow the request to be forwarded to the target.
              +  authenticate```` - Redirect the request to the IdP authorization endpoint. This is the default value.
        UserPoolClientId:
          type: string
          description: The ID of the Amazon Cognito user pool client.
        UserPoolDomain:
          type: string
          description: The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.
        SessionTimeout:
          type: integer
          description: The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        Scope:
          type: string
          description: |-
            The set of user claims to be requested from the IdP. The default is ``openid``.
             To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        SessionCookieName:
          type: string
          description: The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        UserPoolArn:
          type: string
          description: The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
        AuthenticationRequestExtraParams:
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
      required:
        - UserPoolClientId
        - UserPoolDomain
        - UserPoolArn
      description: Specifies information required when integrating with Amazon Cognito to authenticate users.
    RedirectConfig:
      type: object
      additionalProperties: false
      properties:
        Path:
          type: string
          description: 'The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.'
        Query:
          type: string
          description: The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.
        Port:
          type: string
          description: 'The port. You can specify a value from 1 to 65535 or #{port}.'
        Host:
          type: string
          description: 'The hostname. This component is not percent-encoded. The hostname can contain #{host}.'
        Protocol:
          type: string
          description: 'The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You can''t redirect HTTPS to HTTP.'
        StatusCode:
          type: string
          description: The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).
      required:
        - StatusCode
      description: |-
        Information about a redirect action.
         A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values.
         You can reuse URI components using the following reserved keywords:
          +  #{protocol}
          +  #{host}
          +  #{port}
          +  #{path} (the leading "/" is removed)
          +  #{query}
          
         For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}", or the query to "#{query}&value=xyz".
    TargetGroupStickinessConfig:
      type: object
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
          description: Indicates whether target group stickiness is enabled.
        DurationSeconds:
          type: integer
          description: The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
      description: Information about the target group stickiness for a rule.
    ListenerAttribute:
      description: Information about a listener attribute.
      additionalProperties: false
      type: object
      properties:
        Value:
          description: The value of the attribute.
          type: string
        Key:
          description: |-
            The name of the attribute.
             The following attribute is supported by Network Load Balancers, and Gateway Load Balancers.
              +   ``tcp.idle_timeout.seconds`` - The tcp idle timeout value, in seconds. The valid range is 60-6000 seconds. The default is 350 seconds.
          type: string
    ForwardConfig:
      type: object
      additionalProperties: false
      properties:
        TargetGroupStickinessConfig:
          $ref: '#/components/schemas/TargetGroupStickinessConfig'
          description: Information about the target group stickiness for a rule.
        TargetGroups:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TargetGroupTuple'
          description: Information about how traffic will be distributed between multiple target groups in a forward rule.
      description: Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is ``forward``. If you specify both ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn``.
    AuthenticateOidcConfig:
      type: object
      additionalProperties: false
      properties:
        OnUnauthenticatedRequest:
          type: string
          description: |-
            The behavior if the user is not authenticated. The following are possible values:
              +  deny```` - Return an HTTP 401 Unauthorized error.
              +  allow```` - Allow the request to be forwarded to the target.
              +  authenticate```` - Redirect the request to the IdP authorization endpoint. This is the default value.
        TokenEndpoint:
          type: string
          description: The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        SessionTimeout:
          type: integer
          description: The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        Scope:
          type: string
          description: |-
            The set of user claims to be requested from the IdP. The default is ``openid``.
             To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        Issuer:
          type: string
          description: The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        ClientSecret:
          type: string
          description: The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set ``UseExistingClientSecret`` to true.
        UserInfoEndpoint:
          type: string
          description: The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        ClientId:
          type: string
          description: The OAuth 2.0 client identifier.
        AuthorizationEndpoint:
          type: string
          description: The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        SessionCookieName:
          type: string
          description: The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        UseExistingClientSecret:
          type: boolean
          description: Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.
        AuthenticationRequestExtraParams:
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
      required:
        - TokenEndpoint
        - Issuer
        - UserInfoEndpoint
        - ClientId
        - AuthorizationEndpoint
      anyOf:
        - required:
            - ClientSecret
        - required:
            - UseExistingClientSecret
      description: Specifies information required using an identity provide (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
    Certificate:
      description: Specifies an SSL server certificate to use as the default certificate for a secure listener.
      additionalProperties: false
      type: object
      properties:
        CertificateArn:
          anyOf:
            - relationshipRef:
                typeName: AWS::CertificateManager::Certificate
                propertyPath: /properties/Id
            - relationshipRef:
                typeName: AWS::IAM::ServerCertificate
                propertyPath: /properties/Arn
          description: The Amazon Resource Name (ARN) of the certificate.
          type: string
    Listener:
      type: object
      properties:
        ListenerArn:
          description: ''
          type: string
        MutualAuthentication:
          description: The mutual authentication configuration information.
          $ref: '#/components/schemas/MutualAuthentication'
        ListenerAttributes:
          x-arrayType: AttributeList
          uniqueItems: true
          description: The listener attributes.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/ListenerAttribute'
        AlpnPolicy:
          description: '[TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN) policy.'
          type: array
          items:
            type: string
        SslPolicy:
          description: |-
            [HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.
             Updating the security policy can result in interruptions if the load balancer is handling a high volume of traffic.
             For more information, see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies) in the *Application Load Balancers Guide* and [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies) in the *Network Load Balancers Guide*.
          type: string
        LoadBalancerArn:
          description: The Amazon Resource Name (ARN) of the load balancer.
          type: string
        DefaultActions:
          uniqueItems: true
          description: |-
            The actions for the default rule. You cannot define a condition for a default rule.
             To create additional rules for an Application Load Balancer, use [AWS::ElasticLoadBalancingV2::ListenerRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html).
          type: array
          items:
            $ref: '#/components/schemas/Action'
        Port:
          description: The port on which the load balancer is listening. You can't specify a port for a Gateway Load Balancer.
          type: integer
        Certificates:
          uniqueItems: true
          description: |-
            The default SSL server certificate for a secure listener. You must provide exactly one certificate if the listener protocol is HTTPS or TLS.
             To create a certificate list for a secure listener, use [AWS::ElasticLoadBalancingV2::ListenerCertificate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html).
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
        Protocol:
          description: The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You can't specify a protocol for a Gateway Load Balancer.
          type: string
      required:
        - LoadBalancerArn
        - DefaultActions
      x-stackql-resource-name: listener
      description: Specifies a listener for an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.
      x-type-name: AWS::ElasticLoadBalancingV2::Listener
      x-stackql-primary-identifier:
        - ListenerArn
      x-create-only-properties:
        - LoadBalancerArn
      x-write-only-properties:
        - DefaultActions/*/AuthenticateOidcConfig/ClientSecret
      x-read-only-properties:
        - ListenerArn
      x-required-properties:
        - LoadBalancerArn
        - DefaultActions
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeListenerAttributes
        create:
          - elasticloadbalancing:CreateListener
          - elasticloadbalancing:DescribeListeners
          - cognito-idp:DescribeUserPoolClient
          - elasticloadbalancing:ModifyListenerAttributes
        update:
          - elasticloadbalancing:ModifyListener
          - elasticloadbalancing:DescribeListeners
          - cognito-idp:DescribeUserPoolClient
          - elasticloadbalancing:ModifyListenerAttributes
        list:
          - elasticloadbalancing:DescribeListeners
        delete:
          - elasticloadbalancing:DeleteListener
          - elasticloadbalancing:DescribeListeners
    RuleCondition:
      type: object
      additionalProperties: false
      properties:
        Field:
          type: string
          description: |-
            The field in the HTTP request. The following are the possible values:
              +   ``http-header`` 
              +   ``http-request-method`` 
              +   ``host-header`` 
              +   ``path-pattern`` 
              +   ``query-string`` 
              +   ``source-ip``
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
          description: |-
            The condition value. Specify only when ``Field`` is ``host-header`` or ``path-pattern``. Alternatively, to specify multiple host names or multiple path patterns, use ``HostHeaderConfig`` or ``PathPatternConfig``.
             If ``Field`` is ``host-header`` and you're not using ``HostHeaderConfig``, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters.
              +  A-Z, a-z, 0-9
              +  - .
              +  * (matches 0 or more characters)
              +  ? (matches exactly 1 character)
              
             If ``Field`` is ``path-pattern`` and you're not using ``PathPatternConfig``, you can specify a single path pattern (for example, /img/*). A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters.
              +  A-Z, a-z, 0-9
              +  _ - . $ / ~ " ' @ : +
              +  & (using &amp;)
              +  * (matches 0 or more characters)
              +  ? (matches exactly 1 character)
        HttpRequestMethodConfig:
          $ref: '#/components/schemas/HttpRequestMethodConfig'
          description: Information for an HTTP method condition. Specify only when ``Field`` is ``http-request-method``.
        PathPatternConfig:
          $ref: '#/components/schemas/PathPatternConfig'
          description: Information for a path pattern condition. Specify only when ``Field`` is ``path-pattern``.
        HttpHeaderConfig:
          $ref: '#/components/schemas/HttpHeaderConfig'
          description: Information for an HTTP header condition. Specify only when ``Field`` is ``http-header``.
        SourceIpConfig:
          $ref: '#/components/schemas/SourceIpConfig'
          description: Information for a source IP condition. Specify only when ``Field`` is ``source-ip``.
        HostHeaderConfig:
          $ref: '#/components/schemas/HostHeaderConfig'
          description: Information for a host header condition. Specify only when ``Field`` is ``host-header``.
        QueryStringConfig:
          $ref: '#/components/schemas/QueryStringConfig'
          description: Information for a query string condition. Specify only when ``Field`` is ``query-string``.
      description: Specifies a condition for a listener rule.
    QueryStringConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/QueryStringKeyValue'
          description: |-
            The key/value pairs or values to find in the query string. The maximum size of each string is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). To search for a literal '*' or '?' character in a query string, you must escape these characters in ``Values`` using a '\' character.
             If you specify multiple key/value pairs or values, the condition is satisfied if one of them is found in the query string.
      description: |-
        Information about a query string condition.
         The query string component of a URI starts after the first '?' character and is terminated by either a '#' character or the end of the URI. A typical query string contains key/value pairs separated by '&' characters. The allowed characters are specified by RFC 3986. Any character can be percentage encoded.
    PathPatternConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
          description: |-
            The path patterns to compare against the request URL. The maximum size of each string is 128 characters. The comparison is case sensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character).
             If you specify multiple strings, the condition is satisfied if one of them matches the request URL. The path pattern is compared only to the path of the URL, not to its query string.
      description: Information about a path pattern condition.
    HttpHeaderConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
          description: |-
            The strings to compare against the value of the HTTP header. The maximum size of each string is 128 characters. The comparison strings are case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character).
             If the same header appears multiple times in the request, we search them in order until a match is found.
             If you specify multiple strings, the condition is satisfied if one of the strings matches the value of the HTTP header. To require that all of the strings are a match, create one condition per string.
        HttpHeaderName:
          type: string
          description: The name of the HTTP header field. The maximum size is 40 characters. The header name is case insensitive. The allowed characters are specified by RFC 7230. Wildcards are not supported.
      description: |-
        Information about an HTTP header condition.
         There is a set of standard HTTP header fields. You can also define custom HTTP header fields.
    QueryStringKeyValue:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
          description: The value.
        Key:
          type: string
          description: The key. You can omit the key.
      description: Information about a key/value pair.
    HostHeaderConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
          description: |-
            The host names. The maximum size of each name is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character).
             If you specify multiple strings, the condition is satisfied if one of the strings matches the host name.
      description: Information about a host header condition.
    HttpRequestMethodConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
          description: |-
            The name of the request method. The maximum size is 40 characters. The allowed characters are A-Z, hyphen (-), and underscore (_). The comparison is case sensitive. Wildcards are not supported; therefore, the method name must be an exact match.
             If you specify multiple strings, the condition is satisfied if one of the strings matches the HTTP request method. We recommend that you route GET and HEAD requests in the same way, because the response to a HEAD request may be cached.
      description: |-
        Information about an HTTP method condition.
         HTTP defines a set of request methods, also referred to as HTTP verbs. For more information, see the [HTTP Method Registry](https://docs.aws.amazon.com/https://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also define custom HTTP methods.
    SourceIpConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
          description: |-
            The source IP addresses, in CIDR format. You can use both IPv4 and IPv6 addresses. Wildcards are not supported.
             If you specify multiple addresses, the condition is satisfied if the source IP address of the request matches one of the CIDR blocks. This condition is not satisfied by the addresses in the X-Forwarded-For header.
      description: |-
        Information about a source IP condition.
         You can use this condition to route based on the IP address of the source that connects to the load balancer. If a client is behind a proxy, this is the IP address of the proxy not the IP address of the client.
    ListenerRule:
      type: object
      properties:
        ListenerArn:
          type: string
          description: The Amazon Resource Name (ARN) of the listener.
        RuleArn:
          type: string
          description: ''
        Actions:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Action'
          description: |-
            The actions.
             The rule must include exactly one of the following types of actions: ``forward``, ``fixed-response``, or ``redirect``, and it must be the last action to be performed. If the rule is for an HTTPS listener, it can also optionally include an authentication action.
        Priority:
          type: integer
          description: |-
            The rule priority. A listener can't have multiple rules with the same priority.
             If you try to reorder rules by updating their priorities, do not specify a new priority if an existing rule already uses this priority, as this can cause an error. If you need to reuse a priority with a different rule, you must remove it as a priority first, and then specify it in a subsequent update.
        Conditions:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/RuleCondition'
          description: |-
            The conditions.
             The rule can optionally include up to one of each of the following conditions: ``http-request-method``, ``host-header``, ``path-pattern``, and ``source-ip``. A rule can also optionally include one or more of each of the following conditions: ``http-header`` and ``query-string``.
        IsDefault:
          type: boolean
          description: ''
      required:
        - Actions
        - Priority
        - Conditions
      x-stackql-resource-name: listener_rule
      description: |-
        Specifies a listener rule. The listener must be associated with an Application Load Balancer. Each rule consists of a priority, one or more actions, and one or more conditions.
         For more information, see [Quotas for your Application Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html) in the *User Guide for Application Load Balancers*.
      x-type-name: AWS::ElasticLoadBalancingV2::ListenerRule
      x-stackql-primary-identifier:
        - RuleArn
      x-create-only-properties:
        - ListenerArn
      x-write-only-properties:
        - Actions/*/AuthenticateOidcConfig/ClientSecret
        - ListenerArn
      x-read-only-properties:
        - RuleArn
        - IsDefault
      x-required-properties:
        - Actions
        - Priority
        - Conditions
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - elasticloadbalancing:CreateRule
          - elasticloadbalancing:DescribeRules
          - cognito-idp:DescribeUserPoolClient
        delete:
          - elasticloadbalancing:DeleteRule
          - elasticloadbalancing:DescribeRules
        list:
          - elasticloadbalancing:DescribeRules
        read:
          - elasticloadbalancing:DescribeRules
        update:
          - elasticloadbalancing:ModifyRule
          - elasticloadbalancing:SetRulePriorities
          - elasticloadbalancing:DescribeRules
    MinimumLoadBalancerCapacity:
      type: object
      additionalProperties: false
      properties:
        CapacityUnits:
          type: integer
      required:
        - CapacityUnits
      description: ''
    SubnetMapping:
      type: object
      additionalProperties: false
      properties:
        SubnetId:
          type: string
          description: The ID of the subnet.
        AllocationId:
          type: string
          description: '[Network Load Balancers] The allocation ID of the Elastic IP address for an internet-facing load balancer.'
        PrivateIPv4Address:
          type: string
          description: '[Network Load Balancers] The private IPv4 address for an internal load balancer.'
        IPv6Address:
          type: string
          description: '[Network Load Balancers] The IPv6 address.'
        SourceNatIpv6Prefix:
          type: string
          description: '[Network Load Balancers with UDP listeners] The IPv6 prefix to use for source NAT. Specify an IPv6 prefix (/80 netmask) from the subnet CIDR block or ``auto_assigned`` to use an IPv6 prefix selected at random from the subnet CIDR block.'
      required:
        - SubnetId
      description: Specifies a subnet for a load balancer.
    LoadBalancerAttribute:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
          description: The value of the attribute.
        Key:
          type: string
          description: |-
            The name of the attribute.
             The following attributes are supported by all load balancers:
              +   ``deletion_protection.enabled`` - Indicates whether deletion protection is enabled. The value is ``true`` or ``false``. The default is ``false``.
              +   ``load_balancing.cross_zone.enabled`` - Indicates whether cross-zone load balancing is enabled. The possible values are ``true`` and ``false``. The default for Network Load Balancers and Gateway Load Balancers is ``false``. The default for Application Load Balancers is ``true``, and can't be changed.
              
             The following attributes are supported by both Application Load Balancers and Network Load Balancers:
              +   ``access_logs.s3.enabled`` - Indicates whether access logs are enabled. The value is ``true`` or ``false``. The default is ``false``.
              +   ``access_logs.s3.bucket`` - The name of the S3 bucket for the access logs. This attribute is required if access logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permissions to write to the bucket.
              +   ``access_logs.s3.prefix`` - The prefix for the location in the S3 bucket for the access logs.
              +   ``ipv6.deny_all_igw_traffic`` - Blocks internet gateway (IGW) access to the load balancer. It is set to ``false`` for internet-facing load balancers and ``true`` for internal load balancers, preventing unintended access to your internal load balancer through an internet gateway.
              
             The following attributes are supported by only Application Load Balancers:
              +   ``idle_timeout.timeout_seconds`` - The idle timeout value, in seconds. The valid range is 1-4000 seconds. The default is 60 seconds.
              +   ``client_keep_alive.seconds`` - The client keep alive value, in seconds. The valid range is 60-604800 seconds. The default is 3600 seconds.
              +   ``connection_logs.s3.enabled`` - Indicates whether connection logs are enabled. The value is ``true`` or ``false``. The default is ``false``.
              +   ``connection_logs.s3.bucket`` - The name of the S3 bucket for the connection logs. This attribute is required if connection logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permissions to write to the bucket.
              +   ``connection_logs.s3.prefix`` - The prefix for the location in the S3 bucket for the connection logs.
              +   ``routing.http.desync_mitigation_mode`` - Determines how the load balancer handles requests that might pose a security risk to your application. The possible values are ``monitor``, ``defensive``, and ``strictest``. The default is ``defensive``.
              +   ``routing.http.drop_invalid_header_fields.enabled`` - Indicates whether HTTP headers with invalid header fields are removed by the load balancer (``true``) or routed to targets (``false``). The default is ``false``.
              +   ``routing.http.preserve_host_header.enabled`` - Indicates whether the Application Load Balancer should preserve the ``Host`` header in the HTTP request and send it to the target without any change. The possible values are ``true`` and ``false``. The default is ``false``.
              +   ``routing.http.x_amzn_tls_version_and_cipher_suite.enabled`` - Indicates whether the two headers (``x-amzn-tls-version`` and ``x-amzn-tls-cipher-suite``), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. The ``x-amzn-tls-version`` header has information about the TLS protocol version negotiated with the client, and the ``x-amzn-tls-cipher-suite`` header has information about the cipher suite negotiated with the client. Both headers are in OpenSSL format. The possible values for the attribute are ``true`` and ``false``. The default is ``false``.
              +   ``routing.http.xff_client_port.enabled`` - Indicates whether the ``X-Forwarded-For`` header should preserve the source port that the client used to connect to the load balancer. The possible values are ``true`` and ``false``. The default is ``false``.
              +   ``routing.http.xff_header_processing.mode`` - Enables you to modify, preserve, or remove the ``X-Forwarded-For`` header in the HTTP request before the Application Load Balancer sends the request to the target. The possible values are ``append``, ``preserve``, and ``remove``. The default is ``append``.
              +  If the value is ``append``, the Application Load Balancer adds the client IP address (of the last hop) to the ``X-Forwarded-For`` header in the HTTP request before it sends it to targets.
              +  If the value is ``preserve`` the Application Load Balancer preserves the ``X-Forwarded-For`` header in the HTTP request, and sends it to targets without any change.
              +  If the value is ``remove``, the Application Load Balancer removes the ``X-Forwarded-For`` header in the HTTP request before it sends it to targets.
              
              +   ``routing.http2.enabled`` - Indicates whether HTTP/2 is enabled. The possible values are ``true`` and ``false``. The default is ``true``. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens.
              +   ``waf.fail_open.enabled`` - Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. The possible values are ``true`` and ``false``. The default is ``false``.
              
             The following attributes are supported by only Network Load Balancers:
              +   ``dns_record.client_routing_policy`` - Indicates how traffic is distributed among the load balancer Availability Zones. The possible values are ``availability_zone_affinity`` with 100 percent zonal affinity, ``partial_availability_zone_affinity`` with 85 percent zonal affinity, and ``any_availability_zone`` with 0 percent zonal affinity.
              +   ``zonal_shift.config.enabled`` - Indicates whether zonal shift is enabled. The possible values are ``true`` and ``false``. The default is ``false``.
      description: Specifies an attribute for an Application Load Balancer, a Network Load Balancer, or a Gateway Load Balancer.
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    LoadBalancer:
      type: object
      properties:
        IpAddressType:
          type: string
          description: |-
            The IP address type. Internal load balancers must use ``ipv4``.
             [Application Load Balancers] The possible values are ``ipv4`` (IPv4 addresses), ``dualstack`` (IPv4 and IPv6 addresses), and ``dualstack-without-public-ipv4`` (public IPv6 addresses and private IPv4 and IPv6 addresses).
             Application Load Balancer authentication supports IPv4 addresses only when connecting to an Identity Provider (IdP) or Amazon Cognito endpoint. Without a public IPv4 address the load balancer can't complete the authentication process, resulting in HTTP 500 errors.
             [Network Load Balancers and Gateway Load Balancers] The possible values are ``ipv4`` (IPv4 addresses) and ``dualstack`` (IPv4 and IPv6 addresses).
        EnablePrefixForIpv6SourceNat:
          type: string
          description: '[Network Load Balancers with UDP listeners] Indicates whether to use an IPv6 prefix from each subnet for source NAT. The IP address type must be ``dualstack``. The default value is ``off``.'
        SecurityGroups:
          type: array
          description: '[Application Load Balancers and Network Load Balancers] The IDs of the security groups for the load balancer.'
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        LoadBalancerAttributes:
          type: array
          description: The load balancer attributes.
          uniqueItems: true
          x-insertionOrder: false
          x-arrayType: AttributeList
          items:
            $ref: '#/components/schemas/LoadBalancerAttribute'
        MinimumLoadBalancerCapacity:
          type: object
          description: ''
          $ref: '#/components/schemas/MinimumLoadBalancerCapacity'
        Scheme:
          type: string
          description: |-
            The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet.
             The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.
             The default is an Internet-facing load balancer.
             You can't specify a scheme for a Gateway Load Balancer.
        DNSName:
          type: string
          description: ''
        Name:
          type: string
          description: |-
            The name of the load balancer. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-".
             If you don't specify a name, AWS CloudFormation generates a unique physical ID for the load balancer. If you specify a name, you cannot perform updates that require replacement of this resource, but you can perform other updates. To replace the resource, specify a new name.
        LoadBalancerName:
          type: string
          description: ''
        LoadBalancerFullName:
          type: string
          description: ''
        Subnets:
          type: array
          description: |-
            The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets.
             [Application Load Balancers] You must specify subnets from at least two Availability Zones.
             [Application Load Balancers on Outposts] You must specify one Outpost subnet.
             [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.
             [Network Load Balancers and Gateway Load Balancers] You can specify subnets from one or more Availability Zones.
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Type:
          type: string
          description: The type of load balancer. The default is ``application``.
        CanonicalHostedZoneID:
          type: string
          description: ''
        Tags:
          type: array
          description: The tags to assign to the load balancer.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        LoadBalancerArn:
          type: string
          description: ''
        SubnetMappings:
          type: array
          description: |-
            The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both.
             [Application Load Balancers] You must specify subnets from at least two Availability Zones. You can't specify Elastic IP addresses for your subnets.
             [Application Load Balancers on Outposts] You must specify one Outpost subnet.
             [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.
             [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.
             [Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You can't specify Elastic IP addresses for your subnets.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SubnetMapping'
        EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic:
          type: string
          description: Indicates whether to evaluate inbound security group rules for traffic sent to a Network Load Balancer through privatelink.
      x-stackql-resource-name: load_balancer
      description: Specifies an Application Load Balancer, a Network Load Balancer, or a Gateway Load Balancer.
      x-type-name: AWS::ElasticLoadBalancingV2::LoadBalancer
      x-documentation-url: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
      x-stackql-primary-identifier:
        - LoadBalancerArn
      x-create-only-properties:
        - Name
        - Type
        - Scheme
      x-read-only-properties:
        - LoadBalancerName
        - LoadBalancerFullName
        - CanonicalHostedZoneID
        - LoadBalancerArn
        - DNSName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:DescribeTags
          - elasticloadbalancing:RemoveTags
      x-required-permissions:
        create:
          - elasticloadbalancing:CreateLoadBalancer
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:ModifyLoadBalancerAttributes
          - elasticloadbalancing:AddTags
        delete:
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DeleteLoadBalancer
        list:
          - elasticloadbalancing:DescribeLoadBalancers
        read:
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeLoadBalancerAttributes
          - elasticloadbalancing:DescribeCapacityReservation
          - elasticloadbalancing:DescribeTags
        update:
          - elasticloadbalancing:ModifyLoadBalancerAttributes
          - elasticloadbalancing:ModifyCapacityReservation
          - elasticloadbalancing:SetSubnets
          - elasticloadbalancing:SetIpAddressType
          - elasticloadbalancing:SetSecurityGroups
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:RemoveTags
    Matcher:
      type: object
      additionalProperties: false
      properties:
        GrpcCode:
          type: string
          description: You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.
        HttpCode:
          type: string
          description: 'For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values or a range of values. '
    TargetDescription:
      type: object
      additionalProperties: false
      properties:
        AvailabilityZone:
          type: string
          description: An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.
        Id:
          type: string
          description: 'The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target. '
        Port:
          type: integer
          description: The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. Not used if the target is a Lambda function.
      required:
        - Id
    TargetGroupAttribute:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
          description: The name of the attribute.
        Key:
          type: string
          description: The value of the attribute.
    TargetGroup:
      type: object
      properties:
        IpAddressType:
          type: string
          description: 'The type of IP address used for this target group. The possible values are ipv4 and ipv6. '
        HealthCheckIntervalSeconds:
          type: integer
          description: The approximate amount of time, in seconds, between health checks of an individual target.
        LoadBalancerArns:
          type: array
          x-insertionOrder: false
          description: The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
          uniqueItems: false
          items:
            type: string
        Matcher:
          $ref: '#/components/schemas/Matcher'
          description: '[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.'
        HealthCheckPath:
          type: string
          description: '[HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /AWS.ALB/healthcheck.'
        Port:
          type: integer
          description: The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
        Targets:
          type: array
          description: The targets.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TargetDescription'
        HealthCheckEnabled:
          type: boolean
          description: Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
        ProtocolVersion:
          type: string
          description: '[HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.'
        UnhealthyThresholdCount:
          type: integer
          description: The number of consecutive health check failures required before considering a target unhealthy.
        HealthCheckTimeoutSeconds:
          type: integer
          description: The amount of time, in seconds, during which no response from a target means a failed health check.
        Name:
          type: string
          description: The name of the target group.
        VpcId:
          type: string
          description: The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
        TargetGroupFullName:
          type: string
          description: The full name of the target group.
        HealthyThresholdCount:
          type: integer
          description: 'The number of consecutive health checks successes required before considering an unhealthy target healthy. '
        HealthCheckProtocol:
          type: string
          description: 'The protocol the load balancer uses when performing health checks on targets. '
        TargetGroupAttributes:
          type: array
          x-arrayType: AttributeList
          description: The attributes.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TargetGroupAttribute'
        TargetType:
          type: string
          description: The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.
        HealthCheckPort:
          type: string
          description: 'The port the load balancer uses when performing health checks on targets. '
        TargetGroupArn:
          type: string
          description: The ARN of the Target Group
        Protocol:
          type: string
          description: The protocol to use for routing traffic to the targets.
        TargetGroupName:
          type: string
          description: The name of the target group.
        Tags:
          type: array
          description: The tags.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: target_group
      description: Resource Type definition for AWS::ElasticLoadBalancingV2::TargetGroup
      x-type-name: AWS::ElasticLoadBalancingV2::TargetGroup
      x-stackql-primary-identifier:
        - TargetGroupArn
      x-create-only-properties:
        - TargetType
        - ProtocolVersion
        - Port
        - Name
        - VpcId
        - Protocol
        - IpAddressType
      x-read-only-properties:
        - LoadBalancerArns
        - TargetGroupArn
        - TargetGroupName
        - TargetGroupFullName
      x-tagging:
        taggable: true
        tagOnCreate: false
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:DescribeTags
          - elasticloadbalancing:RemoveTags
      x-required-permissions:
        create:
          - elasticloadbalancing:CreateTargetGroup
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:ModifyTargetGroupAttributes
          - elasticloadbalancing:DescribeTargetHealth
          - elasticloadbalancing:AddTags
        delete:
          - elasticloadbalancing:DeleteTargetGroup
          - elasticloadbalancing:DescribeTargetGroups
        list:
          - elasticloadbalancing:DescribeTargetGroups
        read:
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:DescribeTargetGroupAttributes
          - elasticloadbalancing:DescribeTargetHealth
          - elasticloadbalancing:DescribeTags
        update:
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:ModifyTargetGroup
          - elasticloadbalancing:ModifyTargetGroupAttributes
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:DescribeTargetHealth
          - elasticloadbalancing:DeregisterTargets
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:RemoveTags
    TrustStore:
      type: object
      properties:
        Name:
          type: string
          description: The name of the trust store.
        CaCertificatesBundleS3Bucket:
          type: string
          description: The name of the S3 bucket to fetch the CA certificate bundle from.
        CaCertificatesBundleS3Key:
          type: string
          description: The name of the S3 object to fetch the CA certificate bundle from.
        CaCertificatesBundleS3ObjectVersion:
          type: string
          description: The version of the S3 bucket that contains the CA certificate bundle.
        Status:
          type: string
          description: The status of the trust store, could be either of ACTIVE or CREATING.
        NumberOfCaCertificates:
          type: integer
          description: The number of certificates associated with the trust store.
        Tags:
          type: array
          description: The tags to assign to the trust store.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        TrustStoreArn:
          type: string
          description: The Amazon Resource Name (ARN) of the trust store.
      x-stackql-resource-name: trust_store
      description: Resource Type definition for AWS::ElasticLoadBalancingV2::TrustStore
      x-type-name: AWS::ElasticLoadBalancingV2::TrustStore
      x-documentation-url: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-truststore.html
      x-stackql-primary-identifier:
        - TrustStoreArn
      x-create-only-properties:
        - Name
      x-write-only-properties:
        - CaCertificatesBundleS3Bucket
        - CaCertificatesBundleS3Key
        - CaCertificatesBundleS3ObjectVersion
      x-read-only-properties:
        - TrustStoreArn
        - Status
        - NumberOfCaCertificates
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:DescribeTags
          - elasticloadbalancing:RemoveTags
      x-required-permissions:
        create:
          - elasticloadbalancing:CreateTrustStore
          - elasticloadbalancing:DescribeTrustStores
          - elasticloadbalancing:AddTags
          - s3:GetObject
          - s3:GetObjectVersion
        delete:
          - elasticloadbalancing:DescribeTrustStores
          - elasticloadbalancing:DeleteTrustStore
        list:
          - elasticloadbalancing:DescribeTrustStores
          - s3:GetObject
          - s3:GetObjectVersion
        read:
          - elasticloadbalancing:DescribeTrustStores
          - elasticloadbalancing:DescribeTags
        update:
          - elasticloadbalancing:ModifyTrustStore
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:RemoveTags
          - s3:GetObject
          - s3:GetObjectVersion
    RevocationId:
      type: string
    RevocationContent:
      type: object
      additionalProperties: false
      properties:
        S3Bucket:
          type: string
        S3Key:
          type: string
        S3ObjectVersion:
          type: string
        RevocationType:
          type: string
    TrustStoreRevocation:
      type: object
      properties:
        RevocationContents:
          type: array
          description: The attributes required to create a trust store revocation.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/RevocationContent'
        TrustStoreArn:
          type: string
          description: The Amazon Resource Name (ARN) of the trust store.
        RevocationId:
          type: integer
          format: int64
          description: The ID associated with the revocation.
        TrustStoreRevocations:
          type: array
          description: The data associated with a trust store revocation
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TrustStoreRevocation'
      x-stackql-resource-name: trust_store_revocation
      description: Resource Type definition for AWS::ElasticLoadBalancingV2::TrustStoreRevocation
      x-type-name: AWS::ElasticLoadBalancingV2::TrustStoreRevocation
      x-documentation-url: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-truststorerevocation.html
      x-stackql-primary-identifier:
        - RevocationId
        - TrustStoreArn
      x-create-only-properties:
        - TrustStoreArn
        - RevocationContents
      x-write-only-properties:
        - RevocationContents
      x-read-only-properties:
        - RevocationId
        - TrustStoreRevocations
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - elasticloadbalancing:AddTrustStoreRevocations
          - elasticloadbalancing:DescribeTrustStoreRevocations
          - s3:GetObject
          - s3:GetObjectVersion
        delete:
          - elasticloadbalancing:DescribeTrustStoreRevocations
          - elasticloadbalancing:RemoveTrustStoreRevocations
        list:
          - elasticloadbalancing:DescribeTrustStoreRevocations
        read:
          - elasticloadbalancing:DescribeTrustStoreRevocations
    CreateListenerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ListenerArn:
              description: ''
              type: string
            MutualAuthentication:
              description: The mutual authentication configuration information.
              $ref: '#/components/schemas/MutualAuthentication'
            ListenerAttributes:
              x-arrayType: AttributeList
              uniqueItems: true
              description: The listener attributes.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/ListenerAttribute'
            AlpnPolicy:
              description: '[TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN) policy.'
              type: array
              items:
                type: string
            SslPolicy:
              description: |-
                [HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.
                 Updating the security policy can result in interruptions if the load balancer is handling a high volume of traffic.
                 For more information, see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies) in the *Application Load Balancers Guide* and [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies) in the *Network Load Balancers Guide*.
              type: string
            LoadBalancerArn:
              description: The Amazon Resource Name (ARN) of the load balancer.
              type: string
            DefaultActions:
              uniqueItems: true
              description: |-
                The actions for the default rule. You cannot define a condition for a default rule.
                 To create additional rules for an Application Load Balancer, use [AWS::ElasticLoadBalancingV2::ListenerRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html).
              type: array
              items:
                $ref: '#/components/schemas/Action'
            Port:
              description: The port on which the load balancer is listening. You can't specify a port for a Gateway Load Balancer.
              type: integer
            Certificates:
              uniqueItems: true
              description: |-
                The default SSL server certificate for a secure listener. You must provide exactly one certificate if the listener protocol is HTTPS or TLS.
                 To create a certificate list for a secure listener, use [AWS::ElasticLoadBalancingV2::ListenerCertificate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html).
              type: array
              items:
                $ref: '#/components/schemas/Certificate'
            Protocol:
              description: The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You can't specify a protocol for a Gateway Load Balancer.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateListenerRequest
      type: object
      required: []
    CreateListenerRuleRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ListenerArn:
              type: string
              description: The Amazon Resource Name (ARN) of the listener.
            RuleArn:
              type: string
              description: ''
            Actions:
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Action'
              description: |-
                The actions.
                 The rule must include exactly one of the following types of actions: ``forward``, ``fixed-response``, or ``redirect``, and it must be the last action to be performed. If the rule is for an HTTPS listener, it can also optionally include an authentication action.
            Priority:
              type: integer
              description: |-
                The rule priority. A listener can't have multiple rules with the same priority.
                 If you try to reorder rules by updating their priorities, do not specify a new priority if an existing rule already uses this priority, as this can cause an error. If you need to reuse a priority with a different rule, you must remove it as a priority first, and then specify it in a subsequent update.
            Conditions:
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/RuleCondition'
              description: |-
                The conditions.
                 The rule can optionally include up to one of each of the following conditions: ``http-request-method``, ``host-header``, ``path-pattern``, and ``source-ip``. A rule can also optionally include one or more of each of the following conditions: ``http-header`` and ``query-string``.
            IsDefault:
              type: boolean
              description: ''
          x-stackQL-stringOnly: true
      x-title: CreateListenerRuleRequest
      type: object
      required: []
    CreateLoadBalancerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IpAddressType:
              type: string
              description: |-
                The IP address type. Internal load balancers must use ``ipv4``.
                 [Application Load Balancers] The possible values are ``ipv4`` (IPv4 addresses), ``dualstack`` (IPv4 and IPv6 addresses), and ``dualstack-without-public-ipv4`` (public IPv6 addresses and private IPv4 and IPv6 addresses).
                 Application Load Balancer authentication supports IPv4 addresses only when connecting to an Identity Provider (IdP) or Amazon Cognito endpoint. Without a public IPv4 address the load balancer can't complete the authentication process, resulting in HTTP 500 errors.
                 [Network Load Balancers and Gateway Load Balancers] The possible values are ``ipv4`` (IPv4 addresses) and ``dualstack`` (IPv4 and IPv6 addresses).
            EnablePrefixForIpv6SourceNat:
              type: string
              description: '[Network Load Balancers with UDP listeners] Indicates whether to use an IPv6 prefix from each subnet for source NAT. The IP address type must be ``dualstack``. The default value is ``off``.'
            SecurityGroups:
              type: array
              description: '[Application Load Balancers and Network Load Balancers] The IDs of the security groups for the load balancer.'
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            LoadBalancerAttributes:
              type: array
              description: The load balancer attributes.
              uniqueItems: true
              x-insertionOrder: false
              x-arrayType: AttributeList
              items:
                $ref: '#/components/schemas/LoadBalancerAttribute'
            MinimumLoadBalancerCapacity:
              type: object
              description: ''
              $ref: '#/components/schemas/MinimumLoadBalancerCapacity'
            Scheme:
              type: string
              description: |-
                The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet.
                 The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.
                 The default is an Internet-facing load balancer.
                 You can't specify a scheme for a Gateway Load Balancer.
            DNSName:
              type: string
              description: ''
            Name:
              type: string
              description: |-
                The name of the load balancer. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-".
                 If you don't specify a name, AWS CloudFormation generates a unique physical ID for the load balancer. If you specify a name, you cannot perform updates that require replacement of this resource, but you can perform other updates. To replace the resource, specify a new name.
            LoadBalancerName:
              type: string
              description: ''
            LoadBalancerFullName:
              type: string
              description: ''
            Subnets:
              type: array
              description: |-
                The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets.
                 [Application Load Balancers] You must specify subnets from at least two Availability Zones.
                 [Application Load Balancers on Outposts] You must specify one Outpost subnet.
                 [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.
                 [Network Load Balancers and Gateway Load Balancers] You can specify subnets from one or more Availability Zones.
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            Type:
              type: string
              description: The type of load balancer. The default is ``application``.
            CanonicalHostedZoneID:
              type: string
              description: ''
            Tags:
              type: array
              description: The tags to assign to the load balancer.
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            LoadBalancerArn:
              type: string
              description: ''
            SubnetMappings:
              type: array
              description: |-
                The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both.
                 [Application Load Balancers] You must specify subnets from at least two Availability Zones. You can't specify Elastic IP addresses for your subnets.
                 [Application Load Balancers on Outposts] You must specify one Outpost subnet.
                 [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.
                 [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.
                 [Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You can't specify Elastic IP addresses for your subnets.
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SubnetMapping'
            EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic:
              type: string
              description: Indicates whether to evaluate inbound security group rules for traffic sent to a Network Load Balancer through privatelink.
          x-stackQL-stringOnly: true
      x-title: CreateLoadBalancerRequest
      type: object
      required: []
    CreateTargetGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IpAddressType:
              type: string
              description: 'The type of IP address used for this target group. The possible values are ipv4 and ipv6. '
            HealthCheckIntervalSeconds:
              type: integer
              description: The approximate amount of time, in seconds, between health checks of an individual target.
            LoadBalancerArns:
              type: array
              x-insertionOrder: false
              description: The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
              uniqueItems: false
              items:
                type: string
            Matcher:
              $ref: '#/components/schemas/Matcher'
              description: '[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.'
            HealthCheckPath:
              type: string
              description: '[HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /AWS.ALB/healthcheck.'
            Port:
              type: integer
              description: The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
            Targets:
              type: array
              description: The targets.
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/TargetDescription'
            HealthCheckEnabled:
              type: boolean
              description: Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
            ProtocolVersion:
              type: string
              description: '[HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.'
            UnhealthyThresholdCount:
              type: integer
              description: The number of consecutive health check failures required before considering a target unhealthy.
            HealthCheckTimeoutSeconds:
              type: integer
              description: The amount of time, in seconds, during which no response from a target means a failed health check.
            Name:
              type: string
              description: The name of the target group.
            VpcId:
              type: string
              description: The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
            TargetGroupFullName:
              type: string
              description: The full name of the target group.
            HealthyThresholdCount:
              type: integer
              description: 'The number of consecutive health checks successes required before considering an unhealthy target healthy. '
            HealthCheckProtocol:
              type: string
              description: 'The protocol the load balancer uses when performing health checks on targets. '
            TargetGroupAttributes:
              type: array
              x-arrayType: AttributeList
              description: The attributes.
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/TargetGroupAttribute'
            TargetType:
              type: string
              description: The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.
            HealthCheckPort:
              type: string
              description: 'The port the load balancer uses when performing health checks on targets. '
            TargetGroupArn:
              type: string
              description: The ARN of the Target Group
            Protocol:
              type: string
              description: The protocol to use for routing traffic to the targets.
            TargetGroupName:
              type: string
              description: The name of the target group.
            Tags:
              type: array
              description: The tags.
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateTargetGroupRequest
      type: object
      required: []
    CreateTrustStoreRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              type: string
              description: The name of the trust store.
            CaCertificatesBundleS3Bucket:
              type: string
              description: The name of the S3 bucket to fetch the CA certificate bundle from.
            CaCertificatesBundleS3Key:
              type: string
              description: The name of the S3 object to fetch the CA certificate bundle from.
            CaCertificatesBundleS3ObjectVersion:
              type: string
              description: The version of the S3 bucket that contains the CA certificate bundle.
            Status:
              type: string
              description: The status of the trust store, could be either of ACTIVE or CREATING.
            NumberOfCaCertificates:
              type: integer
              description: The number of certificates associated with the trust store.
            Tags:
              type: array
              description: The tags to assign to the trust store.
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            TrustStoreArn:
              type: string
              description: The Amazon Resource Name (ARN) of the trust store.
          x-stackQL-stringOnly: true
      x-title: CreateTrustStoreRequest
      type: object
      required: []
    CreateTrustStoreRevocationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RevocationContents:
              type: array
              description: The attributes required to create a trust store revocation.
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/RevocationContent'
            TrustStoreArn:
              type: string
              description: The Amazon Resource Name (ARN) of the trust store.
            RevocationId:
              type: integer
              format: int64
              description: The ID associated with the revocation.
            TrustStoreRevocations:
              type: array
              description: The data associated with a trust store revocation
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/TrustStoreRevocation'
          x-stackQL-stringOnly: true
      x-title: CreateTrustStoreRevocationRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    listeners:
      name: listeners
      id: aws.elasticloadbalancingv2.listeners
      x-cfn-schema-name: Listener
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::Listener
      x-identifiers:
        - ListenerArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Listener&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::Listener"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::Listener"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::Listener"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/listeners/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/listeners/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/listeners/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ListenerArn') as listener_arn,
              JSON_EXTRACT(Properties, '$.MutualAuthentication') as mutual_authentication,
              JSON_EXTRACT(Properties, '$.ListenerAttributes') as listener_attributes,
              JSON_EXTRACT(Properties, '$.AlpnPolicy') as alpn_policy,
              JSON_EXTRACT(Properties, '$.SslPolicy') as ssl_policy,
              JSON_EXTRACT(Properties, '$.LoadBalancerArn') as load_balancer_arn,
              JSON_EXTRACT(Properties, '$.DefaultActions') as default_actions,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Certificates') as certificates,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
              AND data__Identifier = '<ListenerArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ListenerArn') as listener_arn,
                JSON_EXTRACT(detail.Properties, '$.MutualAuthentication') as mutual_authentication,
                JSON_EXTRACT(detail.Properties, '$.ListenerAttributes') as listener_attributes,
                JSON_EXTRACT(detail.Properties, '$.AlpnPolicy') as alpn_policy,
                JSON_EXTRACT(detail.Properties, '$.SslPolicy') as ssl_policy,
                JSON_EXTRACT(detail.Properties, '$.LoadBalancerArn') as load_balancer_arn,
                JSON_EXTRACT(detail.Properties, '$.DefaultActions') as default_actions,
                JSON_EXTRACT(detail.Properties, '$.Port') as port,
                JSON_EXTRACT(detail.Properties, '$.Certificates') as certificates,
                JSON_EXTRACT(detail.Properties, '$.Protocol') as protocol
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
                AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ListenerArn') as listener_arn,
                  json_extract_path_text(Properties, 'MutualAuthentication') as mutual_authentication,
                  json_extract_path_text(Properties, 'ListenerAttributes') as listener_attributes,
                  json_extract_path_text(Properties, 'AlpnPolicy') as alpn_policy,
                  json_extract_path_text(Properties, 'SslPolicy') as ssl_policy,
                  json_extract_path_text(Properties, 'LoadBalancerArn') as load_balancer_arn,
                  json_extract_path_text(Properties, 'DefaultActions') as default_actions,
                  json_extract_path_text(Properties, 'Port') as port,
                  json_extract_path_text(Properties, 'Certificates') as certificates,
                  json_extract_path_text(Properties, 'Protocol') as protocol
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
                  AND data__Identifier = '<ListenerArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ListenerArn') as listener_arn,
                    json_extract_path_text(detail.Properties, 'MutualAuthentication') as mutual_authentication,
                    json_extract_path_text(detail.Properties, 'ListenerAttributes') as listener_attributes,
                    json_extract_path_text(detail.Properties, 'AlpnPolicy') as alpn_policy,
                    json_extract_path_text(detail.Properties, 'SslPolicy') as ssl_policy,
                    json_extract_path_text(detail.Properties, 'LoadBalancerArn') as load_balancer_arn,
                    json_extract_path_text(detail.Properties, 'DefaultActions') as default_actions,
                    json_extract_path_text(detail.Properties, 'Port') as port,
                    json_extract_path_text(detail.Properties, 'Certificates') as certificates,
                    json_extract_path_text(detail.Properties, 'Protocol') as protocol
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
                    AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
                    AND listing.region = 'us-east-1'
    listeners_list_only:
      name: listeners_list_only
      id: aws.elasticloadbalancingv2.listeners_list_only
      x-cfn-schema-name: Listener
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::Listener
      x-identifiers:
        - ListenerArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ListenerArn') as listener_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ListenerArn') as listener_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
                AND region = 'us-east-1'
    listener_rules:
      name: listener_rules
      id: aws.elasticloadbalancingv2.listener_rules
      x-cfn-schema-name: ListenerRule
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::ListenerRule
      x-identifiers:
        - RuleArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ListenerRule&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::ListenerRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::ListenerRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::ListenerRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/listener_rules/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/listener_rules/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/listener_rules/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ListenerArn') as listener_arn,
              JSON_EXTRACT(Properties, '$.RuleArn') as rule_arn,
              JSON_EXTRACT(Properties, '$.Actions') as actions,
              JSON_EXTRACT(Properties, '$.Priority') as priority,
              JSON_EXTRACT(Properties, '$.Conditions') as conditions,
              JSON_EXTRACT(Properties, '$.IsDefault') as is_default
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
              AND data__Identifier = '<RuleArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ListenerArn') as listener_arn,
                JSON_EXTRACT(detail.Properties, '$.RuleArn') as rule_arn,
                JSON_EXTRACT(detail.Properties, '$.Actions') as actions,
                JSON_EXTRACT(detail.Properties, '$.Priority') as priority,
                JSON_EXTRACT(detail.Properties, '$.Conditions') as conditions,
                JSON_EXTRACT(detail.Properties, '$.IsDefault') as is_default
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
                AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ListenerArn') as listener_arn,
                  json_extract_path_text(Properties, 'RuleArn') as rule_arn,
                  json_extract_path_text(Properties, 'Actions') as actions,
                  json_extract_path_text(Properties, 'Priority') as priority,
                  json_extract_path_text(Properties, 'Conditions') as conditions,
                  json_extract_path_text(Properties, 'IsDefault') as is_default
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
                  AND data__Identifier = '<RuleArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ListenerArn') as listener_arn,
                    json_extract_path_text(detail.Properties, 'RuleArn') as rule_arn,
                    json_extract_path_text(detail.Properties, 'Actions') as actions,
                    json_extract_path_text(detail.Properties, 'Priority') as priority,
                    json_extract_path_text(detail.Properties, 'Conditions') as conditions,
                    json_extract_path_text(detail.Properties, 'IsDefault') as is_default
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
                    AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
                    AND listing.region = 'us-east-1'
    listener_rules_list_only:
      name: listener_rules_list_only
      id: aws.elasticloadbalancingv2.listener_rules_list_only
      x-cfn-schema-name: ListenerRule
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::ListenerRule
      x-identifiers:
        - RuleArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RuleArn') as rule_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RuleArn') as rule_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
                AND region = 'us-east-1'
    load_balancers:
      name: load_balancers
      id: aws.elasticloadbalancingv2.load_balancers
      x-cfn-schema-name: LoadBalancer
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::LoadBalancer
      x-identifiers:
        - LoadBalancerArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LoadBalancer&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::LoadBalancer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::LoadBalancer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::LoadBalancer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/load_balancers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/load_balancers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/load_balancers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(Properties, '$.EnablePrefixForIpv6SourceNat') as enable_prefix_for_ipv6_source_nat,
              JSON_EXTRACT(Properties, '$.SecurityGroups') as security_groups,
              JSON_EXTRACT(Properties, '$.LoadBalancerAttributes') as load_balancer_attributes,
              JSON_EXTRACT(Properties, '$.MinimumLoadBalancerCapacity') as minimum_load_balancer_capacity,
              JSON_EXTRACT(Properties, '$.Scheme') as scheme,
              JSON_EXTRACT(Properties, '$.DNSName') as dns_name,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.LoadBalancerName') as load_balancer_name,
              JSON_EXTRACT(Properties, '$.LoadBalancerFullName') as load_balancer_full_name,
              JSON_EXTRACT(Properties, '$.Subnets') as subnets,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.CanonicalHostedZoneID') as canonical_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.LoadBalancerArn') as load_balancer_arn,
              JSON_EXTRACT(Properties, '$.SubnetMappings') as subnet_mappings,
              JSON_EXTRACT(Properties, '$.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic') as enforce_security_group_inbound_rules_on_private_link_traffic
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
              AND data__Identifier = '<LoadBalancerArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
                JSON_EXTRACT(detail.Properties, '$.EnablePrefixForIpv6SourceNat') as enable_prefix_for_ipv6_source_nat,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroups') as security_groups,
                JSON_EXTRACT(detail.Properties, '$.LoadBalancerAttributes') as load_balancer_attributes,
                JSON_EXTRACT(detail.Properties, '$.MinimumLoadBalancerCapacity') as minimum_load_balancer_capacity,
                JSON_EXTRACT(detail.Properties, '$.Scheme') as scheme,
                JSON_EXTRACT(detail.Properties, '$.DNSName') as dns_name,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.LoadBalancerName') as load_balancer_name,
                JSON_EXTRACT(detail.Properties, '$.LoadBalancerFullName') as load_balancer_full_name,
                JSON_EXTRACT(detail.Properties, '$.Subnets') as subnets,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.CanonicalHostedZoneID') as canonical_hosted_zone_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.LoadBalancerArn') as load_balancer_arn,
                JSON_EXTRACT(detail.Properties, '$.SubnetMappings') as subnet_mappings,
                JSON_EXTRACT(detail.Properties, '$.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic') as enforce_security_group_inbound_rules_on_private_link_traffic
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
                AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IpAddressType') as ip_address_type,
                  json_extract_path_text(Properties, 'EnablePrefixForIpv6SourceNat') as enable_prefix_for_ipv6_source_nat,
                  json_extract_path_text(Properties, 'SecurityGroups') as security_groups,
                  json_extract_path_text(Properties, 'LoadBalancerAttributes') as load_balancer_attributes,
                  json_extract_path_text(Properties, 'MinimumLoadBalancerCapacity') as minimum_load_balancer_capacity,
                  json_extract_path_text(Properties, 'Scheme') as scheme,
                  json_extract_path_text(Properties, 'DNSName') as dns_name,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'LoadBalancerName') as load_balancer_name,
                  json_extract_path_text(Properties, 'LoadBalancerFullName') as load_balancer_full_name,
                  json_extract_path_text(Properties, 'Subnets') as subnets,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'CanonicalHostedZoneID') as canonical_hosted_zone_id,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'LoadBalancerArn') as load_balancer_arn,
                  json_extract_path_text(Properties, 'SubnetMappings') as subnet_mappings,
                  json_extract_path_text(Properties, 'EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic') as enforce_security_group_inbound_rules_on_private_link_traffic
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
                  AND data__Identifier = '<LoadBalancerArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                    json_extract_path_text(detail.Properties, 'EnablePrefixForIpv6SourceNat') as enable_prefix_for_ipv6_source_nat,
                    json_extract_path_text(detail.Properties, 'SecurityGroups') as security_groups,
                    json_extract_path_text(detail.Properties, 'LoadBalancerAttributes') as load_balancer_attributes,
                    json_extract_path_text(detail.Properties, 'MinimumLoadBalancerCapacity') as minimum_load_balancer_capacity,
                    json_extract_path_text(detail.Properties, 'Scheme') as scheme,
                    json_extract_path_text(detail.Properties, 'DNSName') as dns_name,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'LoadBalancerName') as load_balancer_name,
                    json_extract_path_text(detail.Properties, 'LoadBalancerFullName') as load_balancer_full_name,
                    json_extract_path_text(detail.Properties, 'Subnets') as subnets,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'CanonicalHostedZoneID') as canonical_hosted_zone_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'LoadBalancerArn') as load_balancer_arn,
                    json_extract_path_text(detail.Properties, 'SubnetMappings') as subnet_mappings,
                    json_extract_path_text(detail.Properties, 'EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic') as enforce_security_group_inbound_rules_on_private_link_traffic
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
                    AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
                    AND listing.region = 'us-east-1'
    load_balancers_list_only:
      name: load_balancers_list_only
      id: aws.elasticloadbalancingv2.load_balancers_list_only
      x-cfn-schema-name: LoadBalancer
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::LoadBalancer
      x-identifiers:
        - LoadBalancerArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LoadBalancerArn') as load_balancer_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LoadBalancerArn') as load_balancer_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
                AND region = 'us-east-1'
    load_balancer_tags:
      name: load_balancer_tags
      id: aws.elasticloadbalancingv2.load_balancer_tags
      x-cfn-schema-name: LoadBalancer
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::LoadBalancer
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(detail.Properties, '$.EnablePrefixForIpv6SourceNat') as enable_prefix_for_ipv6_source_nat,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroups') as security_groups,
              JSON_EXTRACT(detail.Properties, '$.LoadBalancerAttributes') as load_balancer_attributes,
              JSON_EXTRACT(detail.Properties, '$.MinimumLoadBalancerCapacity') as minimum_load_balancer_capacity,
              JSON_EXTRACT(detail.Properties, '$.Scheme') as scheme,
              JSON_EXTRACT(detail.Properties, '$.DNSName') as dns_name,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.LoadBalancerName') as load_balancer_name,
              JSON_EXTRACT(detail.Properties, '$.LoadBalancerFullName') as load_balancer_full_name,
              JSON_EXTRACT(detail.Properties, '$.Subnets') as subnets,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.CanonicalHostedZoneID') as canonical_hosted_zone_id,
              JSON_EXTRACT(detail.Properties, '$.LoadBalancerArn') as load_balancer_arn,
              JSON_EXTRACT(detail.Properties, '$.SubnetMappings') as subnet_mappings,
              JSON_EXTRACT(detail.Properties, '$.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic') as enforce_security_group_inbound_rules_on_private_link_traffic
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
              AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                json_extract_path_text(detail.Properties, 'EnablePrefixForIpv6SourceNat') as enable_prefix_for_ipv6_source_nat,
                json_extract_path_text(detail.Properties, 'SecurityGroups') as security_groups,
                json_extract_path_text(detail.Properties, 'LoadBalancerAttributes') as load_balancer_attributes,
                json_extract_path_text(detail.Properties, 'MinimumLoadBalancerCapacity') as minimum_load_balancer_capacity,
                json_extract_path_text(detail.Properties, 'Scheme') as scheme,
                json_extract_path_text(detail.Properties, 'DNSName') as dns_name,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'LoadBalancerName') as load_balancer_name,
                json_extract_path_text(detail.Properties, 'LoadBalancerFullName') as load_balancer_full_name,
                json_extract_path_text(detail.Properties, 'Subnets') as subnets,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'CanonicalHostedZoneID') as canonical_hosted_zone_id,
                json_extract_path_text(detail.Properties, 'LoadBalancerArn') as load_balancer_arn,
                json_extract_path_text(detail.Properties, 'SubnetMappings') as subnet_mappings,
                json_extract_path_text(detail.Properties, 'EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic') as enforce_security_group_inbound_rules_on_private_link_traffic
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
                AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
                AND listing.region = 'us-east-1'
    target_groups:
      name: target_groups
      id: aws.elasticloadbalancingv2.target_groups
      x-cfn-schema-name: TargetGroup
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::TargetGroup
      x-identifiers:
        - TargetGroupArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TargetGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::TargetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::TargetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::TargetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/target_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/target_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/target_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(Properties, '$.HealthCheckIntervalSeconds') as health_check_interval_seconds,
              JSON_EXTRACT(Properties, '$.LoadBalancerArns') as load_balancer_arns,
              JSON_EXTRACT(Properties, '$.Matcher') as matcher,
              JSON_EXTRACT(Properties, '$.HealthCheckPath') as health_check_path,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Targets') as targets,
              JSON_EXTRACT(Properties, '$.HealthCheckEnabled') as health_check_enabled,
              JSON_EXTRACT(Properties, '$.ProtocolVersion') as protocol_version,
              JSON_EXTRACT(Properties, '$.UnhealthyThresholdCount') as unhealthy_threshold_count,
              JSON_EXTRACT(Properties, '$.HealthCheckTimeoutSeconds') as health_check_timeout_seconds,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.TargetGroupFullName') as target_group_full_name,
              JSON_EXTRACT(Properties, '$.HealthyThresholdCount') as healthy_threshold_count,
              JSON_EXTRACT(Properties, '$.HealthCheckProtocol') as health_check_protocol,
              JSON_EXTRACT(Properties, '$.TargetGroupAttributes') as target_group_attributes,
              JSON_EXTRACT(Properties, '$.TargetType') as target_type,
              JSON_EXTRACT(Properties, '$.HealthCheckPort') as health_check_port,
              JSON_EXTRACT(Properties, '$.TargetGroupArn') as target_group_arn,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.TargetGroupName') as target_group_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
              AND data__Identifier = '<TargetGroupArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
                JSON_EXTRACT(detail.Properties, '$.HealthCheckIntervalSeconds') as health_check_interval_seconds,
                JSON_EXTRACT(detail.Properties, '$.LoadBalancerArns') as load_balancer_arns,
                JSON_EXTRACT(detail.Properties, '$.Matcher') as matcher,
                JSON_EXTRACT(detail.Properties, '$.HealthCheckPath') as health_check_path,
                JSON_EXTRACT(detail.Properties, '$.Port') as port,
                JSON_EXTRACT(detail.Properties, '$.Targets') as targets,
                JSON_EXTRACT(detail.Properties, '$.HealthCheckEnabled') as health_check_enabled,
                JSON_EXTRACT(detail.Properties, '$.ProtocolVersion') as protocol_version,
                JSON_EXTRACT(detail.Properties, '$.UnhealthyThresholdCount') as unhealthy_threshold_count,
                JSON_EXTRACT(detail.Properties, '$.HealthCheckTimeoutSeconds') as health_check_timeout_seconds,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.TargetGroupFullName') as target_group_full_name,
                JSON_EXTRACT(detail.Properties, '$.HealthyThresholdCount') as healthy_threshold_count,
                JSON_EXTRACT(detail.Properties, '$.HealthCheckProtocol') as health_check_protocol,
                JSON_EXTRACT(detail.Properties, '$.TargetGroupAttributes') as target_group_attributes,
                JSON_EXTRACT(detail.Properties, '$.TargetType') as target_type,
                JSON_EXTRACT(detail.Properties, '$.HealthCheckPort') as health_check_port,
                JSON_EXTRACT(detail.Properties, '$.TargetGroupArn') as target_group_arn,
                JSON_EXTRACT(detail.Properties, '$.Protocol') as protocol,
                JSON_EXTRACT(detail.Properties, '$.TargetGroupName') as target_group_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
                AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IpAddressType') as ip_address_type,
                  json_extract_path_text(Properties, 'HealthCheckIntervalSeconds') as health_check_interval_seconds,
                  json_extract_path_text(Properties, 'LoadBalancerArns') as load_balancer_arns,
                  json_extract_path_text(Properties, 'Matcher') as matcher,
                  json_extract_path_text(Properties, 'HealthCheckPath') as health_check_path,
                  json_extract_path_text(Properties, 'Port') as port,
                  json_extract_path_text(Properties, 'Targets') as targets,
                  json_extract_path_text(Properties, 'HealthCheckEnabled') as health_check_enabled,
                  json_extract_path_text(Properties, 'ProtocolVersion') as protocol_version,
                  json_extract_path_text(Properties, 'UnhealthyThresholdCount') as unhealthy_threshold_count,
                  json_extract_path_text(Properties, 'HealthCheckTimeoutSeconds') as health_check_timeout_seconds,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'TargetGroupFullName') as target_group_full_name,
                  json_extract_path_text(Properties, 'HealthyThresholdCount') as healthy_threshold_count,
                  json_extract_path_text(Properties, 'HealthCheckProtocol') as health_check_protocol,
                  json_extract_path_text(Properties, 'TargetGroupAttributes') as target_group_attributes,
                  json_extract_path_text(Properties, 'TargetType') as target_type,
                  json_extract_path_text(Properties, 'HealthCheckPort') as health_check_port,
                  json_extract_path_text(Properties, 'TargetGroupArn') as target_group_arn,
                  json_extract_path_text(Properties, 'Protocol') as protocol,
                  json_extract_path_text(Properties, 'TargetGroupName') as target_group_name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
                  AND data__Identifier = '<TargetGroupArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                    json_extract_path_text(detail.Properties, 'HealthCheckIntervalSeconds') as health_check_interval_seconds,
                    json_extract_path_text(detail.Properties, 'LoadBalancerArns') as load_balancer_arns,
                    json_extract_path_text(detail.Properties, 'Matcher') as matcher,
                    json_extract_path_text(detail.Properties, 'HealthCheckPath') as health_check_path,
                    json_extract_path_text(detail.Properties, 'Port') as port,
                    json_extract_path_text(detail.Properties, 'Targets') as targets,
                    json_extract_path_text(detail.Properties, 'HealthCheckEnabled') as health_check_enabled,
                    json_extract_path_text(detail.Properties, 'ProtocolVersion') as protocol_version,
                    json_extract_path_text(detail.Properties, 'UnhealthyThresholdCount') as unhealthy_threshold_count,
                    json_extract_path_text(detail.Properties, 'HealthCheckTimeoutSeconds') as health_check_timeout_seconds,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'TargetGroupFullName') as target_group_full_name,
                    json_extract_path_text(detail.Properties, 'HealthyThresholdCount') as healthy_threshold_count,
                    json_extract_path_text(detail.Properties, 'HealthCheckProtocol') as health_check_protocol,
                    json_extract_path_text(detail.Properties, 'TargetGroupAttributes') as target_group_attributes,
                    json_extract_path_text(detail.Properties, 'TargetType') as target_type,
                    json_extract_path_text(detail.Properties, 'HealthCheckPort') as health_check_port,
                    json_extract_path_text(detail.Properties, 'TargetGroupArn') as target_group_arn,
                    json_extract_path_text(detail.Properties, 'Protocol') as protocol,
                    json_extract_path_text(detail.Properties, 'TargetGroupName') as target_group_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
                    AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
                    AND listing.region = 'us-east-1'
    target_groups_list_only:
      name: target_groups_list_only
      id: aws.elasticloadbalancingv2.target_groups_list_only
      x-cfn-schema-name: TargetGroup
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::TargetGroup
      x-identifiers:
        - TargetGroupArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TargetGroupArn') as target_group_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TargetGroupArn') as target_group_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
                AND region = 'us-east-1'
    target_group_tags:
      name: target_group_tags
      id: aws.elasticloadbalancingv2.target_group_tags
      x-cfn-schema-name: TargetGroup
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::TargetGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(detail.Properties, '$.HealthCheckIntervalSeconds') as health_check_interval_seconds,
              JSON_EXTRACT(detail.Properties, '$.LoadBalancerArns') as load_balancer_arns,
              JSON_EXTRACT(detail.Properties, '$.Matcher') as matcher,
              JSON_EXTRACT(detail.Properties, '$.HealthCheckPath') as health_check_path,
              JSON_EXTRACT(detail.Properties, '$.Port') as port,
              JSON_EXTRACT(detail.Properties, '$.Targets') as targets,
              JSON_EXTRACT(detail.Properties, '$.HealthCheckEnabled') as health_check_enabled,
              JSON_EXTRACT(detail.Properties, '$.ProtocolVersion') as protocol_version,
              JSON_EXTRACT(detail.Properties, '$.UnhealthyThresholdCount') as unhealthy_threshold_count,
              JSON_EXTRACT(detail.Properties, '$.HealthCheckTimeoutSeconds') as health_check_timeout_seconds,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.TargetGroupFullName') as target_group_full_name,
              JSON_EXTRACT(detail.Properties, '$.HealthyThresholdCount') as healthy_threshold_count,
              JSON_EXTRACT(detail.Properties, '$.HealthCheckProtocol') as health_check_protocol,
              JSON_EXTRACT(detail.Properties, '$.TargetGroupAttributes') as target_group_attributes,
              JSON_EXTRACT(detail.Properties, '$.TargetType') as target_type,
              JSON_EXTRACT(detail.Properties, '$.HealthCheckPort') as health_check_port,
              JSON_EXTRACT(detail.Properties, '$.TargetGroupArn') as target_group_arn,
              JSON_EXTRACT(detail.Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(detail.Properties, '$.TargetGroupName') as target_group_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
              AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                json_extract_path_text(detail.Properties, 'HealthCheckIntervalSeconds') as health_check_interval_seconds,
                json_extract_path_text(detail.Properties, 'LoadBalancerArns') as load_balancer_arns,
                json_extract_path_text(detail.Properties, 'Matcher') as matcher,
                json_extract_path_text(detail.Properties, 'HealthCheckPath') as health_check_path,
                json_extract_path_text(detail.Properties, 'Port') as port,
                json_extract_path_text(detail.Properties, 'Targets') as targets,
                json_extract_path_text(detail.Properties, 'HealthCheckEnabled') as health_check_enabled,
                json_extract_path_text(detail.Properties, 'ProtocolVersion') as protocol_version,
                json_extract_path_text(detail.Properties, 'UnhealthyThresholdCount') as unhealthy_threshold_count,
                json_extract_path_text(detail.Properties, 'HealthCheckTimeoutSeconds') as health_check_timeout_seconds,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'TargetGroupFullName') as target_group_full_name,
                json_extract_path_text(detail.Properties, 'HealthyThresholdCount') as healthy_threshold_count,
                json_extract_path_text(detail.Properties, 'HealthCheckProtocol') as health_check_protocol,
                json_extract_path_text(detail.Properties, 'TargetGroupAttributes') as target_group_attributes,
                json_extract_path_text(detail.Properties, 'TargetType') as target_type,
                json_extract_path_text(detail.Properties, 'HealthCheckPort') as health_check_port,
                json_extract_path_text(detail.Properties, 'TargetGroupArn') as target_group_arn,
                json_extract_path_text(detail.Properties, 'Protocol') as protocol,
                json_extract_path_text(detail.Properties, 'TargetGroupName') as target_group_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
                AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
                AND listing.region = 'us-east-1'
    trust_stores:
      name: trust_stores
      id: aws.elasticloadbalancingv2.trust_stores
      x-cfn-schema-name: TrustStore
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::TrustStore
      x-identifiers:
        - TrustStoreArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TrustStore&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::TrustStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::TrustStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::TrustStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/trust_stores/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/trust_stores/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/trust_stores/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.CaCertificatesBundleS3Bucket') as ca_certificates_bundle_s3_bucket,
              JSON_EXTRACT(Properties, '$.CaCertificatesBundleS3Key') as ca_certificates_bundle_s3_key,
              JSON_EXTRACT(Properties, '$.CaCertificatesBundleS3ObjectVersion') as ca_certificates_bundle_s3_object_version,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.NumberOfCaCertificates') as number_of_ca_certificates,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TrustStoreArn') as trust_store_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
              AND data__Identifier = '<TrustStoreArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.CaCertificatesBundleS3Bucket') as ca_certificates_bundle_s3_bucket,
                JSON_EXTRACT(detail.Properties, '$.CaCertificatesBundleS3Key') as ca_certificates_bundle_s3_key,
                JSON_EXTRACT(detail.Properties, '$.CaCertificatesBundleS3ObjectVersion') as ca_certificates_bundle_s3_object_version,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.NumberOfCaCertificates') as number_of_ca_certificates,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.TrustStoreArn') as trust_store_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
                AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'CaCertificatesBundleS3Bucket') as ca_certificates_bundle_s3_bucket,
                  json_extract_path_text(Properties, 'CaCertificatesBundleS3Key') as ca_certificates_bundle_s3_key,
                  json_extract_path_text(Properties, 'CaCertificatesBundleS3ObjectVersion') as ca_certificates_bundle_s3_object_version,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'NumberOfCaCertificates') as number_of_ca_certificates,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'TrustStoreArn') as trust_store_arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
                  AND data__Identifier = '<TrustStoreArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'CaCertificatesBundleS3Bucket') as ca_certificates_bundle_s3_bucket,
                    json_extract_path_text(detail.Properties, 'CaCertificatesBundleS3Key') as ca_certificates_bundle_s3_key,
                    json_extract_path_text(detail.Properties, 'CaCertificatesBundleS3ObjectVersion') as ca_certificates_bundle_s3_object_version,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'NumberOfCaCertificates') as number_of_ca_certificates,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'TrustStoreArn') as trust_store_arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
                    AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
                    AND listing.region = 'us-east-1'
    trust_stores_list_only:
      name: trust_stores_list_only
      id: aws.elasticloadbalancingv2.trust_stores_list_only
      x-cfn-schema-name: TrustStore
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::TrustStore
      x-identifiers:
        - TrustStoreArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TrustStoreArn') as trust_store_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TrustStoreArn') as trust_store_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
                AND region = 'us-east-1'
    trust_store_tags:
      name: trust_store_tags
      id: aws.elasticloadbalancingv2.trust_store_tags
      x-cfn-schema-name: TrustStore
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::TrustStore
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.CaCertificatesBundleS3Bucket') as ca_certificates_bundle_s3_bucket,
              JSON_EXTRACT(detail.Properties, '$.CaCertificatesBundleS3Key') as ca_certificates_bundle_s3_key,
              JSON_EXTRACT(detail.Properties, '$.CaCertificatesBundleS3ObjectVersion') as ca_certificates_bundle_s3_object_version,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.NumberOfCaCertificates') as number_of_ca_certificates,
              JSON_EXTRACT(detail.Properties, '$.TrustStoreArn') as trust_store_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
              AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'CaCertificatesBundleS3Bucket') as ca_certificates_bundle_s3_bucket,
                json_extract_path_text(detail.Properties, 'CaCertificatesBundleS3Key') as ca_certificates_bundle_s3_key,
                json_extract_path_text(detail.Properties, 'CaCertificatesBundleS3ObjectVersion') as ca_certificates_bundle_s3_object_version,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'NumberOfCaCertificates') as number_of_ca_certificates,
                json_extract_path_text(detail.Properties, 'TrustStoreArn') as trust_store_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
                AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
                AND listing.region = 'us-east-1'
    trust_store_revocations:
      name: trust_store_revocations
      id: aws.elasticloadbalancingv2.trust_store_revocations
      x-cfn-schema-name: TrustStoreRevocation
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::TrustStoreRevocation
      x-identifiers:
        - RevocationId
        - TrustStoreArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TrustStoreRevocation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::TrustStoreRevocation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticLoadBalancingV2::TrustStoreRevocation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/trust_store_revocations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/trust_store_revocations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RevocationContents') as revocation_contents,
              JSON_EXTRACT(Properties, '$.TrustStoreArn') as trust_store_arn,
              JSON_EXTRACT(Properties, '$.RevocationId') as revocation_id,
              JSON_EXTRACT(Properties, '$.TrustStoreRevocations') as trust_store_revocations
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
              AND data__Identifier = '<RevocationId>|<TrustStoreArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RevocationContents') as revocation_contents,
                JSON_EXTRACT(detail.Properties, '$.TrustStoreArn') as trust_store_arn,
                JSON_EXTRACT(detail.Properties, '$.RevocationId') as revocation_id,
                JSON_EXTRACT(detail.Properties, '$.TrustStoreRevocations') as trust_store_revocations
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
                AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RevocationContents') as revocation_contents,
                  json_extract_path_text(Properties, 'TrustStoreArn') as trust_store_arn,
                  json_extract_path_text(Properties, 'RevocationId') as revocation_id,
                  json_extract_path_text(Properties, 'TrustStoreRevocations') as trust_store_revocations
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
                  AND data__Identifier = '<RevocationId>|<TrustStoreArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RevocationContents') as revocation_contents,
                    json_extract_path_text(detail.Properties, 'TrustStoreArn') as trust_store_arn,
                    json_extract_path_text(detail.Properties, 'RevocationId') as revocation_id,
                    json_extract_path_text(detail.Properties, 'TrustStoreRevocations') as trust_store_revocations
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
                    AND detail.data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
                    AND listing.region = 'us-east-1'
    trust_store_revocations_list_only:
      name: trust_store_revocations_list_only
      id: aws.elasticloadbalancingv2.trust_store_revocations_list_only
      x-cfn-schema-name: TrustStoreRevocation
      x-cfn-type-name: AWS::ElasticLoadBalancingV2::TrustStoreRevocation
      x-identifiers:
        - RevocationId
        - TrustStoreArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RevocationId') as revocation_id,
              JSON_EXTRACT(Properties, '$.TrustStoreArn') as trust_store_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RevocationId') as revocation_id,
                json_extract_path_text(Properties, 'TrustStoreArn') as trust_store_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Listener&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateListener
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateListenerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ListenerRule&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateListenerRule
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateListenerRuleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LoadBalancer&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLoadBalancer
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLoadBalancerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TargetGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTargetGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTargetGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TrustStore&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTrustStore
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTrustStoreRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TrustStoreRevocation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTrustStoreRevocation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTrustStoreRevocationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
