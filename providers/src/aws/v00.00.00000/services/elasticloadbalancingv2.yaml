openapi: 3.0.0
info:
  title: ElasticLoadBalancingV2
  version: 1.0.0
paths: {}
components:
  schemas:
    FixedResponseConfig:
      type: object
      additionalProperties: false
      properties:
        ContentType:
          type: string
        StatusCode:
          type: string
        MessageBody:
          type: string
      required:
        - StatusCode
    TargetGroupTuple:
      type: object
      additionalProperties: false
      properties:
        TargetGroupArn:
          type: string
        Weight:
          type: integer
    Action:
      type: object
      additionalProperties: false
      properties:
        Order:
          type: integer
        TargetGroupArn:
          type: string
        FixedResponseConfig:
          $ref: '#/components/schemas/FixedResponseConfig'
        AuthenticateCognitoConfig:
          $ref: '#/components/schemas/AuthenticateCognitoConfig'
        Type:
          type: string
        RedirectConfig:
          $ref: '#/components/schemas/RedirectConfig'
        ForwardConfig:
          $ref: '#/components/schemas/ForwardConfig'
        AuthenticateOidcConfig:
          $ref: '#/components/schemas/AuthenticateOidcConfig'
      required:
        - Type
    AuthenticateCognitoConfig:
      type: object
      additionalProperties: false
      properties:
        OnUnauthenticatedRequest:
          type: string
        UserPoolClientId:
          type: string
        UserPoolDomain:
          type: string
        SessionTimeout:
          type: integer
        Scope:
          type: string
        SessionCookieName:
          type: string
        UserPoolArn:
          type: string
        AuthenticationRequestExtraParams:
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      required:
        - UserPoolClientId
        - UserPoolDomain
        - UserPoolArn
    RedirectConfig:
      type: object
      additionalProperties: false
      properties:
        Path:
          type: string
        Query:
          type: string
        Port:
          type: string
        Host:
          type: string
        Protocol:
          type: string
        StatusCode:
          type: string
      required:
        - StatusCode
    TargetGroupStickinessConfig:
      type: object
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
        DurationSeconds:
          type: integer
    ForwardConfig:
      type: object
      additionalProperties: false
      properties:
        TargetGroupStickinessConfig:
          $ref: '#/components/schemas/TargetGroupStickinessConfig'
        TargetGroups:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TargetGroupTuple'
    AuthenticateOidcConfig:
      type: object
      additionalProperties: false
      properties:
        OnUnauthenticatedRequest:
          type: string
        TokenEndpoint:
          type: string
        SessionTimeout:
          type: integer
        Scope:
          type: string
        Issuer:
          type: string
        ClientSecret:
          type: string
        UserInfoEndpoint:
          type: string
        ClientId:
          type: string
        AuthorizationEndpoint:
          type: string
        SessionCookieName:
          type: string
        UseExistingClientSecret:
          type: boolean
        AuthenticationRequestExtraParams:
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      required:
        - TokenEndpoint
        - Issuer
        - UserInfoEndpoint
        - ClientId
        - AuthorizationEndpoint
    Certificate:
      type: object
      additionalProperties: false
      properties:
        CertificateArn:
          type: string
    Listener:
      type: object
      properties:
        SslPolicy:
          type: string
        LoadBalancerArn:
          type: string
        DefaultActions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Action'
        Port:
          type: integer
        Certificates:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Certificate'
        Protocol:
          type: string
        ListenerArn:
          type: string
        AlpnPolicy:
          type: array
          items:
            type: string
      required:
        - LoadBalancerArn
        - DefaultActions
      x-stackql-resource-name: listener
      x-stackql-primaryIdentifier:
        - ListenerArn
    ListenerCertificate:
      type: object
      properties:
        ListenerArn:
          type: string
        Certificates:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Certificate'
        Id:
          type: string
      required:
        - ListenerArn
        - Certificates
      x-stackql-resource-name: listener_certificate
      x-stackql-primaryIdentifier:
        - Id
    RuleCondition:
      type: object
      additionalProperties: false
      properties:
        Field:
          type: string
        Values:
          type: array
          uniqueItems: true
          items:
            type: string
        HttpRequestMethodConfig:
          $ref: '#/components/schemas/HttpRequestMethodConfig'
        PathPatternConfig:
          $ref: '#/components/schemas/PathPatternConfig'
        HttpHeaderConfig:
          $ref: '#/components/schemas/HttpHeaderConfig'
        SourceIpConfig:
          $ref: '#/components/schemas/SourceIpConfig'
        HostHeaderConfig:
          $ref: '#/components/schemas/HostHeaderConfig'
        QueryStringConfig:
          $ref: '#/components/schemas/QueryStringConfig'
    QueryStringConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/QueryStringKeyValue'
    PathPatternConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          items:
            type: string
    HttpHeaderConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          items:
            type: string
        HttpHeaderName:
          type: string
    QueryStringKeyValue:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
    HostHeaderConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          items:
            type: string
    HttpRequestMethodConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          items:
            type: string
    SourceIpConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          items:
            type: string
    ListenerRule:
      type: object
      properties:
        ListenerArn:
          type: string
        RuleArn:
          type: string
        Actions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Action'
        Priority:
          type: integer
        Conditions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/RuleCondition'
        IsDefault:
          type: boolean
      required:
        - Actions
        - Priority
        - Conditions
      x-stackql-resource-name: listener_rule
      x-stackql-primaryIdentifier:
        - RuleArn
    SubnetMapping:
      type: object
      additionalProperties: false
      properties:
        IPv6Address:
          type: string
        SubnetId:
          type: string
        AllocationId:
          type: string
        PrivateIPv4Address:
          type: string
      required:
        - SubnetId
    LoadBalancerAttribute:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
          description: 'The key name of the tag. '
        Key:
          type: string
          description: 'The value for the tag. '
      required:
        - Value
        - Key
    LoadBalancer:
      type: object
      properties:
        IpAddressType:
          type: string
        SecurityGroups:
          type: array
          uniqueItems: true
          items:
            type: string
        LoadBalancerAttributes:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/LoadBalancerAttribute'
        Scheme:
          type: string
        DNSName:
          type: string
        Name:
          type: string
        LoadBalancerName:
          type: string
        Subnets:
          type: array
          uniqueItems: true
          items:
            type: string
        Type:
          type: string
        CanonicalHostedZoneID:
          type: string
        Id:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        LoadBalancerFullName:
          type: string
        SubnetMappings:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SubnetMapping'
      x-stackql-resource-name: load_balancer
      x-stackql-primaryIdentifier:
        - Id
    Matcher:
      type: object
      additionalProperties: false
      properties:
        GrpcCode:
          type: string
          description: You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.
        HttpCode:
          type: string
          description: 'For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values or a range of values. '
    TargetDescription:
      type: object
      additionalProperties: false
      properties:
        AvailabilityZone:
          type: string
          description: An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.
        Id:
          type: string
          description: 'The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target. '
        Port:
          type: integer
          description: The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. Not used if the target is a Lambda function.
      required:
        - Id
    TargetGroupAttribute:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
          description: The name of the attribute.
        Key:
          type: string
          description: The value of the attribute.
    TargetGroup:
      type: object
      properties:
        IpAddressType:
          type: string
          description: 'The type of IP address used for this target group. The possible values are ipv4 and ipv6. '
        HealthCheckIntervalSeconds:
          type: integer
          description: The approximate amount of time, in seconds, between health checks of an individual target.
        LoadBalancerArns:
          type: array
          x-insertionOrder: false
          description: The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
          uniqueItems: false
          items:
            type: string
        Matcher:
          $ref: '#/components/schemas/Matcher'
          description: '[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.'
        HealthCheckPath:
          type: string
          description: '[HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /AWS.ALB/healthcheck.'
        Port:
          type: integer
          description: The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
        Targets:
          type: array
          description: The targets.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TargetDescription'
        HealthCheckEnabled:
          type: boolean
          description: Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
        ProtocolVersion:
          type: string
          description: '[HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.'
        UnhealthyThresholdCount:
          type: integer
          description: The number of consecutive health check failures required before considering a target unhealthy.
        HealthCheckTimeoutSeconds:
          type: integer
          description: The amount of time, in seconds, during which no response from a target means a failed health check.
        Name:
          type: string
          description: The name of the target group.
        VpcId:
          type: string
          description: The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
        TargetGroupFullName:
          type: string
          description: The full name of the target group.
        HealthyThresholdCount:
          type: integer
          description: 'The number of consecutive health checks successes required before considering an unhealthy target healthy. '
        HealthCheckProtocol:
          type: string
          description: 'The protocol the load balancer uses when performing health checks on targets. '
        TargetGroupAttributes:
          type: array
          x-arrayType: AttributeList
          description: The attributes.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TargetGroupAttribute'
        TargetType:
          type: string
          description: The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.
        HealthCheckPort:
          type: string
          description: 'The port the load balancer uses when performing health checks on targets. '
        TargetGroupArn:
          type: string
          description: The ARN of the Target Group
        Protocol:
          type: string
          description: The protocol to use for routing traffic to the targets.
        TargetGroupName:
          type: string
          description: The name of the target group.
        Tags:
          type: array
          description: The tags.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: target_group
      x-stackql-primaryIdentifier:
        - TargetGroupArn
  x-stackQL-resources:
    listeners:
      name: listeners
      id: aws.elasticloadbalancingv2.listeners
      x-cfn-schema-name: Listener
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ListenerArn') as listener_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
    listener:
      name: listener
      id: aws.elasticloadbalancingv2.listener
      x-cfn-schema-name: Listener
      x-type: get
      x-identifiers:
        - ListenerArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SslPolicy') as ssl_policy,
              JSON_EXTRACT(Properties, '$.LoadBalancerArn') as load_balancer_arn,
              JSON_EXTRACT(Properties, '$.DefaultActions') as default_actions,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Certificates') as certificates,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.ListenerArn') as listener_arn,
              JSON_EXTRACT(Properties, '$.AlpnPolicy') as alpn_policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
    listener_certificates:
      name: listener_certificates
      id: aws.elasticloadbalancingv2.listener_certificates
      x-cfn-schema-name: ListenerCertificate
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerCertificate'
    listener_certificate:
      name: listener_certificate
      id: aws.elasticloadbalancingv2.listener_certificate
      x-cfn-schema-name: ListenerCertificate
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ListenerArn') as listener_arn,
              JSON_EXTRACT(Properties, '$.Certificates') as certificates,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerCertificate'
    listener_rules:
      name: listener_rules
      id: aws.elasticloadbalancingv2.listener_rules
      x-cfn-schema-name: ListenerRule
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RuleArn') as rule_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
    listener_rule:
      name: listener_rule
      id: aws.elasticloadbalancingv2.listener_rule
      x-cfn-schema-name: ListenerRule
      x-type: get
      x-identifiers:
        - RuleArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ListenerArn') as listener_arn,
              JSON_EXTRACT(Properties, '$.RuleArn') as rule_arn,
              JSON_EXTRACT(Properties, '$.Actions') as actions,
              JSON_EXTRACT(Properties, '$.Priority') as priority,
              JSON_EXTRACT(Properties, '$.Conditions') as conditions,
              JSON_EXTRACT(Properties, '$.IsDefault') as is_default
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
    load_balancers:
      name: load_balancers
      id: aws.elasticloadbalancingv2.load_balancers
      x-cfn-schema-name: LoadBalancer
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    load_balancer:
      name: load_balancer
      id: aws.elasticloadbalancingv2.load_balancer
      x-cfn-schema-name: LoadBalancer
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(Properties, '$.SecurityGroups') as security_groups,
              JSON_EXTRACT(Properties, '$.LoadBalancerAttributes') as load_balancer_attributes,
              JSON_EXTRACT(Properties, '$.Scheme') as scheme,
              JSON_EXTRACT(Properties, '$.DNSName') as d_ns_name,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.LoadBalancerName') as load_balancer_name,
              JSON_EXTRACT(Properties, '$.Subnets') as subnets,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.CanonicalHostedZoneID') as canonical_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.LoadBalancerFullName') as load_balancer_full_name,
              JSON_EXTRACT(Properties, '$.SubnetMappings') as subnet_mappings
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    target_groups:
      name: target_groups
      id: aws.elasticloadbalancingv2.target_groups
      x-cfn-schema-name: TargetGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TargetGroupArn') as target_group_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
    target_group:
      name: target_group
      id: aws.elasticloadbalancingv2.target_group
      x-cfn-schema-name: TargetGroup
      x-type: get
      x-identifiers:
        - TargetGroupArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(Properties, '$.HealthCheckIntervalSeconds') as health_check_interval_seconds,
              JSON_EXTRACT(Properties, '$.LoadBalancerArns') as load_balancer_arns,
              JSON_EXTRACT(Properties, '$.Matcher.GrpcCode') as matcher_grpc_code,
              JSON_EXTRACT(Properties, '$.Matcher.HttpCode') as matcher_http_code,
              JSON_EXTRACT(Properties, '$.HealthCheckPath') as health_check_path,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Targets') as targets,
              JSON_EXTRACT(Properties, '$.HealthCheckEnabled') as health_check_enabled,
              JSON_EXTRACT(Properties, '$.ProtocolVersion') as protocol_version,
              JSON_EXTRACT(Properties, '$.UnhealthyThresholdCount') as unhealthy_threshold_count,
              JSON_EXTRACT(Properties, '$.HealthCheckTimeoutSeconds') as health_check_timeout_seconds,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.TargetGroupFullName') as target_group_full_name,
              JSON_EXTRACT(Properties, '$.HealthyThresholdCount') as healthy_threshold_count,
              JSON_EXTRACT(Properties, '$.HealthCheckProtocol') as health_check_protocol,
              JSON_EXTRACT(Properties, '$.TargetGroupAttributes') as target_group_attributes,
              JSON_EXTRACT(Properties, '$.TargetType') as target_type,
              JSON_EXTRACT(Properties, '$.HealthCheckPort') as health_check_port,
              JSON_EXTRACT(Properties, '$.TargetGroupArn') as target_group_arn,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.TargetGroupName') as target_group_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
