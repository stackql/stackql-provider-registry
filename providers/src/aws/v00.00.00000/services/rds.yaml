openapi: 3.0.0
info:
  title: RDS
  version: 1.0.0
paths: {}
components:
  schemas:
    Endpoint:
      type: object
      additionalProperties: false
      properties:
        Address:
          type: string
          description: Specifies the DNS address of the DB instance.
        Port:
          type: string
          description: Specifies the port that the database engine is listening on.
        HostedZoneId:
          type: string
          description: Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
    ReadEndpoint:
      type: object
      additionalProperties: false
      properties:
        Address:
          description: The reader endpoint for the DB cluster.
          type: string
    DBClusterRole:
      description: Describes an AWS Identity and Access Management (IAM) role that is associated with a DB cluster.
      type: object
      additionalProperties: false
      properties:
        FeatureName:
          description: The name of the feature associated with the AWS Identity and Access Management (IAM) role. For the list of supported feature names, see DBEngineVersion in the Amazon RDS API Reference.
          type: string
        RoleArn:
          description: The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
          type: string
      required:
        - RoleArn
    ServerlessV2ScalingConfiguration:
      description: Contains the scaling configuration of an Aurora Serverless v2 DB cluster.
      type: object
      additionalProperties: false
      properties:
        MinCapacity:
          description: The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. The smallest value that you can use is 0.5.
          type: number
          minimum: 0.5
          maximum: 128
        MaxCapacity:
          description: The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 40, 40.5, 41, and so on. The largest value that you can use is 128.
          type: number
          minimum: 0.5
          maximum: 128
    ScalingConfiguration:
      description: The ScalingConfiguration property type specifies the scaling configuration of an Aurora Serverless DB cluster.
      type: object
      additionalProperties: false
      properties:
        AutoPause:
          description: A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).
          type: boolean
        MaxCapacity:
          description: |-
            The maximum capacity for an Aurora DB cluster in serverless DB engine mode.
            For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.
            For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
            The maximum capacity must be greater than or equal to the minimum capacity.
          type: integer
        MinCapacity:
          description: |-
            The minimum capacity for an Aurora DB cluster in serverless DB engine mode.
            For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.
            For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
            The minimum capacity must be less than or equal to the maximum capacity.
          type: integer
        SecondsBeforeTimeout:
          description: |-
            The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before enforcing the timeout action.
            The default is 300.
          type: integer
        SecondsUntilAutoPause:
          description: The time, in seconds, before an Aurora DB cluster in serverless mode is paused.
          type: integer
        TimeoutAction:
          description: |-
            The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange.
            ForceApplyCapacityChange sets the capacity to the specified value as soon as possible.
            RollbackCapacityChange, the default, ignores the capacity change if a scaling point isn't found in the timeout period.

            For more information, see Autoscaling for Aurora Serverless v1 in the Amazon Aurora User Guide.
          type: string
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 0
          maxLength: 256
      required:
        - Key
    MasterUserSecret:
      type: object
      additionalProperties: false
      properties:
        SecretArn:
          type: string
          description: The Amazon Resource Name (ARN) of the secret.
        KmsKeyId:
          type: string
          description: The AWS KMS key identifier that is used to encrypt the secret.
    DBCluster:
      type: object
      properties:
        Endpoint:
          $ref: '#/components/schemas/Endpoint'
        ReadEndpoint:
          $ref: '#/components/schemas/ReadEndpoint'
        AllocatedStorage:
          description: The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster.
          type: integer
        AssociatedRoles:
          description: Provides a list of the AWS Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other AWS services on your behalf.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/DBClusterRole'
        AvailabilityZones:
          description: A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see Choosing the Regions and Availability Zones in the Amazon Aurora User Guide.
          type: array
          uniqueItems: true
          items:
            type: string
        AutoMinorVersionUpgrade:
          description: A value that indicates whether minor engine upgrades are applied automatically to the DB cluster during the maintenance window. By default, minor engine upgrades are applied automatically.
          type: boolean
        BacktrackWindow:
          description: The target backtrack window, in seconds. To disable backtracking, set this value to 0.
          default: 0
          minimum: 0
          type: integer
        BackupRetentionPeriod:
          description: The number of days for which automated backups are retained.
          default: 1
          minimum: 1
          type: integer
        CopyTagsToSnapshot:
          description: A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
          type: boolean
        DatabaseName:
          description: The name of your database. If you don't provide a name, then Amazon RDS won't create a database in this DB cluster. For naming constraints, see Naming Constraints in the Amazon RDS User Guide.
          type: string
        DBClusterArn:
          type: string
          description: The Amazon Resource Name (ARN) for the DB cluster.
        DBClusterInstanceClass:
          description: The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6g.xlarge.
          type: string
        DBClusterResourceId:
          description: The AWS Region-unique, immutable identifier for the DB cluster.
          type: string
        DBInstanceParameterGroupName:
          description: The name of the DB parameter group to apply to all instances of the DB cluster.
          type: string
        DBSystemId:
          description: Reserved for future use.
          type: string
        GlobalClusterIdentifier:
          description: |-
            If you are configuring an Aurora global database cluster and want your Aurora DB cluster to be a secondary member in the global database cluster, specify the global cluster ID of the global database cluster. To define the primary database cluster of the global cluster, use the AWS::RDS::GlobalCluster resource.

            If you aren't configuring a global database cluster, don't specify this property.
          type: string
          pattern: ^$|^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
          minLength: 0
          maxLength: 63
        DBClusterIdentifier:
          description: The DB cluster identifier. This parameter is stored as a lowercase string.
          type: string
          pattern: ^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
          minLength: 1
          maxLength: 63
        DBClusterParameterGroupName:
          description: The name of the DB cluster parameter group to associate with this DB cluster.
          type: string
          default: default.aurora5.6
        DBSubnetGroupName:
          description: A DB subnet group that you want to associate with this DB cluster.
          type: string
        DeletionProtection:
          description: A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
          type: boolean
        Domain:
          description: The Active Directory directory ID to create the DB cluster in.
          type: string
        DomainIAMRoleName:
          description: Specify the name of the IAM role to be used when making API calls to the Directory Service.
          type: string
        EnableCloudwatchLogsExports:
          description: The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon Aurora User Guide.
          type: array
          uniqueItems: true
          items:
            type: string
        EnableHttpEndpoint:
          description: A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.
          type: boolean
        EnableIAMDatabaseAuthentication:
          description: A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.
          type: boolean
        Engine:
          description: 'The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql'
          type: string
        EngineMode:
          description: The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery, global, or multimaster.
          type: string
        EngineVersion:
          description: The version number of the database engine to use.
          type: string
        ManageMasterUserPassword:
          description: A value that indicates whether to manage the master user password with AWS Secrets Manager.
          type: boolean
        Iops:
          description: The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster.
          type: integer
        KmsKeyId:
          description: The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is used to encrypt the database instances in the DB cluster, such as arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef. If you enable the StorageEncrypted property but don't specify this property, the default master key is used. If you specify this property, you must set the StorageEncrypted property to true.
          type: string
        MasterUsername:
          description: The name of the master user for the DB cluster. You must specify MasterUsername, unless you specify SnapshotIdentifier. In that case, don't specify MasterUsername.
          type: string
          pattern: ^[a-zA-Z]{1}[a-zA-Z0-9_]*$
          minLength: 1
        MasterUserPassword:
          description: The master password for the DB instance.
          type: string
        MasterUserSecret:
          $ref: '#/components/schemas/MasterUserSecret'
          description: Contains the secret managed by RDS in AWS Secrets Manager for the master user password.
        MonitoringInterval:
          description: The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster. To turn off collecting Enhanced Monitoring metrics, specify 0. The default is 0.
          type: integer
          default: 0
        MonitoringRoleArn:
          description: The Amazon Resource Name (ARN) for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.
          type: string
        NetworkType:
          description: The network type of the DB cluster.
          type: string
        PerformanceInsightsEnabled:
          description: A value that indicates whether to turn on Performance Insights for the DB cluster.
          type: boolean
        PerformanceInsightsKmsKeyId:
          description: The Amazon Web Services KMS key identifier for encryption of Performance Insights data.
          type: string
        PerformanceInsightsRetentionPeriod:
          description: The amount of time, in days, to retain Performance Insights data.
          type: integer
        Port:
          description: 'The port number on which the instances in the DB cluster accept connections. Default: 3306 if engine is set as aurora or 5432 if set to aurora-postgresql.'
          type: integer
        PreferredBackupWindow:
          description: The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.
          type: string
        PreferredMaintenanceWindow:
          description: The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.
          type: string
        PubliclyAccessible:
          description: A value that indicates whether the DB cluster is publicly accessible.
          type: boolean
        ReplicationSourceIdentifier:
          description: The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
          type: string
        RestoreToTime:
          description: 'The date and time to restore the DB cluster to. Value must be a time in Universal Coordinated Time (UTC) format. An example: 2015-03-07T23:45:00Z'
          type: string
        RestoreType:
          description: |-
            The type of restore to be performed. You can specify one of the following values:
            full-copy - The new DB cluster is restored as a full copy of the source DB cluster.
            copy-on-write - The new DB cluster is restored as a clone of the source DB cluster.
          type: string
          default: full-copy
        ServerlessV2ScalingConfiguration:
          description: Contains the scaling configuration of an Aurora Serverless v2 DB cluster.
          $ref: '#/components/schemas/ServerlessV2ScalingConfiguration'
        ScalingConfiguration:
          description: The ScalingConfiguration property type specifies the scaling configuration of an Aurora Serverless DB cluster.
          $ref: '#/components/schemas/ScalingConfiguration'
        SnapshotIdentifier:
          description: >-
            The identifier for the DB snapshot or DB cluster snapshot to restore from.

            You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.

            After you restore a DB cluster with a SnapshotIdentifier property, you must specify the same SnapshotIdentifier property for any future updates to the DB cluster. When you specify this property for an update, the DB cluster is not restored from the snapshot again, and the data in the database is not changed. However, if you don't specify the SnapshotIdentifier property, an empty DB cluster is created, and the original DB cluster is deleted. If you specify a property that is different
            from the previous snapshot restore property, the DB cluster is restored from the specified SnapshotIdentifier property, and the original DB cluster is deleted.
          type: string
        SourceDBClusterIdentifier:
          description: The identifier of the source DB cluster from which to restore.
          type: string
        SourceRegion:
          description: The AWS Region which contains the source DB cluster when replicating a DB cluster. For example, us-east-1.
          type: string
        StorageEncrypted:
          description: |-
            Indicates whether the DB instance is encrypted.
            If you specify the DBClusterIdentifier, SnapshotIdentifier, or SourceDBInstanceIdentifier property, don't specify this property. The value is inherited from the cluster, snapshot, or source DB instance.
          type: boolean
        StorageType:
          description: Specifies the storage type to be associated with the DB cluster.
          type: string
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
        UseLatestRestorableTime:
          description: A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time.
          type: boolean
        VpcSecurityGroupIds:
          description: A list of EC2 VPC security groups to associate with this DB cluster.
          uniqueItems: true
          items:
            type: string
          type: array
      x-stackql-resource-name: db_cluster
      x-stackql-primaryIdentifier:
        - DBClusterIdentifier
    DBClusterParameterGroup:
      type: object
      properties:
        Description:
          description: A friendly description for this DB cluster parameter group.
          type: string
        Family:
          description: The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a DB engine and engine version compatible with that DB cluster parameter group family.
          type: string
        Parameters:
          description: An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.
          type: object
        DBClusterParameterGroupName:
          type: string
          pattern: ^[a-zA-Z]{1}(?:-?[a-zA-Z0-9])*$
        Tags:
          description: The list of tags for the cluster parameter group.
          type: array
          maxItems: 50
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Description
        - Family
        - Parameters
      x-stackql-resource-name: db_cluster_parameter_group
      x-stackql-primaryIdentifier:
        - DBClusterParameterGroupName
    CertificateDetails:
      type: object
      additionalProperties: false
      properties:
        CAIdentifier:
          type: string
          description: The CA identifier of the CA certificate used for the DB instance's server certificate.
        ValidTill:
          type: string
          format: date-time
          description: The expiration date of the DB instance’s server certificate.
    DBInstanceRole:
      type: object
      additionalProperties: false
      properties:
        FeatureName:
          type: string
          description: The name of the feature associated with the AWS Identity and Access Management (IAM) role. IAM roles that are associated with a DB instance grant permission for the DB instance to access other AWS services on your behalf.
        RoleArn:
          type: string
          description: The Amazon Resource Name (ARN) of the IAM role that is associated with the DB instance.
      required:
        - FeatureName
        - RoleArn
    ProcessorFeature:
      type: object
      additionalProperties: false
      properties:
        Name:
          type: string
          enum:
            - coreCount
            - threadsPerCore
          description: The name of the processor feature. Valid names are coreCount and threadsPerCore.
        Value:
          type: string
          description: The value of a processor feature name.
    DBInstance:
      type: object
      properties:
        AllocatedStorage:
          type: string
          description: The amount of storage (in gigabytes) to be initially allocated for the database instance.
          pattern: ^[0-9]*$
        AllowMajorVersionUpgrade:
          type: boolean
          description: A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
        AssociatedRoles:
          type: array
          items:
            $ref: '#/components/schemas/DBInstanceRole'
          description: The AWS Identity and Access Management (IAM) roles associated with the DB instance.
        AutoMinorVersionUpgrade:
          type: boolean
          description: A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
        AvailabilityZone:
          type: string
          description: The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones.
        BackupRetentionPeriod:
          type: integer
          minimum: 0
          default: 1
          description: The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.
        CACertificateIdentifier:
          type: string
          description: The identifier of the CA certificate for this DB instance.
        CertificateDetails:
          $ref: '#/components/schemas/CertificateDetails'
          description: Returns the details of the DB instance's server certificate.
        CertificateRotationRestart:
          type: boolean
          description: |-
            A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.
            By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.
            If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate
            This setting doesn't apply to RDS Custom.
        CharacterSetName:
          type: string
          description: For supported engines, indicates that the DB instance should be associated with the specified character set.
        CopyTagsToSnapshot:
          type: boolean
          description: A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
        CustomIAMInstanceProfile:
          type: string
          description: |-
            The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:
             * The profile must exist in your account.
             * The profile must have an IAM role that Amazon EC2 has permissions to assume.
             * The instance profile name and the associated IAM role name must start with the prefix AWSRDSCustom .
            For the list of permissions required for the IAM role, see Configure IAM and your VPC in the Amazon RDS User Guide .

            This setting is required for RDS Custom.
        DBClusterIdentifier:
          type: string
          description: The identifier of the DB cluster that the instance will belong to.
        DBClusterSnapshotIdentifier:
          type: string
          description: |-
            The identifier for the RDS for MySQL Multi-AZ DB cluster snapshot to restore from. For more information on Multi-AZ DB clusters, see Multi-AZ deployments with two readable standby DB instances in the Amazon RDS User Guide .

            Constraints:
             * Must match the identifier of an existing Multi-AZ DB cluster snapshot.
             * Can't be specified when DBSnapshotIdentifier is specified.
             * Must be specified when DBSnapshotIdentifier isn't specified.
             * If you are restoring from a shared manual Multi-AZ DB cluster snapshot, the DBClusterSnapshotIdentifier must be the ARN of the shared snapshot.
             * Can't be the identifier of an Aurora DB cluster snapshot.
             * Can't be the identifier of an RDS for PostgreSQL Multi-AZ DB cluster snapshot.
        DBInstanceArn:
          type: string
          description: The Amazon Resource Name (ARN) for the DB instance.
        DBInstanceClass:
          type: string
          description: The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines.
        DBInstanceIdentifier:
          type: string
          pattern: ^$|^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
          minLength: 1
          maxLength: 63
          description: A name for the DB instance. If you specify a name, AWS CloudFormation converts it to lowercase. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the DB instance.
        DbiResourceId:
          type: string
          description: The AWS Region-unique, immutable identifier for the DB instance. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB instance is accessed.
        DBName:
          type: string
          pattern: ^$|^[_a-zA-Z][a-zA-Z0-9_]{0,63}$
          description: The meaning of this parameter differs according to the database engine you use.
        DBParameterGroupName:
          type: string
          description: The name of an existing DB parameter group or a reference to an AWS::RDS::DBParameterGroup resource created in the template.
        DBSecurityGroups:
          type: array
          uniqueItems: true
          items:
            type: string
          description: A list of the DB security groups to assign to the DB instance. The list can include both the name of existing DB security groups or references to AWS::RDS::DBSecurityGroup resources created in the template.
        DBSnapshotIdentifier:
          type: string
          description: The name or Amazon Resource Name (ARN) of the DB snapshot that's used to restore the DB instance. If you're restoring from a shared manual DB snapshot, you must specify the ARN of the snapshot.
        DBSubnetGroupName:
          type: string
          description: A DB subnet group to associate with the DB instance. If you update this value, the new subnet group must be a subnet group in a new VPC.
        DBSystemId:
          type: string
          description: The Oracle system ID (Oracle SID) for a container database (CDB). The Oracle SID is also the name of the CDB. This setting is valid for RDS Custom only.
        DeleteAutomatedBackups:
          type: boolean
          description: A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
        DeletionProtection:
          type: boolean
          description: A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
        Domain:
          type: string
          description: The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.
        DomainIAMRoleName:
          type: string
          description: Specify the name of the IAM role to be used when making API calls to the Directory Service.
        EnableCloudwatchLogsExports:
          type: array
          items:
            type: string
          description: The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used.
        EnableIAMDatabaseAuthentication:
          type: boolean
          description: A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.
        EnablePerformanceInsights:
          type: boolean
          description: A value that indicates whether to enable Performance Insights for the DB instance.
        Endpoint:
          $ref: '#/components/schemas/Endpoint'
          description: Specifies the connection endpoint.
        Engine:
          type: string
          description: The name of the database engine that you want to use for this DB instance.
        EngineVersion:
          type: string
          description: The version number of the database engine to use.
        ManageMasterUserPassword:
          type: boolean
          description: A value that indicates whether to manage the master user password with AWS Secrets Manager.
        Iops:
          type: integer
          description: The number of I/O operations per second (IOPS) that the database provisions.
        KmsKeyId:
          type: string
          description: The ARN of the AWS Key Management Service (AWS KMS) master key that's used to encrypt the DB instance.
        LicenseModel:
          type: string
          description: License model information for this DB instance.
        MasterUsername:
          type: string
          pattern: ^[a-zA-Z][a-zA-Z0-9_]{0,127}$
          description: The master user name for the DB instance.
          minLength: 1
          maxLength: 128
        MasterUserPassword:
          type: string
          description: The password for the master user.
        MasterUserSecret:
          $ref: '#/components/schemas/MasterUserSecret'
          description: Contains the secret managed by RDS in AWS Secrets Manager for the master user password.
        MaxAllocatedStorage:
          type: integer
          description: The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
        MonitoringInterval:
          type: integer
          default: 0
          description: The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.
        MonitoringRoleArn:
          type: string
          description: The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs.
        MultiAZ:
          type: boolean
          description: Specifies whether the database instance is a multiple Availability Zone deployment.
        NcharCharacterSetName:
          type: string
          description: The name of the NCHAR character set for the Oracle DB instance. This parameter doesn't apply to RDS Custom.
        NetworkType:
          description: The network type of the DB cluster.
          type: string
        OptionGroupName:
          type: string
          description: Indicates that the DB instance should be associated with the specified option group.
        PerformanceInsightsKMSKeyId:
          type: string
          description: The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        PerformanceInsightsRetentionPeriod:
          type: integer
          description: The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).
        Port:
          type: string
          description: The port number on which the database accepts connections.
          pattern: ^\d*$
        PreferredBackupWindow:
          type: string
          description: The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.
        PreferredMaintenanceWindow:
          type: string
          description: he weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        ProcessorFeatures:
          type: array
          items:
            $ref: '#/components/schemas/ProcessorFeature'
          description: The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        PromotionTier:
          type: integer
          minimum: 0
          default: 1
          description: A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance.
        PubliclyAccessible:
          type: boolean
          description: Indicates whether the DB instance is an internet-facing instance. If you specify true, AWS CloudFormation creates an instance with a publicly resolvable DNS name, which resolves to a public IP address. If you specify false, AWS CloudFormation creates an internal instance with a DNS name that resolves to a private IP address.
        ReplicaMode:
          description: The open mode of an Oracle read replica. The default is open-read-only.
          type: string
        RestoreTime:
          description: The date and time to restore from.
          type: string
          format: date-time
        SourceDBClusterIdentifier:
          description: The identifier of the Multi-AZ DB cluster that will act as the source for the read replica. Each DB cluster can have up to 15 read replicas.
          type: string
        SourceDbiResourceId:
          type: string
          description: The resource ID of the source DB instance from which to restore.
        SourceDBInstanceAutomatedBackupsArn:
          type: string
          description: The Amazon Resource Name (ARN) of the replicated automated backups from which to restore.
        SourceDBInstanceIdentifier:
          type: string
          description: If you want to create a Read Replica DB instance, specify the ID of the source DB instance. Each DB instance can have a limited number of Read Replicas.
        SourceRegion:
          type: string
          description: The ID of the region that contains the source DB instance for the Read Replica.
        StorageEncrypted:
          type: boolean
          description: A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.
        StorageType:
          type: string
          description: Specifies the storage type to be associated with the DB instance.
        StorageThroughput:
          type: integer
          description: Specifies the storage throughput for the DB instance.
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
          description: Tags to assign to the DB instance.
        TdeCredentialArn:
          type: string
          description: The ARN from the key store with which to associate the instance for TDE encryption.
        TdeCredentialPassword:
          type: string
          description: The password for the given ARN from the key store in order to access the device.
        Timezone:
          type: string
          description: The time zone of the DB instance. The time zone parameter is currently supported only by Microsoft SQL Server.
        UseDefaultProcessorFeatures:
          type: boolean
          description: A value that indicates whether the DB instance class of the DB instance uses its default processor features.
        UseLatestRestorableTime:
          type: boolean
          description: A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.
        VPCSecurityGroups:
          type: array
          uniqueItems: true
          items:
            type: string
          description: A list of the VPC security group IDs to assign to the DB instance. The list can include both the physical IDs of existing VPC security groups and references to AWS::EC2::SecurityGroup resources created in the template.
      x-stackql-resource-name: db_instance
      x-stackql-primaryIdentifier:
        - DBInstanceIdentifier
    DBParameterGroup:
      type: object
      properties:
        DBParameterGroupName:
          description: Specifies the name of the DB parameter group
          type: string
          pattern: ^[a-zA-Z]{1}(?:-?[a-zA-Z0-9])*$
        Description:
          description: Provides the customer-specified description for this DB parameter group.
          type: string
        Family:
          description: The DB parameter group family name.
          type: string
        Parameters:
          description: An array of parameter names and values for the parameter update.
          type: object
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          maxItems: 50
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Family
        - Description
      x-stackql-resource-name: db_parameter_group
      x-stackql-primaryIdentifier:
        - DBParameterGroupName
    AuthFormat:
      type: object
      properties:
        AuthScheme:
          description: 'The type of authentication that the proxy uses for connections from the proxy to the underlying database. '
          type: string
          enum:
            - SECRETS
        Description:
          description: 'A user-specified description about the authentication used by a proxy to log in as a specific database user. '
          type: string
        IAMAuth:
          description: Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The ENABLED value is valid only for proxies with RDS for Microsoft SQL Server.
          type: string
          enum:
            - DISABLED
            - REQUIRED
            - ENABLED
        SecretArn:
          description: 'The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager. '
          type: string
        ClientPasswordAuthType:
          description: The type of authentication the proxy uses for connections from clients.
          type: string
          enum:
            - MYSQL_NATIVE_PASSWORD
            - POSTGRES_SCRAM_SHA_256
            - POSTGRES_MD5
            - SQL_SERVER_AUTHENTICATION
      additionalProperties: false
    TagFormat:
      type: object
      properties:
        Key:
          type: string
          pattern: (\w|\d|\s|\\|-|\.:=+-)*
          maxLength: 128
        Value:
          type: string
          pattern: (\w|\d|\s|\\|-|\.:=+-)*
          maxLength: 128
      additionalProperties: false
    DBProxy:
      type: object
      properties:
        Auth:
          description: The authorization mechanism that the proxy uses.
          type: array
          x-insertionOrder: false
          minItems: 1
          items:
            $ref: '#/components/schemas/AuthFormat'
        DBProxyArn:
          description: The Amazon Resource Name (ARN) for the proxy.
          type: string
        DBProxyName:
          description: The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
          type: string
          pattern: '[0-z]*'
          maxLength: 64
        DebugLogging:
          description: Whether the proxy includes detailed information about SQL statements in its logs.
          type: boolean
        Endpoint:
          description: The endpoint that you can use to connect to the proxy. You include the endpoint value in the connection string for a database client application.
          type: string
        EngineFamily:
          description: The kinds of databases that the proxy can connect to.
          type: string
          enum:
            - MYSQL
            - POSTGRESQL
            - SQLSERVER
        IdleClientTimeout:
          description: The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
          type: integer
        RequireTLS:
          description: A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
          type: boolean
        RoleArn:
          description: The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
          type: string
        Tags:
          description: An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TagFormat'
        VpcId:
          description: VPC ID to associate with the new DB proxy.
          type: string
        VpcSecurityGroupIds:
          description: VPC security group IDs to associate with the new proxy.
          type: array
          x-insertionOrder: false
          minItems: 1
          items:
            type: string
        VpcSubnetIds:
          description: VPC subnet IDs to associate with the new proxy.
          type: array
          x-insertionOrder: false
          minItems: 2
          items:
            type: string
      required:
        - Auth
        - DBProxyName
        - EngineFamily
        - RoleArn
        - VpcSubnetIds
      x-stackql-resource-name: db_proxy
      x-stackql-primaryIdentifier:
        - DBProxyName
    DBProxyEndpoint:
      type: object
      properties:
        DBProxyEndpointName:
          description: The identifier for the DB proxy endpoint. This name must be unique for all DB proxy endpoints owned by your AWS account in the specified AWS Region.
          type: string
          pattern: '[0-z]*'
          maxLength: 64
        DBProxyEndpointArn:
          description: The Amazon Resource Name (ARN) for the DB proxy endpoint.
          type: string
          pattern: arn:aws[A-Za-z0-9-]{0,64}:rds:[A-Za-z0-9-]{1,64}:[0-9]{12}:.*
        DBProxyName:
          description: The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
          type: string
          pattern: '[0-z]*'
          maxLength: 64
        VpcId:
          description: VPC ID to associate with the new DB proxy endpoint.
          type: string
        VpcSecurityGroupIds:
          description: VPC security group IDs to associate with the new DB proxy endpoint.
          type: array
          x-insertionOrder: false
          minItems: 1
          items:
            type: string
        VpcSubnetIds:
          description: VPC subnet IDs to associate with the new DB proxy endpoint.
          type: array
          minItems: 2
          x-insertionOrder: false
          items:
            type: string
        Endpoint:
          description: The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the connection string for a database client application.
          type: string
          maxLength: 256
        TargetRole:
          description: A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations.
          type: string
          enum:
            - READ_WRITE
            - READ_ONLY
        IsDefault:
          description: A value that indicates whether this endpoint is the default endpoint for the associated DB proxy. Default DB proxy endpoints always have read/write capability. Other endpoints that you associate with the DB proxy can be either read/write or read-only.
          type: boolean
        Tags:
          description: An optional set of key-value pairs to associate arbitrary data of your choosing with the DB proxy endpoint.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TagFormat'
      required:
        - DBProxyName
        - DBProxyEndpointName
        - VpcSubnetIds
      x-stackql-resource-name: db_proxy_endpoint
      x-stackql-primaryIdentifier:
        - DBProxyEndpointName
    ConnectionPoolConfigurationInfoFormat:
      type: object
      properties:
        MaxConnectionsPercent:
          description: The maximum size of the connection pool for each target in a target group.
          type: integer
          minimum: 0
          maximum: 100
        MaxIdleConnectionsPercent:
          description: Controls how actively the proxy closes idle database connections in the connection pool.
          type: integer
          minimum: 0
          maximum: 100
        ConnectionBorrowTimeout:
          description: The number of seconds for a proxy to wait for a connection to become available in the connection pool.
          type: integer
        SessionPinningFilters:
          description: Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection.
          type: array
          x-insertionOrder: false
          items:
            type: string
        InitQuery:
          description: One or more SQL statements for the proxy to run when opening each new database connection.
          type: string
      additionalProperties: false
    DBProxyTargetGroup:
      type: object
      properties:
        DBProxyName:
          description: The identifier for the proxy.
          type: string
          pattern: '[A-z][0-z]*'
          maxLength: 64
        TargetGroupArn:
          description: The Amazon Resource Name (ARN) representing the target group.
          type: string
        TargetGroupName:
          description: The identifier for the DBProxyTargetGroup
          type: string
          enum:
            - default
        ConnectionPoolConfigurationInfo:
          $ref: '#/components/schemas/ConnectionPoolConfigurationInfoFormat'
        DBInstanceIdentifiers:
          type: array
          x-insertionOrder: false
          items:
            type: string
        DBClusterIdentifiers:
          type: array
          x-insertionOrder: false
          items:
            type: string
      required:
        - DBProxyName
        - TargetGroupName
      x-stackql-resource-name: db_proxy_target_group
      x-stackql-primaryIdentifier:
        - TargetGroupArn
    Ingress:
      type: object
      additionalProperties: false
      properties:
        CIDRIP:
          type: string
        EC2SecurityGroupId:
          type: string
        EC2SecurityGroupName:
          type: string
        EC2SecurityGroupOwnerId:
          type: string
    DBSecurityGroup:
      type: object
      properties:
        Id:
          type: string
        DBSecurityGroupIngress:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Ingress'
        EC2VpcId:
          type: string
        GroupDescription:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - GroupDescription
        - DBSecurityGroupIngress
      x-stackql-resource-name: db_security_group
      x-stackql-primaryIdentifier:
        - Id
    DBSecurityGroupIngress:
      type: object
      properties:
        Id:
          type: string
        CIDRIP:
          type: string
        DBSecurityGroupName:
          type: string
        EC2SecurityGroupId:
          type: string
        EC2SecurityGroupName:
          type: string
        EC2SecurityGroupOwnerId:
          type: string
      required:
        - DBSecurityGroupName
      x-stackql-resource-name: db_security_group_ingress
      x-stackql-primaryIdentifier:
        - Id
    DBSubnetGroup:
      type: object
      properties:
        DBSubnetGroupDescription:
          type: string
        DBSubnetGroupName:
          type: string
          pattern: ^(?!default$)[a-zA-Z]{1}[a-zA-Z0-9-_\.\s]{0,254}$
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
        Tags:
          type: array
          maxItems: 50
          uniqueItems: false
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DBSubnetGroupDescription
        - SubnetIds
      x-stackql-resource-name: db_subnet_group
      x-stackql-primaryIdentifier:
        - DBSubnetGroupName
    EventSubscription:
      type: object
      properties:
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          maxItems: 50
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        SubscriptionName:
          description: The name of the subscription.
          type: string
          maxLength: 255
        Enabled:
          description: A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it.
          type: boolean
          default: true
        EventCategories:
          description: A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action.
          type: array
          uniqueItems: true
          items:
            type: string
        SnsTopicArn:
          description: The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
          type: string
        SourceIds:
          description: The list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        SourceType:
          description: The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.
          type: string
      required:
        - SnsTopicArn
      x-stackql-resource-name: event_subscription
      x-stackql-primaryIdentifier:
        - SubscriptionName
    GlobalCluster:
      type: object
      properties:
        Engine:
          description: |-
            The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora).
            If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.
          type: string
          enum:
            - aurora
            - aurora-mysql
            - aurora-postgresql
        EngineVersion:
          description: The version number of the database engine to use. If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.
          type: string
        DeletionProtection:
          description: The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled.
          type: boolean
        GlobalClusterIdentifier:
          description: The cluster identifier of the new global database cluster. This parameter is stored as a lowercase string.
          type: string
          pattern: ^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
        SourceDBClusterIdentifier:
          description: The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. This parameter is stored as a lowercase string.
          type: string
          oneOf:
            - pattern: ^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
            - pattern: ^(?=.{40,128}$)arn.*
        StorageEncrypted:
          description: |2-
             The storage encryption setting for the new global database cluster.
            If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.
          type: boolean
      x-stackql-resource-name: global_cluster
      x-stackql-primaryIdentifier:
        - GlobalClusterIdentifier
    OptionConfiguration:
      description: The OptionConfiguration property type specifies an individual option, and its settings, within an AWS::RDS::OptionGroup resource.
      type: object
      properties:
        DBSecurityGroupMemberships:
          description: A list of DBSecurityGroupMembership name strings used for this option.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        OptionName:
          description: The configuration of options to include in a group.
          type: string
        OptionSettings:
          description: The option settings to include in an option group.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/OptionSetting'
        OptionVersion:
          description: The version for the option.
          type: string
        Port:
          description: The optional port for the option.
          type: integer
        VpcSecurityGroupMemberships:
          description: A list of VpcSecurityGroupMembership name strings used for this option.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
      additionalProperties: false
      required:
        - OptionName
    OptionSetting:
      description: The OptionSetting property type specifies the value for an option within an OptionSetting property.
      type: object
      properties:
        Name:
          description: The name of the option that has settings that you can set.
          type: string
        Value:
          description: The current value of the option setting.
          type: string
      additionalProperties: false
    OptionGroup:
      type: object
      properties:
        OptionGroupName:
          description: Specifies the name of the option group.
          type: string
        OptionGroupDescription:
          description: Provides a description of the option group.
          type: string
        EngineName:
          description: Indicates the name of the engine that this option group can be applied to.
          type: string
        MajorEngineVersion:
          description: Indicates the major engine version associated with this option group.
          type: string
        OptionConfigurations:
          description: Indicates what options are available in the option group.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/OptionConfiguration'
        Tags:
          type: array
          description: An array of key-value pairs to apply to this resource.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - EngineName
        - MajorEngineVersion
        - OptionGroupDescription
      x-stackql-resource-name: option_group
      x-stackql-primaryIdentifier:
        - OptionGroupName
  x-stackQL-resources:
    db_clusters:
      name: db_clusters
      id: aws.rds.db_clusters
      x-cfn-schema-name: DBCluster
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBClusterIdentifier') as d_bcluster_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBCluster'
    db_cluster:
      name: db_cluster
      id: aws.rds.db_cluster
      x-cfn-schema-name: DBCluster
      x-type: get
      x-identifiers:
        - DBClusterIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Endpoint.Address') as endpoint_address,
              JSON_EXTRACT(Properties, '$.Endpoint.Port') as endpoint_port,
              JSON_EXTRACT(Properties, '$.Endpoint.HostedZoneId') as endpoint_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.ReadEndpoint.Address') as read_endpoint_address,
              JSON_EXTRACT(Properties, '$.AllocatedStorage') as allocated_storage,
              JSON_EXTRACT(Properties, '$.AssociatedRoles') as associated_roles,
              JSON_EXTRACT(Properties, '$.AvailabilityZones') as availability_zones,
              JSON_EXTRACT(Properties, '$.AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
              JSON_EXTRACT(Properties, '$.BacktrackWindow') as backtrack_window,
              JSON_EXTRACT(Properties, '$.BackupRetentionPeriod') as backup_retention_period,
              JSON_EXTRACT(Properties, '$.CopyTagsToSnapshot') as copy_tags_to_snapshot,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.DBClusterArn') as d_bcluster_arn,
              JSON_EXTRACT(Properties, '$.DBClusterInstanceClass') as d_bcluster_instance_class,
              JSON_EXTRACT(Properties, '$.DBClusterResourceId') as d_bcluster_resource_id,
              JSON_EXTRACT(Properties, '$.DBInstanceParameterGroupName') as d_binstance_parameter_group_name,
              JSON_EXTRACT(Properties, '$.DBSystemId') as d_bsystem_id,
              JSON_EXTRACT(Properties, '$.GlobalClusterIdentifier') as global_cluster_identifier,
              JSON_EXTRACT(Properties, '$.DBClusterIdentifier') as d_bcluster_identifier,
              JSON_EXTRACT(Properties, '$.DBClusterParameterGroupName') as d_bcluster_parameter_group_name,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as d_bsubnet_group_name,
              JSON_EXTRACT(Properties, '$.DeletionProtection') as deletion_protection,
              JSON_EXTRACT(Properties, '$.Domain') as domain,
              JSON_EXTRACT(Properties, '$.DomainIAMRoleName') as domain_ia_mrole_name,
              JSON_EXTRACT(Properties, '$.EnableCloudwatchLogsExports') as enable_cloudwatch_logs_exports,
              JSON_EXTRACT(Properties, '$.EnableHttpEndpoint') as enable_http_endpoint,
              JSON_EXTRACT(Properties, '$.EnableIAMDatabaseAuthentication') as enable_ia_mdatabase_authentication,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.EngineMode') as engine_mode,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.ManageMasterUserPassword') as manage_master_user_password,
              JSON_EXTRACT(Properties, '$.Iops') as iops,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.MasterUsername') as master_username,
              JSON_EXTRACT(Properties, '$.MasterUserPassword') as master_user_password,
              JSON_EXTRACT(Properties, '$.MasterUserSecret.SecretArn') as master_user_secret_secret_arn,
              JSON_EXTRACT(Properties, '$.MasterUserSecret.KmsKeyId') as master_user_secret_kms_key_id,
              JSON_EXTRACT(Properties, '$.MonitoringInterval') as monitoring_interval,
              JSON_EXTRACT(Properties, '$.MonitoringRoleArn') as monitoring_role_arn,
              JSON_EXTRACT(Properties, '$.NetworkType') as network_type,
              JSON_EXTRACT(Properties, '$.PerformanceInsightsEnabled') as performance_insights_enabled,
              JSON_EXTRACT(Properties, '$.PerformanceInsightsKmsKeyId') as performance_insights_kms_key_id,
              JSON_EXTRACT(Properties, '$.PerformanceInsightsRetentionPeriod') as performance_insights_retention_period,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.PreferredBackupWindow') as preferred_backup_window,
              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.ReplicationSourceIdentifier') as replication_source_identifier,
              JSON_EXTRACT(Properties, '$.RestoreToTime') as restore_to_time,
              JSON_EXTRACT(Properties, '$.RestoreType') as restore_type,
              JSON_EXTRACT(Properties, '$.ServerlessV2ScalingConfiguration.MinCapacity') as serverless_v2_scaling_configuration_min_capacity,
              JSON_EXTRACT(Properties, '$.ServerlessV2ScalingConfiguration.MaxCapacity') as serverless_v2_scaling_configuration_max_capacity,
              JSON_EXTRACT(Properties, '$.ScalingConfiguration.AutoPause') as scaling_configuration_auto_pause,
              JSON_EXTRACT(Properties, '$.ScalingConfiguration.MaxCapacity') as scaling_configuration_max_capacity,
              JSON_EXTRACT(Properties, '$.ScalingConfiguration.MinCapacity') as scaling_configuration_min_capacity,
              JSON_EXTRACT(Properties, '$.ScalingConfiguration.SecondsBeforeTimeout') as scaling_configuration_seconds_before_timeout,
              JSON_EXTRACT(Properties, '$.ScalingConfiguration.SecondsUntilAutoPause') as scaling_configuration_seconds_until_auto_pause,
              JSON_EXTRACT(Properties, '$.ScalingConfiguration.TimeoutAction') as scaling_configuration_timeout_action,
              JSON_EXTRACT(Properties, '$.SnapshotIdentifier') as snapshot_identifier,
              JSON_EXTRACT(Properties, '$.SourceDBClusterIdentifier') as source_db_cluster_identifier,
              JSON_EXTRACT(Properties, '$.SourceRegion') as source_region,
              JSON_EXTRACT(Properties, '$.StorageEncrypted') as storage_encrypted,
              JSON_EXTRACT(Properties, '$.StorageType') as storage_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UseLatestRestorableTime') as use_latest_restorable_time,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBCluster'
    db_cluster_parameter_groups:
      name: db_cluster_parameter_groups
      id: aws.rds.db_cluster_parameter_groups
      x-cfn-schema-name: DBClusterParameterGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBClusterParameterGroupName') as d_bcluster_parameter_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBClusterParameterGroup'
    db_cluster_parameter_group:
      name: db_cluster_parameter_group
      id: aws.rds.db_cluster_parameter_group
      x-cfn-schema-name: DBClusterParameterGroup
      x-type: get
      x-identifiers:
        - DBClusterParameterGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Family') as family,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.DBClusterParameterGroupName') as d_bcluster_parameter_group_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBClusterParameterGroup'
    db_instances:
      name: db_instances
      id: aws.rds.db_instances
      x-cfn-schema-name: DBInstance
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBInstanceIdentifier') as d_binstance_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBInstance'
    db_instance:
      name: db_instance
      id: aws.rds.db_instance
      x-cfn-schema-name: DBInstance
      x-type: get
      x-identifiers:
        - DBInstanceIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AllocatedStorage') as allocated_storage,
              JSON_EXTRACT(Properties, '$.AllowMajorVersionUpgrade') as allow_major_version_upgrade,
              JSON_EXTRACT(Properties, '$.AssociatedRoles') as associated_roles,
              JSON_EXTRACT(Properties, '$.AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.BackupRetentionPeriod') as backup_retention_period,
              JSON_EXTRACT(Properties, '$.CACertificateIdentifier') as c_acertificate_identifier,
              JSON_EXTRACT(Properties, '$.CertificateDetails.CAIdentifier') as certificate_details_ca_identifier,
              JSON_EXTRACT(Properties, '$.CertificateDetails.ValidTill') as certificate_details_valid_till,
              JSON_EXTRACT(Properties, '$.CertificateRotationRestart') as certificate_rotation_restart,
              JSON_EXTRACT(Properties, '$.CharacterSetName') as character_set_name,
              JSON_EXTRACT(Properties, '$.CopyTagsToSnapshot') as copy_tags_to_snapshot,
              JSON_EXTRACT(Properties, '$.CustomIAMInstanceProfile') as custom_ia_minstance_profile,
              JSON_EXTRACT(Properties, '$.DBClusterIdentifier') as d_bcluster_identifier,
              JSON_EXTRACT(Properties, '$.DBClusterSnapshotIdentifier') as d_bcluster_snapshot_identifier,
              JSON_EXTRACT(Properties, '$.DBInstanceArn') as d_binstance_arn,
              JSON_EXTRACT(Properties, '$.DBInstanceClass') as d_binstance_class,
              JSON_EXTRACT(Properties, '$.DBInstanceIdentifier') as d_binstance_identifier,
              JSON_EXTRACT(Properties, '$.DbiResourceId') as dbi_resource_id,
              JSON_EXTRACT(Properties, '$.DBName') as d_bname,
              JSON_EXTRACT(Properties, '$.DBParameterGroupName') as d_bparameter_group_name,
              JSON_EXTRACT(Properties, '$.DBSecurityGroups') as d_bsecurity_groups,
              JSON_EXTRACT(Properties, '$.DBSnapshotIdentifier') as d_bsnapshot_identifier,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as d_bsubnet_group_name,
              JSON_EXTRACT(Properties, '$.DBSystemId') as d_bsystem_id,
              JSON_EXTRACT(Properties, '$.DeleteAutomatedBackups') as delete_automated_backups,
              JSON_EXTRACT(Properties, '$.DeletionProtection') as deletion_protection,
              JSON_EXTRACT(Properties, '$.Domain') as domain,
              JSON_EXTRACT(Properties, '$.DomainIAMRoleName') as domain_ia_mrole_name,
              JSON_EXTRACT(Properties, '$.EnableCloudwatchLogsExports') as enable_cloudwatch_logs_exports,
              JSON_EXTRACT(Properties, '$.EnableIAMDatabaseAuthentication') as enable_ia_mdatabase_authentication,
              JSON_EXTRACT(Properties, '$.EnablePerformanceInsights') as enable_performance_insights,
              JSON_EXTRACT(Properties, '$.Endpoint.Address') as endpoint_address,
              JSON_EXTRACT(Properties, '$.Endpoint.Port') as endpoint_port,
              JSON_EXTRACT(Properties, '$.Endpoint.HostedZoneId') as endpoint_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.ManageMasterUserPassword') as manage_master_user_password,
              JSON_EXTRACT(Properties, '$.Iops') as iops,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.LicenseModel') as license_model,
              JSON_EXTRACT(Properties, '$.MasterUsername') as master_username,
              JSON_EXTRACT(Properties, '$.MasterUserPassword') as master_user_password,
              JSON_EXTRACT(Properties, '$.MasterUserSecret.SecretArn') as master_user_secret_secret_arn,
              JSON_EXTRACT(Properties, '$.MasterUserSecret.KmsKeyId') as master_user_secret_kms_key_id,
              JSON_EXTRACT(Properties, '$.MaxAllocatedStorage') as max_allocated_storage,
              JSON_EXTRACT(Properties, '$.MonitoringInterval') as monitoring_interval,
              JSON_EXTRACT(Properties, '$.MonitoringRoleArn') as monitoring_role_arn,
              JSON_EXTRACT(Properties, '$.MultiAZ') as multi_az,
              JSON_EXTRACT(Properties, '$.NcharCharacterSetName') as nchar_character_set_name,
              JSON_EXTRACT(Properties, '$.NetworkType') as network_type,
              JSON_EXTRACT(Properties, '$.OptionGroupName') as option_group_name,
              JSON_EXTRACT(Properties, '$.PerformanceInsightsKMSKeyId') as performance_insights_km_skey_id,
              JSON_EXTRACT(Properties, '$.PerformanceInsightsRetentionPeriod') as performance_insights_retention_period,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.PreferredBackupWindow') as preferred_backup_window,
              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(Properties, '$.ProcessorFeatures') as processor_features,
              JSON_EXTRACT(Properties, '$.PromotionTier') as promotion_tier,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.ReplicaMode') as replica_mode,
              JSON_EXTRACT(Properties, '$.RestoreTime') as restore_time,
              JSON_EXTRACT(Properties, '$.SourceDBClusterIdentifier') as source_db_cluster_identifier,
              JSON_EXTRACT(Properties, '$.SourceDbiResourceId') as source_dbi_resource_id,
              JSON_EXTRACT(Properties, '$.SourceDBInstanceAutomatedBackupsArn') as source_db_instance_automated_backups_arn,
              JSON_EXTRACT(Properties, '$.SourceDBInstanceIdentifier') as source_db_instance_identifier,
              JSON_EXTRACT(Properties, '$.SourceRegion') as source_region,
              JSON_EXTRACT(Properties, '$.StorageEncrypted') as storage_encrypted,
              JSON_EXTRACT(Properties, '$.StorageType') as storage_type,
              JSON_EXTRACT(Properties, '$.StorageThroughput') as storage_throughput,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TdeCredentialArn') as tde_credential_arn,
              JSON_EXTRACT(Properties, '$.TdeCredentialPassword') as tde_credential_password,
              JSON_EXTRACT(Properties, '$.Timezone') as timezone,
              JSON_EXTRACT(Properties, '$.UseDefaultProcessorFeatures') as use_default_processor_features,
              JSON_EXTRACT(Properties, '$.UseLatestRestorableTime') as use_latest_restorable_time,
              JSON_EXTRACT(Properties, '$.VPCSecurityGroups') as v_pc_security_groups
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBInstance'
    db_parameter_groups:
      name: db_parameter_groups
      id: aws.rds.db_parameter_groups
      x-cfn-schema-name: DBParameterGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBParameterGroupName') as d_bparameter_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBParameterGroup'
    db_parameter_group:
      name: db_parameter_group
      id: aws.rds.db_parameter_group
      x-cfn-schema-name: DBParameterGroup
      x-type: get
      x-identifiers:
        - DBParameterGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBParameterGroupName') as d_bparameter_group_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Family') as family,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBParameterGroup'
    db_proxies:
      name: db_proxies
      id: aws.rds.db_proxies
      x-cfn-schema-name: DBProxy
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBProxyName') as d_bproxy_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBProxy'
    db_proxy:
      name: db_proxy
      id: aws.rds.db_proxy
      x-cfn-schema-name: DBProxy
      x-type: get
      x-identifiers:
        - DBProxyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Auth') as auth,
              JSON_EXTRACT(Properties, '$.DBProxyArn') as d_bproxy_arn,
              JSON_EXTRACT(Properties, '$.DBProxyName') as d_bproxy_name,
              JSON_EXTRACT(Properties, '$.DebugLogging') as debug_logging,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.EngineFamily') as engine_family,
              JSON_EXTRACT(Properties, '$.IdleClientTimeout') as idle_client_timeout,
              JSON_EXTRACT(Properties, '$.RequireTLS') as require_tl_s,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
              JSON_EXTRACT(Properties, '$.VpcSubnetIds') as vpc_subnet_ids
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBProxy'
    db_proxy_endpoints:
      name: db_proxy_endpoints
      id: aws.rds.db_proxy_endpoints
      x-cfn-schema-name: DBProxyEndpoint
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBProxyEndpointName') as d_bproxy_endpoint_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBProxyEndpoint'
    db_proxy_endpoint:
      name: db_proxy_endpoint
      id: aws.rds.db_proxy_endpoint
      x-cfn-schema-name: DBProxyEndpoint
      x-type: get
      x-identifiers:
        - DBProxyEndpointName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBProxyEndpointName') as d_bproxy_endpoint_name,
              JSON_EXTRACT(Properties, '$.DBProxyEndpointArn') as d_bproxy_endpoint_arn,
              JSON_EXTRACT(Properties, '$.DBProxyName') as d_bproxy_name,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
              JSON_EXTRACT(Properties, '$.VpcSubnetIds') as vpc_subnet_ids,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.TargetRole') as target_role,
              JSON_EXTRACT(Properties, '$.IsDefault') as is_default,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBProxyEndpoint'
    db_proxy_target_groups:
      name: db_proxy_target_groups
      id: aws.rds.db_proxy_target_groups
      x-cfn-schema-name: DBProxyTargetGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TargetGroupArn') as target_group_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBProxyTargetGroup'
    db_proxy_target_group:
      name: db_proxy_target_group
      id: aws.rds.db_proxy_target_group
      x-cfn-schema-name: DBProxyTargetGroup
      x-type: get
      x-identifiers:
        - TargetGroupArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBProxyName') as d_bproxy_name,
              JSON_EXTRACT(Properties, '$.TargetGroupArn') as target_group_arn,
              JSON_EXTRACT(Properties, '$.TargetGroupName') as target_group_name,
              JSON_EXTRACT(Properties, '$.ConnectionPoolConfigurationInfo.MaxConnectionsPercent') as connection_pool_configuration_info_max_connections_percent,
              JSON_EXTRACT(Properties, '$.ConnectionPoolConfigurationInfo.MaxIdleConnectionsPercent') as connection_pool_configuration_info_max_idle_connections_percent,
              JSON_EXTRACT(Properties, '$.ConnectionPoolConfigurationInfo.ConnectionBorrowTimeout') as connection_pool_configuration_info_connection_borrow_timeout,
              JSON_EXTRACT(Properties, '$.ConnectionPoolConfigurationInfo.SessionPinningFilters') as connection_pool_configuration_info_session_pinning_filters,
              JSON_EXTRACT(Properties, '$.ConnectionPoolConfigurationInfo.InitQuery') as connection_pool_configuration_info_init_query,
              JSON_EXTRACT(Properties, '$.DBInstanceIdentifiers') as d_binstance_identifiers,
              JSON_EXTRACT(Properties, '$.DBClusterIdentifiers') as d_bcluster_identifiers
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBProxyTargetGroup'
    db_security_groups:
      name: db_security_groups
      id: aws.rds.db_security_groups
      x-cfn-schema-name: DBSecurityGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBSecurityGroup'
    db_security_group:
      name: db_security_group
      id: aws.rds.db_security_group
      x-cfn-schema-name: DBSecurityGroup
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.DBSecurityGroupIngress') as d_bsecurity_group_ingress,
              JSON_EXTRACT(Properties, '$.EC2VpcId') as e_c2_vpc_id,
              JSON_EXTRACT(Properties, '$.GroupDescription') as group_description,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBSecurityGroup'
    db_security_group_ingresses:
      name: db_security_group_ingresses
      id: aws.rds.db_security_group_ingresses
      x-cfn-schema-name: DBSecurityGroupIngress
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBSecurityGroupIngress'
    db_security_group_ingress:
      name: db_security_group_ingress
      id: aws.rds.db_security_group_ingress
      x-cfn-schema-name: DBSecurityGroupIngress
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CIDRIP') as c_id_ri_p,
              JSON_EXTRACT(Properties, '$.DBSecurityGroupName') as d_bsecurity_group_name,
              JSON_EXTRACT(Properties, '$.EC2SecurityGroupId') as e_c2_security_group_id,
              JSON_EXTRACT(Properties, '$.EC2SecurityGroupName') as e_c2_security_group_name,
              JSON_EXTRACT(Properties, '$.EC2SecurityGroupOwnerId') as e_c2_security_group_owner_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBSecurityGroupIngress'
    db_subnet_groups:
      name: db_subnet_groups
      id: aws.rds.db_subnet_groups
      x-cfn-schema-name: DBSubnetGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as d_bsubnet_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBSubnetGroup'
    db_subnet_group:
      name: db_subnet_group
      id: aws.rds.db_subnet_group
      x-cfn-schema-name: DBSubnetGroup
      x-type: get
      x-identifiers:
        - DBSubnetGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupDescription') as d_bsubnet_group_description,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as d_bsubnet_group_name,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBSubnetGroup'
    event_subscriptions:
      name: event_subscriptions
      id: aws.rds.event_subscriptions
      x-cfn-schema-name: EventSubscription
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SubscriptionName') as subscription_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::EventSubscription'
    event_subscription:
      name: event_subscription
      id: aws.rds.event_subscription
      x-cfn-schema-name: EventSubscription
      x-type: get
      x-identifiers:
        - SubscriptionName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SubscriptionName') as subscription_name,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.EventCategories') as event_categories,
              JSON_EXTRACT(Properties, '$.SnsTopicArn') as sns_topic_arn,
              JSON_EXTRACT(Properties, '$.SourceIds') as source_ids,
              JSON_EXTRACT(Properties, '$.SourceType') as source_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::EventSubscription'
    global_clusters:
      name: global_clusters
      id: aws.rds.global_clusters
      x-cfn-schema-name: GlobalCluster
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GlobalClusterIdentifier') as global_cluster_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::GlobalCluster'
    global_cluster:
      name: global_cluster
      id: aws.rds.global_cluster
      x-cfn-schema-name: GlobalCluster
      x-type: get
      x-identifiers:
        - GlobalClusterIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.DeletionProtection') as deletion_protection,
              JSON_EXTRACT(Properties, '$.GlobalClusterIdentifier') as global_cluster_identifier,
              JSON_EXTRACT(Properties, '$.SourceDBClusterIdentifier') as source_db_cluster_identifier,
              JSON_EXTRACT(Properties, '$.StorageEncrypted') as storage_encrypted
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::GlobalCluster'
    option_groups:
      name: option_groups
      id: aws.rds.option_groups
      x-cfn-schema-name: OptionGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OptionGroupName') as option_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::OptionGroup'
    option_group:
      name: option_group
      id: aws.rds.option_group
      x-cfn-schema-name: OptionGroup
      x-type: get
      x-identifiers:
        - OptionGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OptionGroupName') as option_group_name,
              JSON_EXTRACT(Properties, '$.OptionGroupDescription') as option_group_description,
              JSON_EXTRACT(Properties, '$.EngineName') as engine_name,
              JSON_EXTRACT(Properties, '$.MajorEngineVersion') as major_engine_version,
              JSON_EXTRACT(Properties, '$.OptionConfigurations') as option_configurations,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::OptionGroup'
