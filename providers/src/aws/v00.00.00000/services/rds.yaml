openapi: 3.0.0
info:
  title: RDS
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 0
          maxLength: 256
      required:
        - Key
    CustomDBEngineVersion:
      type: object
      properties:
        DatabaseInstallationFilesS3BucketName:
          type: string
          description: The name of an Amazon S3 bucket that contains database installation files for your CEV. For example, a valid bucket name is `my-custom-installation-files`.
          minLength: 3
          maxLength: 63
        DatabaseInstallationFilesS3Prefix:
          type: string
          description: The Amazon S3 directory that contains the database installation files for your CEV. For example, a valid bucket name is `123456789012/cev1`. If this setting isn't specified, no prefix is assumed.
          minLength: 1
          maxLength: 255
        Description:
          type: string
          description: An optional description of your CEV.
          minLength: 1
          maxLength: 1000
        Engine:
          type: string
          description: The database engine to use for your custom engine version (CEV). The only supported value is `custom-oracle-ee`.
          minLength: 1
          maxLength: 35
        EngineVersion:
          type: string
          description: The name of your CEV. The name format is 19.customized_string . For example, a valid name is 19.my_cev1. This setting is required for RDS Custom for Oracle, but optional for Amazon RDS. The combination of Engine and EngineVersion is unique per customer per Region.
          minLength: 1
          maxLength: 60
        KMSKeyId:
          type: string
          description: The AWS KMS key identifier for an encrypted CEV. A symmetric KMS key is required for RDS Custom, but optional for Amazon RDS.
          minLength: 1
          maxLength: 2048
        Manifest:
          type: string
          description: The CEV manifest, which is a JSON document that describes the installation .zip files stored in Amazon S3. Specify the name/value pairs in a file or a quoted string. RDS Custom applies the patches in the order in which they are listed.
          minLength: 1
          maxLength: 51000
        DBEngineVersionArn:
          type: string
          description: The ARN of the custom engine version.
        SourceCustomDbEngineVersionIdentifier:
          type: string
          description: The identifier of the source custom engine version.
        UseAwsProvidedLatestImage:
          type: boolean
          description: A value that indicates whether AWS provided latest image is applied automatically to the Custom Engine Version. By default, AWS provided latest image is applied automatically. This value is only applied on create.
        ImageId:
          type: string
          description: The identifier of Amazon Machine Image (AMI) used for CEV.
        Status:
          type: string
          description: The availability status to be assigned to the CEV.
          default: available
          enum:
            - available
            - inactive
            - inactive-except-restore
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Engine
        - EngineVersion
      x-stackql-resource-name: customdb_engine_version
      description: The AWS::RDS::CustomDBEngineVersion resource creates an Amazon RDS custom DB engine version.
      x-type-name: AWS::RDS::CustomDBEngineVersion
      x-stackql-primary-identifier:
        - Engine
        - EngineVersion
      x-create-only-properties:
        - Engine
        - EngineVersion
        - DatabaseInstallationFilesS3BucketName
        - DatabaseInstallationFilesS3Prefix
        - ImageId
        - KMSKeyId
        - Manifest
        - SourceCustomDbEngineVersionIdentifier
        - UseAwsProvidedLatestImage
      x-write-only-properties:
        - Manifest
        - SourceCustomDbEngineVersionIdentifier
        - UseAwsProvidedLatestImage
      x-read-only-properties:
        - DBEngineVersionArn
      x-required-properties:
        - Engine
        - EngineVersion
      x-tagging:
        taggable: true
      x-required-permissions:
        create:
          - ec2:CopySnapshot
          - ec2:DeleteSnapshot
          - ec2:DescribeSnapshots
          - kms:CreateGrant
          - kms:Decrypt
          - kms:DescribeKey
          - kms:GenerateDataKey
          - kms:ReEncrypt
          - mediaimport:CreateDatabaseBinarySnapshot
          - rds:AddTagsToResource
          - rds:CreateCustomDBEngineVersion
          - rds:DescribeDBEngineVersions
          - rds:ModifyCustomDBEngineVersion
          - s3:CreateBucket
          - s3:GetObject
          - s3:GetObjectAcl
          - s3:GetObjectTagging
          - s3:ListBucket
          - s3:PutBucketObjectLockConfiguration
          - s3:PutBucketPolicy
          - s3:PutBucketVersioning
        read:
          - rds:DescribeDBEngineVersions
        update:
          - rds:AddTagsToResource
          - rds:DescribeDBEngineVersions
          - rds:ModifyCustomDBEngineVersion
          - rds:RemoveTagsFromResource
        delete:
          - rds:DeleteCustomDBEngineVersion
          - rds:DescribeDBEngineVersions
        list:
          - rds:DescribeDBEngineVersions
    Endpoint:
      type: object
      additionalProperties: false
      properties:
        Address:
          type: string
          description: Specifies the DNS address of the DB instance.
        Port:
          type: string
          description: Specifies the port that the database engine is listening on.
        HostedZoneId:
          type: string
          description: Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
      description: |-
        This data type represents the information you need to connect to an Amazon RDS DB instance. This data type is used as a response element in the following actions:
          +   ``CreateDBInstance`` 
          +   ``DescribeDBInstances`` 
          +   ``DeleteDBInstance`` 
          
         For the data structure that represents Amazon Aurora DB cluster endpoints, see ``DBClusterEndpoint``.
    ReadEndpoint:
      type: object
      additionalProperties: false
      properties:
        Address:
          description: The reader endpoint for the DB cluster.
          type: string
    DBClusterRole:
      description: Describes an AWS Identity and Access Management (IAM) role that is associated with a DB cluster.
      type: object
      additionalProperties: false
      properties:
        FeatureName:
          description: The name of the feature associated with the AWS Identity and Access Management (IAM) role. For the list of supported feature names, see DBEngineVersion in the Amazon RDS API Reference.
          type: string
        RoleArn:
          description: The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
          type: string
      required:
        - RoleArn
    ServerlessV2ScalingConfiguration:
      description: Contains the scaling configuration of an Aurora Serverless v2 DB cluster.
      type: object
      additionalProperties: false
      properties:
        MinCapacity:
          description: The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. The smallest value that you can use is 0.5.
          type: number
        MaxCapacity:
          description: The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 40, 40.5, 41, and so on. The largest value that you can use is 128.
          type: number
    ScalingConfiguration:
      description: The ScalingConfiguration property type specifies the scaling configuration of an Aurora Serverless DB cluster.
      type: object
      additionalProperties: false
      properties:
        AutoPause:
          description: A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).
          type: boolean
        MaxCapacity:
          description: |-
            The maximum capacity for an Aurora DB cluster in serverless DB engine mode.
            For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.
            For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
            The maximum capacity must be greater than or equal to the minimum capacity.
          type: integer
        MinCapacity:
          description: |-
            The minimum capacity for an Aurora DB cluster in serverless DB engine mode.
            For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.
            For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
            The minimum capacity must be less than or equal to the maximum capacity.
          type: integer
        SecondsBeforeTimeout:
          description: |-
            The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before enforcing the timeout action.
            The default is 300.
          type: integer
        SecondsUntilAutoPause:
          description: The time, in seconds, before an Aurora DB cluster in serverless mode is paused.
          type: integer
        TimeoutAction:
          description: |-
            The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange.
            ForceApplyCapacityChange sets the capacity to the specified value as soon as possible.
            RollbackCapacityChange, the default, ignores the capacity change if a scaling point isn't found in the timeout period.

            For more information, see Autoscaling for Aurora Serverless v1 in the Amazon Aurora User Guide.
          type: string
    MasterUserSecret:
      type: object
      additionalProperties: false
      properties:
        SecretArn:
          type: string
          description: The Amazon Resource Name (ARN) of the secret.
        KmsKeyId:
          type: string
          description: The AWS KMS key identifier that is used to encrypt the secret.
      description: |-
        The ``MasterUserSecret`` return value specifies the secret managed by RDS in AWS Secrets Manager for the master user password.
         For more information, see [Password management with Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the *Amazon RDS User Guide* and [Password management with Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html) in the *Amazon Aurora User Guide.*
    DBCluster:
      type: object
      properties:
        Endpoint:
          $ref: '#/components/schemas/Endpoint'
        ReadEndpoint:
          $ref: '#/components/schemas/ReadEndpoint'
        AllocatedStorage:
          description: The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster.
          type: integer
        AssociatedRoles:
          description: Provides a list of the AWS Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other AWS services on your behalf.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/DBClusterRole'
        AvailabilityZones:
          description: A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see Choosing the Regions and Availability Zones in the Amazon Aurora User Guide.
          type: array
          uniqueItems: true
          items:
            type: string
        AutoMinorVersionUpgrade:
          description: A value that indicates whether minor engine upgrades are applied automatically to the DB cluster during the maintenance window. By default, minor engine upgrades are applied automatically.
          type: boolean
        BacktrackWindow:
          description: The target backtrack window, in seconds. To disable backtracking, set this value to 0.
          default: 0
          minimum: 0
          type: integer
        BackupRetentionPeriod:
          description: The number of days for which automated backups are retained.
          default: 1
          minimum: 1
          type: integer
        CopyTagsToSnapshot:
          description: A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
          type: boolean
        DatabaseName:
          description: The name of your database. If you don't provide a name, then Amazon RDS won't create a database in this DB cluster. For naming constraints, see Naming Constraints in the Amazon RDS User Guide.
          type: string
        DBClusterArn:
          type: string
          description: The Amazon Resource Name (ARN) for the DB cluster.
        DBClusterInstanceClass:
          description: The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6g.xlarge.
          type: string
        DBClusterResourceId:
          description: The AWS Region-unique, immutable identifier for the DB cluster.
          type: string
        DBInstanceParameterGroupName:
          description: The name of the DB parameter group to apply to all instances of the DB cluster.
          type: string
        DBSystemId:
          description: Reserved for future use.
          type: string
        GlobalClusterIdentifier:
          description: |-
            If you are configuring an Aurora global database cluster and want your Aurora DB cluster to be a secondary member in the global database cluster, specify the global cluster ID of the global database cluster. To define the primary database cluster of the global cluster, use the AWS::RDS::GlobalCluster resource.

            If you aren't configuring a global database cluster, don't specify this property.
          type: string
          pattern: ^$|^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
          minLength: 0
          maxLength: 63
        DBClusterIdentifier:
          description: The DB cluster identifier. This parameter is stored as a lowercase string.
          type: string
          pattern: ^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
          minLength: 1
          maxLength: 63
        DBClusterParameterGroupName:
          description: The name of the DB cluster parameter group to associate with this DB cluster.
          type: string
          default: default.aurora5.6
        DBSubnetGroupName:
          description: A DB subnet group that you want to associate with this DB cluster.
          type: string
        DeletionProtection:
          description: A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
          type: boolean
        Domain:
          description: The Active Directory directory ID to create the DB cluster in.
          type: string
        DomainIAMRoleName:
          description: Specify the name of the IAM role to be used when making API calls to the Directory Service.
          type: string
        EnableCloudwatchLogsExports:
          description: The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon Aurora User Guide.
          type: array
          uniqueItems: true
          items:
            type: string
        EnableGlobalWriteForwarding:
          description: Specifies whether to enable this DB cluster to forward write operations to the primary cluster of a global cluster (Aurora global database). By default, write operations are not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database.
          type: boolean
        EnableHttpEndpoint:
          description: A value that indicates whether to enable the HTTP endpoint for DB cluster. By default, the HTTP endpoint is disabled.
          type: boolean
        EnableIAMDatabaseAuthentication:
          description: A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.
          type: boolean
        Engine:
          description: 'The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql'
          type: string
        EngineMode:
          description: The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery, global, or multimaster.
          type: string
        EngineVersion:
          description: The version number of the database engine to use.
          type: string
        ManageMasterUserPassword:
          description: A value that indicates whether to manage the master user password with AWS Secrets Manager.
          type: boolean
        Iops:
          description: The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster.
          type: integer
        KmsKeyId:
          description: The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is used to encrypt the database instances in the DB cluster, such as arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef. If you enable the StorageEncrypted property but don't specify this property, the default master key is used. If you specify this property, you must set the StorageEncrypted property to true.
          type: string
        MasterUsername:
          description: The name of the master user for the DB cluster. You must specify MasterUsername, unless you specify SnapshotIdentifier. In that case, don't specify MasterUsername.
          type: string
          pattern: ^[a-zA-Z]{1}[a-zA-Z0-9_]*$
          minLength: 1
        MasterUserPassword:
          description: The master password for the DB instance.
          type: string
        MasterUserSecret:
          $ref: '#/components/schemas/MasterUserSecret'
          description: Contains the secret managed by RDS in AWS Secrets Manager for the master user password.
        MonitoringInterval:
          description: The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster. To turn off collecting Enhanced Monitoring metrics, specify 0. The default is 0.
          type: integer
          default: 0
        MonitoringRoleArn:
          description: The Amazon Resource Name (ARN) for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.
          type: string
        NetworkType:
          description: The network type of the DB cluster.
          type: string
        PerformanceInsightsEnabled:
          description: A value that indicates whether to turn on Performance Insights for the DB cluster.
          type: boolean
        PerformanceInsightsKmsKeyId:
          description: The Amazon Web Services KMS key identifier for encryption of Performance Insights data.
          type: string
        PerformanceInsightsRetentionPeriod:
          description: The amount of time, in days, to retain Performance Insights data.
          type: integer
        Port:
          description: 'The port number on which the instances in the DB cluster accept connections. Default: 3306 if engine is set as aurora or 5432 if set to aurora-postgresql.'
          type: integer
        PreferredBackupWindow:
          description: The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.
          type: string
        PreferredMaintenanceWindow:
          description: The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.
          type: string
        PubliclyAccessible:
          description: A value that indicates whether the DB cluster is publicly accessible.
          type: boolean
        ReplicationSourceIdentifier:
          description: The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
          type: string
        RestoreToTime:
          description: 'The date and time to restore the DB cluster to. Value must be a time in Universal Coordinated Time (UTC) format. An example: 2015-03-07T23:45:00Z'
          type: string
        RestoreType:
          description: |-
            The type of restore to be performed. You can specify one of the following values:
            full-copy - The new DB cluster is restored as a full copy of the source DB cluster.
            copy-on-write - The new DB cluster is restored as a clone of the source DB cluster.
          type: string
          default: full-copy
        ServerlessV2ScalingConfiguration:
          description: Contains the scaling configuration of an Aurora Serverless v2 DB cluster.
          $ref: '#/components/schemas/ServerlessV2ScalingConfiguration'
        ScalingConfiguration:
          description: The ScalingConfiguration property type specifies the scaling configuration of an Aurora Serverless DB cluster.
          $ref: '#/components/schemas/ScalingConfiguration'
        SnapshotIdentifier:
          description: >-
            The identifier for the DB snapshot or DB cluster snapshot to restore from.

            You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.

            After you restore a DB cluster with a SnapshotIdentifier property, you must specify the same SnapshotIdentifier property for any future updates to the DB cluster. When you specify this property for an update, the DB cluster is not restored from the snapshot again, and the data in the database is not changed. However, if you don't specify the SnapshotIdentifier property, an empty DB cluster is created, and the original DB cluster is deleted. If you specify a property that is different
            from the previous snapshot restore property, the DB cluster is restored from the specified SnapshotIdentifier property, and the original DB cluster is deleted.
          type: string
        SourceDBClusterIdentifier:
          description: The identifier of the source DB cluster from which to restore.
          type: string
        SourceRegion:
          description: The AWS Region which contains the source DB cluster when replicating a DB cluster. For example, us-east-1.
          type: string
        StorageEncrypted:
          description: |-
            Indicates whether the DB instance is encrypted.
            If you specify the DBClusterIdentifier, SnapshotIdentifier, or SourceDBInstanceIdentifier property, don't specify this property. The value is inherited from the cluster, snapshot, or source DB instance.
          type: boolean
        StorageThroughput:
          description: Specifies the storage throughput value for the DB cluster. This setting applies only to the gp3 storage type.
          type: integer
        StorageType:
          description: Specifies the storage type to be associated with the DB cluster.
          type: string
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
        UseLatestRestorableTime:
          description: A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time.
          type: boolean
        VpcSecurityGroupIds:
          description: A list of EC2 VPC security groups to associate with this DB cluster.
          uniqueItems: true
          items:
            type: string
          type: array
      x-stackql-resource-name: db_cluster
      description: The AWS::RDS::DBCluster resource creates an Amazon Aurora DB cluster.
      x-type-name: AWS::RDS::DBCluster
      x-stackql-primary-identifier:
        - DBClusterIdentifier
      x-create-only-properties:
        - AvailabilityZones
        - DBClusterIdentifier
        - DBSubnetGroupName
        - DBSystemId
        - DatabaseName
        - EngineMode
        - KmsKeyId
        - PubliclyAccessible
        - RestoreToTime
        - RestoreType
        - SnapshotIdentifier
        - SourceDBClusterIdentifier
        - SourceRegion
        - StorageEncrypted
        - UseLatestRestorableTime
      x-conditional-create-only-properties:
        - Engine
        - GlobalClusterIdentifier
        - MasterUsername
      x-write-only-properties:
        - DBInstanceParameterGroupName
        - MasterUserPassword
        - RestoreToTime
        - RestoreType
        - SnapshotIdentifier
        - SourceDBClusterIdentifier
        - SourceRegion
        - UseLatestRestorableTime
      x-read-only-properties:
        - DBClusterArn
        - DBClusterResourceId
        - Endpoint
        - Endpoint/Address
        - Endpoint/Port
        - ReadEndpoint/Port
        - ReadEndpoint/Address
        - MasterUserSecret/SecretArn
        - StorageThroughput
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - iam:PassRole
          - rds:AddRoleToDBCluster
          - rds:AddTagsToResource
          - rds:CreateDBCluster
          - rds:CreateDBInstance
          - rds:DescribeDBClusters
          - rds:DescribeEvents
          - rds:EnableHttpEndpoint
          - rds:ModifyDBCluster
          - rds:RestoreDBClusterFromSnapshot
          - rds:RestoreDBClusterToPointInTime
          - secretsmanager:CreateSecret
          - secretsmanager:TagResource
        read:
          - rds:DescribeDBClusters
        update:
          - ec2:DescribeSecurityGroups
          - iam:PassRole
          - rds:AddRoleToDBCluster
          - rds:AddTagsToResource
          - rds:DescribeDBClusters
          - rds:DescribeDBSubnetGroups
          - rds:DescribeEvents
          - rds:DescribeGlobalClusters
          - rds:DisableHttpEndpoint
          - rds:EnableHttpEndpoint
          - rds:ModifyDBCluster
          - rds:ModifyDBInstance
          - rds:RemoveFromGlobalCluster
          - rds:RemoveRoleFromDBCluster
          - rds:RemoveTagsFromResource
          - secretsmanager:CreateSecret
          - secretsmanager:TagResource
        delete:
          - rds:CreateDBClusterSnapshot
          - rds:DeleteDBCluster
          - rds:DeleteDBInstance
          - rds:DescribeDBClusters
          - rds:DescribeGlobalClusters
          - rds:RemoveFromGlobalCluster
        list:
          - rds:DescribeDBClusters
    DBClusterParameterGroup:
      type: object
      properties:
        Description:
          description: A friendly description for this DB cluster parameter group.
          type: string
        Family:
          description: The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a DB engine and engine version compatible with that DB cluster parameter group family.
          type: string
        Parameters:
          description: An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.
          type: object
        DBClusterParameterGroupName:
          type: string
          pattern: ^[a-zA-Z]{1}(?:-?[a-zA-Z0-9])*$
        Tags:
          description: The list of tags for the cluster parameter group.
          type: array
          maxItems: 50
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Description
        - Family
        - Parameters
      x-stackql-resource-name: db_cluster_parameter_group
      description: The AWS::RDS::DBClusterParameterGroup resource creates a new Amazon RDS DB cluster parameter group. For more information, see Managing an Amazon Aurora DB Cluster in the Amazon Aurora User Guide.
      x-type-name: AWS::RDS::DBClusterParameterGroup
      x-stackql-primary-identifier:
        - DBClusterParameterGroupName
      x-create-only-properties:
        - DBClusterParameterGroupName
        - Description
        - Family
      x-required-properties:
        - Description
        - Family
        - Parameters
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - rds:AddTagsToResource
          - rds:CreateDBClusterParameterGroup
          - rds:DescribeDBClusterParameterGroups
          - rds:DescribeDBClusterParameters
          - rds:DescribeDBClusters
          - rds:DescribeEngineDefaultClusterParameters
          - rds:ListTagsForResource
          - rds:ModifyDBClusterParameterGroup
          - rds:RemoveTagsFromResource
        read:
          - rds:DescribeDBClusterParameterGroups
          - rds:DescribeDBClusterParameters
          - rds:DescribeEngineDefaultClusterParameters
          - rds:ListTagsForResource
        update:
          - rds:AddTagsToResource
          - rds:DescribeDBClusterParameterGroups
          - rds:DescribeDBClusterParameters
          - rds:DescribeDBClusters
          - rds:DescribeEngineDefaultClusterParameters
          - rds:ListTagsForResource
          - rds:ModifyDBClusterParameterGroup
          - rds:RemoveTagsFromResource
          - rds:ResetDBClusterParameterGroup
        delete:
          - rds:DeleteDBClusterParameterGroup
        list:
          - rds:DescribeDBClusterParameterGroups
    CertificateDetails:
      type: object
      additionalProperties: false
      properties:
        CAIdentifier:
          type: string
          description: The CA identifier of the CA certificate used for the DB instance's server certificate.
        ValidTill:
          type: string
          format: date-time
          description: The expiration date of the DB instance’s server certificate.
      description: |-
        Returns the details of the DB instance’s server certificate.
         For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the *Amazon RDS User Guide* and [Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the *Amazon Aurora User Guide*.
    DBInstanceRole:
      type: object
      additionalProperties: false
      properties:
        FeatureName:
          type: string
          description: The name of the feature associated with the AWS Identity and Access Management (IAM) role. IAM roles that are associated with a DB instance grant permission for the DB instance to access other AWS services on your behalf. For the list of supported feature names, see the ``SupportedFeatureNames`` description in [DBEngineVersion](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DBEngineVersion.html) in the *Amazon RDS API Reference*.
        RoleArn:
          type: string
          description: The Amazon Resource Name (ARN) of the IAM role that is associated with the DB instance.
      required:
        - FeatureName
        - RoleArn
      description: Information about an AWS Identity and Access Management (IAM) role that is associated with a DB instance.
    ProcessorFeature:
      type: object
      additionalProperties: false
      properties:
        Name:
          type: string
          enum:
            - coreCount
            - threadsPerCore
          description: The name of the processor feature. Valid names are ``coreCount`` and ``threadsPerCore``.
        Value:
          type: string
          description: The value of a processor feature name.
      description: The ``ProcessorFeature`` property type specifies the processor features of a DB instance class status.
    DBInstance:
      type: object
      properties:
        AllocatedStorage:
          type: string
          description: |-
            The amount of storage in gibibytes (GiB) to be initially allocated for the database instance.
              If any value is set in the ``Iops`` parameter, ``AllocatedStorage`` must be at least 100 GiB, which corresponds to the minimum Iops value of 1,000. If you increase the ``Iops`` value (in 1,000 IOPS increments), then you must also increase the ``AllocatedStorage`` value (in 100-GiB increments). 
               *Amazon Aurora* 
             Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.
              *Db2* 
             Constraints to the amount of storage for each storage type are the following:
              + General Purpose (SSD) storage (gp3): Must be an integer from 20 to 64000.
             + Provisioned IOPS storage (io1): Must be an integer from 100 to 64000.
             
              *MySQL* 
             Constraints to the amount of storage for each storage type are the following: 
              + General Purpose (SSD) storage (gp2): Must be an integer fro
          pattern: ^[0-9]*$
        AllowMajorVersionUpgrade:
          type: boolean
          description: |-
            A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
             Constraints: Major version upgrades must be allowed when specifying a value for the ``EngineVersion`` parameter that is a different major version than the DB instance's current version.
        AssociatedRoles:
          type: array
          items:
            $ref: '#/components/schemas/DBInstanceRole'
          description: |-
            The IAMlong (IAM) roles associated with the DB instance. 
              *Amazon Aurora* 
             Not applicable. The associated roles are managed by the DB cluster.
        AutoMinorVersionUpgrade:
          type: boolean
          description: A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
        AutomaticBackupReplicationRegion:
          type: string
          description: The destination region for the backup replication of the DB instance. For more info, see [Replicating automated backups to another Region](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html) in the *Amazon RDS User Guide*.
        AvailabilityZone:
          type: string
          description: |-
            The Availability Zone (AZ) where the database will be created. For information on AWS-Regions and Availability Zones, see [Regions and Availability Zones](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html).
             For Amazon Aurora, each Aurora DB cluster hosts copies of its storage in three separate Availability Zones. Specify one of these Availability Zones. Aurora automatically chooses an appropriate Availability Zone if you don't specify one.
             Default: A random, system-chosen Availability Zone in the endpoint's AWS-Region.
             Constraints:
              +  The ``AvailabilityZone`` parameter can't be specified if the DB instance is a Multi-AZ deployment.
              +  The specified Availability Zone must be in the same AWS-Region as the current endpoint.
              
             Example: ``us-east-1d``
        BackupRetentionPeriod:
          type: integer
          minimum: 0
          default: 1
          description: |-
            The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.
             *Amazon Aurora*
             Not applicable. The retention period for automated backups is managed by the DB cluster.
             Default: 1
             Constraints:
              +  Must be a value from 0 to 35
              +  Can't be set to 0 if the DB instance is a source to read replicas
        CACertificateIdentifier:
          type: string
          description: |-
            The identifier of the CA certificate for this DB instance.
             For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the *Amazon RDS User Guide* and [Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the *Amazon Aurora User Guide*.
        CertificateDetails:
          $ref: '#/components/schemas/CertificateDetails'
          description: The details of the DB instance's server certificate.
        CertificateRotationRestart:
          type: boolean
          description: |-
            Specifies whether the DB instance is restarted when you rotate your SSL/TLS certificate.
             By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.
              Set this parameter only if you are *not* using SSL/TLS to connect to the DB instance.
              If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:
              +  For more information about rotating your SSL/TLS certificate for RDS DB engines, see [Rotating Your SSL/TLS Certificate.](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html) in the *Amazon RDS User Guide.* 
              +  For more information about rotating your SSL/TLS certificate for Aurora DB engines, see [Rotating Your SSL/TLS Certificate](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html) in the *Amazon Aurora User Gui
        CharacterSetName:
          type: string
          description: |-
            For supported engines, indicates that the DB instance should be associated with the specified character set.
              *Amazon Aurora* 
             Not applicable. The character set is managed by the DB cluster. For more information, see [AWS::RDS::DBCluster](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html).
        CopyTagsToSnapshot:
          type: boolean
          description: |-
            Specifies whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
             This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.
        CustomIAMInstanceProfile:
          type: string
          description: |-
            The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.
             This setting is required for RDS Custom.
             Constraints:
              +  The profile must exist in your account.
              +  The profile must have an IAM role that Amazon EC2 has permissions to assume.
              +  The instance profile name and the associated IAM role name must start with the prefix ``AWSRDSCustom``.
              
             For the list of permissions required for the IAM role, see [Configure IAM and your VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc) in the *Amazon RDS User Guide*.
        DBClusterIdentifier:
          type: string
          description: The identifier of the DB cluster that the instance will belong to.
        DBClusterSnapshotIdentifier:
          type: string
          description: |-
            The identifier for the RDS for MySQL Multi-AZ DB cluster snapshot to restore from.
             For more information on Multi-AZ DB clusters, see [Multi-AZ DB cluster deployments](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html) in the *Amazon RDS User Guide*.
             Constraints:
              +  Must match the identifier of an existing Multi-AZ DB cluster snapshot.
              +  Can't be specified when ``DBSnapshotIdentifier`` is specified.
              +  Must be specified when ``DBSnapshotIdentifier`` isn't specified.
              +  If you are restoring from a shared manual Multi-AZ DB cluster snapshot, the ``DBClusterSnapshotIdentifier`` must be the ARN of the shared snapshot.
              +  Can't be the identifier of an Aurora DB cluster snapshot.
              +  Can't be the identifier of an RDS for PostgreSQL Multi-AZ DB cluster snapshot.
        DBInstanceArn:
          type: string
          description: ''
        DBInstanceClass:
          type: string
          description: |-
            The compute and memory capacity of the DB instance, for example, ``db.m4.large``. Not all DB instance classes are available in all AWS Regions, or for all database engines.
             For the full list of DB instance classes, and availability for your engine, see [DB Instance Class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the *Amazon RDS User Guide.* For more information about DB instance class pricing and AWS Region support for DB instance classes, see [Amazon RDS Pricing](https://docs.aws.amazon.com/rds/pricing/).
        DBInstanceIdentifier:
          type: string
          pattern: ^$|^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
          minLength: 1
          maxLength: 63
          description: |-
            A name for the DB instance. If you specify a name, AWS CloudFormation converts it to lowercase. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the DB instance. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
             For information about constraints that apply to DB instance identifiers, see [Naming constraints in Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints) in the *Amazon RDS User Guide*.
              If you specify a name, you can't perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
        DbiResourceId:
          type: string
          description: ''
        DBName:
          type: string
          description: |-
            The meaning of this parameter differs according to the database engine you use.
              If you specify the ``DBSnapshotIdentifier`` property, this property only applies to RDS for Oracle.
               *Amazon Aurora* 
             Not applicable. The database name is managed by the DB cluster.
              *Db2* 
             The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.
             Constraints:
              + Must contain 1 to 64 letters or numbers.
             + Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).
             + Can't be a word reserved by the specified database engine.
             
              *MySQL* 
             The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.
             Constraints:
              +  Must contain 1 to 64 letters or numbers.
              +  Can't be a word reserved by the specified database engine
              
              *MariaDB* 
             The name of the database to create when the DB instance is
        DBParameterGroupName:
          type: string
          description: |-
            The name of an existing DB parameter group or a reference to an [AWS::RDS::DBParameterGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-dbparametergroup.html) resource created in the template.
             To list all of the available DB parameter group names, use the following command:
             ``aws rds describe-db-parameter-groups --query "DBParameterGroups[].DBParameterGroupName" --output text``
              If any of the data members of the referenced parameter group are changed during an update, the DB instance might need to be restarted, which causes some interruption. If the parameter group contains static parameters, whether they were changed or not, an update triggers a reboot.
              If you don't specify a value for ``DBParameterGroupName`` property, the default DB parameter group for the specified engine and engine version is used.
        DBSecurityGroups:
          type: array
          uniqueItems: true
          items:
            type: string
          description: |-
            A list of the DB security groups to assign to the DB instance. The list can include both the name of existing DB security groups or references to AWS::RDS::DBSecurityGroup resources created in the template.
              If you set DBSecurityGroups, you must not set VPCSecurityGroups, and vice versa. Also, note that the DBSecurityGroups property exists only for backwards compatibility with older regions and is no longer recommended for providing security information to an RDS DB instance. Instead, use VPCSecurityGroups.
              If you specify this property, AWS CloudFormation sends only the following properties (if specified) to Amazon RDS during create operations:
              +  ``AllocatedStorage``
              +  ``AutoMinorVersionUpgrade``
              +  ``AvailabilityZone``
              +  ``BackupRetentionPeriod``
              +  ``CharacterSetName``
              +  ``DBInstanceClass``
              +  ``DBName``
              +  ``DBParameterGroupName``
              +  ``DBSecurityGroups``
              +  ``DBSubnetGroupName``
              +  ``Engine``
              +  ``EngineVersion``
              +  ``Iops``
              +  ``LicenseModel``
              +
        DBSnapshotIdentifier:
          type: string
          description: |-
            The name or Amazon Resource Name (ARN) of the DB snapshot that's used to restore the DB instance. If you're restoring from a shared manual DB snapshot, you must specify the ARN of the snapshot.
             By specifying this property, you can create a DB instance from the specified DB snapshot. If the ``DBSnapshotIdentifier`` property is an empty string or the ``AWS::RDS::DBInstance`` declaration has no ``DBSnapshotIdentifier`` property, AWS CloudFormation creates a new database. If the property contains a value (other than an empty string), AWS CloudFormation creates a database from the specified snapshot. If a snapshot with the specified name doesn't exist, AWS CloudFormation can't create the database and it rolls back the stack.
             Some DB instance properties aren't valid when you restore from a snapshot, such as the ``MasterUsername`` and ``MasterUserPassword`` properties. For information about the properties that you can specify, see the ``RestoreDBInstanceFromDBSnapshot`` action in the *Amazo
        DBSubnetGroupName:
          type: string
          description: |-
            A DB subnet group to associate with the DB instance. If you update this value, the new subnet group must be a subnet group in a new VPC. 
             If there's no DB subnet group, then the DB instance isn't a VPC DB instance.
             For more information about using Amazon RDS in a VPC, see [Using Amazon RDS with Amazon Virtual Private Cloud (VPC)](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.html) in the *Amazon RDS User Guide*. 
             *Amazon Aurora*
             Not applicable. The DB subnet group is managed by the DB cluster. If specified, the setting must match the DB cluster setting.
        DBSystemId:
          type: string
          description: The Oracle system identifier (SID), which is the name of the Oracle database instance that manages your database files. In this context, the term "Oracle database instance" refers exclusively to the system global area (SGA) and Oracle background processes. If you don't specify a SID, the value defaults to ``RDSCDB``. The Oracle SID is also the name of your CDB.
        DedicatedLogVolume:
          type: boolean
          description: Indicates whether the DB instance has a dedicated log volume (DLV) enabled.
        DeleteAutomatedBackups:
          type: boolean
          description: |-
            A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
             *Amazon Aurora*
             Not applicable. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the DB cluster are not deleted.
        DeletionProtection:
          type: boolean
          description: |-
            A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see [Deleting a DB Instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html). 
              *Amazon Aurora* 
             Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see ``CreateDBCluster``. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster.
        Domain:
          type: string
          description: |-
            The Active Directory directory ID to create the DB instance in. Currently, only Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.
             For more information, see [Kerberos Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html) in the *Amazon RDS User Guide*.
        DomainAuthSecretArn:
          type: string
          description: |-
            The ARN for the Secrets Manager secret with the credentials for the user joining the domain.
             Example: ``arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456``
        DomainDnsIps:
          type: array
          items:
            type: string
          description: |-
            The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.
             Constraints:
              +  Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.
              
             Example: ``123.124.125.126,234.235.236.237``
        DomainFqdn:
          type: string
          description: |-
            The fully qualified domain name (FQDN) of an Active Directory domain.
             Constraints:
              +  Can't be longer than 64 characters.
              
             Example: ``mymanagedADtest.mymanagedAD.mydomain``
        DomainIAMRoleName:
          type: string
          description: |-
            The name of the IAM role to use when making API calls to the Directory Service.
             This setting doesn't apply to the following DB instances:
              +  Amazon Aurora (The domain is managed by the DB cluster.)
              +  RDS Custom
        DomainOu:
          type: string
          description: |-
            The Active Directory organizational unit for your DB instance to join.
             Constraints:
              +  Must be in the distinguished name format.
              +  Can't be longer than 64 characters.
              
             Example: ``OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain``
        EnableCloudwatchLogsExports:
          type: array
          items:
            type: string
          description: |-
            The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see [Publishing Database Logs to Amazon CloudWatch Logs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the *Amazon Relational Database Service User Guide*.
              *Amazon Aurora* 
             Not applicable. CloudWatch Logs exports are managed by the DB cluster. 
              *Db2* 
             Valid values: ``diag.log``, ``notify.log`` 
              *MariaDB* 
             Valid values: ``audit``, ``error``, ``general``, ``slowquery`` 
              *Microsoft SQL Server* 
             Valid values: ``agent``, ``error`` 
             *MySQL* 
             Valid values: ``audit``, ``error``, ``general``, ``slowquery`` 
              *Oracle* 
             Valid values: ``alert``, ``audit``, ``listener``, ``trace``, ``oemagent`` 
              *PostgreSQL* 
             Valid values: ``postgresql``, ``upgrade``
        EnableIAMDatabaseAuthentication:
          type: boolean
          description: |-
            A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.
             This property is supported for RDS for MariaDB, RDS for MySQL, and RDS for PostgreSQL. For more information, see [IAM Database Authentication for MariaDB, MySQL, and PostgreSQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html) in the *Amazon RDS User Guide.* 
              *Amazon Aurora* 
             Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.
        EnablePerformanceInsights:
          type: boolean
          description: |-
            Specifies whether to enable Performance Insights for the DB instance. For more information, see [Using Amazon Performance Insights](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html) in the *Amazon RDS User Guide*.
             This setting doesn't apply to RDS Custom DB instances.
        Endpoint:
          $ref: '#/components/schemas/Endpoint'
          description: |-
            The connection endpoint for the DB instance.
              The endpoint might not be shown for instances with the status of ``creating``.
        Engine:
          type: string
          description: |-
            The name of the database engine that you want to use for this DB instance.
             Not every database engine is available in every AWS Region.
              When you are creating a DB instance, the ``Engine`` property is required.
              Valid Values:
              +  ``aurora-mysql`` (for Aurora MySQL DB instances)
              +  ``aurora-postgresql`` (for Aurora PostgreSQL DB instances)
              +   ``custom-oracle-ee`` (for RDS Custom for Oracle DB instances)
              +  ``custom-oracle-ee-cdb`` (for RDS Custom for Oracle DB instances)
              +  ``custom-sqlserver-ee`` (for RDS Custom for SQL Server DB instances)
              +  ``custom-sqlserver-se`` (for RDS Custom for SQL Server DB instances)
              +  ``custom-sqlserver-web`` (for RDS Custom for SQL Server DB instances)
              +  ``db2-ae``
              +  ``db2-se``
              +  ``mariadb``
              +  ``mysql``
              +  ``oracle-ee``
              +  ``oracle-ee-cdb``
              +  ``oracle-se2``
              +  ``oracle-se2-cdb``
              +  ``postgres``
              +  ``sqlserver-ee``
              +  ``sqlserver-se``
              +  ``sqlserver-ex``
              +  ``sqlserver-web``
        EngineVersion:
          type: string
          description: |-
            The version number of the database engine to use.
             For a list of valid engine versions, use the ``DescribeDBEngineVersions`` action.
             The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.
              *Amazon Aurora* 
             Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.
              *Db2* 
             See [Amazon RDS for Db2](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Db2.html#Db2.Concepts.VersionMgmt) in the *Amazon RDS User Guide.*
             *MariaDB*
             See [MariaDB on Amazon RDS Versions](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt) in the *Amazon RDS User Guide.*
             *Microsoft SQL Server*
             See [Microsoft SQL Server Versions on Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSu
        ManageMasterUserPassword:
          type: boolean
          description: |-
            Specifies whether to manage the master user password with AWS Secrets Manager.
             For more information, see [Password management with Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the *Amazon RDS User Guide.* 
             Constraints:
              +  Can't manage the master user password with AWS Secrets Manager if ``MasterUserPassword`` is specified.
        Iops:
          type: integer
          description: |-
            The number of I/O operations per second (IOPS) that the database provisions. The value must be equal to or greater than 1000. 
             If you specify this property, you must follow the range of allowed ratios of your requested IOPS rate to the amount of storage that you allocate (IOPS to allocated storage). For example, you can provision an Oracle database instance with 1000 IOPS and 200 GiB of storage (a ratio of 5:1), or specify 2000 IOPS with 200 GiB of storage (a ratio of 10:1). For more information, see [Amazon RDS Provisioned IOPS Storage to Improve Performance](https://docs.aws.amazon.com/AmazonRDS/latest/DeveloperGuide/CHAP_Storage.html#USER_PIOPS) in the *Amazon RDS User Guide*.
              If you specify ``io1`` for the ``StorageType`` property, then you must also specify the ``Iops`` property.
              Constraints:
              + For RDS for Db2, MariaDB, MySQL, Oracle, and PostgreSQL - Must be a multiple between .5 and 50 of the storage amount for the DB instance.
             + For RDS for SQL Server - Must be a multip
        KmsKeyId:
          type: string
          description: |-
            The ARN of the AWS KMS key that's used to encrypt the DB instance, such as ``arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef``. If you enable the StorageEncrypted property but don't specify this property, AWS CloudFormation uses the default KMS key. If you specify this property, you must set the StorageEncrypted property to true. 
             If you specify the ``SourceDBInstanceIdentifier`` property, the value is inherited from the source DB instance if the read replica is created in the same region.
             If you create an encrypted read replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the region that they're created in, and you can't use encryption keys from one region in another region.
             If you specify the ``SnapshotIdentifier`` property, the ``StorageEncrypted`` property value is inherited from the snapshot, and if the DB instance is encrypted, the specified ``KmsKeyId`` property is us
        LicenseModel:
          type: string
          description: |-
            License model information for this DB instance.
              Valid Values:
              +  Aurora MySQL - ``general-public-license``
              +  Aurora PostgreSQL - ``postgresql-license``
              +  RDS for Db2 - ``bring-your-own-license``. For more information about RDS for Db2 licensing, see [](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/db2-licensing.html) in the *Amazon RDS User Guide.*
              +  RDS for MariaDB - ``general-public-license``
              +  RDS for Microsoft SQL Server - ``license-included``
              +  RDS for MySQL - ``general-public-license``
              +  RDS for Oracle - ``bring-your-own-license`` or ``license-included``
              +  RDS for PostgreSQL - ``postgresql-license``
              
              If you've specified ``DBSecurityGroups`` and then you update the license model, AWS CloudFormation replaces the underlying DB instance. This will incur some interruptions to database availability.
        MasterUsername:
          type: string
          pattern: ^[a-zA-Z][a-zA-Z0-9_]{0,127}$
          description: |-
            The master user name for the DB instance.
              If you specify the ``SourceDBInstanceIdentifier`` or ``DBSnapshotIdentifier`` property, don't specify this property. The value is inherited from the source DB instance or snapshot.
             When migrating a self-managed Db2 database, we recommend that you use the same master username as your self-managed Db2 instance name.
               *Amazon Aurora* 
             Not applicable. The name for the master user is managed by the DB cluster. 
              *RDS for Db2* 
             Constraints:
              +  Must be 1 to 16 letters or numbers.
              +  First character must be a letter.
              +  Can't be a reserved word for the chosen database engine.
              
              *RDS for MariaDB* 
             Constraints:
               +  Must be 1 to 16 letters or numbers.
              +  Can't be a reserved word for the chosen database engine.
              
              *RDS for Microsoft SQL Server* 
             Constraints:
               +  Must be 1 to 128 letters or numbers.
              +  First character must be a letter.
              +  Can't be a reserved word for the chosen database engine.
              
              *RDS for MySQL* 
             Constrain
          minLength: 1
          maxLength: 128
        MasterUserPassword:
          type: string
          description: |-
            The password for the master user. The password can include any printable ASCII character except "/", """, or "@".
              *Amazon Aurora* 
             Not applicable. The password for the master user is managed by the DB cluster.
              *RDS for Db2* 
             Must contain from 8 to 255 characters.
              *RDS for MariaDB* 
             Constraints: Must contain from 8 to 41 characters.
              *RDS for Microsoft SQL Server* 
             Constraints: Must contain from 8 to 128 characters.
              *RDS for MySQL* 
             Constraints: Must contain from 8 to 41 characters.
              *RDS for Oracle* 
             Constraints: Must contain from 8 to 30 characters.
              *RDS for PostgreSQL* 
             Constraints: Must contain from 8 to 128 characters.
        MasterUserSecret:
          $ref: '#/components/schemas/MasterUserSecret'
          description: |-
            The secret managed by RDS in AWS Secrets Manager for the master user password.
             For more information, see [Password management with Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the *Amazon RDS User Guide.*
        MaxAllocatedStorage:
          type: integer
          description: |-
            The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.
             For more information about this setting, including limitations that apply to it, see [Managing capacity automatically with Amazon RDS storage autoscaling](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling) in the *Amazon RDS User Guide*.
             This setting doesn't apply to the following DB instances:
              +  Amazon Aurora (Storage is managed by the DB cluster.)
              +  RDS Custom
        MonitoringInterval:
          type: integer
          default: 0
          description: |-
            The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collection of Enhanced Monitoring metrics, specify 0. The default is 0.
             If ``MonitoringRoleArn`` is specified, then you must set ``MonitoringInterval`` to a value other than 0.
             This setting doesn't apply to RDS Custom.
             Valid Values: ``0, 1, 5, 10, 15, 30, 60``
        MonitoringRoleArn:
          type: string
          description: |-
            The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, ``arn:aws:iam:123456789012:role/emaccess``. For information on creating a monitoring role, see [Setting Up and Enabling Enhanced Monitoring](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling) in the *Amazon RDS User Guide*.
             If ``MonitoringInterval`` is set to a value other than ``0``, then you must supply a ``MonitoringRoleArn`` value.
             This setting doesn't apply to RDS Custom DB instances.
        MultiAZ:
          type: boolean
          description: |-
            Specifies whether the database instance is a Multi-AZ DB instance deployment. You can't set the ``AvailabilityZone`` parameter if the ``MultiAZ`` parameter is set to true. 
              For more information, see [Multi-AZ deployments for high availability](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html) in the *Amazon RDS User Guide*.
              *Amazon Aurora* 
             Not applicable. Amazon Aurora storage is replicated across all of the Availability Zones and doesn't require the ``MultiAZ`` option to be set.
        NcharCharacterSetName:
          type: string
          description: |-
            The name of the NCHAR character set for the Oracle DB instance.
             This setting doesn't apply to RDS Custom DB instances.
        NetworkType:
          description: |-
            The network type of the DB instance.
             Valid values:
              +   ``IPV4`` 
              +   ``DUAL`` 
              
             The network type is determined by the ``DBSubnetGroup`` specified for the DB instance. A ``DBSubnetGroup`` can support only the IPv4 protocol or the IPv4 and IPv6 protocols (``DUAL``).
             For more information, see [Working with a DB instance in a VPC](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html) in the *Amazon RDS User Guide.*
          type: string
        OptionGroupName:
          type: string
          description: |-
            Indicates that the DB instance should be associated with the specified option group.
             Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance.
        PerformanceInsightsKMSKeyId:
          type: string
          description: |-
            The AWS KMS key identifier for encryption of Performance Insights data.
             The KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
             If you do not specify a value for ``PerformanceInsightsKMSKeyId``, then Amazon RDS uses your default KMS key. There is a default KMS key for your AWS account. Your AWS account has a different default KMS key for each AWS Region.
             For information about enabling Performance Insights, see [EnablePerformanceInsights](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-database-instance.html#cfn-rds-dbinstance-enableperformanceinsights).
        PerformanceInsightsRetentionPeriod:
          type: integer
          description: |-
            The number of days to retain Performance Insights data.
             This setting doesn't apply to RDS Custom DB instances.
             Valid Values:
              +   ``7`` 
              +   *month* * 31, where *month* is a number of months from 1-23. Examples: ``93`` (3 months * 31), ``341`` (11 months * 31), ``589`` (19 months * 31)
              +   ``731`` 
              
             Default: ``7`` days
             If you specify a retention period that isn't valid, such as ``94``, Amazon RDS returns an error.
        Port:
          type: string
          description: |-
            The port number on which the database accepts connections.
              *Amazon Aurora* 
             Not applicable. The port number is managed by the DB cluster.
              *Db2* 
             Default value: ``50000``
          pattern: ^\d*$
        PreferredBackupWindow:
          type: string
          description: |-
            The daily time range during which automated backups are created if automated backups are enabled, using the ``BackupRetentionPeriod`` parameter. For more information, see [Backup Window](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow) in the *Amazon RDS User Guide.* 
             Constraints:
              + Must be in the format ``hh24:mi-hh24:mi``.
              + Must be in Universal Coordinated Time (UTC).
              + Must not conflict with the preferred maintenance window.
              + Must be at least 30 minutes.
              
              *Amazon Aurora* 
             Not applicable. The daily time range for creating automated backups is managed by the DB cluster.
        PreferredMaintenanceWindow:
          type: string
          description: |-
            The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
             Format: ``ddd:hh24:mi-ddd:hh24:mi`` 
             The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see [Adjusting the Preferred DB Instance Maintenance Window](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow) in the *Amazon RDS User Guide.* 
              This property applies when AWS CloudFormation initially creates the DB instance. If you use AWS CloudFormation to update the DB instance, those updates are applied immediately.
              Constraints: Minimum 30-minute window.
        ProcessorFeatures:
          type: array
          items:
            $ref: '#/components/schemas/ProcessorFeature'
          description: |-
            The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
             This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
        PromotionTier:
          type: integer
          minimum: 0
          default: 1
          description: |-
            The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see [Fault Tolerance for an Aurora DB Cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance) in the *Amazon Aurora User Guide*.
             This setting doesn't apply to RDS Custom DB instances.
             Default: ``1`` 
             Valid Values: ``0 - 15``
        PubliclyAccessible:
          type: boolean
          description: |-
            Indicates whether the DB instance is an internet-facing instance. If you specify true, AWS CloudFormation creates an instance with a publicly resolvable DNS name, which resolves to a public IP address. If you specify false, AWS CloudFormation creates an internal instance with a DNS name that resolves to a private IP address. 
             The default behavior value depends on your VPC setup and the database subnet group. For more information, see the ``PubliclyAccessible`` parameter in the [CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html) in the *Amazon RDS API Reference*.
        ReplicaMode:
          description: |-
            The open mode of an Oracle read replica. For more information, see [Working with Oracle Read Replicas for Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html) in the *Amazon RDS User Guide*.
             This setting is only supported in RDS for Oracle.
             Default: ``open-read-only``
             Valid Values: ``open-read-only`` or ``mounted``
          type: string
        RestoreTime:
          description: |-
            The date and time to restore from.
             Constraints:
              +  Must be a time in Universal Coordinated Time (UTC) format.
              +  Must be before the latest restorable time for the DB instance.
              +  Can't be specified if the ``UseLatestRestorableTime`` parameter is enabled.
              
             Example: ``2009-09-07T23:45:00Z``
          type: string
          format: date-time
        SourceDBClusterIdentifier:
          description: |-
            The identifier of the Multi-AZ DB cluster that will act as the source for the read replica. Each DB cluster can have up to 15 read replicas.
             Constraints:
              +  Must be the identifier of an existing Multi-AZ DB cluster.
              +  Can't be specified if the ``SourceDBInstanceIdentifier`` parameter is also specified.
              +  The specified DB cluster must have automatic backups enabled, that is, its backup retention period must be greater than 0.
              +  The source DB cluster must be in the same AWS-Region as the read replica. Cross-Region replication isn't supported.
          type: string
        SourceDbiResourceId:
          type: string
          description: The resource ID of the source DB instance from which to restore.
        SourceDBInstanceAutomatedBackupsArn:
          type: string
          description: |-
            The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example, ``arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE``.
             This setting doesn't apply to RDS Custom.
        SourceDBInstanceIdentifier:
          type: string
          description: |-
            If you want to create a read replica DB instance, specify the ID of the source DB instance. Each DB instance can have a limited number of read replicas. For more information, see [Working with Read Replicas](https://docs.aws.amazon.com/AmazonRDS/latest/DeveloperGuide/USER_ReadRepl.html) in the *Amazon RDS User Guide*.
             For information about constraints that apply to DB instance identifiers, see [Naming constraints in Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints) in the *Amazon RDS User Guide*.
             The ``SourceDBInstanceIdentifier`` property determines whether a DB instance is a read replica. If you remove the ``SourceDBInstanceIdentifier`` property from your template and then update your stack, AWS CloudFormation promotes the Read Replica to a standalone DB instance.
               +  If you specify a source DB instance that uses VPC security groups, we recommend that you specify the ``VPCSecurityGroups`` property. If you don't specify the
        SourceRegion:
          type: string
          description: The ID of the region that contains the source DB instance for the read replica.
        StorageEncrypted:
          type: boolean
          description: |-
            A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.
             If you specify the ``KmsKeyId`` property, then you must enable encryption.
             If you specify the ``SourceDBInstanceIdentifier`` property, don't specify this property. The value is inherited from the source DB instance, and if the DB instance is encrypted, the specified ``KmsKeyId`` property is used.
             If you specify the ``DBSnapshotIdentifier`` and the specified snapshot is encrypted, don't specify this property. The value is inherited from the snapshot, and the specified ``KmsKeyId`` property is used.
             If you specify the ``DBSnapshotIdentifier`` and the specified snapshot isn't encrypted, you can use this property to specify that the restored DB instance is encrypted. Specify the ``KmsKeyId`` property for the KMS key to use for encryption. If you don't want the restored DB instance to be encrypted, then don't set this property or set it to ``false``.
             *Amazon Aurora*
             Not applicable. The encrypt
        StorageType:
          type: string
          description: |-
            Specifies the storage type to be associated with the DB instance.
              Valid values: ``gp2 | gp3 | io1 | standard`` 
             The ``standard`` value is also known as magnetic.
              If you specify ``io1`` or ``gp3``, you must also include a value for the ``Iops`` parameter. 
              Default: ``io1`` if the ``Iops`` parameter is specified, otherwise ``gp2`` 
             For more information, see [Amazon RDS DB Instance Storage](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html) in the *Amazon RDS User Guide*.
              *Amazon Aurora* 
             Not applicable. Aurora data is stored in the cluster volume, which is a single, virtual volume that uses solid state drives (SSDs).
        StorageThroughput:
          type: integer
          description: |-
            Specifies the storage throughput value for the DB instance. This setting applies only to the ``gp3`` storage type. 
             This setting doesn't apply to RDS Custom or Amazon Aurora.
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
          description: An optional array of key-value pairs to apply to this DB instance.
        TdeCredentialArn:
          type: string
          description: ''
        TdeCredentialPassword:
          type: string
          description: ''
        Timezone:
          type: string
          description: The time zone of the DB instance. The time zone parameter is currently supported only by [Microsoft SQL Server](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone).
        UseDefaultProcessorFeatures:
          type: boolean
          description: |-
            Specifies whether the DB instance class of the DB instance uses its default processor features.
             This setting doesn't apply to RDS Custom DB instances.
        UseLatestRestorableTime:
          type: boolean
          description: |-
            Specifies whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.
             Constraints:
              +  Can't be specified if the ``RestoreTime`` parameter is provided.
        VPCSecurityGroups:
          type: array
          uniqueItems: true
          items:
            type: string
          description: |-
            A list of the VPC security group IDs to assign to the DB instance. The list can include both the physical IDs of existing VPC security groups and references to [AWS::EC2::SecurityGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html) resources created in the template.
             If you plan to update the resource, don't specify VPC security groups in a shared VPC.
              If you set ``VPCSecurityGroups``, you must not set [DBSecurityGroups](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-rds-database-instance.html#cfn-rds-dbinstance-dbsecuritygroups), and vice versa.
              You can migrate a DB instance in your stack from an RDS DB security group to a VPC security group, but keep the following in mind:
              +  You can't revert to using an RDS security group after you establish a VPC security group membership.
              +  When you migrate your DB instance to VPC security groups, if your stack update rolls back because the DB instanc
      x-stackql-resource-name: db_instance
      description: |-
        The ``AWS::RDS::DBInstance`` resource creates an Amazon DB instance. The new DB instance can be an RDS DB instance, or it can be a DB instance in an Aurora DB cluster.
         For more information about creating an RDS DB instance, see [Creating an Amazon RDS DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CreateDBInstance.html) in the *Amazon RDS User Guide*.
         For more information about creating a DB instance in an Aurora DB cluster, see [Creating an Amazon Aurora DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.CreateInstance.html) in the *Amazon Aurora User Guide*.
         If you import an existing DB instance, and the template configuration doesn't match the actual configuration of the DB instance, AWS CloudFormation applies the changes in the template during the import operation.
          If a DB instance is deleted or replaced during an update, AWS CloudFormation deletes all automated snapshots. However, it retains manual DB snapshots. During an
      x-type-name: AWS::RDS::DBInstance
      x-stackql-primary-identifier:
        - DBInstanceIdentifier
      x-create-only-properties:
        - CharacterSetName
        - CustomIAMInstanceProfile
        - DBClusterIdentifier
        - DBInstanceIdentifier
        - DBName
        - DBSubnetGroupName
        - KmsKeyId
        - MasterUsername
        - NcharCharacterSetName
        - Port
        - SourceRegion
        - StorageEncrypted
        - Timezone
      x-conditional-create-only-properties:
        - AutoMinorVersionUpgrade
        - AvailabilityZone
        - BackupRetentionPeriod
        - DBClusterSnapshotIdentifier
        - DBParameterGroupName
        - DBSnapshotIdentifier
        - Engine
        - MultiAZ
        - PerformanceInsightsKMSKeyId
        - PreferredMaintenanceWindow
        - RestoreTime
        - SourceDBClusterIdentifier
        - SourceDBInstanceAutomatedBackupsArn
        - SourceDBInstanceIdentifier
        - SourceDbiResourceId
        - StorageType
        - UseLatestRestorableTime
      x-write-only-properties:
        - AllowMajorVersionUpgrade
        - CertificateRotationRestart
        - DBSnapshotIdentifier
        - DeleteAutomatedBackups
        - MasterUserPassword
        - Port
        - RestoreTime
        - SourceDBInstanceAutomatedBackupsArn
        - SourceDBInstanceIdentifier
        - SourceDbiResourceId
        - SourceRegion
        - TdeCredentialPassword
        - UseDefaultProcessorFeatures
        - UseLatestRestorableTime
      x-read-only-properties:
        - Endpoint/Address
        - Endpoint/Port
        - Endpoint/HostedZoneId
        - DbiResourceId
        - DBInstanceArn
        - DBSystemId
        - MasterUserSecret/SecretArn
        - CertificateDetails/CAIdentifier
        - CertificateDetails/ValidTill
      x-required-permissions:
        create:
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeInternetGateways
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcAttribute
          - ec2:DescribeVpcs
          - iam:CreateServiceLinkedRole
          - iam:GetRole
          - iam:ListRoles
          - iam:PassRole
          - kms:CreateGrant
          - kms:DescribeKey
          - rds:AddRoleToDBInstance
          - rds:AddTagsToResource
          - rds:CreateDBInstance
          - rds:CreateDBInstanceReadReplica
          - rds:DescribeDBInstances
          - rds:DescribeDBClusters
          - rds:DescribeDBClusterSnapshots
          - rds:DescribeDBInstanceAutomatedBackups
          - rds:DescribeDBSnapshots
          - rds:DescribeEvents
          - rds:ModifyDBInstance
          - rds:RebootDBInstance
          - rds:RestoreDBInstanceFromDBSnapshot
          - rds:RestoreDBInstanceToPointInTime
          - rds:StartDBInstanceAutomatedBackupsReplication
          - secretsmanager:CreateSecret
          - secretsmanager:TagResource
        read:
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeInternetGateways
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcAttribute
          - ec2:DescribeVpcs
          - rds:DescribeDBInstances
        update:
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeInternetGateways
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcAttribute
          - ec2:DescribeVpcs
          - iam:CreateServiceLinkedRole
          - iam:GetRole
          - iam:ListRoles
          - iam:PassRole
          - kms:CreateGrant
          - kms:DescribeKey
          - rds:AddRoleToDBInstance
          - rds:AddTagsToResource
          - rds:DescribeDBClusters
          - rds:DescribeDBEngineVersions
          - rds:DescribeDBInstances
          - rds:DescribeDBParameterGroups
          - rds:DescribeEvents
          - rds:ModifyDBInstance
          - rds:PromoteReadReplica
          - rds:RebootDBInstance
          - rds:RemoveRoleFromDBInstance
          - rds:RemoveTagsFromResource
          - rds:StartDBInstanceAutomatedBackupsReplication
          - rds:StopDBInstanceAutomatedBackupsReplication
          - secretsmanager:CreateSecret
          - secretsmanager:TagResource
        delete:
          - rds:CreateDBSnapshot
          - rds:DeleteDBInstance
          - rds:DescribeDBInstances
        list:
          - rds:DescribeDBInstances
    DBParameterGroup:
      type: object
      properties:
        DBParameterGroupName:
          description: |-
            The name of the DB parameter group.
             Constraints:
              +  Must be 1 to 255 letters, numbers, or hyphens.
              +  First character must be a letter
              +  Can't end with a hyphen or contain two consecutive hyphens
              
             If you don't specify a value for ``DBParameterGroupName`` property, a name is automatically created for the DB parameter group.
              This value is stored as a lowercase string.
          type: string
          pattern: ^[a-zA-Z]{1}(?:-?[a-zA-Z0-9])*$
        Description:
          description: Provides the customer-specified description for this DB parameter group.
          type: string
        Family:
          description: |-
            The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a DB engine and engine version compatible with that DB parameter group family.
              The DB parameter group family can't be changed when updating a DB parameter group.
              To list all of the available parameter group families, use the following command:
             ``aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"``
             The output contains duplicates.
             For more information, see ``CreateDBParameterGroup``.
          type: string
        Parameters:
          description: |-
            An array of parameter names and values for the parameter update. At least one parameter name and value must be supplied. Subsequent arguments are optional.
             RDS for Db2 requires you to bring your own Db2 license. You must enter your IBM customer ID (``rds.ibm_customer_id``) and site number (``rds.ibm_site_id``) before starting a Db2 instance.
             For more information about DB parameters and DB parameter groups for Amazon RDS DB engines, see [Working with DB Parameter Groups](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithParamGroups.html) in the *Amazon RDS User Guide*.
             For more information about DB cluster and DB instance parameters and parameter groups for Amazon Aurora DB engines, see [Working with DB Parameter Groups and DB Cluster Parameter Groups](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_WorkingWithParamGroups.html) in the *Amazon Aurora User Guide*.
              AWS CloudFormation doesn't support specifying an apply method for each individual 
          type: object
        Tags:
          description: |-
            An optional array of key-value pairs to apply to this DB parameter group.
              Currently, this is the only property that supports drift detection.
          type: array
          maxItems: 50
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Family
        - Description
      x-stackql-resource-name: db_parameter_group
      description: |-
        The ``AWS::RDS::DBParameterGroup`` resource creates a custom parameter group for an RDS database family.
         This type can be declared in a template and referenced in the ``DBParameterGroupName`` property of an ``AWS::RDS::DBInstance`` resource.
         For information about configuring parameters for Amazon RDS DB instances, see [Working with parameter groups](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithParamGroups.html) in the *Amazon RDS User Guide*.
         For information about configuring parameters for Amazon Aurora DB instances, see [Working with parameter groups](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_WorkingWithParamGroups.html) in the *Amazon Aurora User Guide*.
          Applying a parameter group to a DB instance may require the DB instance to reboot, resulting in a database outage for the duration of the reboot.
      x-type-name: AWS::RDS::DBParameterGroup
      x-stackql-primary-identifier:
        - DBParameterGroupName
      x-create-only-properties:
        - DBParameterGroupName
        - Description
        - Family
      x-required-properties:
        - Family
        - Description
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - rds:AddTagsToResource
          - rds:CreateDBParameterGroup
          - rds:DescribeDBParameterGroups
          - rds:DescribeDBParameters
          - rds:DescribeEngineDefaultParameters
          - rds:ListTagsForResource
          - rds:ModifyDBParameterGroup
          - rds:RemoveTagsFromResource
        read:
          - rds:DescribeDBParameterGroups
          - rds:DescribeDBParameters
          - rds:DescribeEngineDefaultParameters
          - rds:ListTagsForResource
        update:
          - rds:AddTagsToResource
          - rds:DescribeDBParameterGroups
          - rds:DescribeDBParameters
          - rds:DescribeEngineDefaultParameters
          - rds:ListTagsForResource
          - rds:ModifyDBParameterGroup
          - rds:ResetDBParameterGroup
          - rds:RemoveTagsFromResource
        delete:
          - rds:DeleteDBParameterGroup
        list:
          - rds:DescribeDBParameterGroups
    AuthFormat:
      type: object
      properties:
        AuthScheme:
          description: 'The type of authentication that the proxy uses for connections from the proxy to the underlying database. '
          type: string
          enum:
            - SECRETS
        Description:
          description: 'A user-specified description about the authentication used by a proxy to log in as a specific database user. '
          type: string
        IAMAuth:
          description: Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The ENABLED value is valid only for proxies with RDS for Microsoft SQL Server.
          type: string
          enum:
            - DISABLED
            - REQUIRED
            - ENABLED
        SecretArn:
          description: 'The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager. '
          type: string
        ClientPasswordAuthType:
          description: The type of authentication the proxy uses for connections from clients.
          type: string
          enum:
            - MYSQL_NATIVE_PASSWORD
            - POSTGRES_SCRAM_SHA_256
            - POSTGRES_MD5
            - SQL_SERVER_AUTHENTICATION
      additionalProperties: false
    TagFormat:
      type: object
      properties:
        Key:
          type: string
          pattern: (\w|\d|\s|\\|-|\.:=+-)*
          maxLength: 128
        Value:
          type: string
          pattern: (\w|\d|\s|\\|-|\.:=+-)*
          maxLength: 128
      additionalProperties: false
    DBProxy:
      type: object
      properties:
        Auth:
          description: The authorization mechanism that the proxy uses.
          type: array
          x-insertionOrder: false
          minItems: 1
          items:
            $ref: '#/components/schemas/AuthFormat'
        DBProxyArn:
          description: The Amazon Resource Name (ARN) for the proxy.
          type: string
        DBProxyName:
          description: The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
          type: string
          pattern: '[0-z]*'
          maxLength: 64
        DebugLogging:
          description: Whether the proxy includes detailed information about SQL statements in its logs.
          type: boolean
        Endpoint:
          description: The endpoint that you can use to connect to the proxy. You include the endpoint value in the connection string for a database client application.
          type: string
        EngineFamily:
          description: The kinds of databases that the proxy can connect to.
          type: string
          enum:
            - MYSQL
            - POSTGRESQL
            - SQLSERVER
        IdleClientTimeout:
          description: The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
          type: integer
        RequireTLS:
          description: A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
          type: boolean
        RoleArn:
          description: The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
          type: string
        Tags:
          description: An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TagFormat'
        VpcId:
          description: VPC ID to associate with the new DB proxy.
          type: string
        VpcSecurityGroupIds:
          description: VPC security group IDs to associate with the new proxy.
          type: array
          x-insertionOrder: false
          minItems: 1
          items:
            type: string
        VpcSubnetIds:
          description: VPC subnet IDs to associate with the new proxy.
          type: array
          x-insertionOrder: false
          minItems: 2
          items:
            type: string
      required:
        - Auth
        - DBProxyName
        - EngineFamily
        - RoleArn
        - VpcSubnetIds
      x-stackql-resource-name: db_proxy
      description: Resource schema for AWS::RDS::DBProxy
      x-type-name: AWS::RDS::DBProxy
      x-stackql-primary-identifier:
        - DBProxyName
      x-create-only-properties:
        - DBProxyName
        - EngineFamily
        - VpcSubnetIds
      x-read-only-properties:
        - DBProxyArn
        - Endpoint
        - VpcId
      x-required-properties:
        - Auth
        - DBProxyName
        - EngineFamily
        - RoleArn
        - VpcSubnetIds
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - rds:CreateDBProxy
          - rds:DescribeDBProxies
          - iam:PassRole
        read:
          - rds:DescribeDBProxies
        update:
          - rds:ModifyDBProxy
          - rds:AddTagsToResource
          - rds:RemoveTagsFromResource
          - iam:PassRole
        delete:
          - rds:DescribeDBProxies
          - rds:DeleteDBProxy
        list:
          - rds:DescribeDBProxies
    DBProxyEndpoint:
      type: object
      properties:
        DBProxyEndpointName:
          description: The identifier for the DB proxy endpoint. This name must be unique for all DB proxy endpoints owned by your AWS account in the specified AWS Region.
          type: string
          pattern: '[0-z]*'
          maxLength: 64
        DBProxyEndpointArn:
          description: The Amazon Resource Name (ARN) for the DB proxy endpoint.
          type: string
          pattern: arn:aws[A-Za-z0-9-]{0,64}:rds:[A-Za-z0-9-]{1,64}:[0-9]{12}:.*
        DBProxyName:
          description: The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
          type: string
          pattern: '[0-z]*'
          maxLength: 64
        VpcId:
          description: VPC ID to associate with the new DB proxy endpoint.
          type: string
        VpcSecurityGroupIds:
          description: VPC security group IDs to associate with the new DB proxy endpoint.
          type: array
          x-insertionOrder: false
          minItems: 1
          items:
            type: string
        VpcSubnetIds:
          description: VPC subnet IDs to associate with the new DB proxy endpoint.
          type: array
          minItems: 2
          x-insertionOrder: false
          items:
            type: string
        Endpoint:
          description: The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the connection string for a database client application.
          type: string
          maxLength: 256
        TargetRole:
          description: A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations.
          type: string
          enum:
            - READ_WRITE
            - READ_ONLY
        IsDefault:
          description: A value that indicates whether this endpoint is the default endpoint for the associated DB proxy. Default DB proxy endpoints always have read/write capability. Other endpoints that you associate with the DB proxy can be either read/write or read-only.
          type: boolean
        Tags:
          description: An optional set of key-value pairs to associate arbitrary data of your choosing with the DB proxy endpoint.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TagFormat'
      required:
        - DBProxyName
        - DBProxyEndpointName
        - VpcSubnetIds
      x-stackql-resource-name: db_proxy_endpoint
      description: Resource schema for AWS::RDS::DBProxyEndpoint.
      x-type-name: AWS::RDS::DBProxyEndpoint
      x-stackql-primary-identifier:
        - DBProxyEndpointName
      x-create-only-properties:
        - DBProxyName
        - DBProxyEndpointName
        - VpcSubnetIds
      x-read-only-properties:
        - DBProxyEndpointArn
        - Endpoint
        - VpcId
        - IsDefault
      x-required-properties:
        - DBProxyName
        - DBProxyEndpointName
        - VpcSubnetIds
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - rds:CreateDBProxyEndpoint
          - rds:DescribeDBProxyEndpoints
        read:
          - rds:DescribeDBProxyEndpoints
          - rds:ListTagsForResource
        update:
          - rds:ModifyDBProxyEndpoint
          - rds:AddTagsToResource
          - rds:RemoveTagsFromResource
        delete:
          - rds:DescribeDBProxyEndpoints
          - rds:DeleteDBProxyEndpoint
        list:
          - rds:DescribeDBProxyEndpoints
    ConnectionPoolConfigurationInfoFormat:
      type: object
      properties:
        MaxConnectionsPercent:
          description: The maximum size of the connection pool for each target in a target group.
          type: integer
          minimum: 0
          maximum: 100
        MaxIdleConnectionsPercent:
          description: Controls how actively the proxy closes idle database connections in the connection pool.
          type: integer
          minimum: 0
          maximum: 100
        ConnectionBorrowTimeout:
          description: The number of seconds for a proxy to wait for a connection to become available in the connection pool.
          type: integer
        SessionPinningFilters:
          description: Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection.
          type: array
          x-insertionOrder: false
          items:
            type: string
        InitQuery:
          description: One or more SQL statements for the proxy to run when opening each new database connection.
          type: string
      additionalProperties: false
    DBProxyTargetGroup:
      type: object
      properties:
        DBProxyName:
          description: The identifier for the proxy.
          type: string
          pattern: '[A-z][0-z]*'
          maxLength: 64
        TargetGroupArn:
          description: The Amazon Resource Name (ARN) representing the target group.
          type: string
        TargetGroupName:
          description: The identifier for the DBProxyTargetGroup
          type: string
          enum:
            - default
        ConnectionPoolConfigurationInfo:
          $ref: '#/components/schemas/ConnectionPoolConfigurationInfoFormat'
        DBInstanceIdentifiers:
          type: array
          x-insertionOrder: false
          items:
            type: string
        DBClusterIdentifiers:
          type: array
          x-insertionOrder: false
          items:
            type: string
      required:
        - DBProxyName
        - TargetGroupName
      x-stackql-resource-name: db_proxy_target_group
      description: Resource schema for AWS::RDS::DBProxyTargetGroup
      x-type-name: AWS::RDS::DBProxyTargetGroup
      x-stackql-primary-identifier:
        - TargetGroupArn
      x-create-only-properties:
        - DBProxyName
        - TargetGroupName
      x-read-only-properties:
        - TargetGroupArn
      x-required-properties:
        - DBProxyName
        - TargetGroupName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - rds:DescribeDBProxies
          - rds:DescribeDBProxyTargetGroups
          - rds:ModifyDBProxyTargetGroup
          - rds:RegisterDBProxyTargets
        read:
          - rds:DescribeDBProxyTargetGroups
          - rds:DescribeDBProxyTargets
        update:
          - rds:DescribeDBProxyTargetGroups
          - rds:ModifyDBProxyTargetGroup
          - rds:RegisterDBProxyTargets
          - rds:DeregisterDBProxyTargets
        delete:
          - rds:DeregisterDBProxyTargets
        list:
          - rds:DescribeDBProxyTargetGroups
    DBSubnetGroup:
      type: object
      properties:
        DBSubnetGroupDescription:
          type: string
          description: The description for the DB subnet group.
        DBSubnetGroupName:
          type: string
          pattern: ^(?!default$)[a-zA-Z]{1}[a-zA-Z0-9-_\.\s]{0,254}$
          description: |-
            The name for the DB subnet group. This value is stored as a lowercase string.
             Constraints: Must contain no more than 255 lowercase alphanumeric characters or hyphens. Must not be "Default".
             Example: ``mysubnetgroup``
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
          description: The EC2 Subnet IDs for the DB subnet group.
        Tags:
          type: array
          maxItems: 50
          uniqueItems: false
          x-insertionOrder: false
          description: An optional array of key-value pairs to apply to this DB subnet group.
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DBSubnetGroupDescription
        - SubnetIds
      x-stackql-resource-name: db_subnet_group
      description: |-
        The ``AWS::RDS::DBSubnetGroup`` resource creates a database subnet group. Subnet groups must contain at least two subnets in two different Availability Zones in the same region. 
         For more information, see [Working with DB subnet groups](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Subnets) in the *Amazon RDS User Guide*.
      x-type-name: AWS::RDS::DBSubnetGroup
      x-stackql-primary-identifier:
        - DBSubnetGroupName
      x-create-only-properties:
        - DBSubnetGroupName
      x-write-only-properties:
        - SubnetIds
      x-required-properties:
        - DBSubnetGroupDescription
        - SubnetIds
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - rds:CreateDBSubnetGroup
          - rds:DescribeDBSubnetGroups
          - rds:AddTagsToResource
          - rds:RemoveTagsFromResource
          - rds:ListTagsForResource
        read:
          - rds:DescribeDBSubnetGroups
          - rds:ListTagsForResource
        update:
          - rds:ModifyDBSubnetGroup
          - rds:DescribeDBSubnetGroups
          - rds:AddTagsToResource
          - rds:RemoveTagsFromResource
          - rds:ListTagsForResource
        delete:
          - rds:DeleteDBSubnetGroup
          - rds:DescribeDBSubnetGroups
          - rds:ListTagsForResource
        list:
          - rds:DescribeDBSubnetGroups
    EventSubscription:
      type: object
      properties:
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          maxItems: 50
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        SubscriptionName:
          description: The name of the subscription.
          type: string
          maxLength: 255
        Enabled:
          description: A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it.
          type: boolean
          default: true
        EventCategories:
          description: A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action.
          type: array
          uniqueItems: true
          items:
            type: string
        SnsTopicArn:
          description: The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
          type: string
        SourceIds:
          description: The list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        SourceType:
          description: The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.
          type: string
      required:
        - SnsTopicArn
      x-stackql-resource-name: event_subscription
      description: The AWS::RDS::EventSubscription resource allows you to receive notifications for Amazon Relational Database Service events through the Amazon Simple Notification Service (Amazon SNS). For more information, see Using Amazon RDS Event Notification in the Amazon RDS User Guide.
      x-type-name: AWS::RDS::EventSubscription
      x-stackql-primary-identifier:
        - SubscriptionName
      x-create-only-properties:
        - SubscriptionName
        - SnsTopicArn
      x-required-properties:
        - SnsTopicArn
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - rds:CreateEventSubscription
          - rds:DescribeEventSubscriptions
          - rds:ListTagsForResource
          - rds:AddTagsToResource
          - rds:RemoveTagsFromResource
        read:
          - rds:DescribeEventSubscriptions
          - rds:ListTagsForResource
        update:
          - rds:ModifyEventSubscription
          - rds:AddSourceIdentifierToSubscription
          - rds:RemoveSourceIdentifierFromSubscription
          - rds:DescribeEventSubscriptions
          - rds:ListTagsForResource
          - rds:AddTagsToResource
          - rds:RemoveTagsFromResource
        delete:
          - rds:DeleteEventSubscription
          - rds:DescribeEventSubscriptions
        list:
          - rds:DescribeEventSubscriptions
    GlobalCluster:
      type: object
      properties:
        Engine:
          description: |-
            The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora).
            If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.
          type: string
          enum:
            - aurora
            - aurora-mysql
            - aurora-postgresql
        EngineVersion:
          description: The version number of the database engine to use. If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.
          type: string
        DeletionProtection:
          description: The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled.
          type: boolean
        GlobalClusterIdentifier:
          description: The cluster identifier of the new global database cluster. This parameter is stored as a lowercase string.
          type: string
          pattern: ^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
        SourceDBClusterIdentifier:
          description: The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. This parameter is stored as a lowercase string.
          type: string
          oneOf:
            - pattern: ^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
            - pattern: ^(?=.{40,128}$)arn.*
        StorageEncrypted:
          description: |2-
             The storage encryption setting for the new global database cluster.
            If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.
          type: boolean
      x-stackql-resource-name: global_cluster
      description: Resource Type definition for AWS::RDS::GlobalCluster
      x-type-name: AWS::RDS::GlobalCluster
      x-stackql-primary-identifier:
        - GlobalClusterIdentifier
      x-create-only-properties:
        - GlobalClusterIdentifier
        - SourceDBClusterIdentifier
        - StorageEncrypted
        - Engine
      x-required-permissions:
        create:
          - rds:CreateGlobalCluster
          - rds:DescribeDBClusters
          - rds:DescribeGlobalClusters
        read:
          - rds:DescribeGlobalClusters
        update:
          - rds:ModifyGlobalCluster
          - rds:DescribeGlobalClusters
        delete:
          - rds:DescribeGlobalClusters
          - rds:DeleteGlobalCluster
          - rds:RemoveFromGlobalCluster
          - rds:DescribeDBClusters
        list:
          - rds:DescribeGlobalClusters
    Tags:
      type: array
      maxItems: 50
      uniqueItems: true
      x-insertionOrder: false
      description: An array of key-value pairs to apply to this resource.
      items:
        $ref: '#/components/schemas/Tag'
    EncryptionContextMap:
      type: object
      x-patternProperties:
        ^[\s\S]*$:
          type: string
          maxLength: 131072
          minLength: 0
      description: An optional set of non-secret key–value pairs that contains additional contextual information about the data.
      additionalProperties: false
    Integration:
      type: object
      properties:
        IntegrationName:
          description: The name of the integration.
          type: string
          minLength: 1
          maxLength: 64
        Description:
          type: string
          description: The description of the integration.
          minLength: 1
          maxLength: 1000
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
        DataFilter:
          type: string
          description: The data filter for the integration.
          minLength: 1
          maxLength: 25600
          pattern: '[a-zA-Z0-9_ "\\\-$,*.:?+\/]*'
        SourceArn:
          type: string
          description: The Amazon Resource Name (ARN) of the Aurora DB cluster to use as the source for replication.
        TargetArn:
          type: string
          description: The ARN of the Redshift data warehouse to use as the target for replication.
        IntegrationArn:
          type: string
          description: The ARN of the integration.
        KMSKeyId:
          type: string
          description: An optional AWS Key Management System (AWS KMS) key ARN for the key used to to encrypt the integration. The resource accepts the key ID and the key ARN forms. The key ID form can be used if the KMS key is owned by te same account. If the KMS key belongs to a different account than the calling account, the full key ARN must be specified. Do not use the key alias or the key alias ARN as this will cause a false drift of the resource.
        AdditionalEncryptionContext:
          $ref: '#/components/schemas/EncryptionContextMap'
        CreateTime:
          type: string
      required:
        - SourceArn
        - TargetArn
      x-stackql-resource-name: integration
      description: Creates a zero-ETL integration with Amazon Redshift.
      x-type-name: AWS::RDS::Integration
      x-stackql-primary-identifier:
        - IntegrationArn
      x-create-only-properties:
        - SourceArn
        - TargetArn
        - KMSKeyId
        - AdditionalEncryptionContext
      x-read-only-properties:
        - IntegrationArn
        - CreateTime
      x-required-properties:
        - SourceArn
        - TargetArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - rds:CreateIntegration
          - rds:DescribeIntegrations
          - rds:AddTagsToResource
          - kms:CreateGrant
          - kms:DescribeKey
          - redshift:CreateInboundIntegration
        read:
          - rds:DescribeIntegrations
        update:
          - rds:DescribeIntegrations
          - rds:AddTagsToResource
          - rds:RemoveTagsFromResource
          - rds:ModifyIntegration
        delete:
          - rds:DeleteIntegration
          - rds:DescribeIntegrations
        list:
          - rds:DescribeIntegrations
    OptionConfiguration:
      description: The OptionConfiguration property type specifies an individual option, and its settings, within an AWS::RDS::OptionGroup resource.
      type: object
      properties:
        DBSecurityGroupMemberships:
          description: A list of DBSecurityGroupMembership name strings used for this option.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        OptionName:
          description: The configuration of options to include in a group.
          type: string
        OptionSettings:
          description: The option settings to include in an option group.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/OptionSetting'
        OptionVersion:
          description: The version for the option.
          type: string
        Port:
          description: The optional port for the option.
          type: integer
        VpcSecurityGroupMemberships:
          description: A list of VpcSecurityGroupMembership name strings used for this option.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
      additionalProperties: false
      required:
        - OptionName
    OptionSetting:
      description: The OptionSetting property type specifies the value for an option within an OptionSetting property.
      type: object
      properties:
        Name:
          description: The name of the option that has settings that you can set.
          type: string
        Value:
          description: The current value of the option setting.
          type: string
      additionalProperties: false
    OptionGroup:
      type: object
      properties:
        OptionGroupName:
          description: Specifies the name of the option group.
          type: string
        OptionGroupDescription:
          description: Provides a description of the option group.
          type: string
        EngineName:
          description: Indicates the name of the engine that this option group can be applied to.
          type: string
        MajorEngineVersion:
          description: Indicates the major engine version associated with this option group.
          type: string
        OptionConfigurations:
          description: Indicates what options are available in the option group.
          type: array
          x-arrayType: AttributeList
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/OptionConfiguration'
        Tags:
          type: array
          description: An array of key-value pairs to apply to this resource.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - EngineName
        - MajorEngineVersion
        - OptionGroupDescription
      x-stackql-resource-name: option_group
      description: The AWS::RDS::OptionGroup resource creates an option group, to enable and configure features that are specific to a particular DB engine.
      x-type-name: AWS::RDS::OptionGroup
      x-stackql-primary-identifier:
        - OptionGroupName
      x-create-only-properties:
        - EngineName
        - MajorEngineVersion
        - OptionGroupDescription
        - OptionGroupName
      x-required-properties:
        - EngineName
        - MajorEngineVersion
        - OptionGroupDescription
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - rds:AddTagsToResource
          - rds:CreateOptionGroup
          - rds:DescribeOptionGroups
          - rds:ListTagsForResource
          - rds:ModifyOptionGroup
          - rds:RemoveTagsFromResource
        read:
          - rds:DescribeOptionGroups
          - rds:ListTagsForResource
        update:
          - rds:AddTagsToResource
          - rds:DescribeOptionGroups
          - rds:ListTagsForResource
          - rds:ModifyOptionGroup
          - rds:RemoveTagsFromResource
        delete:
          - rds:DeleteOptionGroup
          - rds:DescribeOptionGroups
          - rds:ListTagsForResource
          - rds:RemoveTagsFromResource
        list:
          - rds:DescribeOptionGroups
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    customdb_engine_versions:
      name: customdb_engine_versions
      id: aws.rds.customdb_engine_versions
      x-cfn-schema-name: CustomDBEngineVersion
      x-cfn-type-name: AWS::RDS::CustomDBEngineVersion
      x-identifiers:
        - Engine
        - EngineVersion
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::CustomDBEngineVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/customdb_engine_versions/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::CustomDBEngineVersion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Engine') as engine,
                json_extract_path_text(Properties, 'EngineVersion') as engine_version
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::CustomDBEngineVersion'
                AND region = 'us-east-1'
    customdb_engine_version:
      name: customdb_engine_version
      id: aws.rds.customdb_engine_version
      x-cfn-schema-name: CustomDBEngineVersion
      x-cfn-type-name: AWS::RDS::CustomDBEngineVersion
      x-identifiers:
        - Engine
        - EngineVersion
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::CustomDBEngineVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::CustomDBEngineVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/customdb_engine_version/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/customdb_engine_version/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DatabaseInstallationFilesS3BucketName') as database_installation_files_s3_bucket_name,
              JSON_EXTRACT(Properties, '$.DatabaseInstallationFilesS3Prefix') as database_installation_files_s3_prefix,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.KMSKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.Manifest') as manifest,
              JSON_EXTRACT(Properties, '$.DBEngineVersionArn') as db_engine_version_arn,
              JSON_EXTRACT(Properties, '$.SourceCustomDbEngineVersionIdentifier') as source_custom_db_engine_version_identifier,
              JSON_EXTRACT(Properties, '$.UseAwsProvidedLatestImage') as use_aws_provided_latest_image,
              JSON_EXTRACT(Properties, '$.ImageId') as image_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::CustomDBEngineVersion'
              AND data__Identifier = '<Engine>|<EngineVersion>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DatabaseInstallationFilesS3BucketName') as database_installation_files_s3_bucket_name,
                json_extract_path_text(Properties, 'DatabaseInstallationFilesS3Prefix') as database_installation_files_s3_prefix,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Engine') as engine,
                json_extract_path_text(Properties, 'EngineVersion') as engine_version,
                json_extract_path_text(Properties, 'KMSKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'Manifest') as manifest,
                json_extract_path_text(Properties, 'DBEngineVersionArn') as db_engine_version_arn,
                json_extract_path_text(Properties, 'SourceCustomDbEngineVersionIdentifier') as source_custom_db_engine_version_identifier,
                json_extract_path_text(Properties, 'UseAwsProvidedLatestImage') as use_aws_provided_latest_image,
                json_extract_path_text(Properties, 'ImageId') as image_id,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::CustomDBEngineVersion'
                AND data__Identifier = '<Engine>|<EngineVersion>'
                AND region = 'us-east-1'
    db_clusters:
      name: db_clusters
      id: aws.rds.db_clusters
      x-cfn-schema-name: DBCluster
      x-cfn-type-name: AWS::RDS::DBCluster
      x-identifiers:
        - DBClusterIdentifier
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBCluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/db_clusters/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBClusterIdentifier') as db_cluster_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBCluster'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DBClusterIdentifier') as db_cluster_identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBCluster'
                AND region = 'us-east-1'
    db_cluster:
      name: db_cluster
      id: aws.rds.db_cluster
      x-cfn-schema-name: DBCluster
      x-cfn-type-name: AWS::RDS::DBCluster
      x-identifiers:
        - DBClusterIdentifier
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBCluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBCluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/db_cluster/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/db_cluster/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.ReadEndpoint') as read_endpoint,
              JSON_EXTRACT(Properties, '$.AllocatedStorage') as allocated_storage,
              JSON_EXTRACT(Properties, '$.AssociatedRoles') as associated_roles,
              JSON_EXTRACT(Properties, '$.AvailabilityZones') as availability_zones,
              JSON_EXTRACT(Properties, '$.AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
              JSON_EXTRACT(Properties, '$.BacktrackWindow') as backtrack_window,
              JSON_EXTRACT(Properties, '$.BackupRetentionPeriod') as backup_retention_period,
              JSON_EXTRACT(Properties, '$.CopyTagsToSnapshot') as copy_tags_to_snapshot,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.DBClusterArn') as db_cluster_arn,
              JSON_EXTRACT(Properties, '$.DBClusterInstanceClass') as db_cluster_instance_class,
              JSON_EXTRACT(Properties, '$.DBClusterResourceId') as db_cluster_resource_id,
              JSON_EXTRACT(Properties, '$.DBInstanceParameterGroupName') as db_instance_parameter_group_name,
              JSON_EXTRACT(Properties, '$.DBSystemId') as db_system_id,
              JSON_EXTRACT(Properties, '$.GlobalClusterIdentifier') as global_cluster_identifier,
              JSON_EXTRACT(Properties, '$.DBClusterIdentifier') as db_cluster_identifier,
              JSON_EXTRACT(Properties, '$.DBClusterParameterGroupName') as db_cluster_parameter_group_name,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as db_subnet_group_name,
              JSON_EXTRACT(Properties, '$.DeletionProtection') as deletion_protection,
              JSON_EXTRACT(Properties, '$.Domain') as domain,
              JSON_EXTRACT(Properties, '$.DomainIAMRoleName') as domain_iam_role_name,
              JSON_EXTRACT(Properties, '$.EnableCloudwatchLogsExports') as enable_cloudwatch_logs_exports,
              JSON_EXTRACT(Properties, '$.EnableGlobalWriteForwarding') as enable_global_write_forwarding,
              JSON_EXTRACT(Properties, '$.EnableHttpEndpoint') as enable_http_endpoint,
              JSON_EXTRACT(Properties, '$.EnableIAMDatabaseAuthentication') as enable_iam_database_authentication,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.EngineMode') as engine_mode,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.ManageMasterUserPassword') as manage_master_user_password,
              JSON_EXTRACT(Properties, '$.Iops') as iops,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.MasterUsername') as master_username,
              JSON_EXTRACT(Properties, '$.MasterUserPassword') as master_user_password,
              JSON_EXTRACT(Properties, '$.MasterUserSecret') as master_user_secret,
              JSON_EXTRACT(Properties, '$.MonitoringInterval') as monitoring_interval,
              JSON_EXTRACT(Properties, '$.MonitoringRoleArn') as monitoring_role_arn,
              JSON_EXTRACT(Properties, '$.NetworkType') as network_type,
              JSON_EXTRACT(Properties, '$.PerformanceInsightsEnabled') as performance_insights_enabled,
              JSON_EXTRACT(Properties, '$.PerformanceInsightsKmsKeyId') as performance_insights_kms_key_id,
              JSON_EXTRACT(Properties, '$.PerformanceInsightsRetentionPeriod') as performance_insights_retention_period,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.PreferredBackupWindow') as preferred_backup_window,
              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.ReplicationSourceIdentifier') as replication_source_identifier,
              JSON_EXTRACT(Properties, '$.RestoreToTime') as restore_to_time,
              JSON_EXTRACT(Properties, '$.RestoreType') as restore_type,
              JSON_EXTRACT(Properties, '$.ServerlessV2ScalingConfiguration') as serverless_v2_scaling_configuration,
              JSON_EXTRACT(Properties, '$.ScalingConfiguration') as scaling_configuration,
              JSON_EXTRACT(Properties, '$.SnapshotIdentifier') as snapshot_identifier,
              JSON_EXTRACT(Properties, '$.SourceDBClusterIdentifier') as source_db_cluster_identifier,
              JSON_EXTRACT(Properties, '$.SourceRegion') as source_region,
              JSON_EXTRACT(Properties, '$.StorageEncrypted') as storage_encrypted,
              JSON_EXTRACT(Properties, '$.StorageThroughput') as storage_throughput,
              JSON_EXTRACT(Properties, '$.StorageType') as storage_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UseLatestRestorableTime') as use_latest_restorable_time,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBCluster'
              AND data__Identifier = '<DBClusterIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Endpoint') as endpoint,
                json_extract_path_text(Properties, 'ReadEndpoint') as read_endpoint,
                json_extract_path_text(Properties, 'AllocatedStorage') as allocated_storage,
                json_extract_path_text(Properties, 'AssociatedRoles') as associated_roles,
                json_extract_path_text(Properties, 'AvailabilityZones') as availability_zones,
                json_extract_path_text(Properties, 'AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
                json_extract_path_text(Properties, 'BacktrackWindow') as backtrack_window,
                json_extract_path_text(Properties, 'BackupRetentionPeriod') as backup_retention_period,
                json_extract_path_text(Properties, 'CopyTagsToSnapshot') as copy_tags_to_snapshot,
                json_extract_path_text(Properties, 'DatabaseName') as database_name,
                json_extract_path_text(Properties, 'DBClusterArn') as db_cluster_arn,
                json_extract_path_text(Properties, 'DBClusterInstanceClass') as db_cluster_instance_class,
                json_extract_path_text(Properties, 'DBClusterResourceId') as db_cluster_resource_id,
                json_extract_path_text(Properties, 'DBInstanceParameterGroupName') as db_instance_parameter_group_name,
                json_extract_path_text(Properties, 'DBSystemId') as db_system_id,
                json_extract_path_text(Properties, 'GlobalClusterIdentifier') as global_cluster_identifier,
                json_extract_path_text(Properties, 'DBClusterIdentifier') as db_cluster_identifier,
                json_extract_path_text(Properties, 'DBClusterParameterGroupName') as db_cluster_parameter_group_name,
                json_extract_path_text(Properties, 'DBSubnetGroupName') as db_subnet_group_name,
                json_extract_path_text(Properties, 'DeletionProtection') as deletion_protection,
                json_extract_path_text(Properties, 'Domain') as domain,
                json_extract_path_text(Properties, 'DomainIAMRoleName') as domain_iam_role_name,
                json_extract_path_text(Properties, 'EnableCloudwatchLogsExports') as enable_cloudwatch_logs_exports,
                json_extract_path_text(Properties, 'EnableGlobalWriteForwarding') as enable_global_write_forwarding,
                json_extract_path_text(Properties, 'EnableHttpEndpoint') as enable_http_endpoint,
                json_extract_path_text(Properties, 'EnableIAMDatabaseAuthentication') as enable_iam_database_authentication,
                json_extract_path_text(Properties, 'Engine') as engine,
                json_extract_path_text(Properties, 'EngineMode') as engine_mode,
                json_extract_path_text(Properties, 'EngineVersion') as engine_version,
                json_extract_path_text(Properties, 'ManageMasterUserPassword') as manage_master_user_password,
                json_extract_path_text(Properties, 'Iops') as iops,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'MasterUsername') as master_username,
                json_extract_path_text(Properties, 'MasterUserPassword') as master_user_password,
                json_extract_path_text(Properties, 'MasterUserSecret') as master_user_secret,
                json_extract_path_text(Properties, 'MonitoringInterval') as monitoring_interval,
                json_extract_path_text(Properties, 'MonitoringRoleArn') as monitoring_role_arn,
                json_extract_path_text(Properties, 'NetworkType') as network_type,
                json_extract_path_text(Properties, 'PerformanceInsightsEnabled') as performance_insights_enabled,
                json_extract_path_text(Properties, 'PerformanceInsightsKmsKeyId') as performance_insights_kms_key_id,
                json_extract_path_text(Properties, 'PerformanceInsightsRetentionPeriod') as performance_insights_retention_period,
                json_extract_path_text(Properties, 'Port') as port,
                json_extract_path_text(Properties, 'PreferredBackupWindow') as preferred_backup_window,
                json_extract_path_text(Properties, 'PreferredMaintenanceWindow') as preferred_maintenance_window,
                json_extract_path_text(Properties, 'PubliclyAccessible') as publicly_accessible,
                json_extract_path_text(Properties, 'ReplicationSourceIdentifier') as replication_source_identifier,
                json_extract_path_text(Properties, 'RestoreToTime') as restore_to_time,
                json_extract_path_text(Properties, 'RestoreType') as restore_type,
                json_extract_path_text(Properties, 'ServerlessV2ScalingConfiguration') as serverless_v2_scaling_configuration,
                json_extract_path_text(Properties, 'ScalingConfiguration') as scaling_configuration,
                json_extract_path_text(Properties, 'SnapshotIdentifier') as snapshot_identifier,
                json_extract_path_text(Properties, 'SourceDBClusterIdentifier') as source_db_cluster_identifier,
                json_extract_path_text(Properties, 'SourceRegion') as source_region,
                json_extract_path_text(Properties, 'StorageEncrypted') as storage_encrypted,
                json_extract_path_text(Properties, 'StorageThroughput') as storage_throughput,
                json_extract_path_text(Properties, 'StorageType') as storage_type,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'UseLatestRestorableTime') as use_latest_restorable_time,
                json_extract_path_text(Properties, 'VpcSecurityGroupIds') as vpc_security_group_ids
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBCluster'
                AND data__Identifier = '<DBClusterIdentifier>'
                AND region = 'us-east-1'
    db_cluster_parameter_groups:
      name: db_cluster_parameter_groups
      id: aws.rds.db_cluster_parameter_groups
      x-cfn-schema-name: DBClusterParameterGroup
      x-cfn-type-name: AWS::RDS::DBClusterParameterGroup
      x-identifiers:
        - DBClusterParameterGroupName
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBClusterParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/db_cluster_parameter_groups/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBClusterParameterGroupName') as db_cluster_parameter_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBClusterParameterGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DBClusterParameterGroupName') as db_cluster_parameter_group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBClusterParameterGroup'
                AND region = 'us-east-1'
    db_cluster_parameter_group:
      name: db_cluster_parameter_group
      id: aws.rds.db_cluster_parameter_group
      x-cfn-schema-name: DBClusterParameterGroup
      x-cfn-type-name: AWS::RDS::DBClusterParameterGroup
      x-identifiers:
        - DBClusterParameterGroupName
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBClusterParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBClusterParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/db_cluster_parameter_group/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/db_cluster_parameter_group/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Family') as family,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.DBClusterParameterGroupName') as db_cluster_parameter_group_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBClusterParameterGroup'
              AND data__Identifier = '<DBClusterParameterGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Family') as family,
                json_extract_path_text(Properties, 'Parameters') as parameters,
                json_extract_path_text(Properties, 'DBClusterParameterGroupName') as db_cluster_parameter_group_name,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBClusterParameterGroup'
                AND data__Identifier = '<DBClusterParameterGroupName>'
                AND region = 'us-east-1'
    db_instances:
      name: db_instances
      id: aws.rds.db_instances
      x-cfn-schema-name: DBInstance
      x-cfn-type-name: AWS::RDS::DBInstance
      x-identifiers:
        - DBInstanceIdentifier
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/db_instances/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBInstanceIdentifier') as db_instance_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBInstance'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DBInstanceIdentifier') as db_instance_identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBInstance'
                AND region = 'us-east-1'
    db_instance:
      name: db_instance
      id: aws.rds.db_instance
      x-cfn-schema-name: DBInstance
      x-cfn-type-name: AWS::RDS::DBInstance
      x-identifiers:
        - DBInstanceIdentifier
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/db_instance/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/db_instance/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AllocatedStorage') as allocated_storage,
              JSON_EXTRACT(Properties, '$.AllowMajorVersionUpgrade') as allow_major_version_upgrade,
              JSON_EXTRACT(Properties, '$.AssociatedRoles') as associated_roles,
              JSON_EXTRACT(Properties, '$.AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
              JSON_EXTRACT(Properties, '$.AutomaticBackupReplicationRegion') as automatic_backup_replication_region,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.BackupRetentionPeriod') as backup_retention_period,
              JSON_EXTRACT(Properties, '$.CACertificateIdentifier') as ca_certificate_identifier,
              JSON_EXTRACT(Properties, '$.CertificateDetails') as certificate_details,
              JSON_EXTRACT(Properties, '$.CertificateRotationRestart') as certificate_rotation_restart,
              JSON_EXTRACT(Properties, '$.CharacterSetName') as character_set_name,
              JSON_EXTRACT(Properties, '$.CopyTagsToSnapshot') as copy_tags_to_snapshot,
              JSON_EXTRACT(Properties, '$.CustomIAMInstanceProfile') as custom_iam_instance_profile,
              JSON_EXTRACT(Properties, '$.DBClusterIdentifier') as db_cluster_identifier,
              JSON_EXTRACT(Properties, '$.DBClusterSnapshotIdentifier') as db_cluster_snapshot_identifier,
              JSON_EXTRACT(Properties, '$.DBInstanceArn') as db_instance_arn,
              JSON_EXTRACT(Properties, '$.DBInstanceClass') as db_instance_class,
              JSON_EXTRACT(Properties, '$.DBInstanceIdentifier') as db_instance_identifier,
              JSON_EXTRACT(Properties, '$.DbiResourceId') as dbi_resource_id,
              JSON_EXTRACT(Properties, '$.DBName') as db_name,
              JSON_EXTRACT(Properties, '$.DBParameterGroupName') as db_parameter_group_name,
              JSON_EXTRACT(Properties, '$.DBSecurityGroups') as db_security_groups,
              JSON_EXTRACT(Properties, '$.DBSnapshotIdentifier') as db_snapshot_identifier,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as db_subnet_group_name,
              JSON_EXTRACT(Properties, '$.DBSystemId') as db_system_id,
              JSON_EXTRACT(Properties, '$.DedicatedLogVolume') as dedicated_log_volume,
              JSON_EXTRACT(Properties, '$.DeleteAutomatedBackups') as delete_automated_backups,
              JSON_EXTRACT(Properties, '$.DeletionProtection') as deletion_protection,
              JSON_EXTRACT(Properties, '$.Domain') as domain,
              JSON_EXTRACT(Properties, '$.DomainAuthSecretArn') as domain_auth_secret_arn,
              JSON_EXTRACT(Properties, '$.DomainDnsIps') as domain_dns_ips,
              JSON_EXTRACT(Properties, '$.DomainFqdn') as domain_fqdn,
              JSON_EXTRACT(Properties, '$.DomainIAMRoleName') as domain_iam_role_name,
              JSON_EXTRACT(Properties, '$.DomainOu') as domain_ou,
              JSON_EXTRACT(Properties, '$.EnableCloudwatchLogsExports') as enable_cloudwatch_logs_exports,
              JSON_EXTRACT(Properties, '$.EnableIAMDatabaseAuthentication') as enable_iam_database_authentication,
              JSON_EXTRACT(Properties, '$.EnablePerformanceInsights') as enable_performance_insights,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.ManageMasterUserPassword') as manage_master_user_password,
              JSON_EXTRACT(Properties, '$.Iops') as iops,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.LicenseModel') as license_model,
              JSON_EXTRACT(Properties, '$.MasterUsername') as master_username,
              JSON_EXTRACT(Properties, '$.MasterUserPassword') as master_user_password,
              JSON_EXTRACT(Properties, '$.MasterUserSecret') as master_user_secret,
              JSON_EXTRACT(Properties, '$.MaxAllocatedStorage') as max_allocated_storage,
              JSON_EXTRACT(Properties, '$.MonitoringInterval') as monitoring_interval,
              JSON_EXTRACT(Properties, '$.MonitoringRoleArn') as monitoring_role_arn,
              JSON_EXTRACT(Properties, '$.MultiAZ') as multi_az,
              JSON_EXTRACT(Properties, '$.NcharCharacterSetName') as nchar_character_set_name,
              JSON_EXTRACT(Properties, '$.NetworkType') as network_type,
              JSON_EXTRACT(Properties, '$.OptionGroupName') as option_group_name,
              JSON_EXTRACT(Properties, '$.PerformanceInsightsKMSKeyId') as performance_insights_kms_key_id,
              JSON_EXTRACT(Properties, '$.PerformanceInsightsRetentionPeriod') as performance_insights_retention_period,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.PreferredBackupWindow') as preferred_backup_window,
              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(Properties, '$.ProcessorFeatures') as processor_features,
              JSON_EXTRACT(Properties, '$.PromotionTier') as promotion_tier,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.ReplicaMode') as replica_mode,
              JSON_EXTRACT(Properties, '$.RestoreTime') as restore_time,
              JSON_EXTRACT(Properties, '$.SourceDBClusterIdentifier') as source_db_cluster_identifier,
              JSON_EXTRACT(Properties, '$.SourceDbiResourceId') as source_dbi_resource_id,
              JSON_EXTRACT(Properties, '$.SourceDBInstanceAutomatedBackupsArn') as source_db_instance_automated_backups_arn,
              JSON_EXTRACT(Properties, '$.SourceDBInstanceIdentifier') as source_db_instance_identifier,
              JSON_EXTRACT(Properties, '$.SourceRegion') as source_region,
              JSON_EXTRACT(Properties, '$.StorageEncrypted') as storage_encrypted,
              JSON_EXTRACT(Properties, '$.StorageType') as storage_type,
              JSON_EXTRACT(Properties, '$.StorageThroughput') as storage_throughput,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TdeCredentialArn') as tde_credential_arn,
              JSON_EXTRACT(Properties, '$.TdeCredentialPassword') as tde_credential_password,
              JSON_EXTRACT(Properties, '$.Timezone') as timezone,
              JSON_EXTRACT(Properties, '$.UseDefaultProcessorFeatures') as use_default_processor_features,
              JSON_EXTRACT(Properties, '$.UseLatestRestorableTime') as use_latest_restorable_time,
              JSON_EXTRACT(Properties, '$.VPCSecurityGroups') as vpc_security_groups
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBInstance'
              AND data__Identifier = '<DBInstanceIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AllocatedStorage') as allocated_storage,
                json_extract_path_text(Properties, 'AllowMajorVersionUpgrade') as allow_major_version_upgrade,
                json_extract_path_text(Properties, 'AssociatedRoles') as associated_roles,
                json_extract_path_text(Properties, 'AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
                json_extract_path_text(Properties, 'AutomaticBackupReplicationRegion') as automatic_backup_replication_region,
                json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(Properties, 'BackupRetentionPeriod') as backup_retention_period,
                json_extract_path_text(Properties, 'CACertificateIdentifier') as ca_certificate_identifier,
                json_extract_path_text(Properties, 'CertificateDetails') as certificate_details,
                json_extract_path_text(Properties, 'CertificateRotationRestart') as certificate_rotation_restart,
                json_extract_path_text(Properties, 'CharacterSetName') as character_set_name,
                json_extract_path_text(Properties, 'CopyTagsToSnapshot') as copy_tags_to_snapshot,
                json_extract_path_text(Properties, 'CustomIAMInstanceProfile') as custom_iam_instance_profile,
                json_extract_path_text(Properties, 'DBClusterIdentifier') as db_cluster_identifier,
                json_extract_path_text(Properties, 'DBClusterSnapshotIdentifier') as db_cluster_snapshot_identifier,
                json_extract_path_text(Properties, 'DBInstanceArn') as db_instance_arn,
                json_extract_path_text(Properties, 'DBInstanceClass') as db_instance_class,
                json_extract_path_text(Properties, 'DBInstanceIdentifier') as db_instance_identifier,
                json_extract_path_text(Properties, 'DbiResourceId') as dbi_resource_id,
                json_extract_path_text(Properties, 'DBName') as db_name,
                json_extract_path_text(Properties, 'DBParameterGroupName') as db_parameter_group_name,
                json_extract_path_text(Properties, 'DBSecurityGroups') as db_security_groups,
                json_extract_path_text(Properties, 'DBSnapshotIdentifier') as db_snapshot_identifier,
                json_extract_path_text(Properties, 'DBSubnetGroupName') as db_subnet_group_name,
                json_extract_path_text(Properties, 'DBSystemId') as db_system_id,
                json_extract_path_text(Properties, 'DedicatedLogVolume') as dedicated_log_volume,
                json_extract_path_text(Properties, 'DeleteAutomatedBackups') as delete_automated_backups,
                json_extract_path_text(Properties, 'DeletionProtection') as deletion_protection,
                json_extract_path_text(Properties, 'Domain') as domain,
                json_extract_path_text(Properties, 'DomainAuthSecretArn') as domain_auth_secret_arn,
                json_extract_path_text(Properties, 'DomainDnsIps') as domain_dns_ips,
                json_extract_path_text(Properties, 'DomainFqdn') as domain_fqdn,
                json_extract_path_text(Properties, 'DomainIAMRoleName') as domain_iam_role_name,
                json_extract_path_text(Properties, 'DomainOu') as domain_ou,
                json_extract_path_text(Properties, 'EnableCloudwatchLogsExports') as enable_cloudwatch_logs_exports,
                json_extract_path_text(Properties, 'EnableIAMDatabaseAuthentication') as enable_iam_database_authentication,
                json_extract_path_text(Properties, 'EnablePerformanceInsights') as enable_performance_insights,
                json_extract_path_text(Properties, 'Endpoint') as endpoint,
                json_extract_path_text(Properties, 'Engine') as engine,
                json_extract_path_text(Properties, 'EngineVersion') as engine_version,
                json_extract_path_text(Properties, 'ManageMasterUserPassword') as manage_master_user_password,
                json_extract_path_text(Properties, 'Iops') as iops,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'LicenseModel') as license_model,
                json_extract_path_text(Properties, 'MasterUsername') as master_username,
                json_extract_path_text(Properties, 'MasterUserPassword') as master_user_password,
                json_extract_path_text(Properties, 'MasterUserSecret') as master_user_secret,
                json_extract_path_text(Properties, 'MaxAllocatedStorage') as max_allocated_storage,
                json_extract_path_text(Properties, 'MonitoringInterval') as monitoring_interval,
                json_extract_path_text(Properties, 'MonitoringRoleArn') as monitoring_role_arn,
                json_extract_path_text(Properties, 'MultiAZ') as multi_az,
                json_extract_path_text(Properties, 'NcharCharacterSetName') as nchar_character_set_name,
                json_extract_path_text(Properties, 'NetworkType') as network_type,
                json_extract_path_text(Properties, 'OptionGroupName') as option_group_name,
                json_extract_path_text(Properties, 'PerformanceInsightsKMSKeyId') as performance_insights_kms_key_id,
                json_extract_path_text(Properties, 'PerformanceInsightsRetentionPeriod') as performance_insights_retention_period,
                json_extract_path_text(Properties, 'Port') as port,
                json_extract_path_text(Properties, 'PreferredBackupWindow') as preferred_backup_window,
                json_extract_path_text(Properties, 'PreferredMaintenanceWindow') as preferred_maintenance_window,
                json_extract_path_text(Properties, 'ProcessorFeatures') as processor_features,
                json_extract_path_text(Properties, 'PromotionTier') as promotion_tier,
                json_extract_path_text(Properties, 'PubliclyAccessible') as publicly_accessible,
                json_extract_path_text(Properties, 'ReplicaMode') as replica_mode,
                json_extract_path_text(Properties, 'RestoreTime') as restore_time,
                json_extract_path_text(Properties, 'SourceDBClusterIdentifier') as source_db_cluster_identifier,
                json_extract_path_text(Properties, 'SourceDbiResourceId') as source_dbi_resource_id,
                json_extract_path_text(Properties, 'SourceDBInstanceAutomatedBackupsArn') as source_db_instance_automated_backups_arn,
                json_extract_path_text(Properties, 'SourceDBInstanceIdentifier') as source_db_instance_identifier,
                json_extract_path_text(Properties, 'SourceRegion') as source_region,
                json_extract_path_text(Properties, 'StorageEncrypted') as storage_encrypted,
                json_extract_path_text(Properties, 'StorageType') as storage_type,
                json_extract_path_text(Properties, 'StorageThroughput') as storage_throughput,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TdeCredentialArn') as tde_credential_arn,
                json_extract_path_text(Properties, 'TdeCredentialPassword') as tde_credential_password,
                json_extract_path_text(Properties, 'Timezone') as timezone,
                json_extract_path_text(Properties, 'UseDefaultProcessorFeatures') as use_default_processor_features,
                json_extract_path_text(Properties, 'UseLatestRestorableTime') as use_latest_restorable_time,
                json_extract_path_text(Properties, 'VPCSecurityGroups') as vpc_security_groups
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBInstance'
                AND data__Identifier = '<DBInstanceIdentifier>'
                AND region = 'us-east-1'
    db_parameter_groups:
      name: db_parameter_groups
      id: aws.rds.db_parameter_groups
      x-cfn-schema-name: DBParameterGroup
      x-cfn-type-name: AWS::RDS::DBParameterGroup
      x-identifiers:
        - DBParameterGroupName
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/db_parameter_groups/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBParameterGroupName') as db_parameter_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBParameterGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DBParameterGroupName') as db_parameter_group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBParameterGroup'
                AND region = 'us-east-1'
    db_parameter_group:
      name: db_parameter_group
      id: aws.rds.db_parameter_group
      x-cfn-schema-name: DBParameterGroup
      x-cfn-type-name: AWS::RDS::DBParameterGroup
      x-identifiers:
        - DBParameterGroupName
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/db_parameter_group/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/db_parameter_group/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DBParameterGroupName') as db_parameter_group_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Family') as family,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBParameterGroup'
              AND data__Identifier = '<DBParameterGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DBParameterGroupName') as db_parameter_group_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Family') as family,
                json_extract_path_text(Properties, 'Parameters') as parameters,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBParameterGroup'
                AND data__Identifier = '<DBParameterGroupName>'
                AND region = 'us-east-1'
    db_proxies:
      name: db_proxies
      id: aws.rds.db_proxies
      x-cfn-schema-name: DBProxy
      x-cfn-type-name: AWS::RDS::DBProxy
      x-identifiers:
        - DBProxyName
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBProxy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/db_proxies/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBProxyName') as db_proxy_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBProxy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DBProxyName') as db_proxy_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBProxy'
                AND region = 'us-east-1'
    db_proxy:
      name: db_proxy
      id: aws.rds.db_proxy
      x-cfn-schema-name: DBProxy
      x-cfn-type-name: AWS::RDS::DBProxy
      x-identifiers:
        - DBProxyName
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBProxy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBProxy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/db_proxy/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/db_proxy/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Auth') as auth,
              JSON_EXTRACT(Properties, '$.DBProxyArn') as db_proxy_arn,
              JSON_EXTRACT(Properties, '$.DBProxyName') as db_proxy_name,
              JSON_EXTRACT(Properties, '$.DebugLogging') as debug_logging,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.EngineFamily') as engine_family,
              JSON_EXTRACT(Properties, '$.IdleClientTimeout') as idle_client_timeout,
              JSON_EXTRACT(Properties, '$.RequireTLS') as require_tls,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
              JSON_EXTRACT(Properties, '$.VpcSubnetIds') as vpc_subnet_ids
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBProxy'
              AND data__Identifier = '<DBProxyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Auth') as auth,
                json_extract_path_text(Properties, 'DBProxyArn') as db_proxy_arn,
                json_extract_path_text(Properties, 'DBProxyName') as db_proxy_name,
                json_extract_path_text(Properties, 'DebugLogging') as debug_logging,
                json_extract_path_text(Properties, 'Endpoint') as endpoint,
                json_extract_path_text(Properties, 'EngineFamily') as engine_family,
                json_extract_path_text(Properties, 'IdleClientTimeout') as idle_client_timeout,
                json_extract_path_text(Properties, 'RequireTLS') as require_tls,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'VpcSecurityGroupIds') as vpc_security_group_ids,
                json_extract_path_text(Properties, 'VpcSubnetIds') as vpc_subnet_ids
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBProxy'
                AND data__Identifier = '<DBProxyName>'
                AND region = 'us-east-1'
    db_proxy_endpoints:
      name: db_proxy_endpoints
      id: aws.rds.db_proxy_endpoints
      x-cfn-schema-name: DBProxyEndpoint
      x-cfn-type-name: AWS::RDS::DBProxyEndpoint
      x-identifiers:
        - DBProxyEndpointName
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBProxyEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/db_proxy_endpoints/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBProxyEndpointName') as db_proxy_endpoint_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBProxyEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DBProxyEndpointName') as db_proxy_endpoint_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBProxyEndpoint'
                AND region = 'us-east-1'
    db_proxy_endpoint:
      name: db_proxy_endpoint
      id: aws.rds.db_proxy_endpoint
      x-cfn-schema-name: DBProxyEndpoint
      x-cfn-type-name: AWS::RDS::DBProxyEndpoint
      x-identifiers:
        - DBProxyEndpointName
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBProxyEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBProxyEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/db_proxy_endpoint/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/db_proxy_endpoint/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DBProxyEndpointName') as db_proxy_endpoint_name,
              JSON_EXTRACT(Properties, '$.DBProxyEndpointArn') as db_proxy_endpoint_arn,
              JSON_EXTRACT(Properties, '$.DBProxyName') as db_proxy_name,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
              JSON_EXTRACT(Properties, '$.VpcSubnetIds') as vpc_subnet_ids,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.TargetRole') as target_role,
              JSON_EXTRACT(Properties, '$.IsDefault') as is_default,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBProxyEndpoint'
              AND data__Identifier = '<DBProxyEndpointName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DBProxyEndpointName') as db_proxy_endpoint_name,
                json_extract_path_text(Properties, 'DBProxyEndpointArn') as db_proxy_endpoint_arn,
                json_extract_path_text(Properties, 'DBProxyName') as db_proxy_name,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'VpcSecurityGroupIds') as vpc_security_group_ids,
                json_extract_path_text(Properties, 'VpcSubnetIds') as vpc_subnet_ids,
                json_extract_path_text(Properties, 'Endpoint') as endpoint,
                json_extract_path_text(Properties, 'TargetRole') as target_role,
                json_extract_path_text(Properties, 'IsDefault') as is_default,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBProxyEndpoint'
                AND data__Identifier = '<DBProxyEndpointName>'
                AND region = 'us-east-1'
    db_proxy_target_groups:
      name: db_proxy_target_groups
      id: aws.rds.db_proxy_target_groups
      x-cfn-schema-name: DBProxyTargetGroup
      x-cfn-type-name: AWS::RDS::DBProxyTargetGroup
      x-identifiers:
        - TargetGroupArn
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBProxyTargetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/db_proxy_target_groups/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TargetGroupArn') as target_group_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBProxyTargetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TargetGroupArn') as target_group_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBProxyTargetGroup'
                AND region = 'us-east-1'
    db_proxy_target_group:
      name: db_proxy_target_group
      id: aws.rds.db_proxy_target_group
      x-cfn-schema-name: DBProxyTargetGroup
      x-cfn-type-name: AWS::RDS::DBProxyTargetGroup
      x-identifiers:
        - TargetGroupArn
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBProxyTargetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBProxyTargetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/db_proxy_target_group/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/db_proxy_target_group/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DBProxyName') as db_proxy_name,
              JSON_EXTRACT(Properties, '$.TargetGroupArn') as target_group_arn,
              JSON_EXTRACT(Properties, '$.TargetGroupName') as target_group_name,
              JSON_EXTRACT(Properties, '$.ConnectionPoolConfigurationInfo') as connection_pool_configuration_info,
              JSON_EXTRACT(Properties, '$.DBInstanceIdentifiers') as db_instance_identifiers,
              JSON_EXTRACT(Properties, '$.DBClusterIdentifiers') as db_cluster_identifiers
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBProxyTargetGroup'
              AND data__Identifier = '<TargetGroupArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DBProxyName') as db_proxy_name,
                json_extract_path_text(Properties, 'TargetGroupArn') as target_group_arn,
                json_extract_path_text(Properties, 'TargetGroupName') as target_group_name,
                json_extract_path_text(Properties, 'ConnectionPoolConfigurationInfo') as connection_pool_configuration_info,
                json_extract_path_text(Properties, 'DBInstanceIdentifiers') as db_instance_identifiers,
                json_extract_path_text(Properties, 'DBClusterIdentifiers') as db_cluster_identifiers
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBProxyTargetGroup'
                AND data__Identifier = '<TargetGroupArn>'
                AND region = 'us-east-1'
    db_subnet_groups:
      name: db_subnet_groups
      id: aws.rds.db_subnet_groups
      x-cfn-schema-name: DBSubnetGroup
      x-cfn-type-name: AWS::RDS::DBSubnetGroup
      x-identifiers:
        - DBSubnetGroupName
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBSubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/db_subnet_groups/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as db_subnet_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBSubnetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DBSubnetGroupName') as db_subnet_group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::DBSubnetGroup'
                AND region = 'us-east-1'
    db_subnet_group:
      name: db_subnet_group
      id: aws.rds.db_subnet_group
      x-cfn-schema-name: DBSubnetGroup
      x-cfn-type-name: AWS::RDS::DBSubnetGroup
      x-identifiers:
        - DBSubnetGroupName
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBSubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::DBSubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/db_subnet_group/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/db_subnet_group/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupDescription') as db_subnet_group_description,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as db_subnet_group_name,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBSubnetGroup'
              AND data__Identifier = '<DBSubnetGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DBSubnetGroupDescription') as db_subnet_group_description,
                json_extract_path_text(Properties, 'DBSubnetGroupName') as db_subnet_group_name,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::DBSubnetGroup'
                AND data__Identifier = '<DBSubnetGroupName>'
                AND region = 'us-east-1'
    event_subscriptions:
      name: event_subscriptions
      id: aws.rds.event_subscriptions
      x-cfn-schema-name: EventSubscription
      x-cfn-type-name: AWS::RDS::EventSubscription
      x-identifiers:
        - SubscriptionName
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::EventSubscription"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/event_subscriptions/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SubscriptionName') as subscription_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::EventSubscription'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SubscriptionName') as subscription_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::EventSubscription'
                AND region = 'us-east-1'
    event_subscription:
      name: event_subscription
      id: aws.rds.event_subscription
      x-cfn-schema-name: EventSubscription
      x-cfn-type-name: AWS::RDS::EventSubscription
      x-identifiers:
        - SubscriptionName
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::EventSubscription"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::EventSubscription"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/event_subscription/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/event_subscription/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SubscriptionName') as subscription_name,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.EventCategories') as event_categories,
              JSON_EXTRACT(Properties, '$.SnsTopicArn') as sns_topic_arn,
              JSON_EXTRACT(Properties, '$.SourceIds') as source_ids,
              JSON_EXTRACT(Properties, '$.SourceType') as source_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::EventSubscription'
              AND data__Identifier = '<SubscriptionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'SubscriptionName') as subscription_name,
                json_extract_path_text(Properties, 'Enabled') as enabled,
                json_extract_path_text(Properties, 'EventCategories') as event_categories,
                json_extract_path_text(Properties, 'SnsTopicArn') as sns_topic_arn,
                json_extract_path_text(Properties, 'SourceIds') as source_ids,
                json_extract_path_text(Properties, 'SourceType') as source_type
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::EventSubscription'
                AND data__Identifier = '<SubscriptionName>'
                AND region = 'us-east-1'
    global_clusters:
      name: global_clusters
      id: aws.rds.global_clusters
      x-cfn-schema-name: GlobalCluster
      x-cfn-type-name: AWS::RDS::GlobalCluster
      x-identifiers:
        - GlobalClusterIdentifier
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::GlobalCluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/global_clusters/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GlobalClusterIdentifier') as global_cluster_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::GlobalCluster'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GlobalClusterIdentifier') as global_cluster_identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::GlobalCluster'
                AND region = 'us-east-1'
    global_cluster:
      name: global_cluster
      id: aws.rds.global_cluster
      x-cfn-schema-name: GlobalCluster
      x-cfn-type-name: AWS::RDS::GlobalCluster
      x-identifiers:
        - GlobalClusterIdentifier
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::GlobalCluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::GlobalCluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/global_cluster/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/global_cluster/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.DeletionProtection') as deletion_protection,
              JSON_EXTRACT(Properties, '$.GlobalClusterIdentifier') as global_cluster_identifier,
              JSON_EXTRACT(Properties, '$.SourceDBClusterIdentifier') as source_db_cluster_identifier,
              JSON_EXTRACT(Properties, '$.StorageEncrypted') as storage_encrypted
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::GlobalCluster'
              AND data__Identifier = '<GlobalClusterIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Engine') as engine,
                json_extract_path_text(Properties, 'EngineVersion') as engine_version,
                json_extract_path_text(Properties, 'DeletionProtection') as deletion_protection,
                json_extract_path_text(Properties, 'GlobalClusterIdentifier') as global_cluster_identifier,
                json_extract_path_text(Properties, 'SourceDBClusterIdentifier') as source_db_cluster_identifier,
                json_extract_path_text(Properties, 'StorageEncrypted') as storage_encrypted
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::GlobalCluster'
                AND data__Identifier = '<GlobalClusterIdentifier>'
                AND region = 'us-east-1'
    integrations:
      name: integrations
      id: aws.rds.integrations
      x-cfn-schema-name: Integration
      x-cfn-type-name: AWS::RDS::Integration
      x-identifiers:
        - IntegrationArn
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::Integration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/integrations/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IntegrationArn') as integration_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::Integration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IntegrationArn') as integration_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::Integration'
                AND region = 'us-east-1'
    integration:
      name: integration
      id: aws.rds.integration
      x-cfn-schema-name: Integration
      x-cfn-type-name: AWS::RDS::Integration
      x-identifiers:
        - IntegrationArn
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::Integration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::Integration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/integration/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/integration/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IntegrationName') as integration_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.DataFilter') as data_filter,
              JSON_EXTRACT(Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(Properties, '$.TargetArn') as target_arn,
              JSON_EXTRACT(Properties, '$.IntegrationArn') as integration_arn,
              JSON_EXTRACT(Properties, '$.KMSKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.AdditionalEncryptionContext') as additional_encryption_context,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::Integration'
              AND data__Identifier = '<IntegrationArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IntegrationName') as integration_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'DataFilter') as data_filter,
                json_extract_path_text(Properties, 'SourceArn') as source_arn,
                json_extract_path_text(Properties, 'TargetArn') as target_arn,
                json_extract_path_text(Properties, 'IntegrationArn') as integration_arn,
                json_extract_path_text(Properties, 'KMSKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'AdditionalEncryptionContext') as additional_encryption_context,
                json_extract_path_text(Properties, 'CreateTime') as create_time
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::Integration'
                AND data__Identifier = '<IntegrationArn>'
                AND region = 'us-east-1'
    option_groups:
      name: option_groups
      id: aws.rds.option_groups
      x-cfn-schema-name: OptionGroup
      x-cfn-type-name: AWS::RDS::OptionGroup
      x-identifiers:
        - OptionGroupName
      methods:
        create_resource:
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::OptionGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/option_groups/methods/create_resource'
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OptionGroupName') as option_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::OptionGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'OptionGroupName') as option_group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RDS::OptionGroup'
                AND region = 'us-east-1'
    option_group:
      name: option_group
      id: aws.rds.option_group
      x-cfn-schema-name: OptionGroup
      x-cfn-type-name: AWS::RDS::OptionGroup
      x-identifiers:
        - OptionGroupName
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::OptionGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RDS::OptionGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/option_group/methods/update_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/option_group/methods/delete_resource'
      x-type: get
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.OptionGroupName') as option_group_name,
              JSON_EXTRACT(Properties, '$.OptionGroupDescription') as option_group_description,
              JSON_EXTRACT(Properties, '$.EngineName') as engine_name,
              JSON_EXTRACT(Properties, '$.MajorEngineVersion') as major_engine_version,
              JSON_EXTRACT(Properties, '$.OptionConfigurations') as option_configurations,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::OptionGroup'
              AND data__Identifier = '<OptionGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'OptionGroupName') as option_group_name,
                json_extract_path_text(Properties, 'OptionGroupDescription') as option_group_description,
                json_extract_path_text(Properties, 'EngineName') as engine_name,
                json_extract_path_text(Properties, 'MajorEngineVersion') as major_engine_version,
                json_extract_path_text(Properties, 'OptionConfigurations') as option_configurations,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RDS::OptionGroup'
                AND data__Identifier = '<OptionGroupName>'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
x-stackQL-config:
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
