openapi: 3.0.0
info:
  title: NetworkManager
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    ProposedSegmentChange:
      description: The attachment to move from one segment to another.
      type: object
      properties:
        Tags:
          description: The key-value tags that changed for the segment.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        AttachmentPolicyRuleNumber:
          description: The rule number in the policy document that applies to this change.
          type: integer
        SegmentName:
          description: The name of the segment to change.
          type: string
      additionalProperties: false
    ProposedNetworkFunctionGroupChange:
      description: The attachment to move from one network function group to another.
      type: object
      properties:
        Tags:
          description: The key-value tags that changed for the network function group.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        AttachmentPolicyRuleNumber:
          description: The rule number in the policy document that applies to this change.
          type: integer
        NetworkFunctionGroupName:
          description: The name of the network function group to change.
          type: string
      additionalProperties: false
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
      required:
        - Key
        - Value
      additionalProperties: false
    ConnectAttachmentOptions:
      description: Connect attachment options for protocol
      type: object
      properties:
        Protocol:
          type: string
          description: Tunnel protocol for connect attachment
      additionalProperties: false
    ConnectAttachment:
      type: object
      properties:
        CoreNetworkId:
          description: ID of the CoreNetwork that the attachment will be attached to.
          type: string
        CoreNetworkArn:
          description: The ARN of a core network.
          type: string
        AttachmentId:
          description: The ID of the attachment.
          type: string
        OwnerAccountId:
          description: The ID of the attachment account owner.
          type: string
        AttachmentType:
          description: The type of attachment.
          type: string
        State:
          description: State of the attachment.
          type: string
        EdgeLocation:
          description: Edge location of the attachment.
          type: string
        ResourceArn:
          description: The attachment resource ARN.
          type: string
        AttachmentPolicyRuleNumber:
          description: The policy rule number associated with the attachment.
          type: integer
        SegmentName:
          description: The name of the segment attachment.
          type: string
        ProposedSegmentChange:
          description: The attachment to move from one segment to another.
          $ref: '#/components/schemas/ProposedSegmentChange'
        NetworkFunctionGroupName:
          description: The name of the network function group attachment.
          type: string
        ProposedNetworkFunctionGroupChange:
          description: The attachment to move from one network function group to another.
          $ref: '#/components/schemas/ProposedNetworkFunctionGroupChange'
        Tags:
          description: Tags for the attachment.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        CreatedAt:
          description: Creation time of the attachment.
          type: string
        UpdatedAt:
          description: Last update time of the attachment.
          type: string
        TransportAttachmentId:
          description: Id of transport attachment
          type: string
        Options:
          description: Protocol options for connect attachment
          $ref: '#/components/schemas/ConnectAttachmentOptions'
      required:
        - CoreNetworkId
        - EdgeLocation
        - TransportAttachmentId
        - Options
      x-stackql-resource-name: connect_attachment
      description: AWS::NetworkManager::ConnectAttachment Resource Type Definition
      x-type-name: AWS::NetworkManager::ConnectAttachment
      x-stackql-primary-identifier:
        - AttachmentId
      x-create-only-properties:
        - CoreNetworkId
        - EdgeLocation
        - TransportAttachmentId
        - Options
      x-read-only-properties:
        - CoreNetworkArn
        - CreatedAt
        - UpdatedAt
        - AttachmentType
        - State
        - ResourceArn
        - AttachmentId
        - OwnerAccountId
        - AttachmentPolicyRuleNumber
        - SegmentName
      x-required-properties:
        - CoreNetworkId
        - EdgeLocation
        - TransportAttachmentId
        - Options
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:GetConnectAttachment
          - networkmanager:CreateConnectAttachment
          - networkmanager:TagResource
          - ec2:DescribeRegions
        read:
          - networkmanager:GetConnectAttachment
        update:
          - networkmanager:GetConnectAttachment
          - networkmanager:ListTagsForResource
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - ec2:DescribeRegions
        delete:
          - networkmanager:GetConnectAttachment
          - networkmanager:DeleteAttachment
          - ec2:DescribeRegions
        list:
          - networkmanager:ListAttachments
    ConnectPeerConfiguration:
      type: object
      properties:
        CoreNetworkAddress:
          description: The IP address of a core network.
          type: string
        PeerAddress:
          description: The IP address of the Connect peer.
          type: string
        InsideCidrBlocks:
          description: The inside IP addresses used for a Connect peer configuration.
          type: array
          x-insertionOrder: false
          items:
            type: string
        Protocol:
          $ref: '#/components/schemas/TunnelProtocol'
        BgpConfigurations:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ConnectPeerBgpConfiguration'
      additionalProperties: false
    TunnelProtocol:
      description: The protocol used for a Connect peer configuration.
      type: string
    BgpOptions:
      description: Bgp options
      type: object
      properties:
        PeerAsn:
          type: number
      additionalProperties: false
    ConnectPeerBgpConfiguration:
      description: Bgp configuration for connect peer
      type: object
      properties:
        CoreNetworkAsn:
          description: The ASN of the Coret Network.
          type: number
        PeerAsn:
          description: The ASN of the Connect peer.
          type: number
        CoreNetworkAddress:
          description: The address of a core network.
          type: string
        PeerAddress:
          description: The address of a core network Connect peer.
          type: string
      additionalProperties: false
    ConnectPeer:
      type: object
      properties:
        PeerAddress:
          description: The IP address of the Connect peer.
          type: string
        CoreNetworkAddress:
          description: The IP address of a core network.
          type: string
        BgpOptions:
          description: Bgp options for connect peer.
          $ref: '#/components/schemas/BgpOptions'
        InsideCidrBlocks:
          description: The inside IP addresses used for a Connect peer configuration.
          type: array
          x-insertionOrder: false
          items:
            type: string
        CoreNetworkId:
          description: The ID of the core network.
          type: string
        ConnectAttachmentId:
          description: The ID of the attachment to connect.
          type: string
        ConnectPeerId:
          description: The ID of the Connect peer.
          type: string
        EdgeLocation:
          description: The Connect peer Regions where edges are located.
          type: string
        State:
          description: State of the connect peer.
          type: string
        CreatedAt:
          description: Connect peer creation time.
          type: string
        Configuration:
          description: Configuration of the connect peer.
          $ref: '#/components/schemas/ConnectPeerConfiguration'
        SubnetArn:
          description: The subnet ARN for the connect peer.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ConnectAttachmentId
        - PeerAddress
      x-stackql-resource-name: connect_peer
      description: AWS::NetworkManager::ConnectPeer Resource Type Definition.
      x-type-name: AWS::NetworkManager::ConnectPeer
      x-stackql-primary-identifier:
        - ConnectPeerId
      x-stackql-additional-identifiers:
        - - ConnectAttachmentId
          - CoreNetworkAddress
          - InsideCidrBlocks
      x-create-only-properties:
        - PeerAddress
        - CoreNetworkAddress
        - BgpOptions
        - InsideCidrBlocks
        - ConnectAttachmentId
        - SubnetArn
      x-write-only-properties:
        - CoreNetworkAddress
        - BgpOptions
        - SubnetArn
      x-read-only-properties:
        - ConnectPeerId
        - State
        - CreatedAt
        - Configuration
        - CoreNetworkId
        - EdgeLocation
      x-required-properties:
        - ConnectAttachmentId
        - PeerAddress
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:GetConnectPeer
          - networkmanager:CreateConnectPeer
          - networkmanager:TagResource
          - ec2:DescribeRegions
        read:
          - networkmanager:GetConnectPeer
        update:
          - networkmanager:GetConnectPeer
          - networkmanager:ListTagsForResource
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - ec2:DescribeRegions
        delete:
          - networkmanager:GetConnectPeer
          - networkmanager:DeleteConnectPeer
          - ec2:DescribeRegions
        list:
          - networkmanager:ListConnectPeers
    CoreNetworkSegment:
      type: object
      properties:
        Name:
          type: string
          description: Name of segment
        EdgeLocations:
          type: array
          x-insertionOrder: false
          items:
            type: string
            description: The Regions where the edges are located.
        SharedSegments:
          type: array
          x-insertionOrder: false
          items:
            type: string
            description: The shared segments of a core network.
      additionalProperties: false
    CoreNetworkNetworkFunctionGroup:
      type: object
      properties:
        Name:
          type: string
          description: Name of network function group
        EdgeLocations:
          type: array
          x-insertionOrder: false
          items:
            type: string
            description: The Regions where the edges are located.
        Segments:
          type: object
          properties:
            SendTo:
              type: array
              x-insertionOrder: false
              items:
                type: string
                description: The send-to segments.
            SendVia:
              type: array
              x-insertionOrder: false
              items:
                type: string
                description: The send-via segments.
          additionalProperties: false
      additionalProperties: false
    CoreNetworkEdge:
      type: object
      properties:
        EdgeLocation:
          type: string
          description: The Region where a core network edge is located.
        Asn:
          type: number
          description: The ASN of a core network edge.
        InsideCidrBlocks:
          type: array
          x-insertionOrder: false
          items:
            type: string
            description: The inside IP addresses used for core network edges.
      additionalProperties: false
    CoreNetwork:
      type: object
      properties:
        GlobalNetworkId:
          description: The ID of the global network that your core network is a part of.
          type: string
        CoreNetworkId:
          description: The Id of core network
          type: string
        CoreNetworkArn:
          description: The ARN (Amazon resource name) of core network
          type: string
        PolicyDocument:
          description: Live policy document for the core network, you must provide PolicyDocument in Json Format
          type: object
        Description:
          description: The description of core network
          type: string
        CreatedAt:
          description: The creation time of core network
          type: string
        State:
          description: The state of core network
          type: string
        Segments:
          description: The segments within a core network.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/CoreNetworkSegment'
        NetworkFunctionGroups:
          description: The network function groups within a core network.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/CoreNetworkNetworkFunctionGroup'
        Edges:
          description: The edges within a core network.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/CoreNetworkEdge'
        OwnerAccount:
          description: Owner of the core network
          type: string
        Tags:
          description: The tags for the global network.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - GlobalNetworkId
      x-stackql-resource-name: core_network
      description: AWS::NetworkManager::CoreNetwork Resource Type Definition.
      x-type-name: AWS::NetworkManager::CoreNetwork
      x-stackql-primary-identifier:
        - CoreNetworkId
      x-stackql-additional-identifiers:
        - - CoreNetworkArn
        - - GlobalNetworkId
      x-create-only-properties:
        - GlobalNetworkId
      x-read-only-properties:
        - OwnerAccount
        - CoreNetworkId
        - CoreNetworkArn
        - CreatedAt
        - State
        - Segments
        - NetworkFunctionGroups
        - Edges
      x-required-properties:
        - GlobalNetworkId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:CreateCoreNetwork
          - networkmanager:GetCoreNetwork
          - networkmanager:GetCoreNetworkPolicy
          - networkmanager:TagResource
          - ec2:DescribeRegions
        read:
          - networkmanager:GetCoreNetwork
          - networkmanager:GetCoreNetworkPolicy
        update:
          - networkmanager:UpdateCoreNetwork
          - networkmanager:GetCoreNetwork
          - networkmanager:ListTagsForResource
          - networkmanager:PutCoreNetworkPolicy
          - networkmanager:GetCoreNetworkPolicy
          - networkmanager:ExecuteCoreNetworkChangeSet
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - ec2:DescribeRegions
        delete:
          - networkmanager:DeleteCoreNetwork
          - networkmanager:UntagResource
          - networkmanager:GetCoreNetwork
          - networkmanager:GetCoreNetworkPolicy
          - ec2:DescribeRegions
        list:
          - networkmanager:ListCoreNetworks
    CustomerGatewayAssociation:
      type: object
      properties:
        GlobalNetworkId:
          description: The ID of the global network.
          type: string
        CustomerGatewayArn:
          description: The Amazon Resource Name (ARN) of the customer gateway.
          type: string
        DeviceId:
          description: The ID of the device
          type: string
        LinkId:
          description: The ID of the link
          type: string
      required:
        - GlobalNetworkId
        - CustomerGatewayArn
        - DeviceId
      x-stackql-resource-name: customer_gateway_association
      description: The AWS::NetworkManager::CustomerGatewayAssociation type associates a customer gateway with a device and optionally, with a link.
      x-type-name: AWS::NetworkManager::CustomerGatewayAssociation
      x-stackql-primary-identifier:
        - GlobalNetworkId
        - CustomerGatewayArn
      x-create-only-properties:
        - GlobalNetworkId
        - CustomerGatewayArn
        - DeviceId
        - LinkId
      x-required-properties:
        - GlobalNetworkId
        - CustomerGatewayArn
        - DeviceId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - networkmanager:GetCustomerGatewayAssociations
          - networkmanager:AssociateCustomerGateway
        read:
          - networkmanager:GetCustomerGatewayAssociations
        list:
          - networkmanager:GetCustomerGatewayAssociations
        delete:
          - networkmanager:DisassociateCustomerGateway
    Location:
      description: The location of the site
      type: object
      properties:
        Address:
          description: The physical address.
          type: string
        Latitude:
          description: The latitude.
          type: string
        Longitude:
          description: The longitude.
          type: string
      additionalProperties: false
    AWSLocation:
      description: The Amazon Web Services location of the device, if applicable.
      type: object
      properties:
        Zone:
          description: The Zone that the device is located in. Specify the ID of an Availability Zone, Local Zone, Wavelength Zone, or an Outpost.
          type: string
        SubnetArn:
          description: The Amazon Resource Name (ARN) of the subnet that the device is located in.
          type: string
      additionalProperties: false
    Device:
      type: object
      properties:
        DeviceArn:
          description: The Amazon Resource Name (ARN) of the device.
          type: string
        DeviceId:
          description: The ID of the device.
          type: string
        Description:
          description: The description of the device.
          type: string
        Tags:
          description: The tags for the device.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        GlobalNetworkId:
          description: The ID of the global network.
          type: string
        AWSLocation:
          description: The Amazon Web Services location of the device, if applicable.
          $ref: '#/components/schemas/AWSLocation'
        Location:
          description: The site location.
          $ref: '#/components/schemas/Location'
        Model:
          description: The device model
          type: string
        SerialNumber:
          description: The device serial number.
          type: string
        SiteId:
          description: The site ID.
          type: string
        Type:
          description: The device type.
          type: string
        Vendor:
          description: The device vendor.
          type: string
        CreatedAt:
          description: The date and time that the device was created.
          type: string
        State:
          description: The state of the device.
          type: string
      required:
        - GlobalNetworkId
      x-stackql-resource-name: device
      description: The AWS::NetworkManager::Device type describes a device.
      x-type-name: AWS::NetworkManager::Device
      x-stackql-primary-identifier:
        - GlobalNetworkId
        - DeviceId
      x-stackql-additional-identifiers:
        - - DeviceArn
      x-create-only-properties:
        - GlobalNetworkId
      x-read-only-properties:
        - DeviceId
        - DeviceArn
        - State
        - CreatedAt
      x-required-properties:
        - GlobalNetworkId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:CreateDevice
          - networkmanager:GetDevices
          - networkmanager:TagResource
        read:
          - networkmanager:GetDevices
        update:
          - networkmanager:UpdateDevice
          - networkmanager:ListTagsForResource
          - networkmanager:GetDevices
          - networkmanager:TagResource
          - networkmanager:UntagResource
        delete:
          - networkmanager:GetDevices
          - networkmanager:DeleteDevice
        list:
          - networkmanager:GetDevices
    DirectConnectGatewayAttachment:
      type: object
      properties:
        CoreNetworkId:
          description: The ID of a core network for the Direct Connect Gateway attachment.
          type: string
        CoreNetworkArn:
          description: The ARN of a core network for the Direct Connect Gateway attachment.
          type: string
        AttachmentId:
          description: Id of the attachment.
          type: string
        OwnerAccountId:
          description: Owner account of the attachment.
          type: string
        AttachmentType:
          description: Attachment type.
          type: string
        State:
          description: State of the attachment.
          type: string
        EdgeLocations:
          description: The Regions where the edges are located.
          type: array
          x-insertionOrder: false
          items:
            type: string
        DirectConnectGatewayArn:
          description: The ARN of the Direct Connect Gateway.
          type: string
        ResourceArn:
          description: The ARN of the Resource.
          type: string
        AttachmentPolicyRuleNumber:
          description: The policy rule number associated with the attachment.
          type: integer
        SegmentName:
          description: The name of the segment attachment..
          type: string
        ProposedSegmentChange:
          description: The attachment to move from one segment to another.
          $ref: '#/components/schemas/ProposedSegmentChange'
        NetworkFunctionGroupName:
          description: The name of the network function group attachment.
          type: string
        ProposedNetworkFunctionGroupChange:
          description: The attachment to move from one network function group to another.
          $ref: '#/components/schemas/ProposedNetworkFunctionGroupChange'
        Tags:
          description: Tags for the attachment.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        CreatedAt:
          description: Creation time of the attachment.
          type: string
        UpdatedAt:
          description: Last update time of the attachment.
          type: string
      required:
        - CoreNetworkId
        - DirectConnectGatewayArn
        - EdgeLocations
      x-stackql-resource-name: direct_connect_gateway_attachment
      description: AWS::NetworkManager::DirectConnectGatewayAttachment Resource Type
      x-type-name: AWS::NetworkManager::DirectConnectGatewayAttachment
      x-stackql-primary-identifier:
        - AttachmentId
      x-stackql-additional-identifiers:
        - - CoreNetworkId
          - DirectConnectGatewayArn
      x-create-only-properties:
        - CoreNetworkId
        - DirectConnectGatewayArn
      x-read-only-properties:
        - CoreNetworkArn
        - CreatedAt
        - UpdatedAt
        - AttachmentType
        - State
        - AttachmentId
        - OwnerAccountId
        - AttachmentPolicyRuleNumber
        - SegmentName
        - NetworkFunctionGroupName
        - ResourceArn
      x-required-properties:
        - CoreNetworkId
        - DirectConnectGatewayArn
        - EdgeLocations
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:CreateDirectConnectGatewayAttachment
          - networkmanager:GetDirectConnectGatewayAttachment
          - networkmanager:TagResource
          - ec2:DescribeRegions
          - iam:CreateServiceLinkedRole
        read:
          - networkmanager:GetDirectConnectGatewayAttachment
        update:
          - networkmanager:UpdateDirectConnectGatewayAttachment
          - networkmanager:GetDirectConnectGatewayAttachment
          - networkmanager:ListTagsForResource
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - ec2:DescribeRegions
        delete:
          - networkmanager:DeleteAttachment
          - networkmanager:GetDirectConnectGatewayAttachment
          - networkmanager:UntagResource
          - ec2:DescribeRegions
        list:
          - networkmanager:ListAttachments
    GlobalNetwork:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) of the global network.
          type: string
        Id:
          description: The ID of the global network.
          type: string
        Description:
          description: The description of the global network.
          type: string
        Tags:
          description: The tags for the global network.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        CreatedAt:
          description: The date and time that the global network was created.
          type: string
        State:
          description: The state of the global network.
          type: string
      x-stackql-resource-name: global_network
      description: The AWS::NetworkManager::GlobalNetwork type specifies a global network of the user's account
      x-type-name: AWS::NetworkManager::GlobalNetwork
      x-stackql-primary-identifier:
        - Id
      x-stackql-additional-identifiers:
        - - Arn
      x-read-only-properties:
        - Id
        - Arn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:CreateGlobalNetwork
          - networkmanager:DescribeGlobalNetworks
          - networkmanager:TagResource
          - iam:CreateServiceLinkedRole
        read:
          - networkmanager:DescribeGlobalNetworks
        update:
          - networkmanager:UpdateGlobalNetwork
          - networkmanager:DescribeGlobalNetworks
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
        delete:
          - networkmanager:DeleteGlobalNetwork
          - networkmanager:DescribeGlobalNetworks
        list:
          - networkmanager:DescribeGlobalNetworks
    Bandwidth:
      description: The bandwidth for the link.
      type: object
      properties:
        DownloadSpeed:
          description: Download speed in Mbps.
          type: integer
        UploadSpeed:
          description: Upload speed in Mbps.
          type: integer
      additionalProperties: false
    Link:
      type: object
      properties:
        LinkArn:
          description: The Amazon Resource Name (ARN) of the link.
          type: string
        LinkId:
          description: The ID of the link.
          type: string
        GlobalNetworkId:
          description: The ID of the global network.
          type: string
        SiteId:
          description: The ID of the site
          type: string
        Bandwidth:
          description: The Bandwidth for the link.
          $ref: '#/components/schemas/Bandwidth'
        Provider:
          description: The provider of the link.
          type: string
        Description:
          description: The description of the link.
          type: string
        Tags:
          description: The tags for the link.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Type:
          description: The type of the link.
          type: string
        CreatedAt:
          description: The date and time that the device was created.
          type: string
        State:
          description: The state of the link.
          type: string
      required:
        - GlobalNetworkId
        - SiteId
        - Bandwidth
      x-stackql-resource-name: link
      description: The AWS::NetworkManager::Link type describes a link.
      x-type-name: AWS::NetworkManager::Link
      x-stackql-primary-identifier:
        - GlobalNetworkId
        - LinkId
      x-stackql-additional-identifiers:
        - - LinkArn
      x-create-only-properties:
        - GlobalNetworkId
        - SiteId
      x-read-only-properties:
        - LinkId
        - LinkArn
        - CreatedAt
        - State
      x-required-properties:
        - GlobalNetworkId
        - SiteId
        - Bandwidth
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:CreateLink
          - networkmanager:GetLinks
          - networkmanager:TagResource
        read:
          - networkmanager:GetLinks
        update:
          - networkmanager:ListTagsForResource
          - networkmanager:TagResource
          - networkmanager:GetLinks
          - networkmanager:UntagResource
          - networkmanager:UpdateLink
        delete:
          - networkmanager:GetLinks
          - networkmanager:DeleteLink
        list:
          - networkmanager:GetLinks
    LinkAssociation:
      type: object
      properties:
        GlobalNetworkId:
          description: The ID of the global network.
          type: string
        DeviceId:
          description: The ID of the device
          type: string
        LinkId:
          description: The ID of the link
          type: string
      required:
        - GlobalNetworkId
        - DeviceId
        - LinkId
      x-stackql-resource-name: link_association
      description: The AWS::NetworkManager::LinkAssociation type associates a link to a device. The device and link must be in the same global network and the same site.
      x-type-name: AWS::NetworkManager::LinkAssociation
      x-stackql-primary-identifier:
        - GlobalNetworkId
        - DeviceId
        - LinkId
      x-create-only-properties:
        - GlobalNetworkId
        - DeviceId
        - LinkId
      x-required-properties:
        - GlobalNetworkId
        - DeviceId
        - LinkId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - networkmanager:GetLinkAssociations
          - networkmanager:AssociateLink
        read:
          - networkmanager:GetLinkAssociations
        list:
          - networkmanager:GetLinkAssociations
        delete:
          - networkmanager:DisassociateLink
    Site:
      type: object
      properties:
        SiteArn:
          description: The Amazon Resource Name (ARN) of the site.
          type: string
        SiteId:
          description: The ID of the site.
          type: string
        Description:
          description: The description of the site.
          type: string
        Tags:
          description: The tags for the site.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        GlobalNetworkId:
          description: The ID of the global network.
          type: string
        Location:
          description: The location of the site.
          $ref: '#/components/schemas/Location'
        CreatedAt:
          description: The date and time that the device was created.
          type: string
        State:
          description: The state of the site.
          type: string
      required:
        - GlobalNetworkId
      x-stackql-resource-name: site
      description: The AWS::NetworkManager::Site type describes a site.
      x-type-name: AWS::NetworkManager::Site
      x-stackql-primary-identifier:
        - GlobalNetworkId
        - SiteId
      x-stackql-additional-identifiers:
        - - SiteArn
      x-create-only-properties:
        - GlobalNetworkId
      x-read-only-properties:
        - SiteId
        - SiteArn
        - State
        - CreatedAt
      x-required-properties:
        - GlobalNetworkId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:CreateSite
          - networkmanager:GetSites
          - networkmanager:TagResource
        read:
          - networkmanager:GetSites
        update:
          - networkmanager:GetSites
          - networkmanager:ListTagsForResource
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:UpdateSite
        delete:
          - networkmanager:GetSites
          - networkmanager:DeleteSite
        list:
          - networkmanager:GetSites
    SiteToSiteVpnAttachment:
      type: object
      properties:
        CoreNetworkId:
          description: The ID of a core network where you're creating a site-to-site VPN attachment.
          type: string
        CoreNetworkArn:
          description: The ARN of a core network for the VPC attachment.
          type: string
        AttachmentId:
          description: The ID of the attachment.
          type: string
        OwnerAccountId:
          description: Owner account of the attachment.
          type: string
        AttachmentType:
          description: The type of attachment.
          type: string
        State:
          description: The state of the attachment.
          type: string
        EdgeLocation:
          description: The Region where the edge is located.
          type: string
        ResourceArn:
          description: The ARN of the Resource.
          type: string
        AttachmentPolicyRuleNumber:
          description: The policy rule number associated with the attachment.
          type: integer
        SegmentName:
          description: The name of the segment that attachment is in.
          type: string
        ProposedSegmentChange:
          description: The attachment to move from one segment to another.
          $ref: '#/components/schemas/ProposedSegmentChange'
        NetworkFunctionGroupName:
          description: The name of the network function group attachment.
          type: string
        ProposedNetworkFunctionGroupChange:
          description: The attachment to move from one network function group to another.
          $ref: '#/components/schemas/ProposedNetworkFunctionGroupChange'
        Tags:
          description: Tags for the attachment.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        CreatedAt:
          description: Creation time of the attachment.
          type: string
        UpdatedAt:
          description: Last update time of the attachment.
          type: string
        VpnConnectionArn:
          description: The ARN of the site-to-site VPN attachment.
          type: string
      required:
        - CoreNetworkId
        - VpnConnectionArn
      x-stackql-resource-name: site_to_site_vpn_attachment
      description: AWS::NetworkManager::SiteToSiteVpnAttachment Resource Type definition.
      x-type-name: AWS::NetworkManager::SiteToSiteVpnAttachment
      x-stackql-primary-identifier:
        - AttachmentId
      x-stackql-additional-identifiers:
        - - CoreNetworkId
          - VpnConnectionArn
      x-create-only-properties:
        - CoreNetworkId
        - VpnConnectionArn
      x-read-only-properties:
        - CoreNetworkArn
        - CreatedAt
        - UpdatedAt
        - AttachmentType
        - State
        - ResourceArn
        - AttachmentId
        - OwnerAccountId
        - EdgeLocation
        - AttachmentPolicyRuleNumber
        - SegmentName
      x-required-properties:
        - CoreNetworkId
        - VpnConnectionArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:GetSiteToSiteVpnAttachment
          - networkmanager:CreateSiteToSiteVpnAttachment
          - ec2:DescribeRegions
          - networkmanager:TagResource
        read:
          - networkmanager:GetSiteToSiteVpnAttachment
        update:
          - networkmanager:GetSiteToSiteVpnAttachment
          - networkmanager:ListTagsForResource
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - ec2:DescribeRegions
        delete:
          - networkmanager:GetSiteToSiteVpnAttachment
          - networkmanager:DeleteAttachment
          - ec2:DescribeRegions
        list:
          - networkmanager:ListAttachments
    TransitGatewayPeering:
      type: object
      properties:
        CoreNetworkId:
          description: The Id of the core network that you want to peer a transit gateway to.
          type: string
        CoreNetworkArn:
          description: The ARN (Amazon Resource Name) of the core network that you want to peer a transit gateway to.
          type: string
        TransitGatewayArn:
          description: The ARN (Amazon Resource Name) of the transit gateway that you will peer to a core network
          type: string
        TransitGatewayPeeringAttachmentId:
          description: The ID of the TransitGatewayPeeringAttachment
          type: string
        PeeringId:
          description: The Id of the transit gateway peering
          type: string
        State:
          description: The state of the transit gateway peering
          type: string
        EdgeLocation:
          description: The location of the transit gateway peering
          type: string
        ResourceArn:
          description: The ARN (Amazon Resource Name) of the resource that you will peer to a core network
          type: string
        OwnerAccountId:
          description: Peering owner account Id
          type: string
        PeeringType:
          description: Peering type (TransitGatewayPeering)
          type: string
        CreatedAt:
          description: The creation time of the transit gateway peering
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - CoreNetworkId
        - TransitGatewayArn
      x-stackql-resource-name: transit_gateway_peering
      description: AWS::NetworkManager::TransitGatewayPeering Resoruce Type.
      x-type-name: AWS::NetworkManager::TransitGatewayPeering
      x-stackql-primary-identifier:
        - PeeringId
      x-create-only-properties:
        - CoreNetworkId
        - TransitGatewayArn
      x-read-only-properties:
        - CoreNetworkArn
        - PeeringId
        - State
        - PeeringType
        - OwnerAccountId
        - EdgeLocation
        - ResourceArn
        - CreatedAt
        - TransitGatewayPeeringAttachmentId
      x-required-properties:
        - CoreNetworkId
        - TransitGatewayArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:CreateTransitGatewayPeering
          - networkmanager:TagResource
          - networkmanager:GetTransitGatewayPeering
          - iam:CreateServiceLinkedRole
          - ec2:CreateTransitGatewayPeeringAttachment
          - ec2:AcceptTransitGatewayPeeringAttachment
          - ec2:DescribeRegions
        read:
          - networkmanager:GetTransitGatewayPeering
        update:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
          - networkmanager:GetTransitGatewayPeering
          - ec2:DescribeRegions
        delete:
          - networkmanager:DeletePeering
          - networkmanager:GetTransitGatewayPeering
          - ec2:DescribeRegions
        list:
          - networkmanager:ListPeerings
    TransitGatewayRegistration:
      type: object
      properties:
        GlobalNetworkId:
          description: The ID of the global network.
          type: string
        TransitGatewayArn:
          description: The Amazon Resource Name (ARN) of the transit gateway.
          type: string
      required:
        - GlobalNetworkId
        - TransitGatewayArn
      x-stackql-resource-name: transit_gateway_registration
      description: The AWS::NetworkManager::TransitGatewayRegistration type registers a transit gateway in your global network. The transit gateway can be in any AWS Region, but it must be owned by the same AWS account that owns the global network. You cannot register a transit gateway in more than one global network.
      x-type-name: AWS::NetworkManager::TransitGatewayRegistration
      x-stackql-primary-identifier:
        - GlobalNetworkId
        - TransitGatewayArn
      x-create-only-properties:
        - GlobalNetworkId
        - TransitGatewayArn
      x-required-properties:
        - GlobalNetworkId
        - TransitGatewayArn
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - networkmanager:RegisterTransitGateway
          - networkmanager:GetTransitGatewayRegistrations
        read:
          - networkmanager:GetTransitGatewayRegistrations
        list:
          - networkmanager:GetTransitGatewayRegistrations
        delete:
          - networkmanager:DeregisterTransitGateway
          - networkmanager:GetTransitGatewayRegistrations
    TransitGatewayRouteTableAttachment:
      type: object
      properties:
        PeeringId:
          description: The Id of peering between transit gateway and core network.
          type: string
        TransitGatewayRouteTableArn:
          description: The Arn of transit gateway route table.
          type: string
        CoreNetworkId:
          description: The ID of a core network where you're creating a site-to-site VPN attachment.
          type: string
        CoreNetworkArn:
          description: The ARN of a core network for the VPC attachment.
          type: string
        AttachmentId:
          description: The ID of the attachment.
          type: string
        OwnerAccountId:
          description: Owner account of the attachment.
          type: string
        AttachmentType:
          description: The type of attachment.
          type: string
        State:
          description: The state of the attachment.
          type: string
        EdgeLocation:
          description: The Region where the edge is located.
          type: string
        ResourceArn:
          description: The ARN of the Resource.
          type: string
        AttachmentPolicyRuleNumber:
          description: The policy rule number associated with the attachment.
          type: integer
        SegmentName:
          description: The name of the segment that attachment is in.
          type: string
        ProposedSegmentChange:
          description: The attachment to move from one segment to another.
          $ref: '#/components/schemas/ProposedSegmentChange'
        NetworkFunctionGroupName:
          description: The name of the network function group attachment.
          type: string
        ProposedNetworkFunctionGroupChange:
          description: The attachment to move from one network function group to another.
          $ref: '#/components/schemas/ProposedNetworkFunctionGroupChange'
        CreatedAt:
          description: Creation time of the attachment.
          type: string
        UpdatedAt:
          description: Last update time of the attachment.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - PeeringId
        - TransitGatewayRouteTableArn
      x-stackql-resource-name: transit_gateway_route_table_attachment
      description: AWS::NetworkManager::TransitGatewayRouteTableAttachment Resource Type definition.
      x-type-name: AWS::NetworkManager::TransitGatewayRouteTableAttachment
      x-stackql-primary-identifier:
        - AttachmentId
      x-create-only-properties:
        - PeeringId
        - TransitGatewayRouteTableArn
      x-read-only-properties:
        - CoreNetworkArn
        - CoreNetworkId
        - CreatedAt
        - UpdatedAt
        - AttachmentType
        - State
        - ResourceArn
        - AttachmentId
        - OwnerAccountId
        - EdgeLocation
        - AttachmentPolicyRuleNumber
        - SegmentName
      x-required-properties:
        - PeeringId
        - TransitGatewayRouteTableArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:CreateTransitGatewayRouteTableAttachment
          - networkmanager:GetTransitGatewayRouteTableAttachment
          - networkmanager:TagResource
          - iam:CreateServiceLinkedRole
          - ec2:DescribeRegions
        read:
          - networkmanager:GetTransitGatewayRouteTableAttachment
        update:
          - networkmanager:GetTransitGatewayRouteTableAttachment
          - networkmanager:ListTagsForResource
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - ec2:DescribeRegions
        delete:
          - networkmanager:GetTransitGatewayRouteTableAttachment
          - networkmanager:DeleteAttachment
          - ec2:DescribeRegions
        list:
          - networkmanager:ListAttachments
    VpcOptions:
      description: Vpc options of the attachment.
      type: object
      properties:
        Ipv6Support:
          description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
          type: boolean
          default: false
        ApplianceModeSupport:
          description: 'Indicates whether to enable ApplianceModeSupport Support for Vpc Attachment. Valid Values: true | false'
          type: boolean
          default: false
      additionalProperties: false
    VpcAttachment:
      type: object
      properties:
        CoreNetworkId:
          description: The ID of a core network for the VPC attachment.
          type: string
        CoreNetworkArn:
          description: The ARN of a core network for the VPC attachment.
          type: string
        AttachmentId:
          description: Id of the attachment.
          type: string
        OwnerAccountId:
          description: Owner account of the attachment.
          type: string
        AttachmentType:
          description: Attachment type.
          type: string
        State:
          description: State of the attachment.
          type: string
        EdgeLocation:
          description: The Region where the edge is located.
          type: string
        VpcArn:
          description: The ARN of the VPC.
          type: string
        ResourceArn:
          description: The ARN of the Resource.
          type: string
        AttachmentPolicyRuleNumber:
          description: The policy rule number associated with the attachment.
          type: integer
        SegmentName:
          description: The name of the segment attachment..
          type: string
        ProposedSegmentChange:
          description: The attachment to move from one segment to another.
          $ref: '#/components/schemas/ProposedSegmentChange'
        NetworkFunctionGroupName:
          description: The name of the network function group attachment.
          type: string
        ProposedNetworkFunctionGroupChange:
          description: The attachment to move from one network function group to another.
          $ref: '#/components/schemas/ProposedNetworkFunctionGroupChange'
        Tags:
          description: Tags for the attachment.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        CreatedAt:
          description: Creation time of the attachment.
          type: string
        UpdatedAt:
          description: Last update time of the attachment.
          type: string
        SubnetArns:
          description: Subnet Arn list
          type: array
          x-insertionOrder: false
          items:
            type: string
        Options:
          description: Vpc options of the attachment.
          $ref: '#/components/schemas/VpcOptions'
      required:
        - CoreNetworkId
        - VpcArn
        - SubnetArns
      x-stackql-resource-name: vpc_attachment
      description: AWS::NetworkManager::VpcAttachment Resoruce Type
      x-type-name: AWS::NetworkManager::VpcAttachment
      x-stackql-primary-identifier:
        - AttachmentId
      x-stackql-additional-identifiers:
        - - CoreNetworkId
          - VpcArn
      x-create-only-properties:
        - CoreNetworkId
        - VpcArn
      x-read-only-properties:
        - CoreNetworkArn
        - CreatedAt
        - UpdatedAt
        - AttachmentType
        - State
        - AttachmentId
        - OwnerAccountId
        - EdgeLocation
        - AttachmentPolicyRuleNumber
        - SegmentName
        - NetworkFunctionGroupName
        - ResourceArn
      x-required-properties:
        - CoreNetworkId
        - VpcArn
        - SubnetArns
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - networkmanager:ListTagsForResource
      x-required-permissions:
        create:
          - networkmanager:CreateVpcAttachment
          - networkmanager:GetVpcAttachment
          - networkmanager:TagResource
          - ec2:DescribeRegions
          - iam:CreateServiceLinkedRole
        read:
          - networkmanager:GetVpcAttachment
        update:
          - networkmanager:UpdateVpcAttachment
          - networkmanager:GetVpcAttachment
          - networkmanager:ListTagsForResource
          - networkmanager:TagResource
          - networkmanager:UntagResource
          - ec2:DescribeRegions
        delete:
          - networkmanager:DeleteAttachment
          - networkmanager:GetVpcAttachment
          - networkmanager:UntagResource
          - ec2:DescribeRegions
        list:
          - networkmanager:ListAttachments
    CreateConnectAttachmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CoreNetworkId:
              description: ID of the CoreNetwork that the attachment will be attached to.
              type: string
            CoreNetworkArn:
              description: The ARN of a core network.
              type: string
            AttachmentId:
              description: The ID of the attachment.
              type: string
            OwnerAccountId:
              description: The ID of the attachment account owner.
              type: string
            AttachmentType:
              description: The type of attachment.
              type: string
            State:
              description: State of the attachment.
              type: string
            EdgeLocation:
              description: Edge location of the attachment.
              type: string
            ResourceArn:
              description: The attachment resource ARN.
              type: string
            AttachmentPolicyRuleNumber:
              description: The policy rule number associated with the attachment.
              type: integer
            SegmentName:
              description: The name of the segment attachment.
              type: string
            ProposedSegmentChange:
              description: The attachment to move from one segment to another.
              $ref: '#/components/schemas/ProposedSegmentChange'
            NetworkFunctionGroupName:
              description: The name of the network function group attachment.
              type: string
            ProposedNetworkFunctionGroupChange:
              description: The attachment to move from one network function group to another.
              $ref: '#/components/schemas/ProposedNetworkFunctionGroupChange'
            Tags:
              description: Tags for the attachment.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            CreatedAt:
              description: Creation time of the attachment.
              type: string
            UpdatedAt:
              description: Last update time of the attachment.
              type: string
            TransportAttachmentId:
              description: Id of transport attachment
              type: string
            Options:
              description: Protocol options for connect attachment
              $ref: '#/components/schemas/ConnectAttachmentOptions'
          x-stackQL-stringOnly: true
      x-title: CreateConnectAttachmentRequest
      type: object
      required: []
    CreateConnectPeerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PeerAddress:
              description: The IP address of the Connect peer.
              type: string
            CoreNetworkAddress:
              description: The IP address of a core network.
              type: string
            BgpOptions:
              description: Bgp options for connect peer.
              $ref: '#/components/schemas/BgpOptions'
            InsideCidrBlocks:
              description: The inside IP addresses used for a Connect peer configuration.
              type: array
              x-insertionOrder: false
              items:
                type: string
            CoreNetworkId:
              description: The ID of the core network.
              type: string
            ConnectAttachmentId:
              description: The ID of the attachment to connect.
              type: string
            ConnectPeerId:
              description: The ID of the Connect peer.
              type: string
            EdgeLocation:
              description: The Connect peer Regions where edges are located.
              type: string
            State:
              description: State of the connect peer.
              type: string
            CreatedAt:
              description: Connect peer creation time.
              type: string
            Configuration:
              description: Configuration of the connect peer.
              $ref: '#/components/schemas/ConnectPeerConfiguration'
            SubnetArn:
              description: The subnet ARN for the connect peer.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateConnectPeerRequest
      type: object
      required: []
    CreateCoreNetworkRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            GlobalNetworkId:
              description: The ID of the global network that your core network is a part of.
              type: string
            CoreNetworkId:
              description: The Id of core network
              type: string
            CoreNetworkArn:
              description: The ARN (Amazon resource name) of core network
              type: string
            PolicyDocument:
              description: Live policy document for the core network, you must provide PolicyDocument in Json Format
              type: object
            Description:
              description: The description of core network
              type: string
            CreatedAt:
              description: The creation time of core network
              type: string
            State:
              description: The state of core network
              type: string
            Segments:
              description: The segments within a core network.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/CoreNetworkSegment'
            NetworkFunctionGroups:
              description: The network function groups within a core network.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/CoreNetworkNetworkFunctionGroup'
            Edges:
              description: The edges within a core network.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/CoreNetworkEdge'
            OwnerAccount:
              description: Owner of the core network
              type: string
            Tags:
              description: The tags for the global network.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateCoreNetworkRequest
      type: object
      required: []
    CreateCustomerGatewayAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            GlobalNetworkId:
              description: The ID of the global network.
              type: string
            CustomerGatewayArn:
              description: The Amazon Resource Name (ARN) of the customer gateway.
              type: string
            DeviceId:
              description: The ID of the device
              type: string
            LinkId:
              description: The ID of the link
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateCustomerGatewayAssociationRequest
      type: object
      required: []
    CreateDeviceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DeviceArn:
              description: The Amazon Resource Name (ARN) of the device.
              type: string
            DeviceId:
              description: The ID of the device.
              type: string
            Description:
              description: The description of the device.
              type: string
            Tags:
              description: The tags for the device.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            GlobalNetworkId:
              description: The ID of the global network.
              type: string
            AWSLocation:
              description: The Amazon Web Services location of the device, if applicable.
              $ref: '#/components/schemas/AWSLocation'
            Location:
              description: The site location.
              $ref: '#/components/schemas/Location'
            Model:
              description: The device model
              type: string
            SerialNumber:
              description: The device serial number.
              type: string
            SiteId:
              description: The site ID.
              type: string
            Type:
              description: The device type.
              type: string
            Vendor:
              description: The device vendor.
              type: string
            CreatedAt:
              description: The date and time that the device was created.
              type: string
            State:
              description: The state of the device.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateDeviceRequest
      type: object
      required: []
    CreateDirectConnectGatewayAttachmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CoreNetworkId:
              description: The ID of a core network for the Direct Connect Gateway attachment.
              type: string
            CoreNetworkArn:
              description: The ARN of a core network for the Direct Connect Gateway attachment.
              type: string
            AttachmentId:
              description: Id of the attachment.
              type: string
            OwnerAccountId:
              description: Owner account of the attachment.
              type: string
            AttachmentType:
              description: Attachment type.
              type: string
            State:
              description: State of the attachment.
              type: string
            EdgeLocations:
              description: The Regions where the edges are located.
              type: array
              x-insertionOrder: false
              items:
                type: string
            DirectConnectGatewayArn:
              description: The ARN of the Direct Connect Gateway.
              type: string
            ResourceArn:
              description: The ARN of the Resource.
              type: string
            AttachmentPolicyRuleNumber:
              description: The policy rule number associated with the attachment.
              type: integer
            SegmentName:
              description: The name of the segment attachment..
              type: string
            ProposedSegmentChange:
              description: The attachment to move from one segment to another.
              $ref: '#/components/schemas/ProposedSegmentChange'
            NetworkFunctionGroupName:
              description: The name of the network function group attachment.
              type: string
            ProposedNetworkFunctionGroupChange:
              description: The attachment to move from one network function group to another.
              $ref: '#/components/schemas/ProposedNetworkFunctionGroupChange'
            Tags:
              description: Tags for the attachment.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            CreatedAt:
              description: Creation time of the attachment.
              type: string
            UpdatedAt:
              description: Last update time of the attachment.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateDirectConnectGatewayAttachmentRequest
      type: object
      required: []
    CreateGlobalNetworkRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              description: The Amazon Resource Name (ARN) of the global network.
              type: string
            Id:
              description: The ID of the global network.
              type: string
            Description:
              description: The description of the global network.
              type: string
            Tags:
              description: The tags for the global network.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            CreatedAt:
              description: The date and time that the global network was created.
              type: string
            State:
              description: The state of the global network.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateGlobalNetworkRequest
      type: object
      required: []
    CreateLinkRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            LinkArn:
              description: The Amazon Resource Name (ARN) of the link.
              type: string
            LinkId:
              description: The ID of the link.
              type: string
            GlobalNetworkId:
              description: The ID of the global network.
              type: string
            SiteId:
              description: The ID of the site
              type: string
            Bandwidth:
              description: The Bandwidth for the link.
              $ref: '#/components/schemas/Bandwidth'
            Provider:
              description: The provider of the link.
              type: string
            Description:
              description: The description of the link.
              type: string
            Tags:
              description: The tags for the link.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Type:
              description: The type of the link.
              type: string
            CreatedAt:
              description: The date and time that the device was created.
              type: string
            State:
              description: The state of the link.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateLinkRequest
      type: object
      required: []
    CreateLinkAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            GlobalNetworkId:
              description: The ID of the global network.
              type: string
            DeviceId:
              description: The ID of the device
              type: string
            LinkId:
              description: The ID of the link
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateLinkAssociationRequest
      type: object
      required: []
    CreateSiteRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            SiteArn:
              description: The Amazon Resource Name (ARN) of the site.
              type: string
            SiteId:
              description: The ID of the site.
              type: string
            Description:
              description: The description of the site.
              type: string
            Tags:
              description: The tags for the site.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            GlobalNetworkId:
              description: The ID of the global network.
              type: string
            Location:
              description: The location of the site.
              $ref: '#/components/schemas/Location'
            CreatedAt:
              description: The date and time that the device was created.
              type: string
            State:
              description: The state of the site.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateSiteRequest
      type: object
      required: []
    CreateSiteToSiteVpnAttachmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CoreNetworkId:
              description: The ID of a core network where you're creating a site-to-site VPN attachment.
              type: string
            CoreNetworkArn:
              description: The ARN of a core network for the VPC attachment.
              type: string
            AttachmentId:
              description: The ID of the attachment.
              type: string
            OwnerAccountId:
              description: Owner account of the attachment.
              type: string
            AttachmentType:
              description: The type of attachment.
              type: string
            State:
              description: The state of the attachment.
              type: string
            EdgeLocation:
              description: The Region where the edge is located.
              type: string
            ResourceArn:
              description: The ARN of the Resource.
              type: string
            AttachmentPolicyRuleNumber:
              description: The policy rule number associated with the attachment.
              type: integer
            SegmentName:
              description: The name of the segment that attachment is in.
              type: string
            ProposedSegmentChange:
              description: The attachment to move from one segment to another.
              $ref: '#/components/schemas/ProposedSegmentChange'
            NetworkFunctionGroupName:
              description: The name of the network function group attachment.
              type: string
            ProposedNetworkFunctionGroupChange:
              description: The attachment to move from one network function group to another.
              $ref: '#/components/schemas/ProposedNetworkFunctionGroupChange'
            Tags:
              description: Tags for the attachment.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            CreatedAt:
              description: Creation time of the attachment.
              type: string
            UpdatedAt:
              description: Last update time of the attachment.
              type: string
            VpnConnectionArn:
              description: The ARN of the site-to-site VPN attachment.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateSiteToSiteVpnAttachmentRequest
      type: object
      required: []
    CreateTransitGatewayPeeringRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CoreNetworkId:
              description: The Id of the core network that you want to peer a transit gateway to.
              type: string
            CoreNetworkArn:
              description: The ARN (Amazon Resource Name) of the core network that you want to peer a transit gateway to.
              type: string
            TransitGatewayArn:
              description: The ARN (Amazon Resource Name) of the transit gateway that you will peer to a core network
              type: string
            TransitGatewayPeeringAttachmentId:
              description: The ID of the TransitGatewayPeeringAttachment
              type: string
            PeeringId:
              description: The Id of the transit gateway peering
              type: string
            State:
              description: The state of the transit gateway peering
              type: string
            EdgeLocation:
              description: The location of the transit gateway peering
              type: string
            ResourceArn:
              description: The ARN (Amazon Resource Name) of the resource that you will peer to a core network
              type: string
            OwnerAccountId:
              description: Peering owner account Id
              type: string
            PeeringType:
              description: Peering type (TransitGatewayPeering)
              type: string
            CreatedAt:
              description: The creation time of the transit gateway peering
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayPeeringRequest
      type: object
      required: []
    CreateTransitGatewayRegistrationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            GlobalNetworkId:
              description: The ID of the global network.
              type: string
            TransitGatewayArn:
              description: The Amazon Resource Name (ARN) of the transit gateway.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayRegistrationRequest
      type: object
      required: []
    CreateTransitGatewayRouteTableAttachmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PeeringId:
              description: The Id of peering between transit gateway and core network.
              type: string
            TransitGatewayRouteTableArn:
              description: The Arn of transit gateway route table.
              type: string
            CoreNetworkId:
              description: The ID of a core network where you're creating a site-to-site VPN attachment.
              type: string
            CoreNetworkArn:
              description: The ARN of a core network for the VPC attachment.
              type: string
            AttachmentId:
              description: The ID of the attachment.
              type: string
            OwnerAccountId:
              description: Owner account of the attachment.
              type: string
            AttachmentType:
              description: The type of attachment.
              type: string
            State:
              description: The state of the attachment.
              type: string
            EdgeLocation:
              description: The Region where the edge is located.
              type: string
            ResourceArn:
              description: The ARN of the Resource.
              type: string
            AttachmentPolicyRuleNumber:
              description: The policy rule number associated with the attachment.
              type: integer
            SegmentName:
              description: The name of the segment that attachment is in.
              type: string
            ProposedSegmentChange:
              description: The attachment to move from one segment to another.
              $ref: '#/components/schemas/ProposedSegmentChange'
            NetworkFunctionGroupName:
              description: The name of the network function group attachment.
              type: string
            ProposedNetworkFunctionGroupChange:
              description: The attachment to move from one network function group to another.
              $ref: '#/components/schemas/ProposedNetworkFunctionGroupChange'
            CreatedAt:
              description: Creation time of the attachment.
              type: string
            UpdatedAt:
              description: Last update time of the attachment.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayRouteTableAttachmentRequest
      type: object
      required: []
    CreateVpcAttachmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CoreNetworkId:
              description: The ID of a core network for the VPC attachment.
              type: string
            CoreNetworkArn:
              description: The ARN of a core network for the VPC attachment.
              type: string
            AttachmentId:
              description: Id of the attachment.
              type: string
            OwnerAccountId:
              description: Owner account of the attachment.
              type: string
            AttachmentType:
              description: Attachment type.
              type: string
            State:
              description: State of the attachment.
              type: string
            EdgeLocation:
              description: The Region where the edge is located.
              type: string
            VpcArn:
              description: The ARN of the VPC.
              type: string
            ResourceArn:
              description: The ARN of the Resource.
              type: string
            AttachmentPolicyRuleNumber:
              description: The policy rule number associated with the attachment.
              type: integer
            SegmentName:
              description: The name of the segment attachment..
              type: string
            ProposedSegmentChange:
              description: The attachment to move from one segment to another.
              $ref: '#/components/schemas/ProposedSegmentChange'
            NetworkFunctionGroupName:
              description: The name of the network function group attachment.
              type: string
            ProposedNetworkFunctionGroupChange:
              description: The attachment to move from one network function group to another.
              $ref: '#/components/schemas/ProposedNetworkFunctionGroupChange'
            Tags:
              description: Tags for the attachment.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            CreatedAt:
              description: Creation time of the attachment.
              type: string
            UpdatedAt:
              description: Last update time of the attachment.
              type: string
            SubnetArns:
              description: Subnet Arn list
              type: array
              x-insertionOrder: false
              items:
                type: string
            Options:
              description: Vpc options of the attachment.
              $ref: '#/components/schemas/VpcOptions'
          x-stackQL-stringOnly: true
      x-title: CreateVpcAttachmentRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    connect_attachments:
      name: connect_attachments
      id: aws.networkmanager.connect_attachments
      x-cfn-schema-name: ConnectAttachment
      x-cfn-type-name: AWS::NetworkManager::ConnectAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ConnectAttachment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::ConnectAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::ConnectAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::ConnectAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/connect_attachments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/connect_attachments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/connect_attachments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
              JSON_EXTRACT(Properties, '$.SegmentName') as segment_name,
              JSON_EXTRACT(Properties, '$.ProposedSegmentChange') as proposed_segment_change,
              JSON_EXTRACT(Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
              JSON_EXTRACT(Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.TransportAttachmentId') as transport_attachment_id,
              JSON_EXTRACT(Properties, '$.Options') as options
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
              AND data__Identifier = '<AttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentId') as attachment_id,
                JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
                JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
                JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                JSON_EXTRACT(detail.Properties, '$.SegmentName') as segment_name,
                JSON_EXTRACT(detail.Properties, '$.ProposedSegmentChange') as proposed_segment_change,
                JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
                JSON_EXTRACT(detail.Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
                JSON_EXTRACT(detail.Properties, '$.TransportAttachmentId') as transport_attachment_id,
                JSON_EXTRACT(detail.Properties, '$.Options') as options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
                AND detail.data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CoreNetworkId') as core_network_id,
                  json_extract_path_text(Properties, 'CoreNetworkArn') as core_network_arn,
                  json_extract_path_text(Properties, 'AttachmentId') as attachment_id,
                  json_extract_path_text(Properties, 'OwnerAccountId') as owner_account_id,
                  json_extract_path_text(Properties, 'AttachmentType') as attachment_type,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'EdgeLocation') as edge_location,
                  json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                  json_extract_path_text(Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                  json_extract_path_text(Properties, 'SegmentName') as segment_name,
                  json_extract_path_text(Properties, 'ProposedSegmentChange') as proposed_segment_change,
                  json_extract_path_text(Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                  json_extract_path_text(Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                  json_extract_path_text(Properties, 'TransportAttachmentId') as transport_attachment_id,
                  json_extract_path_text(Properties, 'Options') as options
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
                  AND data__Identifier = '<AttachmentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                    json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentId') as attachment_id,
                    json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                    json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                    json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                    json_extract_path_text(detail.Properties, 'SegmentName') as segment_name,
                    json_extract_path_text(detail.Properties, 'ProposedSegmentChange') as proposed_segment_change,
                    json_extract_path_text(detail.Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                    json_extract_path_text(detail.Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                    json_extract_path_text(detail.Properties, 'TransportAttachmentId') as transport_attachment_id,
                    json_extract_path_text(detail.Properties, 'Options') as options
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
                    AND detail.data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
                    AND listing.region = 'us-east-1'
    connect_attachments_list_only:
      name: connect_attachments_list_only
      id: aws.networkmanager.connect_attachments_list_only
      x-cfn-schema-name: ConnectAttachment
      x-cfn-type-name: AWS::NetworkManager::ConnectAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AttachmentId') as attachment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
                AND region = 'us-east-1'
    connect_attachment_tags:
      name: connect_attachment_tags
      id: aws.networkmanager.connect_attachment_tags
      x-cfn-schema-name: ConnectAttachment
      x-cfn-type-name: AWS::NetworkManager::ConnectAttachment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(detail.Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(detail.Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
              JSON_EXTRACT(detail.Properties, '$.SegmentName') as segment_name,
              JSON_EXTRACT(detail.Properties, '$.ProposedSegmentChange') as proposed_segment_change,
              JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
              JSON_EXTRACT(detail.Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(detail.Properties, '$.TransportAttachmentId') as transport_attachment_id,
              JSON_EXTRACT(detail.Properties, '$.Options') as options
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
              AND detail.data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                json_extract_path_text(detail.Properties, 'AttachmentId') as attachment_id,
                json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(detail.Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                json_extract_path_text(detail.Properties, 'SegmentName') as segment_name,
                json_extract_path_text(detail.Properties, 'ProposedSegmentChange') as proposed_segment_change,
                json_extract_path_text(detail.Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                json_extract_path_text(detail.Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(detail.Properties, 'TransportAttachmentId') as transport_attachment_id,
                json_extract_path_text(detail.Properties, 'Options') as options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
                AND detail.data__TypeName = 'AWS::NetworkManager::ConnectAttachment'
                AND listing.region = 'us-east-1'
    connect_peers:
      name: connect_peers
      id: aws.networkmanager.connect_peers
      x-cfn-schema-name: ConnectPeer
      x-cfn-type-name: AWS::NetworkManager::ConnectPeer
      x-identifiers:
        - ConnectPeerId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ConnectPeer&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::ConnectPeer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::ConnectPeer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::ConnectPeer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/connect_peers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/connect_peers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/connect_peers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PeerAddress') as peer_address,
              JSON_EXTRACT(Properties, '$.CoreNetworkAddress') as core_network_address,
              JSON_EXTRACT(Properties, '$.BgpOptions') as bgp_options,
              JSON_EXTRACT(Properties, '$.InsideCidrBlocks') as inside_cidr_blocks,
              JSON_EXTRACT(Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(Properties, '$.ConnectAttachmentId') as connect_attachment_id,
              JSON_EXTRACT(Properties, '$.ConnectPeerId') as connect_peer_id,
              JSON_EXTRACT(Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(Properties, '$.SubnetArn') as subnet_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::ConnectPeer'
              AND data__Identifier = '<ConnectPeerId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PeerAddress') as peer_address,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkAddress') as core_network_address,
                JSON_EXTRACT(detail.Properties, '$.BgpOptions') as bgp_options,
                JSON_EXTRACT(detail.Properties, '$.InsideCidrBlocks') as inside_cidr_blocks,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
                JSON_EXTRACT(detail.Properties, '$.ConnectAttachmentId') as connect_attachment_id,
                JSON_EXTRACT(detail.Properties, '$.ConnectPeerId') as connect_peer_id,
                JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.Configuration') as configuration,
                JSON_EXTRACT(detail.Properties, '$.SubnetArn') as subnet_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::ConnectPeer'
                AND detail.data__TypeName = 'AWS::NetworkManager::ConnectPeer'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PeerAddress') as peer_address,
                  json_extract_path_text(Properties, 'CoreNetworkAddress') as core_network_address,
                  json_extract_path_text(Properties, 'BgpOptions') as bgp_options,
                  json_extract_path_text(Properties, 'InsideCidrBlocks') as inside_cidr_blocks,
                  json_extract_path_text(Properties, 'CoreNetworkId') as core_network_id,
                  json_extract_path_text(Properties, 'ConnectAttachmentId') as connect_attachment_id,
                  json_extract_path_text(Properties, 'ConnectPeerId') as connect_peer_id,
                  json_extract_path_text(Properties, 'EdgeLocation') as edge_location,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'Configuration') as configuration,
                  json_extract_path_text(Properties, 'SubnetArn') as subnet_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::ConnectPeer'
                  AND data__Identifier = '<ConnectPeerId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PeerAddress') as peer_address,
                    json_extract_path_text(detail.Properties, 'CoreNetworkAddress') as core_network_address,
                    json_extract_path_text(detail.Properties, 'BgpOptions') as bgp_options,
                    json_extract_path_text(detail.Properties, 'InsideCidrBlocks') as inside_cidr_blocks,
                    json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                    json_extract_path_text(detail.Properties, 'ConnectAttachmentId') as connect_attachment_id,
                    json_extract_path_text(detail.Properties, 'ConnectPeerId') as connect_peer_id,
                    json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'Configuration') as configuration,
                    json_extract_path_text(detail.Properties, 'SubnetArn') as subnet_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::ConnectPeer'
                    AND detail.data__TypeName = 'AWS::NetworkManager::ConnectPeer'
                    AND listing.region = 'us-east-1'
    connect_peers_list_only:
      name: connect_peers_list_only
      id: aws.networkmanager.connect_peers_list_only
      x-cfn-schema-name: ConnectPeer
      x-cfn-type-name: AWS::NetworkManager::ConnectPeer
      x-identifiers:
        - ConnectPeerId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConnectPeerId') as connect_peer_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::ConnectPeer'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ConnectPeerId') as connect_peer_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::ConnectPeer'
                AND region = 'us-east-1'
    connect_peer_tags:
      name: connect_peer_tags
      id: aws.networkmanager.connect_peer_tags
      x-cfn-schema-name: ConnectPeer
      x-cfn-type-name: AWS::NetworkManager::ConnectPeer
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.PeerAddress') as peer_address,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkAddress') as core_network_address,
              JSON_EXTRACT(detail.Properties, '$.BgpOptions') as bgp_options,
              JSON_EXTRACT(detail.Properties, '$.InsideCidrBlocks') as inside_cidr_blocks,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(detail.Properties, '$.ConnectAttachmentId') as connect_attachment_id,
              JSON_EXTRACT(detail.Properties, '$.ConnectPeerId') as connect_peer_id,
              JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(detail.Properties, '$.SubnetArn') as subnet_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::ConnectPeer'
              AND detail.data__TypeName = 'AWS::NetworkManager::ConnectPeer'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'PeerAddress') as peer_address,
                json_extract_path_text(detail.Properties, 'CoreNetworkAddress') as core_network_address,
                json_extract_path_text(detail.Properties, 'BgpOptions') as bgp_options,
                json_extract_path_text(detail.Properties, 'InsideCidrBlocks') as inside_cidr_blocks,
                json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                json_extract_path_text(detail.Properties, 'ConnectAttachmentId') as connect_attachment_id,
                json_extract_path_text(detail.Properties, 'ConnectPeerId') as connect_peer_id,
                json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'Configuration') as configuration,
                json_extract_path_text(detail.Properties, 'SubnetArn') as subnet_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::ConnectPeer'
                AND detail.data__TypeName = 'AWS::NetworkManager::ConnectPeer'
                AND listing.region = 'us-east-1'
    core_networks:
      name: core_networks
      id: aws.networkmanager.core_networks
      x-cfn-schema-name: CoreNetwork
      x-cfn-type-name: AWS::NetworkManager::CoreNetwork
      x-identifiers:
        - CoreNetworkId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__CoreNetwork&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::CoreNetwork"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::CoreNetwork"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::CoreNetwork"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/core_networks/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/core_networks/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/core_networks/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Segments') as segments,
              JSON_EXTRACT(Properties, '$.NetworkFunctionGroups') as network_function_groups,
              JSON_EXTRACT(Properties, '$.Edges') as edges,
              JSON_EXTRACT(Properties, '$.OwnerAccount') as owner_account,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::CoreNetwork'
              AND data__Identifier = '<CoreNetworkId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.GlobalNetworkId') as global_network_id,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
                JSON_EXTRACT(detail.Properties, '$.PolicyDocument') as policy_document,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Segments') as segments,
                JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroups') as network_function_groups,
                JSON_EXTRACT(detail.Properties, '$.Edges') as edges,
                JSON_EXTRACT(detail.Properties, '$.OwnerAccount') as owner_account,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::CoreNetwork'
                AND detail.data__TypeName = 'AWS::NetworkManager::CoreNetwork'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                  json_extract_path_text(Properties, 'CoreNetworkId') as core_network_id,
                  json_extract_path_text(Properties, 'CoreNetworkArn') as core_network_arn,
                  json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Segments') as segments,
                  json_extract_path_text(Properties, 'NetworkFunctionGroups') as network_function_groups,
                  json_extract_path_text(Properties, 'Edges') as edges,
                  json_extract_path_text(Properties, 'OwnerAccount') as owner_account,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::CoreNetwork'
                  AND data__Identifier = '<CoreNetworkId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'GlobalNetworkId') as global_network_id,
                    json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                    json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                    json_extract_path_text(detail.Properties, 'PolicyDocument') as policy_document,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Segments') as segments,
                    json_extract_path_text(detail.Properties, 'NetworkFunctionGroups') as network_function_groups,
                    json_extract_path_text(detail.Properties, 'Edges') as edges,
                    json_extract_path_text(detail.Properties, 'OwnerAccount') as owner_account,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::CoreNetwork'
                    AND detail.data__TypeName = 'AWS::NetworkManager::CoreNetwork'
                    AND listing.region = 'us-east-1'
    core_networks_list_only:
      name: core_networks_list_only
      id: aws.networkmanager.core_networks_list_only
      x-cfn-schema-name: CoreNetwork
      x-cfn-type-name: AWS::NetworkManager::CoreNetwork
      x-identifiers:
        - CoreNetworkId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CoreNetworkId') as core_network_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::CoreNetwork'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CoreNetworkId') as core_network_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::CoreNetwork'
                AND region = 'us-east-1'
    core_network_tags:
      name: core_network_tags
      id: aws.networkmanager.core_network_tags
      x-cfn-schema-name: CoreNetwork
      x-cfn-type-name: AWS::NetworkManager::CoreNetwork
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(detail.Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.Segments') as segments,
              JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroups') as network_function_groups,
              JSON_EXTRACT(detail.Properties, '$.Edges') as edges,
              JSON_EXTRACT(detail.Properties, '$.OwnerAccount') as owner_account
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::CoreNetwork'
              AND detail.data__TypeName = 'AWS::NetworkManager::CoreNetwork'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'GlobalNetworkId') as global_network_id,
                json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                json_extract_path_text(detail.Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'Segments') as segments,
                json_extract_path_text(detail.Properties, 'NetworkFunctionGroups') as network_function_groups,
                json_extract_path_text(detail.Properties, 'Edges') as edges,
                json_extract_path_text(detail.Properties, 'OwnerAccount') as owner_account
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::CoreNetwork'
                AND detail.data__TypeName = 'AWS::NetworkManager::CoreNetwork'
                AND listing.region = 'us-east-1'
    customer_gateway_associations:
      name: customer_gateway_associations
      id: aws.networkmanager.customer_gateway_associations
      x-cfn-schema-name: CustomerGatewayAssociation
      x-cfn-type-name: AWS::NetworkManager::CustomerGatewayAssociation
      x-identifiers:
        - GlobalNetworkId
        - CustomerGatewayArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__CustomerGatewayAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::CustomerGatewayAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::CustomerGatewayAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/customer_gateway_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/customer_gateway_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.CustomerGatewayArn') as customer_gateway_arn,
              JSON_EXTRACT(Properties, '$.DeviceId') as device_id,
              JSON_EXTRACT(Properties, '$.LinkId') as link_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::CustomerGatewayAssociation'
              AND data__Identifier = '<GlobalNetworkId>|<CustomerGatewayArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.GlobalNetworkId') as global_network_id,
                JSON_EXTRACT(detail.Properties, '$.CustomerGatewayArn') as customer_gateway_arn,
                JSON_EXTRACT(detail.Properties, '$.DeviceId') as device_id,
                JSON_EXTRACT(detail.Properties, '$.LinkId') as link_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::CustomerGatewayAssociation'
                AND detail.data__TypeName = 'AWS::NetworkManager::CustomerGatewayAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                  json_extract_path_text(Properties, 'CustomerGatewayArn') as customer_gateway_arn,
                  json_extract_path_text(Properties, 'DeviceId') as device_id,
                  json_extract_path_text(Properties, 'LinkId') as link_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::CustomerGatewayAssociation'
                  AND data__Identifier = '<GlobalNetworkId>|<CustomerGatewayArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'GlobalNetworkId') as global_network_id,
                    json_extract_path_text(detail.Properties, 'CustomerGatewayArn') as customer_gateway_arn,
                    json_extract_path_text(detail.Properties, 'DeviceId') as device_id,
                    json_extract_path_text(detail.Properties, 'LinkId') as link_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::CustomerGatewayAssociation'
                    AND detail.data__TypeName = 'AWS::NetworkManager::CustomerGatewayAssociation'
                    AND listing.region = 'us-east-1'
    customer_gateway_associations_list_only:
      name: customer_gateway_associations_list_only
      id: aws.networkmanager.customer_gateway_associations_list_only
      x-cfn-schema-name: CustomerGatewayAssociation
      x-cfn-type-name: AWS::NetworkManager::CustomerGatewayAssociation
      x-identifiers:
        - GlobalNetworkId
        - CustomerGatewayArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.CustomerGatewayArn') as customer_gateway_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::CustomerGatewayAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                json_extract_path_text(Properties, 'CustomerGatewayArn') as customer_gateway_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::CustomerGatewayAssociation'
                AND region = 'us-east-1'
    devices:
      name: devices
      id: aws.networkmanager.devices
      x-cfn-schema-name: Device
      x-cfn-type-name: AWS::NetworkManager::Device
      x-identifiers:
        - GlobalNetworkId
        - DeviceId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Device&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::Device"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::Device"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::Device"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/devices/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/devices/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/devices/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DeviceArn') as device_arn,
              JSON_EXTRACT(Properties, '$.DeviceId') as device_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.AWSLocation') as aws_location,
              JSON_EXTRACT(Properties, '$.Location') as location,
              JSON_EXTRACT(Properties, '$.Model') as model,
              JSON_EXTRACT(Properties, '$.SerialNumber') as serial_number,
              JSON_EXTRACT(Properties, '$.SiteId') as site_id,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Vendor') as vendor,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.State') as state
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::Device'
              AND data__Identifier = '<GlobalNetworkId>|<DeviceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DeviceArn') as device_arn,
                JSON_EXTRACT(detail.Properties, '$.DeviceId') as device_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.GlobalNetworkId') as global_network_id,
                JSON_EXTRACT(detail.Properties, '$.AWSLocation') as aws_location,
                JSON_EXTRACT(detail.Properties, '$.Location') as location,
                JSON_EXTRACT(detail.Properties, '$.Model') as model,
                JSON_EXTRACT(detail.Properties, '$.SerialNumber') as serial_number,
                JSON_EXTRACT(detail.Properties, '$.SiteId') as site_id,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.Vendor') as vendor,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::Device'
                AND detail.data__TypeName = 'AWS::NetworkManager::Device'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DeviceArn') as device_arn,
                  json_extract_path_text(Properties, 'DeviceId') as device_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                  json_extract_path_text(Properties, 'AWSLocation') as aws_location,
                  json_extract_path_text(Properties, 'Location') as location,
                  json_extract_path_text(Properties, 'Model') as model,
                  json_extract_path_text(Properties, 'SerialNumber') as serial_number,
                  json_extract_path_text(Properties, 'SiteId') as site_id,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'Vendor') as vendor,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'State') as state
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::Device'
                  AND data__Identifier = '<GlobalNetworkId>|<DeviceId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DeviceArn') as device_arn,
                    json_extract_path_text(detail.Properties, 'DeviceId') as device_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'GlobalNetworkId') as global_network_id,
                    json_extract_path_text(detail.Properties, 'AWSLocation') as aws_location,
                    json_extract_path_text(detail.Properties, 'Location') as location,
                    json_extract_path_text(detail.Properties, 'Model') as model,
                    json_extract_path_text(detail.Properties, 'SerialNumber') as serial_number,
                    json_extract_path_text(detail.Properties, 'SiteId') as site_id,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'Vendor') as vendor,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'State') as state
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::Device'
                    AND detail.data__TypeName = 'AWS::NetworkManager::Device'
                    AND listing.region = 'us-east-1'
    devices_list_only:
      name: devices_list_only
      id: aws.networkmanager.devices_list_only
      x-cfn-schema-name: Device
      x-cfn-type-name: AWS::NetworkManager::Device
      x-identifiers:
        - GlobalNetworkId
        - DeviceId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.DeviceId') as device_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::Device'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                json_extract_path_text(Properties, 'DeviceId') as device_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::Device'
                AND region = 'us-east-1'
    device_tags:
      name: device_tags
      id: aws.networkmanager.device_tags
      x-cfn-schema-name: Device
      x-cfn-type-name: AWS::NetworkManager::Device
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DeviceArn') as device_arn,
              JSON_EXTRACT(detail.Properties, '$.DeviceId') as device_id,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(detail.Properties, '$.AWSLocation') as aws_location,
              JSON_EXTRACT(detail.Properties, '$.Location') as location,
              JSON_EXTRACT(detail.Properties, '$.Model') as model,
              JSON_EXTRACT(detail.Properties, '$.SerialNumber') as serial_number,
              JSON_EXTRACT(detail.Properties, '$.SiteId') as site_id,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.Vendor') as vendor,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.State') as state
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::Device'
              AND detail.data__TypeName = 'AWS::NetworkManager::Device'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DeviceArn') as device_arn,
                json_extract_path_text(detail.Properties, 'DeviceId') as device_id,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'GlobalNetworkId') as global_network_id,
                json_extract_path_text(detail.Properties, 'AWSLocation') as aws_location,
                json_extract_path_text(detail.Properties, 'Location') as location,
                json_extract_path_text(detail.Properties, 'Model') as model,
                json_extract_path_text(detail.Properties, 'SerialNumber') as serial_number,
                json_extract_path_text(detail.Properties, 'SiteId') as site_id,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'Vendor') as vendor,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::Device'
                AND detail.data__TypeName = 'AWS::NetworkManager::Device'
                AND listing.region = 'us-east-1'
    direct_connect_gateway_attachments:
      name: direct_connect_gateway_attachments
      id: aws.networkmanager.direct_connect_gateway_attachments
      x-cfn-schema-name: DirectConnectGatewayAttachment
      x-cfn-type-name: AWS::NetworkManager::DirectConnectGatewayAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DirectConnectGatewayAttachment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::DirectConnectGatewayAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::DirectConnectGatewayAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::DirectConnectGatewayAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/direct_connect_gateway_attachments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/direct_connect_gateway_attachments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/direct_connect_gateway_attachments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.EdgeLocations') as edge_locations,
              JSON_EXTRACT(Properties, '$.DirectConnectGatewayArn') as direct_connect_gateway_arn,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
              JSON_EXTRACT(Properties, '$.SegmentName') as segment_name,
              JSON_EXTRACT(Properties, '$.ProposedSegmentChange') as proposed_segment_change,
              JSON_EXTRACT(Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
              JSON_EXTRACT(Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
              AND data__Identifier = '<AttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentId') as attachment_id,
                JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
                JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.EdgeLocations') as edge_locations,
                JSON_EXTRACT(detail.Properties, '$.DirectConnectGatewayArn') as direct_connect_gateway_arn,
                JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                JSON_EXTRACT(detail.Properties, '$.SegmentName') as segment_name,
                JSON_EXTRACT(detail.Properties, '$.ProposedSegmentChange') as proposed_segment_change,
                JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
                JSON_EXTRACT(detail.Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
                AND detail.data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CoreNetworkId') as core_network_id,
                  json_extract_path_text(Properties, 'CoreNetworkArn') as core_network_arn,
                  json_extract_path_text(Properties, 'AttachmentId') as attachment_id,
                  json_extract_path_text(Properties, 'OwnerAccountId') as owner_account_id,
                  json_extract_path_text(Properties, 'AttachmentType') as attachment_type,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'EdgeLocations') as edge_locations,
                  json_extract_path_text(Properties, 'DirectConnectGatewayArn') as direct_connect_gateway_arn,
                  json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                  json_extract_path_text(Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                  json_extract_path_text(Properties, 'SegmentName') as segment_name,
                  json_extract_path_text(Properties, 'ProposedSegmentChange') as proposed_segment_change,
                  json_extract_path_text(Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                  json_extract_path_text(Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'UpdatedAt') as updated_at
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
                  AND data__Identifier = '<AttachmentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                    json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentId') as attachment_id,
                    json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                    json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'EdgeLocations') as edge_locations,
                    json_extract_path_text(detail.Properties, 'DirectConnectGatewayArn') as direct_connect_gateway_arn,
                    json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                    json_extract_path_text(detail.Properties, 'SegmentName') as segment_name,
                    json_extract_path_text(detail.Properties, 'ProposedSegmentChange') as proposed_segment_change,
                    json_extract_path_text(detail.Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                    json_extract_path_text(detail.Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
                    AND detail.data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
                    AND listing.region = 'us-east-1'
    direct_connect_gateway_attachments_list_only:
      name: direct_connect_gateway_attachments_list_only
      id: aws.networkmanager.direct_connect_gateway_attachments_list_only
      x-cfn-schema-name: DirectConnectGatewayAttachment
      x-cfn-type-name: AWS::NetworkManager::DirectConnectGatewayAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AttachmentId') as attachment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
                AND region = 'us-east-1'
    direct_connect_gateway_attachment_tags:
      name: direct_connect_gateway_attachment_tags
      id: aws.networkmanager.direct_connect_gateway_attachment_tags
      x-cfn-schema-name: DirectConnectGatewayAttachment
      x-cfn-type-name: AWS::NetworkManager::DirectConnectGatewayAttachment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(detail.Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.EdgeLocations') as edge_locations,
              JSON_EXTRACT(detail.Properties, '$.DirectConnectGatewayArn') as direct_connect_gateway_arn,
              JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(detail.Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
              JSON_EXTRACT(detail.Properties, '$.SegmentName') as segment_name,
              JSON_EXTRACT(detail.Properties, '$.ProposedSegmentChange') as proposed_segment_change,
              JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
              JSON_EXTRACT(detail.Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
              AND detail.data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                json_extract_path_text(detail.Properties, 'AttachmentId') as attachment_id,
                json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'EdgeLocations') as edge_locations,
                json_extract_path_text(detail.Properties, 'DirectConnectGatewayArn') as direct_connect_gateway_arn,
                json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(detail.Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                json_extract_path_text(detail.Properties, 'SegmentName') as segment_name,
                json_extract_path_text(detail.Properties, 'ProposedSegmentChange') as proposed_segment_change,
                json_extract_path_text(detail.Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                json_extract_path_text(detail.Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
                AND detail.data__TypeName = 'AWS::NetworkManager::DirectConnectGatewayAttachment'
                AND listing.region = 'us-east-1'
    global_networks:
      name: global_networks
      id: aws.networkmanager.global_networks
      x-cfn-schema-name: GlobalNetwork
      x-cfn-type-name: AWS::NetworkManager::GlobalNetwork
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__GlobalNetwork&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::GlobalNetwork"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::GlobalNetwork"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::GlobalNetwork"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/global_networks/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/global_networks/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/global_networks/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.State') as state
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
                AND detail.data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'State') as state
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'State') as state
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
                    AND detail.data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
                    AND listing.region = 'us-east-1'
    global_networks_list_only:
      name: global_networks_list_only
      id: aws.networkmanager.global_networks_list_only
      x-cfn-schema-name: GlobalNetwork
      x-cfn-type-name: AWS::NetworkManager::GlobalNetwork
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
                AND region = 'us-east-1'
    global_network_tags:
      name: global_network_tags
      id: aws.networkmanager.global_network_tags
      x-cfn-schema-name: GlobalNetwork
      x-cfn-type-name: AWS::NetworkManager::GlobalNetwork
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.State') as state
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
              AND detail.data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
                AND detail.data__TypeName = 'AWS::NetworkManager::GlobalNetwork'
                AND listing.region = 'us-east-1'
    links:
      name: links
      id: aws.networkmanager.links
      x-cfn-schema-name: Link
      x-cfn-type-name: AWS::NetworkManager::Link
      x-identifiers:
        - GlobalNetworkId
        - LinkId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Link&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::Link"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::Link"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::Link"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/links/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/links/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/links/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LinkArn') as link_arn,
              JSON_EXTRACT(Properties, '$.LinkId') as link_id,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.SiteId') as site_id,
              JSON_EXTRACT(Properties, '$.Bandwidth') as bandwidth,
              JSON_EXTRACT(Properties, '$.Provider') as provider,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.State') as state
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::Link'
              AND data__Identifier = '<GlobalNetworkId>|<LinkId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.LinkArn') as link_arn,
                JSON_EXTRACT(detail.Properties, '$.LinkId') as link_id,
                JSON_EXTRACT(detail.Properties, '$.GlobalNetworkId') as global_network_id,
                JSON_EXTRACT(detail.Properties, '$.SiteId') as site_id,
                JSON_EXTRACT(detail.Properties, '$.Bandwidth') as bandwidth,
                JSON_EXTRACT(detail.Properties, '$.Provider') as provider,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::Link'
                AND detail.data__TypeName = 'AWS::NetworkManager::Link'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'LinkArn') as link_arn,
                  json_extract_path_text(Properties, 'LinkId') as link_id,
                  json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                  json_extract_path_text(Properties, 'SiteId') as site_id,
                  json_extract_path_text(Properties, 'Bandwidth') as bandwidth,
                  json_extract_path_text(Properties, 'Provider') as provider,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'State') as state
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::Link'
                  AND data__Identifier = '<GlobalNetworkId>|<LinkId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'LinkArn') as link_arn,
                    json_extract_path_text(detail.Properties, 'LinkId') as link_id,
                    json_extract_path_text(detail.Properties, 'GlobalNetworkId') as global_network_id,
                    json_extract_path_text(detail.Properties, 'SiteId') as site_id,
                    json_extract_path_text(detail.Properties, 'Bandwidth') as bandwidth,
                    json_extract_path_text(detail.Properties, 'Provider') as provider,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'State') as state
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::Link'
                    AND detail.data__TypeName = 'AWS::NetworkManager::Link'
                    AND listing.region = 'us-east-1'
    links_list_only:
      name: links_list_only
      id: aws.networkmanager.links_list_only
      x-cfn-schema-name: Link
      x-cfn-type-name: AWS::NetworkManager::Link
      x-identifiers:
        - GlobalNetworkId
        - LinkId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.LinkId') as link_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::Link'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                json_extract_path_text(Properties, 'LinkId') as link_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::Link'
                AND region = 'us-east-1'
    link_tags:
      name: link_tags
      id: aws.networkmanager.link_tags
      x-cfn-schema-name: Link
      x-cfn-type-name: AWS::NetworkManager::Link
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.LinkArn') as link_arn,
              JSON_EXTRACT(detail.Properties, '$.LinkId') as link_id,
              JSON_EXTRACT(detail.Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(detail.Properties, '$.SiteId') as site_id,
              JSON_EXTRACT(detail.Properties, '$.Bandwidth') as bandwidth,
              JSON_EXTRACT(detail.Properties, '$.Provider') as provider,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.State') as state
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::Link'
              AND detail.data__TypeName = 'AWS::NetworkManager::Link'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'LinkArn') as link_arn,
                json_extract_path_text(detail.Properties, 'LinkId') as link_id,
                json_extract_path_text(detail.Properties, 'GlobalNetworkId') as global_network_id,
                json_extract_path_text(detail.Properties, 'SiteId') as site_id,
                json_extract_path_text(detail.Properties, 'Bandwidth') as bandwidth,
                json_extract_path_text(detail.Properties, 'Provider') as provider,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::Link'
                AND detail.data__TypeName = 'AWS::NetworkManager::Link'
                AND listing.region = 'us-east-1'
    link_associations:
      name: link_associations
      id: aws.networkmanager.link_associations
      x-cfn-schema-name: LinkAssociation
      x-cfn-type-name: AWS::NetworkManager::LinkAssociation
      x-identifiers:
        - GlobalNetworkId
        - DeviceId
        - LinkId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LinkAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::LinkAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::LinkAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/link_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/link_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.DeviceId') as device_id,
              JSON_EXTRACT(Properties, '$.LinkId') as link_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::LinkAssociation'
              AND data__Identifier = '<GlobalNetworkId>|<DeviceId>|<LinkId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.GlobalNetworkId') as global_network_id,
                JSON_EXTRACT(detail.Properties, '$.DeviceId') as device_id,
                JSON_EXTRACT(detail.Properties, '$.LinkId') as link_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::LinkAssociation'
                AND detail.data__TypeName = 'AWS::NetworkManager::LinkAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                  json_extract_path_text(Properties, 'DeviceId') as device_id,
                  json_extract_path_text(Properties, 'LinkId') as link_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::LinkAssociation'
                  AND data__Identifier = '<GlobalNetworkId>|<DeviceId>|<LinkId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'GlobalNetworkId') as global_network_id,
                    json_extract_path_text(detail.Properties, 'DeviceId') as device_id,
                    json_extract_path_text(detail.Properties, 'LinkId') as link_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::LinkAssociation'
                    AND detail.data__TypeName = 'AWS::NetworkManager::LinkAssociation'
                    AND listing.region = 'us-east-1'
    link_associations_list_only:
      name: link_associations_list_only
      id: aws.networkmanager.link_associations_list_only
      x-cfn-schema-name: LinkAssociation
      x-cfn-type-name: AWS::NetworkManager::LinkAssociation
      x-identifiers:
        - GlobalNetworkId
        - DeviceId
        - LinkId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.DeviceId') as device_id,
              JSON_EXTRACT(Properties, '$.LinkId') as link_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::LinkAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                json_extract_path_text(Properties, 'DeviceId') as device_id,
                json_extract_path_text(Properties, 'LinkId') as link_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::LinkAssociation'
                AND region = 'us-east-1'
    sites:
      name: sites
      id: aws.networkmanager.sites
      x-cfn-schema-name: Site
      x-cfn-type-name: AWS::NetworkManager::Site
      x-identifiers:
        - GlobalNetworkId
        - SiteId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Site&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::Site"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::Site"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::Site"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/sites/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/sites/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/sites/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SiteArn') as site_arn,
              JSON_EXTRACT(Properties, '$.SiteId') as site_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.Location') as location,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.State') as state
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::Site'
              AND data__Identifier = '<GlobalNetworkId>|<SiteId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.SiteArn') as site_arn,
                JSON_EXTRACT(detail.Properties, '$.SiteId') as site_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.GlobalNetworkId') as global_network_id,
                JSON_EXTRACT(detail.Properties, '$.Location') as location,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::Site'
                AND detail.data__TypeName = 'AWS::NetworkManager::Site'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'SiteArn') as site_arn,
                  json_extract_path_text(Properties, 'SiteId') as site_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                  json_extract_path_text(Properties, 'Location') as location,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'State') as state
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::Site'
                  AND data__Identifier = '<GlobalNetworkId>|<SiteId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'SiteArn') as site_arn,
                    json_extract_path_text(detail.Properties, 'SiteId') as site_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'GlobalNetworkId') as global_network_id,
                    json_extract_path_text(detail.Properties, 'Location') as location,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'State') as state
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::Site'
                    AND detail.data__TypeName = 'AWS::NetworkManager::Site'
                    AND listing.region = 'us-east-1'
    sites_list_only:
      name: sites_list_only
      id: aws.networkmanager.sites_list_only
      x-cfn-schema-name: Site
      x-cfn-type-name: AWS::NetworkManager::Site
      x-identifiers:
        - GlobalNetworkId
        - SiteId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.SiteId') as site_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::Site'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                json_extract_path_text(Properties, 'SiteId') as site_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::Site'
                AND region = 'us-east-1'
    site_tags:
      name: site_tags
      id: aws.networkmanager.site_tags
      x-cfn-schema-name: Site
      x-cfn-type-name: AWS::NetworkManager::Site
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.SiteArn') as site_arn,
              JSON_EXTRACT(detail.Properties, '$.SiteId') as site_id,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(detail.Properties, '$.Location') as location,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.State') as state
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::Site'
              AND detail.data__TypeName = 'AWS::NetworkManager::Site'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'SiteArn') as site_arn,
                json_extract_path_text(detail.Properties, 'SiteId') as site_id,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'GlobalNetworkId') as global_network_id,
                json_extract_path_text(detail.Properties, 'Location') as location,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::Site'
                AND detail.data__TypeName = 'AWS::NetworkManager::Site'
                AND listing.region = 'us-east-1'
    site_to_site_vpn_attachments:
      name: site_to_site_vpn_attachments
      id: aws.networkmanager.site_to_site_vpn_attachments
      x-cfn-schema-name: SiteToSiteVpnAttachment
      x-cfn-type-name: AWS::NetworkManager::SiteToSiteVpnAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SiteToSiteVpnAttachment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::SiteToSiteVpnAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::SiteToSiteVpnAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::SiteToSiteVpnAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/site_to_site_vpn_attachments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/site_to_site_vpn_attachments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/site_to_site_vpn_attachments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
              JSON_EXTRACT(Properties, '$.SegmentName') as segment_name,
              JSON_EXTRACT(Properties, '$.ProposedSegmentChange') as proposed_segment_change,
              JSON_EXTRACT(Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
              JSON_EXTRACT(Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.VpnConnectionArn') as vpn_connection_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
              AND data__Identifier = '<AttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentId') as attachment_id,
                JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
                JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
                JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                JSON_EXTRACT(detail.Properties, '$.SegmentName') as segment_name,
                JSON_EXTRACT(detail.Properties, '$.ProposedSegmentChange') as proposed_segment_change,
                JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
                JSON_EXTRACT(detail.Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
                JSON_EXTRACT(detail.Properties, '$.VpnConnectionArn') as vpn_connection_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
                AND detail.data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CoreNetworkId') as core_network_id,
                  json_extract_path_text(Properties, 'CoreNetworkArn') as core_network_arn,
                  json_extract_path_text(Properties, 'AttachmentId') as attachment_id,
                  json_extract_path_text(Properties, 'OwnerAccountId') as owner_account_id,
                  json_extract_path_text(Properties, 'AttachmentType') as attachment_type,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'EdgeLocation') as edge_location,
                  json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                  json_extract_path_text(Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                  json_extract_path_text(Properties, 'SegmentName') as segment_name,
                  json_extract_path_text(Properties, 'ProposedSegmentChange') as proposed_segment_change,
                  json_extract_path_text(Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                  json_extract_path_text(Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                  json_extract_path_text(Properties, 'VpnConnectionArn') as vpn_connection_arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
                  AND data__Identifier = '<AttachmentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                    json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentId') as attachment_id,
                    json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                    json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                    json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                    json_extract_path_text(detail.Properties, 'SegmentName') as segment_name,
                    json_extract_path_text(detail.Properties, 'ProposedSegmentChange') as proposed_segment_change,
                    json_extract_path_text(detail.Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                    json_extract_path_text(detail.Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                    json_extract_path_text(detail.Properties, 'VpnConnectionArn') as vpn_connection_arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
                    AND detail.data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
                    AND listing.region = 'us-east-1'
    site_to_site_vpn_attachments_list_only:
      name: site_to_site_vpn_attachments_list_only
      id: aws.networkmanager.site_to_site_vpn_attachments_list_only
      x-cfn-schema-name: SiteToSiteVpnAttachment
      x-cfn-type-name: AWS::NetworkManager::SiteToSiteVpnAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AttachmentId') as attachment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
                AND region = 'us-east-1'
    site_to_site_vpn_attachment_tags:
      name: site_to_site_vpn_attachment_tags
      id: aws.networkmanager.site_to_site_vpn_attachment_tags
      x-cfn-schema-name: SiteToSiteVpnAttachment
      x-cfn-type-name: AWS::NetworkManager::SiteToSiteVpnAttachment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(detail.Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(detail.Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
              JSON_EXTRACT(detail.Properties, '$.SegmentName') as segment_name,
              JSON_EXTRACT(detail.Properties, '$.ProposedSegmentChange') as proposed_segment_change,
              JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
              JSON_EXTRACT(detail.Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(detail.Properties, '$.VpnConnectionArn') as vpn_connection_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
              AND detail.data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                json_extract_path_text(detail.Properties, 'AttachmentId') as attachment_id,
                json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(detail.Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                json_extract_path_text(detail.Properties, 'SegmentName') as segment_name,
                json_extract_path_text(detail.Properties, 'ProposedSegmentChange') as proposed_segment_change,
                json_extract_path_text(detail.Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                json_extract_path_text(detail.Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(detail.Properties, 'VpnConnectionArn') as vpn_connection_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
                AND detail.data__TypeName = 'AWS::NetworkManager::SiteToSiteVpnAttachment'
                AND listing.region = 'us-east-1'
    transit_gateway_peerings:
      name: transit_gateway_peerings
      id: aws.networkmanager.transit_gateway_peerings
      x-cfn-schema-name: TransitGatewayPeering
      x-cfn-type-name: AWS::NetworkManager::TransitGatewayPeering
      x-identifiers:
        - PeeringId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayPeering&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::TransitGatewayPeering"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::TransitGatewayPeering"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::TransitGatewayPeering"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_peerings/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_peerings/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_peerings/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(Properties, '$.TransitGatewayArn') as transit_gateway_arn,
              JSON_EXTRACT(Properties, '$.TransitGatewayPeeringAttachmentId') as transit_gateway_peering_attachment_id,
              JSON_EXTRACT(Properties, '$.PeeringId') as peering_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(Properties, '$.PeeringType') as peering_type,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
              AND data__Identifier = '<PeeringId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayArn') as transit_gateway_arn,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayPeeringAttachmentId') as transit_gateway_peering_attachment_id,
                JSON_EXTRACT(detail.Properties, '$.PeeringId') as peering_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
                JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
                JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
                JSON_EXTRACT(detail.Properties, '$.PeeringType') as peering_type,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
                AND detail.data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CoreNetworkId') as core_network_id,
                  json_extract_path_text(Properties, 'CoreNetworkArn') as core_network_arn,
                  json_extract_path_text(Properties, 'TransitGatewayArn') as transit_gateway_arn,
                  json_extract_path_text(Properties, 'TransitGatewayPeeringAttachmentId') as transit_gateway_peering_attachment_id,
                  json_extract_path_text(Properties, 'PeeringId') as peering_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'EdgeLocation') as edge_location,
                  json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                  json_extract_path_text(Properties, 'OwnerAccountId') as owner_account_id,
                  json_extract_path_text(Properties, 'PeeringType') as peering_type,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
                  AND data__Identifier = '<PeeringId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                    json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                    json_extract_path_text(detail.Properties, 'TransitGatewayArn') as transit_gateway_arn,
                    json_extract_path_text(detail.Properties, 'TransitGatewayPeeringAttachmentId') as transit_gateway_peering_attachment_id,
                    json_extract_path_text(detail.Properties, 'PeeringId') as peering_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                    json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                    json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                    json_extract_path_text(detail.Properties, 'PeeringType') as peering_type,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
                    AND detail.data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
                    AND listing.region = 'us-east-1'
    transit_gateway_peerings_list_only:
      name: transit_gateway_peerings_list_only
      id: aws.networkmanager.transit_gateway_peerings_list_only
      x-cfn-schema-name: TransitGatewayPeering
      x-cfn-type-name: AWS::NetworkManager::TransitGatewayPeering
      x-identifiers:
        - PeeringId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PeeringId') as peering_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PeeringId') as peering_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
                AND region = 'us-east-1'
    transit_gateway_peering_tags:
      name: transit_gateway_peering_tags
      id: aws.networkmanager.transit_gateway_peering_tags
      x-cfn-schema-name: TransitGatewayPeering
      x-cfn-type-name: AWS::NetworkManager::TransitGatewayPeering
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayArn') as transit_gateway_arn,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayPeeringAttachmentId') as transit_gateway_peering_attachment_id,
              JSON_EXTRACT(detail.Properties, '$.PeeringId') as peering_id,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(detail.Properties, '$.PeeringType') as peering_type,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
              AND detail.data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                json_extract_path_text(detail.Properties, 'TransitGatewayArn') as transit_gateway_arn,
                json_extract_path_text(detail.Properties, 'TransitGatewayPeeringAttachmentId') as transit_gateway_peering_attachment_id,
                json_extract_path_text(detail.Properties, 'PeeringId') as peering_id,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                json_extract_path_text(detail.Properties, 'PeeringType') as peering_type,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
                AND detail.data__TypeName = 'AWS::NetworkManager::TransitGatewayPeering'
                AND listing.region = 'us-east-1'
    transit_gateway_registrations:
      name: transit_gateway_registrations
      id: aws.networkmanager.transit_gateway_registrations
      x-cfn-schema-name: TransitGatewayRegistration
      x-cfn-type-name: AWS::NetworkManager::TransitGatewayRegistration
      x-identifiers:
        - GlobalNetworkId
        - TransitGatewayArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayRegistration&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::TransitGatewayRegistration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::TransitGatewayRegistration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_registrations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_registrations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayArn') as transit_gateway_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayRegistration'
              AND data__Identifier = '<GlobalNetworkId>|<TransitGatewayArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.GlobalNetworkId') as global_network_id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayArn') as transit_gateway_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::TransitGatewayRegistration'
                AND detail.data__TypeName = 'AWS::NetworkManager::TransitGatewayRegistration'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                  json_extract_path_text(Properties, 'TransitGatewayArn') as transit_gateway_arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayRegistration'
                  AND data__Identifier = '<GlobalNetworkId>|<TransitGatewayArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'GlobalNetworkId') as global_network_id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayArn') as transit_gateway_arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::TransitGatewayRegistration'
                    AND detail.data__TypeName = 'AWS::NetworkManager::TransitGatewayRegistration'
                    AND listing.region = 'us-east-1'
    transit_gateway_registrations_list_only:
      name: transit_gateway_registrations_list_only
      id: aws.networkmanager.transit_gateway_registrations_list_only
      x-cfn-schema-name: TransitGatewayRegistration
      x-cfn-type-name: AWS::NetworkManager::TransitGatewayRegistration
      x-identifiers:
        - GlobalNetworkId
        - TransitGatewayArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GlobalNetworkId') as global_network_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayArn') as transit_gateway_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayRegistration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GlobalNetworkId') as global_network_id,
                json_extract_path_text(Properties, 'TransitGatewayArn') as transit_gateway_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayRegistration'
                AND region = 'us-east-1'
    transit_gateway_route_table_attachments:
      name: transit_gateway_route_table_attachments
      id: aws.networkmanager.transit_gateway_route_table_attachments
      x-cfn-schema-name: TransitGatewayRouteTableAttachment
      x-cfn-type-name: AWS::NetworkManager::TransitGatewayRouteTableAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayRouteTableAttachment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::TransitGatewayRouteTableAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::TransitGatewayRouteTableAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::TransitGatewayRouteTableAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_route_table_attachments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_route_table_attachments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_route_table_attachments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PeeringId') as peering_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayRouteTableArn') as transit_gateway_route_table_arn,
              JSON_EXTRACT(Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
              JSON_EXTRACT(Properties, '$.SegmentName') as segment_name,
              JSON_EXTRACT(Properties, '$.ProposedSegmentChange') as proposed_segment_change,
              JSON_EXTRACT(Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
              JSON_EXTRACT(Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
              AND data__Identifier = '<AttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PeeringId') as peering_id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayRouteTableArn') as transit_gateway_route_table_arn,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentId') as attachment_id,
                JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
                JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
                JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                JSON_EXTRACT(detail.Properties, '$.SegmentName') as segment_name,
                JSON_EXTRACT(detail.Properties, '$.ProposedSegmentChange') as proposed_segment_change,
                JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
                JSON_EXTRACT(detail.Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
                AND detail.data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PeeringId') as peering_id,
                  json_extract_path_text(Properties, 'TransitGatewayRouteTableArn') as transit_gateway_route_table_arn,
                  json_extract_path_text(Properties, 'CoreNetworkId') as core_network_id,
                  json_extract_path_text(Properties, 'CoreNetworkArn') as core_network_arn,
                  json_extract_path_text(Properties, 'AttachmentId') as attachment_id,
                  json_extract_path_text(Properties, 'OwnerAccountId') as owner_account_id,
                  json_extract_path_text(Properties, 'AttachmentType') as attachment_type,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'EdgeLocation') as edge_location,
                  json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                  json_extract_path_text(Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                  json_extract_path_text(Properties, 'SegmentName') as segment_name,
                  json_extract_path_text(Properties, 'ProposedSegmentChange') as proposed_segment_change,
                  json_extract_path_text(Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                  json_extract_path_text(Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
                  AND data__Identifier = '<AttachmentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PeeringId') as peering_id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayRouteTableArn') as transit_gateway_route_table_arn,
                    json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                    json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentId') as attachment_id,
                    json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                    json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                    json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                    json_extract_path_text(detail.Properties, 'SegmentName') as segment_name,
                    json_extract_path_text(detail.Properties, 'ProposedSegmentChange') as proposed_segment_change,
                    json_extract_path_text(detail.Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                    json_extract_path_text(detail.Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
                    AND detail.data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
                    AND listing.region = 'us-east-1'
    transit_gateway_route_table_attachments_list_only:
      name: transit_gateway_route_table_attachments_list_only
      id: aws.networkmanager.transit_gateway_route_table_attachments_list_only
      x-cfn-schema-name: TransitGatewayRouteTableAttachment
      x-cfn-type-name: AWS::NetworkManager::TransitGatewayRouteTableAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AttachmentId') as attachment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
                AND region = 'us-east-1'
    transit_gateway_route_table_attachment_tags:
      name: transit_gateway_route_table_attachment_tags
      id: aws.networkmanager.transit_gateway_route_table_attachment_tags
      x-cfn-schema-name: TransitGatewayRouteTableAttachment
      x-cfn-type-name: AWS::NetworkManager::TransitGatewayRouteTableAttachment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.PeeringId') as peering_id,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayRouteTableArn') as transit_gateway_route_table_arn,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(detail.Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(detail.Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
              JSON_EXTRACT(detail.Properties, '$.SegmentName') as segment_name,
              JSON_EXTRACT(detail.Properties, '$.ProposedSegmentChange') as proposed_segment_change,
              JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
              JSON_EXTRACT(detail.Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
              AND detail.data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'PeeringId') as peering_id,
                json_extract_path_text(detail.Properties, 'TransitGatewayRouteTableArn') as transit_gateway_route_table_arn,
                json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                json_extract_path_text(detail.Properties, 'AttachmentId') as attachment_id,
                json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(detail.Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                json_extract_path_text(detail.Properties, 'SegmentName') as segment_name,
                json_extract_path_text(detail.Properties, 'ProposedSegmentChange') as proposed_segment_change,
                json_extract_path_text(detail.Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                json_extract_path_text(detail.Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
                AND detail.data__TypeName = 'AWS::NetworkManager::TransitGatewayRouteTableAttachment'
                AND listing.region = 'us-east-1'
    vpc_attachments:
      name: vpc_attachments
      id: aws.networkmanager.vpc_attachments
      x-cfn-schema-name: VpcAttachment
      x-cfn-type-name: AWS::NetworkManager::VpcAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VpcAttachment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::VpcAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::VpcAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::NetworkManager::VpcAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_attachments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_attachments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_attachments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(Properties, '$.VpcArn') as vpc_arn,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
              JSON_EXTRACT(Properties, '$.SegmentName') as segment_name,
              JSON_EXTRACT(Properties, '$.ProposedSegmentChange') as proposed_segment_change,
              JSON_EXTRACT(Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
              JSON_EXTRACT(Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.SubnetArns') as subnet_arns,
              JSON_EXTRACT(Properties, '$.Options') as options
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::VpcAttachment'
              AND data__Identifier = '<AttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentId') as attachment_id,
                JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
                JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
                JSON_EXTRACT(detail.Properties, '$.VpcArn') as vpc_arn,
                JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                JSON_EXTRACT(detail.Properties, '$.SegmentName') as segment_name,
                JSON_EXTRACT(detail.Properties, '$.ProposedSegmentChange') as proposed_segment_change,
                JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
                JSON_EXTRACT(detail.Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
                JSON_EXTRACT(detail.Properties, '$.SubnetArns') as subnet_arns,
                JSON_EXTRACT(detail.Properties, '$.Options') as options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::NetworkManager::VpcAttachment'
                AND detail.data__TypeName = 'AWS::NetworkManager::VpcAttachment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CoreNetworkId') as core_network_id,
                  json_extract_path_text(Properties, 'CoreNetworkArn') as core_network_arn,
                  json_extract_path_text(Properties, 'AttachmentId') as attachment_id,
                  json_extract_path_text(Properties, 'OwnerAccountId') as owner_account_id,
                  json_extract_path_text(Properties, 'AttachmentType') as attachment_type,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'EdgeLocation') as edge_location,
                  json_extract_path_text(Properties, 'VpcArn') as vpc_arn,
                  json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                  json_extract_path_text(Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                  json_extract_path_text(Properties, 'SegmentName') as segment_name,
                  json_extract_path_text(Properties, 'ProposedSegmentChange') as proposed_segment_change,
                  json_extract_path_text(Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                  json_extract_path_text(Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                  json_extract_path_text(Properties, 'SubnetArns') as subnet_arns,
                  json_extract_path_text(Properties, 'Options') as options
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NetworkManager::VpcAttachment'
                  AND data__Identifier = '<AttachmentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                    json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentId') as attachment_id,
                    json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                    json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                    json_extract_path_text(detail.Properties, 'VpcArn') as vpc_arn,
                    json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                    json_extract_path_text(detail.Properties, 'SegmentName') as segment_name,
                    json_extract_path_text(detail.Properties, 'ProposedSegmentChange') as proposed_segment_change,
                    json_extract_path_text(detail.Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                    json_extract_path_text(detail.Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                    json_extract_path_text(detail.Properties, 'SubnetArns') as subnet_arns,
                    json_extract_path_text(detail.Properties, 'Options') as options
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::NetworkManager::VpcAttachment'
                    AND detail.data__TypeName = 'AWS::NetworkManager::VpcAttachment'
                    AND listing.region = 'us-east-1'
    vpc_attachments_list_only:
      name: vpc_attachments_list_only
      id: aws.networkmanager.vpc_attachments_list_only
      x-cfn-schema-name: VpcAttachment
      x-cfn-type-name: AWS::NetworkManager::VpcAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::VpcAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AttachmentId') as attachment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NetworkManager::VpcAttachment'
                AND region = 'us-east-1'
    vpc_attachment_tags:
      name: vpc_attachment_tags
      id: aws.networkmanager.vpc_attachment_tags
      x-cfn-schema-name: VpcAttachment
      x-cfn-type-name: AWS::NetworkManager::VpcAttachment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkId') as core_network_id,
              JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(detail.Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(detail.Properties, '$.OwnerAccountId') as owner_account_id,
              JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.EdgeLocation') as edge_location,
              JSON_EXTRACT(detail.Properties, '$.VpcArn') as vpc_arn,
              JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(detail.Properties, '$.AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
              JSON_EXTRACT(detail.Properties, '$.SegmentName') as segment_name,
              JSON_EXTRACT(detail.Properties, '$.ProposedSegmentChange') as proposed_segment_change,
              JSON_EXTRACT(detail.Properties, '$.NetworkFunctionGroupName') as network_function_group_name,
              JSON_EXTRACT(detail.Properties, '$.ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(detail.Properties, '$.SubnetArns') as subnet_arns,
              JSON_EXTRACT(detail.Properties, '$.Options') as options
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::NetworkManager::VpcAttachment'
              AND detail.data__TypeName = 'AWS::NetworkManager::VpcAttachment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CoreNetworkId') as core_network_id,
                json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                json_extract_path_text(detail.Properties, 'AttachmentId') as attachment_id,
                json_extract_path_text(detail.Properties, 'OwnerAccountId') as owner_account_id,
                json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'EdgeLocation') as edge_location,
                json_extract_path_text(detail.Properties, 'VpcArn') as vpc_arn,
                json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(detail.Properties, 'AttachmentPolicyRuleNumber') as attachment_policy_rule_number,
                json_extract_path_text(detail.Properties, 'SegmentName') as segment_name,
                json_extract_path_text(detail.Properties, 'ProposedSegmentChange') as proposed_segment_change,
                json_extract_path_text(detail.Properties, 'NetworkFunctionGroupName') as network_function_group_name,
                json_extract_path_text(detail.Properties, 'ProposedNetworkFunctionGroupChange') as proposed_network_function_group_change,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(detail.Properties, 'SubnetArns') as subnet_arns,
                json_extract_path_text(detail.Properties, 'Options') as options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::NetworkManager::VpcAttachment'
                AND detail.data__TypeName = 'AWS::NetworkManager::VpcAttachment'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ConnectAttachment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateConnectAttachment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateConnectAttachmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ConnectPeer&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateConnectPeer
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateConnectPeerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__CoreNetwork&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCoreNetwork
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCoreNetworkRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__CustomerGatewayAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCustomerGatewayAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCustomerGatewayAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Device&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDevice
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DirectConnectGatewayAttachment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDirectConnectGatewayAttachment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDirectConnectGatewayAttachmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__GlobalNetwork&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateGlobalNetwork
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateGlobalNetworkRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Link&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLink
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLinkRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LinkAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLinkAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLinkAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Site&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSite
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSiteRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SiteToSiteVpnAttachment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSiteToSiteVpnAttachment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSiteToSiteVpnAttachmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayPeering&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayPeering
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayPeeringRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayRegistration&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayRegistration
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayRegistrationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayRouteTableAttachment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayRouteTableAttachment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayRouteTableAttachmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VpcAttachment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVpcAttachment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVpcAttachmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
