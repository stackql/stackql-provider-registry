openapi: 3.0.0
info:
  title: Location
  version: 1.0.0
paths: {}
components:
  schemas:
    PricingPlan:
      type: string
      enum:
        - RequestBasedUsage
    iso8601UTC:
      description: The datetime value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ss.sssZ)
      type: string
      pattern: ^([0-2]\d{3})-(0[0-9]|1[0-2])-([0-2]\d|3[01])T([01]\d|2[0-4]):([0-5]\d):([0-6]\d)((\.\d{3})?)Z$
    GeofenceCollection:
      type: object
      properties:
        CollectionArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        CollectionName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        KmsKeyId:
          type: string
          maxLength: 2048
          minLength: 1
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        PricingPlanDataSource:
          type: string
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
      required:
        - CollectionName
      x-stackql-resource-name: geofence_collection
      x-stackql-primaryIdentifier:
        - CollectionName
    MapConfiguration:
      type: object
      properties:
        Style:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
      additionalProperties: false
      required:
        - Style
    Map:
      type: object
      properties:
        Configuration:
          $ref: '#/components/schemas/MapConfiguration'
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        DataSource:
          type: string
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        MapArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        MapName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
      required:
        - MapName
        - Configuration
      x-stackql-resource-name: map
      x-stackql-primaryIdentifier:
        - MapName
    DataSourceConfiguration:
      type: object
      properties:
        IntendedUse:
          $ref: '#/components/schemas/IntendedUse'
      additionalProperties: false
    IntendedUse:
      type: string
      enum:
        - SingleUse
        - Storage
    PlaceIndex:
      type: object
      properties:
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        DataSource:
          type: string
        DataSourceConfiguration:
          $ref: '#/components/schemas/DataSourceConfiguration'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        IndexArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        IndexName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
      required:
        - IndexName
        - DataSource
      x-stackql-resource-name: place_index
      x-stackql-primaryIdentifier:
        - IndexName
    RouteCalculator:
      type: object
      properties:
        CalculatorArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        CalculatorName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        DataSource:
          type: string
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
      required:
        - CalculatorName
        - DataSource
      x-stackql-resource-name: route_calculator
      x-stackql-primaryIdentifier:
        - CalculatorName
    PositionFiltering:
      type: string
      enum:
        - TimeBased
        - DistanceBased
        - AccuracyBased
    Tracker:
      type: object
      properties:
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        KmsKeyId:
          type: string
          maxLength: 2048
          minLength: 1
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        PricingPlanDataSource:
          type: string
        PositionFiltering:
          $ref: '#/components/schemas/PositionFiltering'
        TrackerArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        TrackerName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
      required:
        - TrackerName
      x-stackql-resource-name: tracker
      x-stackql-primaryIdentifier:
        - TrackerName
    TrackerConsumer:
      type: object
      properties:
        ConsumerArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        TrackerName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
      required:
        - ConsumerArn
        - TrackerName
      x-stackql-resource-name: tracker_consumer
      x-stackql-primaryIdentifier:
        - TrackerName
        - ConsumerArn
  x-stackQL-resources:
    geofence_collections:
      name: geofence_collections
      id: aws.location.geofence_collections
      x-cfn-schema-name: GeofenceCollection
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CollectionName') as collection_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::GeofenceCollection'
    geofence_collection:
      name: geofence_collection
      id: aws.location.geofence_collection
      x-cfn-schema-name: GeofenceCollection
      x-type: get
      x-identifiers:
        - CollectionName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CollectionArn') as collection_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CollectionName') as collection_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.PricingPlanDataSource') as pricing_plan_data_source
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::GeofenceCollection'
    maps:
      name: maps
      id: aws.location.maps
      x-cfn-schema-name: Map
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MapName') as map_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Map'
    map:
      name: map
      id: aws.location.map
      x-cfn-schema-name: Map
      x-type: get
      x-identifiers:
        - MapName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Configuration.Style') as configuration_style,
              JSON_EXTRACT(Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.MapArn') as map_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.MapName') as map_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::Map'
    place_indices:
      name: place_indices
      id: aws.location.place_indices
      x-cfn-schema-name: PlaceIndex
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IndexName') as index_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::PlaceIndex'
    place_index:
      name: place_index
      id: aws.location.place_index
      x-cfn-schema-name: PlaceIndex
      x-type: get
      x-identifiers:
        - IndexName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(Properties, '$.DataSourceConfiguration.IntendedUse') as data_source_configuration_intended_use,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.IndexArn') as index_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.IndexName') as index_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::PlaceIndex'
    route_calculators:
      name: route_calculators
      id: aws.location.route_calculators
      x-cfn-schema-name: RouteCalculator
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CalculatorName') as calculator_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::RouteCalculator'
    route_calculator:
      name: route_calculator
      id: aws.location.route_calculator
      x-cfn-schema-name: RouteCalculator
      x-type: get
      x-identifiers:
        - CalculatorName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CalculatorArn') as calculator_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CalculatorName') as calculator_name,
              JSON_EXTRACT(Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(Properties, '$.Description') as description
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::RouteCalculator'
    trackers:
      name: trackers
      id: aws.location.trackers
      x-cfn-schema-name: Tracker
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Tracker'
    tracker:
      name: tracker
      id: aws.location.tracker
      x-cfn-schema-name: Tracker
      x-type: get
      x-identifiers:
        - TrackerName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.PricingPlanDataSource') as pricing_plan_data_source,
              JSON_EXTRACT(Properties, '$.TrackerArn') as tracker_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::Tracker'
    tracker_consumers:
      name: tracker_consumers
      id: aws.location.tracker_consumers
      x-cfn-schema-name: TrackerConsumer
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name,
              JSON_EXTRACT(Properties, '$.ConsumerArn') as consumer_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::TrackerConsumer'
    tracker_consumer:
      name: tracker_consumer
      id: aws.location.tracker_consumer
      x-cfn-schema-name: TrackerConsumer
      x-type: get
      x-identifiers:
        - TrackerName
        - ConsumerArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConsumerArn') as consumer_arn,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::TrackerConsumer'
