openapi: 3.0.0
info:
  title: Location
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    ApiKeyRestrictions:
      type: object
      properties:
        AllowActions:
          type: array
          items:
            type: string
            maxLength: 200
            minLength: 5
            pattern: ^(geo|geo-routes|geo-places|geo-maps):\w*\*?$
          maxItems: 24
          minItems: 1
          x-insertionOrder: false
        AllowResources:
          type: array
          items:
            type: string
            maxLength: 1600
            pattern: (^arn(:[a-z0-9]+([.-][a-z0-9]+)*):geo(:([a-z0-9]+([.-][a-z0-9]+)*))(:[0-9]+):((\*)|([-a-z]+[/][*-._\w]+))$)|(^arn(:[a-z0-9]+([.-][a-z0-9]+)*):(geo-routes|geo-places|geo-maps)(:((\*)|([a-z0-9]+([.-][a-z0-9]+)*)))::((provider[\/][*-._\w]+))$)
          maxItems: 8
          minItems: 1
          x-insertionOrder: false
        AllowReferers:
          type: array
          items:
            type: string
            maxLength: 253
            pattern: ^([$\-._+!*\x{60}(),;/?:@=&\w]|%([0-9a-fA-F?]{2}|[0-9a-fA-F?]?[*]))+$
          maxItems: 5
          minItems: 1
          x-insertionOrder: false
      required:
        - AllowActions
        - AllowResources
      additionalProperties: false
    TagMap:
      type: object
      maxProperties: 50
      x-patternProperties:
        ^([\p{L}\p{Z}\p{N}_.,:/=+\-@]*)$:
          type: string
          maxLength: 256
          minLength: 0
          pattern: ^([\p{L}\p{Z}\p{N}_.,:/=+\-@]*)$
      additionalProperties: false
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z+-=._:/]+$
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
          pattern: ^[A-Za-z0-9 _=@:.+-/]*$
      required:
        - Key
        - Value
      additionalProperties: false
    iso8601UTC:
      description: The datetime value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ss.sssZ)
      type: string
      pattern: ^([0-2]\d{3})-(0[0-9]|1[0-2])-([0-2]\d|3[01])T([01]\d|2[0-4]):([0-5]\d):([0-6]\d)((\.\d{3})?)Z$
    APIKey:
      type: object
      properties:
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        ExpireTime:
          $ref: '#/components/schemas/iso8601UTC'
        ForceUpdate:
          type: boolean
        KeyArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        KeyName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        NoExpiry:
          type: boolean
        Restrictions:
          $ref: '#/components/schemas/ApiKeyRestrictions'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        ForceDelete:
          type: boolean
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - KeyName
        - Restrictions
      x-stackql-resource-name: api_key
      description: Definition of AWS::Location::APIKey Resource Type
      x-type-name: AWS::Location::APIKey
      x-stackql-primary-identifier:
        - KeyName
      x-create-only-properties:
        - KeyName
      x-write-only-properties:
        - ForceUpdate
        - ForceDelete
        - NoExpiry
      x-read-only-properties:
        - CreateTime
        - Arn
        - KeyArn
        - UpdateTime
      x-required-properties:
        - KeyName
        - Restrictions
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - geo:TagResource
          - geo:UntagResource
      x-required-permissions:
        create:
          - geo:CreateKey
          - geo:DescribeKey
          - geo:TagResource
          - geo:UntagResource
          - geo:GetMapTile
          - geo:GetMapStyleDescriptor
          - geo:GetMapSprites
          - geo:GetMapGlyphs
          - geo:SearchPlaceIndexForText
          - geo:SearchPlaceIndexForPosition
          - geo:SearchPlaceIndexForSuggestions
          - geo:GetPlace
          - geo:CalculateRoute
          - geo:CalculateRouteMatrix
          - geo-maps:GetTile
          - geo-maps:GetStaticMap
          - geo-places:Autocomplete
          - geo-places:Geocode
          - geo-places:GetPlace
          - geo-places:ReverseGeocode
          - geo-places:SearchNearby
          - geo-places:SearchText
          - geo-places:Suggest
          - geo-routes:CalculateIsolines
          - geo-routes:CalculateRouteMatrix
          - geo-routes:CalculateRoutes
          - geo-routes:OptimizeWaypoints
          - geo-routes:SnapToRoads
        read:
          - geo:DescribeKey
        update:
          - geo:CreateKey
          - geo:DescribeKey
          - geo:TagResource
          - geo:UntagResource
          - geo:GetMapTile
          - geo:GetMapStyleDescriptor
          - geo:GetMapSprites
          - geo:GetMapGlyphs
          - geo:SearchPlaceIndexForText
          - geo:SearchPlaceIndexForPosition
          - geo:SearchPlaceIndexForSuggestions
          - geo:GetPlace
          - geo:CalculateRoute
          - geo:CalculateRouteMatrix
          - geo-maps:GetTile
          - geo-maps:GetStaticMap
          - geo-places:Autocomplete
          - geo-places:Geocode
          - geo-places:GetPlace
          - geo-places:ReverseGeocode
          - geo-places:SearchNearby
          - geo-places:SearchText
          - geo-places:Suggest
          - geo-routes:CalculateIsolines
          - geo-routes:CalculateRouteMatrix
          - geo-routes:CalculateRoutes
          - geo-routes:OptimizeWaypoints
          - geo-routes:SnapToRoads
          - geo:UpdateKey
        delete:
          - geo:DeleteKey
          - geo:DescribeKey
        list:
          - geo:ListKeys
    PricingPlan:
      type: string
      enum:
        - RequestBasedUsage
    GeofenceCollection:
      type: object
      properties:
        CollectionArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        CollectionName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        KmsKeyId:
          type: string
          maxLength: 2048
          minLength: 1
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        PricingPlanDataSource:
          type: string
          description: 'This shape is deprecated since 2022-02-01: Deprecated. No longer allowed.'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - CollectionName
      x-stackql-resource-name: geofence_collection
      description: Definition of AWS::Location::GeofenceCollection Resource Type
      x-type-name: AWS::Location::GeofenceCollection
      x-stackql-primary-identifier:
        - CollectionName
      x-create-only-properties:
        - CollectionName
        - KmsKeyId
      x-read-only-properties:
        - CollectionArn
        - Arn
        - CreateTime
        - UpdateTime
      x-required-properties:
        - CollectionName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - geo:TagResource
          - geo:UntagResource
      x-required-permissions:
        create:
          - geo:CreateGeofenceCollection
          - geo:DescribeGeofenceCollection
          - geo:TagResource
          - geo:UntagResource
          - kms:DescribeKey
          - kms:CreateGrant
        read:
          - geo:DescribeGeofenceCollection
          - kms:DescribeKey
        update:
          - geo:CreateGeofenceCollection
          - geo:DescribeGeofenceCollection
          - geo:TagResource
          - geo:UntagResource
          - kms:DescribeKey
          - kms:CreateGrant
          - geo:UpdateGeofenceCollection
        delete:
          - geo:DeleteGeofenceCollection
          - geo:DescribeGeofenceCollection
        list:
          - geo:ListGeofenceCollections
    MapConfiguration:
      type: object
      properties:
        Style:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        PoliticalView:
          type: string
          maxLength: 3
          minLength: 3
          pattern: ^[A-Z]{3}$
        CustomLayers:
          type: array
          items:
            type: string
            maxLength: 100
            minLength: 1
            pattern: ^[-._\w]+$
          maxItems: 10
      required:
        - Style
      additionalProperties: false
    Map:
      type: object
      properties:
        Configuration:
          $ref: '#/components/schemas/MapConfiguration'
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        MapArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*):geo(:([a-z0-9]+([.-][a-z0-9]+)*))(:[0-9]+):((\*)|([-a-z]+[/][*-._\w]+))$
        MapName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - Configuration
        - MapName
      x-stackql-resource-name: map
      description: Definition of AWS::Location::Map Resource Type
      x-type-name: AWS::Location::Map
      x-stackql-primary-identifier:
        - MapName
      x-create-only-properties:
        - Configuration
        - MapName
      x-read-only-properties:
        - CreateTime
        - Arn
        - MapArn
        - UpdateTime
      x-required-properties:
        - Configuration
        - MapName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - geo:TagResource
          - geo:UntagResource
      x-required-permissions:
        create:
          - geo:CreateMap
          - geo:DescribeMap
          - geo:TagResource
          - geo:UntagResource
        read:
          - geo:DescribeMap
        update:
          - geo:CreateMap
          - geo:DescribeMap
          - geo:TagResource
          - geo:UntagResource
          - geo:UpdateMap
        delete:
          - geo:DeleteMap
          - geo:DescribeMap
        list:
          - geo:ListMaps
    DataSourceConfiguration:
      type: object
      properties:
        IntendedUse:
          $ref: '#/components/schemas/IntendedUse'
      additionalProperties: false
    IntendedUse:
      type: string
      enum:
        - SingleUse
        - Storage
    PlaceIndex:
      type: object
      properties:
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        DataSource:
          type: string
        DataSourceConfiguration:
          $ref: '#/components/schemas/DataSourceConfiguration'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        IndexArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*):geo(:([a-z0-9]+([.-][a-z0-9]+)*))(:[0-9]+):((\*)|([-a-z]+[/][*-._\w]+))$
        IndexName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - DataSource
        - IndexName
      x-stackql-resource-name: place_index
      description: Definition of AWS::Location::PlaceIndex Resource Type
      x-type-name: AWS::Location::PlaceIndex
      x-stackql-primary-identifier:
        - IndexName
      x-create-only-properties:
        - DataSource
        - IndexName
      x-read-only-properties:
        - CreateTime
        - Arn
        - IndexArn
        - UpdateTime
      x-required-properties:
        - DataSource
        - IndexName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - geo:TagResource
          - geo:UntagResource
      x-required-permissions:
        create:
          - geo:CreatePlaceIndex
          - geo:DescribePlaceIndex
          - geo:TagResource
          - geo:UntagResource
        read:
          - geo:DescribePlaceIndex
        update:
          - geo:CreatePlaceIndex
          - geo:DescribePlaceIndex
          - geo:TagResource
          - geo:UntagResource
          - geo:UpdatePlaceIndex
        delete:
          - geo:DeletePlaceIndex
          - geo:DescribePlaceIndex
        list:
          - geo:ListPlaceIndexes
    RouteCalculator:
      type: object
      properties:
        CalculatorArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*):geo(:([a-z0-9]+([.-][a-z0-9]+)*))(:[0-9]+):((\*)|([-a-z]+[/][*-._\w]+))$
        CalculatorName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        DataSource:
          type: string
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - DataSource
        - CalculatorName
      x-stackql-resource-name: route_calculator
      description: Definition of AWS::Location::RouteCalculator Resource Type
      x-type-name: AWS::Location::RouteCalculator
      x-stackql-primary-identifier:
        - CalculatorName
      x-create-only-properties:
        - CalculatorName
        - DataSource
      x-read-only-properties:
        - CalculatorArn
        - Arn
        - CreateTime
        - UpdateTime
      x-required-properties:
        - DataSource
        - CalculatorName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - geo:TagResource
          - geo:UntagResource
      x-required-permissions:
        create:
          - geo:CreateRouteCalculator
          - geo:DescribeRouteCalculator
          - geo:TagResource
          - geo:UntagResource
        read:
          - geo:DescribeRouteCalculator
        update:
          - geo:CreateRouteCalculator
          - geo:DescribeRouteCalculator
          - geo:TagResource
          - geo:UntagResource
          - geo:UpdateRouteCalculator
        delete:
          - geo:DeleteRouteCalculator
          - geo:DescribeRouteCalculator
        list:
          - geo:ListRouteCalculators
    PositionFiltering:
      type: string
      enum:
        - TimeBased
        - DistanceBased
        - AccuracyBased
    Tracker:
      type: object
      properties:
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        EventBridgeEnabled:
          type: boolean
        KmsKeyEnableGeospatialQueries:
          type: boolean
        KmsKeyId:
          type: string
          maxLength: 2048
          minLength: 1
        PositionFiltering:
          $ref: '#/components/schemas/PositionFiltering'
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        PricingPlanDataSource:
          type: string
          description: 'This shape is deprecated since 2022-02-01: Deprecated. No longer allowed.'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        TrackerArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        TrackerName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - TrackerName
      x-stackql-resource-name: tracker
      description: Definition of AWS::Location::Tracker Resource Type
      x-type-name: AWS::Location::Tracker
      x-stackql-primary-identifier:
        - TrackerName
      x-create-only-properties:
        - KmsKeyId
        - TrackerName
      x-read-only-properties:
        - CreateTime
        - Arn
        - TrackerArn
        - UpdateTime
      x-required-properties:
        - TrackerName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - geo:TagResource
          - geo:UntagResource
      x-required-permissions:
        create:
          - geo:CreateTracker
          - geo:DescribeTracker
          - geo:TagResource
          - geo:UntagResource
          - kms:DescribeKey
          - kms:CreateGrant
        read:
          - geo:DescribeTracker
          - kms:DescribeKey
        update:
          - geo:CreateTracker
          - geo:DescribeTracker
          - geo:TagResource
          - geo:UntagResource
          - kms:DescribeKey
          - kms:CreateGrant
          - geo:UpdateTracker
        delete:
          - geo:DeleteTracker
          - geo:DescribeTracker
        list:
          - geo:ListTrackers
    TrackerConsumer:
      type: object
      properties:
        ConsumerArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        TrackerName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
      required:
        - ConsumerArn
        - TrackerName
      x-stackql-resource-name: tracker_consumer
      description: Definition of AWS::Location::TrackerConsumer Resource Type
      x-type-name: AWS::Location::TrackerConsumer
      x-stackql-primary-identifier:
        - TrackerName
        - ConsumerArn
      x-create-only-properties:
        - TrackerName
        - ConsumerArn
      x-required-properties:
        - ConsumerArn
        - TrackerName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - geo:AssociateTrackerConsumer
          - geo:ListTrackerConsumers
        delete:
          - geo:DisassociateTrackerConsumer
          - geo:ListTrackerConsumers
        list:
          - geo:ListTrackerConsumers
        read:
          - geo:ListTrackerConsumers
    CreateAPIKeyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CreateTime:
              $ref: '#/components/schemas/iso8601UTC'
            Description:
              type: string
              maxLength: 1000
              minLength: 0
            ExpireTime:
              $ref: '#/components/schemas/iso8601UTC'
            ForceUpdate:
              type: boolean
            KeyArn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
            KeyName:
              type: string
              maxLength: 100
              minLength: 1
              pattern: ^[-._\w]+$
            NoExpiry:
              type: boolean
            Restrictions:
              $ref: '#/components/schemas/ApiKeyRestrictions'
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
            UpdateTime:
              $ref: '#/components/schemas/iso8601UTC'
            ForceDelete:
              type: boolean
            Arn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
          x-stackQL-stringOnly: true
      x-title: CreateAPIKeyRequest
      type: object
      required: []
    CreateGeofenceCollectionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CollectionArn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
            CollectionName:
              type: string
              maxLength: 100
              minLength: 1
              pattern: ^[-._\w]+$
            CreateTime:
              $ref: '#/components/schemas/iso8601UTC'
            Description:
              type: string
              maxLength: 1000
              minLength: 0
            KmsKeyId:
              type: string
              maxLength: 2048
              minLength: 1
            PricingPlan:
              $ref: '#/components/schemas/PricingPlan'
            PricingPlanDataSource:
              type: string
              description: 'This shape is deprecated since 2022-02-01: Deprecated. No longer allowed.'
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
            UpdateTime:
              $ref: '#/components/schemas/iso8601UTC'
            Arn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
          x-stackQL-stringOnly: true
      x-title: CreateGeofenceCollectionRequest
      type: object
      required: []
    CreateMapRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Configuration:
              $ref: '#/components/schemas/MapConfiguration'
            CreateTime:
              $ref: '#/components/schemas/iso8601UTC'
            Description:
              type: string
              maxLength: 1000
              minLength: 0
            MapArn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*):geo(:([a-z0-9]+([.-][a-z0-9]+)*))(:[0-9]+):((\*)|([-a-z]+[/][*-._\w]+))$
            MapName:
              type: string
              maxLength: 100
              minLength: 1
              pattern: ^[-._\w]+$
            PricingPlan:
              $ref: '#/components/schemas/PricingPlan'
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
            UpdateTime:
              $ref: '#/components/schemas/iso8601UTC'
            Arn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
          x-stackQL-stringOnly: true
      x-title: CreateMapRequest
      type: object
      required: []
    CreatePlaceIndexRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CreateTime:
              $ref: '#/components/schemas/iso8601UTC'
            DataSource:
              type: string
            DataSourceConfiguration:
              $ref: '#/components/schemas/DataSourceConfiguration'
            Description:
              type: string
              maxLength: 1000
              minLength: 0
            IndexArn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*):geo(:([a-z0-9]+([.-][a-z0-9]+)*))(:[0-9]+):((\*)|([-a-z]+[/][*-._\w]+))$
            IndexName:
              type: string
              maxLength: 100
              minLength: 1
              pattern: ^[-._\w]+$
            PricingPlan:
              $ref: '#/components/schemas/PricingPlan'
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
            UpdateTime:
              $ref: '#/components/schemas/iso8601UTC'
            Arn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
          x-stackQL-stringOnly: true
      x-title: CreatePlaceIndexRequest
      type: object
      required: []
    CreateRouteCalculatorRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CalculatorArn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*):geo(:([a-z0-9]+([.-][a-z0-9]+)*))(:[0-9]+):((\*)|([-a-z]+[/][*-._\w]+))$
            CalculatorName:
              type: string
              maxLength: 100
              minLength: 1
              pattern: ^[-._\w]+$
            CreateTime:
              $ref: '#/components/schemas/iso8601UTC'
            DataSource:
              type: string
            Description:
              type: string
              maxLength: 1000
              minLength: 0
            PricingPlan:
              $ref: '#/components/schemas/PricingPlan'
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
            UpdateTime:
              $ref: '#/components/schemas/iso8601UTC'
            Arn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
          x-stackQL-stringOnly: true
      x-title: CreateRouteCalculatorRequest
      type: object
      required: []
    CreateTrackerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CreateTime:
              $ref: '#/components/schemas/iso8601UTC'
            Description:
              type: string
              maxLength: 1000
              minLength: 0
            EventBridgeEnabled:
              type: boolean
            KmsKeyEnableGeospatialQueries:
              type: boolean
            KmsKeyId:
              type: string
              maxLength: 2048
              minLength: 1
            PositionFiltering:
              $ref: '#/components/schemas/PositionFiltering'
            PricingPlan:
              $ref: '#/components/schemas/PricingPlan'
            PricingPlanDataSource:
              type: string
              description: 'This shape is deprecated since 2022-02-01: Deprecated. No longer allowed.'
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
            TrackerArn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
            TrackerName:
              type: string
              maxLength: 100
              minLength: 1
              pattern: ^[-._\w]+$
            UpdateTime:
              $ref: '#/components/schemas/iso8601UTC'
            Arn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
          x-stackQL-stringOnly: true
      x-title: CreateTrackerRequest
      type: object
      required: []
    CreateTrackerConsumerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ConsumerArn:
              type: string
              maxLength: 1600
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
            TrackerName:
              type: string
              maxLength: 100
              minLength: 1
              pattern: ^[-._\w]+$
          x-stackQL-stringOnly: true
      x-title: CreateTrackerConsumerRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    api_keys:
      name: api_keys
      id: aws.location.api_keys
      x-cfn-schema-name: APIKey
      x-cfn-type-name: AWS::Location::APIKey
      x-identifiers:
        - KeyName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__APIKey&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::APIKey"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::APIKey"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::APIKey"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/api_keys/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/api_keys/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/api_keys/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ExpireTime') as expire_time,
              JSON_EXTRACT(Properties, '$.ForceUpdate') as force_update,
              JSON_EXTRACT(Properties, '$.KeyArn') as key_arn,
              JSON_EXTRACT(Properties, '$.KeyName') as key_name,
              JSON_EXTRACT(Properties, '$.NoExpiry') as no_expiry,
              JSON_EXTRACT(Properties, '$.Restrictions') as restrictions,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.ForceDelete') as force_delete,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::APIKey'
              AND data__Identifier = '<KeyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ExpireTime') as expire_time,
                JSON_EXTRACT(detail.Properties, '$.ForceUpdate') as force_update,
                JSON_EXTRACT(detail.Properties, '$.KeyArn') as key_arn,
                JSON_EXTRACT(detail.Properties, '$.KeyName') as key_name,
                JSON_EXTRACT(detail.Properties, '$.NoExpiry') as no_expiry,
                JSON_EXTRACT(detail.Properties, '$.Restrictions') as restrictions,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
                JSON_EXTRACT(detail.Properties, '$.ForceDelete') as force_delete,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Location::APIKey'
                AND detail.data__TypeName = 'AWS::Location::APIKey'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CreateTime') as create_time,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ExpireTime') as expire_time,
                  json_extract_path_text(Properties, 'ForceUpdate') as force_update,
                  json_extract_path_text(Properties, 'KeyArn') as key_arn,
                  json_extract_path_text(Properties, 'KeyName') as key_name,
                  json_extract_path_text(Properties, 'NoExpiry') as no_expiry,
                  json_extract_path_text(Properties, 'Restrictions') as restrictions,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'UpdateTime') as update_time,
                  json_extract_path_text(Properties, 'ForceDelete') as force_delete,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::APIKey'
                  AND data__Identifier = '<KeyName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ExpireTime') as expire_time,
                    json_extract_path_text(detail.Properties, 'ForceUpdate') as force_update,
                    json_extract_path_text(detail.Properties, 'KeyArn') as key_arn,
                    json_extract_path_text(detail.Properties, 'KeyName') as key_name,
                    json_extract_path_text(detail.Properties, 'NoExpiry') as no_expiry,
                    json_extract_path_text(detail.Properties, 'Restrictions') as restrictions,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                    json_extract_path_text(detail.Properties, 'ForceDelete') as force_delete,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Location::APIKey'
                    AND detail.data__TypeName = 'AWS::Location::APIKey'
                    AND listing.region = 'us-east-1'
    api_keys_list_only:
      name: api_keys_list_only
      id: aws.location.api_keys_list_only
      x-cfn-schema-name: APIKey
      x-cfn-type-name: AWS::Location::APIKey
      x-identifiers:
        - KeyName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.KeyName') as key_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::APIKey'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'KeyName') as key_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::APIKey'
                AND region = 'us-east-1'
    api_key_tags:
      name: api_key_tags
      id: aws.location.api_key_tags
      x-cfn-schema-name: APIKey
      x-cfn-type-name: AWS::Location::APIKey
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.ExpireTime') as expire_time,
              JSON_EXTRACT(detail.Properties, '$.ForceUpdate') as force_update,
              JSON_EXTRACT(detail.Properties, '$.KeyArn') as key_arn,
              JSON_EXTRACT(detail.Properties, '$.KeyName') as key_name,
              JSON_EXTRACT(detail.Properties, '$.NoExpiry') as no_expiry,
              JSON_EXTRACT(detail.Properties, '$.Restrictions') as restrictions,
              JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(detail.Properties, '$.ForceDelete') as force_delete,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Location::APIKey'
              AND detail.data__TypeName = 'AWS::Location::APIKey'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'ExpireTime') as expire_time,
                json_extract_path_text(detail.Properties, 'ForceUpdate') as force_update,
                json_extract_path_text(detail.Properties, 'KeyArn') as key_arn,
                json_extract_path_text(detail.Properties, 'KeyName') as key_name,
                json_extract_path_text(detail.Properties, 'NoExpiry') as no_expiry,
                json_extract_path_text(detail.Properties, 'Restrictions') as restrictions,
                json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                json_extract_path_text(detail.Properties, 'ForceDelete') as force_delete,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Location::APIKey'
                AND detail.data__TypeName = 'AWS::Location::APIKey'
                AND listing.region = 'us-east-1'
    geofence_collections:
      name: geofence_collections
      id: aws.location.geofence_collections
      x-cfn-schema-name: GeofenceCollection
      x-cfn-type-name: AWS::Location::GeofenceCollection
      x-identifiers:
        - CollectionName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__GeofenceCollection&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::GeofenceCollection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::GeofenceCollection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::GeofenceCollection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/geofence_collections/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/geofence_collections/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/geofence_collections/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CollectionArn') as collection_arn,
              JSON_EXTRACT(Properties, '$.CollectionName') as collection_name,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(Properties, '$.PricingPlanDataSource') as pricing_plan_data_source,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::GeofenceCollection'
              AND data__Identifier = '<CollectionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CollectionArn') as collection_arn,
                JSON_EXTRACT(detail.Properties, '$.CollectionName') as collection_name,
                JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.PricingPlan') as pricing_plan,
                JSON_EXTRACT(detail.Properties, '$.PricingPlanDataSource') as pricing_plan_data_source,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Location::GeofenceCollection'
                AND detail.data__TypeName = 'AWS::Location::GeofenceCollection'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CollectionArn') as collection_arn,
                  json_extract_path_text(Properties, 'CollectionName') as collection_name,
                  json_extract_path_text(Properties, 'CreateTime') as create_time,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                  json_extract_path_text(Properties, 'PricingPlan') as pricing_plan,
                  json_extract_path_text(Properties, 'PricingPlanDataSource') as pricing_plan_data_source,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'UpdateTime') as update_time,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::GeofenceCollection'
                  AND data__Identifier = '<CollectionName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CollectionArn') as collection_arn,
                    json_extract_path_text(detail.Properties, 'CollectionName') as collection_name,
                    json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                    json_extract_path_text(detail.Properties, 'PricingPlan') as pricing_plan,
                    json_extract_path_text(detail.Properties, 'PricingPlanDataSource') as pricing_plan_data_source,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Location::GeofenceCollection'
                    AND detail.data__TypeName = 'AWS::Location::GeofenceCollection'
                    AND listing.region = 'us-east-1'
    geofence_collections_list_only:
      name: geofence_collections_list_only
      id: aws.location.geofence_collections_list_only
      x-cfn-schema-name: GeofenceCollection
      x-cfn-type-name: AWS::Location::GeofenceCollection
      x-identifiers:
        - CollectionName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CollectionName') as collection_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::GeofenceCollection'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CollectionName') as collection_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::GeofenceCollection'
                AND region = 'us-east-1'
    geofence_collection_tags:
      name: geofence_collection_tags
      id: aws.location.geofence_collection_tags
      x-cfn-schema-name: GeofenceCollection
      x-cfn-type-name: AWS::Location::GeofenceCollection
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CollectionArn') as collection_arn,
              JSON_EXTRACT(detail.Properties, '$.CollectionName') as collection_name,
              JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(detail.Properties, '$.PricingPlanDataSource') as pricing_plan_data_source,
              JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Location::GeofenceCollection'
              AND detail.data__TypeName = 'AWS::Location::GeofenceCollection'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CollectionArn') as collection_arn,
                json_extract_path_text(detail.Properties, 'CollectionName') as collection_name,
                json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(detail.Properties, 'PricingPlan') as pricing_plan,
                json_extract_path_text(detail.Properties, 'PricingPlanDataSource') as pricing_plan_data_source,
                json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Location::GeofenceCollection'
                AND detail.data__TypeName = 'AWS::Location::GeofenceCollection'
                AND listing.region = 'us-east-1'
    maps:
      name: maps
      id: aws.location.maps
      x-cfn-schema-name: Map
      x-cfn-type-name: AWS::Location::Map
      x-identifiers:
        - MapName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Map&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::Map"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::Map"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::Map"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/maps/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/maps/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/maps/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.MapArn') as map_arn,
              JSON_EXTRACT(Properties, '$.MapName') as map_name,
              JSON_EXTRACT(Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::Map'
              AND data__Identifier = '<MapName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Configuration') as configuration,
                JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.MapArn') as map_arn,
                JSON_EXTRACT(detail.Properties, '$.MapName') as map_name,
                JSON_EXTRACT(detail.Properties, '$.PricingPlan') as pricing_plan,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Location::Map'
                AND detail.data__TypeName = 'AWS::Location::Map'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Configuration') as configuration,
                  json_extract_path_text(Properties, 'CreateTime') as create_time,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'MapArn') as map_arn,
                  json_extract_path_text(Properties, 'MapName') as map_name,
                  json_extract_path_text(Properties, 'PricingPlan') as pricing_plan,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'UpdateTime') as update_time,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::Map'
                  AND data__Identifier = '<MapName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Configuration') as configuration,
                    json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'MapArn') as map_arn,
                    json_extract_path_text(detail.Properties, 'MapName') as map_name,
                    json_extract_path_text(detail.Properties, 'PricingPlan') as pricing_plan,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Location::Map'
                    AND detail.data__TypeName = 'AWS::Location::Map'
                    AND listing.region = 'us-east-1'
    maps_list_only:
      name: maps_list_only
      id: aws.location.maps_list_only
      x-cfn-schema-name: Map
      x-cfn-type-name: AWS::Location::Map
      x-identifiers:
        - MapName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MapName') as map_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Map'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'MapName') as map_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Map'
                AND region = 'us-east-1'
    map_tags:
      name: map_tags
      id: aws.location.map_tags
      x-cfn-schema-name: Map
      x-cfn-type-name: AWS::Location::Map
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.MapArn') as map_arn,
              JSON_EXTRACT(detail.Properties, '$.MapName') as map_name,
              JSON_EXTRACT(detail.Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Location::Map'
              AND detail.data__TypeName = 'AWS::Location::Map'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Configuration') as configuration,
                json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'MapArn') as map_arn,
                json_extract_path_text(detail.Properties, 'MapName') as map_name,
                json_extract_path_text(detail.Properties, 'PricingPlan') as pricing_plan,
                json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Location::Map'
                AND detail.data__TypeName = 'AWS::Location::Map'
                AND listing.region = 'us-east-1'
    place_indices:
      name: place_indices
      id: aws.location.place_indices
      x-cfn-schema-name: PlaceIndex
      x-cfn-type-name: AWS::Location::PlaceIndex
      x-identifiers:
        - IndexName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PlaceIndex&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::PlaceIndex"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::PlaceIndex"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::PlaceIndex"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/place_indices/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/place_indices/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/place_indices/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(Properties, '$.DataSourceConfiguration') as data_source_configuration,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.IndexArn') as index_arn,
              JSON_EXTRACT(Properties, '$.IndexName') as index_name,
              JSON_EXTRACT(Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::PlaceIndex'
              AND data__Identifier = '<IndexName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
                JSON_EXTRACT(detail.Properties, '$.DataSource') as data_source,
                JSON_EXTRACT(detail.Properties, '$.DataSourceConfiguration') as data_source_configuration,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.IndexArn') as index_arn,
                JSON_EXTRACT(detail.Properties, '$.IndexName') as index_name,
                JSON_EXTRACT(detail.Properties, '$.PricingPlan') as pricing_plan,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Location::PlaceIndex'
                AND detail.data__TypeName = 'AWS::Location::PlaceIndex'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CreateTime') as create_time,
                  json_extract_path_text(Properties, 'DataSource') as data_source,
                  json_extract_path_text(Properties, 'DataSourceConfiguration') as data_source_configuration,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'IndexArn') as index_arn,
                  json_extract_path_text(Properties, 'IndexName') as index_name,
                  json_extract_path_text(Properties, 'PricingPlan') as pricing_plan,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'UpdateTime') as update_time,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::PlaceIndex'
                  AND data__Identifier = '<IndexName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                    json_extract_path_text(detail.Properties, 'DataSource') as data_source,
                    json_extract_path_text(detail.Properties, 'DataSourceConfiguration') as data_source_configuration,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'IndexArn') as index_arn,
                    json_extract_path_text(detail.Properties, 'IndexName') as index_name,
                    json_extract_path_text(detail.Properties, 'PricingPlan') as pricing_plan,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Location::PlaceIndex'
                    AND detail.data__TypeName = 'AWS::Location::PlaceIndex'
                    AND listing.region = 'us-east-1'
    place_indices_list_only:
      name: place_indices_list_only
      id: aws.location.place_indices_list_only
      x-cfn-schema-name: PlaceIndex
      x-cfn-type-name: AWS::Location::PlaceIndex
      x-identifiers:
        - IndexName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IndexName') as index_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::PlaceIndex'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IndexName') as index_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::PlaceIndex'
                AND region = 'us-east-1'
    place_index_tags:
      name: place_index_tags
      id: aws.location.place_index_tags
      x-cfn-schema-name: PlaceIndex
      x-cfn-type-name: AWS::Location::PlaceIndex
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(detail.Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(detail.Properties, '$.DataSourceConfiguration') as data_source_configuration,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.IndexArn') as index_arn,
              JSON_EXTRACT(detail.Properties, '$.IndexName') as index_name,
              JSON_EXTRACT(detail.Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Location::PlaceIndex'
              AND detail.data__TypeName = 'AWS::Location::PlaceIndex'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                json_extract_path_text(detail.Properties, 'DataSource') as data_source,
                json_extract_path_text(detail.Properties, 'DataSourceConfiguration') as data_source_configuration,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'IndexArn') as index_arn,
                json_extract_path_text(detail.Properties, 'IndexName') as index_name,
                json_extract_path_text(detail.Properties, 'PricingPlan') as pricing_plan,
                json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Location::PlaceIndex'
                AND detail.data__TypeName = 'AWS::Location::PlaceIndex'
                AND listing.region = 'us-east-1'
    route_calculators:
      name: route_calculators
      id: aws.location.route_calculators
      x-cfn-schema-name: RouteCalculator
      x-cfn-type-name: AWS::Location::RouteCalculator
      x-identifiers:
        - CalculatorName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RouteCalculator&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::RouteCalculator"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::RouteCalculator"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::RouteCalculator"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/route_calculators/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/route_calculators/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/route_calculators/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CalculatorArn') as calculator_arn,
              JSON_EXTRACT(Properties, '$.CalculatorName') as calculator_name,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::RouteCalculator'
              AND data__Identifier = '<CalculatorName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CalculatorArn') as calculator_arn,
                JSON_EXTRACT(detail.Properties, '$.CalculatorName') as calculator_name,
                JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
                JSON_EXTRACT(detail.Properties, '$.DataSource') as data_source,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.PricingPlan') as pricing_plan,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Location::RouteCalculator'
                AND detail.data__TypeName = 'AWS::Location::RouteCalculator'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CalculatorArn') as calculator_arn,
                  json_extract_path_text(Properties, 'CalculatorName') as calculator_name,
                  json_extract_path_text(Properties, 'CreateTime') as create_time,
                  json_extract_path_text(Properties, 'DataSource') as data_source,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'PricingPlan') as pricing_plan,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'UpdateTime') as update_time,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::RouteCalculator'
                  AND data__Identifier = '<CalculatorName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CalculatorArn') as calculator_arn,
                    json_extract_path_text(detail.Properties, 'CalculatorName') as calculator_name,
                    json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                    json_extract_path_text(detail.Properties, 'DataSource') as data_source,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'PricingPlan') as pricing_plan,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Location::RouteCalculator'
                    AND detail.data__TypeName = 'AWS::Location::RouteCalculator'
                    AND listing.region = 'us-east-1'
    route_calculators_list_only:
      name: route_calculators_list_only
      id: aws.location.route_calculators_list_only
      x-cfn-schema-name: RouteCalculator
      x-cfn-type-name: AWS::Location::RouteCalculator
      x-identifiers:
        - CalculatorName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CalculatorName') as calculator_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::RouteCalculator'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CalculatorName') as calculator_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::RouteCalculator'
                AND region = 'us-east-1'
    route_calculator_tags:
      name: route_calculator_tags
      id: aws.location.route_calculator_tags
      x-cfn-schema-name: RouteCalculator
      x-cfn-type-name: AWS::Location::RouteCalculator
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CalculatorArn') as calculator_arn,
              JSON_EXTRACT(detail.Properties, '$.CalculatorName') as calculator_name,
              JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(detail.Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Location::RouteCalculator'
              AND detail.data__TypeName = 'AWS::Location::RouteCalculator'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CalculatorArn') as calculator_arn,
                json_extract_path_text(detail.Properties, 'CalculatorName') as calculator_name,
                json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                json_extract_path_text(detail.Properties, 'DataSource') as data_source,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'PricingPlan') as pricing_plan,
                json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Location::RouteCalculator'
                AND detail.data__TypeName = 'AWS::Location::RouteCalculator'
                AND listing.region = 'us-east-1'
    trackers:
      name: trackers
      id: aws.location.trackers
      x-cfn-schema-name: Tracker
      x-cfn-type-name: AWS::Location::Tracker
      x-identifiers:
        - TrackerName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Tracker&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::Tracker"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::Tracker"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::Tracker"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/trackers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/trackers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/trackers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EventBridgeEnabled') as event_bridge_enabled,
              JSON_EXTRACT(Properties, '$.KmsKeyEnableGeospatialQueries') as kms_key_enable_geospatial_queries,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.PositionFiltering') as position_filtering,
              JSON_EXTRACT(Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(Properties, '$.PricingPlanDataSource') as pricing_plan_data_source,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TrackerArn') as tracker_arn,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::Tracker'
              AND data__Identifier = '<TrackerName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.EventBridgeEnabled') as event_bridge_enabled,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyEnableGeospatialQueries') as kms_key_enable_geospatial_queries,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.PositionFiltering') as position_filtering,
                JSON_EXTRACT(detail.Properties, '$.PricingPlan') as pricing_plan,
                JSON_EXTRACT(detail.Properties, '$.PricingPlanDataSource') as pricing_plan_data_source,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.TrackerArn') as tracker_arn,
                JSON_EXTRACT(detail.Properties, '$.TrackerName') as tracker_name,
                JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Location::Tracker'
                AND detail.data__TypeName = 'AWS::Location::Tracker'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CreateTime') as create_time,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'EventBridgeEnabled') as event_bridge_enabled,
                  json_extract_path_text(Properties, 'KmsKeyEnableGeospatialQueries') as kms_key_enable_geospatial_queries,
                  json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                  json_extract_path_text(Properties, 'PositionFiltering') as position_filtering,
                  json_extract_path_text(Properties, 'PricingPlan') as pricing_plan,
                  json_extract_path_text(Properties, 'PricingPlanDataSource') as pricing_plan_data_source,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'TrackerArn') as tracker_arn,
                  json_extract_path_text(Properties, 'TrackerName') as tracker_name,
                  json_extract_path_text(Properties, 'UpdateTime') as update_time,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::Tracker'
                  AND data__Identifier = '<TrackerName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'EventBridgeEnabled') as event_bridge_enabled,
                    json_extract_path_text(detail.Properties, 'KmsKeyEnableGeospatialQueries') as kms_key_enable_geospatial_queries,
                    json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                    json_extract_path_text(detail.Properties, 'PositionFiltering') as position_filtering,
                    json_extract_path_text(detail.Properties, 'PricingPlan') as pricing_plan,
                    json_extract_path_text(detail.Properties, 'PricingPlanDataSource') as pricing_plan_data_source,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'TrackerArn') as tracker_arn,
                    json_extract_path_text(detail.Properties, 'TrackerName') as tracker_name,
                    json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Location::Tracker'
                    AND detail.data__TypeName = 'AWS::Location::Tracker'
                    AND listing.region = 'us-east-1'
    trackers_list_only:
      name: trackers_list_only
      id: aws.location.trackers_list_only
      x-cfn-schema-name: Tracker
      x-cfn-type-name: AWS::Location::Tracker
      x-identifiers:
        - TrackerName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Tracker'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TrackerName') as tracker_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Tracker'
                AND region = 'us-east-1'
    tracker_tags:
      name: tracker_tags
      id: aws.location.tracker_tags
      x-cfn-schema-name: Tracker
      x-cfn-type-name: AWS::Location::Tracker
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.EventBridgeEnabled') as event_bridge_enabled,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyEnableGeospatialQueries') as kms_key_enable_geospatial_queries,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.PositionFiltering') as position_filtering,
              JSON_EXTRACT(detail.Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(detail.Properties, '$.PricingPlanDataSource') as pricing_plan_data_source,
              JSON_EXTRACT(detail.Properties, '$.TrackerArn') as tracker_arn,
              JSON_EXTRACT(detail.Properties, '$.TrackerName') as tracker_name,
              JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Location::Tracker'
              AND detail.data__TypeName = 'AWS::Location::Tracker'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'EventBridgeEnabled') as event_bridge_enabled,
                json_extract_path_text(detail.Properties, 'KmsKeyEnableGeospatialQueries') as kms_key_enable_geospatial_queries,
                json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(detail.Properties, 'PositionFiltering') as position_filtering,
                json_extract_path_text(detail.Properties, 'PricingPlan') as pricing_plan,
                json_extract_path_text(detail.Properties, 'PricingPlanDataSource') as pricing_plan_data_source,
                json_extract_path_text(detail.Properties, 'TrackerArn') as tracker_arn,
                json_extract_path_text(detail.Properties, 'TrackerName') as tracker_name,
                json_extract_path_text(detail.Properties, 'UpdateTime') as update_time,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Location::Tracker'
                AND detail.data__TypeName = 'AWS::Location::Tracker'
                AND listing.region = 'us-east-1'
    tracker_consumers:
      name: tracker_consumers
      id: aws.location.tracker_consumers
      x-cfn-schema-name: TrackerConsumer
      x-cfn-type-name: AWS::Location::TrackerConsumer
      x-identifiers:
        - TrackerName
        - ConsumerArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TrackerConsumer&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::TrackerConsumer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Location::TrackerConsumer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/tracker_consumers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/tracker_consumers/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ConsumerArn') as consumer_arn,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::TrackerConsumer'
              AND data__Identifier = '<TrackerName>|<ConsumerArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ConsumerArn') as consumer_arn,
                JSON_EXTRACT(detail.Properties, '$.TrackerName') as tracker_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Location::TrackerConsumer'
                AND detail.data__TypeName = 'AWS::Location::TrackerConsumer'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ConsumerArn') as consumer_arn,
                  json_extract_path_text(Properties, 'TrackerName') as tracker_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Location::TrackerConsumer'
                  AND data__Identifier = '<TrackerName>|<ConsumerArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ConsumerArn') as consumer_arn,
                    json_extract_path_text(detail.Properties, 'TrackerName') as tracker_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Location::TrackerConsumer'
                    AND detail.data__TypeName = 'AWS::Location::TrackerConsumer'
                    AND listing.region = 'us-east-1'
    tracker_consumers_list_only:
      name: tracker_consumers_list_only
      id: aws.location.tracker_consumers_list_only
      x-cfn-schema-name: TrackerConsumer
      x-cfn-type-name: AWS::Location::TrackerConsumer
      x-identifiers:
        - TrackerName
        - ConsumerArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name,
              JSON_EXTRACT(Properties, '$.ConsumerArn') as consumer_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::TrackerConsumer'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TrackerName') as tracker_name,
                json_extract_path_text(Properties, 'ConsumerArn') as consumer_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Location::TrackerConsumer'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__APIKey&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAPIKey
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAPIKeyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__GeofenceCollection&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateGeofenceCollection
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateGeofenceCollectionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Map&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateMap
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateMapRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PlaceIndex&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePlaceIndex
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePlaceIndexRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RouteCalculator&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRouteCalculator
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRouteCalculatorRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Tracker&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTracker
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTrackerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TrackerConsumer&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTrackerConsumer
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTrackerConsumerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
