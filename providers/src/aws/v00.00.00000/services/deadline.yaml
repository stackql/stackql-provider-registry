openapi: 3.0.0
info:
  title: Deadline
  version: 1.0.0
paths: {}
components:
  schemas:
    Farm:
      type: object
      properties:
        Description:
          type: string
          default: ''
          maxLength: 100
          minLength: 0
        DisplayName:
          type: string
          maxLength: 100
          minLength: 1
        FarmId:
          type: string
          pattern: ^farm-[0-9a-f]{32}$
        KmsKeyArn:
          type: string
          pattern: ^arn:aws[-a-z]*:kms:.*:key/.*
        Arn:
          type: string
          pattern: ^arn:(aws[a-zA-Z-]*):deadline:[a-z0-9-]+:[0-9]+:farm/.+?
      required:
        - DisplayName
      x-stackql-resource-name: farm
      description: Definition of AWS::Deadline::Farm Resource Type
      x-type-name: AWS::Deadline::Farm
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - KmsKeyArn
      x-read-only-properties:
        - FarmId
        - Arn
      x-required-properties:
        - DisplayName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - deadline:CreateFarm
          - deadline:GetFarm
          - kms:Encrypt
          - kms:Decrypt
          - kms:CreateGrant
          - kms:GenerateDataKey
        read:
          - deadline:GetFarm
          - identitystore:ListGroupMembershipsForMember
          - kms:Encrypt
          - kms:Decrypt
          - kms:CreateGrant
          - kms:GenerateDataKey
        update:
          - deadline:UpdateFarm
          - deadline:GetFarm
          - identitystore:ListGroupMembershipsForMember
          - kms:Encrypt
          - kms:Decrypt
          - kms:CreateGrant
          - kms:GenerateDataKey
        delete:
          - deadline:DeleteFarm
          - deadline:GetFarm
          - identitystore:ListGroupMembershipsForMember
          - kms:Encrypt
          - kms:Decrypt
          - kms:CreateGrant
          - kms:GenerateDataKey
        list:
          - deadline:ListFarms
          - identitystore:ListGroupMembershipsForMember
    AcceleratorCountRange:
      type: object
      properties:
        Min:
          type: integer
          maximum: 2147483647
          minimum: 0
        Max:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
        - Min
      additionalProperties: false
    AcceleratorTotalMemoryMiBRange:
      type: object
      properties:
        Min:
          type: integer
          maximum: 2147483647
          minimum: 0
        Max:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
        - Min
      additionalProperties: false
    AcceleratorType:
      type: string
      enum:
        - gpu
    AutoScalingMode:
      type: string
      enum:
        - NO_SCALING
        - EVENT_BASED_AUTO_SCALING
    CpuArchitectureType:
      type: string
      enum:
        - x86_64
        - arm64
    CustomerManagedFleetConfiguration:
      type: object
      properties:
        Mode:
          $ref: '#/components/schemas/AutoScalingMode'
        WorkerCapabilities:
          $ref: '#/components/schemas/CustomerManagedWorkerCapabilities'
        StorageProfileId:
          type: string
          pattern: ^sp-[0-9a-f]{32}$
      required:
        - Mode
        - WorkerCapabilities
      additionalProperties: false
    CustomerManagedFleetOperatingSystemFamily:
      type: string
      enum:
        - WINDOWS
        - LINUX
        - MACOS
    CustomerManagedWorkerCapabilities:
      type: object
      properties:
        VCpuCount:
          $ref: '#/components/schemas/VCpuCountRange'
        MemoryMiB:
          $ref: '#/components/schemas/MemoryMiBRange'
        AcceleratorTypes:
          type: array
          items:
            $ref: '#/components/schemas/AcceleratorType'
        AcceleratorCount:
          $ref: '#/components/schemas/AcceleratorCountRange'
        AcceleratorTotalMemoryMiB:
          $ref: '#/components/schemas/AcceleratorTotalMemoryMiBRange'
        OsFamily:
          $ref: '#/components/schemas/CustomerManagedFleetOperatingSystemFamily'
        CpuArchitectureType:
          $ref: '#/components/schemas/CpuArchitectureType'
        CustomAmounts:
          type: array
          items:
            $ref: '#/components/schemas/FleetAmountCapability'
          maxItems: 15
          minItems: 1
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/FleetAttributeCapability'
          maxItems: 15
          minItems: 1
      required:
        - CpuArchitectureType
        - MemoryMiB
        - OsFamily
        - VCpuCount
      additionalProperties: false
    Ec2EbsVolume:
      type: object
      properties:
        SizeGiB:
          type: integer
          default: 250
        Iops:
          type: integer
          default: 3000
          maximum: 16000
          minimum: 3000
        ThroughputMiB:
          type: integer
          default: 125
          maximum: 1000
          minimum: 125
      additionalProperties: false
    Ec2MarketType:
      type: string
      enum:
        - on-demand
        - spot
    FleetAmountCapability:
      type: object
      properties:
        Name:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^([a-zA-Z][a-zA-Z0-9]{0,63}:)?amount(\.[a-zA-Z][a-zA-Z0-9]{0,63})+$
        Min:
          type: number
        Max:
          type: number
      required:
        - Min
        - Name
      additionalProperties: false
    FleetAttributeCapability:
      type: object
      properties:
        Name:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^([a-zA-Z][a-zA-Z0-9]{0,63}:)?attr(\.[a-zA-Z][a-zA-Z0-9]{0,63})+$
        Values:
          type: array
          items:
            type: string
            maxLength: 100
            minLength: 1
            pattern: ^[a-zA-Z_]([a-zA-Z0-9_\-]{0,99})$
          maxItems: 10
          minItems: 1
      required:
        - Name
        - Values
      additionalProperties: false
    FleetCapabilities:
      type: object
      properties:
        Amounts:
          type: array
          items:
            $ref: '#/components/schemas/FleetAmountCapability'
          maxItems: 15
          minItems: 1
        Attributes:
          type: array
          items:
            $ref: '#/components/schemas/FleetAttributeCapability'
          maxItems: 15
          minItems: 1
      additionalProperties: false
    FleetConfiguration:
      oneOf:
        - type: object
          title: CustomerManaged
          properties:
            CustomerManaged:
              $ref: '#/components/schemas/CustomerManagedFleetConfiguration'
          required:
            - CustomerManaged
          additionalProperties: false
        - type: object
          title: ServiceManagedEc2
          properties:
            ServiceManagedEc2:
              $ref: '#/components/schemas/ServiceManagedEc2FleetConfiguration'
          required:
            - ServiceManagedEc2
          additionalProperties: false
    FleetStatus:
      type: string
      enum:
        - ACTIVE
        - CREATE_IN_PROGRESS
        - UPDATE_IN_PROGRESS
        - CREATE_FAILED
        - UPDATE_FAILED
    MemoryMiBRange:
      type: object
      properties:
        Min:
          type: integer
          maximum: 2147483647
          minimum: 512
        Max:
          type: integer
          maximum: 2147483647
          minimum: 512
      required:
        - Min
      additionalProperties: false
    ServiceManagedEc2FleetConfiguration:
      type: object
      properties:
        InstanceCapabilities:
          $ref: '#/components/schemas/ServiceManagedEc2InstanceCapabilities'
        InstanceMarketOptions:
          $ref: '#/components/schemas/ServiceManagedEc2InstanceMarketOptions'
      required:
        - InstanceCapabilities
        - InstanceMarketOptions
      additionalProperties: false
    ServiceManagedEc2InstanceMarketOptions:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/Ec2MarketType'
      required:
        - Type
      additionalProperties: false
    ServiceManagedEc2InstanceCapabilities:
      type: object
      properties:
        VCpuCount:
          $ref: '#/components/schemas/VCpuCountRange'
        MemoryMiB:
          $ref: '#/components/schemas/MemoryMiBRange'
        OsFamily:
          $ref: '#/components/schemas/ServiceManagedFleetOperatingSystemFamily'
        CpuArchitectureType:
          $ref: '#/components/schemas/CpuArchitectureType'
        RootEbsVolume:
          $ref: '#/components/schemas/Ec2EbsVolume'
        AllowedInstanceTypes:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9]+\.[a-zA-Z0-9]+$
          maxItems: 100
          minItems: 1
        ExcludedInstanceTypes:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9]+\.[a-zA-Z0-9]+$
          maxItems: 100
          minItems: 1
        CustomAmounts:
          type: array
          items:
            $ref: '#/components/schemas/FleetAmountCapability'
          maxItems: 15
          minItems: 1
        CustomAttributes:
          type: array
          items:
            $ref: '#/components/schemas/FleetAttributeCapability'
          maxItems: 15
          minItems: 1
      required:
        - CpuArchitectureType
        - MemoryMiB
        - OsFamily
        - VCpuCount
      additionalProperties: false
    ServiceManagedFleetOperatingSystemFamily:
      type: string
      enum:
        - WINDOWS
        - LINUX
    VCpuCountRange:
      type: object
      properties:
        Min:
          type: integer
          maximum: 10000
          minimum: 1
        Max:
          type: integer
          maximum: 10000
          minimum: 1
      required:
        - Min
      additionalProperties: false
    Fleet:
      type: object
      properties:
        Capabilities:
          $ref: '#/components/schemas/FleetCapabilities'
        Configuration:
          $ref: '#/components/schemas/FleetConfiguration'
        Description:
          type: string
          default: ''
          maxLength: 100
          minLength: 0
        DisplayName:
          type: string
          maxLength: 100
          minLength: 1
        FarmId:
          type: string
          pattern: ^farm-[0-9a-f]{32}$
        FleetId:
          type: string
          pattern: ^fleet-[0-9a-f]{32}$
        MaxWorkerCount:
          type: integer
          maximum: 2147483647
          minimum: 0
        MinWorkerCount:
          type: integer
          default: 0
          maximum: 2147483647
          minimum: 0
        RoleArn:
          type: string
          pattern: ^arn:(aws[a-zA-Z-]*):iam::\d{12}:role(/[!-.0-~]+)*/[\w+=,.@-]+$
        Status:
          $ref: '#/components/schemas/FleetStatus'
        WorkerCount:
          type: integer
        Arn:
          type: string
          pattern: ^arn:(aws[a-zA-Z-]*):deadline:[a-z0-9-]+:[0-9]+:farm/farm-[0-9a-z]{32}/fleet/fleet-[0-9a-z]{32}
      required:
        - Configuration
        - DisplayName
        - MaxWorkerCount
        - RoleArn
      x-stackql-resource-name: fleet
      description: Definition of AWS::Deadline::Fleet Resource Type
      x-type-name: AWS::Deadline::Fleet
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - FarmId
      x-read-only-properties:
        - Capabilities
        - FleetId
        - Status
        - WorkerCount
        - Arn
      x-required-properties:
        - Configuration
        - DisplayName
        - MaxWorkerCount
        - RoleArn
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - deadline:CreateFleet
          - deadline:GetFleet
          - iam:PassRole
          - identitystore:ListGroupMembershipsForMember
          - logs:CreateLogGroup
        read:
          - deadline:GetFleet
          - identitystore:ListGroupMembershipsForMember
        update:
          - deadline:UpdateFleet
          - deadline:GetFleet
          - iam:PassRole
          - identitystore:ListGroupMembershipsForMember
        delete:
          - deadline:DeleteFleet
          - deadline:GetFleet
          - identitystore:ListGroupMembershipsForMember
        list:
          - deadline:ListFleets
          - identitystore:DescribeGroup
          - identitystore:DescribeUser
          - identitystore:ListGroupMembershipsForMember
    LicenseEndpointStatus:
      type: string
      enum:
        - CREATE_IN_PROGRESS
        - DELETE_IN_PROGRESS
        - READY
        - NOT_READY
    LicenseEndpoint:
      type: object
      properties:
        DnsName:
          type: string
        LicenseEndpointId:
          type: string
          pattern: ^le-[0-9a-f]{32}$
        SecurityGroupIds:
          type: array
          items:
            type: string
          maxItems: 10
          minItems: 1
        Status:
          $ref: '#/components/schemas/LicenseEndpointStatus'
        StatusMessage:
          type: string
          maxLength: 1024
          minLength: 0
        SubnetIds:
          type: array
          items:
            type: string
            maxLength: 32
            minLength: 1
          maxItems: 10
          minItems: 1
        VpcId:
          type: string
          maxLength: 32
          minLength: 1
        Arn:
          type: string
          pattern: ^arn:(aws[a-zA-Z-]*):deadline:[a-z0-9-]+:[0-9]{12}:license-endpoint/le-[0-9a-z]{32}
      required:
        - SecurityGroupIds
        - SubnetIds
        - VpcId
      x-stackql-resource-name: license_endpoint
      description: Definition of AWS::Deadline::LicenseEndpoint Resource Type
      x-type-name: AWS::Deadline::LicenseEndpoint
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - SecurityGroupIds
        - SubnetIds
        - VpcId
      x-read-only-properties:
        - DnsName
        - LicenseEndpointId
        - Status
        - StatusMessage
        - Arn
      x-required-properties:
        - SecurityGroupIds
        - SubnetIds
        - VpcId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - deadline:CreateLicenseEndpoint
          - deadline:GetLicenseEndpoint
          - ec2:CreateTags
          - ec2:CreateVpcEndpoint
          - ec2:DescribeVpcEndpoints
        read:
          - deadline:GetLicenseEndpoint
        delete:
          - deadline:GetLicenseEndpoint
          - deadline:DeleteLicenseEndpoint
          - ec2:DeleteVpcEndpoints
          - ec2:DescribeVpcEndpoints
        list:
          - deadline:ListLicenseEndpoints
    MeteredProduct:
      type: object
      properties:
        LicenseEndpointId:
          type: string
          pattern: ^le-[0-9a-f]{32}$
        ProductId:
          type: string
          pattern: ^[0-9a-z]{1,32}-[.0-9a-z]{1,32}$
        Port:
          type: integer
          minimum: 1024
          maximum: 65535
        Family:
          type: string
          minLength: 1
          maxLength: 64
        Vendor:
          type: string
          minLength: 1
          maxLength: 64
        Arn:
          type: string
          pattern: ^arn:(aws[a-zA-Z-]*):deadline:[a-z0-9-]+:[0-9]{12}:license-endpoint/le-[0-9a-z]{32}/metered-product/[0-9a-z]{1,32}-[.0-9a-z]{1,32}
      x-stackql-resource-name: metered_product
      description: Definition of AWS::Deadline::MeteredProduct Resource Type
      x-type-name: AWS::Deadline::MeteredProduct
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - LicenseEndpointId
        - ProductId
      x-read-only-properties:
        - Arn
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - deadline:PutMeteredProduct
          - deadline:ListMeteredProducts
        read:
          - deadline:GetMeteredProduct
          - deadline:ListMeteredProducts
        delete:
          - deadline:DeleteMeteredProduct
          - deadline:ListMeteredProducts
        list:
          - deadline:ListMeteredProducts
    DefaultQueueBudgetAction:
      type: string
      default: NONE
      enum:
        - NONE
        - STOP_SCHEDULING_AND_COMPLETE_TASKS
        - STOP_SCHEDULING_AND_CANCEL_TASKS
    JobAttachmentSettings:
      type: object
      properties:
        S3BucketName:
          type: string
          maxLength: 63
          minLength: 3
          pattern: (?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
        RootPrefix:
          type: string
          maxLength: 63
          minLength: 1
      required:
        - RootPrefix
        - S3BucketName
      additionalProperties: false
    JobRunAsUser:
      type: object
      properties:
        Posix:
          $ref: '#/components/schemas/PosixUser'
        Windows:
          $ref: '#/components/schemas/WindowsUser'
        RunAs:
          $ref: '#/components/schemas/RunAs'
      required:
        - RunAs
      additionalProperties: false
    PosixUser:
      type: object
      properties:
        User:
          type: string
          maxLength: 31
          minLength: 0
          pattern: ^(?:[a-z][a-z0-9-]{0,30})?$
        Group:
          type: string
          maxLength: 31
          minLength: 0
          pattern: ^(?:[a-z][a-z0-9-]{0,30})?$
      required:
        - Group
        - User
      additionalProperties: false
    RunAs:
      type: string
      enum:
        - QUEUE_CONFIGURED_USER
        - WORKER_AGENT_USER
    WindowsUser:
      type: object
      properties:
        User:
          type: string
          maxLength: 111
          minLength: 0
          pattern: ^[^"'/\[\]:;|=,+*?<>\s]*$
        PasswordArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:(aws[a-zA-Z-]*):secretsmanager:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:secret:[a-zA-Z0-9-/_+=.@]{1,2028}$
      required:
        - PasswordArn
        - User
      additionalProperties: false
    Queue:
      type: object
      properties:
        AllowedStorageProfileIds:
          type: array
          items:
            type: string
            pattern: ^sp-[0-9a-f]{32}$
          maxItems: 20
          minItems: 0
          uniqueItems: true
        DefaultBudgetAction:
          $ref: '#/components/schemas/DefaultQueueBudgetAction'
        Description:
          type: string
          default: ''
          maxLength: 100
          minLength: 0
        DisplayName:
          type: string
          maxLength: 100
          minLength: 1
        FarmId:
          type: string
          pattern: ^farm-[0-9a-f]{32}$
        JobAttachmentSettings:
          $ref: '#/components/schemas/JobAttachmentSettings'
        JobRunAsUser:
          $ref: '#/components/schemas/JobRunAsUser'
        QueueId:
          type: string
          pattern: ^queue-[0-9a-f]{32}$
        RequiredFileSystemLocationNames:
          type: array
          items:
            type: string
            maxLength: 64
            minLength: 1
            pattern: ^[0-9A-Za-z ]*$
          maxItems: 20
          minItems: 0
          uniqueItems: true
        RoleArn:
          type: string
          pattern: ^arn:(aws[a-zA-Z-]*):iam::\d{12}:role(/[!-.0-~]+)*/[\w+=,.@-]+$
        Arn:
          type: string
          pattern: ^arn:*
      required:
        - DisplayName
      x-stackql-resource-name: queue
      description: Definition of AWS::Deadline::Queue Resource Type
      x-type-name: AWS::Deadline::Queue
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - FarmId
      x-read-only-properties:
        - QueueId
        - Arn
      x-required-properties:
        - DisplayName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - deadline:CreateQueue
          - deadline:GetQueue
          - iam:PassRole
          - identitystore:ListGroupMembershipsForMember
          - logs:CreateLogGroup
          - s3:ListBucket
        read:
          - deadline:GetQueue
          - identitystore:ListGroupMembershipsForMember
        update:
          - deadline:UpdateQueue
          - deadline:GetQueue
          - iam:PassRole
          - identitystore:ListGroupMembershipsForMember
          - logs:CreateLogGroup
          - s3:ListBucket
        delete:
          - deadline:DeleteQueue
          - deadline:GetQueue
          - identitystore:ListGroupMembershipsForMember
        list:
          - deadline:ListQueues
          - identitystore:DescribeGroup
          - identitystore:DescribeUser
          - identitystore:ListGroupMembershipsForMember
    EnvironmentTemplateType:
      type: string
      enum:
        - JSON
        - YAML
    QueueEnvironment:
      type: object
      properties:
        FarmId:
          type: string
          pattern: ^farm-[0-9a-f]{32}$
        Name:
          type: string
        Priority:
          type: integer
          maximum: 10000
          minimum: 0
        QueueEnvironmentId:
          type: string
          pattern: ^queueenv-[0-9a-f]{32}$
        QueueId:
          type: string
          pattern: ^queue-[0-9a-f]{32}$
        Template:
          type: string
          maxLength: 15000
          minLength: 1
        TemplateType:
          $ref: '#/components/schemas/EnvironmentTemplateType'
      required:
        - FarmId
        - QueueId
        - Priority
        - Template
        - TemplateType
      x-stackql-resource-name: queue_environment
      description: Definition of AWS::Deadline::QueueEnvironment Resource Type
      x-type-name: AWS::Deadline::QueueEnvironment
      x-stackql-primary-identifier:
        - FarmId
        - QueueId
        - QueueEnvironmentId
      x-create-only-properties:
        - FarmId
        - QueueId
      x-read-only-properties:
        - Name
        - QueueEnvironmentId
      x-required-properties:
        - FarmId
        - QueueId
        - Priority
        - Template
        - TemplateType
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - deadline:CreateQueueEnvironment
          - identitystore:ListGroupMembershipsForMember
        read:
          - deadline:GetQueueEnvironment
          - identitystore:ListGroupMembershipsForMember
        update:
          - deadline:UpdateQueueEnvironment
          - identitystore:ListGroupMembershipsForMember
        delete:
          - deadline:DeleteQueueEnvironment
          - deadline:GetQueueEnvironment
          - identitystore:ListGroupMembershipsForMember
        list:
          - deadline:ListQueueEnvironments
          - identitystore:ListGroupMembershipsForMember
    QueueFleetAssociation:
      type: object
      properties:
        FarmId:
          type: string
          pattern: ^farm-[0-9a-f]{32}$
        FleetId:
          type: string
          pattern: ^fleet-[0-9a-f]{32}$
        QueueId:
          type: string
          pattern: ^queue-[0-9a-f]{32}$
      required:
        - FarmId
        - FleetId
        - QueueId
      x-stackql-resource-name: queue_fleet_association
      description: Definition of AWS::Deadline::QueueFleetAssociation Resource Type
      x-type-name: AWS::Deadline::QueueFleetAssociation
      x-stackql-primary-identifier:
        - FarmId
        - FleetId
        - QueueId
      x-create-only-properties:
        - FarmId
        - FleetId
        - QueueId
      x-required-properties:
        - FarmId
        - FleetId
        - QueueId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - deadline:CreateQueueFleetAssociation
          - deadline:GetQueueFleetAssociation
          - identitystore:ListGroupMembershipsForMember
        read:
          - deadline:GetQueueFleetAssociation
          - identitystore:ListGroupMembershipsForMember
        delete:
          - deadline:DeleteQueueFleetAssociation
          - deadline:GetQueueFleetAssociation
          - deadline:UpdateQueueFleetAssociation
          - identitystore:ListGroupMembershipsForMember
        list:
          - deadline:ListQueueFleetAssociations
          - identitystore:ListGroupMembershipsForMember
    FileSystemLocation:
      type: object
      properties:
        Name:
          type: string
          maxLength: 64
          minLength: 1
          pattern: ^[0-9A-Za-z ]*$
        Path:
          type: string
          maxLength: 1024
          minLength: 0
        Type:
          $ref: '#/components/schemas/FileSystemLocationType'
      required:
        - Name
        - Path
        - Type
      additionalProperties: false
    FileSystemLocationType:
      type: string
      enum:
        - SHARED
        - LOCAL
    StorageProfileOperatingSystemFamily:
      type: string
      enum:
        - WINDOWS
        - LINUX
        - MACOS
    StorageProfile:
      type: object
      properties:
        DisplayName:
          type: string
          maxLength: 100
          minLength: 1
        FarmId:
          type: string
          pattern: ^farm-[0-9a-f]{32}$
        FileSystemLocations:
          type: array
          items:
            $ref: '#/components/schemas/FileSystemLocation'
          maxItems: 20
          minItems: 0
        OsFamily:
          $ref: '#/components/schemas/StorageProfileOperatingSystemFamily'
        StorageProfileId:
          type: string
          pattern: ^sp-[0-9a-f]{32}$
      required:
        - DisplayName
        - OsFamily
      x-stackql-resource-name: storage_profile
      description: Definition of AWS::Deadline::StorageProfile Resource Type
      x-type-name: AWS::Deadline::StorageProfile
      x-stackql-primary-identifier:
        - FarmId
        - StorageProfileId
      x-create-only-properties:
        - FarmId
      x-read-only-properties:
        - StorageProfileId
      x-required-properties:
        - DisplayName
        - OsFamily
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - deadline:CreateStorageProfile
          - deadline:GetStorageProfile
          - identitystore:ListGroupMembershipsForMember
        read:
          - deadline:GetStorageProfile
          - identitystore:ListGroupMembershipsForMember
        update:
          - deadline:UpdateStorageProfile
          - deadline:GetStorageProfile
          - identitystore:ListGroupMembershipsForMember
        delete:
          - deadline:DeleteStorageProfile
          - deadline:GetStorageProfile
          - identitystore:ListGroupMembershipsForMember
        list:
          - deadline:ListStorageProfiles
          - identitystore:ListGroupMembershipsForMember
  x-stackQL-resources:
    farms:
      name: farms
      id: aws.deadline.farms
      x-cfn-schema-name: Farm
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::Farm'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::Farm'
                AND region = 'us-east-1'
    farm:
      name: farm
      id: aws.deadline.farm
      x-cfn-schema-name: Farm
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.FarmId') as farm_id,
              JSON_EXTRACT(Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::Farm'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'FarmId') as farm_id,
                json_extract_path_text(Properties, 'KmsKeyArn') as kms_key_arn,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::Farm'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    fleets:
      name: fleets
      id: aws.deadline.fleets
      x-cfn-schema-name: Fleet
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::Fleet'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::Fleet'
                AND region = 'us-east-1'
    fleet:
      name: fleet
      id: aws.deadline.fleet
      x-cfn-schema-name: Fleet
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Capabilities') as capabilities,
              JSON_EXTRACT(Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.FarmId') as farm_id,
              JSON_EXTRACT(Properties, '$.FleetId') as fleet_id,
              JSON_EXTRACT(Properties, '$.MaxWorkerCount') as max_worker_count,
              JSON_EXTRACT(Properties, '$.MinWorkerCount') as min_worker_count,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.WorkerCount') as worker_count,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::Fleet'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Capabilities') as capabilities,
                json_extract_path_text(Properties, 'Configuration') as configuration,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'FarmId') as farm_id,
                json_extract_path_text(Properties, 'FleetId') as fleet_id,
                json_extract_path_text(Properties, 'MaxWorkerCount') as max_worker_count,
                json_extract_path_text(Properties, 'MinWorkerCount') as min_worker_count,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'WorkerCount') as worker_count,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::Fleet'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    license_endpoints:
      name: license_endpoints
      id: aws.deadline.license_endpoints
      x-cfn-schema-name: LicenseEndpoint
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::LicenseEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::LicenseEndpoint'
                AND region = 'us-east-1'
    license_endpoint:
      name: license_endpoint
      id: aws.deadline.license_endpoint
      x-cfn-schema-name: LicenseEndpoint
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DnsName') as dns_name,
              JSON_EXTRACT(Properties, '$.LicenseEndpointId') as license_endpoint_id,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::LicenseEndpoint'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DnsName') as dns_name,
                json_extract_path_text(Properties, 'LicenseEndpointId') as license_endpoint_id,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'StatusMessage') as status_message,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::LicenseEndpoint'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    metered_products:
      name: metered_products
      id: aws.deadline.metered_products
      x-cfn-schema-name: MeteredProduct
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::MeteredProduct'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::MeteredProduct'
                AND region = 'us-east-1'
    metered_product:
      name: metered_product
      id: aws.deadline.metered_product
      x-cfn-schema-name: MeteredProduct
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LicenseEndpointId') as license_endpoint_id,
              JSON_EXTRACT(Properties, '$.ProductId') as product_id,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Family') as family,
              JSON_EXTRACT(Properties, '$.Vendor') as vendor,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::MeteredProduct'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'LicenseEndpointId') as license_endpoint_id,
                json_extract_path_text(Properties, 'ProductId') as product_id,
                json_extract_path_text(Properties, 'Port') as port,
                json_extract_path_text(Properties, 'Family') as family,
                json_extract_path_text(Properties, 'Vendor') as vendor,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::MeteredProduct'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    queues:
      name: queues
      id: aws.deadline.queues
      x-cfn-schema-name: Queue
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::Queue'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::Queue'
                AND region = 'us-east-1'
    queue:
      name: queue
      id: aws.deadline.queue
      x-cfn-schema-name: Queue
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AllowedStorageProfileIds') as allowed_storage_profile_ids,
              JSON_EXTRACT(Properties, '$.DefaultBudgetAction') as default_budget_action,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.FarmId') as farm_id,
              JSON_EXTRACT(Properties, '$.JobAttachmentSettings') as job_attachment_settings,
              JSON_EXTRACT(Properties, '$.JobRunAsUser') as job_run_as_user,
              JSON_EXTRACT(Properties, '$.QueueId') as queue_id,
              JSON_EXTRACT(Properties, '$.RequiredFileSystemLocationNames') as required_file_system_location_names,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::Queue'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AllowedStorageProfileIds') as allowed_storage_profile_ids,
                json_extract_path_text(Properties, 'DefaultBudgetAction') as default_budget_action,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'FarmId') as farm_id,
                json_extract_path_text(Properties, 'JobAttachmentSettings') as job_attachment_settings,
                json_extract_path_text(Properties, 'JobRunAsUser') as job_run_as_user,
                json_extract_path_text(Properties, 'QueueId') as queue_id,
                json_extract_path_text(Properties, 'RequiredFileSystemLocationNames') as required_file_system_location_names,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::Queue'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    queue_environments:
      name: queue_environments
      id: aws.deadline.queue_environments
      x-cfn-schema-name: QueueEnvironment
      x-type: list
      x-identifiers:
        - FarmId
        - QueueId
        - QueueEnvironmentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FarmId') as farm_id,
              JSON_EXTRACT(Properties, '$.QueueId') as queue_id,
              JSON_EXTRACT(Properties, '$.QueueEnvironmentId') as queue_environment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::QueueEnvironment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FarmId') as farm_id,
                json_extract_path_text(Properties, 'QueueId') as queue_id,
                json_extract_path_text(Properties, 'QueueEnvironmentId') as queue_environment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::QueueEnvironment'
                AND region = 'us-east-1'
    queue_environment:
      name: queue_environment
      id: aws.deadline.queue_environment
      x-cfn-schema-name: QueueEnvironment
      x-type: get
      x-identifiers:
        - FarmId
        - QueueId
        - QueueEnvironmentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FarmId') as farm_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Priority') as priority,
              JSON_EXTRACT(Properties, '$.QueueEnvironmentId') as queue_environment_id,
              JSON_EXTRACT(Properties, '$.QueueId') as queue_id,
              JSON_EXTRACT(Properties, '$.Template') as template,
              JSON_EXTRACT(Properties, '$.TemplateType') as template_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::QueueEnvironment'
              AND data__Identifier = '<FarmId>|<QueueId>|<QueueEnvironmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FarmId') as farm_id,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Priority') as priority,
                json_extract_path_text(Properties, 'QueueEnvironmentId') as queue_environment_id,
                json_extract_path_text(Properties, 'QueueId') as queue_id,
                json_extract_path_text(Properties, 'Template') as template,
                json_extract_path_text(Properties, 'TemplateType') as template_type
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::QueueEnvironment'
                AND data__Identifier = '<FarmId>|<QueueId>|<QueueEnvironmentId>'
                AND region = 'us-east-1'
    queue_fleet_associations:
      name: queue_fleet_associations
      id: aws.deadline.queue_fleet_associations
      x-cfn-schema-name: QueueFleetAssociation
      x-type: list
      x-identifiers:
        - FarmId
        - FleetId
        - QueueId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FarmId') as farm_id,
              JSON_EXTRACT(Properties, '$.FleetId') as fleet_id,
              JSON_EXTRACT(Properties, '$.QueueId') as queue_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::QueueFleetAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FarmId') as farm_id,
                json_extract_path_text(Properties, 'FleetId') as fleet_id,
                json_extract_path_text(Properties, 'QueueId') as queue_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::QueueFleetAssociation'
                AND region = 'us-east-1'
    queue_fleet_association:
      name: queue_fleet_association
      id: aws.deadline.queue_fleet_association
      x-cfn-schema-name: QueueFleetAssociation
      x-type: get
      x-identifiers:
        - FarmId
        - FleetId
        - QueueId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FarmId') as farm_id,
              JSON_EXTRACT(Properties, '$.FleetId') as fleet_id,
              JSON_EXTRACT(Properties, '$.QueueId') as queue_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::QueueFleetAssociation'
              AND data__Identifier = '<FarmId>|<FleetId>|<QueueId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FarmId') as farm_id,
                json_extract_path_text(Properties, 'FleetId') as fleet_id,
                json_extract_path_text(Properties, 'QueueId') as queue_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::QueueFleetAssociation'
                AND data__Identifier = '<FarmId>|<FleetId>|<QueueId>'
                AND region = 'us-east-1'
    storage_profiles:
      name: storage_profiles
      id: aws.deadline.storage_profiles
      x-cfn-schema-name: StorageProfile
      x-type: list
      x-identifiers:
        - FarmId
        - StorageProfileId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FarmId') as farm_id,
              JSON_EXTRACT(Properties, '$.StorageProfileId') as storage_profile_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::StorageProfile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FarmId') as farm_id,
                json_extract_path_text(Properties, 'StorageProfileId') as storage_profile_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Deadline::StorageProfile'
                AND region = 'us-east-1'
    storage_profile:
      name: storage_profile
      id: aws.deadline.storage_profile
      x-cfn-schema-name: StorageProfile
      x-type: get
      x-identifiers:
        - FarmId
        - StorageProfileId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.FarmId') as farm_id,
              JSON_EXTRACT(Properties, '$.FileSystemLocations') as file_system_locations,
              JSON_EXTRACT(Properties, '$.OsFamily') as os_family,
              JSON_EXTRACT(Properties, '$.StorageProfileId') as storage_profile_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::StorageProfile'
              AND data__Identifier = '<FarmId>|<StorageProfileId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'FarmId') as farm_id,
                json_extract_path_text(Properties, 'FileSystemLocations') as file_system_locations,
                json_extract_path_text(Properties, 'OsFamily') as os_family,
                json_extract_path_text(Properties, 'StorageProfileId') as storage_profile_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Deadline::StorageProfile'
                AND data__Identifier = '<FarmId>|<StorageProfileId>'
                AND region = 'us-east-1'
