openapi: 3.0.0
info:
  title: Logs
  version: 1.0.0
paths: {}
components:
  schemas:
    AccountPolicy:
      type: object
      properties:
        AccountId:
          description: User account id
          type: string
          pattern: ^\d{12}$
        PolicyName:
          description: The name of the account policy
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^[^:*]{1,256}$
        PolicyDocument:
          description: |-
            The body of the policy document you want to use for this topic.

            You can only add one policy per PolicyType.

            The policy must be in JSON string format.

            Length Constraints: Maximum length of 30720
          type: string
          minLength: 1
          maxLength: 30720
        PolicyType:
          description: Type of the policy.
          type: string
          enum:
            - DATA_PROTECTION_POLICY
            - SUBSCRIPTION_FILTER_POLICY
        Scope:
          description: Scope for policy application
          type: string
          enum:
            - ALL
        SelectionCriteria:
          description: Log group  selection criteria to apply policy only to a subset of log groups. SelectionCriteria string can be up to 25KB and cloudwatchlogs determines the length of selectionCriteria by using its UTF-8 bytes
          type: string
      required:
        - PolicyName
        - PolicyType
        - PolicyDocument
      x-stackql-resource-name: account_policy
      description: The AWS::Logs::AccountPolicy resource specifies a CloudWatch Logs AccountPolicy.
      x-type-name: AWS::Logs::AccountPolicy
      x-stackql-primary-identifier:
        - AccountId
        - PolicyType
        - PolicyName
      x-create-only-properties:
        - PolicyName
        - PolicyType
      x-read-only-properties:
        - AccountId
      x-required-properties:
        - PolicyName
        - PolicyType
        - PolicyDocument
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - logs:PutAccountPolicy
          - logs:PutDataProtectionPolicy
          - logs:DescribeAccountPolicies
          - logs:CreateLogDelivery
          - s3:REST.PUT.OBJECT
          - firehose:TagDeliveryStream
          - logs:PutSubscriptionFilter
          - logs:DeleteSubscriptionFilter
          - iam:PassRole
        read:
          - logs:DescribeAccountPolicies
        update:
          - logs:PutAccountPolicy
          - logs:PutDataProtectionPolicy
          - logs:DescribeAccountPolicies
          - logs:DeleteAccountPolicy
          - logs:DeleteDataProtectionPolicy
          - logs:CreateLogDelivery
          - logs:PutSubscriptionFilter
          - logs:DeleteSubscriptionFilter
          - s3:REST.PUT.OBJECT
          - firehose:TagDeliveryStream
          - iam:PassRole
        delete:
          - logs:DeleteAccountPolicy
          - logs:DeleteDataProtectionPolicy
          - logs:DescribeAccountPolicies
          - logs:DeleteSubscriptionFilter
          - iam:PassRole
        list:
          - logs:DescribeAccountPolicies
    Tag:
      description: ''
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: ''
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: ''
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
    Arn:
      description: The Amazon Resource Name (ARN) that uniquely identifies this delivery source.
      type: string
      minLength: 16
      maxLength: 2048
      pattern: ^arn:(aws[a-zA-Z-]*)?:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$
    Delivery:
      type: object
      properties:
        DeliveryId:
          description: The unique ID that identifies this delivery in your account.
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[0-9A-Za-z]+$
        Arn:
          description: The Amazon Resource Name (ARN) that uniquely identifies this delivery.
          $ref: '#/components/schemas/Arn'
        DeliverySourceName:
          description: The name of the delivery source that is associated with this delivery.
          type: string
          pattern: '[\w-]*$'
          minLength: 1
          maxLength: 60
        DeliveryDestinationArn:
          description: The ARN of the delivery destination that is associated with this delivery.
          $ref: '#/components/schemas/Arn'
        DeliveryDestinationType:
          description: Displays whether the delivery destination associated with this delivery is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.
          type: string
          minLength: 1
          maxLength: 12
          pattern: ^[0-9A-Za-z]+$
        Tags:
          description: The tags that have been assigned to this delivery.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DeliverySourceName
        - DeliveryDestinationArn
      x-stackql-resource-name: delivery
      description: |-
        This structure contains information about one delivery in your account.

        A delivery is a connection between a logical delivery source and a logical delivery destination.

        For more information, see [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html).
      x-type-name: AWS::Logs::Delivery
      x-stackql-primary-identifier:
        - DeliveryId
      x-create-only-properties:
        - DeliverySourceName
        - DeliveryDestinationArn
      x-read-only-properties:
        - DeliveryId
        - Arn
        - DeliveryDestinationType
      x-required-properties:
        - DeliverySourceName
        - DeliveryDestinationArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - logs:CreateDelivery
          - logs:GetDelivery
          - logs:DescribeDeliveries
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:GetDeliverySource
          - logs:GetDeliveryDestination
        read:
          - logs:GetDelivery
          - logs:ListTagsForResource
        update:
          - logs:GetDelivery
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:UntagResource
        delete:
          - logs:DeleteDelivery
          - logs:ListTagsForResource
          - logs:UntagResource
        list:
          - logs:DescribeDeliveries
          - logs:ListTagsForResource
    DestinationPolicy:
      type: object
      properties:
        DeliveryDestinationName:
          type: string
          description: The name of the delivery destination to assign this policy to
          minLength: 1
          maxLength: 60
        DeliveryDestinationPolicy:
          type: string
          description: The contents of the policy attached to the delivery destination
          minLength: 1
          maxLength: 51200
      required:
        - DeliveryDestinationName
        - DeliveryDestinationPolicy
      additionalProperties: false
    DeliveryDestination:
      type: object
      properties:
        Name:
          description: The name of this delivery destination.
          type: string
          pattern: '[\w-]*$'
          minLength: 1
          maxLength: 60
        Arn:
          description: The Amazon Resource Name (ARN) that uniquely identifies this delivery destination.
          $ref: '#/components/schemas/Arn'
        DestinationResourceArn:
          description: The ARN of the AWS resource that will receive the logs.
          $ref: '#/components/schemas/Arn'
        Tags:
          description: The tags that have been assigned to this delivery destination.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        DeliveryDestinationType:
          description: Displays whether this delivery destination is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.
          type: string
          minLength: 1
          maxLength: 12
          pattern: ^[0-9A-Za-z]+$
        DeliveryDestinationPolicy:
          description: |-
            IAM policy that grants permissions to CloudWatch Logs to deliver logs cross-account to a specified destination in this account.

            The policy must be in JSON string format.

            Length Constraints: Maximum length of 51200
          type: object
          items:
            $ref: '#/components/schemas/DestinationPolicy'
      required:
        - Name
      x-stackql-resource-name: delivery_destination
      description: |-
        This structure contains information about one delivery destination in your account.

        A delivery destination is an AWS resource that represents an AWS service that logs can be sent to CloudWatch Logs, Amazon S3, are supported as Kinesis Data Firehose delivery destinations.
      x-type-name: AWS::Logs::DeliveryDestination
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - DestinationResourceArn
      x-read-only-properties:
        - Arn
        - DeliveryDestinationType
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - logs:PutDeliveryDestination
          - logs:GetDeliveryDestination
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:UntagResource
          - logs:PutDeliveryDestinationPolicy
          - logs:GetDeliveryDestinationPolicy
        read:
          - logs:GetDeliveryDestination
          - logs:ListTagsForResource
          - logs:GetDeliveryDestinationPolicy
        update:
          - logs:PutDeliveryDestination
          - logs:GetDeliveryDestination
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:UntagResource
          - logs:DeleteDeliveryDestinationPolicy
          - logs:PutDeliveryDestinationPolicy
          - logs:GetDeliveryDestinationPolicy
        delete:
          - logs:DeleteDeliveryDestination
          - logs:DeleteDeliveryDestinationPolicy
        list:
          - logs:DescribeDeliveryDestinations
          - logs:GetDeliveryDestinationPolicy
    DeliverySource:
      type: object
      properties:
        Name:
          description: The unique name of the Log source.
          type: string
          pattern: '[\w-]*$'
          minLength: 1
          maxLength: 60
        Arn:
          description: The Amazon Resource Name (ARN) that uniquely identifies this delivery source.
          $ref: '#/components/schemas/Arn'
        ResourceArns:
          description: This array contains the ARN of the AWS resource that sends logs and is represented by this delivery source. Currently, only one ARN can be in the array.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Arn'
        ResourceArn:
          description: The ARN of the resource that will be sending the logs.
          $ref: '#/components/schemas/Arn'
        Service:
          description: The AWS service that is sending logs.
          type: string
          pattern: '[\w-]*$'
          minLength: 1
          maxLength: 255
        LogType:
          description: The type of logs being delivered. Only mandatory when the resourceArn could match more than one. In such a case, the error message will contain all the possible options.
          type: string
          pattern: '[\w-]*$'
          minLength: 1
          maxLength: 255
        Tags:
          description: The tags that have been assigned to this delivery source.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
      x-stackql-resource-name: delivery_source
      description: |2-
         A delivery source is an AWS resource that sends logs to an AWS destination. The destination can be CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.

        Only some AWS services support being configured as a delivery source. These services are listed as Supported [V2 Permissions] in the table at [Enabling logging from AWS services](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html).
      x-type-name: AWS::Logs::DeliverySource
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
      x-write-only-properties:
        - ResourceArn
      x-read-only-properties:
        - Service
        - ResourceArns
        - Arn
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - logs:PutDeliverySource
          - logs:GetDeliverySource
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:AllowVendedLogDeliveryForResource
          - codewhisperer:AllowVendedLogDeliveryForResource
          - autoloop:AllowVendedLogDeliveryForResource
          - workmail:AllowVendedLogDeliveryForResource
        read:
          - logs:GetDeliverySource
          - logs:ListTagsForResource
        update:
          - logs:PutDeliverySource
          - logs:GetDeliverySource
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:UntagResource
        delete:
          - logs:DeleteDeliverySource
        list:
          - logs:DescribeDeliverySources
    Destination:
      type: object
      properties:
        Arn:
          type: string
        DestinationName:
          description: The name of the destination resource
          type: string
          minLength: 1
          maxLength: 512
          pattern: ^[^:*]{1,512}$
        DestinationPolicy:
          description: An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
          type: string
          minLength: 1
        RoleArn:
          description: The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
          type: string
          minLength: 1
        TargetArn:
          description: The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
          type: string
          minLength: 1
      required:
        - DestinationName
        - TargetArn
        - RoleArn
      x-stackql-resource-name: destination
      description: The AWS::Logs::Destination resource specifies a CloudWatch Logs destination. A destination encapsulates a physical resource (such as an Amazon Kinesis data stream) and enables you to subscribe that resource to a stream of log events.
      x-type-name: AWS::Logs::Destination
      x-stackql-primary-identifier:
        - DestinationName
      x-create-only-properties:
        - DestinationName
      x-read-only-properties:
        - Arn
      x-required-properties:
        - DestinationName
        - TargetArn
        - RoleArn
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - logs:PutDestination
          - logs:PutDestinationPolicy
          - logs:DescribeDestinations
          - iam:PassRole
        read:
          - logs:DescribeDestinations
        update:
          - logs:PutDestination
          - logs:PutDestinationPolicy
          - logs:DescribeDestinations
          - iam:PassRole
        delete:
          - logs:DeleteDestination
        list:
          - logs:DescribeDestinations
    LogAnomalyDetector:
      type: object
      properties:
        AccountId:
          description: Account ID for owner of detector
          type: string
        KmsKeyId:
          description: The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.
          type: string
          maxLength: 256
        DetectorName:
          description: Name of detector
          type: string
        LogGroupArnList:
          description: List of Arns for the given log group
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
            minLength: 20
            maxLength: 2048
        EvaluationFrequency:
          description: How often log group is evaluated
          type: string
          enum:
            - FIVE_MIN
            - TEN_MIN
            - FIFTEEN_MIN
            - THIRTY_MIN
            - ONE_HOUR
        FilterPattern:
          description: ''
          type: string
          pattern: ''
        AnomalyDetectorStatus:
          description: Current status of detector.
          type: string
        AnomalyVisibilityTime:
          description: ''
          type: number
        CreationTimeStamp:
          description: When detector was created.
          type: number
        LastModifiedTimeStamp:
          description: When detector was lsat modified.
          type: number
        AnomalyDetectorArn:
          description: ARN of LogAnomalyDetector
          type: string
      required: []
      x-stackql-resource-name: log_anomaly_detector
      description: The AWS::Logs::LogAnomalyDetector resource specifies a CloudWatch Logs LogAnomalyDetector.
      x-type-name: AWS::Logs::LogAnomalyDetector
      x-stackql-primary-identifier:
        - AnomalyDetectorArn
      x-write-only-properties:
        - AccountId
      x-read-only-properties:
        - AnomalyDetectorArn
        - CreationTimeStamp
        - LastModifiedTimeStamp
        - AnomalyDetectorStatus
      x-required-properties: []
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - logs:CreateLogAnomalyDetector
        read:
          - logs:GetLogAnomalyDetector
        update:
          - logs:UpdateLogAnomalyDetector
        delete:
          - logs:DeleteLogAnomalyDetector
        list:
          - logs:ListLogAnomalyDetectors
    LogGroup:
      type: string
      pattern: '[\.\-_/#A-Za-z0-9]+'
      minLength: 1
      maxLength: 512
    LogStream:
      type: object
      properties:
        LogStreamName:
          description: The name of the log stream. The name must be unique wihtin the log group.
          type: string
        LogGroupName:
          description: The name of the log group where the log stream is created.
          type: string
      required:
        - LogGroupName
      x-stackql-resource-name: log_stream
      description: Resource Type definition for AWS::Logs::LogStream
      x-type-name: AWS::Logs::LogStream
      x-stackql-primary-identifier:
        - LogGroupName
        - LogStreamName
      x-create-only-properties:
        - LogGroupName
        - LogStreamName
      x-required-properties:
        - LogGroupName
      x-tagging:
        taggable: false
      x-required-permissions:
        read:
          - logs:DescribeLogStreams
        create:
          - logs:CreateLogStream
          - logs:DescribeLogStreams
        list:
          - logs:DescribeLogStreams
        delete:
          - logs:DeleteLogStream
    MetricTransformation:
      description: '``MetricTransformation`` is a property of the ``AWS::Logs::MetricFilter`` resource that describes how to transform log streams into a CloudWatch metric.'
      additionalProperties: false
      type: object
      properties:
        DefaultValue:
          description: (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
          type: number
        MetricName:
          minLength: 1
          pattern: ^((?![:*$])[\x00-\x7F]){1,255}
          description: The name of the CloudWatch metric.
          type: string
          maxLength: 255
        MetricValue:
          minLength: 1
          pattern: .{1,100}
          description: The value that is published to the CloudWatch metric. For example, if you're counting the occurrences of a particular term like ``Error``, specify 1 for the metric value. If you're counting the number of bytes transferred, reference the value that is in the log event by using $. followed by the name of the field that you specified in the filter pattern, such as ``$.size``.
          type: string
          maxLength: 100
        MetricNamespace:
          minLength: 1
          pattern: ^[0-9a-zA-Z\.\-_\/#]{1,256}
          description: A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
          x-$comment: Namespaces can be up to 256 characters long; valid characters include 0-9A-Za-z.-_/#
          type: string
          maxLength: 256
        Dimensions:
          minItems: 1
          maxItems: 3
          uniqueItems: true
          description: |-
            The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions.
              Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. 
             CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges.
             You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Dimension'
        Unit:
          description: The unit to assign to the metric. If you omit this, the unit is set as ``None``.
          type: string
          enum:
            - Seconds
            - Microseconds
            - Milliseconds
            - Bytes
            - Kilobytes
            - Megabytes
            - Gigabytes
            - Terabytes
            - Bits
            - Kilobits
            - Megabits
            - Gigabits
            - Terabits
            - Percent
            - Count
            - Bytes/Second
            - Kilobytes/Second
            - Megabytes/Second
            - Gigabytes/Second
            - Terabytes/Second
            - Bits/Second
            - Kilobits/Second
            - Megabits/Second
            - Gigabits/Second
            - Terabits/Second
            - Count/Second
            - None
      required:
        - MetricName
        - MetricNamespace
        - MetricValue
    Dimension:
      description: |-
        Specifies the CW metric dimensions to publish with this metric.
          Because dimensions are part of the unique identifier for a metric, whenever a unique dimension name/value pair is extracted from your logs, you are creating a new variation of that metric.
         For more information about publishing dimensions with metrics created by metric filters, see [Publishing dimensions with metrics from values in JSON or space-delimited log events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html#logs-metric-filters-dimensions).
          Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. 
         To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time.
         You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
      additionalProperties: false
      type: object
      properties:
        Value:
          minLength: 1
          description: The log event field that will contain the value for this dimension. This dimension will only be published for a metric if the value is found in the log event. For example, ``$.eventType`` for JSON log events, or ``$server`` for space-delimited log events.
          type: string
          maxLength: 255
        Key:
          minLength: 1
          description: |-
            The name for the CW metric dimension that the metric filter creates.
             Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:).
          type: string
          maxLength: 255
      required:
        - Key
        - Value
    MetricFilter:
      type: object
      properties:
        MetricTransformations:
          minItems: 1
          maxItems: 1
          description: The metric transformations.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/MetricTransformation'
        FilterPattern:
          description: A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
          type: string
          maxLength: 1024
        LogGroupName:
          minLength: 1
          pattern: ^[.\-_/#A-Za-z0-9]{1,512}
          description: The name of an existing log group that you want to associate with this metric filter.
          type: string
          maxLength: 512
        FilterName:
          minLength: 1
          pattern: ^[^:*]{1,512}
          description: The name of the metric filter.
          type: string
          maxLength: 512
      required:
        - FilterPattern
        - LogGroupName
        - MetricTransformations
      x-stackql-resource-name: metric_filter
      description: |-
        The ``AWS::Logs::MetricFilter`` resource specifies a metric filter that describes how CWL extracts information from logs and transforms it into Amazon CloudWatch metrics. If you have multiple metric filters that are associated with a log group, all the filters are applied to the log streams in that group.
         The maximum number of metric filters that can be associated with a log group is 100.
      x-type-name: AWS::Logs::MetricFilter
      x-stackql-primary-identifier:
        - LogGroupName
        - FilterName
      x-create-only-properties:
        - FilterName
        - LogGroupName
      x-required-properties:
        - FilterPattern
        - LogGroupName
        - MetricTransformations
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
      x-required-permissions:
        read:
          - logs:DescribeMetricFilters
        create:
          - logs:PutMetricFilter
          - logs:DescribeMetricFilters
        update:
          - logs:PutMetricFilter
          - logs:DescribeMetricFilters
        list:
          - logs:DescribeMetricFilters
        delete:
          - logs:DeleteMetricFilter
    QueryDefinition:
      type: object
      properties:
        Name:
          description: A name for the saved query definition
          type: string
          minLength: 1
          maxLength: 255
        QueryString:
          description: The query string to use for this definition
          type: string
          minLength: 1
          maxLength: 10000
        LogGroupNames:
          description: Optionally define specific log groups as part of your query definition
          type: array
          x-insertionOrder: false
          items:
            description: LogGroup name
            $ref: '#/components/schemas/LogGroup'
        QueryDefinitionId:
          description: Unique identifier of a query definition
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Name
        - QueryString
      x-stackql-resource-name: query_definition
      description: The resource schema for AWSLogs QueryDefinition
      x-type-name: AWS::Logs::QueryDefinition
      x-stackql-primary-identifier:
        - QueryDefinitionId
      x-read-only-properties:
        - QueryDefinitionId
      x-required-properties:
        - Name
        - QueryString
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - logs:PutQueryDefinition
        read:
          - logs:DescribeQueryDefinitions
        update:
          - logs:PutQueryDefinition
        delete:
          - logs:DeleteQueryDefinition
        list:
          - logs:DescribeQueryDefinitions
    ResourcePolicy:
      type: object
      properties:
        PolicyName:
          description: A name for resource policy
          type: string
          pattern: ^([^:*\/]+\/?)*[^:*\/]+$
          minLength: 1
          maxLength: 255
        PolicyDocument:
          description: The policy document
          type: string
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          minLength: 1
          maxLength: 5120
      required:
        - PolicyName
        - PolicyDocument
      x-stackql-resource-name: resource_policy
      description: The resource schema for AWSLogs ResourcePolicy
      x-type-name: AWS::Logs::ResourcePolicy
      x-stackql-primary-identifier:
        - PolicyName
      x-create-only-properties:
        - PolicyName
      x-required-properties:
        - PolicyName
        - PolicyDocument
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
        read:
          - logs:DescribeResourcePolicies
        update:
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
          - logs:DeleteResourcePolicy
        delete:
          - logs:DeleteResourcePolicy
        list:
          - logs:DescribeResourcePolicies
    SubscriptionFilter:
      type: object
      properties:
        FilterName:
          description: The name of the subscription filter.
          type: string
        DestinationArn:
          description: The Amazon Resource Name (ARN) of the destination.
          type: string
        FilterPattern:
          description: The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
          type: string
        LogGroupName:
          description: The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.
          type: string
        RoleArn:
          description: The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
          type: string
        Distribution:
          description: The method used to distribute log data to the destination, which can be either random or grouped by log stream.
          type: string
          enum:
            - Random
            - ByLogStream
      required:
        - DestinationArn
        - FilterPattern
        - LogGroupName
      x-stackql-resource-name: subscription_filter
      description: |-
        The ``AWS::Logs::SubscriptionFilter`` resource specifies a subscription filter and associates it with the specified log group. Subscription filters allow you to subscribe to a real-time stream of log events and have them delivered to a specific destination. Currently, the supported destinations are:
          +  An Amazon Kinesis data stream belonging to the same account as the subscription filter, for same-account delivery.
          +  A logical destination that belongs to a different account, for cross-account delivery.
          +  An Amazon Kinesis Firehose delivery stream that belongs to the same account as the subscription filter, for same-account delivery.
          +  An LAMlong function that belongs to the same account as the subscription filter, for same-account delivery.
          
         There can be as many as two subscription filters associated with a log group.
      x-type-name: AWS::Logs::SubscriptionFilter
      x-stackql-primary-identifier:
        - FilterName
        - LogGroupName
      x-create-only-properties:
        - FilterName
        - LogGroupName
      x-required-properties:
        - DestinationArn
        - FilterPattern
        - LogGroupName
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - iam:PassRole
          - logs:PutSubscriptionFilter
          - logs:DescribeSubscriptionFilters
        read:
          - logs:DescribeSubscriptionFilters
        update:
          - iam:PassRole
          - logs:PutSubscriptionFilter
          - logs:DescribeSubscriptionFilters
        delete:
          - logs:DeleteSubscriptionFilter
        list:
          - logs:DescribeSubscriptionFilters
  x-stackQL-resources:
    account_policies:
      name: account_policies
      id: aws.logs.account_policies
      x-cfn-schema-name: AccountPolicy
      x-type: list
      x-identifiers:
        - AccountId
        - PolicyType
        - PolicyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(Properties, '$.PolicyType') as policy_type,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::AccountPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccountId') as account_id,
                json_extract_path_text(Properties, 'PolicyType') as policy_type,
                json_extract_path_text(Properties, 'PolicyName') as policy_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::AccountPolicy'
                AND region = 'us-east-1'
    account_policy:
      name: account_policy
      id: aws.logs.account_policy
      x-cfn-schema-name: AccountPolicy
      x-type: get
      x-identifiers:
        - AccountId
        - PolicyType
        - PolicyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyType') as policy_type,
              JSON_EXTRACT(Properties, '$.Scope') as scope,
              JSON_EXTRACT(Properties, '$.SelectionCriteria') as selection_criteria
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::AccountPolicy'
              AND data__Identifier = '<AccountId>|<PolicyType>|<PolicyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AccountId') as account_id,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PolicyType') as policy_type,
                json_extract_path_text(Properties, 'Scope') as scope,
                json_extract_path_text(Properties, 'SelectionCriteria') as selection_criteria
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::AccountPolicy'
                AND data__Identifier = '<AccountId>|<PolicyType>|<PolicyName>'
                AND region = 'us-east-1'
    deliveries:
      name: deliveries
      id: aws.logs.deliveries
      x-cfn-schema-name: Delivery
      x-type: list
      x-identifiers:
        - DeliveryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DeliveryId') as delivery_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::Delivery'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DeliveryId') as delivery_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::Delivery'
                AND region = 'us-east-1'
    delivery:
      name: delivery
      id: aws.logs.delivery
      x-cfn-schema-name: Delivery
      x-type: get
      x-identifiers:
        - DeliveryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DeliveryId') as delivery_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DeliverySourceName') as delivery_source_name,
              JSON_EXTRACT(Properties, '$.DeliveryDestinationArn') as delivery_destination_arn,
              JSON_EXTRACT(Properties, '$.DeliveryDestinationType') as delivery_destination_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::Delivery'
              AND data__Identifier = '<DeliveryId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DeliveryId') as delivery_id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DeliverySourceName') as delivery_source_name,
                json_extract_path_text(Properties, 'DeliveryDestinationArn') as delivery_destination_arn,
                json_extract_path_text(Properties, 'DeliveryDestinationType') as delivery_destination_type,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::Delivery'
                AND data__Identifier = '<DeliveryId>'
                AND region = 'us-east-1'
    delivery_destinations:
      name: delivery_destinations
      id: aws.logs.delivery_destinations
      x-cfn-schema-name: DeliveryDestination
      x-type: list
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::DeliveryDestination'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::DeliveryDestination'
                AND region = 'us-east-1'
    delivery_destination:
      name: delivery_destination
      id: aws.logs.delivery_destination
      x-cfn-schema-name: DeliveryDestination
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DestinationResourceArn') as destination_resource_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.DeliveryDestinationType') as delivery_destination_type,
              JSON_EXTRACT(Properties, '$.DeliveryDestinationPolicy') as delivery_destination_policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::DeliveryDestination'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DestinationResourceArn') as destination_resource_arn,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'DeliveryDestinationType') as delivery_destination_type,
                json_extract_path_text(Properties, 'DeliveryDestinationPolicy') as delivery_destination_policy
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::DeliveryDestination'
                AND data__Identifier = '<Name>'
                AND region = 'us-east-1'
    delivery_sources:
      name: delivery_sources
      id: aws.logs.delivery_sources
      x-cfn-schema-name: DeliverySource
      x-type: list
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::DeliverySource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::DeliverySource'
                AND region = 'us-east-1'
    delivery_source:
      name: delivery_source
      id: aws.logs.delivery_source
      x-cfn-schema-name: DeliverySource
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ResourceArns') as resource_arns,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.Service') as service,
              JSON_EXTRACT(Properties, '$.LogType') as log_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::DeliverySource'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ResourceArns') as resource_arns,
                json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(Properties, 'Service') as service,
                json_extract_path_text(Properties, 'LogType') as log_type,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::DeliverySource'
                AND data__Identifier = '<Name>'
                AND region = 'us-east-1'
    destinations:
      name: destinations
      id: aws.logs.destinations
      x-cfn-schema-name: Destination
      x-type: list
      x-identifiers:
        - DestinationName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DestinationName') as destination_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::Destination'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DestinationName') as destination_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::Destination'
                AND region = 'us-east-1'
    destination:
      name: destination
      id: aws.logs.destination
      x-cfn-schema-name: Destination
      x-type: get
      x-identifiers:
        - DestinationName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DestinationName') as destination_name,
              JSON_EXTRACT(Properties, '$.DestinationPolicy') as destination_policy,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.TargetArn') as target_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::Destination'
              AND data__Identifier = '<DestinationName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DestinationName') as destination_name,
                json_extract_path_text(Properties, 'DestinationPolicy') as destination_policy,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'TargetArn') as target_arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::Destination'
                AND data__Identifier = '<DestinationName>'
                AND region = 'us-east-1'
    log_anomaly_detectors:
      name: log_anomaly_detectors
      id: aws.logs.log_anomaly_detectors
      x-cfn-schema-name: LogAnomalyDetector
      x-type: list
      x-identifiers:
        - AnomalyDetectorArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AnomalyDetectorArn') as anomaly_detector_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::LogAnomalyDetector'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AnomalyDetectorArn') as anomaly_detector_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::LogAnomalyDetector'
                AND region = 'us-east-1'
    log_anomaly_detector:
      name: log_anomaly_detector
      id: aws.logs.log_anomaly_detector
      x-cfn-schema-name: LogAnomalyDetector
      x-type: get
      x-identifiers:
        - AnomalyDetectorArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.DetectorName') as detector_name,
              JSON_EXTRACT(Properties, '$.LogGroupArnList') as log_group_arn_list,
              JSON_EXTRACT(Properties, '$.EvaluationFrequency') as evaluation_frequency,
              JSON_EXTRACT(Properties, '$.FilterPattern') as filter_pattern,
              JSON_EXTRACT(Properties, '$.AnomalyDetectorStatus') as anomaly_detector_status,
              JSON_EXTRACT(Properties, '$.AnomalyVisibilityTime') as anomaly_visibility_time,
              JSON_EXTRACT(Properties, '$.CreationTimeStamp') as creation_time_stamp,
              JSON_EXTRACT(Properties, '$.LastModifiedTimeStamp') as last_modified_time_stamp,
              JSON_EXTRACT(Properties, '$.AnomalyDetectorArn') as anomaly_detector_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::LogAnomalyDetector'
              AND data__Identifier = '<AnomalyDetectorArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AccountId') as account_id,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'DetectorName') as detector_name,
                json_extract_path_text(Properties, 'LogGroupArnList') as log_group_arn_list,
                json_extract_path_text(Properties, 'EvaluationFrequency') as evaluation_frequency,
                json_extract_path_text(Properties, 'FilterPattern') as filter_pattern,
                json_extract_path_text(Properties, 'AnomalyDetectorStatus') as anomaly_detector_status,
                json_extract_path_text(Properties, 'AnomalyVisibilityTime') as anomaly_visibility_time,
                json_extract_path_text(Properties, 'CreationTimeStamp') as creation_time_stamp,
                json_extract_path_text(Properties, 'LastModifiedTimeStamp') as last_modified_time_stamp,
                json_extract_path_text(Properties, 'AnomalyDetectorArn') as anomaly_detector_arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::LogAnomalyDetector'
                AND data__Identifier = '<AnomalyDetectorArn>'
                AND region = 'us-east-1'
    log_streams:
      name: log_streams
      id: aws.logs.log_streams
      x-cfn-schema-name: LogStream
      x-type: list
      x-identifiers:
        - LogGroupName
        - LogStreamName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.LogStreamName') as log_stream_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::LogStream'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name,
                json_extract_path_text(Properties, 'LogStreamName') as log_stream_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::LogStream'
                AND region = 'us-east-1'
    log_stream:
      name: log_stream
      id: aws.logs.log_stream
      x-cfn-schema-name: LogStream
      x-type: get
      x-identifiers:
        - LogGroupName
        - LogStreamName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LogStreamName') as log_stream_name,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::LogStream'
              AND data__Identifier = '<LogGroupName>|<LogStreamName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'LogStreamName') as log_stream_name,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::LogStream'
                AND data__Identifier = '<LogGroupName>|<LogStreamName>'
                AND region = 'us-east-1'
    metric_filters:
      name: metric_filters
      id: aws.logs.metric_filters
      x-cfn-schema-name: MetricFilter
      x-type: list
      x-identifiers:
        - LogGroupName
        - FilterName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.FilterName') as filter_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::MetricFilter'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name,
                json_extract_path_text(Properties, 'FilterName') as filter_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::MetricFilter'
                AND region = 'us-east-1'
    metric_filter:
      name: metric_filter
      id: aws.logs.metric_filter
      x-cfn-schema-name: MetricFilter
      x-type: get
      x-identifiers:
        - LogGroupName
        - FilterName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.MetricTransformations') as metric_transformations,
              JSON_EXTRACT(Properties, '$.FilterPattern') as filter_pattern,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.FilterName') as filter_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::MetricFilter'
              AND data__Identifier = '<LogGroupName>|<FilterName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'MetricTransformations') as metric_transformations,
                json_extract_path_text(Properties, 'FilterPattern') as filter_pattern,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name,
                json_extract_path_text(Properties, 'FilterName') as filter_name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::MetricFilter'
                AND data__Identifier = '<LogGroupName>|<FilterName>'
                AND region = 'us-east-1'
    query_definitions:
      name: query_definitions
      id: aws.logs.query_definitions
      x-cfn-schema-name: QueryDefinition
      x-type: list
      x-identifiers:
        - QueryDefinitionId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.QueryDefinitionId') as query_definition_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::QueryDefinition'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'QueryDefinitionId') as query_definition_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::QueryDefinition'
                AND region = 'us-east-1'
    query_definition:
      name: query_definition
      id: aws.logs.query_definition
      x-cfn-schema-name: QueryDefinition
      x-type: get
      x-identifiers:
        - QueryDefinitionId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.QueryString') as query_string,
              JSON_EXTRACT(Properties, '$.LogGroupNames') as log_group_names,
              JSON_EXTRACT(Properties, '$.QueryDefinitionId') as query_definition_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::QueryDefinition'
              AND data__Identifier = '<QueryDefinitionId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'QueryString') as query_string,
                json_extract_path_text(Properties, 'LogGroupNames') as log_group_names,
                json_extract_path_text(Properties, 'QueryDefinitionId') as query_definition_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::QueryDefinition'
                AND data__Identifier = '<QueryDefinitionId>'
                AND region = 'us-east-1'
    resource_policies:
      name: resource_policies
      id: aws.logs.resource_policies
      x-cfn-schema-name: ResourcePolicy
      x-type: list
      x-identifiers:
        - PolicyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::ResourcePolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyName') as policy_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::ResourcePolicy'
                AND region = 'us-east-1'
    resource_policy:
      name: resource_policy
      id: aws.logs.resource_policy
      x-cfn-schema-name: ResourcePolicy
      x-type: get
      x-identifiers:
        - PolicyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::ResourcePolicy'
              AND data__Identifier = '<PolicyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::ResourcePolicy'
                AND data__Identifier = '<PolicyName>'
                AND region = 'us-east-1'
    subscription_filters:
      name: subscription_filters
      id: aws.logs.subscription_filters
      x-cfn-schema-name: SubscriptionFilter
      x-type: list
      x-identifiers:
        - FilterName
        - LogGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FilterName') as filter_name,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::SubscriptionFilter'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FilterName') as filter_name,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::SubscriptionFilter'
                AND region = 'us-east-1'
    subscription_filter:
      name: subscription_filter
      id: aws.logs.subscription_filter
      x-cfn-schema-name: SubscriptionFilter
      x-type: get
      x-identifiers:
        - FilterName
        - LogGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FilterName') as filter_name,
              JSON_EXTRACT(Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(Properties, '$.FilterPattern') as filter_pattern,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Distribution') as distribution
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::SubscriptionFilter'
              AND data__Identifier = '<FilterName>|<LogGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FilterName') as filter_name,
                json_extract_path_text(Properties, 'DestinationArn') as destination_arn,
                json_extract_path_text(Properties, 'FilterPattern') as filter_pattern,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Distribution') as distribution
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::SubscriptionFilter'
                AND data__Identifier = '<FilterName>|<LogGroupName>'
                AND region = 'us-east-1'
