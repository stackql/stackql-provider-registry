openapi: 3.0.0
info:
  title: MediaPackageV2
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    IngestEndpoint:
      type: object
      description: <p>The ingest domain URL where the source stream should be sent.</p>
      properties:
        Id:
          type: string
          description: <p>The system-generated unique identifier for the IngestEndpoint.</p>
        Url:
          type: string
          description: <p>The ingest domain URL where the source stream should be sent.</p>
      additionalProperties: false
    InputType:
      type: string
      enum:
        - HLS
        - CMAF
    Tag:
      type: object
      properties:
        Key:
          type: string
        Value:
          type: string
      additionalProperties: false
    Channel:
      type: object
      properties:
        Arn:
          type: string
          description: <p>The Amazon Resource Name (ARN) associated with the resource.</p>
        ChannelGroupName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        ChannelName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        CreatedAt:
          type: string
          description: <p>The date and time the channel was created.</p>
          format: date-time
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          description: <p>Enter any descriptive text that helps you to identify the channel.</p>
        IngestEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/IngestEndpoint'
          description: <p>The list of ingest endpoints.</p>
        InputType:
          $ref: '#/components/schemas/InputType'
        ModifiedAt:
          type: string
          description: <p>The date and time the channel was modified.</p>
          format: date-time
        IngestEndpointUrls:
          type: array
          items:
            type: string
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ChannelGroupName
        - ChannelName
      x-stackql-resource-name: channel
      description: <p>Represents an entry point into AWS Elemental MediaPackage for an ABR video content stream sent from an upstream encoder such as AWS Elemental MediaLive. The channel continuously analyzes the content that it receives and prepares it to be distributed to consumers via one or more origin endpoints.</p>
      x-type-name: AWS::MediaPackageV2::Channel
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - ChannelGroupName
          - ChannelName
      x-create-only-properties:
        - ChannelGroupName
        - ChannelName
        - InputType
      x-read-only-properties:
        - Arn
        - CreatedAt
        - IngestEndpoints
        - IngestEndpointUrls
        - ModifiedAt
      x-required-properties:
        - ChannelGroupName
        - ChannelName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - mediapackagev2:TagResource
          - mediapackagev2:UntagResource
          - mediapackagev2:ListTagsForResource
      x-required-permissions:
        create:
          - mediapackagev2:TagResource
          - mediapackagev2:CreateChannel
        read:
          - mediapackagev2:GetChannel
        update:
          - mediapackagev2:TagResource
          - mediapackagev2:UntagResource
          - mediapackagev2:ListTagsForResource
          - mediapackagev2:UpdateChannel
        delete:
          - mediapackagev2:GetChannel
          - mediapackagev2:DeleteChannel
        list:
          - mediapackagev2:ListChannels
    ChannelGroup:
      type: object
      properties:
        Arn:
          type: string
          description: <p>The Amazon Resource Name (ARN) associated with the resource.</p>
        ChannelGroupName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        CreatedAt:
          type: string
          description: <p>The date and time the channel group was created.</p>
          format: date-time
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          description: <p>Enter any descriptive text that helps you to identify the channel group.</p>
        EgressDomain:
          type: string
          description: <p>The output domain where the source stream should be sent. Integrate the domain with a downstream CDN (such as Amazon CloudFront) or playback device.</p>
        ModifiedAt:
          type: string
          description: <p>The date and time the channel group was modified.</p>
          format: date-time
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ChannelGroupName
      x-stackql-resource-name: channel_group
      description: <p>Represents a channel group that facilitates the grouping of multiple channels.</p>
      x-type-name: AWS::MediaPackageV2::ChannelGroup
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - ChannelGroupName
      x-create-only-properties:
        - ChannelGroupName
      x-read-only-properties:
        - Arn
        - CreatedAt
        - EgressDomain
        - ModifiedAt
      x-required-properties:
        - ChannelGroupName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - mediapackagev2:TagResource
          - mediapackagev2:UntagResource
          - mediapackagev2:ListTagsForResource
      x-required-permissions:
        create:
          - mediapackagev2:TagResource
          - mediapackagev2:CreateChannelGroup
        read:
          - mediapackagev2:GetChannelGroup
        update:
          - mediapackagev2:TagResource
          - mediapackagev2:UntagResource
          - mediapackagev2:ListTagsForResource
          - mediapackagev2:UpdateChannelGroup
        delete:
          - mediapackagev2:GetChannelGroup
          - mediapackagev2:DeleteChannelGroup
        list:
          - mediapackagev2:ListChannelGroups
    ChannelPolicy:
      type: object
      properties:
        ChannelGroupName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        ChannelName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        Policy:
          type: object
      required:
        - ChannelGroupName
        - ChannelName
        - Policy
      x-stackql-resource-name: channel_policy
      description: <p>Represents a resource-based policy that allows or denies access to a channel.</p>
      x-type-name: AWS::MediaPackageV2::ChannelPolicy
      x-stackql-primary-identifier:
        - ChannelGroupName
        - ChannelName
      x-create-only-properties:
        - ChannelGroupName
        - ChannelName
      x-required-properties:
        - ChannelGroupName
        - ChannelName
        - Policy
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - mediapackagev2:GetChannelPolicy
          - mediapackagev2:PutChannelPolicy
        read:
          - mediapackagev2:GetChannelPolicy
        update:
          - mediapackagev2:GetChannelPolicy
          - mediapackagev2:PutChannelPolicy
        delete:
          - mediapackagev2:GetChannelPolicy
          - mediapackagev2:DeleteChannelPolicy
    AdMarkerDash:
      type: string
      enum:
        - BINARY
        - XML
    AdMarkerHls:
      type: string
      enum:
        - DATERANGE
    CmafEncryptionMethod:
      type: string
      enum:
        - CENC
        - CBCS
    ContainerType:
      type: string
      enum:
        - TS
        - CMAF
    DashDrmSignaling:
      type: string
      enum:
        - INDIVIDUAL
        - REFERENCED
    DashPeriodTrigger:
      type: string
      enum:
        - AVAILS
        - DRM_KEY_ROTATION
        - SOURCE_CHANGES
        - SOURCE_DISRUPTIONS
        - NONE
    DashSegmentTemplateFormat:
      type: string
      enum:
        - NUMBER_WITH_TIMELINE
    DashUtcTiming:
      type: object
      description: <p>Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).</p>
      properties:
        TimingMode:
          $ref: '#/components/schemas/DashUtcTimingMode'
        TimingSource:
          type: string
          maxLength: 1024
          minLength: 1
          description: <p>The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.</p>
      additionalProperties: false
    DashUtcTimingMode:
      type: string
      enum:
        - HTTP_HEAD
        - HTTP_ISO
        - HTTP_XSDATE
        - UTC_DIRECT
    DrmSystem:
      type: string
      enum:
        - CLEAR_KEY_AES_128
        - FAIRPLAY
        - PLAYREADY
        - WIDEVINE
        - IRDETO
    Encryption:
      type: object
      description: <p>The parameters for encrypting content.</p>
      properties:
        ConstantInitializationVector:
          type: string
          maxLength: 32
          minLength: 32
          pattern: ^[0-9a-fA-F]+$
          description: <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
        EncryptionMethod:
          $ref: '#/components/schemas/EncryptionMethod'
        KeyRotationIntervalSeconds:
          type: integer
          maximum: 31536000
          minimum: 300
          description: |-
            <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
                     <p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
                     </p>
        SpekeKeyProvider:
          $ref: '#/components/schemas/SpekeKeyProvider'
      required:
        - EncryptionMethod
        - SpekeKeyProvider
      additionalProperties: false
    EncryptionContractConfiguration:
      type: object
      description: <p>Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.</p>
      properties:
        PresetSpeke20Audio:
          $ref: '#/components/schemas/PresetSpeke20Audio'
        PresetSpeke20Video:
          $ref: '#/components/schemas/PresetSpeke20Video'
      required:
        - PresetSpeke20Audio
        - PresetSpeke20Video
      additionalProperties: false
    EncryptionMethod:
      type: object
      description: <p>The encryption type.</p>
      properties:
        TsEncryptionMethod:
          $ref: '#/components/schemas/TsEncryptionMethod'
        CmafEncryptionMethod:
          $ref: '#/components/schemas/CmafEncryptionMethod'
      additionalProperties: false
    EndpointErrorCondition:
      type: string
      enum:
        - STALE_MANIFEST
        - INCOMPLETE_MANIFEST
        - MISSING_DRM_KEY
        - SLATE_INPUT
    FilterConfiguration:
      type: object
      description: <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest. </p>
      properties:
        ManifestFilter:
          type: string
          maxLength: 1024
          minLength: 1
          description: <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
        Start:
          type: string
          description: <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
          format: date-time
        End:
          type: string
          description: <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
          format: date-time
        TimeDelaySeconds:
          type: integer
          maximum: 1209600
          minimum: 0
          description: <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
        ClipStartTime:
          type: string
          description: <p>Optionally specify the clip start time for all of your manifest egress requests. When you include clip start time, note that you cannot use clip start time query parameters for this manifest's endpoint URL.</p>
          format: date-time
      additionalProperties: false
    ForceEndpointErrorConfiguration:
      type: object
      description: <p>The failover settings for the endpoint.</p>
      properties:
        EndpointErrorConditions:
          type: array
          items:
            $ref: '#/components/schemas/EndpointErrorCondition'
          description: |-
            <p>The failover settings for the endpoint. The options are:</p>
                     <ul>
                        <li>
                           <p>
                              <code>STALE_MANIFEST</code> - The manifest stalled and there a no new segments or parts.</p>
                        </li>
                        <li>
                           <p>
                              <code>INCOMPLETE_MANIFEST</code> - There is a gap in the manifest.</p>
                        </li>
                        <li>
                           <p>
                              <code>MISSING_DRM_KEY</code> - Key rotation is enabled but we're unable to fetch the key for the current key period.</p>
                        </li>
                     </ul>
      additionalProperties: false
    DashManifestConfiguration:
      type: object
      description: <p>Retrieve the DASH manifest configuration.</p>
      properties:
        ManifestName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
          description: <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. </p>
        ManifestWindowSeconds:
          type: integer
          description: <p>The total duration (in seconds) of the manifest's content.</p>
        FilterConfiguration:
          $ref: '#/components/schemas/FilterConfiguration'
        MinUpdatePeriodSeconds:
          type: integer
          description: <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.</p>
        MinBufferTimeSeconds:
          type: integer
          description: <p>Minimum amount of content (in seconds) that a player must keep available in the buffer.</p>
        SuggestedPresentationDelaySeconds:
          type: integer
          description: <p>The amount of time (in seconds) that the player should be from the end of the manifest.</p>
        SegmentTemplateFormat:
          $ref: '#/components/schemas/DashSegmentTemplateFormat'
        PeriodTriggers:
          type: array
          items:
            $ref: '#/components/schemas/DashPeriodTrigger'
          maxItems: 100
          minItems: 0
          description: |-
            <p>A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Leave this value empty to indicate that the manifest is contained all in one period.
                     For more information about periods in the DASH manifest, see <a href="https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html">Multi-period DASH in AWS Elemental MediaPackage</a>.</p>
        ScteDash:
          $ref: '#/components/schemas/ScteDash'
        DrmSignaling:
          $ref: '#/components/schemas/DashDrmSignaling'
        UtcTiming:
          $ref: '#/components/schemas/DashUtcTiming'
      required:
        - ManifestName
      additionalProperties: false
    HlsManifestConfiguration:
      type: object
      description: <p>Retrieve the HTTP live streaming (HLS) manifest configuration.</p>
      properties:
        ManifestName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
          description: <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
        Url:
          type: string
          description: <p>The egress domain URL for stream delivery from MediaPackage.</p>
        ChildManifestName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
          description: <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
        ManifestWindowSeconds:
          type: integer
          description: <p>The total duration (in seconds) of the manifest's content.</p>
        ProgramDateTimeIntervalSeconds:
          type: integer
          description: |-
            <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, 
                     EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. 
                     The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. 
                     ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
                     <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
        ScteHls:
          $ref: '#/components/schemas/ScteHls'
        FilterConfiguration:
          $ref: '#/components/schemas/FilterConfiguration'
        StartTag:
          $ref: '#/components/schemas/StartTag'
      required:
        - ManifestName
      additionalProperties: false
    LowLatencyHlsManifestConfiguration:
      type: object
      description: <p>Retrieve the low-latency HTTP live streaming (HLS) manifest configuration.</p>
      properties:
        ManifestName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
          description: <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
        Url:
          type: string
          description: <p>The egress domain URL for stream delivery from MediaPackage.</p>
        ChildManifestName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
          description: <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
        ManifestWindowSeconds:
          type: integer
          description: <p>The total duration (in seconds) of the manifest's content.</p>
        ProgramDateTimeIntervalSeconds:
          type: integer
          description: |-
            <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, 
                     EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. 
                     The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. 
                     ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
                     <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
        ScteHls:
          $ref: '#/components/schemas/ScteHls'
        FilterConfiguration:
          $ref: '#/components/schemas/FilterConfiguration'
        StartTag:
          $ref: '#/components/schemas/StartTag'
      required:
        - ManifestName
      additionalProperties: false
    PresetSpeke20Audio:
      type: string
      enum:
        - PRESET_AUDIO_1
        - PRESET_AUDIO_2
        - PRESET_AUDIO_3
        - SHARED
        - UNENCRYPTED
    PresetSpeke20Video:
      type: string
      enum:
        - PRESET_VIDEO_1
        - PRESET_VIDEO_2
        - PRESET_VIDEO_3
        - PRESET_VIDEO_4
        - PRESET_VIDEO_5
        - PRESET_VIDEO_6
        - PRESET_VIDEO_7
        - PRESET_VIDEO_8
        - SHARED
        - UNENCRYPTED
    Scte:
      type: object
      description: <p>The SCTE configuration.</p>
      properties:
        ScteFilter:
          type: array
          items:
            $ref: '#/components/schemas/ScteFilter'
          maxItems: 100
          minItems: 0
          description: <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
      additionalProperties: false
    ScteDash:
      type: object
      description: <p>The SCTE configuration.</p>
      properties:
        AdMarkerDash:
          $ref: '#/components/schemas/AdMarkerDash'
      additionalProperties: false
    ScteFilter:
      type: string
      enum:
        - SPLICE_INSERT
        - BREAK
        - PROVIDER_ADVERTISEMENT
        - DISTRIBUTOR_ADVERTISEMENT
        - PROVIDER_PLACEMENT_OPPORTUNITY
        - DISTRIBUTOR_PLACEMENT_OPPORTUNITY
        - PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY
        - DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY
        - PROGRAM
    ScteHls:
      type: object
      description: <p>The SCTE configuration.</p>
      properties:
        AdMarkerHls:
          $ref: '#/components/schemas/AdMarkerHls'
      additionalProperties: false
    Segment:
      type: object
      description: <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
      properties:
        SegmentDurationSeconds:
          type: integer
          maximum: 30
          minimum: 1
          description: <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
        SegmentName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
          description: <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
        TsUseAudioRenditionGroup:
          type: boolean
          description: <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
        IncludeIframeOnlyStreams:
          type: boolean
          description: <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
        TsIncludeDvbSubtitles:
          type: boolean
          description: <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
        Scte:
          $ref: '#/components/schemas/Scte'
        Encryption:
          $ref: '#/components/schemas/Encryption'
      additionalProperties: false
    SpekeKeyProvider:
      type: object
      description: <p>The parameters for the SPEKE key provider.</p>
      properties:
        EncryptionContractConfiguration:
          $ref: '#/components/schemas/EncryptionContractConfiguration'
        ResourceId:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[0-9a-zA-Z_-]+$
          description: |-
            <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
                     <p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
                     </p>
        DrmSystems:
          type: array
          items:
            $ref: '#/components/schemas/DrmSystem'
          maxItems: 4
          minItems: 1
          description: <p>The DRM solution provider you're using to protect your content during distribution.</p>
        RoleArn:
          type: string
          maxLength: 2048
          minLength: 1
          description: |-
            <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
                     <p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
                     </p>
        Url:
          type: string
          maxLength: 1024
          minLength: 1
          description: |-
            <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
                     <p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
                     </p>
      required:
        - DrmSystems
        - EncryptionContractConfiguration
        - ResourceId
        - RoleArn
        - Url
      additionalProperties: false
    StartTag:
      type: object
      description: <p>To insert an EXT-X-START tag in your HLS playlist, specify a StartTag configuration object with a valid TimeOffset. When you do, you can also optionally specify whether to include a PRECISE value in the EXT-X-START tag.</p>
      properties:
        TimeOffset:
          type: number
          description: <p>Specify the value for TIME-OFFSET within your EXT-X-START tag. Enter a signed floating point value which, if positive, must be less than the configured manifest duration minus three times the configured segment target duration. If negative, the absolute value must be larger than three times the configured segment target duration, and the absolute value must be smaller than the configured manifest duration.</p>
        Precise:
          type: boolean
          description: <p>Specify the value for PRECISE within your EXT-X-START tag. Leave blank, or choose false, to use the default value NO. Choose yes to use the value YES.</p>
      required:
        - TimeOffset
      additionalProperties: false
    TsEncryptionMethod:
      type: string
      enum:
        - AES_128
        - SAMPLE_AES
    OriginEndpoint:
      type: object
      properties:
        Arn:
          type: string
          description: <p>The Amazon Resource Name (ARN) associated with the resource.</p>
        ChannelGroupName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        ChannelName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        ContainerType:
          $ref: '#/components/schemas/ContainerType'
        CreatedAt:
          type: string
          description: <p>The date and time the origin endpoint was created.</p>
          format: date-time
        DashManifests:
          type: array
          items:
            $ref: '#/components/schemas/DashManifestConfiguration'
          description: <p>A DASH manifest configuration.</p>
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          description: <p>Enter any descriptive text that helps you to identify the origin endpoint.</p>
        ForceEndpointErrorConfiguration:
          $ref: '#/components/schemas/ForceEndpointErrorConfiguration'
        HlsManifests:
          type: array
          items:
            $ref: '#/components/schemas/HlsManifestConfiguration'
          description: <p>An HTTP live streaming (HLS) manifest configuration.</p>
        LowLatencyHlsManifests:
          type: array
          items:
            $ref: '#/components/schemas/LowLatencyHlsManifestConfiguration'
          description: <p>A low-latency HLS manifest configuration.</p>
        ModifiedAt:
          type: string
          description: <p>The date and time the origin endpoint was modified.</p>
          format: date-time
        OriginEndpointName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        Segment:
          $ref: '#/components/schemas/Segment'
        StartoverWindowSeconds:
          type: integer
          maximum: 1209600
          minimum: 60
          description: <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
        DashManifestUrls:
          type: array
          items:
            type: string
        HlsManifestUrls:
          type: array
          items:
            type: string
        LowLatencyHlsManifestUrls:
          type: array
          items:
            type: string
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
        - ContainerType
      x-stackql-resource-name: origin_endpoint
      description: <p>Represents an origin endpoint that is associated with a channel, offering a dynamically repackaged version of its content through various streaming media protocols. The content can be efficiently disseminated to end-users via a Content Delivery Network (CDN), like Amazon CloudFront.</p>
      x-type-name: AWS::MediaPackageV2::OriginEndpoint
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - ChannelGroupName
          - ChannelName
          - OriginEndpointName
      x-create-only-properties:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
      x-read-only-properties:
        - Arn
        - CreatedAt
        - DashManifestUrls
        - HlsManifestUrls
        - LowLatencyHlsManifestUrls
        - ModifiedAt
        - LowLatencyHlsManifests/*/Url
        - HlsManifests/*/Url
      x-required-properties:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
        - ContainerType
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - mediapackagev2:TagResource
          - mediapackagev2:UntagResource
          - mediapackagev2:ListTagsForResource
      x-required-permissions:
        create:
          - mediapackagev2:TagResource
          - mediapackagev2:CreateOriginEndpoint
          - iam:PassRole
        read:
          - mediapackagev2:GetOriginEndpoint
        update:
          - mediapackagev2:TagResource
          - mediapackagev2:UntagResource
          - mediapackagev2:ListTagsForResource
          - mediapackagev2:UpdateOriginEndpoint
          - iam:PassRole
        delete:
          - mediapackagev2:GetOriginEndpoint
          - mediapackagev2:DeleteOriginEndpoint
        list:
          - mediapackagev2:ListOriginEndpoints
    OriginEndpointPolicy:
      type: object
      properties:
        ChannelGroupName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        ChannelName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        OriginEndpointName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        Policy:
          type: object
      required:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
        - Policy
      x-stackql-resource-name: origin_endpoint_policy
      description: <p>Represents a resource policy that allows or denies access to an origin endpoint.</p>
      x-type-name: AWS::MediaPackageV2::OriginEndpointPolicy
      x-stackql-primary-identifier:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
      x-create-only-properties:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
      x-required-properties:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
        - Policy
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - mediapackagev2:GetOriginEndpointPolicy
          - mediapackagev2:PutOriginEndpointPolicy
        read:
          - mediapackagev2:GetOriginEndpointPolicy
        update:
          - mediapackagev2:GetOriginEndpointPolicy
          - mediapackagev2:PutOriginEndpointPolicy
        delete:
          - mediapackagev2:GetOriginEndpointPolicy
          - mediapackagev2:DeleteOriginEndpointPolicy
    CreateChannelRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: <p>The Amazon Resource Name (ARN) associated with the resource.</p>
            ChannelGroupName:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9_-]+$
            ChannelName:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9_-]+$
            CreatedAt:
              type: string
              description: <p>The date and time the channel was created.</p>
              format: date-time
            Description:
              type: string
              maxLength: 1024
              minLength: 0
              description: <p>Enter any descriptive text that helps you to identify the channel.</p>
            IngestEndpoints:
              type: array
              items:
                $ref: '#/components/schemas/IngestEndpoint'
              description: <p>The list of ingest endpoints.</p>
            InputType:
              $ref: '#/components/schemas/InputType'
            ModifiedAt:
              type: string
              description: <p>The date and time the channel was modified.</p>
              format: date-time
            IngestEndpointUrls:
              type: array
              items:
                type: string
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateChannelRequest
      type: object
      required: []
    CreateChannelGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: <p>The Amazon Resource Name (ARN) associated with the resource.</p>
            ChannelGroupName:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9_-]+$
            CreatedAt:
              type: string
              description: <p>The date and time the channel group was created.</p>
              format: date-time
            Description:
              type: string
              maxLength: 1024
              minLength: 0
              description: <p>Enter any descriptive text that helps you to identify the channel group.</p>
            EgressDomain:
              type: string
              description: <p>The output domain where the source stream should be sent. Integrate the domain with a downstream CDN (such as Amazon CloudFront) or playback device.</p>
            ModifiedAt:
              type: string
              description: <p>The date and time the channel group was modified.</p>
              format: date-time
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateChannelGroupRequest
      type: object
      required: []
    CreateChannelPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ChannelGroupName:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9_-]+$
            ChannelName:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9_-]+$
            Policy:
              type: object
          x-stackQL-stringOnly: true
      x-title: CreateChannelPolicyRequest
      type: object
      required: []
    CreateOriginEndpointRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: <p>The Amazon Resource Name (ARN) associated with the resource.</p>
            ChannelGroupName:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9_-]+$
            ChannelName:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9_-]+$
            ContainerType:
              $ref: '#/components/schemas/ContainerType'
            CreatedAt:
              type: string
              description: <p>The date and time the origin endpoint was created.</p>
              format: date-time
            DashManifests:
              type: array
              items:
                $ref: '#/components/schemas/DashManifestConfiguration'
              description: <p>A DASH manifest configuration.</p>
            Description:
              type: string
              maxLength: 1024
              minLength: 0
              description: <p>Enter any descriptive text that helps you to identify the origin endpoint.</p>
            ForceEndpointErrorConfiguration:
              $ref: '#/components/schemas/ForceEndpointErrorConfiguration'
            HlsManifests:
              type: array
              items:
                $ref: '#/components/schemas/HlsManifestConfiguration'
              description: <p>An HTTP live streaming (HLS) manifest configuration.</p>
            LowLatencyHlsManifests:
              type: array
              items:
                $ref: '#/components/schemas/LowLatencyHlsManifestConfiguration'
              description: <p>A low-latency HLS manifest configuration.</p>
            ModifiedAt:
              type: string
              description: <p>The date and time the origin endpoint was modified.</p>
              format: date-time
            OriginEndpointName:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9_-]+$
            Segment:
              $ref: '#/components/schemas/Segment'
            StartoverWindowSeconds:
              type: integer
              maximum: 1209600
              minimum: 60
              description: <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
            DashManifestUrls:
              type: array
              items:
                type: string
            HlsManifestUrls:
              type: array
              items:
                type: string
            LowLatencyHlsManifestUrls:
              type: array
              items:
                type: string
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateOriginEndpointRequest
      type: object
      required: []
    CreateOriginEndpointPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ChannelGroupName:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9_-]+$
            ChannelName:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9_-]+$
            OriginEndpointName:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9_-]+$
            Policy:
              type: object
          x-stackQL-stringOnly: true
      x-title: CreateOriginEndpointPolicyRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    channels:
      name: channels
      id: aws.mediapackagev2.channels
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::MediaPackageV2::Channel
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Channel&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/channels/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/channels/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/channels/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.IngestEndpoints') as ingest_endpoints,
              JSON_EXTRACT(Properties, '$.InputType') as input_type,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.IngestEndpointUrls') as ingest_endpoint_urls,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::Channel'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ChannelGroupName') as channel_group_name,
                JSON_EXTRACT(detail.Properties, '$.ChannelName') as channel_name,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.IngestEndpoints') as ingest_endpoints,
                JSON_EXTRACT(detail.Properties, '$.InputType') as input_type,
                JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
                JSON_EXTRACT(detail.Properties, '$.IngestEndpointUrls') as ingest_endpoint_urls,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaPackageV2::Channel'
                AND detail.data__TypeName = 'AWS::MediaPackageV2::Channel'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                  json_extract_path_text(Properties, 'ChannelName') as channel_name,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'IngestEndpoints') as ingest_endpoints,
                  json_extract_path_text(Properties, 'InputType') as input_type,
                  json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                  json_extract_path_text(Properties, 'IngestEndpointUrls') as ingest_endpoint_urls,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::Channel'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ChannelGroupName') as channel_group_name,
                    json_extract_path_text(detail.Properties, 'ChannelName') as channel_name,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'IngestEndpoints') as ingest_endpoints,
                    json_extract_path_text(detail.Properties, 'InputType') as input_type,
                    json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                    json_extract_path_text(detail.Properties, 'IngestEndpointUrls') as ingest_endpoint_urls,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaPackageV2::Channel'
                    AND detail.data__TypeName = 'AWS::MediaPackageV2::Channel'
                    AND listing.region = 'us-east-1'
    channels_list_only:
      name: channels_list_only
      id: aws.mediapackagev2.channels_list_only
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::MediaPackageV2::Channel
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::Channel'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::Channel'
                AND region = 'us-east-1'
    channel_tags:
      name: channel_tags
      id: aws.mediapackagev2.channel_tags
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::MediaPackageV2::Channel
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(detail.Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.IngestEndpoints') as ingest_endpoints,
              JSON_EXTRACT(detail.Properties, '$.InputType') as input_type,
              JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(detail.Properties, '$.IngestEndpointUrls') as ingest_endpoint_urls
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaPackageV2::Channel'
              AND detail.data__TypeName = 'AWS::MediaPackageV2::Channel'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(detail.Properties, 'ChannelName') as channel_name,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'IngestEndpoints') as ingest_endpoints,
                json_extract_path_text(detail.Properties, 'InputType') as input_type,
                json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                json_extract_path_text(detail.Properties, 'IngestEndpointUrls') as ingest_endpoint_urls
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaPackageV2::Channel'
                AND detail.data__TypeName = 'AWS::MediaPackageV2::Channel'
                AND listing.region = 'us-east-1'
    channel_groups:
      name: channel_groups
      id: aws.mediapackagev2.channel_groups
      x-cfn-schema-name: ChannelGroup
      x-cfn-type-name: AWS::MediaPackageV2::ChannelGroup
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ChannelGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::ChannelGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::ChannelGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::ChannelGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/channel_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/channel_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/channel_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EgressDomain') as egress_domain,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ChannelGroupName') as channel_group_name,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.EgressDomain') as egress_domain,
                JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
                AND detail.data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'EgressDomain') as egress_domain,
                  json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ChannelGroupName') as channel_group_name,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'EgressDomain') as egress_domain,
                    json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
                    AND detail.data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
                    AND listing.region = 'us-east-1'
    channel_groups_list_only:
      name: channel_groups_list_only
      id: aws.mediapackagev2.channel_groups_list_only
      x-cfn-schema-name: ChannelGroup
      x-cfn-type-name: AWS::MediaPackageV2::ChannelGroup
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
                AND region = 'us-east-1'
    channel_group_tags:
      name: channel_group_tags
      id: aws.mediapackagev2.channel_group_tags
      x-cfn-schema-name: ChannelGroup
      x-cfn-type-name: AWS::MediaPackageV2::ChannelGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.EgressDomain') as egress_domain,
              JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
              AND detail.data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'EgressDomain') as egress_domain,
                json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
                AND detail.data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
                AND listing.region = 'us-east-1'
    channel_policies:
      name: channel_policies
      id: aws.mediapackagev2.channel_policies
      x-cfn-schema-name: ChannelPolicy
      x-cfn-type-name: AWS::MediaPackageV2::ChannelPolicy
      x-identifiers:
        - ChannelGroupName
        - ChannelName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ChannelPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::ChannelPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::ChannelPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::ChannelPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/channel_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/channel_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/channel_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(Properties, '$.Policy') as policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelPolicy'
              AND data__Identifier = '<ChannelGroupName>|<ChannelName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(Properties, 'ChannelName') as channel_name,
                json_extract_path_text(Properties, 'Policy') as policy
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelPolicy'
                AND data__Identifier = '<ChannelGroupName>|<ChannelName>'
                AND region = 'us-east-1'
    origin_endpoints:
      name: origin_endpoints
      id: aws.mediapackagev2.origin_endpoints
      x-cfn-schema-name: OriginEndpoint
      x-cfn-type-name: AWS::MediaPackageV2::OriginEndpoint
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__OriginEndpoint&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::OriginEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::OriginEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::OriginEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/origin_endpoints/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/origin_endpoints/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/origin_endpoints/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(Properties, '$.ContainerType') as container_type,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.DashManifests') as dash_manifests,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ForceEndpointErrorConfiguration') as force_endpoint_error_configuration,
              JSON_EXTRACT(Properties, '$.HlsManifests') as hls_manifests,
              JSON_EXTRACT(Properties, '$.LowLatencyHlsManifests') as low_latency_hls_manifests,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.OriginEndpointName') as origin_endpoint_name,
              JSON_EXTRACT(Properties, '$.Segment') as segment,
              JSON_EXTRACT(Properties, '$.StartoverWindowSeconds') as startover_window_seconds,
              JSON_EXTRACT(Properties, '$.DashManifestUrls') as dash_manifest_urls,
              JSON_EXTRACT(Properties, '$.HlsManifestUrls') as hls_manifest_urls,
              JSON_EXTRACT(Properties, '$.LowLatencyHlsManifestUrls') as low_latency_hls_manifest_urls,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ChannelGroupName') as channel_group_name,
                JSON_EXTRACT(detail.Properties, '$.ChannelName') as channel_name,
                JSON_EXTRACT(detail.Properties, '$.ContainerType') as container_type,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.DashManifests') as dash_manifests,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ForceEndpointErrorConfiguration') as force_endpoint_error_configuration,
                JSON_EXTRACT(detail.Properties, '$.HlsManifests') as hls_manifests,
                JSON_EXTRACT(detail.Properties, '$.LowLatencyHlsManifests') as low_latency_hls_manifests,
                JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
                JSON_EXTRACT(detail.Properties, '$.OriginEndpointName') as origin_endpoint_name,
                JSON_EXTRACT(detail.Properties, '$.Segment') as segment,
                JSON_EXTRACT(detail.Properties, '$.StartoverWindowSeconds') as startover_window_seconds,
                JSON_EXTRACT(detail.Properties, '$.DashManifestUrls') as dash_manifest_urls,
                JSON_EXTRACT(detail.Properties, '$.HlsManifestUrls') as hls_manifest_urls,
                JSON_EXTRACT(detail.Properties, '$.LowLatencyHlsManifestUrls') as low_latency_hls_manifest_urls,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
                AND detail.data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                  json_extract_path_text(Properties, 'ChannelName') as channel_name,
                  json_extract_path_text(Properties, 'ContainerType') as container_type,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'DashManifests') as dash_manifests,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ForceEndpointErrorConfiguration') as force_endpoint_error_configuration,
                  json_extract_path_text(Properties, 'HlsManifests') as hls_manifests,
                  json_extract_path_text(Properties, 'LowLatencyHlsManifests') as low_latency_hls_manifests,
                  json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                  json_extract_path_text(Properties, 'OriginEndpointName') as origin_endpoint_name,
                  json_extract_path_text(Properties, 'Segment') as segment,
                  json_extract_path_text(Properties, 'StartoverWindowSeconds') as startover_window_seconds,
                  json_extract_path_text(Properties, 'DashManifestUrls') as dash_manifest_urls,
                  json_extract_path_text(Properties, 'HlsManifestUrls') as hls_manifest_urls,
                  json_extract_path_text(Properties, 'LowLatencyHlsManifestUrls') as low_latency_hls_manifest_urls,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ChannelGroupName') as channel_group_name,
                    json_extract_path_text(detail.Properties, 'ChannelName') as channel_name,
                    json_extract_path_text(detail.Properties, 'ContainerType') as container_type,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'DashManifests') as dash_manifests,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ForceEndpointErrorConfiguration') as force_endpoint_error_configuration,
                    json_extract_path_text(detail.Properties, 'HlsManifests') as hls_manifests,
                    json_extract_path_text(detail.Properties, 'LowLatencyHlsManifests') as low_latency_hls_manifests,
                    json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                    json_extract_path_text(detail.Properties, 'OriginEndpointName') as origin_endpoint_name,
                    json_extract_path_text(detail.Properties, 'Segment') as segment,
                    json_extract_path_text(detail.Properties, 'StartoverWindowSeconds') as startover_window_seconds,
                    json_extract_path_text(detail.Properties, 'DashManifestUrls') as dash_manifest_urls,
                    json_extract_path_text(detail.Properties, 'HlsManifestUrls') as hls_manifest_urls,
                    json_extract_path_text(detail.Properties, 'LowLatencyHlsManifestUrls') as low_latency_hls_manifest_urls,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
                    AND detail.data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
                    AND listing.region = 'us-east-1'
    origin_endpoints_list_only:
      name: origin_endpoints_list_only
      id: aws.mediapackagev2.origin_endpoints_list_only
      x-cfn-schema-name: OriginEndpoint
      x-cfn-type-name: AWS::MediaPackageV2::OriginEndpoint
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
                AND region = 'us-east-1'
    origin_endpoint_tags:
      name: origin_endpoint_tags
      id: aws.mediapackagev2.origin_endpoint_tags
      x-cfn-schema-name: OriginEndpoint
      x-cfn-type-name: AWS::MediaPackageV2::OriginEndpoint
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(detail.Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(detail.Properties, '$.ContainerType') as container_type,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.DashManifests') as dash_manifests,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.ForceEndpointErrorConfiguration') as force_endpoint_error_configuration,
              JSON_EXTRACT(detail.Properties, '$.HlsManifests') as hls_manifests,
              JSON_EXTRACT(detail.Properties, '$.LowLatencyHlsManifests') as low_latency_hls_manifests,
              JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(detail.Properties, '$.OriginEndpointName') as origin_endpoint_name,
              JSON_EXTRACT(detail.Properties, '$.Segment') as segment,
              JSON_EXTRACT(detail.Properties, '$.StartoverWindowSeconds') as startover_window_seconds,
              JSON_EXTRACT(detail.Properties, '$.DashManifestUrls') as dash_manifest_urls,
              JSON_EXTRACT(detail.Properties, '$.HlsManifestUrls') as hls_manifest_urls,
              JSON_EXTRACT(detail.Properties, '$.LowLatencyHlsManifestUrls') as low_latency_hls_manifest_urls
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
              AND detail.data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(detail.Properties, 'ChannelName') as channel_name,
                json_extract_path_text(detail.Properties, 'ContainerType') as container_type,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'DashManifests') as dash_manifests,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'ForceEndpointErrorConfiguration') as force_endpoint_error_configuration,
                json_extract_path_text(detail.Properties, 'HlsManifests') as hls_manifests,
                json_extract_path_text(detail.Properties, 'LowLatencyHlsManifests') as low_latency_hls_manifests,
                json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                json_extract_path_text(detail.Properties, 'OriginEndpointName') as origin_endpoint_name,
                json_extract_path_text(detail.Properties, 'Segment') as segment,
                json_extract_path_text(detail.Properties, 'StartoverWindowSeconds') as startover_window_seconds,
                json_extract_path_text(detail.Properties, 'DashManifestUrls') as dash_manifest_urls,
                json_extract_path_text(detail.Properties, 'HlsManifestUrls') as hls_manifest_urls,
                json_extract_path_text(detail.Properties, 'LowLatencyHlsManifestUrls') as low_latency_hls_manifest_urls
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
                AND detail.data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
                AND listing.region = 'us-east-1'
    origin_endpoint_policies:
      name: origin_endpoint_policies
      id: aws.mediapackagev2.origin_endpoint_policies
      x-cfn-schema-name: OriginEndpointPolicy
      x-cfn-type-name: AWS::MediaPackageV2::OriginEndpointPolicy
      x-identifiers:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__OriginEndpointPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::OriginEndpointPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::OriginEndpointPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackageV2::OriginEndpointPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/origin_endpoint_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/origin_endpoint_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/origin_endpoint_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(Properties, '$.OriginEndpointName') as origin_endpoint_name,
              JSON_EXTRACT(Properties, '$.Policy') as policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpointPolicy'
              AND data__Identifier = '<ChannelGroupName>|<ChannelName>|<OriginEndpointName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(Properties, 'ChannelName') as channel_name,
                json_extract_path_text(Properties, 'OriginEndpointName') as origin_endpoint_name,
                json_extract_path_text(Properties, 'Policy') as policy
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpointPolicy'
                AND data__Identifier = '<ChannelGroupName>|<ChannelName>|<OriginEndpointName>'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Channel&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateChannel
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ChannelGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateChannelGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateChannelGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ChannelPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateChannelPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateChannelPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__OriginEndpoint&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateOriginEndpoint
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateOriginEndpointRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__OriginEndpointPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateOriginEndpointPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateOriginEndpointPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
