openapi: 3.0.0
info:
  title: SecurityLake
  version: 1.0.0
paths: {}
components:
  schemas:
    AwsLogSource:
      type: object
      properties:
        SourceName:
          type: string
          description: The name for a AWS source. This must be a Regionally unique value.
        SourceVersion:
          type: string
          pattern: ^(latest|[0-9]\.[0-9])$
          description: The version for a AWS source. This must be a Regionally unique value.
      description: Amazon Security Lake supports log and event collection for natively supported AWS services.
      additionalProperties: false
    EncryptionConfiguration:
      description: Provides encryption details of Amazon Security Lake object.
      type: object
      additionalProperties: false
      properties:
        KmsKeyId:
          description: The id of KMS encryption key used by Amazon Security Lake to encrypt the Security Lake object.
          type: string
    LifecycleConfiguration:
      description: Provides lifecycle details of Amazon Security Lake object.
      type: object
      additionalProperties: false
      properties:
        Expiration:
          $ref: '#/components/schemas/Expiration'
        Transitions:
          description: Provides data storage transition details of Amazon Security Lake object.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Transitions'
    Expiration:
      description: Provides data expiration details of Amazon Security Lake object.
      type: object
      additionalProperties: false
      properties:
        Days:
          $ref: '#/components/schemas/Days'
    Days:
      description: Number of days before data expires in the Amazon Security Lake object.
      type: integer
      minimum: 1
    Transitions:
      type: object
      additionalProperties: false
      properties:
        Days:
          description: Number of days before data transitions to a different S3 Storage Class in the Amazon Security Lake object.
          type: integer
          minimum: 1
        StorageClass:
          description: The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.
          type: string
    ReplicationConfiguration:
      description: Provides replication details of Amazon Security Lake object.
      type: object
      additionalProperties: false
      properties:
        Regions:
          $ref: '#/components/schemas/Regions'
        RoleArn:
          description: Replication settings for the Amazon S3 buckets. This parameter uses the AWS Identity and Access Management (IAM) role you created that is managed by Security Lake, to ensure the replication setting is correct.
          type: string
          pattern: ^arn:.*$
    Regions:
      description: Replication enables automatic, asynchronous copying of objects across Amazon S3 buckets. Amazon S3 buckets that are configured for object replication can be owned by the same AWS account or by different accounts. You can replicate objects to a single destination bucket or to multiple destination buckets. The destination buckets can be in different AWS Regions or within the same Region as the source bucket.
      type: array
      uniqueItems: true
      x-insertionOrder: false
      items:
        type: string
        pattern: ^(af|ap|ca|eu|me|sa|us)-(central|north|(north(?:east|west))|south|south(?:east|west)|east|west)-\d+$
    Tag:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
          description: The name of the tag. This is a general label that acts as a category for a more specific tag value (value).
        Value:
          type: string
          minLength: 0
          maxLength: 256
          description: The value that is associated with the specified tag key (key). This value acts as a descriptor for the tag key. A tag value cannot be null, but it can be an empty string.
      required:
        - Key
        - Value
      additionalProperties: false
    DataLake:
      type: object
      properties:
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
        LifecycleConfiguration:
          $ref: '#/components/schemas/LifecycleConfiguration'
        ReplicationConfiguration:
          $ref: '#/components/schemas/ReplicationConfiguration'
        MetaStoreManagerRoleArn:
          description: The Amazon Resource Name (ARN) used to index AWS Glue table partitions that are generated by the ingestion and normalization of AWS log sources and custom sources.
          type: string
          pattern: ^arn:.*$
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          description: The Amazon Resource Name (ARN) created by you to provide to the subscriber.
          type: string
          minLength: 1
          maxLength: 1011
        S3BucketArn:
          description: The ARN for the Amazon Security Lake Amazon S3 bucket.
          type: string
      x-stackql-resource-name: data_lake
      description: Resource Type definition for AWS::SecurityLake::DataLake
      x-type-name: AWS::SecurityLake::DataLake
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - MetaStoreManagerRoleArn
      x-write-only-properties:
        - MetaStoreManagerRoleArn
      x-read-only-properties:
        - Arn
        - S3BucketArn
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - events:*
          - iam:CreateServiceLinkedRole
          - iam:GetRole
          - iam:ListAttachedRolePolicies
          - iam:PutRolePolicy
          - iam:PassRole
          - glue:*
          - organizations:*
          - kms:DescribeKey
          - kms:CreateGrant
          - lakeformation:*
          - lambda:*
          - s3:*
          - securitylake:CreateDataLake
          - securitylake:TagResource
          - securitylake:List*
          - sqs:*
        update:
          - events:*
          - iam:CreateServiceLinkedRole
          - iam:DeleteRolePolicy
          - iam:GetRole
          - iam:PassRole
          - iam:PutRolePolicy
          - kms:DescribeKey
          - kms:CreateGrant
          - lakeformation:*
          - lambda:*
          - organizations:*
          - s3:*
          - securitylake:List*
          - securitylake:TagResource
          - securitylake:UntagResource
          - securitylake:UpdateDataLake
          - sqs:*
        delete:
          - organizations:*
          - securitylake:DeleteDataLake
          - securitylake:List*
        read:
          - securitylake:List*
        list:
          - securitylake:List*
    AccessTypes:
      type: array
      x-insertionOrder: true
      items:
        type: string
        enum:
          - LAKEFORMATION
          - S3
      minItems: 1
      uniqueItems: true
      description: The Amazon S3 or AWS Lake Formation access type.
    CustomLogSource:
      type: object
      properties:
        SourceName:
          type: string
          pattern: ^[\\\w\-_:/.]*$
          minLength: 1
          maxLength: 64
          description: The name for a third-party custom source. This must be a Regionally unique value.
        SourceVersion:
          type: string
          pattern: ^[A-Za-z0-9\-\.\_]*$
          minLength: 1
          maxLength: 32
          description: The version for a third-party custom source. This must be a Regionally unique value.
      additionalProperties: false
    Source:
      oneOf:
        - type: object
          properties:
            AwsLogSource:
              $ref: '#/components/schemas/AwsLogSource'
          required:
            - AwsLogSource
          additionalProperties: false
        - type: object
          properties:
            CustomLogSource:
              $ref: '#/components/schemas/CustomLogSource'
          required:
            - CustomLogSource
          additionalProperties: false
    Subscriber:
      type: object
      properties:
        AccessTypes:
          $ref: '#/components/schemas/AccessTypes'
        DataLakeArn:
          description: The ARN for the data lake.
          type: string
          minLength: 1
          maxLength: 256
        SubscriberIdentity:
          type: object
          properties:
            ExternalId:
              type: string
              pattern: ^[\w+=,.@:/-]*$
              minLength: 2
              maxLength: 1224
              description: The external ID used to establish trust relationship with the AWS identity.
            Principal:
              type: string
              pattern: ^([0-9]{12}|[a-z0-9\.\-]*\.(amazonaws|amazon)\.com)$
              description: The AWS identity principal.
          required:
            - ExternalId
            - Principal
          description: The AWS identity used to access your data.
          additionalProperties: false
        SubscriberName:
          type: string
          pattern: ^[\\\w\s\-_:/,.@=+]*$
          minLength: 1
          maxLength: 64
          description: The name of your Security Lake subscriber account.
        SubscriberDescription:
          type: string
          description: The description for your subscriber account in Security Lake.
        Tags:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Tag'
          description: An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
        Sources:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Source'
          description: The supported AWS services from which logs and events are collected.
        ResourceShareArn:
          type: string
        ResourceShareName:
          type: string
        SubscriberRoleArn:
          type: string
        S3BucketArn:
          type: string
        SubscriberArn:
          type: string
      required:
        - AccessTypes
        - DataLakeArn
        - Sources
        - SubscriberIdentity
        - SubscriberName
      x-stackql-resource-name: subscriber
      description: Resource Type definition for AWS::SecurityLake::Subscriber
      x-type-name: AWS::SecurityLake::Subscriber
      x-stackql-primary-identifier:
        - SubscriberArn
      x-create-only-properties:
        - DataLakeArn
      x-read-only-properties:
        - SubscriberArn
        - S3BucketArn
        - SubscriberRoleArn
        - ResourceShareArn
        - ResourceShareName
      x-required-properties:
        - AccessTypes
        - DataLakeArn
        - Sources
        - SubscriberIdentity
        - SubscriberName
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - securitylake:CreateSubscriber
          - securitylake:CreateCustomLogSource
          - securitylake:CreateDataLake
          - securitylake:TagResource
          - securitylake:GetSubscriber
          - securitylake:ListTagsForResource
          - iam:GetRole
          - iam:GetRolePolicy
          - iam:PutRolePolicy
          - iam:CreateRole
          - iam:CreateServiceLinkedRole
          - glue:GetDatabase
          - glue:GetTable
          - lakeformation:RegisterResource
          - lakeformation:GrantPermissions
          - lakeformation:RevokePermissions
          - lakeformation:ListPermissions
          - ram:GetResourceShareAssociations
          - ram:CreateResourceShare
          - ram:UpdateResourceShare
          - ram:GetResourceShares
        read:
          - securitylake:GetSubscriber
          - securitylake:ListTagsForResource
        update:
          - securitylake:UpdateSubscriber
          - securitylake:GetSubscriber
          - securitylake:TagResource
          - securitylake:UntagResource
          - securitylake:ListTagsForResource
          - glue:GetDatabase
          - glue:GetTable
          - lakeformation:ListPermissions
          - lakeformation:GrantPermissions
          - lakeformation:RevokePermissions
          - ram:CreateResourceShare
          - ram:GetResourceShares
          - ram:GetResourceShareAssociations
          - ram:UpdateResourceShare
          - ram:DeleteResourceShare
          - iam:CreateRole
          - iam:GetRole
          - iam:DeleteRole
          - iam:PutRolePolicy
          - iam:DeleteRolePolicy
          - iam:ListRolePolicies
          - events:CreateApiDestination
          - events:CreateConnection
          - events:ListApiDestinations
          - events:ListConnections
          - events:PutRule
          - events:UpdateApiDestination
          - events:UpdateConnection
          - events:DeleteApiDestination
          - events:DeleteConnection
          - events:DeleteRule
          - events:RemoveTargets
          - events:ListTargetsByRule
          - events:DescribeRule
          - events:PutTargets
        delete:
          - securitylake:DeleteSubscriber
          - iam:GetRole
          - iam:ListRolePolicies
          - iam:DeleteRole
          - iam:DeleteRolePolicy
          - glue:GetTable
          - lakeformation:RevokePermissions
          - lakeformation:ListPermissions
          - ram:GetResourceShares
          - ram:DeleteResourceShare
          - events:DeleteApiDestination
          - events:DeleteConnection
          - events:DeleteRule
          - events:ListApiDestinations
          - events:ListTargetsByRule
          - events:DescribeRule
          - events:RemoveTargets
          - sqs:DeleteQueue
          - sqs:GetQueueUrl
        list:
          - securitylake:ListSubscribers
  x-stackQL-resources:
    data_lakes:
      name: data_lakes
      id: aws.securitylake.data_lakes
      x-cfn-schema-name: DataLake
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SecurityLake::DataLake'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SecurityLake::DataLake'
                AND region = 'us-east-1'
    data_lake:
      name: data_lake
      id: aws.securitylake.data_lake
      x-cfn-schema-name: DataLake
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.EncryptionConfiguration') as encryption_configuration,
              JSON_EXTRACT(Properties, '$.LifecycleConfiguration') as lifecycle_configuration,
              JSON_EXTRACT(Properties, '$.ReplicationConfiguration') as replication_configuration,
              JSON_EXTRACT(Properties, '$.MetaStoreManagerRoleArn') as meta_store_manager_role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.S3BucketArn') as s3_bucket_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SecurityLake::DataLake'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'EncryptionConfiguration') as encryption_configuration,
                json_extract_path_text(Properties, 'LifecycleConfiguration') as lifecycle_configuration,
                json_extract_path_text(Properties, 'ReplicationConfiguration') as replication_configuration,
                json_extract_path_text(Properties, 'MetaStoreManagerRoleArn') as meta_store_manager_role_arn,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'S3BucketArn') as s3_bucket_arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SecurityLake::DataLake'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    subscribers:
      name: subscribers
      id: aws.securitylake.subscribers
      x-cfn-schema-name: Subscriber
      x-type: list
      x-identifiers:
        - SubscriberArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SubscriberArn') as subscriber_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SecurityLake::Subscriber'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SubscriberArn') as subscriber_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SecurityLake::Subscriber'
                AND region = 'us-east-1'
    subscriber:
      name: subscriber
      id: aws.securitylake.subscriber
      x-cfn-schema-name: Subscriber
      x-type: get
      x-identifiers:
        - SubscriberArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessTypes') as access_types,
              JSON_EXTRACT(Properties, '$.DataLakeArn') as data_lake_arn,
              JSON_EXTRACT(Properties, '$.SubscriberIdentity') as subscriber_identity,
              JSON_EXTRACT(Properties, '$.SubscriberName') as subscriber_name,
              JSON_EXTRACT(Properties, '$.SubscriberDescription') as subscriber_description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Sources') as sources,
              JSON_EXTRACT(Properties, '$.ResourceShareArn') as resource_share_arn,
              JSON_EXTRACT(Properties, '$.ResourceShareName') as resource_share_name,
              JSON_EXTRACT(Properties, '$.SubscriberRoleArn') as subscriber_role_arn,
              JSON_EXTRACT(Properties, '$.S3BucketArn') as s3_bucket_arn,
              JSON_EXTRACT(Properties, '$.SubscriberArn') as subscriber_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SecurityLake::Subscriber'
              AND data__Identifier = '<SubscriberArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AccessTypes') as access_types,
                json_extract_path_text(Properties, 'DataLakeArn') as data_lake_arn,
                json_extract_path_text(Properties, 'SubscriberIdentity') as subscriber_identity,
                json_extract_path_text(Properties, 'SubscriberName') as subscriber_name,
                json_extract_path_text(Properties, 'SubscriberDescription') as subscriber_description,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Sources') as sources,
                json_extract_path_text(Properties, 'ResourceShareArn') as resource_share_arn,
                json_extract_path_text(Properties, 'ResourceShareName') as resource_share_name,
                json_extract_path_text(Properties, 'SubscriberRoleArn') as subscriber_role_arn,
                json_extract_path_text(Properties, 'S3BucketArn') as s3_bucket_arn,
                json_extract_path_text(Properties, 'SubscriberArn') as subscriber_arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SecurityLake::Subscriber'
                AND data__Identifier = '<SubscriberArn>'
                AND region = 'us-east-1'
