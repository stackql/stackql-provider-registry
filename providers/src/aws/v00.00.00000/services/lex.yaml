openapi: 3.0.0
info:
  title: Lex
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    ReplicaRegion:
      description: The secondary region that will be used in the replication of the source bot.
      type: string
      minLength: 2
      maxLength: 25
    Replication:
      description: Parameter used to create a replication of the source bot in the secondary region.
      type: object
      properties:
        ReplicaRegions:
          description: List of secondary regions for bot replication.
          type: array
          uniqueItems: true
          maxItems: 1
          minItems: 1
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ReplicaRegion'
      required:
        - ReplicaRegions
      additionalProperties: false
    BotAliasLocaleSettingsList:
      description: A list of bot alias locale settings to add to the bot alias.
      type: array
      uniqueItems: true
      maxItems: 50
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/BotAliasLocaleSettingsItem'
    BotAliasLocaleSettingsItem:
      description: A locale setting in alias
      type: object
      properties:
        LocaleId:
          description: A string used to identify the locale
          type: string
          minLength: 1
          maxLength: 128
        BotAliasLocaleSetting:
          $ref: '#/components/schemas/BotAliasLocaleSettings'
      required:
        - LocaleId
        - BotAliasLocaleSetting
      additionalProperties: false
    BotAliasLocaleSettings:
      description: You can use this parameter to specify a specific Lambda function to run different functions in different locales.
      type: object
      properties:
        CodeHookSpecification:
          $ref: '#/components/schemas/CodeHookSpecification'
        Enabled:
          type: boolean
          description: Whether the Lambda code hook is enabled
      required:
        - Enabled
      additionalProperties: false
    CodeHookSpecification:
      description: Contains information about code hooks that Amazon Lex calls during a conversation.
      type: object
      properties:
        LambdaCodeHook:
          $ref: '#/components/schemas/LambdaCodeHook'
      required:
        - LambdaCodeHook
      additionalProperties: false
    LambdaCodeHook:
      description: Contains information about code hooks that Amazon Lex calls during a conversation.
      type: object
      properties:
        CodeHookInterfaceVersion:
          description: The version of the request-response that you want Amazon Lex to use to invoke your Lambda function.
          type: string
          minLength: 1
          maxLength: 5
        LambdaArn:
          description: The Amazon Resource Name (ARN) of the Lambda function.
          type: string
          minLength: 20
          maxLength: 2048
      required:
        - CodeHookInterfaceVersion
        - LambdaArn
      additionalProperties: false
    ConversationLogSettings:
      description: Contains information about code hooks that Amazon Lex calls during a conversation.
      type: object
      properties:
        AudioLogSettings:
          $ref: '#/components/schemas/AudioLogSettings'
        TextLogSettings:
          $ref: '#/components/schemas/TextLogSettings'
      additionalProperties: false
    AudioLogSettings:
      description: List of audio log settings
      type: array
      maxItems: 1
      uniqueItems: true
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/AudioLogSetting'
    TextLogSettings:
      description: List of text log settings
      type: array
      maxItems: 1
      uniqueItems: true
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/TextLogSetting'
    AudioLogSetting:
      description: Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.
      type: object
      properties:
        Destination:
          $ref: '#/components/schemas/AudioLogDestination'
        Enabled:
          type: boolean
          description: ''
      required:
        - Destination
        - Enabled
      additionalProperties: false
    TextLogSetting:
      description: Contains information about code hooks that Amazon Lex calls during a conversation.
      type: object
      properties:
        Destination:
          $ref: '#/components/schemas/TextLogDestination'
        Enabled:
          type: boolean
          description: ''
      required:
        - Destination
        - Enabled
      additionalProperties: false
    AudioLogDestination:
      description: The location of audio log files collected when conversation logging is enabled for a bot.
      type: object
      properties:
        S3Bucket:
          $ref: '#/components/schemas/S3BucketLogDestination'
      required:
        - S3Bucket
      additionalProperties: false
    TextLogDestination:
      description: Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
      type: object
      properties:
        CloudWatch:
          $ref: '#/components/schemas/CloudWatchLogGroupLogDestination'
      required:
        - CloudWatch
      additionalProperties: false
    CloudWatchLogGroupLogDestination:
      type: object
      properties:
        CloudWatchLogGroupArn:
          description: A string used to identify the groupArn for the Cloudwatch Log Group
          type: string
          minLength: 1
          maxLength: 2048
        LogPrefix:
          description: A string containing the value for the Log Prefix
          type: string
          minLength: 0
          maxLength: 1024
      required:
        - CloudWatchLogGroupArn
        - LogPrefix
      additionalProperties: false
    S3BucketLogDestination:
      description: Specifies an Amazon S3 bucket for logging audio conversations
      type: object
      properties:
        S3BucketArn:
          type: string
          description: The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.
          minLength: 1
          maxLength: 2048
          pattern: ^arn:[\w\-]+:s3:::[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$
        LogPrefix:
          type: string
          description: The Amazon S3 key of the deployment package.
          minLength: 0
          maxLength: 1024
        KmsKeyArn:
          type: string
          description: The Amazon Resource Name (ARN) of an AWS Key Management Service (KMS) key for encrypting audio log files stored in an S3 bucket.
          minLength: 20
          maxLength: 2048
          pattern: ^arn:[\w\-]+:kms:[\w\-]+:[\d]{12}:(?:key\/[\w\-]+|alias\/[a-zA-Z0-9:\/_\-]{1,256})$
      required:
        - LogPrefix
        - S3BucketArn
      additionalProperties: false
    TestBotAliasSettings:
      description: Configuring the test bot alias settings for a given bot
      type: object
      properties:
        BotAliasLocaleSettings:
          $ref: '#/components/schemas/BotAliasLocaleSettingsList'
        ConversationLogSettings:
          $ref: '#/components/schemas/ConversationLogSettings'
        Description:
          $ref: '#/components/schemas/Description'
        SentimentAnalysisSettings:
          description: Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
          type: object
          properties:
            DetectSentiment:
              type: boolean
              description: Enable to call Amazon Comprehend for Sentiment natively within Lex
          required:
            - DetectSentiment
          additionalProperties: false
      additionalProperties: false
    RoleArn:
      description: The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.
      type: string
      minLength: 32
      maxLength: 2048
      pattern: ^arn:aws[a-zA-Z-]*:iam::[0-9]{12}:role/.*$
    Id:
      description: Unique ID of resource
      type: string
      minLength: 10
      maxLength: 10
      pattern: ^[0-9a-zA-Z]+$
    BotArn:
      type: string
      minLength: 1
      maxLength: 1011
      pattern: ^arn:aws[a-zA-Z-]*:lex:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:bot/[0-9a-zA-Z]+$
    Name:
      description: A unique identifier for a resource.
      type: string
      minLength: 1
      maxLength: 100
      pattern: ^([0-9a-zA-Z][_-]?)+$
    Description:
      description: A description of the version. Use the description to help identify the version in lists.
      type: string
      maxLength: 200
    DataPrivacy:
      description: Provides information on additional privacy protections Amazon Lex should use with the bot's data.
      type: object
      properties:
        ChildDirected:
          type: boolean
          description: Specify whether your use of Amazon Lex is related to application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA).
      required:
        - ChildDirected
      additionalProperties: false
    IdleSessionTTLInSeconds:
      description: The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.
      type: integer
      minimum: 60
      maximum: 86400
    Utterance:
      description: The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents/slots.
      type: string
    SampleUtterance:
      description: A sample utterance that invokes an intent or respond to a slot elicitation prompt.
      type: object
      properties:
        Utterance:
          $ref: '#/components/schemas/Utterance'
      required:
        - Utterance
      additionalProperties: false
    SampleUtterancesList:
      description: An array of sample utterances
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/SampleUtterance'
    Tag:
      description: A label for tagging Lex resources
      type: object
      properties:
        Key:
          description: A string used to identify this tag
          type: string
          minLength: 1
          maxLength: 128
        Value:
          description: A string containing the value for the tag
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    LocaleId:
      description: The identifier of the language and locale that the bot will be used in.
      type: string
    VoiceSettings:
      description: Settings for using an Amazon Polly voice to communicate with a user.
      type: object
      properties:
        VoiceId:
          type: string
          description: The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user.
        Engine:
          type: string
          description: Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. For more information, see the engine parameter of the SynthesizeSpeech operation in the Amazon Polly developer guide.
          enum:
            - standard
            - neural
      required:
        - VoiceId
      additionalProperties: false
    ConfidenceThreshold:
      description: The specified confidence threshold for inserting the AMAZON.FallbackIntent and AMAZON.KendraSearchIntent intents.
      type: number
      minimum: 0
      maximum: 1
    ParentIntentSignature:
      description: A unique identifier for the built-in intent to base this intent on.
      type: string
    DialogCodeHookSetting:
      description: Settings that determine the Lambda function that Amazon Lex uses for processing user responses.
      type: object
      properties:
        Enabled:
          type: boolean
      required:
        - Enabled
      additionalProperties: false
    FulfillmentStartResponseSpecification:
      description: Provides settings for a message that is sent to the user when a fulfillment Lambda function starts running.
      type: object
      properties:
        MessageGroups:
          $ref: '#/components/schemas/MessageGroupsList'
        DelayInSeconds:
          description: The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
          type: integer
          minimum: 1
          maximum: 900
        AllowInterrupt:
          description: Determines whether the user can interrupt the start message while it is playing.
          type: boolean
      required:
        - DelayInSeconds
        - MessageGroups
      additionalProperties: false
    FulfillmentUpdateResponseSpecification:
      description: Provides settings for a message that is sent periodically to the user while a fulfillment Lambda function is running.
      type: object
      properties:
        MessageGroups:
          $ref: '#/components/schemas/MessageGroupsList'
        FrequencyInSeconds:
          description: The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
          type: integer
          minimum: 1
          maximum: 900
        AllowInterrupt:
          description: Determines whether the user can interrupt an update message while it is playing.
          type: boolean
      required:
        - FrequencyInSeconds
        - MessageGroups
      additionalProperties: false
    FulfillmentUpdatesSpecification:
      description: Provides information for updating the user on the progress of fulfilling an intent.
      type: object
      properties:
        StartResponse:
          $ref: '#/components/schemas/FulfillmentStartResponseSpecification'
        UpdateResponse:
          $ref: '#/components/schemas/FulfillmentUpdateResponseSpecification'
        TimeoutInSeconds:
          description: The length of time that the fulfillment Lambda function should run before it times out.
          type: integer
          minimum: 1
          maximum: 900
        Active:
          description: Determines whether fulfillment updates are sent to the user. When this field is true, updates are sent.
          type: boolean
      required:
        - Active
      additionalProperties: false
    PostFulfillmentStatusSpecification:
      description: Provides a setting that determines whether the post-fulfillment response is sent to the user.
      type: object
      properties:
        SuccessResponse:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
        SuccessNextStep:
          description: Specifies the next step in the conversation that Amazon Lex invokes when the fulfillment code hook completes successfully.
          $ref: '#/components/schemas/DialogState'
        SuccessConditional:
          description: A list of conditional branches to evaluate after the fulfillment code hook finishes successfully.
          $ref: '#/components/schemas/ConditionalSpecification'
        FailureResponse:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
        FailureNextStep:
          description: Specifies the next step the bot runs after the fulfillment code hook throws an exception or returns with the State field of the Intent object set to Failed.
          $ref: '#/components/schemas/DialogState'
        FailureConditional:
          description: A list of conditional branches to evaluate after the fulfillment code hook throws an exception or returns with the State field of the Intent object set to Failed.
          $ref: '#/components/schemas/ConditionalSpecification'
        TimeoutResponse:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
        TimeoutNextStep:
          description: Specifies the next step that the bot runs when the fulfillment code hook times out.
          $ref: '#/components/schemas/DialogState'
        TimeoutConditional:
          description: A list of conditional branches to evaluate if the fulfillment code hook times out.
          $ref: '#/components/schemas/ConditionalSpecification'
      required: []
      additionalProperties: false
    FulfillmentCodeHookSetting:
      description: Settings that determine if a Lambda function should be invoked to fulfill a specific intent.
      type: object
      properties:
        FulfillmentUpdatesSpecification:
          $ref: '#/components/schemas/FulfillmentUpdatesSpecification'
        PostFulfillmentStatusSpecification:
          $ref: '#/components/schemas/PostFulfillmentStatusSpecification'
        Enabled:
          type: boolean
        IsActive:
          description: Determines whether the fulfillment code hook is used. When active is false, the code hook doesn't run.
          type: boolean
      required:
        - Enabled
      additionalProperties: false
    Button:
      description: A button to use on a response card used to gather slot values from a user.
      type: object
      properties:
        Text:
          description: The text that appears on the button.
          type: string
          minLength: 1
          maxLength: 50
        Value:
          description: The value returned to Amazon Lex when the user chooses this button.
          type: string
          minLength: 1
          maxLength: 50
      required:
        - Text
        - Value
      additionalProperties: false
    AttachmentTitle:
      type: string
      minLength: 1
      maxLength: 250
    AttachmentUrl:
      type: string
      minLength: 1
      maxLength: 250
    ImageResponseCard:
      description: A message that defines a response card that the client application can show to the user.
      type: object
      properties:
        Title:
          description: The title to display on the response card.
          $ref: '#/components/schemas/AttachmentTitle'
        Subtitle:
          description: The subtitle to display on the response card.
          $ref: '#/components/schemas/AttachmentTitle'
        ImageUrl:
          description: The URL of an image to display on the response card.
          $ref: '#/components/schemas/AttachmentUrl'
        Buttons:
          description: A list of buttons that should be displayed on the response card.
          type: array
          maxItems: 5
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Button'
      required:
        - Title
      additionalProperties: false
    PlainTextMessage:
      description: A message in plain text format.
      type: object
      properties:
        Value:
          description: The message to send to the user.
          type: string
          minLength: 1
          maxLength: 1000
      required:
        - Value
      additionalProperties: false
    CustomPayload:
      description: A message in a custom format defined by the client application.
      type: object
      properties:
        Value:
          description: The string that is sent to your application.
          type: string
          minLength: 1
          maxLength: 1000
      required:
        - Value
      additionalProperties: false
    SSMLMessage:
      description: A message in Speech Synthesis Markup Language (SSML).
      type: object
      properties:
        Value:
          description: The SSML text that defines the prompt.
          type: string
          minLength: 1
          maxLength: 1000
      required:
        - Value
      additionalProperties: false
    Message:
      description: The primary message that Amazon Lex should send to the user.
      type: object
      properties:
        PlainTextMessage:
          $ref: '#/components/schemas/PlainTextMessage'
        CustomPayload:
          $ref: '#/components/schemas/CustomPayload'
        SSMLMessage:
          $ref: '#/components/schemas/SSMLMessage'
        ImageResponseCard:
          $ref: '#/components/schemas/ImageResponseCard'
      required: []
      additionalProperties: false
    MessageGroup:
      description: One or more messages that Amazon Lex can send to the user.
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/Message'
        Variations:
          description: Message variations to send to the user.
          type: array
          maxItems: 2
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Message'
      required:
        - Message
      additionalProperties: false
    MessageGroupsList:
      description: One to 5 message groups that contain update messages. Amazon Lex chooses one of the messages to play to the user.
      type: array
      minItems: 1
      maxItems: 5
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/MessageGroup'
    PromptMaxRetries:
      description: The maximum number of times the bot tries to elicit a response from the user using this prompt.
      type: integer
      minimum: 0
      maximum: 5
    MessageSelectionStrategy:
      description: Indicates how a message is selected from a message group among retries.
      type: string
      enum:
        - Random
        - Ordered
    AllowedInputTypes:
      description: Specifies the allowed input types.
      type: object
      properties:
        AllowAudioInput:
          description: Indicates whether audio input is allowed.
          type: boolean
        AllowDTMFInput:
          description: Indicates whether DTMF input is allowed.
          type: boolean
      required:
        - AllowAudioInput
        - AllowDTMFInput
      additionalProperties: false
    DTMFSpecification:
      description: Specifies the settings on DTMF input.
      type: object
      properties:
        DeletionCharacter:
          description: The DTMF character that clears the accumulated DTMF digits and immediately ends the input.
          type: string
          pattern: ^[A-D0-9#*]{1}$
        EndCharacter:
          description: The DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.
          type: string
          pattern: ^[A-D0-9#*]{1}$
        EndTimeoutMs:
          description: How long the bot should wait after the last DTMF character input before assuming that the input has concluded.
          type: integer
          minimum: 1
        MaxLength:
          description: The maximum number of DTMF digits allowed in an utterance.
          type: integer
          minimum: 1
          maximum: 1024
      required:
        - DeletionCharacter
        - EndCharacter
        - EndTimeoutMs
        - MaxLength
      additionalProperties: false
    AudioSpecification:
      description: Specifies the audio input specifications.
      type: object
      properties:
        EndTimeoutMs:
          description: Time for which a bot waits after the customer stops speaking to assume the utterance is finished.
          type: integer
          minimum: 1
        MaxLengthMs:
          description: Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.
          type: integer
          minimum: 1
      required:
        - EndTimeoutMs
        - MaxLengthMs
      additionalProperties: false
    AudioAndDTMFInputSpecification:
      description: Specifies the audio and DTMF input specification.
      type: object
      properties:
        StartTimeoutMs:
          description: Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.
          type: integer
          minimum: 1
        DTMFSpecification:
          $ref: '#/components/schemas/DTMFSpecification'
        AudioSpecification:
          $ref: '#/components/schemas/AudioSpecification'
      required:
        - StartTimeoutMs
      additionalProperties: false
    TextInputSpecification:
      description: Specifies the text input specifications.
      type: object
      properties:
        StartTimeoutMs:
          description: Time for which a bot waits before re-prompting a customer for text input.
          type: integer
          minimum: 1
      required:
        - StartTimeoutMs
      additionalProperties: false
    PromptAttemptSpecification:
      description: Specifies the settings on a prompt attempt.
      type: object
      properties:
        AllowedInputTypes:
          $ref: '#/components/schemas/AllowedInputTypes'
        AllowInterrupt:
          description: Indicates whether the user can interrupt a speech prompt attempt from the bot.
          type: boolean
        AudioAndDTMFInputSpecification:
          $ref: '#/components/schemas/AudioAndDTMFInputSpecification'
        TextInputSpecification:
          $ref: '#/components/schemas/TextInputSpecification'
      required:
        - AllowedInputTypes
      additionalProperties: false
    PromptSpecification:
      description: Prompts the user to confirm the intent.
      type: object
      properties:
        MessageGroupsList:
          $ref: '#/components/schemas/MessageGroupsList'
        MaxRetries:
          $ref: '#/components/schemas/PromptMaxRetries'
        AllowInterrupt:
          description: Indicates whether the user can interrupt a speech prompt from the bot.
          type: boolean
        MessageSelectionStrategy:
          $ref: '#/components/schemas/MessageSelectionStrategy'
        PromptAttemptsSpecification:
          description: Specifies the advanced settings on each attempt of the prompt.
          type: object
          x-patternProperties:
            ^(Initial|Retry1|Retry2|Retry3|Retry4|Retry5)$:
              $ref: '#/components/schemas/PromptAttemptSpecification'
          additionalProperties: false
      required:
        - MessageGroupsList
        - MaxRetries
      additionalProperties: false
    ResponseSpecification:
      description: A list of message groups that Amazon Lex uses to respond the user input.
      type: object
      properties:
        MessageGroupsList:
          $ref: '#/components/schemas/MessageGroupsList'
        AllowInterrupt:
          description: Indicates whether the user can interrupt a speech prompt from the bot.
          type: boolean
      required:
        - MessageGroupsList
      additionalProperties: false
    StillWaitingResponseFrequency:
      description: How often a message should be sent to the user in seconds.
      type: integer
      minimum: 1
      maximum: 300
    StillWaitingResponseTimeout:
      description: If Amazon Lex waits longer than this length of time in seconds for a response, it will stop sending messages.
      type: integer
      minimum: 1
      maximum: 900
    StillWaitingResponseSpecification:
      description: StillWaitingResponseSpecification.
      type: object
      properties:
        MessageGroupsList:
          $ref: '#/components/schemas/MessageGroupsList'
        FrequencyInSeconds:
          $ref: '#/components/schemas/StillWaitingResponseFrequency'
        TimeoutInSeconds:
          $ref: '#/components/schemas/StillWaitingResponseTimeout'
        AllowInterrupt:
          description: Indicates whether the user can interrupt a speech prompt from the bot.
          type: boolean
      required:
        - MessageGroupsList
        - FrequencyInSeconds
        - TimeoutInSeconds
      additionalProperties: false
    IntentConfirmationSetting:
      description: Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
      type: object
      properties:
        PromptSpecification:
          description: Prompts the user to confirm the intent. This question should have a yes or no answer.
          $ref: '#/components/schemas/PromptSpecification'
        IsActive:
          description: Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
          type: boolean
        ConfirmationResponse:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
        ConfirmationNextStep:
          description: Specifies the next step that the bot executes when the customer confirms the intent.
          $ref: '#/components/schemas/DialogState'
        ConfirmationConditional:
          description: A list of conditional branches to evaluate after the intent is closed.
          $ref: '#/components/schemas/ConditionalSpecification'
        DeclinationResponse:
          description: When the user answers "no" to the question defined in promptSpecification, Amazon Lex responds with this response to acknowledge that the intent was canceled.
          $ref: '#/components/schemas/ResponseSpecification'
        DeclinationNextStep:
          description: Specifies the next step that the bot executes when the customer declines the intent.
          $ref: '#/components/schemas/DialogState'
        DeclinationConditional:
          description: A list of conditional branches to evaluate after the intent is declined.
          $ref: '#/components/schemas/ConditionalSpecification'
        FailureResponse:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
        FailureNextStep:
          description: The next step to take in the conversation if the confirmation step fails.
          $ref: '#/components/schemas/DialogState'
        FailureConditional:
          description: Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
          $ref: '#/components/schemas/ConditionalSpecification'
        CodeHook:
          description: The DialogCodeHookInvocationSetting object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is InvokeDialogCodeHook.
          $ref: '#/components/schemas/DialogCodeHookInvocationSetting'
        ElicitationCodeHook:
          description: The DialogCodeHookInvocationSetting used when the code hook is invoked during confirmation prompt retries.
          $ref: '#/components/schemas/ElicitationCodeHookInvocationSetting'
      required:
        - PromptSpecification
      additionalProperties: false
    IntentClosingSetting:
      description: Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.
      type: object
      properties:
        ClosingResponse:
          description: The response that Amazon Lex sends to the user when the intent is complete.
          $ref: '#/components/schemas/ResponseSpecification'
        IsActive:
          description: Specifies whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the active field isn't specified, the default is true.
          type: boolean
        Conditional:
          description: A list of conditional branches associated with the intent's closing response. These branches are executed when the nextStep attribute is set to EvalutateConditional.
          $ref: '#/components/schemas/ConditionalSpecification'
        NextStep:
          description: Specifies the next step that the bot executes after playing the intent's closing response.
          $ref: '#/components/schemas/DialogState'
      additionalProperties: false
    InputContext:
      description: InputContext specified for the intent.
      type: object
      properties:
        Name:
          description: The name of the context.
          $ref: '#/components/schemas/Name'
      required:
        - Name
      additionalProperties: false
    InputContextsList:
      description: The list of input contexts specified for the intent.
      type: array
      maxItems: 5
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/InputContext'
    ContextTimeToLiveInSeconds:
      description: The amount of time, in seconds, that the output context should remain active.
      type: integer
      minimum: 5
      maximum: 86400
    ContextTurnsToLive:
      description: The number of conversation turns that the output context should remain active.
      type: integer
      minimum: 1
      maximum: 20
    OutputContext:
      description: A session context that is activated when an intent is fulfilled.
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/Name'
        TimeToLiveInSeconds:
          $ref: '#/components/schemas/ContextTimeToLiveInSeconds'
        TurnsToLive:
          $ref: '#/components/schemas/ContextTurnsToLive'
      required:
        - Name
        - TimeToLiveInSeconds
        - TurnsToLive
      additionalProperties: false
    OutputContextsList:
      description: A list of contexts that the intent activates when it is fulfilled.
      type: array
      maxItems: 10
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/OutputContext'
    KendraIndexArn:
      description: The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search.
      type: string
      minLength: 32
      maxLength: 2048
      pattern: ^arn:aws[a-zA-Z-]*:kendra:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:index/[a-zA-Z0-9][a-zA-Z0-9_-]*$
    QueryFilterString:
      description: A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query.
      type: string
      minLength: 1
      maxLength: 5000
    KendraConfiguration:
      description: Configuration for searching a Amazon Kendra index specified for the intent.
      type: object
      properties:
        KendraIndex:
          $ref: '#/components/schemas/KendraIndexArn'
        QueryFilterStringEnabled:
          description: Determines whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
          type: boolean
        QueryFilterString:
          $ref: '#/components/schemas/QueryFilterString'
      required:
        - KendraIndex
      additionalProperties: false
    PriorityValue:
      description: The priority that a slot should be elicited.
      type: integer
      minimum: 0
      maximum: 100
    SlotPriority:
      description: The priority that Amazon Lex should use when eliciting slot values from a user.
      type: object
      properties:
        Priority:
          $ref: '#/components/schemas/PriorityValue'
        SlotName:
          description: The name of the slot.
          $ref: '#/components/schemas/Name'
      required:
        - SlotName
        - Priority
      additionalProperties: false
    SlotPrioritiesList:
      description: List for slot priorities
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/SlotPriority'
    Intent:
      description: Represents an action that the user wants to perform.
      type: object
      properties:
        Name:
          description: The name of the intent.
          $ref: '#/components/schemas/Name'
        Description:
          description: Description of thr intent.
          $ref: '#/components/schemas/Description'
        ParentIntentSignature:
          $ref: '#/components/schemas/ParentIntentSignature'
        SampleUtterances:
          description: A sample utterance that invokes an intent or respond to a slot elicitation prompt.
          $ref: '#/components/schemas/SampleUtterancesList'
        DialogCodeHook:
          $ref: '#/components/schemas/DialogCodeHookSetting'
        FulfillmentCodeHook:
          $ref: '#/components/schemas/FulfillmentCodeHookSetting'
        IntentConfirmationSetting:
          $ref: '#/components/schemas/IntentConfirmationSetting'
        IntentClosingSetting:
          $ref: '#/components/schemas/IntentClosingSetting'
        InitialResponseSetting:
          description: Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
          $ref: '#/components/schemas/InitialResponseSetting'
        InputContexts:
          $ref: '#/components/schemas/InputContextsList'
        OutputContexts:
          $ref: '#/components/schemas/OutputContextsList'
        KendraConfiguration:
          $ref: '#/components/schemas/KendraConfiguration'
        SlotPriorities:
          $ref: '#/components/schemas/SlotPrioritiesList'
        Slots:
          description: List of slots
          type: array
          maxItems: 100
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Slot'
      required:
        - Name
      additionalProperties: false
    ParentSlotTypeSignature:
      description: The built-in slot type used as a parent of this slot type.
      type: string
    SlotTypeName:
      description: The slot type name that is used in the slot. Allows for custom and built-in slot type names
      type: string
    SampleValue:
      description: Defines one of the values for a slot type.
      type: object
      properties:
        Value:
          description: The value that can be used for a slot type.
          type: string
          minLength: 1
          maxLength: 140
      required:
        - Value
      additionalProperties: false
    SynonymList:
      description: Additional values related to the slot type entry.
      type: array
      maxItems: 10000
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/SampleValue'
    SlotTypeValue:
      description: Value that the slot type can take.
      type: object
      properties:
        SampleValue:
          $ref: '#/components/schemas/SampleValue'
        Synonyms:
          $ref: '#/components/schemas/SynonymList'
      required:
        - SampleValue
      additionalProperties: false
    SlotTypeValues:
      description: A List of slot type values
      type: array
      maxItems: 10000
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/SlotTypeValue'
    SlotValueResolutionStrategy:
      type: string
      enum:
        - ORIGINAL_VALUE
        - TOP_RESOLUTION
    SlotValueRegexFilter:
      description: A regular expression used to validate the value of a slot.
      type: object
      properties:
        Pattern:
          description: Regex pattern
          type: string
          minLength: 1
          maxLength: 300
      required:
        - Pattern
      additionalProperties: false
    AudioRecognitionStrategy:
      description: Enables using slot values as a custom vocabulary when recognizing user utterances.
      type: string
      enum:
        - UseSlotValuesAsCustomVocabulary
    AdvancedRecognitionSetting:
      description: Provides settings that enable advanced recognition settings for slot values.
      type: object
      properties:
        AudioRecognitionStrategy:
          $ref: '#/components/schemas/AudioRecognitionStrategy'
      additionalProperties: false
    SlotValueSelectionSetting:
      description: Contains settings used by Amazon Lex to select a slot value.
      type: object
      properties:
        ResolutionStrategy:
          $ref: '#/components/schemas/SlotValueResolutionStrategy'
        RegexFilter:
          $ref: '#/components/schemas/SlotValueRegexFilter'
        AdvancedRecognitionSetting:
          $ref: '#/components/schemas/AdvancedRecognitionSetting'
      required:
        - ResolutionStrategy
      additionalProperties: false
    S3BucketName:
      type: string
      minLength: 3
      maxLength: 63
      pattern: ^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$
    S3ObjectKey:
      type: string
      minLength: 1
      maxLength: 1024
      pattern: '[\.\-\!\*\_\''\(\)a-zA-Z0-9][\.\-\!\*\_\''\(\)\/a-zA-Z0-9]*$'
    GrammarSlotTypeSource:
      description: Describes the Amazon S3 bucket name and location for the grammar that is the source for the slot type.
      type: object
      properties:
        S3BucketName:
          description: The name of the S3 bucket that contains the grammar source.
          $ref: '#/components/schemas/S3BucketName'
        S3ObjectKey:
          description: The path to the grammar in the S3 bucket.
          $ref: '#/components/schemas/S3ObjectKey'
        KmsKeyArn:
          description: The Amazon KMS key required to decrypt the contents of the grammar, if any.
          type: string
          minLength: 20
          maxLength: 2048
          pattern: ^arn:[\w\-]+:kms:[\w\-]+:[\d]{12}:(?:key\/[\w\-]+|alias\/[a-zA-Z0-9:\/_\-]{1,256})$
      required:
        - S3BucketName
        - S3ObjectKey
      additionalProperties: false
    GrammarSlotTypeSetting:
      description: Settings required for a slot type based on a grammar that you provide.
      type: object
      properties:
        Source:
          $ref: '#/components/schemas/GrammarSlotTypeSource'
      additionalProperties: false
    ExternalSourceSetting:
      description: Provides information about the external source of the slot type's definition.
      type: object
      properties:
        GrammarSlotTypeSetting:
          $ref: '#/components/schemas/GrammarSlotTypeSetting'
      additionalProperties: false
    SlotType:
      description: A custom, extended built-in or a grammar slot type.
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/Name'
        Description:
          $ref: '#/components/schemas/Description'
        ParentSlotTypeSignature:
          $ref: '#/components/schemas/ParentSlotTypeSignature'
        SlotTypeValues:
          $ref: '#/components/schemas/SlotTypeValues'
        ValueSelectionSetting:
          $ref: '#/components/schemas/SlotValueSelectionSetting'
        ExternalSourceSetting:
          $ref: '#/components/schemas/ExternalSourceSetting'
      required:
        - Name
      additionalProperties: false
    CustomVocabularyItem:
      description: A custom vocabulary item that contains the phrase to recognize and a weight to give the boost.
      type: object
      properties:
        Phrase:
          description: Phrase that should be recognized.
          type: string
          minLength: 1
          maxLength: 100
        Weight:
          description: The degree to which the phrase recognition is boosted. The weight 0 means that no boosting will be applied and the entry will only be used for performing replacements using the displayAs field.
          type: integer
          minimum: 0
          maximum: 3
        DisplayAs:
          description: Defines how you want your phrase to look in your transcription output.
          type: string
          minLength: 1
          maxLength: 100
      required:
        - Phrase
      additionalProperties: false
    CustomVocabularyItems:
      type: array
      maxItems: 500
      uniqueItems: true
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/CustomVocabularyItem'
    CustomVocabulary:
      description: A custom vocabulary is a list of specific phrases that you want Amazon Lex V2 to recognize in the audio input.
      type: object
      properties:
        CustomVocabularyItems:
          $ref: '#/components/schemas/CustomVocabularyItems'
      required:
        - CustomVocabularyItems
      additionalProperties: false
    SlotDefaultValue:
      description: The default value to use when a user doesn't provide a value for a slot.
      type: object
      properties:
        DefaultValue:
          description: The default value to use when a user doesn't provide a value for a slot.
          type: string
          minLength: 1
          maxLength: 202
      required:
        - DefaultValue
      additionalProperties: false
    SlotDefaultValueSpecification:
      description: A list of values that Amazon Lex should use as the default value for a slot.
      type: object
      properties:
        DefaultValueList:
          description: A list of slot default values
          type: array
          maxItems: 10
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SlotDefaultValue'
      required:
        - DefaultValueList
      additionalProperties: false
    SlotConstraint:
      type: string
      enum:
        - Required
        - Optional
    WaitAndContinueSpecification:
      description: The prompts that Amazon Lex uses while a bot is waiting for customer input.
      type: object
      properties:
        WaitingResponse:
          description: The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
          $ref: '#/components/schemas/ResponseSpecification'
        ContinueResponse:
          description: The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
          $ref: '#/components/schemas/ResponseSpecification'
        StillWaitingResponse:
          description: The response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
          $ref: '#/components/schemas/StillWaitingResponseSpecification'
        IsActive:
          description: Specifies whether the bot will wait for a user to respond.
          type: boolean
      required:
        - WaitingResponse
        - ContinueResponse
      additionalProperties: false
    SlotValueElicitationSetting:
      description: Settings that you can use for eliciting a slot value.
      type: object
      properties:
        DefaultValueSpecification:
          description: A list of default values for a slot.
          $ref: '#/components/schemas/SlotDefaultValueSpecification'
        SlotConstraint:
          description: Specifies whether the slot is required or optional.
          $ref: '#/components/schemas/SlotConstraint'
        PromptSpecification:
          description: The prompt that Amazon Lex uses to elicit the slot value from the user.
          $ref: '#/components/schemas/PromptSpecification'
        SampleUtterances:
          description: If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy.
          $ref: '#/components/schemas/SampleUtterancesList'
        WaitAndContinueSpecification:
          description: Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
          $ref: '#/components/schemas/WaitAndContinueSpecification'
        SlotCaptureSetting:
          description: Specifies the next stage in the conversation after capturing the slot.
          $ref: '#/components/schemas/SlotCaptureSetting'
      required:
        - SlotConstraint
      additionalProperties: false
    ObfuscationSetting:
      description: Determines whether Amazon Lex obscures slot values in conversation logs.
      type: object
      properties:
        ObfuscationSettingType:
          description: Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.
          type: string
          enum:
            - None
            - DefaultObfuscation
      required:
        - ObfuscationSettingType
      additionalProperties: false
    MultipleValuesSetting:
      description: Indicates whether a slot can return multiple values.
      type: object
      properties:
        AllowMultipleValues:
          type: boolean
      required: []
      additionalProperties: false
    Slot:
      description: A slot is a variable needed to fulfill an intent, where an intent can require zero or more slots.
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/Name'
        Description:
          $ref: '#/components/schemas/Description'
        SlotTypeName:
          $ref: '#/components/schemas/SlotTypeName'
        ValueElicitationSetting:
          $ref: '#/components/schemas/SlotValueElicitationSetting'
        ObfuscationSetting:
          $ref: '#/components/schemas/ObfuscationSetting'
        MultipleValuesSetting:
          $ref: '#/components/schemas/MultipleValuesSetting'
      required:
        - Name
        - SlotTypeName
        - ValueElicitationSetting
      additionalProperties: false
    BotLocale:
      description: A locale in the bot, which contains the intents and slot types that the bot uses in conversations with users in the specified language and locale.
      type: object
      properties:
        LocaleId:
          $ref: '#/components/schemas/LocaleId'
        Description:
          $ref: '#/components/schemas/Description'
        VoiceSettings:
          $ref: '#/components/schemas/VoiceSettings'
        NluConfidenceThreshold:
          $ref: '#/components/schemas/ConfidenceThreshold'
        Intents:
          description: List of intents
          type: array
          maxItems: 1000
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Intent'
        SlotTypes:
          description: List of SlotTypes
          type: array
          maxItems: 250
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SlotType'
        CustomVocabulary:
          $ref: '#/components/schemas/CustomVocabulary'
      required:
        - LocaleId
        - NluConfidenceThreshold
      additionalProperties: false
    S3Location:
      description: S3 location of bot definitions zip file, if it's not defined inline in CloudFormation.
      type: object
      properties:
        S3Bucket:
          description: An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
          $ref: '#/components/schemas/S3BucketName'
        S3ObjectKey:
          description: The Amazon S3 key of the deployment package.
          $ref: '#/components/schemas/S3ObjectKey'
        S3ObjectVersion:
          type: string
          description: For versioned objects, the version of the deployment package object to use. If not specified, the current object version will be used.
          minLength: 1
          maxLength: 1024
      required:
        - S3Bucket
        - S3ObjectKey
      additionalProperties: false
    Condition:
      description: Provides an expression that evaluates to true or false.
      type: object
      properties:
        ExpressionString:
          description: The expression string that is evaluated.
          $ref: '#/components/schemas/ConditionExpression'
      required:
        - ExpressionString
      additionalProperties: false
    Conditional:
      description: Contains conditional branches to fork the conversation flow.
      type: object
      properties:
        IsActive:
          type: boolean
        ConditionalBranches:
          $ref: '#/components/schemas/ConditionalBranches'
      required:
        - IsActive
        - ConditionalBranches
      additionalProperties: false
    ConditionalSpecification:
      description: Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
      type: object
      properties:
        IsActive:
          description: Determines whether a conditional branch is active. When active is false, the conditions are not evaluated.
          type: boolean
        ConditionalBranches:
          description: A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.
          $ref: '#/components/schemas/ConditionalBranches'
        DefaultBranch:
          description: The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.
          $ref: '#/components/schemas/DefaultConditionalBranch'
      required:
        - IsActive
        - ConditionalBranches
        - DefaultBranch
      additionalProperties: false
    DefaultConditionalBranch:
      description: A set of actions that Amazon Lex should run if none of the other conditions are met.
      type: object
      properties:
        NextStep:
          description: The next step in the conversation.
          $ref: '#/components/schemas/DialogState'
        Response:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
      additionalProperties: false
    ConditionalBranch:
      description: A set of actions that Amazon Lex should run if the condition is matched.
      type: object
      properties:
        Name:
          description: The name of the branch.
          $ref: '#/components/schemas/Name'
        Condition:
          description: Contains the expression to evaluate. If the condition is true, the branch's actions are taken.
          $ref: '#/components/schemas/Condition'
        NextStep:
          description: The next step in the conversation.
          $ref: '#/components/schemas/DialogState'
        Response:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
      required:
        - Name
        - Condition
        - NextStep
      additionalProperties: false
    ConditionalBranches:
      description: A list of 1 to 4 conditional branches to fork the conversation flow.
      type: array
      minItems: 1
      maxItems: 4
      x-insertionOrder: true
      items:
        $ref: '#/components/schemas/ConditionalBranch'
    InitialResponseSetting:
      description: Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
      type: object
      properties:
        InitialResponse:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
        NextStep:
          description: The next step in the conversation.
          $ref: '#/components/schemas/DialogState'
        Conditional:
          description: Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
          $ref: '#/components/schemas/ConditionalSpecification'
        CodeHook:
          description: Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
          $ref: '#/components/schemas/DialogCodeHookInvocationSetting'
      additionalProperties: false
    ConditionExpression:
      description: Expression that is evaluated to true or false at runtime.
      type: string
      minLength: 1
      maxLength: 1024
    DialogCodeHookInvocationSetting:
      description: Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
      type: object
      properties:
        EnableCodeHookInvocation:
          description: Indicates whether a Lambda function should be invoked for the dialog.
          type: boolean
        IsActive:
          description: Determines whether a dialog code hook is used when the intent is activated.
          type: boolean
        InvocationLabel:
          description: A label that indicates the dialog step from which the dialog code hook is happening.
          $ref: '#/components/schemas/Name'
        PostCodeHookSpecification:
          description: Contains the responses and actions that Amazon Lex takes after the Lambda function is complete.
          $ref: '#/components/schemas/PostDialogCodeHookInvocationSpecification'
      required:
        - IsActive
        - EnableCodeHookInvocation
        - PostCodeHookSpecification
      additionalProperties: false
    ElicitationCodeHookInvocationSetting:
      description: Settings that specify the dialog code hook that is called by Amazon Lex between eliciting slot values.
      type: object
      properties:
        EnableCodeHookInvocation:
          description: Indicates whether a Lambda function should be invoked for the dialog.
          type: boolean
        InvocationLabel:
          description: A label that indicates the dialog step from which the dialog code hook is happening.
          $ref: '#/components/schemas/Name'
      required:
        - EnableCodeHookInvocation
      additionalProperties: false
    PostDialogCodeHookInvocationSpecification:
      description: Specifies next steps to run after the dialog code hook finishes.
      type: object
      properties:
        SuccessResponse:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
        SuccessNextStep:
          description: Specifics the next step the bot runs after the dialog code hook finishes successfully.
          $ref: '#/components/schemas/DialogState'
        SuccessConditional:
          description: A list of conditional branches to evaluate after the dialog code hook finishes successfully.
          $ref: '#/components/schemas/ConditionalSpecification'
        FailureResponse:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
        FailureNextStep:
          description: Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
          $ref: '#/components/schemas/DialogState'
        FailureConditional:
          description: A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
          $ref: '#/components/schemas/ConditionalSpecification'
        TimeoutResponse:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
        TimeoutNextStep:
          description: Specifies the next step that the bot runs when the code hook times out.
          $ref: '#/components/schemas/DialogState'
        TimeoutConditional:
          description: A list of conditional branches to evaluate if the code hook times out.
          $ref: '#/components/schemas/ConditionalSpecification'
      additionalProperties: false
    DialogState:
      description: The current state of the conversation with the user.
      type: object
      properties:
        DialogAction:
          description: Defines the action that the bot executes at runtime when the conversation reaches this step.
          $ref: '#/components/schemas/DialogAction'
        Intent:
          description: Override settings to configure the intent state.
          $ref: '#/components/schemas/IntentOverride'
        SessionAttributes:
          description: List of session attributes to be applied when the conversation reaches this step.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SessionAttribute'
      additionalProperties: false
    DialogAction:
      description: Defines the action that the bot executes at runtime when the conversation reaches this step.
      type: object
      properties:
        Type:
          description: The action that the bot should execute.
          $ref: '#/components/schemas/DialogActionType'
        SlotToElicit:
          description: If the dialog action is ElicitSlot, defines the slot to elicit from the user.
          $ref: '#/components/schemas/Name'
        SuppressNextMessage:
          description: When true the next message for the intent is not used.
          type: boolean
      required:
        - Type
      additionalProperties: false
    DialogActionType:
      description: The possible values of actions that the conversation can take.
      type: string
      enum:
        - CloseIntent
        - ConfirmIntent
        - ElicitIntent
        - ElicitSlot
        - StartIntent
        - FulfillIntent
        - EndConversation
        - EvaluateConditional
        - InvokeDialogCodeHook
    SessionAttribute:
      description: Key/value pair representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 1024
        Value:
          type: string
          minLength: 0
          maxLength: 1024
      required:
        - Key
      additionalProperties: false
    IntentOverride:
      description: Override settings to configure the intent state.
      type: object
      properties:
        Name:
          description: The name of the intent. Only required when you're switching intents.
          $ref: '#/components/schemas/Name'
        Slots:
          description: A map of all of the slot value overrides for the intent.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SlotValueOverrideMap'
      additionalProperties: false
    SlotValueOverrideMap:
      description: A map of slot names and their overridden values.
      type: object
      properties:
        SlotName:
          $ref: '#/components/schemas/Name'
        SlotValueOverride:
          $ref: '#/components/schemas/SlotValueOverride'
      additionalProperties: false
    SlotValueOverride:
      description: The slot values that Amazon Lex uses when it sets slot values in a dialog step.
      type: object
      properties:
        Shape:
          description: When the shape value is List, it indicates that the values field contains a list of slot values. When the value is Scalar, it indicates that the value field contains a single value.
          $ref: '#/components/schemas/SlotShape'
        Value:
          description: The current value of the slot.
          $ref: '#/components/schemas/SlotValue'
        Values:
          description: A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."
          $ref: '#/components/schemas/SlotValues'
      additionalProperties: false
    SlotValue:
      description: The value to set in a slot.
      type: object
      properties:
        InterpretedValue:
          description: The value that Amazon Lex determines for the slot.
          type: string
          minLength: 1
          maxLength: 202
      additionalProperties: false
    SlotValues:
      description: An array of values that slots should be set to
      type: array
      items:
        $ref: '#/components/schemas/SlotValueOverride'
    SlotShape:
      description: The different shapes that a slot can be in during a conversation.
      type: string
      enum:
        - Scalar
        - List
    SlotCaptureSetting:
      description: Settings used when Amazon Lex successfully captures a slot value from a user.
      type: object
      properties:
        CaptureResponse:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
        CaptureNextStep:
          description: Specifies the next step that the bot runs when the slot value is captured before the code hook times out.
          $ref: '#/components/schemas/DialogState'
        CaptureConditional:
          description: A list of conditional branches to evaluate after the slot value is captured.
          $ref: '#/components/schemas/ConditionalSpecification'
        FailureResponse:
          description: Specifies a list of message groups that Amazon Lex uses to respond the user input.
          $ref: '#/components/schemas/ResponseSpecification'
        FailureNextStep:
          description: Specifies the next step that the bot runs when the slot value code is not recognized.
          $ref: '#/components/schemas/DialogState'
        FailureConditional:
          description: A list of conditional branches to evaluate when the slot value isn't captured.
          $ref: '#/components/schemas/ConditionalSpecification'
        CodeHook:
          description: Code hook called after Amazon Lex successfully captures a slot value.
          $ref: '#/components/schemas/DialogCodeHookInvocationSetting'
        ElicitationCodeHook:
          description: Code hook called when Amazon Lex doesn't capture a slot value.
          $ref: '#/components/schemas/ElicitationCodeHookInvocationSetting'
      additionalProperties: false
    Bot:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/Id'
        Arn:
          $ref: '#/components/schemas/BotArn'
        Name:
          $ref: '#/components/schemas/Name'
        Description:
          $ref: '#/components/schemas/Description'
        RoleArn:
          $ref: '#/components/schemas/RoleArn'
        DataPrivacy:
          description: Data privacy setting of the Bot.
          type: object
          properties:
            ChildDirected:
              type: boolean
              description: ''
          required:
            - ChildDirected
          additionalProperties: false
        IdleSessionTTLInSeconds:
          description: IdleSessionTTLInSeconds of the resource
          type: integer
          minimum: 60
          maximum: 86400
        BotLocales:
          description: List of bot locales
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/BotLocale'
        BotFileS3Location:
          $ref: '#/components/schemas/S3Location'
        BotTags:
          description: A list of tags to add to the bot, which can only be added at bot creation.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        TestBotAliasTags:
          description: A list of tags to add to the test alias for a bot, , which can only be added at bot/bot alias creation.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        AutoBuildBotLocales:
          description: Specifies whether to build the bot locales after bot creation completes.
          type: boolean
        TestBotAliasSettings:
          $ref: '#/components/schemas/TestBotAliasSettings'
        Replication:
          $ref: '#/components/schemas/Replication'
      required:
        - Name
        - RoleArn
        - DataPrivacy
        - IdleSessionTTLInSeconds
      x-stackql-resource-name: bot
      description: Amazon Lex conversational bot performing automated tasks such as ordering a pizza, booking a hotel, and so on.
      x-type-name: AWS::Lex::Bot
      x-stackql-primary-identifier:
        - Id
      x-write-only-properties:
        - BotLocales
        - BotFileS3Location
        - AutoBuildBotLocales
        - BotTags
        - TestBotAliasTags
        - Replication
      x-read-only-properties:
        - Id
        - Arn
      x-required-properties:
        - Name
        - RoleArn
        - DataPrivacy
        - IdleSessionTTLInSeconds
      x-taggable: true
      x-required-permissions:
        create:
          - iam:PassRole
          - lex:DescribeBot
          - lex:CreateUploadUrl
          - lex:StartImport
          - lex:DescribeImport
          - lex:ListTagsForResource
          - lex:TagResource
          - lex:CreateBot
          - lex:CreateBotLocale
          - lex:CreateIntent
          - lex:CreateSlot
          - lex:CreateSlotType
          - lex:UpdateBot
          - lex:UpdateBotLocale
          - lex:UpdateIntent
          - lex:UpdateSlot
          - lex:UpdateSlotType
          - lex:DeleteBotLocale
          - lex:DeleteIntent
          - lex:DeleteSlot
          - lex:DeleteSlotType
          - lex:DescribeBotLocale
          - lex:BuildBotLocale
          - lex:ListBots
          - lex:ListBotLocales
          - lex:CreateCustomVocabulary
          - lex:UpdateCustomVocabulary
          - lex:DeleteCustomVocabulary
          - s3:GetObject
          - lex:UpdateBotAlias
          - iam:CreateServiceLinkedRole
          - iam:GetRole
          - lex:CreateBotReplica
          - lex:DescribeBotReplica
          - lex:DeleteBotReplica
        read:
          - lex:DescribeBot
          - lex:ListTagsForResource
          - lex:DescribeBotReplica
        update:
          - iam:PassRole
          - lex:DescribeBot
          - lex:CreateUploadUrl
          - lex:StartImport
          - lex:DescribeImport
          - lex:ListTagsForResource
          - lex:TagResource
          - lex:UntagResource
          - lex:CreateBot
          - lex:CreateBotLocale
          - lex:CreateIntent
          - lex:CreateSlot
          - lex:CreateSlotType
          - lex:UpdateBot
          - lex:UpdateBotLocale
          - lex:UpdateIntent
          - lex:UpdateSlot
          - lex:UpdateSlotType
          - lex:DeleteBotLocale
          - lex:DeleteIntent
          - lex:DeleteSlot
          - lex:DeleteSlotType
          - lex:DescribeBotLocale
          - lex:BuildBotLocale
          - lex:ListBots
          - lex:ListBotLocales
          - lex:CreateCustomVocabulary
          - lex:UpdateCustomVocabulary
          - lex:DeleteCustomVocabulary
          - s3:GetObject
          - lex:UpdateBotAlias
          - lex:CreateBotReplica
          - lex:DescribeBotReplica
          - lex:DeleteBotReplica
        delete:
          - lex:DeleteBot
          - lex:DescribeBot
          - lex:DeleteBotLocale
          - lex:DeleteIntent
          - lex:DeleteSlotType
          - lex:DeleteSlot
          - lex:DeleteBotVersion
          - lex:DeleteBotChannel
          - lex:DeleteBotAlias
          - lex:DeleteCustomVocabulary
          - lex:DeleteBotReplica
        list:
          - lex:ListBots
          - lex:ListBotReplicas
    BotAliasStatus:
      type: string
      enum:
        - Creating
        - Available
        - Deleting
        - Failed
    BotVersion:
      type: object
      properties:
        BotId:
          $ref: '#/components/schemas/Id'
        BotVersion:
          $ref: '#/components/schemas/BotVersion'
        Description:
          $ref: '#/components/schemas/Description'
        BotVersionLocaleSpecification:
          $ref: '#/components/schemas/BotVersionLocaleSpecificationList'
      required:
        - BotId
        - BotVersionLocaleSpecification
      x-stackql-resource-name: bot_version
      description: A version is a numbered snapshot of your work that you can publish for use in different parts of your workflow, such as development, beta deployment, and production.
      x-type-name: AWS::Lex::BotVersion
      x-stackql-primary-identifier:
        - BotId
        - BotVersion
      x-create-only-properties:
        - BotId
      x-write-only-properties:
        - BotVersionLocaleSpecification
      x-read-only-properties:
        - BotVersion
      x-required-properties:
        - BotId
        - BotVersionLocaleSpecification
      x-required-permissions:
        create:
          - lex:CreateBotVersion
          - lex:DescribeBotVersion
          - lex:DescribeBot
          - lex:DescribeBotLocale
          - lex:BuildBotLocale
        read:
          - lex:DescribeBotVersion
        delete:
          - lex:DeleteBotVersion
          - lex:DescribeBotVersion
        list:
          - lex:ListBotVersions
    Arn:
      type: string
      maxLength: 1000
    BotAlias:
      type: object
      properties:
        BotAliasId:
          $ref: '#/components/schemas/Id'
        BotId:
          $ref: '#/components/schemas/Id'
        Arn:
          $ref: '#/components/schemas/Arn'
        BotAliasStatus:
          $ref: '#/components/schemas/BotAliasStatus'
        BotAliasLocaleSettings:
          $ref: '#/components/schemas/BotAliasLocaleSettingsList'
        BotAliasName:
          $ref: '#/components/schemas/Name'
        BotVersion:
          $ref: '#/components/schemas/BotVersion'
        ConversationLogSettings:
          $ref: '#/components/schemas/ConversationLogSettings'
        Description:
          $ref: '#/components/schemas/Description'
        SentimentAnalysisSettings:
          description: Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
          type: object
          properties:
            DetectSentiment:
              type: boolean
              description: Enable to call Amazon Comprehend for Sentiment natively within Lex
          required:
            - DetectSentiment
          additionalProperties: false
        BotAliasTags:
          description: A list of tags to add to the bot alias.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - BotId
        - BotAliasName
      x-stackql-resource-name: bot_alias
      description: A Bot Alias enables you to change the version of a bot without updating applications that use the bot
      x-type-name: AWS::Lex::BotAlias
      x-stackql-primary-identifier:
        - BotAliasId
        - BotId
      x-create-only-properties:
        - BotId
      x-write-only-properties:
        - BotAliasTags
      x-read-only-properties:
        - BotAliasId
        - Arn
        - BotAliasStatus
      x-required-properties:
        - BotId
        - BotAliasName
      x-required-permissions:
        create:
          - lex:CreateBotAlias
          - lex:DescribeBot
        update:
          - lex:UpdateBotAlias
          - lex:DescribeBotAlias
          - lex:ListTagsForResource
          - lex:TagResource
          - lex:UntagResource
        read:
          - lex:DescribeBotAlias
        delete:
          - lex:DeleteBotAlias
        list:
          - lex:ListBotAliases
    BotVersionLocaleDetails:
      description: The version of a bot used for a bot locale.
      type: object
      properties:
        SourceBotVersion:
          $ref: '#/components/schemas/BotVersion'
      required:
        - SourceBotVersion
      additionalProperties: false
    BotVersionLocaleSpecification:
      type: object
      properties:
        LocaleId:
          $ref: '#/components/schemas/LocaleId'
        BotVersionLocaleDetails:
          $ref: '#/components/schemas/BotVersionLocaleDetails'
      required:
        - LocaleId
        - BotVersionLocaleDetails
      additionalProperties: false
    BotVersionLocaleSpecificationList:
      description: Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously published version for each locale.
      type: array
      x-insertionOrder: false
      minItems: 1
      items:
        $ref: '#/components/schemas/BotVersionLocaleSpecification'
    ResourceArn:
      description: The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.
      type: string
      minLength: 1
      maxLength: 1011
    Policy:
      description: A resource policy to add to the resource. The policy is a JSON structure following the IAM syntax that contains one or more statements that define the policy.
      type: object
    RevisionId:
      description: The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.
      type: string
      minLength: 1
      maxLength: 5
      pattern: ^[0-9]+$
    PhysicalId:
      description: The Physical ID of the resource policy.
      type: string
    ResourcePolicy:
      type: object
      properties:
        ResourceArn:
          $ref: '#/components/schemas/ResourceArn'
        RevisionId:
          $ref: '#/components/schemas/RevisionId'
        Policy:
          $ref: '#/components/schemas/Policy'
        Id:
          $ref: '#/components/schemas/PhysicalId'
      required:
        - ResourceArn
        - Policy
      x-stackql-resource-name: resource_policy
      description: A resource policy with specified policy statements that attaches to a Lex bot or bot alias.
      x-type-name: AWS::Lex::ResourcePolicy
      x-stackql-primary-identifier:
        - Id
      x-stackql-additional-identifiers:
        - - ResourceArn
      x-read-only-properties:
        - Id
        - RevisionId
      x-required-properties:
        - ResourceArn
        - Policy
      x-required-permissions:
        create:
          - lex:CreateResourcePolicy
          - lex:DescribeResourcePolicy
        read:
          - lex:DescribeResourcePolicy
        update:
          - lex:UpdateResourcePolicy
          - lex:DescribeResourcePolicy
        delete:
          - lex:DeleteResourcePolicy
          - lex:DescribeResourcePolicy
        list:
          - lex:DescribeResourcePolicy
    CreateBotRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              $ref: '#/components/schemas/Id'
            Arn:
              $ref: '#/components/schemas/BotArn'
            Name:
              $ref: '#/components/schemas/Name'
            Description:
              $ref: '#/components/schemas/Description'
            RoleArn:
              $ref: '#/components/schemas/RoleArn'
            DataPrivacy:
              description: Data privacy setting of the Bot.
              type: object
              properties:
                ChildDirected:
                  type: boolean
                  description: ''
              required:
                - ChildDirected
              additionalProperties: false
            IdleSessionTTLInSeconds:
              description: IdleSessionTTLInSeconds of the resource
              type: integer
              minimum: 60
              maximum: 86400
            BotLocales:
              description: List of bot locales
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/BotLocale'
            BotFileS3Location:
              $ref: '#/components/schemas/S3Location'
            BotTags:
              description: A list of tags to add to the bot, which can only be added at bot creation.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            TestBotAliasTags:
              description: A list of tags to add to the test alias for a bot, , which can only be added at bot/bot alias creation.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            AutoBuildBotLocales:
              description: Specifies whether to build the bot locales after bot creation completes.
              type: boolean
            TestBotAliasSettings:
              $ref: '#/components/schemas/TestBotAliasSettings'
            Replication:
              $ref: '#/components/schemas/Replication'
          x-stackQL-stringOnly: true
      x-title: CreateBotRequest
      type: object
      required: []
    CreateBotVersionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            BotId:
              $ref: '#/components/schemas/Id'
            BotVersion:
              $ref: '#/components/schemas/BotVersion'
            Description:
              $ref: '#/components/schemas/Description'
            BotVersionLocaleSpecification:
              $ref: '#/components/schemas/BotVersionLocaleSpecificationList'
          x-stackQL-stringOnly: true
      x-title: CreateBotVersionRequest
      type: object
      required: []
    CreateBotAliasRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            BotAliasId:
              $ref: '#/components/schemas/Id'
            BotId:
              $ref: '#/components/schemas/Id'
            Arn:
              $ref: '#/components/schemas/Arn'
            BotAliasStatus:
              $ref: '#/components/schemas/BotAliasStatus'
            BotAliasLocaleSettings:
              $ref: '#/components/schemas/BotAliasLocaleSettingsList'
            BotAliasName:
              $ref: '#/components/schemas/Name'
            BotVersion:
              $ref: '#/components/schemas/BotVersion'
            ConversationLogSettings:
              $ref: '#/components/schemas/ConversationLogSettings'
            Description:
              $ref: '#/components/schemas/Description'
            SentimentAnalysisSettings:
              description: Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
              type: object
              properties:
                DetectSentiment:
                  type: boolean
                  description: Enable to call Amazon Comprehend for Sentiment natively within Lex
              required:
                - DetectSentiment
              additionalProperties: false
            BotAliasTags:
              description: A list of tags to add to the bot alias.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateBotAliasRequest
      type: object
      required: []
    CreateResourcePolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ResourceArn:
              $ref: '#/components/schemas/ResourceArn'
            RevisionId:
              $ref: '#/components/schemas/RevisionId'
            Policy:
              $ref: '#/components/schemas/Policy'
            Id:
              $ref: '#/components/schemas/PhysicalId'
          x-stackQL-stringOnly: true
      x-title: CreateResourcePolicyRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    bots:
      name: bots
      id: aws.lex.bots
      x-cfn-schema-name: Bot
      x-cfn-type-name: AWS::Lex::Bot
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Bot&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lex::Bot"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lex::Bot"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lex::Bot"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/bots/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/bots/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/bots/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.DataPrivacy') as data_privacy,
              JSON_EXTRACT(Properties, '$.IdleSessionTTLInSeconds') as idle_session_ttl_in_seconds,
              JSON_EXTRACT(Properties, '$.BotLocales') as bot_locales,
              JSON_EXTRACT(Properties, '$.BotFileS3Location') as bot_file_s3_location,
              JSON_EXTRACT(Properties, '$.BotTags') as bot_tags,
              JSON_EXTRACT(Properties, '$.TestBotAliasTags') as test_bot_alias_tags,
              JSON_EXTRACT(Properties, '$.AutoBuildBotLocales') as auto_build_bot_locales,
              JSON_EXTRACT(Properties, '$.TestBotAliasSettings') as test_bot_alias_settings,
              JSON_EXTRACT(Properties, '$.Replication') as replication
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lex::Bot'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.DataPrivacy') as data_privacy,
                JSON_EXTRACT(detail.Properties, '$.IdleSessionTTLInSeconds') as idle_session_ttl_in_seconds,
                JSON_EXTRACT(detail.Properties, '$.BotLocales') as bot_locales,
                JSON_EXTRACT(detail.Properties, '$.BotFileS3Location') as bot_file_s3_location,
                JSON_EXTRACT(detail.Properties, '$.BotTags') as bot_tags,
                JSON_EXTRACT(detail.Properties, '$.TestBotAliasTags') as test_bot_alias_tags,
                JSON_EXTRACT(detail.Properties, '$.AutoBuildBotLocales') as auto_build_bot_locales,
                JSON_EXTRACT(detail.Properties, '$.TestBotAliasSettings') as test_bot_alias_settings,
                JSON_EXTRACT(detail.Properties, '$.Replication') as replication
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lex::Bot'
                AND detail.data__TypeName = 'AWS::Lex::Bot'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'DataPrivacy') as data_privacy,
                  json_extract_path_text(Properties, 'IdleSessionTTLInSeconds') as idle_session_ttl_in_seconds,
                  json_extract_path_text(Properties, 'BotLocales') as bot_locales,
                  json_extract_path_text(Properties, 'BotFileS3Location') as bot_file_s3_location,
                  json_extract_path_text(Properties, 'BotTags') as bot_tags,
                  json_extract_path_text(Properties, 'TestBotAliasTags') as test_bot_alias_tags,
                  json_extract_path_text(Properties, 'AutoBuildBotLocales') as auto_build_bot_locales,
                  json_extract_path_text(Properties, 'TestBotAliasSettings') as test_bot_alias_settings,
                  json_extract_path_text(Properties, 'Replication') as replication
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lex::Bot'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'DataPrivacy') as data_privacy,
                    json_extract_path_text(detail.Properties, 'IdleSessionTTLInSeconds') as idle_session_ttl_in_seconds,
                    json_extract_path_text(detail.Properties, 'BotLocales') as bot_locales,
                    json_extract_path_text(detail.Properties, 'BotFileS3Location') as bot_file_s3_location,
                    json_extract_path_text(detail.Properties, 'BotTags') as bot_tags,
                    json_extract_path_text(detail.Properties, 'TestBotAliasTags') as test_bot_alias_tags,
                    json_extract_path_text(detail.Properties, 'AutoBuildBotLocales') as auto_build_bot_locales,
                    json_extract_path_text(detail.Properties, 'TestBotAliasSettings') as test_bot_alias_settings,
                    json_extract_path_text(detail.Properties, 'Replication') as replication
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lex::Bot'
                    AND detail.data__TypeName = 'AWS::Lex::Bot'
                    AND listing.region = 'us-east-1'
    bots_list_only:
      name: bots_list_only
      id: aws.lex.bots_list_only
      x-cfn-schema-name: Bot
      x-cfn-type-name: AWS::Lex::Bot
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lex::Bot'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lex::Bot'
                AND region = 'us-east-1'
    bot_versions:
      name: bot_versions
      id: aws.lex.bot_versions
      x-cfn-schema-name: BotVersion
      x-cfn-type-name: AWS::Lex::BotVersion
      x-identifiers:
        - BotId
        - BotVersion
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__BotVersion&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lex::BotVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lex::BotVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/bot_versions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/bot_versions/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.BotId') as bot_id,
              JSON_EXTRACT(Properties, '$.BotVersion') as bot_version,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.BotVersionLocaleSpecification') as bot_version_locale_specification
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lex::BotVersion'
              AND data__Identifier = '<BotId>|<BotVersion>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.BotId') as bot_id,
                JSON_EXTRACT(detail.Properties, '$.BotVersion') as bot_version,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.BotVersionLocaleSpecification') as bot_version_locale_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lex::BotVersion'
                AND detail.data__TypeName = 'AWS::Lex::BotVersion'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'BotId') as bot_id,
                  json_extract_path_text(Properties, 'BotVersion') as bot_version,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'BotVersionLocaleSpecification') as bot_version_locale_specification
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lex::BotVersion'
                  AND data__Identifier = '<BotId>|<BotVersion>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'BotId') as bot_id,
                    json_extract_path_text(detail.Properties, 'BotVersion') as bot_version,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'BotVersionLocaleSpecification') as bot_version_locale_specification
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lex::BotVersion'
                    AND detail.data__TypeName = 'AWS::Lex::BotVersion'
                    AND listing.region = 'us-east-1'
    bot_versions_list_only:
      name: bot_versions_list_only
      id: aws.lex.bot_versions_list_only
      x-cfn-schema-name: BotVersion
      x-cfn-type-name: AWS::Lex::BotVersion
      x-identifiers:
        - BotId
        - BotVersion
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BotId') as bot_id,
              JSON_EXTRACT(Properties, '$.BotVersion') as bot_version
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lex::BotVersion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'BotId') as bot_id,
                json_extract_path_text(Properties, 'BotVersion') as bot_version
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lex::BotVersion'
                AND region = 'us-east-1'
    bot_aliases:
      name: bot_aliases
      id: aws.lex.bot_aliases
      x-cfn-schema-name: BotAlias
      x-cfn-type-name: AWS::Lex::BotAlias
      x-identifiers:
        - BotAliasId
        - BotId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__BotAlias&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lex::BotAlias"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lex::BotAlias"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lex::BotAlias"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/bot_aliases/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/bot_aliases/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/bot_aliases/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.BotAliasId') as bot_alias_id,
              JSON_EXTRACT(Properties, '$.BotId') as bot_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.BotAliasStatus') as bot_alias_status,
              JSON_EXTRACT(Properties, '$.BotAliasLocaleSettings') as bot_alias_locale_settings,
              JSON_EXTRACT(Properties, '$.BotAliasName') as bot_alias_name,
              JSON_EXTRACT(Properties, '$.BotVersion') as bot_version,
              JSON_EXTRACT(Properties, '$.ConversationLogSettings') as conversation_log_settings,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SentimentAnalysisSettings') as sentiment_analysis_settings,
              JSON_EXTRACT(Properties, '$.BotAliasTags') as bot_alias_tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lex::BotAlias'
              AND data__Identifier = '<BotAliasId>|<BotId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.BotAliasId') as bot_alias_id,
                JSON_EXTRACT(detail.Properties, '$.BotId') as bot_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.BotAliasStatus') as bot_alias_status,
                JSON_EXTRACT(detail.Properties, '$.BotAliasLocaleSettings') as bot_alias_locale_settings,
                JSON_EXTRACT(detail.Properties, '$.BotAliasName') as bot_alias_name,
                JSON_EXTRACT(detail.Properties, '$.BotVersion') as bot_version,
                JSON_EXTRACT(detail.Properties, '$.ConversationLogSettings') as conversation_log_settings,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.SentimentAnalysisSettings') as sentiment_analysis_settings,
                JSON_EXTRACT(detail.Properties, '$.BotAliasTags') as bot_alias_tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lex::BotAlias'
                AND detail.data__TypeName = 'AWS::Lex::BotAlias'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'BotAliasId') as bot_alias_id,
                  json_extract_path_text(Properties, 'BotId') as bot_id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'BotAliasStatus') as bot_alias_status,
                  json_extract_path_text(Properties, 'BotAliasLocaleSettings') as bot_alias_locale_settings,
                  json_extract_path_text(Properties, 'BotAliasName') as bot_alias_name,
                  json_extract_path_text(Properties, 'BotVersion') as bot_version,
                  json_extract_path_text(Properties, 'ConversationLogSettings') as conversation_log_settings,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'SentimentAnalysisSettings') as sentiment_analysis_settings,
                  json_extract_path_text(Properties, 'BotAliasTags') as bot_alias_tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lex::BotAlias'
                  AND data__Identifier = '<BotAliasId>|<BotId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'BotAliasId') as bot_alias_id,
                    json_extract_path_text(detail.Properties, 'BotId') as bot_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'BotAliasStatus') as bot_alias_status,
                    json_extract_path_text(detail.Properties, 'BotAliasLocaleSettings') as bot_alias_locale_settings,
                    json_extract_path_text(detail.Properties, 'BotAliasName') as bot_alias_name,
                    json_extract_path_text(detail.Properties, 'BotVersion') as bot_version,
                    json_extract_path_text(detail.Properties, 'ConversationLogSettings') as conversation_log_settings,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'SentimentAnalysisSettings') as sentiment_analysis_settings,
                    json_extract_path_text(detail.Properties, 'BotAliasTags') as bot_alias_tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lex::BotAlias'
                    AND detail.data__TypeName = 'AWS::Lex::BotAlias'
                    AND listing.region = 'us-east-1'
    bot_aliases_list_only:
      name: bot_aliases_list_only
      id: aws.lex.bot_aliases_list_only
      x-cfn-schema-name: BotAlias
      x-cfn-type-name: AWS::Lex::BotAlias
      x-identifiers:
        - BotAliasId
        - BotId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BotAliasId') as bot_alias_id,
              JSON_EXTRACT(Properties, '$.BotId') as bot_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lex::BotAlias'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'BotAliasId') as bot_alias_id,
                json_extract_path_text(Properties, 'BotId') as bot_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lex::BotAlias'
                AND region = 'us-east-1'
    resource_policies:
      name: resource_policies
      id: aws.lex.resource_policies
      x-cfn-schema-name: ResourcePolicy
      x-cfn-type-name: AWS::Lex::ResourcePolicy
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResourcePolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lex::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lex::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lex::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.RevisionId') as revision_id,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lex::ResourcePolicy'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
                JSON_EXTRACT(detail.Properties, '$.RevisionId') as revision_id,
                JSON_EXTRACT(detail.Properties, '$.Policy') as policy,
                JSON_EXTRACT(detail.Properties, '$.Id') as id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lex::ResourcePolicy'
                AND detail.data__TypeName = 'AWS::Lex::ResourcePolicy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                  json_extract_path_text(Properties, 'RevisionId') as revision_id,
                  json_extract_path_text(Properties, 'Policy') as policy,
                  json_extract_path_text(Properties, 'Id') as id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lex::ResourcePolicy'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                    json_extract_path_text(detail.Properties, 'RevisionId') as revision_id,
                    json_extract_path_text(detail.Properties, 'Policy') as policy,
                    json_extract_path_text(detail.Properties, 'Id') as id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lex::ResourcePolicy'
                    AND detail.data__TypeName = 'AWS::Lex::ResourcePolicy'
                    AND listing.region = 'us-east-1'
    resource_policies_list_only:
      name: resource_policies_list_only
      id: aws.lex.resource_policies_list_only
      x-cfn-schema-name: ResourcePolicy
      x-cfn-type-name: AWS::Lex::ResourcePolicy
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lex::ResourcePolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lex::ResourcePolicy'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Bot&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateBot
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateBotRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__BotVersion&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateBotVersion
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateBotVersionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__BotAlias&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateBotAlias
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateBotAliasRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResourcePolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResourcePolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResourcePolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
