openapi: 3.0.0
info:
  title: MemoryDB
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with ''aws:''. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          pattern: ^(?!aws:)[a-zA-Z0-9 _\.\/=+:\-@]*$
          minLength: 1
          maxLength: 128
        Value:
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          pattern: ^[a-zA-Z0-9 _\.\/=+:\-@]*$
          minLength: 0
          maxLength: 256
      required:
        - Key
    ACL:
      type: object
      properties:
        Status:
          description: Indicates acl status. Can be "creating", "active", "modifying", "deleting".
          type: string
        ACLName:
          description: The name of the acl.
          pattern: '[a-z][a-z0-9\\-]*'
          type: string
        UserNames:
          type: array
          x-$comment: List of users.
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
          description: List of users associated to this acl.
        Arn:
          description: The Amazon Resource Name (ARN) of the acl.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this cluster.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ACLName
      x-stackql-resource-name: acl
      description: Resource Type definition for AWS::MemoryDB::ACL
      x-type-name: AWS::MemoryDB::ACL
      x-stackql-primary-identifier:
        - ACLName
      x-create-only-properties:
        - ACLName
      x-read-only-properties:
        - Status
        - Arn
      x-required-properties:
        - ACLName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - memorydb:TagResource
          - memorydb:ListTags
          - memorydb:UntagResource
      x-required-permissions:
        create:
          - memorydb:CreateACL
          - memorydb:DescribeACLs
          - memorydb:TagResource
          - memorydb:ListTags
        read:
          - memorydb:DescribeACLs
          - memorydb:ListTags
        update:
          - memorydb:UpdateACL
          - memorydb:DescribeACLs
          - memorydb:ListTags
          - memorydb:TagResource
          - memorydb:UntagResource
        delete:
          - memorydb:ModifyReplicationGroup
          - memorydb:DeleteACL
          - memorydb:DescribeACLs
        list:
          - memorydb:DescribeACLs
          - memorydb:ListTags
    Endpoint:
      type: object
      additionalProperties: false
      properties:
        Address:
          description: The DNS address of the primary read-write node.
          type: string
        Port:
          description: 'The port number that the engine is listening on. '
          type: integer
    DataTieringStatus:
      type: string
      enum:
        - 'true'
        - 'false'
    Cluster:
      type: object
      properties:
        ClusterName:
          description: The name of the cluster. This value must be unique as it also serves as the cluster identifier.
          pattern: '[a-z][a-z0-9\-]*'
          type: string
        Description:
          description: An optional description of the cluster.
          type: string
        MultiRegionClusterName:
          description: The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.
          type: string
        Status:
          description: The status of the cluster. For example, Available, Updating, Creating.
          type: string
        NodeType:
          description: The compute and memory capacity of the nodes in the cluster.
          type: string
        NumShards:
          description: The number of shards the cluster will contain.
          type: integer
        NumReplicasPerShard:
          description: The number of replicas to apply to each shard. The limit is 5.
          type: integer
        SubnetGroupName:
          description: The name of the subnet group to be used for the cluster.
          type: string
        SecurityGroupIds:
          description: One or more Amazon VPC security groups associated with this cluster.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        MaintenanceWindow:
          description: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
          type: string
        ParameterGroupName:
          description: The name of the parameter group associated with the cluster.
          type: string
        ParameterGroupStatus:
          description: The status of the parameter group used by the cluster.
          type: string
        Port:
          description: The port number on which each member of the cluster accepts connections.
          type: integer
        SnapshotRetentionLimit:
          description: The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
          type: integer
        SnapshotWindow:
          description: The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
          type: string
        ACLName:
          description: The name of the Access Control List to associate with the cluster.
          type: string
          pattern: '[a-zA-Z][a-zA-Z0-9\-]*'
        SnsTopicArn:
          description: The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
          type: string
        SnsTopicStatus:
          description: The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
          type: string
        TLSEnabled:
          description: |-
            A flag that enables in-transit encryption when set to true.

            You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
          type: boolean
        DataTiering:
          type: object
          description: Enables data tiering. Data tiering is only supported for clusters using the r6gd node type. This parameter must be set when using r6gd nodes.
          $ref: '#/components/schemas/DataTieringStatus'
        KmsKeyId:
          description: The ID of the KMS key used to encrypt the cluster.
          type: string
        SnapshotArns:
          description: A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        SnapshotName:
          description: The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while the new cluster is being created.
          type: string
        FinalSnapshotName:
          description: The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.
          type: string
        ARN:
          description: The Amazon Resource Name (ARN) of the cluster.
          type: string
        Engine:
          description: The engine type used by the cluster.
          type: string
        EngineVersion:
          description: The Redis engine version used by the cluster.
          type: string
        ClusterEndpoint:
          description: The cluster endpoint.
          $ref: '#/components/schemas/Endpoint'
        AutoMinorVersionUpgrade:
          description: |-
            A flag that enables automatic minor version upgrade when set to true.

            You cannot modify the value of AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set AutoMinorVersionUpgrade to true when you create a cluster.
          type: boolean
        Tags:
          description: An array of key-value pairs to apply to this cluster.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ClusterName
        - NodeType
        - ACLName
      x-stackql-resource-name: cluster
      description: The AWS::MemoryDB::Cluster resource creates an Amazon MemoryDB Cluster.
      x-type-name: AWS::MemoryDB::Cluster
      x-stackql-primary-identifier:
        - ClusterName
      x-create-only-properties:
        - ClusterName
        - TLSEnabled
        - DataTiering
        - KmsKeyId
        - Port
        - SubnetGroupName
        - SnapshotArns
        - MultiRegionClusterName
        - SnapshotName
      x-write-only-properties:
        - SnapshotArns
        - SnapshotName
        - MultiRegionClusterName
        - FinalSnapshotName
      x-read-only-properties:
        - Status
        - ClusterEndpoint/Address
        - ClusterEndpoint/Port
        - ARN
        - ParameterGroupStatus
      x-required-properties:
        - ClusterName
        - NodeType
        - ACLName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - memorydb:TagResource
          - memorydb:ListTags
          - memorydb:UntagResource
      x-required-permissions:
        create:
          - kms:DescribeKey
          - kms:CreateGrant
          - memorydb:CreateCluster
          - memorydb:DescribeClusters
          - memorydb:TagResource
          - memorydb:ListTags
        read:
          - memorydb:DescribeClusters
          - memorydb:ListTags
        update:
          - memorydb:UpdateCluster
          - memorydb:DescribeClusters
          - memorydb:ListTags
          - memorydb:TagResource
          - memorydb:UntagResource
        delete:
          - memorydb:DeleteCluster
          - memorydb:DescribeClusters
        list:
          - memorydb:DescribeClusters
    MultiRegionCluster:
      type: object
      properties:
        MultiRegionClusterNameSuffix:
          description: The name of the Multi Region cluster. This value must be unique as it also serves as the multi region cluster identifier.
          pattern: '[a-z][a-z0-9\-]*'
          type: string
        Description:
          description: Description of the multi region cluster.
          type: string
        MultiRegionClusterName:
          description: The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.
          type: string
        Status:
          description: The status of the multi region cluster. For example, Available, Updating, Creating.
          type: string
        NodeType:
          description: The compute and memory capacity of the nodes in the multi region cluster.
          type: string
        NumShards:
          description: The number of shards the multi region cluster will contain.
          type: integer
        MultiRegionParameterGroupName:
          description: The name of the parameter group associated with the multi region cluster.
          type: string
        TLSEnabled:
          description: |-
            A flag that enables in-transit encryption when set to true.

            You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
          type: boolean
        ARN:
          description: The Amazon Resource Name (ARN) of the multi region cluster.
          type: string
        Engine:
          description: The engine type used by the multi region cluster.
          type: string
        EngineVersion:
          description: The Redis engine version used by the multi region cluster.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this multi region cluster.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        UpdateStrategy:
          description: An enum string value that determines the update strategy for scaling. Possible values are 'COORDINATED' and 'UNCOORDINATED'. Default is 'COORDINATED'.
          type: string
          enum:
            - COORDINATED
            - UNCOORDINATED
      required:
        - NodeType
      x-stackql-resource-name: multi_region_cluster
      description: The AWS::MemoryDB::Multi Region Cluster resource creates an Amazon MemoryDB Multi Region Cluster.
      x-type-name: AWS::MemoryDB::MultiRegionCluster
      x-stackql-primary-identifier:
        - MultiRegionClusterName
      x-create-only-properties:
        - MultiRegionClusterNameSuffix
        - EngineVersion
        - MultiRegionParameterGroupName
        - TLSEnabled
      x-write-only-properties:
        - MultiRegionClusterNameSuffix
        - UpdateStrategy
      x-read-only-properties:
        - MultiRegionClusterName
        - Status
        - ARN
      x-required-properties:
        - NodeType
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - memorydb:TagResource
          - memorydb:ListTags
          - memorydb:UntagResource
      x-required-permissions:
        create:
          - memorydb:CreateMultiRegionCluster
          - memorydb:DescribeMultiRegionClusters
          - memorydb:TagResource
          - memorydb:ListTags
        read:
          - memorydb:DescribeMultiRegionClusters
          - memorydb:ListTags
        update:
          - memorydb:UpdateMultiRegionCluster
          - memorydb:DescribeMultiRegionClusters
          - memorydb:ListTags
          - memorydb:TagResource
          - memorydb:UntagResource
        delete:
          - memorydb:DeleteMultiRegionCluster
          - memorydb:DescribeMultiRegionClusters
        list:
          - memorydb:DescribeMultiRegionClusters
    ParameterGroup:
      type: object
      properties:
        ParameterGroupName:
          description: The name of the parameter group.
          type: string
        Family:
          description: The name of the parameter group family that this parameter group is compatible with.
          type: string
        Description:
          description: A description of the parameter group.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this parameter group.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Parameters:
          description: An map of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional.
          type: object
        ARN:
          description: The Amazon Resource Name (ARN) of the parameter group.
          type: string
      required:
        - ParameterGroupName
        - Family
      x-stackql-resource-name: parameter_group
      description: The AWS::MemoryDB::ParameterGroup resource creates an Amazon MemoryDB ParameterGroup.
      x-type-name: AWS::MemoryDB::ParameterGroup
      x-stackql-primary-identifier:
        - ParameterGroupName
      x-create-only-properties:
        - ParameterGroupName
        - Family
        - Description
      x-write-only-properties:
        - Parameters
      x-read-only-properties:
        - ARN
      x-required-properties:
        - ParameterGroupName
        - Family
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - memorydb:TagResource
          - memorydb:ListTags
          - memorydb:UntagResource
      x-required-permissions:
        create:
          - memorydb:CreateParameterGroup
          - memorydb:DescribeParameterGroups
          - memorydb:TagResource
          - memorydb:ListTags
        read:
          - memorydb:DescribeParameterGroups
          - memorydb:ListTags
        update:
          - memorydb:UpdateParameterGroup
          - memorydb:DescribeParameterGroups
          - memorydb:DescribeParameters
          - memorydb:DescribeClusters
          - memorydb:ListTags
          - memorydb:TagResource
          - memorydb:UntagResource
        delete:
          - memorydb:DeleteParameterGroup
        list:
          - memorydb:DescribeParameterGroups
    SubnetGroup:
      type: object
      properties:
        SubnetGroupName:
          description: The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
          pattern: '[a-z][a-z0-9\-]*'
          type: string
        Description:
          description: An optional description of the subnet group.
          type: string
        SubnetIds:
          description: A list of VPC subnet IDs for the subnet group.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Tags:
          description: An array of key-value pairs to apply to this subnet group.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        ARN:
          description: The Amazon Resource Name (ARN) of the subnet group.
          type: string
      required:
        - SubnetGroupName
        - SubnetIds
      x-stackql-resource-name: subnet_group
      description: The AWS::MemoryDB::SubnetGroup resource creates an Amazon MemoryDB Subnet Group.
      x-type-name: AWS::MemoryDB::SubnetGroup
      x-stackql-primary-identifier:
        - SubnetGroupName
      x-create-only-properties:
        - SubnetGroupName
      x-read-only-properties:
        - ARN
      x-required-properties:
        - SubnetGroupName
        - SubnetIds
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - memorydb:TagResource
          - memorydb:ListTags
          - memorydb:UntagResource
      x-required-permissions:
        create:
          - memorydb:CreateSubnetGroup
          - memorydb:DescribeSubnetGroups
          - memorydb:TagResource
          - memorydb:ListTags
        read:
          - memorydb:DescribeSubnetGroups
          - memorydb:ListTags
        update:
          - memorydb:UpdateSubnetGroup
          - memorydb:DescribeSubnetGroups
          - memorydb:ListTags
          - memorydb:TagResource
          - memorydb:UntagResource
        delete:
          - memorydb:DeleteSubnetGroup
          - memorydb:DescribeSubnetGroups
        list:
          - memorydb:DescribeSubnetGroups
    User:
      type: object
      properties:
        Status:
          description: Indicates the user status. Can be "active", "modifying" or "deleting".
          type: string
        UserName:
          description: The name of the user.
          pattern: '[a-z][a-z0-9\\-]*'
          type: string
        AccessString:
          description: Access permissions string used for this user account.
          type: string
        AuthenticationMode:
          type: object
          properties:
            Type:
              type: string
              description: Type of authentication strategy for this user.
              enum:
                - password
                - iam
            Passwords:
              type: array
              x-$comment: List of passwords.
              uniqueItems: true
              x-insertionOrder: true
              maxItems: 2
              minItems: 1
              items:
                type: string
              description: Passwords used for this user account. You can create up to two passwords for each user.
          additionalProperties: false
        Arn:
          description: The Amazon Resource Name (ARN) of the user account.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this user.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - UserName
      x-stackql-resource-name: user
      description: Resource Type definition for AWS::MemoryDB::User
      x-type-name: AWS::MemoryDB::User
      x-stackql-primary-identifier:
        - UserName
      x-create-only-properties:
        - UserName
      x-write-only-properties:
        - AuthenticationMode
        - AccessString
      x-read-only-properties:
        - Status
        - Arn
      x-required-properties:
        - UserName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - memorydb:TagResource
          - memorydb:ListTags
          - memorydb:UntagResource
      x-required-permissions:
        create:
          - memorydb:CreateUser
          - memorydb:DescribeUsers
          - memorydb:TagResource
          - memorydb:ListTags
        read:
          - memorydb:DescribeUsers
          - memorydb:ListTags
        update:
          - memorydb:UpdateUser
          - memorydb:DescribeUsers
          - memorydb:ListTags
          - memorydb:TagResource
          - memorydb:UntagResource
        delete:
          - memorydb:DeleteUser
          - memorydb:DescribeUsers
        list:
          - memorydb:DescribeUsers
          - memorydb:ListTags
    CreateACLRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Status:
              description: Indicates acl status. Can be "creating", "active", "modifying", "deleting".
              type: string
            ACLName:
              description: The name of the acl.
              pattern: '[a-z][a-z0-9\\-]*'
              type: string
            UserNames:
              type: array
              x-$comment: List of users.
              uniqueItems: true
              x-insertionOrder: true
              items:
                type: string
              description: List of users associated to this acl.
            Arn:
              description: The Amazon Resource Name (ARN) of the acl.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this cluster.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateACLRequest
      type: object
      required: []
    CreateClusterRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ClusterName:
              description: The name of the cluster. This value must be unique as it also serves as the cluster identifier.
              pattern: '[a-z][a-z0-9\-]*'
              type: string
            Description:
              description: An optional description of the cluster.
              type: string
            MultiRegionClusterName:
              description: The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.
              type: string
            Status:
              description: The status of the cluster. For example, Available, Updating, Creating.
              type: string
            NodeType:
              description: The compute and memory capacity of the nodes in the cluster.
              type: string
            NumShards:
              description: The number of shards the cluster will contain.
              type: integer
            NumReplicasPerShard:
              description: The number of replicas to apply to each shard. The limit is 5.
              type: integer
            SubnetGroupName:
              description: The name of the subnet group to be used for the cluster.
              type: string
            SecurityGroupIds:
              description: One or more Amazon VPC security groups associated with this cluster.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                type: string
            MaintenanceWindow:
              description: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
              type: string
            ParameterGroupName:
              description: The name of the parameter group associated with the cluster.
              type: string
            ParameterGroupStatus:
              description: The status of the parameter group used by the cluster.
              type: string
            Port:
              description: The port number on which each member of the cluster accepts connections.
              type: integer
            SnapshotRetentionLimit:
              description: The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
              type: integer
            SnapshotWindow:
              description: The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
              type: string
            ACLName:
              description: The name of the Access Control List to associate with the cluster.
              type: string
              pattern: '[a-zA-Z][a-zA-Z0-9\-]*'
            SnsTopicArn:
              description: The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
              type: string
            SnsTopicStatus:
              description: The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
              type: string
            TLSEnabled:
              description: |-
                A flag that enables in-transit encryption when set to true.

                You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
              type: boolean
            DataTiering:
              type: object
              description: Enables data tiering. Data tiering is only supported for clusters using the r6gd node type. This parameter must be set when using r6gd nodes.
              $ref: '#/components/schemas/DataTieringStatus'
            KmsKeyId:
              description: The ID of the KMS key used to encrypt the cluster.
              type: string
            SnapshotArns:
              description: A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                type: string
            SnapshotName:
              description: The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while the new cluster is being created.
              type: string
            FinalSnapshotName:
              description: The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.
              type: string
            ARN:
              description: The Amazon Resource Name (ARN) of the cluster.
              type: string
            Engine:
              description: The engine type used by the cluster.
              type: string
            EngineVersion:
              description: The Redis engine version used by the cluster.
              type: string
            ClusterEndpoint:
              description: The cluster endpoint.
              $ref: '#/components/schemas/Endpoint'
            AutoMinorVersionUpgrade:
              description: |-
                A flag that enables automatic minor version upgrade when set to true.

                You cannot modify the value of AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set AutoMinorVersionUpgrade to true when you create a cluster.
              type: boolean
            Tags:
              description: An array of key-value pairs to apply to this cluster.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateClusterRequest
      type: object
      required: []
    CreateMultiRegionClusterRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            MultiRegionClusterNameSuffix:
              description: The name of the Multi Region cluster. This value must be unique as it also serves as the multi region cluster identifier.
              pattern: '[a-z][a-z0-9\-]*'
              type: string
            Description:
              description: Description of the multi region cluster.
              type: string
            MultiRegionClusterName:
              description: The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.
              type: string
            Status:
              description: The status of the multi region cluster. For example, Available, Updating, Creating.
              type: string
            NodeType:
              description: The compute and memory capacity of the nodes in the multi region cluster.
              type: string
            NumShards:
              description: The number of shards the multi region cluster will contain.
              type: integer
            MultiRegionParameterGroupName:
              description: The name of the parameter group associated with the multi region cluster.
              type: string
            TLSEnabled:
              description: |-
                A flag that enables in-transit encryption when set to true.

                You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
              type: boolean
            ARN:
              description: The Amazon Resource Name (ARN) of the multi region cluster.
              type: string
            Engine:
              description: The engine type used by the multi region cluster.
              type: string
            EngineVersion:
              description: The Redis engine version used by the multi region cluster.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this multi region cluster.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            UpdateStrategy:
              description: An enum string value that determines the update strategy for scaling. Possible values are 'COORDINATED' and 'UNCOORDINATED'. Default is 'COORDINATED'.
              type: string
              enum:
                - COORDINATED
                - UNCOORDINATED
          x-stackQL-stringOnly: true
      x-title: CreateMultiRegionClusterRequest
      type: object
      required: []
    CreateParameterGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ParameterGroupName:
              description: The name of the parameter group.
              type: string
            Family:
              description: The name of the parameter group family that this parameter group is compatible with.
              type: string
            Description:
              description: A description of the parameter group.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this parameter group.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Parameters:
              description: An map of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional.
              type: object
            ARN:
              description: The Amazon Resource Name (ARN) of the parameter group.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateParameterGroupRequest
      type: object
      required: []
    CreateSubnetGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            SubnetGroupName:
              description: The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
              pattern: '[a-z][a-z0-9\-]*'
              type: string
            Description:
              description: An optional description of the subnet group.
              type: string
            SubnetIds:
              description: A list of VPC subnet IDs for the subnet group.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            Tags:
              description: An array of key-value pairs to apply to this subnet group.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            ARN:
              description: The Amazon Resource Name (ARN) of the subnet group.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateSubnetGroupRequest
      type: object
      required: []
    CreateUserRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Status:
              description: Indicates the user status. Can be "active", "modifying" or "deleting".
              type: string
            UserName:
              description: The name of the user.
              pattern: '[a-z][a-z0-9\\-]*'
              type: string
            AccessString:
              description: Access permissions string used for this user account.
              type: string
            AuthenticationMode:
              type: object
              properties:
                Type:
                  type: string
                  description: Type of authentication strategy for this user.
                  enum:
                    - password
                    - iam
                Passwords:
                  type: array
                  x-$comment: List of passwords.
                  uniqueItems: true
                  x-insertionOrder: true
                  maxItems: 2
                  minItems: 1
                  items:
                    type: string
                  description: Passwords used for this user account. You can create up to two passwords for each user.
              additionalProperties: false
            Arn:
              description: The Amazon Resource Name (ARN) of the user account.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this user.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateUserRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    acls:
      name: acls
      id: aws.memorydb.acls
      x-cfn-schema-name: ACL
      x-cfn-type-name: AWS::MemoryDB::ACL
      x-identifiers:
        - ACLName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ACL&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::ACL"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::ACL"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::ACL"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/acls/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/acls/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/acls/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.ACLName') as acl_name,
              JSON_EXTRACT(Properties, '$.UserNames') as user_names,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::ACL'
              AND data__Identifier = '<ACLName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.ACLName') as acl_name,
                JSON_EXTRACT(detail.Properties, '$.UserNames') as user_names,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MemoryDB::ACL'
                AND detail.data__TypeName = 'AWS::MemoryDB::ACL'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'ACLName') as acl_name,
                  json_extract_path_text(Properties, 'UserNames') as user_names,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::ACL'
                  AND data__Identifier = '<ACLName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'ACLName') as acl_name,
                    json_extract_path_text(detail.Properties, 'UserNames') as user_names,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MemoryDB::ACL'
                    AND detail.data__TypeName = 'AWS::MemoryDB::ACL'
                    AND listing.region = 'us-east-1'
    acls_list_only:
      name: acls_list_only
      id: aws.memorydb.acls_list_only
      x-cfn-schema-name: ACL
      x-cfn-type-name: AWS::MemoryDB::ACL
      x-identifiers:
        - ACLName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ACLName') as acl_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::ACL'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ACLName') as acl_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::ACL'
                AND region = 'us-east-1'
    acl_tags:
      name: acl_tags
      id: aws.memorydb.acl_tags
      x-cfn-schema-name: ACL
      x-cfn-type-name: AWS::MemoryDB::ACL
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.ACLName') as acl_name,
              JSON_EXTRACT(detail.Properties, '$.UserNames') as user_names,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MemoryDB::ACL'
              AND detail.data__TypeName = 'AWS::MemoryDB::ACL'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'ACLName') as acl_name,
                json_extract_path_text(detail.Properties, 'UserNames') as user_names,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MemoryDB::ACL'
                AND detail.data__TypeName = 'AWS::MemoryDB::ACL'
                AND listing.region = 'us-east-1'
    clusters:
      name: clusters
      id: aws.memorydb.clusters
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::MemoryDB::Cluster
      x-identifiers:
        - ClusterName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Cluster&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.MultiRegionClusterName') as multi_region_cluster_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.NodeType') as node_type,
              JSON_EXTRACT(Properties, '$.NumShards') as num_shards,
              JSON_EXTRACT(Properties, '$.NumReplicasPerShard') as num_replicas_per_shard,
              JSON_EXTRACT(Properties, '$.SubnetGroupName') as subnet_group_name,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.MaintenanceWindow') as maintenance_window,
              JSON_EXTRACT(Properties, '$.ParameterGroupName') as parameter_group_name,
              JSON_EXTRACT(Properties, '$.ParameterGroupStatus') as parameter_group_status,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.SnapshotRetentionLimit') as snapshot_retention_limit,
              JSON_EXTRACT(Properties, '$.SnapshotWindow') as snapshot_window,
              JSON_EXTRACT(Properties, '$.ACLName') as acl_name,
              JSON_EXTRACT(Properties, '$.SnsTopicArn') as sns_topic_arn,
              JSON_EXTRACT(Properties, '$.SnsTopicStatus') as sns_topic_status,
              JSON_EXTRACT(Properties, '$.TLSEnabled') as tls_enabled,
              JSON_EXTRACT(Properties, '$.DataTiering') as data_tiering,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.SnapshotArns') as snapshot_arns,
              JSON_EXTRACT(Properties, '$.SnapshotName') as snapshot_name,
              JSON_EXTRACT(Properties, '$.FinalSnapshotName') as final_snapshot_name,
              JSON_EXTRACT(Properties, '$.ARN') as arn,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.ClusterEndpoint') as cluster_endpoint,
              JSON_EXTRACT(Properties, '$.AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::Cluster'
              AND data__Identifier = '<ClusterName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ClusterName') as cluster_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.MultiRegionClusterName') as multi_region_cluster_name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.NodeType') as node_type,
                JSON_EXTRACT(detail.Properties, '$.NumShards') as num_shards,
                JSON_EXTRACT(detail.Properties, '$.NumReplicasPerShard') as num_replicas_per_shard,
                JSON_EXTRACT(detail.Properties, '$.SubnetGroupName') as subnet_group_name,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.MaintenanceWindow') as maintenance_window,
                JSON_EXTRACT(detail.Properties, '$.ParameterGroupName') as parameter_group_name,
                JSON_EXTRACT(detail.Properties, '$.ParameterGroupStatus') as parameter_group_status,
                JSON_EXTRACT(detail.Properties, '$.Port') as port,
                JSON_EXTRACT(detail.Properties, '$.SnapshotRetentionLimit') as snapshot_retention_limit,
                JSON_EXTRACT(detail.Properties, '$.SnapshotWindow') as snapshot_window,
                JSON_EXTRACT(detail.Properties, '$.ACLName') as acl_name,
                JSON_EXTRACT(detail.Properties, '$.SnsTopicArn') as sns_topic_arn,
                JSON_EXTRACT(detail.Properties, '$.SnsTopicStatus') as sns_topic_status,
                JSON_EXTRACT(detail.Properties, '$.TLSEnabled') as tls_enabled,
                JSON_EXTRACT(detail.Properties, '$.DataTiering') as data_tiering,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.SnapshotArns') as snapshot_arns,
                JSON_EXTRACT(detail.Properties, '$.SnapshotName') as snapshot_name,
                JSON_EXTRACT(detail.Properties, '$.FinalSnapshotName') as final_snapshot_name,
                JSON_EXTRACT(detail.Properties, '$.ARN') as arn,
                JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
                JSON_EXTRACT(detail.Properties, '$.EngineVersion') as engine_version,
                JSON_EXTRACT(detail.Properties, '$.ClusterEndpoint') as cluster_endpoint,
                JSON_EXTRACT(detail.Properties, '$.AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MemoryDB::Cluster'
                AND detail.data__TypeName = 'AWS::MemoryDB::Cluster'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ClusterName') as cluster_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'MultiRegionClusterName') as multi_region_cluster_name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'NodeType') as node_type,
                  json_extract_path_text(Properties, 'NumShards') as num_shards,
                  json_extract_path_text(Properties, 'NumReplicasPerShard') as num_replicas_per_shard,
                  json_extract_path_text(Properties, 'SubnetGroupName') as subnet_group_name,
                  json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                  json_extract_path_text(Properties, 'MaintenanceWindow') as maintenance_window,
                  json_extract_path_text(Properties, 'ParameterGroupName') as parameter_group_name,
                  json_extract_path_text(Properties, 'ParameterGroupStatus') as parameter_group_status,
                  json_extract_path_text(Properties, 'Port') as port,
                  json_extract_path_text(Properties, 'SnapshotRetentionLimit') as snapshot_retention_limit,
                  json_extract_path_text(Properties, 'SnapshotWindow') as snapshot_window,
                  json_extract_path_text(Properties, 'ACLName') as acl_name,
                  json_extract_path_text(Properties, 'SnsTopicArn') as sns_topic_arn,
                  json_extract_path_text(Properties, 'SnsTopicStatus') as sns_topic_status,
                  json_extract_path_text(Properties, 'TLSEnabled') as tls_enabled,
                  json_extract_path_text(Properties, 'DataTiering') as data_tiering,
                  json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                  json_extract_path_text(Properties, 'SnapshotArns') as snapshot_arns,
                  json_extract_path_text(Properties, 'SnapshotName') as snapshot_name,
                  json_extract_path_text(Properties, 'FinalSnapshotName') as final_snapshot_name,
                  json_extract_path_text(Properties, 'ARN') as arn,
                  json_extract_path_text(Properties, 'Engine') as engine,
                  json_extract_path_text(Properties, 'EngineVersion') as engine_version,
                  json_extract_path_text(Properties, 'ClusterEndpoint') as cluster_endpoint,
                  json_extract_path_text(Properties, 'AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::Cluster'
                  AND data__Identifier = '<ClusterName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ClusterName') as cluster_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'MultiRegionClusterName') as multi_region_cluster_name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'NodeType') as node_type,
                    json_extract_path_text(detail.Properties, 'NumShards') as num_shards,
                    json_extract_path_text(detail.Properties, 'NumReplicasPerShard') as num_replicas_per_shard,
                    json_extract_path_text(detail.Properties, 'SubnetGroupName') as subnet_group_name,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                    json_extract_path_text(detail.Properties, 'MaintenanceWindow') as maintenance_window,
                    json_extract_path_text(detail.Properties, 'ParameterGroupName') as parameter_group_name,
                    json_extract_path_text(detail.Properties, 'ParameterGroupStatus') as parameter_group_status,
                    json_extract_path_text(detail.Properties, 'Port') as port,
                    json_extract_path_text(detail.Properties, 'SnapshotRetentionLimit') as snapshot_retention_limit,
                    json_extract_path_text(detail.Properties, 'SnapshotWindow') as snapshot_window,
                    json_extract_path_text(detail.Properties, 'ACLName') as acl_name,
                    json_extract_path_text(detail.Properties, 'SnsTopicArn') as sns_topic_arn,
                    json_extract_path_text(detail.Properties, 'SnsTopicStatus') as sns_topic_status,
                    json_extract_path_text(detail.Properties, 'TLSEnabled') as tls_enabled,
                    json_extract_path_text(detail.Properties, 'DataTiering') as data_tiering,
                    json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                    json_extract_path_text(detail.Properties, 'SnapshotArns') as snapshot_arns,
                    json_extract_path_text(detail.Properties, 'SnapshotName') as snapshot_name,
                    json_extract_path_text(detail.Properties, 'FinalSnapshotName') as final_snapshot_name,
                    json_extract_path_text(detail.Properties, 'ARN') as arn,
                    json_extract_path_text(detail.Properties, 'Engine') as engine,
                    json_extract_path_text(detail.Properties, 'EngineVersion') as engine_version,
                    json_extract_path_text(detail.Properties, 'ClusterEndpoint') as cluster_endpoint,
                    json_extract_path_text(detail.Properties, 'AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MemoryDB::Cluster'
                    AND detail.data__TypeName = 'AWS::MemoryDB::Cluster'
                    AND listing.region = 'us-east-1'
    clusters_list_only:
      name: clusters_list_only
      id: aws.memorydb.clusters_list_only
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::MemoryDB::Cluster
      x-identifiers:
        - ClusterName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::Cluster'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::Cluster'
                AND region = 'us-east-1'
    cluster_tags:
      name: cluster_tags
      id: aws.memorydb.cluster_tags
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::MemoryDB::Cluster
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.MultiRegionClusterName') as multi_region_cluster_name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.NodeType') as node_type,
              JSON_EXTRACT(detail.Properties, '$.NumShards') as num_shards,
              JSON_EXTRACT(detail.Properties, '$.NumReplicasPerShard') as num_replicas_per_shard,
              JSON_EXTRACT(detail.Properties, '$.SubnetGroupName') as subnet_group_name,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(detail.Properties, '$.MaintenanceWindow') as maintenance_window,
              JSON_EXTRACT(detail.Properties, '$.ParameterGroupName') as parameter_group_name,
              JSON_EXTRACT(detail.Properties, '$.ParameterGroupStatus') as parameter_group_status,
              JSON_EXTRACT(detail.Properties, '$.Port') as port,
              JSON_EXTRACT(detail.Properties, '$.SnapshotRetentionLimit') as snapshot_retention_limit,
              JSON_EXTRACT(detail.Properties, '$.SnapshotWindow') as snapshot_window,
              JSON_EXTRACT(detail.Properties, '$.ACLName') as acl_name,
              JSON_EXTRACT(detail.Properties, '$.SnsTopicArn') as sns_topic_arn,
              JSON_EXTRACT(detail.Properties, '$.SnsTopicStatus') as sns_topic_status,
              JSON_EXTRACT(detail.Properties, '$.TLSEnabled') as tls_enabled,
              JSON_EXTRACT(detail.Properties, '$.DataTiering') as data_tiering,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.SnapshotArns') as snapshot_arns,
              JSON_EXTRACT(detail.Properties, '$.SnapshotName') as snapshot_name,
              JSON_EXTRACT(detail.Properties, '$.FinalSnapshotName') as final_snapshot_name,
              JSON_EXTRACT(detail.Properties, '$.ARN') as arn,
              JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
              JSON_EXTRACT(detail.Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(detail.Properties, '$.ClusterEndpoint') as cluster_endpoint,
              JSON_EXTRACT(detail.Properties, '$.AutoMinorVersionUpgrade') as auto_minor_version_upgrade
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MemoryDB::Cluster'
              AND detail.data__TypeName = 'AWS::MemoryDB::Cluster'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ClusterName') as cluster_name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'MultiRegionClusterName') as multi_region_cluster_name,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'NodeType') as node_type,
                json_extract_path_text(detail.Properties, 'NumShards') as num_shards,
                json_extract_path_text(detail.Properties, 'NumReplicasPerShard') as num_replicas_per_shard,
                json_extract_path_text(detail.Properties, 'SubnetGroupName') as subnet_group_name,
                json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(detail.Properties, 'MaintenanceWindow') as maintenance_window,
                json_extract_path_text(detail.Properties, 'ParameterGroupName') as parameter_group_name,
                json_extract_path_text(detail.Properties, 'ParameterGroupStatus') as parameter_group_status,
                json_extract_path_text(detail.Properties, 'Port') as port,
                json_extract_path_text(detail.Properties, 'SnapshotRetentionLimit') as snapshot_retention_limit,
                json_extract_path_text(detail.Properties, 'SnapshotWindow') as snapshot_window,
                json_extract_path_text(detail.Properties, 'ACLName') as acl_name,
                json_extract_path_text(detail.Properties, 'SnsTopicArn') as sns_topic_arn,
                json_extract_path_text(detail.Properties, 'SnsTopicStatus') as sns_topic_status,
                json_extract_path_text(detail.Properties, 'TLSEnabled') as tls_enabled,
                json_extract_path_text(detail.Properties, 'DataTiering') as data_tiering,
                json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(detail.Properties, 'SnapshotArns') as snapshot_arns,
                json_extract_path_text(detail.Properties, 'SnapshotName') as snapshot_name,
                json_extract_path_text(detail.Properties, 'FinalSnapshotName') as final_snapshot_name,
                json_extract_path_text(detail.Properties, 'ARN') as arn,
                json_extract_path_text(detail.Properties, 'Engine') as engine,
                json_extract_path_text(detail.Properties, 'EngineVersion') as engine_version,
                json_extract_path_text(detail.Properties, 'ClusterEndpoint') as cluster_endpoint,
                json_extract_path_text(detail.Properties, 'AutoMinorVersionUpgrade') as auto_minor_version_upgrade
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MemoryDB::Cluster'
                AND detail.data__TypeName = 'AWS::MemoryDB::Cluster'
                AND listing.region = 'us-east-1'
    multi_region_clusters:
      name: multi_region_clusters
      id: aws.memorydb.multi_region_clusters
      x-cfn-schema-name: MultiRegionCluster
      x-cfn-type-name: AWS::MemoryDB::MultiRegionCluster
      x-identifiers:
        - MultiRegionClusterName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__MultiRegionCluster&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::MultiRegionCluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::MultiRegionCluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::MultiRegionCluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/multi_region_clusters/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/multi_region_clusters/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/multi_region_clusters/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.MultiRegionClusterNameSuffix') as multi_region_cluster_name_suffix,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.MultiRegionClusterName') as multi_region_cluster_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.NodeType') as node_type,
              JSON_EXTRACT(Properties, '$.NumShards') as num_shards,
              JSON_EXTRACT(Properties, '$.MultiRegionParameterGroupName') as multi_region_parameter_group_name,
              JSON_EXTRACT(Properties, '$.TLSEnabled') as tls_enabled,
              JSON_EXTRACT(Properties, '$.ARN') as arn,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateStrategy') as update_strategy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
              AND data__Identifier = '<MultiRegionClusterName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.MultiRegionClusterNameSuffix') as multi_region_cluster_name_suffix,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.MultiRegionClusterName') as multi_region_cluster_name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.NodeType') as node_type,
                JSON_EXTRACT(detail.Properties, '$.NumShards') as num_shards,
                JSON_EXTRACT(detail.Properties, '$.MultiRegionParameterGroupName') as multi_region_parameter_group_name,
                JSON_EXTRACT(detail.Properties, '$.TLSEnabled') as tls_enabled,
                JSON_EXTRACT(detail.Properties, '$.ARN') as arn,
                JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
                JSON_EXTRACT(detail.Properties, '$.EngineVersion') as engine_version,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.UpdateStrategy') as update_strategy
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
                AND detail.data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'MultiRegionClusterNameSuffix') as multi_region_cluster_name_suffix,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'MultiRegionClusterName') as multi_region_cluster_name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'NodeType') as node_type,
                  json_extract_path_text(Properties, 'NumShards') as num_shards,
                  json_extract_path_text(Properties, 'MultiRegionParameterGroupName') as multi_region_parameter_group_name,
                  json_extract_path_text(Properties, 'TLSEnabled') as tls_enabled,
                  json_extract_path_text(Properties, 'ARN') as arn,
                  json_extract_path_text(Properties, 'Engine') as engine,
                  json_extract_path_text(Properties, 'EngineVersion') as engine_version,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'UpdateStrategy') as update_strategy
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
                  AND data__Identifier = '<MultiRegionClusterName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'MultiRegionClusterNameSuffix') as multi_region_cluster_name_suffix,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'MultiRegionClusterName') as multi_region_cluster_name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'NodeType') as node_type,
                    json_extract_path_text(detail.Properties, 'NumShards') as num_shards,
                    json_extract_path_text(detail.Properties, 'MultiRegionParameterGroupName') as multi_region_parameter_group_name,
                    json_extract_path_text(detail.Properties, 'TLSEnabled') as tls_enabled,
                    json_extract_path_text(detail.Properties, 'ARN') as arn,
                    json_extract_path_text(detail.Properties, 'Engine') as engine,
                    json_extract_path_text(detail.Properties, 'EngineVersion') as engine_version,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'UpdateStrategy') as update_strategy
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
                    AND detail.data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
                    AND listing.region = 'us-east-1'
    multi_region_clusters_list_only:
      name: multi_region_clusters_list_only
      id: aws.memorydb.multi_region_clusters_list_only
      x-cfn-schema-name: MultiRegionCluster
      x-cfn-type-name: AWS::MemoryDB::MultiRegionCluster
      x-identifiers:
        - MultiRegionClusterName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MultiRegionClusterName') as multi_region_cluster_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'MultiRegionClusterName') as multi_region_cluster_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
                AND region = 'us-east-1'
    multi_region_cluster_tags:
      name: multi_region_cluster_tags
      id: aws.memorydb.multi_region_cluster_tags
      x-cfn-schema-name: MultiRegionCluster
      x-cfn-type-name: AWS::MemoryDB::MultiRegionCluster
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.MultiRegionClusterNameSuffix') as multi_region_cluster_name_suffix,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.MultiRegionClusterName') as multi_region_cluster_name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.NodeType') as node_type,
              JSON_EXTRACT(detail.Properties, '$.NumShards') as num_shards,
              JSON_EXTRACT(detail.Properties, '$.MultiRegionParameterGroupName') as multi_region_parameter_group_name,
              JSON_EXTRACT(detail.Properties, '$.TLSEnabled') as tls_enabled,
              JSON_EXTRACT(detail.Properties, '$.ARN') as arn,
              JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
              JSON_EXTRACT(detail.Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(detail.Properties, '$.UpdateStrategy') as update_strategy
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
              AND detail.data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'MultiRegionClusterNameSuffix') as multi_region_cluster_name_suffix,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'MultiRegionClusterName') as multi_region_cluster_name,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'NodeType') as node_type,
                json_extract_path_text(detail.Properties, 'NumShards') as num_shards,
                json_extract_path_text(detail.Properties, 'MultiRegionParameterGroupName') as multi_region_parameter_group_name,
                json_extract_path_text(detail.Properties, 'TLSEnabled') as tls_enabled,
                json_extract_path_text(detail.Properties, 'ARN') as arn,
                json_extract_path_text(detail.Properties, 'Engine') as engine,
                json_extract_path_text(detail.Properties, 'EngineVersion') as engine_version,
                json_extract_path_text(detail.Properties, 'UpdateStrategy') as update_strategy
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
                AND detail.data__TypeName = 'AWS::MemoryDB::MultiRegionCluster'
                AND listing.region = 'us-east-1'
    parameter_groups:
      name: parameter_groups
      id: aws.memorydb.parameter_groups
      x-cfn-schema-name: ParameterGroup
      x-cfn-type-name: AWS::MemoryDB::ParameterGroup
      x-identifiers:
        - ParameterGroupName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ParameterGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::ParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::ParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::ParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/parameter_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/parameter_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/parameter_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ParameterGroupName') as parameter_group_name,
              JSON_EXTRACT(Properties, '$.Family') as family,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.ARN') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::ParameterGroup'
              AND data__Identifier = '<ParameterGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ParameterGroupName') as parameter_group_name,
                JSON_EXTRACT(detail.Properties, '$.Family') as family,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters,
                JSON_EXTRACT(detail.Properties, '$.ARN') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MemoryDB::ParameterGroup'
                AND detail.data__TypeName = 'AWS::MemoryDB::ParameterGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ParameterGroupName') as parameter_group_name,
                  json_extract_path_text(Properties, 'Family') as family,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Parameters') as parameters,
                  json_extract_path_text(Properties, 'ARN') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::ParameterGroup'
                  AND data__Identifier = '<ParameterGroupName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ParameterGroupName') as parameter_group_name,
                    json_extract_path_text(detail.Properties, 'Family') as family,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Parameters') as parameters,
                    json_extract_path_text(detail.Properties, 'ARN') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MemoryDB::ParameterGroup'
                    AND detail.data__TypeName = 'AWS::MemoryDB::ParameterGroup'
                    AND listing.region = 'us-east-1'
    parameter_groups_list_only:
      name: parameter_groups_list_only
      id: aws.memorydb.parameter_groups_list_only
      x-cfn-schema-name: ParameterGroup
      x-cfn-type-name: AWS::MemoryDB::ParameterGroup
      x-identifiers:
        - ParameterGroupName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ParameterGroupName') as parameter_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::ParameterGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ParameterGroupName') as parameter_group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::ParameterGroup'
                AND region = 'us-east-1'
    parameter_group_tags:
      name: parameter_group_tags
      id: aws.memorydb.parameter_group_tags
      x-cfn-schema-name: ParameterGroup
      x-cfn-type-name: AWS::MemoryDB::ParameterGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ParameterGroupName') as parameter_group_name,
              JSON_EXTRACT(detail.Properties, '$.Family') as family,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(detail.Properties, '$.ARN') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MemoryDB::ParameterGroup'
              AND detail.data__TypeName = 'AWS::MemoryDB::ParameterGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ParameterGroupName') as parameter_group_name,
                json_extract_path_text(detail.Properties, 'Family') as family,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Parameters') as parameters,
                json_extract_path_text(detail.Properties, 'ARN') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MemoryDB::ParameterGroup'
                AND detail.data__TypeName = 'AWS::MemoryDB::ParameterGroup'
                AND listing.region = 'us-east-1'
    subnet_groups:
      name: subnet_groups
      id: aws.memorydb.subnet_groups
      x-cfn-schema-name: SubnetGroup
      x-cfn-type-name: AWS::MemoryDB::SubnetGroup
      x-identifiers:
        - SubnetGroupName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SubnetGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::SubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::SubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::SubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/subnet_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/subnet_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/subnet_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SubnetGroupName') as subnet_group_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ARN') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::SubnetGroup'
              AND data__Identifier = '<SubnetGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.SubnetGroupName') as subnet_group_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.ARN') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MemoryDB::SubnetGroup'
                AND detail.data__TypeName = 'AWS::MemoryDB::SubnetGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'SubnetGroupName') as subnet_group_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'ARN') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::SubnetGroup'
                  AND data__Identifier = '<SubnetGroupName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'SubnetGroupName') as subnet_group_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'ARN') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MemoryDB::SubnetGroup'
                    AND detail.data__TypeName = 'AWS::MemoryDB::SubnetGroup'
                    AND listing.region = 'us-east-1'
    subnet_groups_list_only:
      name: subnet_groups_list_only
      id: aws.memorydb.subnet_groups_list_only
      x-cfn-schema-name: SubnetGroup
      x-cfn-type-name: AWS::MemoryDB::SubnetGroup
      x-identifiers:
        - SubnetGroupName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SubnetGroupName') as subnet_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::SubnetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SubnetGroupName') as subnet_group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::SubnetGroup'
                AND region = 'us-east-1'
    subnet_group_tags:
      name: subnet_group_tags
      id: aws.memorydb.subnet_group_tags
      x-cfn-schema-name: SubnetGroup
      x-cfn-type-name: AWS::MemoryDB::SubnetGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.SubnetGroupName') as subnet_group_name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(detail.Properties, '$.ARN') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MemoryDB::SubnetGroup'
              AND detail.data__TypeName = 'AWS::MemoryDB::SubnetGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'SubnetGroupName') as subnet_group_name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(detail.Properties, 'ARN') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MemoryDB::SubnetGroup'
                AND detail.data__TypeName = 'AWS::MemoryDB::SubnetGroup'
                AND listing.region = 'us-east-1'
    users:
      name: users
      id: aws.memorydb.users
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::MemoryDB::User
      x-identifiers:
        - UserName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__User&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MemoryDB::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/users/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/users/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/users/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.UserName') as user_name,
              JSON_EXTRACT(Properties, '$.AccessString') as access_string,
              JSON_EXTRACT(Properties, '$.AuthenticationMode') as authentication_mode,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::User'
              AND data__Identifier = '<UserName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.UserName') as user_name,
                JSON_EXTRACT(detail.Properties, '$.AccessString') as access_string,
                JSON_EXTRACT(detail.Properties, '$.AuthenticationMode') as authentication_mode,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MemoryDB::User'
                AND detail.data__TypeName = 'AWS::MemoryDB::User'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'UserName') as user_name,
                  json_extract_path_text(Properties, 'AccessString') as access_string,
                  json_extract_path_text(Properties, 'AuthenticationMode') as authentication_mode,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::User'
                  AND data__Identifier = '<UserName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'UserName') as user_name,
                    json_extract_path_text(detail.Properties, 'AccessString') as access_string,
                    json_extract_path_text(detail.Properties, 'AuthenticationMode') as authentication_mode,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MemoryDB::User'
                    AND detail.data__TypeName = 'AWS::MemoryDB::User'
                    AND listing.region = 'us-east-1'
    users_list_only:
      name: users_list_only
      id: aws.memorydb.users_list_only
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::MemoryDB::User
      x-identifiers:
        - UserName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserName') as user_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::User'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserName') as user_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::User'
                AND region = 'us-east-1'
    user_tags:
      name: user_tags
      id: aws.memorydb.user_tags
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::MemoryDB::User
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.UserName') as user_name,
              JSON_EXTRACT(detail.Properties, '$.AccessString') as access_string,
              JSON_EXTRACT(detail.Properties, '$.AuthenticationMode') as authentication_mode,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MemoryDB::User'
              AND detail.data__TypeName = 'AWS::MemoryDB::User'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'UserName') as user_name,
                json_extract_path_text(detail.Properties, 'AccessString') as access_string,
                json_extract_path_text(detail.Properties, 'AuthenticationMode') as authentication_mode,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MemoryDB::User'
                AND detail.data__TypeName = 'AWS::MemoryDB::User'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ACL&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateACL
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateACLRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Cluster&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCluster
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateClusterRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__MultiRegionCluster&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateMultiRegionCluster
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateMultiRegionClusterRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ParameterGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateParameterGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateParameterGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SubnetGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSubnetGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSubnetGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__User&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateUser
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
