openapi: 3.0.0
info:
  title: AppSync
  version: 1.0.0
paths: {}
components:
  schemas:
    ApiCache:
      type: object
      properties:
        Type:
          type: string
        TransitEncryptionEnabled:
          type: boolean
        AtRestEncryptionEnabled:
          type: boolean
        Id:
          type: string
        ApiId:
          type: string
        ApiCachingBehavior:
          type: string
        Ttl:
          type: number
      required:
        - Type
        - ApiId
        - ApiCachingBehavior
        - Ttl
      x-stackql-resource-name: api_cache
      x-stackql-primaryIdentifier:
        - Id
    ApiKey:
      type: object
      properties:
        ApiKey:
          type: string
        Description:
          type: string
        ApiKeyId:
          type: string
        Expires:
          type: number
        Arn:
          type: string
        ApiId:
          type: string
      required:
        - ApiId
      x-stackql-resource-name: api_key
      x-stackql-primaryIdentifier:
        - ApiKeyId
    RdsHttpEndpointConfig:
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          type: string
        AwsRegion:
          type: string
        DbClusterIdentifier:
          type: string
        AwsSecretStoreArn:
          type: string
        Schema:
          type: string
      required:
        - AwsRegion
        - DbClusterIdentifier
        - AwsSecretStoreArn
    OpenSearchServiceConfig:
      type: object
      additionalProperties: false
      properties:
        AwsRegion:
          type: string
        Endpoint:
          type: string
      required:
        - AwsRegion
        - Endpoint
    AwsIamConfig:
      type: object
      additionalProperties: false
      properties:
        SigningRegion:
          type: string
        SigningServiceName:
          type: string
    EventBridgeConfig:
      type: object
      additionalProperties: false
      properties:
        EventBusArn:
          type: string
      required:
        - EventBusArn
    AuthorizationConfig:
      type: object
      additionalProperties: false
      properties:
        AuthorizationType:
          type: string
        AwsIamConfig:
          $ref: '#/components/schemas/AwsIamConfig'
      required:
        - AuthorizationType
    DeltaSyncConfig:
      type: object
      additionalProperties: false
      properties:
        BaseTableTTL:
          type: string
        DeltaSyncTableTTL:
          type: string
        DeltaSyncTableName:
          type: string
      required:
        - BaseTableTTL
        - DeltaSyncTableTTL
        - DeltaSyncTableName
    RelationalDatabaseConfig:
      type: object
      additionalProperties: false
      properties:
        RdsHttpEndpointConfig:
          $ref: '#/components/schemas/RdsHttpEndpointConfig'
        RelationalDatabaseSourceType:
          type: string
      required:
        - RelationalDatabaseSourceType
    HttpConfig:
      type: object
      additionalProperties: false
      properties:
        Endpoint:
          type: string
        AuthorizationConfig:
          $ref: '#/components/schemas/AuthorizationConfig'
      required:
        - Endpoint
    LambdaConfig:
      type: object
      additionalProperties: false
      properties:
        LambdaFunctionArn:
          type: string
      required:
        - LambdaFunctionArn
    ElasticsearchConfig:
      type: object
      additionalProperties: false
      properties:
        AwsRegion:
          type: string
        Endpoint:
          type: string
      required:
        - AwsRegion
        - Endpoint
    DynamoDBConfig:
      type: object
      additionalProperties: false
      properties:
        TableName:
          type: string
        DeltaSyncConfig:
          $ref: '#/components/schemas/DeltaSyncConfig'
        UseCallerCredentials:
          type: boolean
        AwsRegion:
          type: string
        Versioned:
          type: boolean
      required:
        - TableName
        - AwsRegion
    DataSource:
      type: object
      properties:
        OpenSearchServiceConfig:
          $ref: '#/components/schemas/OpenSearchServiceConfig'
        Description:
          type: string
        ServiceRoleArn:
          type: string
        Name:
          type: string
        DataSourceArn:
          type: string
        Type:
          type: string
        EventBridgeConfig:
          $ref: '#/components/schemas/EventBridgeConfig'
        HttpConfig:
          $ref: '#/components/schemas/HttpConfig'
        RelationalDatabaseConfig:
          $ref: '#/components/schemas/RelationalDatabaseConfig'
        LambdaConfig:
          $ref: '#/components/schemas/LambdaConfig'
        Id:
          type: string
        ApiId:
          type: string
        DynamoDBConfig:
          $ref: '#/components/schemas/DynamoDBConfig'
        ElasticsearchConfig:
          $ref: '#/components/schemas/ElasticsearchConfig'
      required:
        - Type
        - ApiId
        - Name
      x-stackql-resource-name: data_source
      x-stackql-primaryIdentifier:
        - Id
    DomainName:
      type: object
      properties:
        DomainName:
          type: string
          minLength: 1
          maxLength: 253
          pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
        Description:
          type: string
          minLength: 0
          maxLength: 255
        CertificateArn:
          type: string
          minLength: 3
          maxLength: 2048
          pattern: ^arn:[a-z-]*:acm:[a-z0-9-]*:\d{12}:certificate/[0-9A-Za-z_/-]*$
        AppSyncDomainName:
          type: string
        HostedZoneId:
          type: string
      required:
        - DomainName
        - CertificateArn
      x-stackql-resource-name: domain_name
      x-stackql-primaryIdentifier:
        - DomainName
    DomainNameApiAssociation:
      type: object
      properties:
        DomainName:
          type: string
          minLength: 1
          maxLength: 253
          pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
        ApiId:
          type: string
        ApiAssociationIdentifier:
          type: string
      required:
        - DomainName
        - ApiId
      x-stackql-resource-name: domain_name_api_association
      x-stackql-primaryIdentifier:
        - ApiAssociationIdentifier
    AppSyncRuntime:
      type: object
      additionalProperties: false
      properties:
        RuntimeVersion:
          type: string
        Name:
          type: string
      required:
        - RuntimeVersion
        - Name
    SyncConfig:
      type: object
      additionalProperties: false
      properties:
        ConflictHandler:
          type: string
        ConflictDetection:
          type: string
        LambdaConflictHandlerConfig:
          $ref: '#/components/schemas/LambdaConflictHandlerConfig'
      required:
        - ConflictDetection
    LambdaConflictHandlerConfig:
      type: object
      additionalProperties: false
      properties:
        LambdaConflictHandlerArn:
          type: string
    FunctionConfiguration:
      type: object
      properties:
        FunctionId:
          type: string
        FunctionArn:
          type: string
        Description:
          type: string
        RequestMappingTemplate:
          type: string
        ResponseMappingTemplate:
          type: string
        MaxBatchSize:
          type: integer
        SyncConfig:
          $ref: '#/components/schemas/SyncConfig'
        Code:
          type: string
        Name:
          type: string
        ResponseMappingTemplateS3Location:
          type: string
        Runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
        CodeS3Location:
          type: string
        DataSourceName:
          type: string
        FunctionVersion:
          type: string
        Id:
          type: string
        RequestMappingTemplateS3Location:
          type: string
        ApiId:
          type: string
      required:
        - DataSourceName
        - ApiId
        - Name
      x-stackql-resource-name: function_configuration
      x-stackql-primaryIdentifier:
        - Id
    OpenIDConnectConfig:
      type: object
      additionalProperties: false
      properties:
        ClientId:
          type: string
        AuthTTL:
          type: number
        Issuer:
          type: string
        IatTTL:
          type: number
    CognitoUserPoolConfig:
      type: object
      additionalProperties: false
      properties:
        AppIdClientRegex:
          type: string
        UserPoolId:
          type: string
        AwsRegion:
          type: string
    LambdaAuthorizerConfig:
      type: object
      additionalProperties: false
      properties:
        IdentityValidationExpression:
          type: string
        AuthorizerUri:
          type: string
        AuthorizerResultTtlInSeconds:
          type: number
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    UserPoolConfig:
      type: object
      additionalProperties: false
      properties:
        AppIdClientRegex:
          type: string
        UserPoolId:
          type: string
        AwsRegion:
          type: string
        DefaultAction:
          type: string
    AdditionalAuthenticationProvider:
      type: object
      additionalProperties: false
      properties:
        LambdaAuthorizerConfig:
          $ref: '#/components/schemas/LambdaAuthorizerConfig'
        OpenIDConnectConfig:
          $ref: '#/components/schemas/OpenIDConnectConfig'
        UserPoolConfig:
          $ref: '#/components/schemas/CognitoUserPoolConfig'
        AuthenticationType:
          type: string
      required:
        - AuthenticationType
    LogConfig:
      type: object
      additionalProperties: false
      properties:
        ExcludeVerboseContent:
          type: boolean
        FieldLogLevel:
          type: string
        CloudWatchLogsRoleArn:
          type: string
    GraphQLApi:
      type: object
      properties:
        OpenIDConnectConfig:
          $ref: '#/components/schemas/OpenIDConnectConfig'
        Name:
          type: string
        AdditionalAuthenticationProviders:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/AdditionalAuthenticationProvider'
        GraphQLUrl:
          type: string
        LambdaAuthorizerConfig:
          $ref: '#/components/schemas/LambdaAuthorizerConfig'
        XrayEnabled:
          type: boolean
        Id:
          type: string
        Arn:
          type: string
        UserPoolConfig:
          $ref: '#/components/schemas/UserPoolConfig'
        ApiId:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        AuthenticationType:
          type: string
        LogConfig:
          $ref: '#/components/schemas/LogConfig'
      required:
        - Name
        - AuthenticationType
      x-stackql-resource-name: graphql_api
      x-stackql-primaryIdentifier:
        - Id
    GraphQLSchema:
      type: object
      properties:
        Id:
          type: string
        Definition:
          type: string
        DefinitionS3Location:
          type: string
        ApiId:
          type: string
      required:
        - ApiId
      x-stackql-resource-name: graphql_schema
      x-stackql-primaryIdentifier:
        - Id
    PipelineConfig:
      type: object
      additionalProperties: false
      properties:
        Functions:
          type: array
          uniqueItems: false
          items:
            type: string
    CachingConfig:
      type: object
      additionalProperties: false
      properties:
        CachingKeys:
          type: array
          uniqueItems: false
          items:
            type: string
        Ttl:
          type: number
      required:
        - Ttl
    Resolver:
      type: object
      properties:
        TypeName:
          type: string
        PipelineConfig:
          $ref: '#/components/schemas/PipelineConfig'
        RequestMappingTemplate:
          type: string
        ResponseMappingTemplate:
          type: string
        MaxBatchSize:
          type: integer
        ResolverArn:
          type: string
        SyncConfig:
          $ref: '#/components/schemas/SyncConfig'
        Code:
          type: string
        ResponseMappingTemplateS3Location:
          type: string
        Runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
        CodeS3Location:
          type: string
        DataSourceName:
          type: string
        Kind:
          type: string
        CachingConfig:
          $ref: '#/components/schemas/CachingConfig'
        Id:
          type: string
        RequestMappingTemplateS3Location:
          type: string
        FieldName:
          type: string
        ApiId:
          type: string
      required:
        - TypeName
        - ApiId
        - FieldName
      x-stackql-resource-name: resolver
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    api_caches:
      name: api_caches
      id: aws.appsync.api_caches
      x-cfn-schema-name: ApiCache
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::ApiCache'
    api_cache:
      name: api_cache
      id: aws.appsync.api_cache
      x-cfn-schema-name: ApiCache
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.TransitEncryptionEnabled') as transit_encryption_enabled,
              JSON_EXTRACT(Properties, '$.AtRestEncryptionEnabled') as at_rest_encryption_enabled,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ApiCachingBehavior') as api_caching_behavior,
              JSON_EXTRACT(Properties, '$.Ttl') as ttl
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::ApiCache'
    api_keys:
      name: api_keys
      id: aws.appsync.api_keys
      x-cfn-schema-name: ApiKey
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiKeyId') as api_key_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::ApiKey'
    api_key:
      name: api_key
      id: aws.appsync.api_key
      x-cfn-schema-name: ApiKey
      x-type: get
      x-identifiers:
        - ApiKeyId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiKey') as api_key,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ApiKeyId') as api_key_id,
              JSON_EXTRACT(Properties, '$.Expires') as expires,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::ApiKey'
    data_sources:
      name: data_sources
      id: aws.appsync.data_sources
      x-cfn-schema-name: DataSource
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::DataSource'
    data_source:
      name: data_source
      id: aws.appsync.data_source
      x-cfn-schema-name: DataSource
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OpenSearchServiceConfig.AwsRegion') as open_search_service_config_aws_region,
              JSON_EXTRACT(Properties, '$.OpenSearchServiceConfig.Endpoint') as open_search_service_config_endpoint,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ServiceRoleArn') as service_role_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.DataSourceArn') as data_source_arn,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.EventBridgeConfig.EventBusArn') as event_bridge_config_event_bus_arn,
              JSON_EXTRACT(Properties, '$.HttpConfig.Endpoint') as http_config_endpoint,
              JSON_EXTRACT(Properties, '$.HttpConfig.AuthorizationConfig') as http_config_authorization_config,
              JSON_EXTRACT(Properties, '$.RelationalDatabaseConfig.RdsHttpEndpointConfig') as relational_database_config_rds_http_endpoint_config,
              JSON_EXTRACT(Properties, '$.RelationalDatabaseConfig.RelationalDatabaseSourceType') as relational_database_config_relational_database_source_type,
              JSON_EXTRACT(Properties, '$.LambdaConfig.LambdaFunctionArn') as lambda_config_lambda_function_arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.DynamoDBConfig.TableName') as dynamo_db_config_table_name,
              JSON_EXTRACT(Properties, '$.DynamoDBConfig.DeltaSyncConfig') as dynamo_db_config_delta_sync_config,
              JSON_EXTRACT(Properties, '$.DynamoDBConfig.UseCallerCredentials') as dynamo_db_config_use_caller_credentials,
              JSON_EXTRACT(Properties, '$.DynamoDBConfig.AwsRegion') as dynamo_db_config_aws_region,
              JSON_EXTRACT(Properties, '$.DynamoDBConfig.Versioned') as dynamo_db_config_versioned,
              JSON_EXTRACT(Properties, '$.ElasticsearchConfig.AwsRegion') as elasticsearch_config_aws_region,
              JSON_EXTRACT(Properties, '$.ElasticsearchConfig.Endpoint') as elasticsearch_config_endpoint
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DataSource'
    domain_names:
      name: domain_names
      id: aws.appsync.domain_names
      x-cfn-schema-name: DomainName
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::DomainName'
    domain_name:
      name: domain_name
      id: aws.appsync.domain_name
      x-cfn-schema-name: DomainName
      x-type: get
      x-identifiers:
        - DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.AppSyncDomainName') as app_sync_domain_name,
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainName'
    domain_name_api_associations:
      name: domain_name_api_associations
      id: aws.appsync.domain_name_api_associations
      x-cfn-schema-name: DomainNameApiAssociation
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiAssociationIdentifier') as api_association_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::DomainNameApiAssociation'
    domain_name_api_association:
      name: domain_name_api_association
      id: aws.appsync.domain_name_api_association
      x-cfn-schema-name: DomainNameApiAssociation
      x-type: get
      x-identifiers:
        - ApiAssociationIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ApiAssociationIdentifier') as api_association_identifier
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainNameApiAssociation'
    function_configurations:
      name: function_configurations
      id: aws.appsync.function_configurations
      x-cfn-schema-name: FunctionConfiguration
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
    function_configuration:
      name: function_configuration
      id: aws.appsync.function_configuration
      x-cfn-schema-name: FunctionConfiguration
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionId') as function_id,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplate') as request_mapping_template,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplate') as response_mapping_template,
              JSON_EXTRACT(Properties, '$.MaxBatchSize') as max_batch_size,
              JSON_EXTRACT(Properties, '$.SyncConfig.ConflictHandler') as sync_config_conflict_handler,
              JSON_EXTRACT(Properties, '$.SyncConfig.ConflictDetection') as sync_config_conflict_detection,
              JSON_EXTRACT(Properties, '$.SyncConfig.LambdaConflictHandlerConfig') as sync_config_lambda_conflict_handler_config,
              JSON_EXTRACT(Properties, '$.Code') as code,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.Runtime.RuntimeVersion') as runtime_runtime_version,
              JSON_EXTRACT(Properties, '$.Runtime.Name') as runtime_name,
              JSON_EXTRACT(Properties, '$.CodeS3Location') as code_s3_location,
              JSON_EXTRACT(Properties, '$.DataSourceName') as data_source_name,
              JSON_EXTRACT(Properties, '$.FunctionVersion') as function_version,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
    graphql_apis:
      name: graphql_apis
      id: aws.appsync.graphql_apis
      x-cfn-schema-name: GraphQLApi
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::GraphQLApi'
    graphql_api:
      name: graphql_api
      id: aws.appsync.graphql_api
      x-cfn-schema-name: GraphQLApi
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OpenIDConnectConfig.ClientId') as open_id_connect_config_client_id,
              JSON_EXTRACT(Properties, '$.OpenIDConnectConfig.AuthTTL') as open_id_connect_config_auth_tt_l,
              JSON_EXTRACT(Properties, '$.OpenIDConnectConfig.Issuer') as open_id_connect_config_issuer,
              JSON_EXTRACT(Properties, '$.OpenIDConnectConfig.IatTTL') as open_id_connect_config_iat_tt_l,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.AdditionalAuthenticationProviders') as additional_authentication_providers,
              JSON_EXTRACT(Properties, '$.GraphQLUrl') as graph_ql_url,
              JSON_EXTRACT(Properties, '$.LambdaAuthorizerConfig.IdentityValidationExpression') as lambda_authorizer_config_identity_validation_expression,
              JSON_EXTRACT(Properties, '$.LambdaAuthorizerConfig.AuthorizerUri') as lambda_authorizer_config_authorizer_uri,
              JSON_EXTRACT(Properties, '$.LambdaAuthorizerConfig.AuthorizerResultTtlInSeconds') as lambda_authorizer_config_authorizer_result_ttl_in_seconds,
              JSON_EXTRACT(Properties, '$.XrayEnabled') as xray_enabled,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.UserPoolConfig.AppIdClientRegex') as user_pool_config_app_id_client_regex,
              JSON_EXTRACT(Properties, '$.UserPoolConfig.UserPoolId') as user_pool_config_user_pool_id,
              JSON_EXTRACT(Properties, '$.UserPoolConfig.AwsRegion') as user_pool_config_aws_region,
              JSON_EXTRACT(Properties, '$.UserPoolConfig.DefaultAction') as user_pool_config_default_action,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AuthenticationType') as authentication_type,
              JSON_EXTRACT(Properties, '$.LogConfig.ExcludeVerboseContent') as log_config_exclude_verbose_content,
              JSON_EXTRACT(Properties, '$.LogConfig.FieldLogLevel') as log_config_field_log_level,
              JSON_EXTRACT(Properties, '$.LogConfig.CloudWatchLogsRoleArn') as log_config_cloud_watch_logs_role_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::GraphQLApi'
    graphql_schemas:
      name: graphql_schemas
      id: aws.appsync.graphql_schemas
      x-cfn-schema-name: GraphQLSchema
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::GraphQLSchema'
    graphql_schema:
      name: graphql_schema
      id: aws.appsync.graphql_schema
      x-cfn-schema-name: GraphQLSchema
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Definition') as definition,
              JSON_EXTRACT(Properties, '$.DefinitionS3Location') as definition_s3_location,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::GraphQLSchema'
    resolvers:
      name: resolvers
      id: aws.appsync.resolvers
      x-cfn-schema-name: Resolver
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::Resolver'
    resolver:
      name: resolver
      id: aws.appsync.resolver
      x-cfn-schema-name: Resolver
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TypeName') as type_name,
              JSON_EXTRACT(Properties, '$.PipelineConfig.Functions') as pipeline_config_functions,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplate') as request_mapping_template,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplate') as response_mapping_template,
              JSON_EXTRACT(Properties, '$.MaxBatchSize') as max_batch_size,
              JSON_EXTRACT(Properties, '$.ResolverArn') as resolver_arn,
              JSON_EXTRACT(Properties, '$.SyncConfig.ConflictHandler') as sync_config_conflict_handler,
              JSON_EXTRACT(Properties, '$.SyncConfig.ConflictDetection') as sync_config_conflict_detection,
              JSON_EXTRACT(Properties, '$.SyncConfig.LambdaConflictHandlerConfig') as sync_config_lambda_conflict_handler_config,
              JSON_EXTRACT(Properties, '$.Code') as code,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.Runtime.RuntimeVersion') as runtime_runtime_version,
              JSON_EXTRACT(Properties, '$.Runtime.Name') as runtime_name,
              JSON_EXTRACT(Properties, '$.CodeS3Location') as code_s3_location,
              JSON_EXTRACT(Properties, '$.DataSourceName') as data_source_name,
              JSON_EXTRACT(Properties, '$.Kind') as kind,
              JSON_EXTRACT(Properties, '$.CachingConfig.CachingKeys') as caching_config_caching_keys,
              JSON_EXTRACT(Properties, '$.CachingConfig.Ttl') as caching_config_ttl,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.FieldName') as field_name,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::Resolver'
