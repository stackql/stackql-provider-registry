openapi: 3.0.0
info:
  title: AppSync
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    DomainName:
      type: object
      properties:
        DomainName:
          type: string
          minLength: 1
          maxLength: 253
          pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
        Description:
          type: string
          minLength: 0
          maxLength: 255
        CertificateArn:
          type: string
          minLength: 3
          maxLength: 2048
          pattern: ^arn:[a-z-]*:acm:[a-z0-9-]*:\d{12}:certificate/[0-9A-Za-z_/-]*$
        AppSyncDomainName:
          type: string
        HostedZoneId:
          type: string
      required:
        - DomainName
        - CertificateArn
      x-stackql-resource-name: domain_name
      description: Resource Type definition for AWS::AppSync::DomainName
      x-type-name: AWS::AppSync::DomainName
      x-stackql-primary-identifier:
        - DomainName
      x-create-only-properties:
        - DomainName
        - CertificateArn
      x-read-only-properties:
        - AppSyncDomainName
        - HostedZoneId
      x-required-properties:
        - DomainName
        - CertificateArn
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - appsync:CreateDomainName
          - appsync:GetDomainName
          - acm:DescribeCertificate
          - cloudfront:UpdateDistribution
        delete:
          - appsync:GetDomainName
          - appsync:DeleteDomainName
        update:
          - appsync:UpdateDomainName
        read:
          - appsync:GetDomainName
        list:
          - appsync:ListDomainNames
    DomainNameApiAssociation:
      type: object
      properties:
        DomainName:
          type: string
          minLength: 1
          maxLength: 253
          pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
        ApiId:
          type: string
        ApiAssociationIdentifier:
          type: string
      required:
        - DomainName
        - ApiId
      x-stackql-resource-name: domain_name_api_association
      description: Resource Type definition for AWS::AppSync::DomainNameApiAssociation
      x-type-name: AWS::AppSync::DomainNameApiAssociation
      x-stackql-primary-identifier:
        - ApiAssociationIdentifier
      x-create-only-properties:
        - DomainName
      x-read-only-properties:
        - ApiAssociationIdentifier
      x-required-properties:
        - DomainName
        - ApiId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - appsync:AssociateApi
          - appsync:GetApiAssociation
        delete:
          - appsync:DisassociateApi
          - appsync:GetApiAssociation
        update:
          - appsync:AssociateApi
          - appsync:GetApiAssociation
        read:
          - appsync:GetApiAssociation
    AppSyncRuntime:
      type: object
      additionalProperties: false
      properties:
        RuntimeVersion:
          type: string
          description: The ``version`` of the runtime to use. Currently, the only allowed version is ``1.0.0``.
        Name:
          type: string
          description: The ``name`` of the runtime to use. Currently, the only allowed value is ``APPSYNC_JS``.
      required:
        - RuntimeVersion
        - Name
      description: Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
    SyncConfig:
      type: object
      additionalProperties: false
      properties:
        ConflictHandler:
          type: string
          description: |-
            The Conflict Resolution strategy to perform in the event of a conflict.
              +   *OPTIMISTIC_CONCURRENCY*: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.
              +   *AUTOMERGE*: Resolve conflicts with the Automerge conflict resolution strategy.
              +   *LAMBDA*: Resolve conflicts with an LAMlong function supplied in the ``LambdaConflictHandlerConfig``.
        ConflictDetection:
          type: string
          description: |-
            The Conflict Detection strategy to use.
              +   *VERSION*: Detect conflicts based on object versions for this resolver.
              +   *NONE*: Do not detect conflicts when invoking this resolver.
        LambdaConflictHandlerConfig:
          $ref: '#/components/schemas/LambdaConflictHandlerConfig'
          description: The ``LambdaConflictHandlerConfig`` when configuring ``LAMBDA`` as the Conflict Handler.
      required:
        - ConflictDetection
      description: |-
        Describes a Sync configuration for a resolver.
         Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
    LambdaConflictHandlerConfig:
      type: object
      description: The ``LambdaConflictHandlerConfig`` when configuring LAMBDA as the Conflict Handler.
      additionalProperties: false
      properties:
        LambdaConflictHandlerArn:
          type: string
          description: The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
    FunctionConfiguration:
      type: object
      properties:
        FunctionId:
          description: The unique identifier for the function generated by the service
          type: string
        FunctionArn:
          description: The ARN for the function generated by the service
          type: string
        ApiId:
          description: The AWS AppSync GraphQL API that you want to attach using this function.
          type: string
        Code:
          description: The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
          type: string
        CodeS3Location:
          description: The Amazon S3 endpoint (where the code is located??).
          type: string
        DataSourceName:
          description: The name of data source this function will attach.
          type: string
        Description:
          description: The function description.
          type: string
        FunctionVersion:
          description: The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
          type: string
        MaxBatchSize:
          description: The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
          type: integer
        Name:
          description: The name of the function.
          type: string
        RequestMappingTemplate:
          description: The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
          type: string
        RequestMappingTemplateS3Location:
          description: Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.
          type: string
        ResponseMappingTemplate:
          description: The Function response mapping template.
          type: string
        ResponseMappingTemplateS3Location:
          description: The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
          type: string
        Runtime:
          description: Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
          $ref: '#/components/schemas/AppSyncRuntime'
        SyncConfig:
          description: Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
          $ref: '#/components/schemas/SyncConfig'
      required:
        - ApiId
        - DataSourceName
        - Name
      x-stackql-resource-name: function_configuration
      description: An example resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::AppSync::FunctionConfiguration
      x-stackql-primary-identifier:
        - FunctionArn
      x-create-only-properties:
        - ApiId
      x-write-only-properties:
        - CodeS3Location
        - ResponseMappingTemplateS3Location
        - RequestMappingTemplateS3Location
      x-read-only-properties:
        - FunctionArn
        - FunctionId
      x-required-properties:
        - ApiId
        - DataSourceName
        - Name
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - s3:GetObject
          - appsync:CreateFunction
        read:
          - appsync:GetFunction
        update:
          - s3:GetObject
          - appsync:UpdateFunction
        delete:
          - appsync:DeleteFunction
        list:
          - appsync:ListFunctions
    PipelineConfig:
      type: object
      additionalProperties: false
      properties:
        Functions:
          type: array
          description: A list of ``Function`` objects.
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
      description: |-
        Use the ``PipelineConfig`` property type to specify ``PipelineConfig`` for an APSYlong resolver.
          ``PipelineConfig`` is a property of the [AWS::AppSync::Resolver](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html) resource.
    CachingConfig:
      type: object
      additionalProperties: false
      properties:
        CachingKeys:
          type: array
          description: |-
            The caching keys for a resolver that has caching activated.
             Valid values are entries from the ``$context.arguments``, ``$context.source``, and ``$context.identity`` maps.
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Ttl:
          type: number
          description: |-
            The TTL in seconds for a resolver that has caching activated.
             Valid values are 1–3,600 seconds.
      required:
        - Ttl
      description: The caching configuration for a resolver that has caching activated.
    Resolver:
      type: object
      properties:
        ApiId:
          type: string
          description: The APSYlong GraphQL API to which you want to attach this resolver.
        CachingConfig:
          $ref: '#/components/schemas/CachingConfig'
          description: The caching configuration for the resolver.
        Code:
          type: string
          description: The ``resolver`` code that contains the request and response functions. When code is used, the ``runtime`` is required. The runtime value must be ``APPSYNC_JS``.
        CodeS3Location:
          type: string
          description: The Amazon S3 endpoint.
        DataSourceName:
          type: string
          description: The resolver data source name.
        FieldName:
          type: string
          description: The GraphQL field on a type that invokes the resolver.
        Kind:
          type: string
          description: |-
            The resolver type.
              +   *UNIT*: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.
              +   *PIPELINE*: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of ``Function`` objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.
        MaxBatchSize:
          type: integer
          description: The maximum number of resolver request inputs that will be sent to a single LAMlong function in a ``BatchInvoke`` operation.
        PipelineConfig:
          $ref: '#/components/schemas/PipelineConfig'
          description: Functions linked with the pipeline resolver.
        RequestMappingTemplate:
          type: string
          description: |-
            The request mapping template.
             Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.
        RequestMappingTemplateS3Location:
          type: string
          description: The location of a request mapping template in an S3 bucket. Use this if you want to provision with a template file in S3 rather than embedding it in your CFNshort template.
        ResolverArn:
          type: string
          description: ''
        ResponseMappingTemplate:
          type: string
          description: The response mapping template.
        ResponseMappingTemplateS3Location:
          type: string
          description: The location of a response mapping template in an S3 bucket. Use this if you want to provision with a template file in S3 rather than embedding it in your CFNshort template.
        Runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
          description: Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
        SyncConfig:
          $ref: '#/components/schemas/SyncConfig'
          description: The ``SyncConfig`` for a resolver attached to a versioned data source.
        TypeName:
          type: string
          description: The GraphQL type that invokes this resolver.
        MetricsConfig:
          type: string
          description: Enables or disables enhanced resolver metrics for specified resolvers. Note that ``MetricsConfig`` won't be used unless the ``resolverLevelMetricsBehavior`` value is set to ``PER_RESOLVER_METRICS``. If the ``resolverLevelMetricsBehavior`` is set to ``FULL_REQUEST_RESOLVER_METRICS`` instead, ``MetricsConfig`` will be ignored. However, you can still set its value.
          enum:
            - ENABLED
            - DISABLED
      required:
        - TypeName
        - ApiId
        - FieldName
      x-stackql-resource-name: resolver
      description: |-
        The ``AWS::AppSync::Resolver`` resource defines the logical GraphQL resolver that you attach to fields in a schema. Request and response templates for resolvers are written in Apache Velocity Template Language (VTL) format. For more information about resolvers, see [Resolver Mapping Template Reference](https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference.html).
          When you submit an update, CFNLong updates resources based on differences between what you submit and the stack's current template. To cause this resource to be updated you must change a property value for this resource in the CFNshort template. Changing the S3 file content without changing a property value will not result in an update operation.
         See [Update Behaviors of Stack Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html) in the *User Guide*.
      x-type-name: AWS::AppSync::Resolver
      x-stackql-primary-identifier:
        - ResolverArn
      x-create-only-properties:
        - ApiId
        - FieldName
        - TypeName
      x-write-only-properties:
        - RequestMappingTemplateS3Location
        - ResponseMappingTemplateS3Location
        - CodeS3Location
      x-read-only-properties:
        - ResolverArn
      x-required-properties:
        - TypeName
        - ApiId
        - FieldName
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - s3:GetObject
          - appsync:CreateResolver
          - appsync:GetResolver
        read:
          - appsync:GetResolver
        update:
          - s3:GetObject
          - appsync:UpdateResolver
        delete:
          - appsync:DeleteResolver
        list:
          - appsync:ListResolvers
    SourceApiAssociationConfig:
      properties:
        MergeType:
          description: Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
          type: string
          enum:
            - AUTO_MERGE
            - MANUAL_MERGE
      additionalProperties: false
    SourceApiAssociation:
      type: object
      properties:
        SourceApiIdentifier:
          description: Identifier of the Source GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN
          type: string
        MergedApiIdentifier:
          description: Identifier of the Merged GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN
          type: string
        Description:
          description: Description of the SourceApiAssociation.
          type: string
        SourceApiAssociationConfig:
          description: Customized configuration for SourceApiAssociation.
          $ref: '#/components/schemas/SourceApiAssociationConfig'
        AssociationId:
          description: Id of the SourceApiAssociation.
          type: string
        AssociationArn:
          description: ARN of the SourceApiAssociation.
          type: string
        SourceApiId:
          description: GraphQLApiId of the source API in the association.
          type: string
        SourceApiArn:
          description: ARN of the source API in the association.
          type: string
          pattern: ^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
        MergedApiId:
          description: GraphQLApiId of the Merged API in the association.
          type: string
        MergedApiArn:
          description: ARN of the Merged API in the association.
          type: string
          pattern: ^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
        SourceApiAssociationStatus:
          description: Current status of SourceApiAssociation.
          type: string
          enum:
            - MERGE_SCHEDULED
            - MERGE_FAILED
            - MERGE_SUCCESS
            - MERGE_IN_PROGRESS
            - AUTO_MERGE_SCHEDULE_FAILED
            - DELETION_SCHEDULED
            - DELETION_IN_PROGRESS
            - DELETION_FAILED
        SourceApiAssociationStatusDetail:
          description: Current SourceApiAssociation status details.
          type: string
        LastSuccessfulMergeDate:
          description: Date of last schema successful merge.
          type: string
          format: date-time
      x-stackql-resource-name: source_api_association
      description: Resource Type definition for AWS::AppSync::SourceApiAssociation
      x-type-name: AWS::AppSync::SourceApiAssociation
      x-stackql-primary-identifier:
        - AssociationArn
      x-stackql-additional-identifiers:
        - - SourceApiIdentifier
          - MergedApiIdentifier
      x-create-only-properties:
        - SourceApiIdentifier
        - MergedApiIdentifier
      x-write-only-properties:
        - SourceApiIdentifier
        - MergedApiIdentifier
      x-read-only-properties:
        - AssociationId
        - AssociationArn
        - SourceApiId
        - SourceApiArn
        - MergedApiId
        - MergedApiArn
        - SourceApiAssociationStatus
        - SourceApiAssociationStatusDetail
        - LastSuccessfulMergeDate
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - appsync:AssociateSourceGraphqlApi
          - appsync:AssociateMergedGraphqlApi
          - appsync:GetSourceApiAssociation
        read:
          - appsync:GetSourceApiAssociation
          - appsync:ListSourceApiAssociations
        update:
          - appsync:GetSourceApiAssociation
          - appsync:UpdateSourceApiAssociation
          - appsync:GetSourceApiAssociation
        delete:
          - appsync:GetSourceApiAssociation
          - appsync:DisassociateSourceGraphqlApi
          - appsync:DisassociateMergedGraphqlApi
          - appsync:ListSourceApiAssociations
        list:
          - appsync:ListSourceApiAssociations
    CreateDomainNameRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DomainName:
              type: string
              minLength: 1
              maxLength: 253
              pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
            Description:
              type: string
              minLength: 0
              maxLength: 255
            CertificateArn:
              type: string
              minLength: 3
              maxLength: 2048
              pattern: ^arn:[a-z-]*:acm:[a-z0-9-]*:\d{12}:certificate/[0-9A-Za-z_/-]*$
            AppSyncDomainName:
              type: string
            HostedZoneId:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateDomainNameRequest
      type: object
      required: []
    CreateDomainNameApiAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DomainName:
              type: string
              minLength: 1
              maxLength: 253
              pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
            ApiId:
              type: string
            ApiAssociationIdentifier:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateDomainNameApiAssociationRequest
      type: object
      required: []
    CreateFunctionConfigurationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            FunctionId:
              description: The unique identifier for the function generated by the service
              type: string
            FunctionArn:
              description: The ARN for the function generated by the service
              type: string
            ApiId:
              description: The AWS AppSync GraphQL API that you want to attach using this function.
              type: string
            Code:
              description: The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
              type: string
            CodeS3Location:
              description: The Amazon S3 endpoint (where the code is located??).
              type: string
            DataSourceName:
              description: The name of data source this function will attach.
              type: string
            Description:
              description: The function description.
              type: string
            FunctionVersion:
              description: The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
              type: string
            MaxBatchSize:
              description: The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
              type: integer
            Name:
              description: The name of the function.
              type: string
            RequestMappingTemplate:
              description: The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
              type: string
            RequestMappingTemplateS3Location:
              description: Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.
              type: string
            ResponseMappingTemplate:
              description: The Function response mapping template.
              type: string
            ResponseMappingTemplateS3Location:
              description: The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
              type: string
            Runtime:
              description: Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
              $ref: '#/components/schemas/AppSyncRuntime'
            SyncConfig:
              description: Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
              $ref: '#/components/schemas/SyncConfig'
          x-stackQL-stringOnly: true
      x-title: CreateFunctionConfigurationRequest
      type: object
      required: []
    CreateResolverRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ApiId:
              type: string
              description: The APSYlong GraphQL API to which you want to attach this resolver.
            CachingConfig:
              $ref: '#/components/schemas/CachingConfig'
              description: The caching configuration for the resolver.
            Code:
              type: string
              description: The ``resolver`` code that contains the request and response functions. When code is used, the ``runtime`` is required. The runtime value must be ``APPSYNC_JS``.
            CodeS3Location:
              type: string
              description: The Amazon S3 endpoint.
            DataSourceName:
              type: string
              description: The resolver data source name.
            FieldName:
              type: string
              description: The GraphQL field on a type that invokes the resolver.
            Kind:
              type: string
              description: |-
                The resolver type.
                  +   *UNIT*: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.
                  +   *PIPELINE*: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of ``Function`` objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.
            MaxBatchSize:
              type: integer
              description: The maximum number of resolver request inputs that will be sent to a single LAMlong function in a ``BatchInvoke`` operation.
            PipelineConfig:
              $ref: '#/components/schemas/PipelineConfig'
              description: Functions linked with the pipeline resolver.
            RequestMappingTemplate:
              type: string
              description: |-
                The request mapping template.
                 Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.
            RequestMappingTemplateS3Location:
              type: string
              description: The location of a request mapping template in an S3 bucket. Use this if you want to provision with a template file in S3 rather than embedding it in your CFNshort template.
            ResolverArn:
              type: string
              description: ''
            ResponseMappingTemplate:
              type: string
              description: The response mapping template.
            ResponseMappingTemplateS3Location:
              type: string
              description: The location of a response mapping template in an S3 bucket. Use this if you want to provision with a template file in S3 rather than embedding it in your CFNshort template.
            Runtime:
              $ref: '#/components/schemas/AppSyncRuntime'
              description: Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
            SyncConfig:
              $ref: '#/components/schemas/SyncConfig'
              description: The ``SyncConfig`` for a resolver attached to a versioned data source.
            TypeName:
              type: string
              description: The GraphQL type that invokes this resolver.
            MetricsConfig:
              type: string
              description: Enables or disables enhanced resolver metrics for specified resolvers. Note that ``MetricsConfig`` won't be used unless the ``resolverLevelMetricsBehavior`` value is set to ``PER_RESOLVER_METRICS``. If the ``resolverLevelMetricsBehavior`` is set to ``FULL_REQUEST_RESOLVER_METRICS`` instead, ``MetricsConfig`` will be ignored. However, you can still set its value.
              enum:
                - ENABLED
                - DISABLED
          x-stackQL-stringOnly: true
      x-title: CreateResolverRequest
      type: object
      required: []
    CreateSourceApiAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            SourceApiIdentifier:
              description: Identifier of the Source GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN
              type: string
            MergedApiIdentifier:
              description: Identifier of the Merged GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN
              type: string
            Description:
              description: Description of the SourceApiAssociation.
              type: string
            SourceApiAssociationConfig:
              description: Customized configuration for SourceApiAssociation.
              $ref: '#/components/schemas/SourceApiAssociationConfig'
            AssociationId:
              description: Id of the SourceApiAssociation.
              type: string
            AssociationArn:
              description: ARN of the SourceApiAssociation.
              type: string
            SourceApiId:
              description: GraphQLApiId of the source API in the association.
              type: string
            SourceApiArn:
              description: ARN of the source API in the association.
              type: string
              pattern: ^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
            MergedApiId:
              description: GraphQLApiId of the Merged API in the association.
              type: string
            MergedApiArn:
              description: ARN of the Merged API in the association.
              type: string
              pattern: ^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
            SourceApiAssociationStatus:
              description: Current status of SourceApiAssociation.
              type: string
              enum:
                - MERGE_SCHEDULED
                - MERGE_FAILED
                - MERGE_SUCCESS
                - MERGE_IN_PROGRESS
                - AUTO_MERGE_SCHEDULE_FAILED
                - DELETION_SCHEDULED
                - DELETION_IN_PROGRESS
                - DELETION_FAILED
            SourceApiAssociationStatusDetail:
              description: Current SourceApiAssociation status details.
              type: string
            LastSuccessfulMergeDate:
              description: Date of last schema successful merge.
              type: string
              format: date-time
          x-stackQL-stringOnly: true
      x-title: CreateSourceApiAssociationRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    domain_names:
      name: domain_names
      id: aws.appsync.domain_names
      x-cfn-schema-name: DomainName
      x-cfn-type-name: AWS::AppSync::DomainName
      x-identifiers:
        - DomainName
      x-type: list
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DomainName&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/domain_names/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/domain_names/methods/delete_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::DomainName'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainName') as domain_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::DomainName'
                AND region = 'us-east-1'
    domain_name:
      name: domain_name
      id: aws.appsync.domain_name
      x-cfn-schema-name: DomainName
      x-cfn-type-name: AWS::AppSync::DomainName
      x-identifiers:
        - DomainName
      x-type: get
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/domain_name/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.AppSyncDomainName') as app_sync_domain_name,
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainName'
              AND data__Identifier = '<DomainName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                json_extract_path_text(Properties, 'AppSyncDomainName') as app_sync_domain_name,
                json_extract_path_text(Properties, 'HostedZoneId') as hosted_zone_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainName'
                AND data__Identifier = '<DomainName>'
                AND region = 'us-east-1'
    domain_name_api_associations:
      name: domain_name_api_associations
      id: aws.appsync.domain_name_api_associations
      x-cfn-schema-name: DomainNameApiAssociation
      x-cfn-type-name: AWS::AppSync::DomainNameApiAssociation
      x-identifiers:
        - ApiAssociationIdentifier
      x-type: list
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DomainNameApiAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainNameApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainNameApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/domain_name_api_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/domain_name_api_associations/methods/delete_resource'
    domain_name_api_association:
      name: domain_name_api_association
      id: aws.appsync.domain_name_api_association
      x-cfn-schema-name: DomainNameApiAssociation
      x-cfn-type-name: AWS::AppSync::DomainNameApiAssociation
      x-identifiers:
        - ApiAssociationIdentifier
      x-type: get
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainNameApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/domain_name_api_association/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ApiAssociationIdentifier') as api_association_identifier
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainNameApiAssociation'
              AND data__Identifier = '<ApiAssociationIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'ApiAssociationIdentifier') as api_association_identifier
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainNameApiAssociation'
                AND data__Identifier = '<ApiAssociationIdentifier>'
                AND region = 'us-east-1'
    function_configurations:
      name: function_configurations
      id: aws.appsync.function_configurations
      x-cfn-schema-name: FunctionConfiguration
      x-cfn-type-name: AWS::AppSync::FunctionConfiguration
      x-identifiers:
        - FunctionArn
      x-type: list
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__FunctionConfiguration&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::FunctionConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::FunctionConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/function_configurations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/function_configurations/methods/delete_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionArn') as function_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
                AND region = 'us-east-1'
    function_configuration:
      name: function_configuration
      id: aws.appsync.function_configuration
      x-cfn-schema-name: FunctionConfiguration
      x-cfn-type-name: AWS::AppSync::FunctionConfiguration
      x-identifiers:
        - FunctionArn
      x-type: get
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::FunctionConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/function_configuration/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FunctionId') as function_id,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Code') as code,
              JSON_EXTRACT(Properties, '$.CodeS3Location') as code_s3_location,
              JSON_EXTRACT(Properties, '$.DataSourceName') as data_source_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FunctionVersion') as function_version,
              JSON_EXTRACT(Properties, '$.MaxBatchSize') as max_batch_size,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplate') as request_mapping_template,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplate') as response_mapping_template,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.Runtime') as runtime,
              JSON_EXTRACT(Properties, '$.SyncConfig') as sync_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
              AND data__Identifier = '<FunctionArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FunctionId') as function_id,
                json_extract_path_text(Properties, 'FunctionArn') as function_arn,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'Code') as code,
                json_extract_path_text(Properties, 'CodeS3Location') as code_s3_location,
                json_extract_path_text(Properties, 'DataSourceName') as data_source_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'FunctionVersion') as function_version,
                json_extract_path_text(Properties, 'MaxBatchSize') as max_batch_size,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'RequestMappingTemplate') as request_mapping_template,
                json_extract_path_text(Properties, 'RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
                json_extract_path_text(Properties, 'ResponseMappingTemplate') as response_mapping_template,
                json_extract_path_text(Properties, 'ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
                json_extract_path_text(Properties, 'Runtime') as runtime,
                json_extract_path_text(Properties, 'SyncConfig') as sync_config
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
                AND data__Identifier = '<FunctionArn>'
                AND region = 'us-east-1'
    resolvers:
      name: resolvers
      id: aws.appsync.resolvers
      x-cfn-schema-name: Resolver
      x-cfn-type-name: AWS::AppSync::Resolver
      x-identifiers:
        - ResolverArn
      x-type: list
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Resolver&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::Resolver"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::Resolver"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resolvers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resolvers/methods/delete_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResolverArn') as resolver_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::Resolver'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ResolverArn') as resolver_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::Resolver'
                AND region = 'us-east-1'
    resolver:
      name: resolver
      id: aws.appsync.resolver
      x-cfn-schema-name: Resolver
      x-cfn-type-name: AWS::AppSync::Resolver
      x-identifiers:
        - ResolverArn
      x-type: get
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::Resolver"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/resolver/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.CachingConfig') as caching_config,
              JSON_EXTRACT(Properties, '$.Code') as code,
              JSON_EXTRACT(Properties, '$.CodeS3Location') as code_s3_location,
              JSON_EXTRACT(Properties, '$.DataSourceName') as data_source_name,
              JSON_EXTRACT(Properties, '$.FieldName') as field_name,
              JSON_EXTRACT(Properties, '$.Kind') as kind,
              JSON_EXTRACT(Properties, '$.MaxBatchSize') as max_batch_size,
              JSON_EXTRACT(Properties, '$.PipelineConfig') as pipeline_config,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplate') as request_mapping_template,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.ResolverArn') as resolver_arn,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplate') as response_mapping_template,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.Runtime') as runtime,
              JSON_EXTRACT(Properties, '$.SyncConfig') as sync_config,
              JSON_EXTRACT(Properties, '$.TypeName') as type_name,
              JSON_EXTRACT(Properties, '$.MetricsConfig') as metrics_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::Resolver'
              AND data__Identifier = '<ResolverArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'CachingConfig') as caching_config,
                json_extract_path_text(Properties, 'Code') as code,
                json_extract_path_text(Properties, 'CodeS3Location') as code_s3_location,
                json_extract_path_text(Properties, 'DataSourceName') as data_source_name,
                json_extract_path_text(Properties, 'FieldName') as field_name,
                json_extract_path_text(Properties, 'Kind') as kind,
                json_extract_path_text(Properties, 'MaxBatchSize') as max_batch_size,
                json_extract_path_text(Properties, 'PipelineConfig') as pipeline_config,
                json_extract_path_text(Properties, 'RequestMappingTemplate') as request_mapping_template,
                json_extract_path_text(Properties, 'RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
                json_extract_path_text(Properties, 'ResolverArn') as resolver_arn,
                json_extract_path_text(Properties, 'ResponseMappingTemplate') as response_mapping_template,
                json_extract_path_text(Properties, 'ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
                json_extract_path_text(Properties, 'Runtime') as runtime,
                json_extract_path_text(Properties, 'SyncConfig') as sync_config,
                json_extract_path_text(Properties, 'TypeName') as type_name,
                json_extract_path_text(Properties, 'MetricsConfig') as metrics_config
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::Resolver'
                AND data__Identifier = '<ResolverArn>'
                AND region = 'us-east-1'
    source_api_associations:
      name: source_api_associations
      id: aws.appsync.source_api_associations
      x-cfn-schema-name: SourceApiAssociation
      x-cfn-type-name: AWS::AppSync::SourceApiAssociation
      x-identifiers:
        - AssociationArn
      x-type: list
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SourceApiAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::SourceApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::SourceApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/source_api_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/source_api_associations/methods/delete_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssociationArn') as association_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AssociationArn') as association_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
                AND region = 'us-east-1'
    source_api_association:
      name: source_api_association
      id: aws.appsync.source_api_association
      x-cfn-schema-name: SourceApiAssociation
      x-cfn-type-name: AWS::AppSync::SourceApiAssociation
      x-identifiers:
        - AssociationArn
      x-type: get
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::SourceApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/source_api_association/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SourceApiIdentifier') as source_api_identifier,
              JSON_EXTRACT(Properties, '$.MergedApiIdentifier') as merged_api_identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SourceApiAssociationConfig') as source_api_association_config,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id,
              JSON_EXTRACT(Properties, '$.AssociationArn') as association_arn,
              JSON_EXTRACT(Properties, '$.SourceApiId') as source_api_id,
              JSON_EXTRACT(Properties, '$.SourceApiArn') as source_api_arn,
              JSON_EXTRACT(Properties, '$.MergedApiId') as merged_api_id,
              JSON_EXTRACT(Properties, '$.MergedApiArn') as merged_api_arn,
              JSON_EXTRACT(Properties, '$.SourceApiAssociationStatus') as source_api_association_status,
              JSON_EXTRACT(Properties, '$.SourceApiAssociationStatusDetail') as source_api_association_status_detail,
              JSON_EXTRACT(Properties, '$.LastSuccessfulMergeDate') as last_successful_merge_date
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
              AND data__Identifier = '<AssociationArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'SourceApiIdentifier') as source_api_identifier,
                json_extract_path_text(Properties, 'MergedApiIdentifier') as merged_api_identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'SourceApiAssociationConfig') as source_api_association_config,
                json_extract_path_text(Properties, 'AssociationId') as association_id,
                json_extract_path_text(Properties, 'AssociationArn') as association_arn,
                json_extract_path_text(Properties, 'SourceApiId') as source_api_id,
                json_extract_path_text(Properties, 'SourceApiArn') as source_api_arn,
                json_extract_path_text(Properties, 'MergedApiId') as merged_api_id,
                json_extract_path_text(Properties, 'MergedApiArn') as merged_api_arn,
                json_extract_path_text(Properties, 'SourceApiAssociationStatus') as source_api_association_status,
                json_extract_path_text(Properties, 'SourceApiAssociationStatusDetail') as source_api_association_status_detail,
                json_extract_path_text(Properties, 'LastSuccessfulMergeDate') as last_successful_merge_date
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
                AND data__Identifier = '<AssociationArn>'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DomainName&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDomainName
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDomainNameRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DomainNameApiAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDomainNameApiAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDomainNameApiAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__FunctionConfiguration&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateFunctionConfiguration
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateFunctionConfigurationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Resolver&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResolver
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResolverRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SourceApiAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSourceApiAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSourceApiAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  pagination:
    requestTranslate:
      algorithm: drop_double_underscore_params
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
