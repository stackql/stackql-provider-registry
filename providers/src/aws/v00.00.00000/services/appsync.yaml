openapi: 3.0.0
info:
  title: AppSync
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    EventConfig:
      description: The configuration for an Event Api
      type: object
      additionalProperties: false
      properties:
        AuthProviders:
          $ref: '#/components/schemas/AuthProviders'
        ConnectionAuthModes:
          $ref: '#/components/schemas/AuthModes'
        DefaultPublishAuthModes:
          $ref: '#/components/schemas/AuthModes'
        DefaultSubscribeAuthModes:
          $ref: '#/components/schemas/AuthModes'
        LogConfig:
          $ref: '#/components/schemas/EventLogConfig'
      required:
        - AuthProviders
        - ConnectionAuthModes
        - DefaultPublishAuthModes
        - DefaultSubscribeAuthModes
    AuthMode:
      description: An auth mode.
      type: object
      additionalProperties: false
      properties:
        AuthType:
          $ref: '#/components/schemas/AuthenticationType'
    AuthModes:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/AuthMode'
    AuthenticationType:
      description: Security configuration for your AppSync API.
      type: string
      enum:
        - AMAZON_COGNITO_USER_POOLS
        - AWS_IAM
        - API_KEY
        - OPENID_CONNECT
        - AWS_LAMBDA
    OpenIDConnectConfig:
      type: object
      additionalProperties: false
      properties:
        ClientId:
          description: The client identifier of the Relying party at the OpenID identity provider.
          type: string
        AuthTTL:
          description: The number of milliseconds that a token is valid after being authenticated.
          type: number
        Issuer:
          description: 'The issuer for the OIDC configuration. '
          type: string
        IatTTL:
          description: |+
            The number of milliseconds that a token is valid after it's issued to a user.

          type: number
    CognitoConfig:
      description: Optional authorization configuration for using Amazon Cognito user pools with your API endpoint.
      type: object
      additionalProperties: false
      properties:
        AppIdClientRegex:
          type: string
        UserPoolId:
          type: string
        AwsRegion:
          type: string
      required:
        - UserPoolId
        - AwsRegion
    LambdaAuthorizerConfig:
      type: object
      additionalProperties: false
      properties:
        IdentityValidationExpression:
          description: A regular expression for validation of tokens before the Lambda function is called.
          type: string
        AuthorizerUri:
          description: The ARN of the Lambda function to be called for authorization.
          type: string
        AuthorizerResultTtlInSeconds:
          description: The number of seconds a response should be cached for.
          type: integer
    AuthProviders:
      description: A list of auth providers for the AppSync API.
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/AuthProvider'
    AuthProvider:
      description: An auth provider for the AppSync API.
      type: object
      additionalProperties: false
      properties:
        AuthType:
          $ref: '#/components/schemas/AuthenticationType'
        OpenIDConnectConfig:
          $ref: '#/components/schemas/OpenIDConnectConfig'
        CognitoConfig:
          $ref: '#/components/schemas/CognitoConfig'
        LambdaAuthorizerConfig:
          $ref: '#/components/schemas/LambdaAuthorizerConfig'
      required:
        - AuthType
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    Tags:
      description: An arbitrary set of tags (key-value pairs) for this AppSync API.
      type: array
      uniqueItems: true
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/Tag'
    ApiName:
      description: The name of the AppSync API.
      type: string
      minLength: 1
      maxLength: 50
      pattern: '[A-Za-z0-9_\-\ ]+'
    OwnerContact:
      description: The owner contact information for an API resource.
      type: string
      minLength: 1
      maxLength: 250
      pattern: '[A-Za-z0-9_\-\ \.]+'
    DnsMap:
      description: A map of DNS names for the AppSync API.
      type: object
      additionalProperties: false
      properties:
        Realtime:
          type: string
        Http:
          type: string
    EventLogLevel:
      description: Logging level for the AppSync API.
      type: string
      enum:
        - NONE
        - ERROR
        - ALL
        - INFO
        - DEBUG
    EventLogConfig:
      description: The log config for the AppSync API.
      type: object
      additionalProperties: false
      properties:
        LogLevel:
          $ref: '#/components/schemas/EventLogLevel'
        CloudWatchLogsRoleArn:
          type: string
      required:
        - LogLevel
        - CloudWatchLogsRoleArn
    Api:
      type: object
      properties:
        ApiId:
          description: The unique identifier for the AppSync Api generated by the service
          type: string
        ApiArn:
          description: The Amazon Resource Name (ARN) of the AppSync Api
          type: string
        Name:
          $ref: '#/components/schemas/ApiName'
        OwnerContact:
          $ref: '#/components/schemas/OwnerContact'
        Dns:
          $ref: '#/components/schemas/DnsMap'
        EventConfig:
          $ref: '#/components/schemas/EventConfig'
        Tags:
          $ref: '#/components/schemas/Tags'
      required:
        - Name
      x-stackql-resource-name: api
      description: Resource schema for AppSync Api
      x-type-name: AWS::AppSync::Api
      x-stackql-primary-identifier:
        - ApiArn
      x-read-only-properties:
        - ApiId
        - Dns
        - Dns/Realtime
        - Dns/Http
        - ApiArn
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - appsync:TagResource
          - appsync:UntagResource
      x-required-permissions:
        create:
          - appsync:CreateApi
          - appsync:TagResource
          - appsync:GetApi
          - iam:PassRole
        read:
          - appsync:GetApi
          - appsync:ListTagsForResource
        update:
          - appsync:UpdateApi
          - appsync:TagResource
          - appsync:UntagResource
          - appsync:GetApi
          - iam:PassRole
        delete:
          - appsync:DeleteApi
          - appsync:UntagResource
        list:
          - appsync:ListApis
    Namespace:
      description: Namespace indentifier.
      type: string
      minLength: 1
      maxLength: 50
      pattern: ([A-Za-z0-9](?:[A-Za-z0-9\-]{0,48}[A-Za-z0-9])?)
    Code:
      description: String of APPSYNC_JS code to be used by the handlers.
      type: string
      minLength: 1
      maxLength: 32768
    ChannelNamespaceArn:
      type: string
      description: The Amazon Resource Name (ARN) for the Channel Namespace.
    ChannelNamespace:
      type: object
      properties:
        ApiId:
          description: AppSync Api Id that this Channel Namespace belongs to.
          type: string
        Name:
          $ref: '#/components/schemas/Namespace'
        SubscribeAuthModes:
          description: List of AuthModes supported for Subscribe operations.
          $ref: '#/components/schemas/AuthModes'
        PublishAuthModes:
          description: List of AuthModes supported for Publish operations.
          $ref: '#/components/schemas/AuthModes'
        CodeHandlers:
          $ref: '#/components/schemas/Code'
        CodeS3Location:
          description: The Amazon S3 endpoint where the code is located.
          type: string
        ChannelNamespaceArn:
          $ref: '#/components/schemas/ChannelNamespaceArn'
        Tags:
          $ref: '#/components/schemas/Tags'
      required:
        - ApiId
        - Name
      x-stackql-resource-name: channel_namespace
      description: Resource schema for AppSync ChannelNamespace
      x-type-name: AWS::AppSync::ChannelNamespace
      x-stackql-primary-identifier:
        - ChannelNamespaceArn
      x-create-only-properties:
        - ApiId
        - Name
      x-write-only-properties:
        - CodeS3Location
      x-read-only-properties:
        - ChannelNamespaceArn
      x-required-properties:
        - ApiId
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - appsync:TagResource
          - appsync:UntagResource
      x-required-permissions:
        create:
          - appsync:CreateChannelNamespace
          - appsync:TagResource
          - appsync:GetChannelNamespace
          - s3:GetObject
        read:
          - appsync:GetChannelNamespace
          - appsync:ListTagsForResource
        update:
          - appsync:UpdateChannelNamespace
          - appsync:TagResource
          - appsync:UntagResource
          - appsync:GetChannelNamespace
          - s3:GetObject
        delete:
          - appsync:DeleteChannelNamespace
          - appsync:UntagResource
        list:
          - appsync:ListChannelNamespaces
    RdsHttpEndpointConfig:
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          description: Logical database name.
          type: string
        AwsRegion:
          description: AWS Region for RDS HTTP endpoint.
          type: string
        DbClusterIdentifier:
          description: Amazon RDS cluster Amazon Resource Name (ARN).
          type: string
        AwsSecretStoreArn:
          description: The ARN for database credentials stored in AWS Secrets Manager.
          type: string
        Schema:
          description: Logical schema name.
          type: string
      required:
        - AwsRegion
        - DbClusterIdentifier
        - AwsSecretStoreArn
    OpenSearchServiceConfig:
      type: object
      additionalProperties: false
      properties:
        AwsRegion:
          description: The AWS Region.
          type: string
        Endpoint:
          description: The endpoint.
          type: string
      required:
        - AwsRegion
        - Endpoint
    AwsIamConfig:
      type: object
      additionalProperties: false
      properties:
        SigningRegion:
          description: The signing Region for AWS Identity and Access Management authorization.
          type: string
        SigningServiceName:
          description: The signing service name for AWS Identity and Access Management authorization.
          type: string
    EventBridgeConfig:
      type: object
      additionalProperties: false
      properties:
        EventBusArn:
          description: ARN for the EventBridge bus.
          type: string
      required:
        - EventBusArn
    AuthorizationConfig:
      type: object
      additionalProperties: false
      properties:
        AuthorizationType:
          description: The authorization type that the HTTP endpoint requires.
          type: string
        AwsIamConfig:
          description: The AWS Identity and Access Management settings.
          $ref: '#/components/schemas/AwsIamConfig'
      required:
        - AuthorizationType
    DeltaSyncConfig:
      type: object
      additionalProperties: false
      properties:
        BaseTableTTL:
          description: The number of minutes that an Item is stored in the data source.
          type: string
        DeltaSyncTableTTL:
          description: The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.
          type: string
        DeltaSyncTableName:
          description: The Delta Sync table name.
          type: string
      required:
        - BaseTableTTL
        - DeltaSyncTableTTL
        - DeltaSyncTableName
    RelationalDatabaseConfig:
      type: object
      additionalProperties: false
      properties:
        RdsHttpEndpointConfig:
          description: Information about the Amazon RDS resource.
          $ref: '#/components/schemas/RdsHttpEndpointConfig'
        RelationalDatabaseSourceType:
          description: The type of relational data source.
          type: string
      required:
        - RelationalDatabaseSourceType
    HttpConfig:
      type: object
      additionalProperties: false
      properties:
        Endpoint:
          description: The endpoint.
          type: string
        AuthorizationConfig:
          description: The authorization configuration.
          $ref: '#/components/schemas/AuthorizationConfig'
      required:
        - Endpoint
    LambdaConfig:
      type: object
      additionalProperties: false
      properties:
        LambdaFunctionArn:
          description: The ARN for the Lambda function.
          type: string
      required:
        - LambdaFunctionArn
    ElasticsearchConfig:
      type: object
      additionalProperties: false
      properties:
        AwsRegion:
          description: The AWS Region.
          type: string
        Endpoint:
          description: The endpoint.
          type: string
      required:
        - AwsRegion
        - Endpoint
    DynamoDBConfig:
      type: object
      additionalProperties: false
      properties:
        TableName:
          description: The table name.
          type: string
        DeltaSyncConfig:
          description: The DeltaSyncConfig for a versioned datasource.
          $ref: '#/components/schemas/DeltaSyncConfig'
        UseCallerCredentials:
          description: Set to TRUE to use AWS Identity and Access Management with this data source.
          type: boolean
        AwsRegion:
          description: The AWS Region.
          type: string
        Versioned:
          description: Set to TRUE to use Conflict Detection and Resolution with this data source.
          type: boolean
      required:
        - TableName
        - AwsRegion
    DataSource:
      type: object
      properties:
        ApiId:
          description: Unique AWS AppSync GraphQL API identifier where this data source will be created.
          type: string
        Description:
          description: The description of the data source.
          type: string
        DynamoDBConfig:
          description: AWS Region and TableName for an Amazon DynamoDB table in your account.
          $ref: '#/components/schemas/DynamoDBConfig'
        ElasticsearchConfig:
          description: |-
            AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account.
            As of September 2021, Amazon Elasticsearch Service is Amazon OpenSearch Service. This property is deprecated. For new data sources, use OpenSearchServiceConfig to specify an OpenSearch Service data source.
          $ref: '#/components/schemas/ElasticsearchConfig'
        EventBridgeConfig:
          description: ARN for the EventBridge bus.
          $ref: '#/components/schemas/EventBridgeConfig'
        HttpConfig:
          description: Endpoints for an HTTP data source.
          $ref: '#/components/schemas/HttpConfig'
        LambdaConfig:
          description: An ARN of a Lambda function in valid ARN format. This can be the ARN of a Lambda function that exists in the current account or in another account.
          $ref: '#/components/schemas/LambdaConfig'
        Name:
          description: Friendly name for you to identify your AppSync data source after creation.
          type: string
        OpenSearchServiceConfig:
          description: AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account.
          $ref: '#/components/schemas/OpenSearchServiceConfig'
        RelationalDatabaseConfig:
          description: Relational Database configuration of the relational database data source.
          $ref: '#/components/schemas/RelationalDatabaseConfig'
        ServiceRoleArn:
          description: The AWS Identity and Access Management service role ARN for the data source. The system assumes this role when accessing the data source.
          type: string
        Type:
          description: The type of the data source.
          type: string
        DataSourceArn:
          description: The Amazon Resource Name (ARN) of the API key, such as arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/datasources/datasourcename.
          type: string
        MetricsConfig:
          description: ''
          type: string
          enum:
            - DISABLED
            - ENABLED
      required:
        - Type
        - ApiId
        - Name
      x-stackql-resource-name: data_source
      description: Resource Type definition for AWS::AppSync::DataSource
      x-type-name: AWS::AppSync::DataSource
      x-stackql-primary-identifier:
        - DataSourceArn
      x-create-only-properties:
        - ApiId
        - Name
      x-read-only-properties:
        - DataSourceArn
      x-required-properties:
        - Type
        - ApiId
        - Name
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - appsync:CreateDataSource
          - appsync:GetDataSource
          - iam:PassRole
        read:
          - appsync:GetDataSource
        update:
          - appsync:UpdateDataSource
          - iam:PassRole
        delete:
          - appsync:DeleteDataSource
          - appsync:GetDataSource
        list:
          - appsync:ListDataSources
    DomainName:
      type: object
      properties:
        DomainName:
          type: string
          minLength: 1
          maxLength: 253
          pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
        Description:
          type: string
          minLength: 0
          maxLength: 255
        CertificateArn:
          type: string
          minLength: 3
          maxLength: 2048
          pattern: ^arn:[a-z-]*:acm:[a-z0-9-]*:\d{12}:certificate/[0-9A-Za-z_/-]*$
        AppSyncDomainName:
          type: string
        HostedZoneId:
          type: string
      required:
        - DomainName
        - CertificateArn
      x-stackql-resource-name: domain_name
      description: Resource Type definition for AWS::AppSync::DomainName
      x-type-name: AWS::AppSync::DomainName
      x-stackql-primary-identifier:
        - DomainName
      x-create-only-properties:
        - DomainName
        - CertificateArn
      x-read-only-properties:
        - AppSyncDomainName
        - HostedZoneId
      x-required-properties:
        - DomainName
        - CertificateArn
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - appsync:CreateDomainName
          - appsync:GetDomainName
          - acm:DescribeCertificate
          - cloudfront:UpdateDistribution
        delete:
          - appsync:GetDomainName
          - appsync:DeleteDomainName
        update:
          - appsync:UpdateDomainName
        read:
          - appsync:GetDomainName
        list:
          - appsync:ListDomainNames
    DomainNameApiAssociation:
      type: object
      properties:
        DomainName:
          type: string
          minLength: 1
          maxLength: 253
          pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
        ApiId:
          type: string
        ApiAssociationIdentifier:
          type: string
      required:
        - DomainName
        - ApiId
      x-stackql-resource-name: domain_name_api_association
      description: Resource Type definition for AWS::AppSync::DomainNameApiAssociation
      x-type-name: AWS::AppSync::DomainNameApiAssociation
      x-stackql-primary-identifier:
        - ApiAssociationIdentifier
      x-create-only-properties:
        - DomainName
      x-read-only-properties:
        - ApiAssociationIdentifier
      x-required-properties:
        - DomainName
        - ApiId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - appsync:AssociateApi
          - appsync:GetApiAssociation
        delete:
          - appsync:DisassociateApi
          - appsync:GetApiAssociation
        update:
          - appsync:AssociateApi
          - appsync:GetApiAssociation
        read:
          - appsync:GetApiAssociation
    AppSyncRuntime:
      type: object
      additionalProperties: false
      properties:
        RuntimeVersion:
          type: string
          description: The ``version`` of the runtime to use. Currently, the only allowed version is ``1.0.0``.
        Name:
          type: string
          description: The ``name`` of the runtime to use. Currently, the only allowed value is ``APPSYNC_JS``.
      required:
        - RuntimeVersion
        - Name
      description: Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
    SyncConfig:
      type: object
      additionalProperties: false
      properties:
        ConflictHandler:
          type: string
          description: |-
            The Conflict Resolution strategy to perform in the event of a conflict.
              +   *OPTIMISTIC_CONCURRENCY*: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.
              +   *AUTOMERGE*: Resolve conflicts with the Automerge conflict resolution strategy.
              +   *LAMBDA*: Resolve conflicts with an LAMlong function supplied in the ``LambdaConflictHandlerConfig``.
        ConflictDetection:
          type: string
          description: |-
            The Conflict Detection strategy to use.
              +   *VERSION*: Detect conflicts based on object versions for this resolver.
              +   *NONE*: Do not detect conflicts when invoking this resolver.
        LambdaConflictHandlerConfig:
          $ref: '#/components/schemas/LambdaConflictHandlerConfig'
          description: The ``LambdaConflictHandlerConfig`` when configuring ``LAMBDA`` as the Conflict Handler.
      required:
        - ConflictDetection
      description: |-
        Describes a Sync configuration for a resolver.
         Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
    LambdaConflictHandlerConfig:
      type: object
      description: The ``LambdaConflictHandlerConfig`` when configuring LAMBDA as the Conflict Handler.
      additionalProperties: false
      properties:
        LambdaConflictHandlerArn:
          type: string
          description: The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
    FunctionConfiguration:
      type: object
      properties:
        FunctionId:
          description: The unique identifier for the function generated by the service
          type: string
        FunctionArn:
          description: The ARN for the function generated by the service
          type: string
        ApiId:
          description: The AWS AppSync GraphQL API that you want to attach using this function.
          type: string
        Code:
          description: The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
          type: string
        CodeS3Location:
          description: The Amazon S3 endpoint (where the code is located??).
          type: string
        DataSourceName:
          description: The name of data source this function will attach.
          type: string
        Description:
          description: The function description.
          type: string
        FunctionVersion:
          description: The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
          type: string
        MaxBatchSize:
          description: The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
          type: integer
        Name:
          description: The name of the function.
          type: string
        RequestMappingTemplate:
          description: The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
          type: string
        RequestMappingTemplateS3Location:
          description: Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.
          type: string
        ResponseMappingTemplate:
          description: The Function response mapping template.
          type: string
        ResponseMappingTemplateS3Location:
          description: The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
          type: string
        Runtime:
          description: Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
          $ref: '#/components/schemas/AppSyncRuntime'
        SyncConfig:
          description: Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
          $ref: '#/components/schemas/SyncConfig'
      required:
        - ApiId
        - DataSourceName
        - Name
      x-stackql-resource-name: function_configuration
      description: An example resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::AppSync::FunctionConfiguration
      x-stackql-primary-identifier:
        - FunctionArn
      x-create-only-properties:
        - ApiId
      x-write-only-properties:
        - CodeS3Location
        - ResponseMappingTemplateS3Location
        - RequestMappingTemplateS3Location
      x-read-only-properties:
        - FunctionArn
        - FunctionId
      x-required-properties:
        - ApiId
        - DataSourceName
        - Name
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - s3:GetObject
          - appsync:CreateFunction
        read:
          - appsync:GetFunction
        update:
          - s3:GetObject
          - appsync:UpdateFunction
        delete:
          - appsync:DeleteFunction
        list:
          - appsync:ListFunctions
    EnhancedMetricsConfig:
      type: object
      additionalProperties: false
      properties:
        OperationLevelMetricsConfig:
          description: |+
            Controls how operation metrics will be emitted to CloudWatch. Operation metrics include:

          type: string
        ResolverLevelMetricsBehavior:
          description: |+
            Controls how resolver metrics will be emitted to CloudWatch. Resolver metrics include:

          type: string
        DataSourceLevelMetricsBehavior:
          description: |+
            Controls how data source metrics will be emitted to CloudWatch. Data source metrics include:

          type: string
      required:
        - OperationLevelMetricsConfig
        - ResolverLevelMetricsBehavior
        - DataSourceLevelMetricsBehavior
    CognitoUserPoolConfig:
      type: object
      additionalProperties: false
      properties:
        AppIdClientRegex:
          description: 'A regular expression for validating the incoming Amazon Cognito user pool app client ID. '
          type: string
        UserPoolId:
          description: The user pool ID
          type: string
        AwsRegion:
          description: The AWS Region in which the user pool was created.
          type: string
    UserPoolConfig:
      type: object
      additionalProperties: false
      properties:
        AppIdClientRegex:
          description: A regular expression for validating the incoming Amazon Cognito user pool app client ID.
          type: string
        UserPoolId:
          description: The user pool ID.
          type: string
        AwsRegion:
          description: The AWS Region in which the user pool was created.
          type: string
        DefaultAction:
          description: The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.
          type: string
    AdditionalAuthenticationProvider:
      type: object
      additionalProperties: false
      properties:
        LambdaAuthorizerConfig:
          $ref: '#/components/schemas/LambdaAuthorizerConfig'
        OpenIDConnectConfig:
          $ref: '#/components/schemas/OpenIDConnectConfig'
        UserPoolConfig:
          $ref: '#/components/schemas/CognitoUserPoolConfig'
        AuthenticationType:
          description: The authentication type for API key, AWS Identity and Access Management, OIDC, Amazon Cognito user pools, or AWS Lambda.
          type: string
      required:
        - AuthenticationType
    LogConfig:
      type: object
      additionalProperties: false
      properties:
        ExcludeVerboseContent:
          description: Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.
          type: boolean
        FieldLogLevel:
          description: The field logging level. Values can be NONE, ERROR, INFO, DEBUG, or ALL.
          type: string
        CloudWatchLogsRoleArn:
          description: The service role that AWS AppSync will assume to publish to Amazon CloudWatch Logs in your account.
          type: string
    GraphQLApi:
      type: object
      properties:
        AdditionalAuthenticationProviders:
          type: array
          description: A list of additional authentication providers for the GraphqlApi API.
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AdditionalAuthenticationProvider'
        ApiId:
          description: Unique AWS AppSync GraphQL API identifier.
          type: string
        ApiType:
          description: The value that indicates whether the GraphQL API is a standard API (GRAPHQL) or merged API (MERGED).
          type: string
        Arn:
          description: The Amazon Resource Name (ARN) of the API key
          type: string
        AuthenticationType:
          description: Security configuration for your GraphQL API
          type: string
        EnhancedMetricsConfig:
          description: Enables and controls the enhanced metrics feature. Enhanced metrics emit granular data on API usage and performance such as AppSync request and error counts, latency, and cache hits/misses. All enhanced metric data is sent to your CloudWatch account, and you can configure the types of data that will be sent.
          $ref: '#/components/schemas/EnhancedMetricsConfig'
        EnvironmentVariables:
          description: A map containing the list of resources with their properties and environment variables.
          type: object
          additionalProperties: false
          x-patternProperties:
            ^[A-Za-z]+\w*$:
              type: string
        GraphQLDns:
          description: The fully qualified domain name (FQDN) of the endpoint URL of your GraphQL API.
          type: string
        GraphQLEndpointArn:
          description: The GraphQL endpoint ARN.
          type: string
        GraphQLUrl:
          description: The Endpoint URL of your GraphQL API.
          type: string
        IntrospectionConfig:
          description: Sets the value of the GraphQL API to enable (ENABLED) or disable (DISABLED) introspection. If no value is provided, the introspection configuration will be set to ENABLED by default. This field will produce an error if the operation attempts to use the introspection feature while this field is disabled.
          type: string
        LambdaAuthorizerConfig:
          description: A LambdaAuthorizerConfig holds configuration on how to authorize AWS AppSync API access when using the AWS_LAMBDA authorizer mode. Be aware that an AWS AppSync API may have only one Lambda authorizer configured at a time.
          $ref: '#/components/schemas/LambdaAuthorizerConfig'
        LogConfig:
          description: The Amazon CloudWatch Logs configuration.
          $ref: '#/components/schemas/LogConfig'
        MergedApiExecutionRoleArn:
          description: 'The AWS Identity and Access Management service role ARN for a merged API. '
          type: string
        Name:
          description: The API name
          type: string
        OpenIDConnectConfig:
          description: The OpenID Connect configuration.
          $ref: '#/components/schemas/OpenIDConnectConfig'
        OwnerContact:
          description: The owner contact information for an API resource.
          type: string
        QueryDepthLimit:
          description: The maximum depth a query can have in a single request. Depth refers to the amount of nested levels allowed in the body of query.
          type: integer
        RealtimeDns:
          description: The fully qualified domain name (FQDN) of the real-time endpoint URL of your GraphQL API.
          type: string
        RealtimeUrl:
          description: The GraphQL API real-time endpoint URL.
          type: string
        ResolverCountLimit:
          description: The maximum number of resolvers that can be invoked in a single request.
          type: integer
        Tags:
          description: |+
            An arbitrary set of tags (key-value pairs) for this GraphQL API.

          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
        UserPoolConfig:
          description: |+
            Optional authorization configuration for using Amazon Cognito user pools with your GraphQL endpoint.

          $ref: '#/components/schemas/UserPoolConfig'
        Visibility:
          description: Sets the scope of the GraphQL API to public (GLOBAL) or private (PRIVATE). By default, the scope is set to Global if no value is provided.
          type: string
        XrayEnabled:
          description: |+
            A flag indicating whether to use AWS X-Ray tracing for this GraphqlApi.

          type: boolean
      required:
        - Name
        - AuthenticationType
      x-stackql-resource-name: graphql_api
      description: Resource Type definition for AWS::AppSync::GraphQLApi
      x-type-name: AWS::AppSync::GraphQLApi
      x-stackql-primary-identifier:
        - ApiId
      x-read-only-properties:
        - ApiId
        - Arn
        - GraphQLEndpointArn
        - GraphQLDns
        - GraphQLUrl
        - RealtimeDns
        - RealtimeUrl
      x-required-properties:
        - Name
        - AuthenticationType
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - appsync:TagResource
          - appsync:UntagResource
          - appsync:ListTagsForResource
      x-required-permissions:
        create:
          - appsync:CreateGraphqlApi
          - appsync:TagResource
        read:
          - appsync:GetGraphqlApi
          - appsync:GetGraphqlApiEnvironmentVariables
          - appsync:ListTagsForResource
        update:
          - appsync:GetGraphqlApi
          - appsync:UpdateGraphqlApi
          - appsync:TagResource
          - appsync:UntagResource
        delete:
          - appsync:DeleteGraphqlApi
        list:
          - appsync:ListGraphqlApis
    PipelineConfig:
      type: object
      additionalProperties: false
      properties:
        Functions:
          type: array
          description: A list of ``Function`` objects.
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
      description: |-
        Use the ``PipelineConfig`` property type to specify ``PipelineConfig`` for an APSYlong resolver.
          ``PipelineConfig`` is a property of the [AWS::AppSync::Resolver](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html) resource.
    CachingConfig:
      type: object
      additionalProperties: false
      properties:
        CachingKeys:
          type: array
          description: |-
            The caching keys for a resolver that has caching activated.
             Valid values are entries from the ``$context.arguments``, ``$context.source``, and ``$context.identity`` maps.
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Ttl:
          type: number
          description: |-
            The TTL in seconds for a resolver that has caching activated.
             Valid values are 1–3,600 seconds.
      required:
        - Ttl
      description: The caching configuration for a resolver that has caching activated.
    Resolver:
      type: object
      properties:
        ApiId:
          type: string
          description: The APSYlong GraphQL API to which you want to attach this resolver.
        CachingConfig:
          $ref: '#/components/schemas/CachingConfig'
          description: The caching configuration for the resolver.
        Code:
          type: string
          description: The ``resolver`` code that contains the request and response functions. When code is used, the ``runtime`` is required. The runtime value must be ``APPSYNC_JS``.
        CodeS3Location:
          type: string
          description: The Amazon S3 endpoint.
        DataSourceName:
          type: string
          description: The resolver data source name.
        FieldName:
          type: string
          description: The GraphQL field on a type that invokes the resolver.
        Kind:
          type: string
          description: |-
            The resolver type.
              +   *UNIT*: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.
              +   *PIPELINE*: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of ``Function`` objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.
        MaxBatchSize:
          type: integer
          description: The maximum number of resolver request inputs that will be sent to a single LAMlong function in a ``BatchInvoke`` operation.
        PipelineConfig:
          $ref: '#/components/schemas/PipelineConfig'
          description: Functions linked with the pipeline resolver.
        RequestMappingTemplate:
          type: string
          description: |-
            The request mapping template.
             Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.
        RequestMappingTemplateS3Location:
          type: string
          description: The location of a request mapping template in an S3 bucket. Use this if you want to provision with a template file in S3 rather than embedding it in your CFNshort template.
        ResolverArn:
          type: string
          description: ''
        ResponseMappingTemplate:
          type: string
          description: The response mapping template.
        ResponseMappingTemplateS3Location:
          type: string
          description: The location of a response mapping template in an S3 bucket. Use this if you want to provision with a template file in S3 rather than embedding it in your CFNshort template.
        Runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
          description: Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
        SyncConfig:
          $ref: '#/components/schemas/SyncConfig'
          description: The ``SyncConfig`` for a resolver attached to a versioned data source.
        TypeName:
          type: string
          description: The GraphQL type that invokes this resolver.
        MetricsConfig:
          type: string
          description: Enables or disables enhanced resolver metrics for specified resolvers. Note that ``MetricsConfig`` won't be used unless the ``resolverLevelMetricsBehavior`` value is set to ``PER_RESOLVER_METRICS``. If the ``resolverLevelMetricsBehavior`` is set to ``FULL_REQUEST_RESOLVER_METRICS`` instead, ``MetricsConfig`` will be ignored. However, you can still set its value.
          enum:
            - ENABLED
            - DISABLED
      required:
        - TypeName
        - ApiId
        - FieldName
      x-stackql-resource-name: resolver
      description: |-
        The ``AWS::AppSync::Resolver`` resource defines the logical GraphQL resolver that you attach to fields in a schema. Request and response templates for resolvers are written in Apache Velocity Template Language (VTL) format. For more information about resolvers, see [Resolver Mapping Template Reference](https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference.html).
          When you submit an update, CFNLong updates resources based on differences between what you submit and the stack's current template. To cause this resource to be updated you must change a property value for this resource in the CFNshort template. Changing the S3 file content without changing a property value will not result in an update operation.
         See [Update Behaviors of Stack Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html) in the *User Guide*.
      x-type-name: AWS::AppSync::Resolver
      x-stackql-primary-identifier:
        - ResolverArn
      x-create-only-properties:
        - ApiId
        - FieldName
        - TypeName
      x-write-only-properties:
        - RequestMappingTemplateS3Location
        - ResponseMappingTemplateS3Location
        - CodeS3Location
      x-read-only-properties:
        - ResolverArn
      x-required-properties:
        - TypeName
        - ApiId
        - FieldName
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - s3:GetObject
          - appsync:CreateResolver
          - appsync:GetResolver
        read:
          - appsync:GetResolver
        update:
          - s3:GetObject
          - appsync:UpdateResolver
        delete:
          - appsync:DeleteResolver
        list:
          - appsync:ListResolvers
    SourceApiAssociationConfig:
      properties:
        MergeType:
          description: Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
          type: string
          enum:
            - AUTO_MERGE
            - MANUAL_MERGE
      additionalProperties: false
    SourceApiAssociation:
      type: object
      properties:
        SourceApiIdentifier:
          description: Identifier of the Source GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN
          type: string
        MergedApiIdentifier:
          description: Identifier of the Merged GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN
          type: string
        Description:
          description: Description of the SourceApiAssociation.
          type: string
        SourceApiAssociationConfig:
          description: Customized configuration for SourceApiAssociation.
          $ref: '#/components/schemas/SourceApiAssociationConfig'
        AssociationId:
          description: Id of the SourceApiAssociation.
          type: string
        AssociationArn:
          description: ARN of the SourceApiAssociation.
          type: string
        SourceApiId:
          description: GraphQLApiId of the source API in the association.
          type: string
        SourceApiArn:
          description: ARN of the source API in the association.
          type: string
          pattern: ^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
        MergedApiId:
          description: GraphQLApiId of the Merged API in the association.
          type: string
        MergedApiArn:
          description: ARN of the Merged API in the association.
          type: string
          pattern: ^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
        SourceApiAssociationStatus:
          description: Current status of SourceApiAssociation.
          type: string
          enum:
            - MERGE_SCHEDULED
            - MERGE_FAILED
            - MERGE_SUCCESS
            - MERGE_IN_PROGRESS
            - AUTO_MERGE_SCHEDULE_FAILED
            - DELETION_SCHEDULED
            - DELETION_IN_PROGRESS
            - DELETION_FAILED
        SourceApiAssociationStatusDetail:
          description: Current SourceApiAssociation status details.
          type: string
        LastSuccessfulMergeDate:
          description: Date of last schema successful merge.
          type: string
          format: date-time
      x-stackql-resource-name: source_api_association
      description: Resource Type definition for AWS::AppSync::SourceApiAssociation
      x-type-name: AWS::AppSync::SourceApiAssociation
      x-stackql-primary-identifier:
        - AssociationArn
      x-stackql-additional-identifiers:
        - - SourceApiIdentifier
          - MergedApiIdentifier
      x-create-only-properties:
        - SourceApiIdentifier
        - MergedApiIdentifier
      x-write-only-properties:
        - SourceApiIdentifier
        - MergedApiIdentifier
      x-read-only-properties:
        - AssociationId
        - AssociationArn
        - SourceApiId
        - SourceApiArn
        - MergedApiId
        - MergedApiArn
        - SourceApiAssociationStatus
        - SourceApiAssociationStatusDetail
        - LastSuccessfulMergeDate
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - appsync:AssociateSourceGraphqlApi
          - appsync:AssociateMergedGraphqlApi
          - appsync:GetSourceApiAssociation
        read:
          - appsync:GetSourceApiAssociation
          - appsync:ListSourceApiAssociations
        update:
          - appsync:GetSourceApiAssociation
          - appsync:UpdateSourceApiAssociation
          - appsync:GetSourceApiAssociation
        delete:
          - appsync:GetSourceApiAssociation
          - appsync:DisassociateSourceGraphqlApi
          - appsync:DisassociateMergedGraphqlApi
          - appsync:ListSourceApiAssociations
        list:
          - appsync:ListSourceApiAssociations
    CreateApiRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ApiId:
              description: The unique identifier for the AppSync Api generated by the service
              type: string
            ApiArn:
              description: The Amazon Resource Name (ARN) of the AppSync Api
              type: string
            Name:
              $ref: '#/components/schemas/ApiName'
            OwnerContact:
              $ref: '#/components/schemas/OwnerContact'
            Dns:
              $ref: '#/components/schemas/DnsMap'
            EventConfig:
              $ref: '#/components/schemas/EventConfig'
            Tags:
              $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateApiRequest
      type: object
      required: []
    CreateChannelNamespaceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ApiId:
              description: AppSync Api Id that this Channel Namespace belongs to.
              type: string
            Name:
              $ref: '#/components/schemas/Namespace'
            SubscribeAuthModes:
              description: List of AuthModes supported for Subscribe operations.
              $ref: '#/components/schemas/AuthModes'
            PublishAuthModes:
              description: List of AuthModes supported for Publish operations.
              $ref: '#/components/schemas/AuthModes'
            CodeHandlers:
              $ref: '#/components/schemas/Code'
            CodeS3Location:
              description: The Amazon S3 endpoint where the code is located.
              type: string
            ChannelNamespaceArn:
              $ref: '#/components/schemas/ChannelNamespaceArn'
            Tags:
              $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateChannelNamespaceRequest
      type: object
      required: []
    CreateDataSourceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ApiId:
              description: Unique AWS AppSync GraphQL API identifier where this data source will be created.
              type: string
            Description:
              description: The description of the data source.
              type: string
            DynamoDBConfig:
              description: AWS Region and TableName for an Amazon DynamoDB table in your account.
              $ref: '#/components/schemas/DynamoDBConfig'
            ElasticsearchConfig:
              description: |-
                AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account.
                As of September 2021, Amazon Elasticsearch Service is Amazon OpenSearch Service. This property is deprecated. For new data sources, use OpenSearchServiceConfig to specify an OpenSearch Service data source.
              $ref: '#/components/schemas/ElasticsearchConfig'
            EventBridgeConfig:
              description: ARN for the EventBridge bus.
              $ref: '#/components/schemas/EventBridgeConfig'
            HttpConfig:
              description: Endpoints for an HTTP data source.
              $ref: '#/components/schemas/HttpConfig'
            LambdaConfig:
              description: An ARN of a Lambda function in valid ARN format. This can be the ARN of a Lambda function that exists in the current account or in another account.
              $ref: '#/components/schemas/LambdaConfig'
            Name:
              description: Friendly name for you to identify your AppSync data source after creation.
              type: string
            OpenSearchServiceConfig:
              description: AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account.
              $ref: '#/components/schemas/OpenSearchServiceConfig'
            RelationalDatabaseConfig:
              description: Relational Database configuration of the relational database data source.
              $ref: '#/components/schemas/RelationalDatabaseConfig'
            ServiceRoleArn:
              description: The AWS Identity and Access Management service role ARN for the data source. The system assumes this role when accessing the data source.
              type: string
            Type:
              description: The type of the data source.
              type: string
            DataSourceArn:
              description: The Amazon Resource Name (ARN) of the API key, such as arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/datasources/datasourcename.
              type: string
            MetricsConfig:
              description: ''
              type: string
              enum:
                - DISABLED
                - ENABLED
          x-stackQL-stringOnly: true
      x-title: CreateDataSourceRequest
      type: object
      required: []
    CreateDomainNameRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DomainName:
              type: string
              minLength: 1
              maxLength: 253
              pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
            Description:
              type: string
              minLength: 0
              maxLength: 255
            CertificateArn:
              type: string
              minLength: 3
              maxLength: 2048
              pattern: ^arn:[a-z-]*:acm:[a-z0-9-]*:\d{12}:certificate/[0-9A-Za-z_/-]*$
            AppSyncDomainName:
              type: string
            HostedZoneId:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateDomainNameRequest
      type: object
      required: []
    CreateDomainNameApiAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DomainName:
              type: string
              minLength: 1
              maxLength: 253
              pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
            ApiId:
              type: string
            ApiAssociationIdentifier:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateDomainNameApiAssociationRequest
      type: object
      required: []
    CreateFunctionConfigurationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            FunctionId:
              description: The unique identifier for the function generated by the service
              type: string
            FunctionArn:
              description: The ARN for the function generated by the service
              type: string
            ApiId:
              description: The AWS AppSync GraphQL API that you want to attach using this function.
              type: string
            Code:
              description: The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
              type: string
            CodeS3Location:
              description: The Amazon S3 endpoint (where the code is located??).
              type: string
            DataSourceName:
              description: The name of data source this function will attach.
              type: string
            Description:
              description: The function description.
              type: string
            FunctionVersion:
              description: The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
              type: string
            MaxBatchSize:
              description: The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
              type: integer
            Name:
              description: The name of the function.
              type: string
            RequestMappingTemplate:
              description: The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
              type: string
            RequestMappingTemplateS3Location:
              description: Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.
              type: string
            ResponseMappingTemplate:
              description: The Function response mapping template.
              type: string
            ResponseMappingTemplateS3Location:
              description: The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
              type: string
            Runtime:
              description: Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
              $ref: '#/components/schemas/AppSyncRuntime'
            SyncConfig:
              description: Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
              $ref: '#/components/schemas/SyncConfig'
          x-stackQL-stringOnly: true
      x-title: CreateFunctionConfigurationRequest
      type: object
      required: []
    CreateGraphQLApiRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AdditionalAuthenticationProviders:
              type: array
              description: A list of additional authentication providers for the GraphqlApi API.
              uniqueItems: true
              items:
                $ref: '#/components/schemas/AdditionalAuthenticationProvider'
            ApiId:
              description: Unique AWS AppSync GraphQL API identifier.
              type: string
            ApiType:
              description: The value that indicates whether the GraphQL API is a standard API (GRAPHQL) or merged API (MERGED).
              type: string
            Arn:
              description: The Amazon Resource Name (ARN) of the API key
              type: string
            AuthenticationType:
              description: Security configuration for your GraphQL API
              type: string
            EnhancedMetricsConfig:
              description: Enables and controls the enhanced metrics feature. Enhanced metrics emit granular data on API usage and performance such as AppSync request and error counts, latency, and cache hits/misses. All enhanced metric data is sent to your CloudWatch account, and you can configure the types of data that will be sent.
              $ref: '#/components/schemas/EnhancedMetricsConfig'
            EnvironmentVariables:
              description: A map containing the list of resources with their properties and environment variables.
              type: object
              additionalProperties: false
              x-patternProperties:
                ^[A-Za-z]+\w*$:
                  type: string
            GraphQLDns:
              description: The fully qualified domain name (FQDN) of the endpoint URL of your GraphQL API.
              type: string
            GraphQLEndpointArn:
              description: The GraphQL endpoint ARN.
              type: string
            GraphQLUrl:
              description: The Endpoint URL of your GraphQL API.
              type: string
            IntrospectionConfig:
              description: Sets the value of the GraphQL API to enable (ENABLED) or disable (DISABLED) introspection. If no value is provided, the introspection configuration will be set to ENABLED by default. This field will produce an error if the operation attempts to use the introspection feature while this field is disabled.
              type: string
            LambdaAuthorizerConfig:
              description: A LambdaAuthorizerConfig holds configuration on how to authorize AWS AppSync API access when using the AWS_LAMBDA authorizer mode. Be aware that an AWS AppSync API may have only one Lambda authorizer configured at a time.
              $ref: '#/components/schemas/LambdaAuthorizerConfig'
            LogConfig:
              description: The Amazon CloudWatch Logs configuration.
              $ref: '#/components/schemas/LogConfig'
            MergedApiExecutionRoleArn:
              description: 'The AWS Identity and Access Management service role ARN for a merged API. '
              type: string
            Name:
              description: The API name
              type: string
            OpenIDConnectConfig:
              description: The OpenID Connect configuration.
              $ref: '#/components/schemas/OpenIDConnectConfig'
            OwnerContact:
              description: The owner contact information for an API resource.
              type: string
            QueryDepthLimit:
              description: The maximum depth a query can have in a single request. Depth refers to the amount of nested levels allowed in the body of query.
              type: integer
            RealtimeDns:
              description: The fully qualified domain name (FQDN) of the real-time endpoint URL of your GraphQL API.
              type: string
            RealtimeUrl:
              description: The GraphQL API real-time endpoint URL.
              type: string
            ResolverCountLimit:
              description: The maximum number of resolvers that can be invoked in a single request.
              type: integer
            Tags:
              description: |+
                An arbitrary set of tags (key-value pairs) for this GraphQL API.

              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
            UserPoolConfig:
              description: |+
                Optional authorization configuration for using Amazon Cognito user pools with your GraphQL endpoint.

              $ref: '#/components/schemas/UserPoolConfig'
            Visibility:
              description: Sets the scope of the GraphQL API to public (GLOBAL) or private (PRIVATE). By default, the scope is set to Global if no value is provided.
              type: string
            XrayEnabled:
              description: |+
                A flag indicating whether to use AWS X-Ray tracing for this GraphqlApi.

              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreateGraphQLApiRequest
      type: object
      required: []
    CreateResolverRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ApiId:
              type: string
              description: The APSYlong GraphQL API to which you want to attach this resolver.
            CachingConfig:
              $ref: '#/components/schemas/CachingConfig'
              description: The caching configuration for the resolver.
            Code:
              type: string
              description: The ``resolver`` code that contains the request and response functions. When code is used, the ``runtime`` is required. The runtime value must be ``APPSYNC_JS``.
            CodeS3Location:
              type: string
              description: The Amazon S3 endpoint.
            DataSourceName:
              type: string
              description: The resolver data source name.
            FieldName:
              type: string
              description: The GraphQL field on a type that invokes the resolver.
            Kind:
              type: string
              description: |-
                The resolver type.
                  +   *UNIT*: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.
                  +   *PIPELINE*: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of ``Function`` objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.
            MaxBatchSize:
              type: integer
              description: The maximum number of resolver request inputs that will be sent to a single LAMlong function in a ``BatchInvoke`` operation.
            PipelineConfig:
              $ref: '#/components/schemas/PipelineConfig'
              description: Functions linked with the pipeline resolver.
            RequestMappingTemplate:
              type: string
              description: |-
                The request mapping template.
                 Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.
            RequestMappingTemplateS3Location:
              type: string
              description: The location of a request mapping template in an S3 bucket. Use this if you want to provision with a template file in S3 rather than embedding it in your CFNshort template.
            ResolverArn:
              type: string
              description: ''
            ResponseMappingTemplate:
              type: string
              description: The response mapping template.
            ResponseMappingTemplateS3Location:
              type: string
              description: The location of a response mapping template in an S3 bucket. Use this if you want to provision with a template file in S3 rather than embedding it in your CFNshort template.
            Runtime:
              $ref: '#/components/schemas/AppSyncRuntime'
              description: Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
            SyncConfig:
              $ref: '#/components/schemas/SyncConfig'
              description: The ``SyncConfig`` for a resolver attached to a versioned data source.
            TypeName:
              type: string
              description: The GraphQL type that invokes this resolver.
            MetricsConfig:
              type: string
              description: Enables or disables enhanced resolver metrics for specified resolvers. Note that ``MetricsConfig`` won't be used unless the ``resolverLevelMetricsBehavior`` value is set to ``PER_RESOLVER_METRICS``. If the ``resolverLevelMetricsBehavior`` is set to ``FULL_REQUEST_RESOLVER_METRICS`` instead, ``MetricsConfig`` will be ignored. However, you can still set its value.
              enum:
                - ENABLED
                - DISABLED
          x-stackQL-stringOnly: true
      x-title: CreateResolverRequest
      type: object
      required: []
    CreateSourceApiAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            SourceApiIdentifier:
              description: Identifier of the Source GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN
              type: string
            MergedApiIdentifier:
              description: Identifier of the Merged GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN
              type: string
            Description:
              description: Description of the SourceApiAssociation.
              type: string
            SourceApiAssociationConfig:
              description: Customized configuration for SourceApiAssociation.
              $ref: '#/components/schemas/SourceApiAssociationConfig'
            AssociationId:
              description: Id of the SourceApiAssociation.
              type: string
            AssociationArn:
              description: ARN of the SourceApiAssociation.
              type: string
            SourceApiId:
              description: GraphQLApiId of the source API in the association.
              type: string
            SourceApiArn:
              description: ARN of the source API in the association.
              type: string
              pattern: ^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
            MergedApiId:
              description: GraphQLApiId of the Merged API in the association.
              type: string
            MergedApiArn:
              description: ARN of the Merged API in the association.
              type: string
              pattern: ^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
            SourceApiAssociationStatus:
              description: Current status of SourceApiAssociation.
              type: string
              enum:
                - MERGE_SCHEDULED
                - MERGE_FAILED
                - MERGE_SUCCESS
                - MERGE_IN_PROGRESS
                - AUTO_MERGE_SCHEDULE_FAILED
                - DELETION_SCHEDULED
                - DELETION_IN_PROGRESS
                - DELETION_FAILED
            SourceApiAssociationStatusDetail:
              description: Current SourceApiAssociation status details.
              type: string
            LastSuccessfulMergeDate:
              description: Date of last schema successful merge.
              type: string
              format: date-time
          x-stackQL-stringOnly: true
      x-title: CreateSourceApiAssociationRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    apis:
      name: apis
      id: aws.appsync.apis
      x-cfn-schema-name: Api
      x-cfn-type-name: AWS::AppSync::Api
      x-identifiers:
        - ApiArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Api&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::Api"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::Api"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::Api"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/apis/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/apis/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/apis/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ApiArn') as api_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.OwnerContact') as owner_contact,
              JSON_EXTRACT(Properties, '$.Dns') as dns,
              JSON_EXTRACT(Properties, '$.EventConfig') as event_config,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::Api'
              AND data__Identifier = '<ApiArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.ApiArn') as api_arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.OwnerContact') as owner_contact,
                JSON_EXTRACT(detail.Properties, '$.Dns') as dns,
                JSON_EXTRACT(detail.Properties, '$.EventConfig') as event_config,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppSync::Api'
                AND detail.data__TypeName = 'AWS::AppSync::Api'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'ApiArn') as api_arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'OwnerContact') as owner_contact,
                  json_extract_path_text(Properties, 'Dns') as dns,
                  json_extract_path_text(Properties, 'EventConfig') as event_config,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::Api'
                  AND data__Identifier = '<ApiArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'ApiArn') as api_arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'OwnerContact') as owner_contact,
                    json_extract_path_text(detail.Properties, 'Dns') as dns,
                    json_extract_path_text(detail.Properties, 'EventConfig') as event_config,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppSync::Api'
                    AND detail.data__TypeName = 'AWS::AppSync::Api'
                    AND listing.region = 'us-east-1'
    apis_list_only:
      name: apis_list_only
      id: aws.appsync.apis_list_only
      x-cfn-schema-name: Api
      x-cfn-type-name: AWS::AppSync::Api
      x-identifiers:
        - ApiArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiArn') as api_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::Api'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiArn') as api_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::Api'
                AND region = 'us-east-1'
    api_tags:
      name: api_tags
      id: aws.appsync.api_tags
      x-cfn-schema-name: Api
      x-cfn-type-name: AWS::AppSync::Api
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(detail.Properties, '$.ApiArn') as api_arn,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.OwnerContact') as owner_contact,
              JSON_EXTRACT(detail.Properties, '$.Dns') as dns,
              JSON_EXTRACT(detail.Properties, '$.EventConfig') as event_config
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::AppSync::Api'
              AND detail.data__TypeName = 'AWS::AppSync::Api'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                json_extract_path_text(detail.Properties, 'ApiArn') as api_arn,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'OwnerContact') as owner_contact,
                json_extract_path_text(detail.Properties, 'Dns') as dns,
                json_extract_path_text(detail.Properties, 'EventConfig') as event_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::AppSync::Api'
                AND detail.data__TypeName = 'AWS::AppSync::Api'
                AND listing.region = 'us-east-1'
    channel_namespaces:
      name: channel_namespaces
      id: aws.appsync.channel_namespaces
      x-cfn-schema-name: ChannelNamespace
      x-cfn-type-name: AWS::AppSync::ChannelNamespace
      x-identifiers:
        - ChannelNamespaceArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ChannelNamespace&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::ChannelNamespace"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::ChannelNamespace"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::ChannelNamespace"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/channel_namespaces/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/channel_namespaces/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/channel_namespaces/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SubscribeAuthModes') as subscribe_auth_modes,
              JSON_EXTRACT(Properties, '$.PublishAuthModes') as publish_auth_modes,
              JSON_EXTRACT(Properties, '$.CodeHandlers') as code_handlers,
              JSON_EXTRACT(Properties, '$.CodeS3Location') as code_s3_location,
              JSON_EXTRACT(Properties, '$.ChannelNamespaceArn') as channel_namespace_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::ChannelNamespace'
              AND data__Identifier = '<ChannelNamespaceArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.SubscribeAuthModes') as subscribe_auth_modes,
                JSON_EXTRACT(detail.Properties, '$.PublishAuthModes') as publish_auth_modes,
                JSON_EXTRACT(detail.Properties, '$.CodeHandlers') as code_handlers,
                JSON_EXTRACT(detail.Properties, '$.CodeS3Location') as code_s3_location,
                JSON_EXTRACT(detail.Properties, '$.ChannelNamespaceArn') as channel_namespace_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppSync::ChannelNamespace'
                AND detail.data__TypeName = 'AWS::AppSync::ChannelNamespace'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'SubscribeAuthModes') as subscribe_auth_modes,
                  json_extract_path_text(Properties, 'PublishAuthModes') as publish_auth_modes,
                  json_extract_path_text(Properties, 'CodeHandlers') as code_handlers,
                  json_extract_path_text(Properties, 'CodeS3Location') as code_s3_location,
                  json_extract_path_text(Properties, 'ChannelNamespaceArn') as channel_namespace_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::ChannelNamespace'
                  AND data__Identifier = '<ChannelNamespaceArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'SubscribeAuthModes') as subscribe_auth_modes,
                    json_extract_path_text(detail.Properties, 'PublishAuthModes') as publish_auth_modes,
                    json_extract_path_text(detail.Properties, 'CodeHandlers') as code_handlers,
                    json_extract_path_text(detail.Properties, 'CodeS3Location') as code_s3_location,
                    json_extract_path_text(detail.Properties, 'ChannelNamespaceArn') as channel_namespace_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppSync::ChannelNamespace'
                    AND detail.data__TypeName = 'AWS::AppSync::ChannelNamespace'
                    AND listing.region = 'us-east-1'
    channel_namespaces_list_only:
      name: channel_namespaces_list_only
      id: aws.appsync.channel_namespaces_list_only
      x-cfn-schema-name: ChannelNamespace
      x-cfn-type-name: AWS::AppSync::ChannelNamespace
      x-identifiers:
        - ChannelNamespaceArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ChannelNamespaceArn') as channel_namespace_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::ChannelNamespace'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ChannelNamespaceArn') as channel_namespace_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::ChannelNamespace'
                AND region = 'us-east-1'
    channel_namespace_tags:
      name: channel_namespace_tags
      id: aws.appsync.channel_namespace_tags
      x-cfn-schema-name: ChannelNamespace
      x-cfn-type-name: AWS::AppSync::ChannelNamespace
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.SubscribeAuthModes') as subscribe_auth_modes,
              JSON_EXTRACT(detail.Properties, '$.PublishAuthModes') as publish_auth_modes,
              JSON_EXTRACT(detail.Properties, '$.CodeHandlers') as code_handlers,
              JSON_EXTRACT(detail.Properties, '$.CodeS3Location') as code_s3_location,
              JSON_EXTRACT(detail.Properties, '$.ChannelNamespaceArn') as channel_namespace_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::AppSync::ChannelNamespace'
              AND detail.data__TypeName = 'AWS::AppSync::ChannelNamespace'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'SubscribeAuthModes') as subscribe_auth_modes,
                json_extract_path_text(detail.Properties, 'PublishAuthModes') as publish_auth_modes,
                json_extract_path_text(detail.Properties, 'CodeHandlers') as code_handlers,
                json_extract_path_text(detail.Properties, 'CodeS3Location') as code_s3_location,
                json_extract_path_text(detail.Properties, 'ChannelNamespaceArn') as channel_namespace_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::AppSync::ChannelNamespace'
                AND detail.data__TypeName = 'AWS::AppSync::ChannelNamespace'
                AND listing.region = 'us-east-1'
    data_sources:
      name: data_sources
      id: aws.appsync.data_sources
      x-cfn-schema-name: DataSource
      x-cfn-type-name: AWS::AppSync::DataSource
      x-identifiers:
        - DataSourceArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DataSource&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DataSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DataSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DataSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/data_sources/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/data_sources/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/data_sources/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DynamoDBConfig') as dynamo_db_config,
              JSON_EXTRACT(Properties, '$.ElasticsearchConfig') as elasticsearch_config,
              JSON_EXTRACT(Properties, '$.EventBridgeConfig') as event_bridge_config,
              JSON_EXTRACT(Properties, '$.HttpConfig') as http_config,
              JSON_EXTRACT(Properties, '$.LambdaConfig') as lambda_config,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.OpenSearchServiceConfig') as open_search_service_config,
              JSON_EXTRACT(Properties, '$.RelationalDatabaseConfig') as relational_database_config,
              JSON_EXTRACT(Properties, '$.ServiceRoleArn') as service_role_arn,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.DataSourceArn') as data_source_arn,
              JSON_EXTRACT(Properties, '$.MetricsConfig') as metrics_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DataSource'
              AND data__Identifier = '<DataSourceArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.DynamoDBConfig') as dynamo_db_config,
                JSON_EXTRACT(detail.Properties, '$.ElasticsearchConfig') as elasticsearch_config,
                JSON_EXTRACT(detail.Properties, '$.EventBridgeConfig') as event_bridge_config,
                JSON_EXTRACT(detail.Properties, '$.HttpConfig') as http_config,
                JSON_EXTRACT(detail.Properties, '$.LambdaConfig') as lambda_config,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.OpenSearchServiceConfig') as open_search_service_config,
                JSON_EXTRACT(detail.Properties, '$.RelationalDatabaseConfig') as relational_database_config,
                JSON_EXTRACT(detail.Properties, '$.ServiceRoleArn') as service_role_arn,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.DataSourceArn') as data_source_arn,
                JSON_EXTRACT(detail.Properties, '$.MetricsConfig') as metrics_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppSync::DataSource'
                AND detail.data__TypeName = 'AWS::AppSync::DataSource'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'DynamoDBConfig') as dynamo_db_config,
                  json_extract_path_text(Properties, 'ElasticsearchConfig') as elasticsearch_config,
                  json_extract_path_text(Properties, 'EventBridgeConfig') as event_bridge_config,
                  json_extract_path_text(Properties, 'HttpConfig') as http_config,
                  json_extract_path_text(Properties, 'LambdaConfig') as lambda_config,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'OpenSearchServiceConfig') as open_search_service_config,
                  json_extract_path_text(Properties, 'RelationalDatabaseConfig') as relational_database_config,
                  json_extract_path_text(Properties, 'ServiceRoleArn') as service_role_arn,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'DataSourceArn') as data_source_arn,
                  json_extract_path_text(Properties, 'MetricsConfig') as metrics_config
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DataSource'
                  AND data__Identifier = '<DataSourceArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'DynamoDBConfig') as dynamo_db_config,
                    json_extract_path_text(detail.Properties, 'ElasticsearchConfig') as elasticsearch_config,
                    json_extract_path_text(detail.Properties, 'EventBridgeConfig') as event_bridge_config,
                    json_extract_path_text(detail.Properties, 'HttpConfig') as http_config,
                    json_extract_path_text(detail.Properties, 'LambdaConfig') as lambda_config,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'OpenSearchServiceConfig') as open_search_service_config,
                    json_extract_path_text(detail.Properties, 'RelationalDatabaseConfig') as relational_database_config,
                    json_extract_path_text(detail.Properties, 'ServiceRoleArn') as service_role_arn,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'DataSourceArn') as data_source_arn,
                    json_extract_path_text(detail.Properties, 'MetricsConfig') as metrics_config
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppSync::DataSource'
                    AND detail.data__TypeName = 'AWS::AppSync::DataSource'
                    AND listing.region = 'us-east-1'
    data_sources_list_only:
      name: data_sources_list_only
      id: aws.appsync.data_sources_list_only
      x-cfn-schema-name: DataSource
      x-cfn-type-name: AWS::AppSync::DataSource
      x-identifiers:
        - DataSourceArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DataSourceArn') as data_source_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::DataSource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DataSourceArn') as data_source_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::DataSource'
                AND region = 'us-east-1'
    domain_names:
      name: domain_names
      id: aws.appsync.domain_names
      x-cfn-schema-name: DomainName
      x-cfn-type-name: AWS::AppSync::DomainName
      x-identifiers:
        - DomainName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DomainName&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/domain_names/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/domain_names/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/domain_names/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.AppSyncDomainName') as app_sync_domain_name,
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainName'
              AND data__Identifier = '<DomainName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn,
                JSON_EXTRACT(detail.Properties, '$.AppSyncDomainName') as app_sync_domain_name,
                JSON_EXTRACT(detail.Properties, '$.HostedZoneId') as hosted_zone_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppSync::DomainName'
                AND detail.data__TypeName = 'AWS::AppSync::DomainName'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                  json_extract_path_text(Properties, 'AppSyncDomainName') as app_sync_domain_name,
                  json_extract_path_text(Properties, 'HostedZoneId') as hosted_zone_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainName'
                  AND data__Identifier = '<DomainName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn,
                    json_extract_path_text(detail.Properties, 'AppSyncDomainName') as app_sync_domain_name,
                    json_extract_path_text(detail.Properties, 'HostedZoneId') as hosted_zone_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppSync::DomainName'
                    AND detail.data__TypeName = 'AWS::AppSync::DomainName'
                    AND listing.region = 'us-east-1'
    domain_names_list_only:
      name: domain_names_list_only
      id: aws.appsync.domain_names_list_only
      x-cfn-schema-name: DomainName
      x-cfn-type-name: AWS::AppSync::DomainName
      x-identifiers:
        - DomainName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::DomainName'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainName') as domain_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::DomainName'
                AND region = 'us-east-1'
    domain_name_api_associations:
      name: domain_name_api_associations
      id: aws.appsync.domain_name_api_associations
      x-cfn-schema-name: DomainNameApiAssociation
      x-cfn-type-name: AWS::AppSync::DomainNameApiAssociation
      x-identifiers:
        - ApiAssociationIdentifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DomainNameApiAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainNameApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainNameApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::DomainNameApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/domain_name_api_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/domain_name_api_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/domain_name_api_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ApiAssociationIdentifier') as api_association_identifier
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainNameApiAssociation'
              AND data__Identifier = '<ApiAssociationIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'ApiAssociationIdentifier') as api_association_identifier
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainNameApiAssociation'
                AND data__Identifier = '<ApiAssociationIdentifier>'
                AND region = 'us-east-1'
    function_configurations:
      name: function_configurations
      id: aws.appsync.function_configurations
      x-cfn-schema-name: FunctionConfiguration
      x-cfn-type-name: AWS::AppSync::FunctionConfiguration
      x-identifiers:
        - FunctionArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__FunctionConfiguration&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::FunctionConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::FunctionConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::FunctionConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/function_configurations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/function_configurations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/function_configurations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FunctionId') as function_id,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Code') as code,
              JSON_EXTRACT(Properties, '$.CodeS3Location') as code_s3_location,
              JSON_EXTRACT(Properties, '$.DataSourceName') as data_source_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FunctionVersion') as function_version,
              JSON_EXTRACT(Properties, '$.MaxBatchSize') as max_batch_size,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplate') as request_mapping_template,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplate') as response_mapping_template,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.Runtime') as runtime,
              JSON_EXTRACT(Properties, '$.SyncConfig') as sync_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
              AND data__Identifier = '<FunctionArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.FunctionId') as function_id,
                JSON_EXTRACT(detail.Properties, '$.FunctionArn') as function_arn,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.Code') as code,
                JSON_EXTRACT(detail.Properties, '$.CodeS3Location') as code_s3_location,
                JSON_EXTRACT(detail.Properties, '$.DataSourceName') as data_source_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.FunctionVersion') as function_version,
                JSON_EXTRACT(detail.Properties, '$.MaxBatchSize') as max_batch_size,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.RequestMappingTemplate') as request_mapping_template,
                JSON_EXTRACT(detail.Properties, '$.RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
                JSON_EXTRACT(detail.Properties, '$.ResponseMappingTemplate') as response_mapping_template,
                JSON_EXTRACT(detail.Properties, '$.ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
                JSON_EXTRACT(detail.Properties, '$.Runtime') as runtime,
                JSON_EXTRACT(detail.Properties, '$.SyncConfig') as sync_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppSync::FunctionConfiguration'
                AND detail.data__TypeName = 'AWS::AppSync::FunctionConfiguration'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'FunctionId') as function_id,
                  json_extract_path_text(Properties, 'FunctionArn') as function_arn,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'Code') as code,
                  json_extract_path_text(Properties, 'CodeS3Location') as code_s3_location,
                  json_extract_path_text(Properties, 'DataSourceName') as data_source_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'FunctionVersion') as function_version,
                  json_extract_path_text(Properties, 'MaxBatchSize') as max_batch_size,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'RequestMappingTemplate') as request_mapping_template,
                  json_extract_path_text(Properties, 'RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
                  json_extract_path_text(Properties, 'ResponseMappingTemplate') as response_mapping_template,
                  json_extract_path_text(Properties, 'ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
                  json_extract_path_text(Properties, 'Runtime') as runtime,
                  json_extract_path_text(Properties, 'SyncConfig') as sync_config
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
                  AND data__Identifier = '<FunctionArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'FunctionId') as function_id,
                    json_extract_path_text(detail.Properties, 'FunctionArn') as function_arn,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'Code') as code,
                    json_extract_path_text(detail.Properties, 'CodeS3Location') as code_s3_location,
                    json_extract_path_text(detail.Properties, 'DataSourceName') as data_source_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'FunctionVersion') as function_version,
                    json_extract_path_text(detail.Properties, 'MaxBatchSize') as max_batch_size,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'RequestMappingTemplate') as request_mapping_template,
                    json_extract_path_text(detail.Properties, 'RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
                    json_extract_path_text(detail.Properties, 'ResponseMappingTemplate') as response_mapping_template,
                    json_extract_path_text(detail.Properties, 'ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
                    json_extract_path_text(detail.Properties, 'Runtime') as runtime,
                    json_extract_path_text(detail.Properties, 'SyncConfig') as sync_config
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppSync::FunctionConfiguration'
                    AND detail.data__TypeName = 'AWS::AppSync::FunctionConfiguration'
                    AND listing.region = 'us-east-1'
    function_configurations_list_only:
      name: function_configurations_list_only
      id: aws.appsync.function_configurations_list_only
      x-cfn-schema-name: FunctionConfiguration
      x-cfn-type-name: AWS::AppSync::FunctionConfiguration
      x-identifiers:
        - FunctionArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionArn') as function_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
                AND region = 'us-east-1'
    graphql_apis:
      name: graphql_apis
      id: aws.appsync.graphql_apis
      x-cfn-schema-name: GraphQLApi
      x-cfn-type-name: AWS::AppSync::GraphQLApi
      x-identifiers:
        - ApiId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__GraphQLApi&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::GraphQLApi"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::GraphQLApi"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::GraphQLApi"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/graphql_apis/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/graphql_apis/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/graphql_apis/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AdditionalAuthenticationProviders') as additional_authentication_providers,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ApiType') as api_type,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AuthenticationType') as authentication_type,
              JSON_EXTRACT(Properties, '$.EnhancedMetricsConfig') as enhanced_metrics_config,
              JSON_EXTRACT(Properties, '$.EnvironmentVariables') as environment_variables,
              JSON_EXTRACT(Properties, '$.GraphQLDns') as graph_ql_dns,
              JSON_EXTRACT(Properties, '$.GraphQLEndpointArn') as graph_ql_endpoint_arn,
              JSON_EXTRACT(Properties, '$.GraphQLUrl') as graph_ql_url,
              JSON_EXTRACT(Properties, '$.IntrospectionConfig') as introspection_config,
              JSON_EXTRACT(Properties, '$.LambdaAuthorizerConfig') as lambda_authorizer_config,
              JSON_EXTRACT(Properties, '$.LogConfig') as log_config,
              JSON_EXTRACT(Properties, '$.MergedApiExecutionRoleArn') as merged_api_execution_role_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.OpenIDConnectConfig') as open_id_connect_config,
              JSON_EXTRACT(Properties, '$.OwnerContact') as owner_contact,
              JSON_EXTRACT(Properties, '$.QueryDepthLimit') as query_depth_limit,
              JSON_EXTRACT(Properties, '$.RealtimeDns') as realtime_dns,
              JSON_EXTRACT(Properties, '$.RealtimeUrl') as realtime_url,
              JSON_EXTRACT(Properties, '$.ResolverCountLimit') as resolver_count_limit,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UserPoolConfig') as user_pool_config,
              JSON_EXTRACT(Properties, '$.Visibility') as visibility,
              JSON_EXTRACT(Properties, '$.XrayEnabled') as xray_enabled
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::GraphQLApi'
              AND data__Identifier = '<ApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AdditionalAuthenticationProviders') as additional_authentication_providers,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.ApiType') as api_type,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.AuthenticationType') as authentication_type,
                JSON_EXTRACT(detail.Properties, '$.EnhancedMetricsConfig') as enhanced_metrics_config,
                JSON_EXTRACT(detail.Properties, '$.EnvironmentVariables') as environment_variables,
                JSON_EXTRACT(detail.Properties, '$.GraphQLDns') as graph_ql_dns,
                JSON_EXTRACT(detail.Properties, '$.GraphQLEndpointArn') as graph_ql_endpoint_arn,
                JSON_EXTRACT(detail.Properties, '$.GraphQLUrl') as graph_ql_url,
                JSON_EXTRACT(detail.Properties, '$.IntrospectionConfig') as introspection_config,
                JSON_EXTRACT(detail.Properties, '$.LambdaAuthorizerConfig') as lambda_authorizer_config,
                JSON_EXTRACT(detail.Properties, '$.LogConfig') as log_config,
                JSON_EXTRACT(detail.Properties, '$.MergedApiExecutionRoleArn') as merged_api_execution_role_arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.OpenIDConnectConfig') as open_id_connect_config,
                JSON_EXTRACT(detail.Properties, '$.OwnerContact') as owner_contact,
                JSON_EXTRACT(detail.Properties, '$.QueryDepthLimit') as query_depth_limit,
                JSON_EXTRACT(detail.Properties, '$.RealtimeDns') as realtime_dns,
                JSON_EXTRACT(detail.Properties, '$.RealtimeUrl') as realtime_url,
                JSON_EXTRACT(detail.Properties, '$.ResolverCountLimit') as resolver_count_limit,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.UserPoolConfig') as user_pool_config,
                JSON_EXTRACT(detail.Properties, '$.Visibility') as visibility,
                JSON_EXTRACT(detail.Properties, '$.XrayEnabled') as xray_enabled
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppSync::GraphQLApi'
                AND detail.data__TypeName = 'AWS::AppSync::GraphQLApi'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AdditionalAuthenticationProviders') as additional_authentication_providers,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'ApiType') as api_type,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'AuthenticationType') as authentication_type,
                  json_extract_path_text(Properties, 'EnhancedMetricsConfig') as enhanced_metrics_config,
                  json_extract_path_text(Properties, 'EnvironmentVariables') as environment_variables,
                  json_extract_path_text(Properties, 'GraphQLDns') as graph_ql_dns,
                  json_extract_path_text(Properties, 'GraphQLEndpointArn') as graph_ql_endpoint_arn,
                  json_extract_path_text(Properties, 'GraphQLUrl') as graph_ql_url,
                  json_extract_path_text(Properties, 'IntrospectionConfig') as introspection_config,
                  json_extract_path_text(Properties, 'LambdaAuthorizerConfig') as lambda_authorizer_config,
                  json_extract_path_text(Properties, 'LogConfig') as log_config,
                  json_extract_path_text(Properties, 'MergedApiExecutionRoleArn') as merged_api_execution_role_arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'OpenIDConnectConfig') as open_id_connect_config,
                  json_extract_path_text(Properties, 'OwnerContact') as owner_contact,
                  json_extract_path_text(Properties, 'QueryDepthLimit') as query_depth_limit,
                  json_extract_path_text(Properties, 'RealtimeDns') as realtime_dns,
                  json_extract_path_text(Properties, 'RealtimeUrl') as realtime_url,
                  json_extract_path_text(Properties, 'ResolverCountLimit') as resolver_count_limit,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'UserPoolConfig') as user_pool_config,
                  json_extract_path_text(Properties, 'Visibility') as visibility,
                  json_extract_path_text(Properties, 'XrayEnabled') as xray_enabled
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::GraphQLApi'
                  AND data__Identifier = '<ApiId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AdditionalAuthenticationProviders') as additional_authentication_providers,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'ApiType') as api_type,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'AuthenticationType') as authentication_type,
                    json_extract_path_text(detail.Properties, 'EnhancedMetricsConfig') as enhanced_metrics_config,
                    json_extract_path_text(detail.Properties, 'EnvironmentVariables') as environment_variables,
                    json_extract_path_text(detail.Properties, 'GraphQLDns') as graph_ql_dns,
                    json_extract_path_text(detail.Properties, 'GraphQLEndpointArn') as graph_ql_endpoint_arn,
                    json_extract_path_text(detail.Properties, 'GraphQLUrl') as graph_ql_url,
                    json_extract_path_text(detail.Properties, 'IntrospectionConfig') as introspection_config,
                    json_extract_path_text(detail.Properties, 'LambdaAuthorizerConfig') as lambda_authorizer_config,
                    json_extract_path_text(detail.Properties, 'LogConfig') as log_config,
                    json_extract_path_text(detail.Properties, 'MergedApiExecutionRoleArn') as merged_api_execution_role_arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'OpenIDConnectConfig') as open_id_connect_config,
                    json_extract_path_text(detail.Properties, 'OwnerContact') as owner_contact,
                    json_extract_path_text(detail.Properties, 'QueryDepthLimit') as query_depth_limit,
                    json_extract_path_text(detail.Properties, 'RealtimeDns') as realtime_dns,
                    json_extract_path_text(detail.Properties, 'RealtimeUrl') as realtime_url,
                    json_extract_path_text(detail.Properties, 'ResolverCountLimit') as resolver_count_limit,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'UserPoolConfig') as user_pool_config,
                    json_extract_path_text(detail.Properties, 'Visibility') as visibility,
                    json_extract_path_text(detail.Properties, 'XrayEnabled') as xray_enabled
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppSync::GraphQLApi'
                    AND detail.data__TypeName = 'AWS::AppSync::GraphQLApi'
                    AND listing.region = 'us-east-1'
    graphql_apis_list_only:
      name: graphql_apis_list_only
      id: aws.appsync.graphql_apis_list_only
      x-cfn-schema-name: GraphQLApi
      x-cfn-type-name: AWS::AppSync::GraphQLApi
      x-identifiers:
        - ApiId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::GraphQLApi'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::GraphQLApi'
                AND region = 'us-east-1'
    graphql_api_tags:
      name: graphql_api_tags
      id: aws.appsync.graphql_api_tags
      x-cfn-schema-name: GraphQLApi
      x-cfn-type-name: AWS::AppSync::GraphQLApi
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AdditionalAuthenticationProviders') as additional_authentication_providers,
              JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(detail.Properties, '$.ApiType') as api_type,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.AuthenticationType') as authentication_type,
              JSON_EXTRACT(detail.Properties, '$.EnhancedMetricsConfig') as enhanced_metrics_config,
              JSON_EXTRACT(detail.Properties, '$.EnvironmentVariables') as environment_variables,
              JSON_EXTRACT(detail.Properties, '$.GraphQLDns') as graph_ql_dns,
              JSON_EXTRACT(detail.Properties, '$.GraphQLEndpointArn') as graph_ql_endpoint_arn,
              JSON_EXTRACT(detail.Properties, '$.GraphQLUrl') as graph_ql_url,
              JSON_EXTRACT(detail.Properties, '$.IntrospectionConfig') as introspection_config,
              JSON_EXTRACT(detail.Properties, '$.LambdaAuthorizerConfig') as lambda_authorizer_config,
              JSON_EXTRACT(detail.Properties, '$.LogConfig') as log_config,
              JSON_EXTRACT(detail.Properties, '$.MergedApiExecutionRoleArn') as merged_api_execution_role_arn,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.OpenIDConnectConfig') as open_id_connect_config,
              JSON_EXTRACT(detail.Properties, '$.OwnerContact') as owner_contact,
              JSON_EXTRACT(detail.Properties, '$.QueryDepthLimit') as query_depth_limit,
              JSON_EXTRACT(detail.Properties, '$.RealtimeDns') as realtime_dns,
              JSON_EXTRACT(detail.Properties, '$.RealtimeUrl') as realtime_url,
              JSON_EXTRACT(detail.Properties, '$.ResolverCountLimit') as resolver_count_limit,
              JSON_EXTRACT(detail.Properties, '$.UserPoolConfig') as user_pool_config,
              JSON_EXTRACT(detail.Properties, '$.Visibility') as visibility,
              JSON_EXTRACT(detail.Properties, '$.XrayEnabled') as xray_enabled
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::AppSync::GraphQLApi'
              AND detail.data__TypeName = 'AWS::AppSync::GraphQLApi'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AdditionalAuthenticationProviders') as additional_authentication_providers,
                json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                json_extract_path_text(detail.Properties, 'ApiType') as api_type,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'AuthenticationType') as authentication_type,
                json_extract_path_text(detail.Properties, 'EnhancedMetricsConfig') as enhanced_metrics_config,
                json_extract_path_text(detail.Properties, 'EnvironmentVariables') as environment_variables,
                json_extract_path_text(detail.Properties, 'GraphQLDns') as graph_ql_dns,
                json_extract_path_text(detail.Properties, 'GraphQLEndpointArn') as graph_ql_endpoint_arn,
                json_extract_path_text(detail.Properties, 'GraphQLUrl') as graph_ql_url,
                json_extract_path_text(detail.Properties, 'IntrospectionConfig') as introspection_config,
                json_extract_path_text(detail.Properties, 'LambdaAuthorizerConfig') as lambda_authorizer_config,
                json_extract_path_text(detail.Properties, 'LogConfig') as log_config,
                json_extract_path_text(detail.Properties, 'MergedApiExecutionRoleArn') as merged_api_execution_role_arn,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'OpenIDConnectConfig') as open_id_connect_config,
                json_extract_path_text(detail.Properties, 'OwnerContact') as owner_contact,
                json_extract_path_text(detail.Properties, 'QueryDepthLimit') as query_depth_limit,
                json_extract_path_text(detail.Properties, 'RealtimeDns') as realtime_dns,
                json_extract_path_text(detail.Properties, 'RealtimeUrl') as realtime_url,
                json_extract_path_text(detail.Properties, 'ResolverCountLimit') as resolver_count_limit,
                json_extract_path_text(detail.Properties, 'UserPoolConfig') as user_pool_config,
                json_extract_path_text(detail.Properties, 'Visibility') as visibility,
                json_extract_path_text(detail.Properties, 'XrayEnabled') as xray_enabled
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::AppSync::GraphQLApi'
                AND detail.data__TypeName = 'AWS::AppSync::GraphQLApi'
                AND listing.region = 'us-east-1'
    resolvers:
      name: resolvers
      id: aws.appsync.resolvers
      x-cfn-schema-name: Resolver
      x-cfn-type-name: AWS::AppSync::Resolver
      x-identifiers:
        - ResolverArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Resolver&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::Resolver"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::Resolver"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::Resolver"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resolvers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resolvers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/resolvers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.CachingConfig') as caching_config,
              JSON_EXTRACT(Properties, '$.Code') as code,
              JSON_EXTRACT(Properties, '$.CodeS3Location') as code_s3_location,
              JSON_EXTRACT(Properties, '$.DataSourceName') as data_source_name,
              JSON_EXTRACT(Properties, '$.FieldName') as field_name,
              JSON_EXTRACT(Properties, '$.Kind') as kind,
              JSON_EXTRACT(Properties, '$.MaxBatchSize') as max_batch_size,
              JSON_EXTRACT(Properties, '$.PipelineConfig') as pipeline_config,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplate') as request_mapping_template,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.ResolverArn') as resolver_arn,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplate') as response_mapping_template,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.Runtime') as runtime,
              JSON_EXTRACT(Properties, '$.SyncConfig') as sync_config,
              JSON_EXTRACT(Properties, '$.TypeName') as type_name,
              JSON_EXTRACT(Properties, '$.MetricsConfig') as metrics_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::Resolver'
              AND data__Identifier = '<ResolverArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.CachingConfig') as caching_config,
                JSON_EXTRACT(detail.Properties, '$.Code') as code,
                JSON_EXTRACT(detail.Properties, '$.CodeS3Location') as code_s3_location,
                JSON_EXTRACT(detail.Properties, '$.DataSourceName') as data_source_name,
                JSON_EXTRACT(detail.Properties, '$.FieldName') as field_name,
                JSON_EXTRACT(detail.Properties, '$.Kind') as kind,
                JSON_EXTRACT(detail.Properties, '$.MaxBatchSize') as max_batch_size,
                JSON_EXTRACT(detail.Properties, '$.PipelineConfig') as pipeline_config,
                JSON_EXTRACT(detail.Properties, '$.RequestMappingTemplate') as request_mapping_template,
                JSON_EXTRACT(detail.Properties, '$.RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
                JSON_EXTRACT(detail.Properties, '$.ResolverArn') as resolver_arn,
                JSON_EXTRACT(detail.Properties, '$.ResponseMappingTemplate') as response_mapping_template,
                JSON_EXTRACT(detail.Properties, '$.ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
                JSON_EXTRACT(detail.Properties, '$.Runtime') as runtime,
                JSON_EXTRACT(detail.Properties, '$.SyncConfig') as sync_config,
                JSON_EXTRACT(detail.Properties, '$.TypeName') as type_name,
                JSON_EXTRACT(detail.Properties, '$.MetricsConfig') as metrics_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppSync::Resolver'
                AND detail.data__TypeName = 'AWS::AppSync::Resolver'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'CachingConfig') as caching_config,
                  json_extract_path_text(Properties, 'Code') as code,
                  json_extract_path_text(Properties, 'CodeS3Location') as code_s3_location,
                  json_extract_path_text(Properties, 'DataSourceName') as data_source_name,
                  json_extract_path_text(Properties, 'FieldName') as field_name,
                  json_extract_path_text(Properties, 'Kind') as kind,
                  json_extract_path_text(Properties, 'MaxBatchSize') as max_batch_size,
                  json_extract_path_text(Properties, 'PipelineConfig') as pipeline_config,
                  json_extract_path_text(Properties, 'RequestMappingTemplate') as request_mapping_template,
                  json_extract_path_text(Properties, 'RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
                  json_extract_path_text(Properties, 'ResolverArn') as resolver_arn,
                  json_extract_path_text(Properties, 'ResponseMappingTemplate') as response_mapping_template,
                  json_extract_path_text(Properties, 'ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
                  json_extract_path_text(Properties, 'Runtime') as runtime,
                  json_extract_path_text(Properties, 'SyncConfig') as sync_config,
                  json_extract_path_text(Properties, 'TypeName') as type_name,
                  json_extract_path_text(Properties, 'MetricsConfig') as metrics_config
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::Resolver'
                  AND data__Identifier = '<ResolverArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'CachingConfig') as caching_config,
                    json_extract_path_text(detail.Properties, 'Code') as code,
                    json_extract_path_text(detail.Properties, 'CodeS3Location') as code_s3_location,
                    json_extract_path_text(detail.Properties, 'DataSourceName') as data_source_name,
                    json_extract_path_text(detail.Properties, 'FieldName') as field_name,
                    json_extract_path_text(detail.Properties, 'Kind') as kind,
                    json_extract_path_text(detail.Properties, 'MaxBatchSize') as max_batch_size,
                    json_extract_path_text(detail.Properties, 'PipelineConfig') as pipeline_config,
                    json_extract_path_text(detail.Properties, 'RequestMappingTemplate') as request_mapping_template,
                    json_extract_path_text(detail.Properties, 'RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
                    json_extract_path_text(detail.Properties, 'ResolverArn') as resolver_arn,
                    json_extract_path_text(detail.Properties, 'ResponseMappingTemplate') as response_mapping_template,
                    json_extract_path_text(detail.Properties, 'ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
                    json_extract_path_text(detail.Properties, 'Runtime') as runtime,
                    json_extract_path_text(detail.Properties, 'SyncConfig') as sync_config,
                    json_extract_path_text(detail.Properties, 'TypeName') as type_name,
                    json_extract_path_text(detail.Properties, 'MetricsConfig') as metrics_config
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppSync::Resolver'
                    AND detail.data__TypeName = 'AWS::AppSync::Resolver'
                    AND listing.region = 'us-east-1'
    resolvers_list_only:
      name: resolvers_list_only
      id: aws.appsync.resolvers_list_only
      x-cfn-schema-name: Resolver
      x-cfn-type-name: AWS::AppSync::Resolver
      x-identifiers:
        - ResolverArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResolverArn') as resolver_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::Resolver'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ResolverArn') as resolver_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::Resolver'
                AND region = 'us-east-1'
    source_api_associations:
      name: source_api_associations
      id: aws.appsync.source_api_associations
      x-cfn-schema-name: SourceApiAssociation
      x-cfn-type-name: AWS::AppSync::SourceApiAssociation
      x-identifiers:
        - AssociationArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SourceApiAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::SourceApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::SourceApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppSync::SourceApiAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/source_api_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/source_api_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/source_api_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SourceApiIdentifier') as source_api_identifier,
              JSON_EXTRACT(Properties, '$.MergedApiIdentifier') as merged_api_identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SourceApiAssociationConfig') as source_api_association_config,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id,
              JSON_EXTRACT(Properties, '$.AssociationArn') as association_arn,
              JSON_EXTRACT(Properties, '$.SourceApiId') as source_api_id,
              JSON_EXTRACT(Properties, '$.SourceApiArn') as source_api_arn,
              JSON_EXTRACT(Properties, '$.MergedApiId') as merged_api_id,
              JSON_EXTRACT(Properties, '$.MergedApiArn') as merged_api_arn,
              JSON_EXTRACT(Properties, '$.SourceApiAssociationStatus') as source_api_association_status,
              JSON_EXTRACT(Properties, '$.SourceApiAssociationStatusDetail') as source_api_association_status_detail,
              JSON_EXTRACT(Properties, '$.LastSuccessfulMergeDate') as last_successful_merge_date
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
              AND data__Identifier = '<AssociationArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.SourceApiIdentifier') as source_api_identifier,
                JSON_EXTRACT(detail.Properties, '$.MergedApiIdentifier') as merged_api_identifier,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.SourceApiAssociationConfig') as source_api_association_config,
                JSON_EXTRACT(detail.Properties, '$.AssociationId') as association_id,
                JSON_EXTRACT(detail.Properties, '$.AssociationArn') as association_arn,
                JSON_EXTRACT(detail.Properties, '$.SourceApiId') as source_api_id,
                JSON_EXTRACT(detail.Properties, '$.SourceApiArn') as source_api_arn,
                JSON_EXTRACT(detail.Properties, '$.MergedApiId') as merged_api_id,
                JSON_EXTRACT(detail.Properties, '$.MergedApiArn') as merged_api_arn,
                JSON_EXTRACT(detail.Properties, '$.SourceApiAssociationStatus') as source_api_association_status,
                JSON_EXTRACT(detail.Properties, '$.SourceApiAssociationStatusDetail') as source_api_association_status_detail,
                JSON_EXTRACT(detail.Properties, '$.LastSuccessfulMergeDate') as last_successful_merge_date
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppSync::SourceApiAssociation'
                AND detail.data__TypeName = 'AWS::AppSync::SourceApiAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'SourceApiIdentifier') as source_api_identifier,
                  json_extract_path_text(Properties, 'MergedApiIdentifier') as merged_api_identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'SourceApiAssociationConfig') as source_api_association_config,
                  json_extract_path_text(Properties, 'AssociationId') as association_id,
                  json_extract_path_text(Properties, 'AssociationArn') as association_arn,
                  json_extract_path_text(Properties, 'SourceApiId') as source_api_id,
                  json_extract_path_text(Properties, 'SourceApiArn') as source_api_arn,
                  json_extract_path_text(Properties, 'MergedApiId') as merged_api_id,
                  json_extract_path_text(Properties, 'MergedApiArn') as merged_api_arn,
                  json_extract_path_text(Properties, 'SourceApiAssociationStatus') as source_api_association_status,
                  json_extract_path_text(Properties, 'SourceApiAssociationStatusDetail') as source_api_association_status_detail,
                  json_extract_path_text(Properties, 'LastSuccessfulMergeDate') as last_successful_merge_date
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
                  AND data__Identifier = '<AssociationArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'SourceApiIdentifier') as source_api_identifier,
                    json_extract_path_text(detail.Properties, 'MergedApiIdentifier') as merged_api_identifier,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'SourceApiAssociationConfig') as source_api_association_config,
                    json_extract_path_text(detail.Properties, 'AssociationId') as association_id,
                    json_extract_path_text(detail.Properties, 'AssociationArn') as association_arn,
                    json_extract_path_text(detail.Properties, 'SourceApiId') as source_api_id,
                    json_extract_path_text(detail.Properties, 'SourceApiArn') as source_api_arn,
                    json_extract_path_text(detail.Properties, 'MergedApiId') as merged_api_id,
                    json_extract_path_text(detail.Properties, 'MergedApiArn') as merged_api_arn,
                    json_extract_path_text(detail.Properties, 'SourceApiAssociationStatus') as source_api_association_status,
                    json_extract_path_text(detail.Properties, 'SourceApiAssociationStatusDetail') as source_api_association_status_detail,
                    json_extract_path_text(detail.Properties, 'LastSuccessfulMergeDate') as last_successful_merge_date
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppSync::SourceApiAssociation'
                    AND detail.data__TypeName = 'AWS::AppSync::SourceApiAssociation'
                    AND listing.region = 'us-east-1'
    source_api_associations_list_only:
      name: source_api_associations_list_only
      id: aws.appsync.source_api_associations_list_only
      x-cfn-schema-name: SourceApiAssociation
      x-cfn-type-name: AWS::AppSync::SourceApiAssociation
      x-identifiers:
        - AssociationArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssociationArn') as association_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AssociationArn') as association_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Api&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateApi
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateApiRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ChannelNamespace&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateChannelNamespace
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateChannelNamespaceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DataSource&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDataSource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDataSourceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DomainName&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDomainName
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDomainNameRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DomainNameApiAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDomainNameApiAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDomainNameApiAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__FunctionConfiguration&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateFunctionConfiguration
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateFunctionConfigurationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__GraphQLApi&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateGraphQLApi
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateGraphQLApiRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Resolver&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResolver
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResolverRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SourceApiAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSourceApiAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSourceApiAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
