openapi: 3.0.0
info:
  title: AppConfig
  version: 1.0.0
paths: {}
components:
  schemas:
    Tags:
      description: Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
      additionalProperties: false
      type: object
      properties:
        Value:
          minLength: 0
          description: The tag value can be up to 256 characters.
          type: string
          maxLength: 256
        Key:
          minLength: 1
          pattern: ^(?!aws:.)[a-zA-Z0-9 +=._:/-]*$
          description: The key-value string map. The tag key can be up to 128 characters and must not start with aws:.
          type: string
          maxLength: 128
    Application:
      type: object
      properties:
        Description:
          type: string
          description: A description of the application.
        ApplicationId:
          type: string
          description: The application Id
        Tags:
          type: array
          description: Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tags'
          x-insertionOrder: false
        Name:
          type: string
          description: A name for the application.
      required:
        - Name
      x-stackql-resource-name: application
      description: Resource Type definition for AWS::AppConfig::Application
      x-type-name: AWS::AppConfig::Application
      x-stackql-primary-identifier:
        - ApplicationId
      x-read-only-properties:
        - ApplicationId
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - appconfig:CreateApplication
          - appconfig:GetApplication
          - appconfig:ListTagsForResource
          - appconfig:TagResource
        read:
          - appconfig:GetApplication
          - appconfig:ListTagsForResource
        update:
          - appconfig:UpdateApplication
          - appconfig:TagResource
          - appconfig:UntagResource
        delete:
          - appconfig:GetApplication
          - appconfig:DeleteApplication
        list:
          - appconfig:ListApplications
    Validators:
      description: A list of methods for validating the configuration.
      additionalProperties: false
      type: object
      properties:
        Type:
          description: AWS AppConfig supports validators of type JSON_SCHEMA and LAMBDA.
          type: string
        Content:
          minLength: 0
          description: Either the JSON Schema content or the Amazon Resource Name (ARN) of an Lambda function.
          type: string
          maxLength: 32768
    ConfigurationProfile:
      type: object
      properties:
        ConfigurationProfileId:
          description: The configuration profile ID
          type: string
        LocationUri:
          minLength: 1
          description: A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object.
          type: string
          maxLength: 2048
        Type:
          pattern: ^[a-zA-Z\.]+
          description: 'The type of configurations contained in the profile. When calling this API, enter one of the following values for Type: AWS.AppConfig.FeatureFlags, AWS.Freeform'
          type: string
        KmsKeyIdentifier:
          pattern: ^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}|alias/[a-zA-Z0-9/_-]{1,250}|arn:aws[a-zA-Z-]*:kms:[a-z]{2}(-gov|-iso(b?))?-[a-z]+-\d{1}:\d{12}:(key/[0-9a-f-]{36}|alias/[a-zA-Z0-9/_-]{1,250})$
          description: The AWS Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or updated.
          type: string
        Description:
          minLength: 0
          description: A description of the configuration profile.
          type: string
          maxLength: 1024
        KmsKeyArn:
          minLength: 20
          pattern: arn:(aws[a-zA-Z-]*)?:[a-z]+:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:[a-zA-Z0-9-_/:.]+
          description: The Amazon Resource Name of the AWS Key Management Service key to encrypt new configuration data versions in the AWS AppConfig hosted configuration store. This attribute is only used for hosted configuration types. To encrypt data managed in other configuration stores, see the documentation for how to specify an AWS KMS key for that particular service.
          type: string
          maxLength: 2048
        Validators:
          maxItems: 2
          uniqueItems: false
          description: A list of methods for validating the configuration.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Validators'
        RetrievalRoleArn:
          minLength: 20
          pattern: ^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[/].*)$
          description: The ARN of an IAM role with permission to access the configuration at the specified LocationUri.
          type: string
          maxLength: 2048
        ApplicationId:
          pattern: '[a-z0-9]{4,7}'
          description: The application ID.
          type: string
        Tags:
          uniqueItems: false
          description: Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tags'
        Name:
          minLength: 1
          description: A name for the configuration profile.
          type: string
          maxLength: 128
      required:
        - LocationUri
        - ApplicationId
        - Name
      x-stackql-resource-name: configuration_profile
      description: An example resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::AppConfig::ConfigurationProfile
      x-stackql-primary-identifier:
        - ApplicationId
        - ConfigurationProfileId
      x-create-only-properties:
        - LocationUri
        - Type
        - ApplicationId
      x-read-only-properties:
        - ConfigurationProfileId
        - KmsKeyArn
      x-required-properties:
        - LocationUri
        - ApplicationId
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - appconfig:GetConfigurationProfile
          - appconfig:ListTagsForResource
        create:
          - appconfig:CreateConfigurationProfile
          - appconfig:GetConfigurationProfile
          - appconfig:TagResource
          - appconfig:ListTagsForResource
          - iam:PassRole
        update:
          - appconfig:UpdateConfigurationProfile
          - appconfig:TagResource
          - appconfig:UntagResource
          - iam:PassRole
        list:
          - appconfig:ListConfigurationProfiles
        delete:
          - appconfig:DeleteConfigurationProfile
    Monitor:
      description: Amazon CloudWatch alarm to monitor during the deployment process.
      additionalProperties: false
      type: object
      properties:
        AlarmArn:
          x-relationshipRef:
            typeName: AWS::CloudWatch::Alarm
            propertyPath: /properties/Arn
          minLength: 1
          description: Amazon Resource Name (ARN) of the Amazon CloudWatch alarm.
          type: string
          maxLength: 2048
        AlarmRoleArn:
          x-relationshipRef:
            typeName: AWS::IAM::Role
            propertyPath: /properties/Arn
          minLength: 20
          pattern: ^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[/].*)$
          description: ARN of an AWS Identity and Access Management (IAM) role for AWS AppConfig to monitor AlarmArn.
          type: string
          maxLength: 2048
      required:
        - AlarmArn
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Environment:
      type: object
      properties:
        EnvironmentId:
          pattern: '[a-z0-9]{4,7}'
          description: The environment ID.
          type: string
        Description:
          minLength: 0
          description: A description of the environment.
          type: string
          maxLength: 1024
        Monitors:
          minItems: 0
          maxItems: 5
          description: Amazon CloudWatch alarms to monitor during the deployment process.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Monitor'
        ApplicationId:
          pattern: '[a-z0-9]{4,7}'
          description: The application ID.
          type: string
        Tags:
          uniqueItems: true
          description: Metadata to assign to the environment. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          minLength: 1
          description: A name for the environment.
          type: string
          maxLength: 64
      required:
        - Name
        - ApplicationId
      x-stackql-resource-name: environment
      description: Resource Type definition for AWS::AppConfig::Environment
      x-type-name: AWS::AppConfig::Environment
      x-stackql-primary-identifier:
        - ApplicationId
        - EnvironmentId
      x-create-only-properties:
        - ApplicationId
      x-read-only-properties:
        - EnvironmentId
      x-required-properties:
        - Name
        - ApplicationId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - appconfig:GetEnvironment
          - appconfig:ListTagsForResource
        create:
          - appconfig:CreateEnvironment
          - appconfig:GetEnvironment
          - appconfig:ListTagsForResource
          - appconfig:TagResource
          - iam:PassRole
        update:
          - appconfig:UpdateEnvironment
          - appconfig:TagResource
          - appconfig:UntagResource
          - iam:PassRole
        list:
          - appconfig:ListEnvironments
        delete:
          - appconfig:GetEnvironment
          - appconfig:DeleteEnvironment
    Actions:
      description: A list of actions for an extension to take at a specific action point.
      uniqueItems: true
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/Action'
    Action:
      description: An action for an extension to take at a specific action point.
      type: object
      properties:
        Name:
          type: string
          description: The name of the extension action.
          minLength: 1
          maxLength: 128
        Description:
          type: string
          description: The description of the extension Action.
          minLength: 0
          maxLength: 1024
        Uri:
          type: string
          description: The URI of the extension action.
          minLength: 1
          maxLength: 2048
        RoleArn:
          type: string
          description: The ARN of the role for invoking the extension action.
          minLength: 20
          maxLength: 2048
      required:
        - Name
        - Uri
      additionalProperties: false
    Parameter:
      description: A parameter for the extension to send to a specific action.
      type: object
      properties:
        Description:
          type: string
          description: The description of the extension Parameter.
          minLength: 0
          maxLength: 1024
        Dynamic:
          type: boolean
        Required:
          type: boolean
      required:
        - Required
      additionalProperties: false
    Extension:
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
        VersionNumber:
          type: integer
        Name:
          description: Name of the extension.
          type: string
        Description:
          description: Description of the extension.
          type: string
        Actions:
          type: object
          x-patternProperties:
            ^.+$:
              $ref: '#/components/schemas/Actions'
          additionalProperties: false
        Parameters:
          type: object
          x-patternProperties:
            ^.+$:
              $ref: '#/components/schemas/Parameter'
          additionalProperties: false
        LatestVersionNumber:
          type: integer
        Tags:
          description: An array of key-value tags to apply to this resource.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
        - Actions
      x-stackql-resource-name: extension
      description: Resource Type definition for AWS::AppConfig::Extension
      x-type-name: AWS::AppConfig::Extension
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Name
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-write-only-properties:
        - LatestVersionNumber
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-read-only-properties:
        - Id
        - Arn
        - VersionNumber
      x-required-properties:
        - Name
        - Actions
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - appconfig:CreateExtension
          - appconfig:TagResource
          - iam:PassRole
        read:
          - appconfig:GetExtension
        update:
          - appconfig:UpdateExtension
          - appconfig:TagResource
          - appconfig:UntagResource
        delete:
          - appconfig:DeleteExtension
          - appconfig:UntagResource
        list:
          - appconfig:ListExtensions
    ExtensionAssociation:
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
        ExtensionArn:
          type: string
        ResourceArn:
          type: string
        ExtensionIdentifier:
          type: string
        ResourceIdentifier:
          type: string
        ExtensionVersionNumber:
          type: integer
        Parameters:
          type: object
          x-patternProperties:
            ^.+$:
              type: string
          additionalProperties: false
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: extension_association
      description: An example resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::AppConfig::ExtensionAssociation
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - ExtensionIdentifier
        - ResourceIdentifier
        - ExtensionVersionNumber
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-write-only-properties:
        - ExtensionIdentifier
        - ResourceIdentifier
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-read-only-properties:
        - Id
        - Arn
        - ResourceArn
        - ExtensionArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - appconfig:CreateExtensionAssociation
          - appconfig:TagResource
        read:
          - appconfig:GetExtensionAssociation
        update:
          - appconfig:UpdateExtensionAssociation
          - appconfig:TagResource
          - appconfig:UntagResource
        delete:
          - appconfig:DeleteExtensionAssociation
          - appconfig:UntagResource
        list:
          - appconfig:ListExtensionAssociations
    HostedConfigurationVersion:
      type: object
      properties:
        ConfigurationProfileId:
          pattern: '[a-z0-9]{4,7}'
          description: The configuration profile ID.
          type: string
        Description:
          minLength: 0
          description: A description of the hosted configuration version.
          type: string
          maxLength: 1024
        ContentType:
          minLength: 1
          description: A standard MIME type describing the format of the configuration content.
          type: string
          maxLength: 255
        LatestVersionNumber:
          description: An optional locking token used to prevent race conditions from overwriting configuration updates when creating a new version. To ensure your data is not overwritten when creating multiple hosted configuration versions in rapid succession, specify the version number of the latest hosted configuration version.
          type: integer
        Content:
          description: The content of the configuration or the configuration data.
          type: string
        VersionLabel:
          minLength: 0
          pattern: ^$|.*[^0-9].*
          description: A user-defined label for an AWS AppConfig hosted configuration version.
          type: string
          maxLength: 64
        ApplicationId:
          pattern: '[a-z0-9]{4,7}'
          description: The application ID.
          type: string
        VersionNumber:
          description: Current version number of hosted configuration version.
          type: string
      required:
        - ApplicationId
        - ConfigurationProfileId
        - Content
        - ContentType
      x-stackql-resource-name: hosted_configuration_version
      description: Resource Type definition for AWS::AppConfig::HostedConfigurationVersion
      x-type-name: AWS::AppConfig::HostedConfigurationVersion
      x-stackql-primary-identifier:
        - ApplicationId
        - ConfigurationProfileId
        - VersionNumber
      x-create-only-properties:
        - ApplicationId
        - ConfigurationProfileId
        - Description
        - Content
        - ContentType
        - LatestVersionNumber
        - VersionLabel
      x-write-only-properties:
        - LatestVersionNumber
      x-read-only-properties:
        - VersionNumber
      x-required-properties:
        - ApplicationId
        - ConfigurationProfileId
        - Content
        - ContentType
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - appconfig:GetHostedConfigurationVersion
        create:
          - appconfig:CreateHostedConfigurationVersion
        list:
          - appconfig:ListHostedConfigurationVersions
        delete:
          - appconfig:DeleteHostedConfigurationVersion
  x-stackQL-resources:
    applications:
      name: applications
      id: aws.appconfig.applications
      x-cfn-schema-name: Application
      x-type: list
      x-identifiers:
        - ApplicationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Application'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationId') as application_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Application'
                AND region = 'us-east-1'
    application:
      name: application
      id: aws.appconfig.application
      x-cfn-schema-name: Application
      x-type: get
      x-identifiers:
        - ApplicationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Application'
              AND data__Identifier = '<ApplicationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Application'
                AND data__Identifier = '<ApplicationId>'
                AND region = 'us-east-1'
    configuration_profiles:
      name: configuration_profiles
      id: aws.appconfig.configuration_profiles
      x-cfn-schema-name: ConfigurationProfile
      x-type: list
      x-identifiers:
        - ApplicationId
        - ConfigurationProfileId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.ConfigurationProfileId') as configuration_profile_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'ConfigurationProfileId') as configuration_profile_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
                AND region = 'us-east-1'
    configuration_profile:
      name: configuration_profile
      id: aws.appconfig.configuration_profile
      x-cfn-schema-name: ConfigurationProfile
      x-type: get
      x-identifiers:
        - ApplicationId
        - ConfigurationProfileId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ConfigurationProfileId') as configuration_profile_id,
              JSON_EXTRACT(Properties, '$.LocationUri') as location_uri,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.KmsKeyIdentifier') as kms_key_identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(Properties, '$.Validators') as validators,
              JSON_EXTRACT(Properties, '$.RetrievalRoleArn') as retrieval_role_arn,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
              AND data__Identifier = '<ApplicationId>|<ConfigurationProfileId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ConfigurationProfileId') as configuration_profile_id,
                json_extract_path_text(Properties, 'LocationUri') as location_uri,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'KmsKeyIdentifier') as kms_key_identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'KmsKeyArn') as kms_key_arn,
                json_extract_path_text(Properties, 'Validators') as validators,
                json_extract_path_text(Properties, 'RetrievalRoleArn') as retrieval_role_arn,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
                AND data__Identifier = '<ApplicationId>|<ConfigurationProfileId>'
                AND region = 'us-east-1'
    environments:
      name: environments
      id: aws.appconfig.environments
      x-cfn-schema-name: Environment
      x-type: list
      x-identifiers:
        - ApplicationId
        - EnvironmentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Environment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'EnvironmentId') as environment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Environment'
                AND region = 'us-east-1'
    environment:
      name: environment
      id: aws.appconfig.environment
      x-cfn-schema-name: Environment
      x-type: get
      x-identifiers:
        - ApplicationId
        - EnvironmentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Monitors') as monitors,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Environment'
              AND data__Identifier = '<ApplicationId>|<EnvironmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'EnvironmentId') as environment_id,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Monitors') as monitors,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Environment'
                AND data__Identifier = '<ApplicationId>|<EnvironmentId>'
                AND region = 'us-east-1'
    extensions:
      name: extensions
      id: aws.appconfig.extensions
      x-cfn-schema-name: Extension
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Extension'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Extension'
                AND region = 'us-east-1'
    extension:
      name: extension
      id: aws.appconfig.extension
      x-cfn-schema-name: Extension
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.VersionNumber') as version_number,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Actions') as actions,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.LatestVersionNumber') as latest_version_number,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Extension'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'VersionNumber') as version_number,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Actions') as actions,
                json_extract_path_text(Properties, 'Parameters') as parameters,
                json_extract_path_text(Properties, 'LatestVersionNumber') as latest_version_number,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Extension'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    extension_associations:
      name: extension_associations
      id: aws.appconfig.extension_associations
      x-cfn-schema-name: ExtensionAssociation
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
                AND region = 'us-east-1'
    extension_association:
      name: extension_association
      id: aws.appconfig.extension_association
      x-cfn-schema-name: ExtensionAssociation
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ExtensionArn') as extension_arn,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.ExtensionIdentifier') as extension_identifier,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(Properties, '$.ExtensionVersionNumber') as extension_version_number,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ExtensionArn') as extension_arn,
                json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(Properties, 'ExtensionIdentifier') as extension_identifier,
                json_extract_path_text(Properties, 'ResourceIdentifier') as resource_identifier,
                json_extract_path_text(Properties, 'ExtensionVersionNumber') as extension_version_number,
                json_extract_path_text(Properties, 'Parameters') as parameters,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    hosted_configuration_versions:
      name: hosted_configuration_versions
      id: aws.appconfig.hosted_configuration_versions
      x-cfn-schema-name: HostedConfigurationVersion
      x-type: list
      x-identifiers:
        - ApplicationId
        - ConfigurationProfileId
        - VersionNumber
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.ConfigurationProfileId') as configuration_profile_id,
              JSON_EXTRACT(Properties, '$.VersionNumber') as version_number
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'ConfigurationProfileId') as configuration_profile_id,
                json_extract_path_text(Properties, 'VersionNumber') as version_number
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
                AND region = 'us-east-1'
    hosted_configuration_version:
      name: hosted_configuration_version
      id: aws.appconfig.hosted_configuration_version
      x-cfn-schema-name: HostedConfigurationVersion
      x-type: get
      x-identifiers:
        - ApplicationId
        - ConfigurationProfileId
        - VersionNumber
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ConfigurationProfileId') as configuration_profile_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ContentType') as content_type,
              JSON_EXTRACT(Properties, '$.LatestVersionNumber') as latest_version_number,
              JSON_EXTRACT(Properties, '$.Content') as content,
              JSON_EXTRACT(Properties, '$.VersionLabel') as version_label,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.VersionNumber') as version_number
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
              AND data__Identifier = '<ApplicationId>|<ConfigurationProfileId>|<VersionNumber>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ConfigurationProfileId') as configuration_profile_id,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ContentType') as content_type,
                json_extract_path_text(Properties, 'LatestVersionNumber') as latest_version_number,
                json_extract_path_text(Properties, 'Content') as content,
                json_extract_path_text(Properties, 'VersionLabel') as version_label,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'VersionNumber') as version_number
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
                AND data__Identifier = '<ApplicationId>|<ConfigurationProfileId>|<VersionNumber>'
                AND region = 'us-east-1'
