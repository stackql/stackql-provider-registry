openapi: 3.0.0
info:
  title: AppConfig
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Tags:
      description: Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
      additionalProperties: false
      type: object
      properties:
        Value:
          minLength: 0
          description: The tag value can be up to 256 characters.
          type: string
          maxLength: 256
        Key:
          minLength: 1
          description: The key-value string map. The tag key can be up to 128 characters and must not start with aws:.
          type: string
          maxLength: 128
    Application:
      type: object
      properties:
        Description:
          type: string
          description: A description of the application.
        ApplicationId:
          type: string
          description: The application Id
        Tags:
          type: array
          description: Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tags'
          x-insertionOrder: false
        Name:
          type: string
          description: A name for the application.
      required:
        - Name
      x-stackql-resource-name: application
      description: Resource Type definition for AWS::AppConfig::Application
      x-type-name: AWS::AppConfig::Application
      x-stackql-primary-identifier:
        - ApplicationId
      x-read-only-properties:
        - ApplicationId
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - appconfig:TagResource
          - appconfig:UntagResource
          - appconfig:ListTagsForResource
      x-required-permissions:
        create:
          - appconfig:CreateApplication
          - appconfig:GetApplication
          - appconfig:ListTagsForResource
          - appconfig:TagResource
        read:
          - appconfig:GetApplication
          - appconfig:ListTagsForResource
        update:
          - appconfig:UpdateApplication
          - appconfig:TagResource
          - appconfig:UntagResource
        delete:
          - appconfig:GetApplication
          - appconfig:DeleteApplication
        list:
          - appconfig:ListApplications
    Validators:
      description: A list of methods for validating the configuration.
      additionalProperties: false
      type: object
      properties:
        Type:
          description: AWS AppConfig supports validators of type JSON_SCHEMA and LAMBDA.
          type: string
        Content:
          minLength: 0
          description: Either the JSON Schema content or the Amazon Resource Name (ARN) of an Lambda function.
          type: string
          maxLength: 32768
    ConfigurationProfile:
      type: object
      properties:
        ConfigurationProfileId:
          description: The configuration profile ID
          type: string
        LocationUri:
          minLength: 1
          description: A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object.
          type: string
          maxLength: 2048
        Type:
          pattern: ^[a-zA-Z\.]+
          description: 'The type of configurations contained in the profile. When calling this API, enter one of the following values for Type: AWS.AppConfig.FeatureFlags, AWS.Freeform'
          type: string
        KmsKeyIdentifier:
          pattern: ^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}|alias/[a-zA-Z0-9/_-]{1,250}|arn:aws[a-zA-Z-]*:kms:[a-z]{2}(-gov|-iso(b?))?-[a-z]+-\d{1}:\d{12}:(key/[0-9a-f-]{36}|alias/[a-zA-Z0-9/_-]{1,250})$
          description: The AWS Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or updated.
          type: string
        Description:
          minLength: 0
          description: A description of the configuration profile.
          type: string
          maxLength: 1024
        KmsKeyArn:
          minLength: 20
          pattern: arn:(aws[a-zA-Z-]*)?:[a-z]+:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:[a-zA-Z0-9-_/:.]+
          description: The Amazon Resource Name of the AWS Key Management Service key to encrypt new configuration data versions in the AWS AppConfig hosted configuration store. This attribute is only used for hosted configuration types. To encrypt data managed in other configuration stores, see the documentation for how to specify an AWS KMS key for that particular service.
          type: string
          maxLength: 2048
        Validators:
          maxItems: 2
          uniqueItems: false
          description: A list of methods for validating the configuration.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Validators'
        RetrievalRoleArn:
          minLength: 20
          pattern: ^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[/].*)$
          description: The ARN of an IAM role with permission to access the configuration at the specified LocationUri.
          type: string
          maxLength: 2048
        DeletionProtectionCheck:
          description: On resource deletion this controls whether the Deletion Protection check should be applied, bypassed, or (the default) whether the behavior should be controlled by the account-level Deletion Protection setting. See https://docs.aws.amazon.com/appconfig/latest/userguide/deletion-protection.html
          type: string
          enum:
            - ACCOUNT_DEFAULT
            - APPLY
            - BYPASS
        ApplicationId:
          pattern: '[a-z0-9]{4,7}'
          description: The application ID.
          type: string
        Tags:
          uniqueItems: false
          description: Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tags'
        Name:
          minLength: 1
          description: A name for the configuration profile.
          type: string
          maxLength: 128
      required:
        - LocationUri
        - ApplicationId
        - Name
      x-stackql-resource-name: configuration_profile
      description: An example resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::AppConfig::ConfigurationProfile
      x-stackql-primary-identifier:
        - ApplicationId
        - ConfigurationProfileId
      x-create-only-properties:
        - LocationUri
        - Type
        - ApplicationId
      x-write-only-properties:
        - DeletionProtectionCheck
      x-read-only-properties:
        - ConfigurationProfileId
        - KmsKeyArn
      x-required-properties:
        - LocationUri
        - ApplicationId
        - Name
      x-tagging:
        permissions:
          - appconfig:TagResource
          - appconfig:UntagResource
          - appconfig:ListTagsForResource
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - appconfig:GetConfigurationProfile
          - appconfig:ListTagsForResource
        create:
          - appconfig:CreateConfigurationProfile
          - appconfig:GetConfigurationProfile
          - appconfig:TagResource
          - appconfig:ListTagsForResource
          - iam:PassRole
        update:
          - appconfig:UpdateConfigurationProfile
          - appconfig:TagResource
          - appconfig:UntagResource
          - iam:PassRole
        list:
          - appconfig:ListConfigurationProfiles
        delete:
          - appconfig:DeleteConfigurationProfile
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    DynamicExtensionParameters:
      additionalProperties: false
      type: object
      properties:
        ParameterValue:
          type: string
        ExtensionReference:
          type: string
        ParameterName:
          type: string
    Deployment:
      type: object
      properties:
        DeploymentStrategyId:
          description: The deployment strategy ID.
          type: string
        ConfigurationProfileId:
          description: The configuration profile ID.
          type: string
        EnvironmentId:
          description: The environment ID.
          type: string
        KmsKeyIdentifier:
          pattern: ^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}|alias/[a-zA-Z0-9/_-]{1,250}|arn:aws[a-zA-Z-]*:kms:[a-z]{2}(-gov|-iso(b?))?-[a-z]+-\d{1}:\d{12}:(key/[0-9a-f-]{36}|alias/[a-zA-Z0-9/_-]{1,250})$
          description: The AWS Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or updated.
          type: string
        Description:
          description: A description of the deployment.
          type: string
        ConfigurationVersion:
          description: The configuration version to deploy. If deploying an AWS AppConfig hosted configuration version, you can specify either the version number or version label. For all other configurations, you must specify the version number.
          type: string
        DeploymentNumber:
          description: The sequence number of the deployment.
          type: string
        ApplicationId:
          description: The application ID.
          type: string
        DynamicExtensionParameters:
          uniqueItems: false
          type: array
          items:
            $ref: '#/components/schemas/DynamicExtensionParameters'
        Tags:
          uniqueItems: true
          description: An array of key-value pairs to apply to this resource.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ApplicationId
        - ConfigurationProfileId
        - DeploymentStrategyId
        - EnvironmentId
        - ConfigurationVersion
      x-stackql-resource-name: deployment
      description: Resource Type definition for AWS::AppConfig::Deployment
      x-type-name: AWS::AppConfig::Deployment
      x-stackql-primary-identifier:
        - ApplicationId
        - EnvironmentId
        - DeploymentNumber
      x-create-only-properties:
        - ApplicationId
        - ConfigurationProfileId
        - DeploymentStrategyId
        - EnvironmentId
        - Description
        - ConfigurationVersion
        - KmsKeyIdentifier
        - DynamicExtensionParameters
        - Tags
      x-write-only-properties:
        - DynamicExtensionParameters
      x-read-only-properties:
        - DeploymentNumber
      x-required-properties:
        - ApplicationId
        - ConfigurationProfileId
        - DeploymentStrategyId
        - EnvironmentId
        - ConfigurationVersion
      x-tagging:
        permissions:
          - appconfig:TagResource
          - appconfig:UntagResource
          - appconfig:ListTagsForResource
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - appconfig:GetDeployment
          - appconfig:ListTagsForResource
        create:
          - appconfig:StartDeployment
          - appconfig:GetDeployment
          - appconfig:TagResource
          - appconfig:ListTagsForResource
          - kms:GenerateDataKey
        list:
          - appconfig:ListDeployments
        delete:
          - appconfig:StopDeployment
    DeploymentStrategy:
      type: object
      properties:
        DeploymentDurationInMinutes:
          type: number
          description: Total amount of time for a deployment to last.
        Description:
          type: string
          description: A description of the deployment strategy.
        FinalBakeTimeInMinutes:
          type: number
          description: >-
            Specifies the amount of time AWS AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AWS AppConfig rolls back the deployment. You must configure permissions for AWS AppConfig to roll back based on CloudWatch alarms. For more information, see Configuring permissions for rollback based on Amazon CloudWatch alarms in the AWS AppConfig
            User Guide.
        GrowthFactor:
          type: number
          description: The percentage of targets to receive a deployed configuration during each interval.
        GrowthType:
          type: string
          description: |-
            The algorithm used to define how percentage grows over time. AWS AppConfig supports the following growth types:

            Linear: For this type, AWS AppConfig processes the deployment by dividing the total number of targets by the value specified for Step percentage. For example, a linear deployment that uses a Step percentage of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.

            Exponential: For this type, AWS AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:

            2*(2^0)

            2*(2^1)

            2*(2^2)

            Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
          enum:
            - EXPONENTIAL
            - LINEAR
        Name:
          type: string
          description: A name for the deployment strategy.
        ReplicateTo:
          type: string
          description: Save the deployment strategy to a Systems Manager (SSM) document.
          enum:
            - NONE
            - SSM_DOCUMENT
        Tags:
          type: array
          description: Assigns metadata to an AWS AppConfig resource. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define. You can specify a maximum of 50 tags for a resource.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Id:
          type: string
          description: The deployment strategy ID.
      required:
        - DeploymentDurationInMinutes
        - GrowthFactor
        - Name
        - ReplicateTo
      x-stackql-resource-name: deployment_strategy
      description: Resource Type definition for AWS::AppConfig::DeploymentStrategy
      x-type-name: AWS::AppConfig::DeploymentStrategy
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Name
        - ReplicateTo
      x-read-only-properties:
        - Id
      x-required-properties:
        - DeploymentDurationInMinutes
        - GrowthFactor
        - Name
        - ReplicateTo
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - appconfig:TagResource
          - appconfig:UntagResource
          - appconfig:ListTagsForResource
      x-required-permissions:
        create:
          - appconfig:CreateDeploymentStrategy
          - appconfig:TagResource
        read:
          - appconfig:GetDeploymentStrategy
          - appconfig:ListTagsForResource
        update:
          - appconfig:UpdateDeploymentStrategy
          - appconfig:TagResource
          - appconfig:UntagResource
        delete:
          - appconfig:DeleteDeploymentStrategy
        list:
          - appconfig:ListDeploymentStrategies
    Monitor:
      description: Amazon CloudWatch alarm to monitor during the deployment process.
      additionalProperties: false
      type: object
      properties:
        AlarmArn:
          x-relationshipRef:
            typeName: AWS::CloudWatch::Alarm
            propertyPath: /properties/Arn
          minLength: 1
          description: Amazon Resource Name (ARN) of the Amazon CloudWatch alarm.
          type: string
          maxLength: 2048
        AlarmRoleArn:
          x-relationshipRef:
            typeName: AWS::IAM::Role
            propertyPath: /properties/Arn
          minLength: 20
          pattern: ^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[/].*)$
          description: ARN of an AWS Identity and Access Management (IAM) role for AWS AppConfig to monitor AlarmArn.
          type: string
          maxLength: 2048
      required:
        - AlarmArn
    Environment:
      type: object
      properties:
        EnvironmentId:
          pattern: '[a-z0-9]{4,7}'
          description: The environment ID.
          type: string
        Description:
          minLength: 0
          description: A description of the environment.
          type: string
          maxLength: 1024
        Monitors:
          minItems: 0
          maxItems: 5
          description: Amazon CloudWatch alarms to monitor during the deployment process.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Monitor'
        DeletionProtectionCheck:
          description: On resource deletion this controls whether the Deletion Protection check should be applied, bypassed, or (the default) whether the behavior should be controlled by the account-level Deletion Protection setting. See https://docs.aws.amazon.com/appconfig/latest/userguide/deletion-protection.html
          type: string
          enum:
            - ACCOUNT_DEFAULT
            - APPLY
            - BYPASS
        ApplicationId:
          pattern: '[a-z0-9]{4,7}'
          description: The application ID.
          type: string
        Tags:
          uniqueItems: true
          description: Metadata to assign to the environment. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          minLength: 1
          description: A name for the environment.
          type: string
          maxLength: 64
      required:
        - Name
        - ApplicationId
      x-stackql-resource-name: environment
      description: Resource Type definition for AWS::AppConfig::Environment
      x-type-name: AWS::AppConfig::Environment
      x-stackql-primary-identifier:
        - ApplicationId
        - EnvironmentId
      x-create-only-properties:
        - ApplicationId
      x-write-only-properties:
        - DeletionProtectionCheck
      x-read-only-properties:
        - EnvironmentId
      x-required-properties:
        - Name
        - ApplicationId
      x-tagging:
        permissions:
          - appconfig:TagResource
          - appconfig:UntagResource
          - appconfig:ListTagsForResource
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - appconfig:GetEnvironment
          - appconfig:ListTagsForResource
        create:
          - appconfig:CreateEnvironment
          - appconfig:GetEnvironment
          - appconfig:ListTagsForResource
          - appconfig:TagResource
          - iam:PassRole
        update:
          - appconfig:UpdateEnvironment
          - appconfig:TagResource
          - appconfig:UntagResource
          - iam:PassRole
        list:
          - appconfig:ListEnvironments
        delete:
          - appconfig:GetEnvironment
          - appconfig:DeleteEnvironment
    Actions:
      description: A list of actions for an extension to take at a specific action point.
      uniqueItems: true
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/Action'
    Action:
      description: An action for an extension to take at a specific action point.
      type: object
      properties:
        Name:
          type: string
          description: The name of the extension action.
          minLength: 1
          maxLength: 128
        Description:
          type: string
          description: The description of the extension Action.
          minLength: 0
          maxLength: 1024
        Uri:
          type: string
          description: The URI of the extension action.
          minLength: 1
          maxLength: 2048
        RoleArn:
          type: string
          description: The ARN of the role for invoking the extension action.
          minLength: 20
          maxLength: 2048
      required:
        - Name
        - Uri
      additionalProperties: false
    Parameter:
      description: A parameter for the extension to send to a specific action.
      type: object
      properties:
        Description:
          type: string
          description: The description of the extension Parameter.
          minLength: 0
          maxLength: 1024
        Dynamic:
          type: boolean
        Required:
          type: boolean
      required:
        - Required
      additionalProperties: false
    Extension:
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
        VersionNumber:
          type: integer
        Name:
          description: Name of the extension.
          type: string
        Description:
          description: Description of the extension.
          type: string
        Actions:
          type: object
          x-patternProperties:
            ^.+$:
              $ref: '#/components/schemas/Actions'
          additionalProperties: false
        Parameters:
          type: object
          x-patternProperties:
            ^.+$:
              $ref: '#/components/schemas/Parameter'
          additionalProperties: false
        LatestVersionNumber:
          type: integer
        Tags:
          description: An array of key-value tags to apply to this resource.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
        - Actions
      x-stackql-resource-name: extension
      description: Resource Type definition for AWS::AppConfig::Extension
      x-type-name: AWS::AppConfig::Extension
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Name
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-write-only-properties:
        - LatestVersionNumber
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-read-only-properties:
        - Id
        - Arn
        - VersionNumber
      x-required-properties:
        - Name
        - Actions
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - appconfig:TagResource
          - appconfig:UntagResource
          - appconfig:ListTagsForResource
      x-required-permissions:
        create:
          - appconfig:CreateExtension
          - appconfig:TagResource
          - iam:PassRole
        read:
          - appconfig:GetExtension
        update:
          - appconfig:UpdateExtension
          - appconfig:TagResource
          - appconfig:UntagResource
        delete:
          - appconfig:DeleteExtension
          - appconfig:UntagResource
        list:
          - appconfig:ListExtensions
    ExtensionAssociation:
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
        ExtensionArn:
          type: string
        ResourceArn:
          type: string
        ExtensionIdentifier:
          type: string
        ResourceIdentifier:
          type: string
        ExtensionVersionNumber:
          type: integer
        Parameters:
          type: object
          x-patternProperties:
            ^.+$:
              type: string
          additionalProperties: false
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: extension_association
      description: An example resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::AppConfig::ExtensionAssociation
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - ExtensionIdentifier
        - ResourceIdentifier
        - ExtensionVersionNumber
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-write-only-properties:
        - ExtensionIdentifier
        - ResourceIdentifier
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-read-only-properties:
        - Id
        - Arn
        - ResourceArn
        - ExtensionArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - appconfig:TagResource
          - appconfig:UntagResource
          - appconfig:ListTagsForResource
      x-required-permissions:
        create:
          - appconfig:CreateExtensionAssociation
          - appconfig:TagResource
        read:
          - appconfig:GetExtensionAssociation
        update:
          - appconfig:UpdateExtensionAssociation
          - appconfig:TagResource
          - appconfig:UntagResource
        delete:
          - appconfig:DeleteExtensionAssociation
          - appconfig:UntagResource
        list:
          - appconfig:ListExtensionAssociations
    HostedConfigurationVersion:
      type: object
      properties:
        ConfigurationProfileId:
          pattern: '[a-z0-9]{4,7}'
          description: The configuration profile ID.
          type: string
        Description:
          minLength: 0
          description: A description of the hosted configuration version.
          type: string
          maxLength: 1024
        ContentType:
          minLength: 1
          description: A standard MIME type describing the format of the configuration content.
          type: string
          maxLength: 255
        LatestVersionNumber:
          description: An optional locking token used to prevent race conditions from overwriting configuration updates when creating a new version. To ensure your data is not overwritten when creating multiple hosted configuration versions in rapid succession, specify the version number of the latest hosted configuration version.
          type: integer
        Content:
          description: The content of the configuration or the configuration data.
          type: string
        VersionLabel:
          minLength: 0
          pattern: ^$|.*[^0-9].*
          description: A user-defined label for an AWS AppConfig hosted configuration version.
          type: string
          maxLength: 64
        ApplicationId:
          pattern: '[a-z0-9]{4,7}'
          description: The application ID.
          type: string
        VersionNumber:
          description: Current version number of hosted configuration version.
          type: string
      required:
        - ApplicationId
        - ConfigurationProfileId
        - Content
        - ContentType
      x-stackql-resource-name: hosted_configuration_version
      description: Resource Type definition for AWS::AppConfig::HostedConfigurationVersion
      x-type-name: AWS::AppConfig::HostedConfigurationVersion
      x-stackql-primary-identifier:
        - ApplicationId
        - ConfigurationProfileId
        - VersionNumber
      x-create-only-properties:
        - ApplicationId
        - ConfigurationProfileId
        - Description
        - Content
        - ContentType
        - LatestVersionNumber
        - VersionLabel
      x-write-only-properties:
        - LatestVersionNumber
      x-read-only-properties:
        - VersionNumber
      x-required-properties:
        - ApplicationId
        - ConfigurationProfileId
        - Content
        - ContentType
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - appconfig:GetHostedConfigurationVersion
        create:
          - appconfig:CreateHostedConfigurationVersion
        list:
          - appconfig:ListHostedConfigurationVersions
        delete:
          - appconfig:DeleteHostedConfigurationVersion
    CreateApplicationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              type: string
              description: A description of the application.
            ApplicationId:
              type: string
              description: The application Id
            Tags:
              type: array
              description: Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tags'
              x-insertionOrder: false
            Name:
              type: string
              description: A name for the application.
          x-stackQL-stringOnly: true
      x-title: CreateApplicationRequest
      type: object
      required: []
    CreateConfigurationProfileRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ConfigurationProfileId:
              description: The configuration profile ID
              type: string
            LocationUri:
              minLength: 1
              description: A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object.
              type: string
              maxLength: 2048
            Type:
              pattern: ^[a-zA-Z\.]+
              description: 'The type of configurations contained in the profile. When calling this API, enter one of the following values for Type: AWS.AppConfig.FeatureFlags, AWS.Freeform'
              type: string
            KmsKeyIdentifier:
              pattern: ^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}|alias/[a-zA-Z0-9/_-]{1,250}|arn:aws[a-zA-Z-]*:kms:[a-z]{2}(-gov|-iso(b?))?-[a-z]+-\d{1}:\d{12}:(key/[0-9a-f-]{36}|alias/[a-zA-Z0-9/_-]{1,250})$
              description: The AWS Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or updated.
              type: string
            Description:
              minLength: 0
              description: A description of the configuration profile.
              type: string
              maxLength: 1024
            KmsKeyArn:
              minLength: 20
              pattern: arn:(aws[a-zA-Z-]*)?:[a-z]+:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:[a-zA-Z0-9-_/:.]+
              description: The Amazon Resource Name of the AWS Key Management Service key to encrypt new configuration data versions in the AWS AppConfig hosted configuration store. This attribute is only used for hosted configuration types. To encrypt data managed in other configuration stores, see the documentation for how to specify an AWS KMS key for that particular service.
              type: string
              maxLength: 2048
            Validators:
              maxItems: 2
              uniqueItems: false
              description: A list of methods for validating the configuration.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Validators'
            RetrievalRoleArn:
              minLength: 20
              pattern: ^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[/].*)$
              description: The ARN of an IAM role with permission to access the configuration at the specified LocationUri.
              type: string
              maxLength: 2048
            DeletionProtectionCheck:
              description: On resource deletion this controls whether the Deletion Protection check should be applied, bypassed, or (the default) whether the behavior should be controlled by the account-level Deletion Protection setting. See https://docs.aws.amazon.com/appconfig/latest/userguide/deletion-protection.html
              type: string
              enum:
                - ACCOUNT_DEFAULT
                - APPLY
                - BYPASS
            ApplicationId:
              pattern: '[a-z0-9]{4,7}'
              description: The application ID.
              type: string
            Tags:
              uniqueItems: false
              description: Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tags'
            Name:
              minLength: 1
              description: A name for the configuration profile.
              type: string
              maxLength: 128
          x-stackQL-stringOnly: true
      x-title: CreateConfigurationProfileRequest
      type: object
      required: []
    CreateDeploymentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DeploymentStrategyId:
              description: The deployment strategy ID.
              type: string
            ConfigurationProfileId:
              description: The configuration profile ID.
              type: string
            EnvironmentId:
              description: The environment ID.
              type: string
            KmsKeyIdentifier:
              pattern: ^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}|alias/[a-zA-Z0-9/_-]{1,250}|arn:aws[a-zA-Z-]*:kms:[a-z]{2}(-gov|-iso(b?))?-[a-z]+-\d{1}:\d{12}:(key/[0-9a-f-]{36}|alias/[a-zA-Z0-9/_-]{1,250})$
              description: The AWS Key Management Service key identifier (key ID, key alias, or key ARN) provided when the resource was created or updated.
              type: string
            Description:
              description: A description of the deployment.
              type: string
            ConfigurationVersion:
              description: The configuration version to deploy. If deploying an AWS AppConfig hosted configuration version, you can specify either the version number or version label. For all other configurations, you must specify the version number.
              type: string
            DeploymentNumber:
              description: The sequence number of the deployment.
              type: string
            ApplicationId:
              description: The application ID.
              type: string
            DynamicExtensionParameters:
              uniqueItems: false
              type: array
              items:
                $ref: '#/components/schemas/DynamicExtensionParameters'
            Tags:
              uniqueItems: true
              description: An array of key-value pairs to apply to this resource.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateDeploymentRequest
      type: object
      required: []
    CreateDeploymentStrategyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DeploymentDurationInMinutes:
              type: number
              description: Total amount of time for a deployment to last.
            Description:
              type: string
              description: A description of the deployment strategy.
            FinalBakeTimeInMinutes:
              type: number
              description: >-
                Specifies the amount of time AWS AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AWS AppConfig rolls back the deployment. You must configure permissions for AWS AppConfig to roll back based on CloudWatch alarms. For more information, see Configuring permissions for rollback based on Amazon CloudWatch alarms in the AWS
                AppConfig User Guide.
            GrowthFactor:
              type: number
              description: The percentage of targets to receive a deployed configuration during each interval.
            GrowthType:
              type: string
              description: |-
                The algorithm used to define how percentage grows over time. AWS AppConfig supports the following growth types:

                Linear: For this type, AWS AppConfig processes the deployment by dividing the total number of targets by the value specified for Step percentage. For example, a linear deployment that uses a Step percentage of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.

                Exponential: For this type, AWS AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:

                2*(2^0)

                2*(2^1)

                2*(2^2)

                Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
              enum:
                - EXPONENTIAL
                - LINEAR
            Name:
              type: string
              description: A name for the deployment strategy.
            ReplicateTo:
              type: string
              description: Save the deployment strategy to a Systems Manager (SSM) document.
              enum:
                - NONE
                - SSM_DOCUMENT
            Tags:
              type: array
              description: Assigns metadata to an AWS AppConfig resource. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define. You can specify a maximum of 50 tags for a resource.
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Id:
              type: string
              description: The deployment strategy ID.
          x-stackQL-stringOnly: true
      x-title: CreateDeploymentStrategyRequest
      type: object
      required: []
    CreateEnvironmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            EnvironmentId:
              pattern: '[a-z0-9]{4,7}'
              description: The environment ID.
              type: string
            Description:
              minLength: 0
              description: A description of the environment.
              type: string
              maxLength: 1024
            Monitors:
              minItems: 0
              maxItems: 5
              description: Amazon CloudWatch alarms to monitor during the deployment process.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Monitor'
            DeletionProtectionCheck:
              description: On resource deletion this controls whether the Deletion Protection check should be applied, bypassed, or (the default) whether the behavior should be controlled by the account-level Deletion Protection setting. See https://docs.aws.amazon.com/appconfig/latest/userguide/deletion-protection.html
              type: string
              enum:
                - ACCOUNT_DEFAULT
                - APPLY
                - BYPASS
            ApplicationId:
              pattern: '[a-z0-9]{4,7}'
              description: The application ID.
              type: string
            Tags:
              uniqueItems: true
              description: Metadata to assign to the environment. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            Name:
              minLength: 1
              description: A name for the environment.
              type: string
              maxLength: 64
          x-stackQL-stringOnly: true
      x-title: CreateEnvironmentRequest
      type: object
      required: []
    CreateExtensionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              type: string
            Arn:
              type: string
            VersionNumber:
              type: integer
            Name:
              description: Name of the extension.
              type: string
            Description:
              description: Description of the extension.
              type: string
            Actions:
              type: object
              x-patternProperties:
                ^.+$:
                  $ref: '#/components/schemas/Actions'
              additionalProperties: false
            Parameters:
              type: object
              x-patternProperties:
                ^.+$:
                  $ref: '#/components/schemas/Parameter'
              additionalProperties: false
            LatestVersionNumber:
              type: integer
            Tags:
              description: An array of key-value tags to apply to this resource.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateExtensionRequest
      type: object
      required: []
    CreateExtensionAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              type: string
            Arn:
              type: string
            ExtensionArn:
              type: string
            ResourceArn:
              type: string
            ExtensionIdentifier:
              type: string
            ResourceIdentifier:
              type: string
            ExtensionVersionNumber:
              type: integer
            Parameters:
              type: object
              x-patternProperties:
                ^.+$:
                  type: string
              additionalProperties: false
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateExtensionAssociationRequest
      type: object
      required: []
    CreateHostedConfigurationVersionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ConfigurationProfileId:
              pattern: '[a-z0-9]{4,7}'
              description: The configuration profile ID.
              type: string
            Description:
              minLength: 0
              description: A description of the hosted configuration version.
              type: string
              maxLength: 1024
            ContentType:
              minLength: 1
              description: A standard MIME type describing the format of the configuration content.
              type: string
              maxLength: 255
            LatestVersionNumber:
              description: An optional locking token used to prevent race conditions from overwriting configuration updates when creating a new version. To ensure your data is not overwritten when creating multiple hosted configuration versions in rapid succession, specify the version number of the latest hosted configuration version.
              type: integer
            Content:
              description: The content of the configuration or the configuration data.
              type: string
            VersionLabel:
              minLength: 0
              pattern: ^$|.*[^0-9].*
              description: A user-defined label for an AWS AppConfig hosted configuration version.
              type: string
              maxLength: 64
            ApplicationId:
              pattern: '[a-z0-9]{4,7}'
              description: The application ID.
              type: string
            VersionNumber:
              description: Current version number of hosted configuration version.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateHostedConfigurationVersionRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    applications:
      name: applications
      id: aws.appconfig.applications
      x-cfn-schema-name: Application
      x-cfn-type-name: AWS::AppConfig::Application
      x-identifiers:
        - ApplicationId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Application&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::Application"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::Application"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::Application"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/applications/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/applications/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/applications/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Application'
              AND data__Identifier = '<ApplicationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ApplicationId') as application_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppConfig::Application'
                AND detail.data__TypeName = 'AWS::AppConfig::Application'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ApplicationId') as application_id,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Name') as name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Application'
                  AND data__Identifier = '<ApplicationId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ApplicationId') as application_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Name') as name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppConfig::Application'
                    AND detail.data__TypeName = 'AWS::AppConfig::Application'
                    AND listing.region = 'us-east-1'
    applications_list_only:
      name: applications_list_only
      id: aws.appconfig.applications_list_only
      x-cfn-schema-name: Application
      x-cfn-type-name: AWS::AppConfig::Application
      x-identifiers:
        - ApplicationId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Application'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationId') as application_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Application'
                AND region = 'us-east-1'
    application_tags:
      name: application_tags
      id: aws.appconfig.application_tags
      x-cfn-schema-name: Application
      x-cfn-type-name: AWS::AppConfig::Application
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::AppConfig::Application'
              AND detail.data__TypeName = 'AWS::AppConfig::Application'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'ApplicationId') as application_id,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::AppConfig::Application'
                AND detail.data__TypeName = 'AWS::AppConfig::Application'
                AND listing.region = 'us-east-1'
    configuration_profiles:
      name: configuration_profiles
      id: aws.appconfig.configuration_profiles
      x-cfn-schema-name: ConfigurationProfile
      x-cfn-type-name: AWS::AppConfig::ConfigurationProfile
      x-identifiers:
        - ApplicationId
        - ConfigurationProfileId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ConfigurationProfile&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::ConfigurationProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::ConfigurationProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::ConfigurationProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/configuration_profiles/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/configuration_profiles/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/configuration_profiles/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ConfigurationProfileId') as configuration_profile_id,
              JSON_EXTRACT(Properties, '$.LocationUri') as location_uri,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.KmsKeyIdentifier') as kms_key_identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(Properties, '$.Validators') as validators,
              JSON_EXTRACT(Properties, '$.RetrievalRoleArn') as retrieval_role_arn,
              JSON_EXTRACT(Properties, '$.DeletionProtectionCheck') as deletion_protection_check,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
              AND data__Identifier = '<ApplicationId>|<ConfigurationProfileId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ConfigurationProfileId') as configuration_profile_id,
                JSON_EXTRACT(detail.Properties, '$.LocationUri') as location_uri,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyIdentifier') as kms_key_identifier,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyArn') as kms_key_arn,
                JSON_EXTRACT(detail.Properties, '$.Validators') as validators,
                JSON_EXTRACT(detail.Properties, '$.RetrievalRoleArn') as retrieval_role_arn,
                JSON_EXTRACT(detail.Properties, '$.DeletionProtectionCheck') as deletion_protection_check,
                JSON_EXTRACT(detail.Properties, '$.ApplicationId') as application_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
                AND detail.data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ConfigurationProfileId') as configuration_profile_id,
                  json_extract_path_text(Properties, 'LocationUri') as location_uri,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'KmsKeyIdentifier') as kms_key_identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'KmsKeyArn') as kms_key_arn,
                  json_extract_path_text(Properties, 'Validators') as validators,
                  json_extract_path_text(Properties, 'RetrievalRoleArn') as retrieval_role_arn,
                  json_extract_path_text(Properties, 'DeletionProtectionCheck') as deletion_protection_check,
                  json_extract_path_text(Properties, 'ApplicationId') as application_id,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Name') as name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
                  AND data__Identifier = '<ApplicationId>|<ConfigurationProfileId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ConfigurationProfileId') as configuration_profile_id,
                    json_extract_path_text(detail.Properties, 'LocationUri') as location_uri,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'KmsKeyIdentifier') as kms_key_identifier,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'KmsKeyArn') as kms_key_arn,
                    json_extract_path_text(detail.Properties, 'Validators') as validators,
                    json_extract_path_text(detail.Properties, 'RetrievalRoleArn') as retrieval_role_arn,
                    json_extract_path_text(detail.Properties, 'DeletionProtectionCheck') as deletion_protection_check,
                    json_extract_path_text(detail.Properties, 'ApplicationId') as application_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Name') as name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
                    AND detail.data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
                    AND listing.region = 'us-east-1'
    configuration_profiles_list_only:
      name: configuration_profiles_list_only
      id: aws.appconfig.configuration_profiles_list_only
      x-cfn-schema-name: ConfigurationProfile
      x-cfn-type-name: AWS::AppConfig::ConfigurationProfile
      x-identifiers:
        - ApplicationId
        - ConfigurationProfileId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.ConfigurationProfileId') as configuration_profile_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'ConfigurationProfileId') as configuration_profile_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
                AND region = 'us-east-1'
    configuration_profile_tags:
      name: configuration_profile_tags
      id: aws.appconfig.configuration_profile_tags
      x-cfn-schema-name: ConfigurationProfile
      x-cfn-type-name: AWS::AppConfig::ConfigurationProfile
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ConfigurationProfileId') as configuration_profile_id,
              JSON_EXTRACT(detail.Properties, '$.LocationUri') as location_uri,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyIdentifier') as kms_key_identifier,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(detail.Properties, '$.Validators') as validators,
              JSON_EXTRACT(detail.Properties, '$.RetrievalRoleArn') as retrieval_role_arn,
              JSON_EXTRACT(detail.Properties, '$.DeletionProtectionCheck') as deletion_protection_check,
              JSON_EXTRACT(detail.Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
              AND detail.data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ConfigurationProfileId') as configuration_profile_id,
                json_extract_path_text(detail.Properties, 'LocationUri') as location_uri,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'KmsKeyIdentifier') as kms_key_identifier,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'KmsKeyArn') as kms_key_arn,
                json_extract_path_text(detail.Properties, 'Validators') as validators,
                json_extract_path_text(detail.Properties, 'RetrievalRoleArn') as retrieval_role_arn,
                json_extract_path_text(detail.Properties, 'DeletionProtectionCheck') as deletion_protection_check,
                json_extract_path_text(detail.Properties, 'ApplicationId') as application_id,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
                AND detail.data__TypeName = 'AWS::AppConfig::ConfigurationProfile'
                AND listing.region = 'us-east-1'
    deployments:
      name: deployments
      id: aws.appconfig.deployments
      x-cfn-schema-name: Deployment
      x-cfn-type-name: AWS::AppConfig::Deployment
      x-identifiers:
        - ApplicationId
        - EnvironmentId
        - DeploymentNumber
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Deployment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::Deployment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::Deployment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/deployments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/deployments/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DeploymentStrategyId') as deployment_strategy_id,
              JSON_EXTRACT(Properties, '$.ConfigurationProfileId') as configuration_profile_id,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(Properties, '$.KmsKeyIdentifier') as kms_key_identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ConfigurationVersion') as configuration_version,
              JSON_EXTRACT(Properties, '$.DeploymentNumber') as deployment_number,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.DynamicExtensionParameters') as dynamic_extension_parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Deployment'
              AND data__Identifier = '<ApplicationId>|<EnvironmentId>|<DeploymentNumber>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DeploymentStrategyId') as deployment_strategy_id,
                JSON_EXTRACT(detail.Properties, '$.ConfigurationProfileId') as configuration_profile_id,
                JSON_EXTRACT(detail.Properties, '$.EnvironmentId') as environment_id,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyIdentifier') as kms_key_identifier,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ConfigurationVersion') as configuration_version,
                JSON_EXTRACT(detail.Properties, '$.DeploymentNumber') as deployment_number,
                JSON_EXTRACT(detail.Properties, '$.ApplicationId') as application_id,
                JSON_EXTRACT(detail.Properties, '$.DynamicExtensionParameters') as dynamic_extension_parameters,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppConfig::Deployment'
                AND detail.data__TypeName = 'AWS::AppConfig::Deployment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DeploymentStrategyId') as deployment_strategy_id,
                  json_extract_path_text(Properties, 'ConfigurationProfileId') as configuration_profile_id,
                  json_extract_path_text(Properties, 'EnvironmentId') as environment_id,
                  json_extract_path_text(Properties, 'KmsKeyIdentifier') as kms_key_identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ConfigurationVersion') as configuration_version,
                  json_extract_path_text(Properties, 'DeploymentNumber') as deployment_number,
                  json_extract_path_text(Properties, 'ApplicationId') as application_id,
                  json_extract_path_text(Properties, 'DynamicExtensionParameters') as dynamic_extension_parameters,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Deployment'
                  AND data__Identifier = '<ApplicationId>|<EnvironmentId>|<DeploymentNumber>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DeploymentStrategyId') as deployment_strategy_id,
                    json_extract_path_text(detail.Properties, 'ConfigurationProfileId') as configuration_profile_id,
                    json_extract_path_text(detail.Properties, 'EnvironmentId') as environment_id,
                    json_extract_path_text(detail.Properties, 'KmsKeyIdentifier') as kms_key_identifier,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ConfigurationVersion') as configuration_version,
                    json_extract_path_text(detail.Properties, 'DeploymentNumber') as deployment_number,
                    json_extract_path_text(detail.Properties, 'ApplicationId') as application_id,
                    json_extract_path_text(detail.Properties, 'DynamicExtensionParameters') as dynamic_extension_parameters,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppConfig::Deployment'
                    AND detail.data__TypeName = 'AWS::AppConfig::Deployment'
                    AND listing.region = 'us-east-1'
    deployments_list_only:
      name: deployments_list_only
      id: aws.appconfig.deployments_list_only
      x-cfn-schema-name: Deployment
      x-cfn-type-name: AWS::AppConfig::Deployment
      x-identifiers:
        - ApplicationId
        - EnvironmentId
        - DeploymentNumber
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(Properties, '$.DeploymentNumber') as deployment_number
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Deployment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'EnvironmentId') as environment_id,
                json_extract_path_text(Properties, 'DeploymentNumber') as deployment_number
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Deployment'
                AND region = 'us-east-1'
    deployment_tags:
      name: deployment_tags
      id: aws.appconfig.deployment_tags
      x-cfn-schema-name: Deployment
      x-cfn-type-name: AWS::AppConfig::Deployment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DeploymentStrategyId') as deployment_strategy_id,
              JSON_EXTRACT(detail.Properties, '$.ConfigurationProfileId') as configuration_profile_id,
              JSON_EXTRACT(detail.Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyIdentifier') as kms_key_identifier,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.ConfigurationVersion') as configuration_version,
              JSON_EXTRACT(detail.Properties, '$.DeploymentNumber') as deployment_number,
              JSON_EXTRACT(detail.Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(detail.Properties, '$.DynamicExtensionParameters') as dynamic_extension_parameters
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::AppConfig::Deployment'
              AND detail.data__TypeName = 'AWS::AppConfig::Deployment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DeploymentStrategyId') as deployment_strategy_id,
                json_extract_path_text(detail.Properties, 'ConfigurationProfileId') as configuration_profile_id,
                json_extract_path_text(detail.Properties, 'EnvironmentId') as environment_id,
                json_extract_path_text(detail.Properties, 'KmsKeyIdentifier') as kms_key_identifier,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'ConfigurationVersion') as configuration_version,
                json_extract_path_text(detail.Properties, 'DeploymentNumber') as deployment_number,
                json_extract_path_text(detail.Properties, 'ApplicationId') as application_id,
                json_extract_path_text(detail.Properties, 'DynamicExtensionParameters') as dynamic_extension_parameters
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::AppConfig::Deployment'
                AND detail.data__TypeName = 'AWS::AppConfig::Deployment'
                AND listing.region = 'us-east-1'
    deployment_strategies:
      name: deployment_strategies
      id: aws.appconfig.deployment_strategies
      x-cfn-schema-name: DeploymentStrategy
      x-cfn-type-name: AWS::AppConfig::DeploymentStrategy
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DeploymentStrategy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::DeploymentStrategy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::DeploymentStrategy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::DeploymentStrategy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/deployment_strategies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/deployment_strategies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/deployment_strategies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DeploymentDurationInMinutes') as deployment_duration_in_minutes,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FinalBakeTimeInMinutes') as final_bake_time_in_minutes,
              JSON_EXTRACT(Properties, '$.GrowthFactor') as growth_factor,
              JSON_EXTRACT(Properties, '$.GrowthType') as growth_type,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ReplicateTo') as replicate_to,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DeploymentDurationInMinutes') as deployment_duration_in_minutes,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.FinalBakeTimeInMinutes') as final_bake_time_in_minutes,
                JSON_EXTRACT(detail.Properties, '$.GrowthFactor') as growth_factor,
                JSON_EXTRACT(detail.Properties, '$.GrowthType') as growth_type,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.ReplicateTo') as replicate_to,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Id') as id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
                AND detail.data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DeploymentDurationInMinutes') as deployment_duration_in_minutes,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'FinalBakeTimeInMinutes') as final_bake_time_in_minutes,
                  json_extract_path_text(Properties, 'GrowthFactor') as growth_factor,
                  json_extract_path_text(Properties, 'GrowthType') as growth_type,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'ReplicateTo') as replicate_to,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Id') as id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DeploymentDurationInMinutes') as deployment_duration_in_minutes,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'FinalBakeTimeInMinutes') as final_bake_time_in_minutes,
                    json_extract_path_text(detail.Properties, 'GrowthFactor') as growth_factor,
                    json_extract_path_text(detail.Properties, 'GrowthType') as growth_type,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'ReplicateTo') as replicate_to,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Id') as id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
                    AND detail.data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
                    AND listing.region = 'us-east-1'
    deployment_strategies_list_only:
      name: deployment_strategies_list_only
      id: aws.appconfig.deployment_strategies_list_only
      x-cfn-schema-name: DeploymentStrategy
      x-cfn-type-name: AWS::AppConfig::DeploymentStrategy
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
                AND region = 'us-east-1'
    deployment_strategy_tags:
      name: deployment_strategy_tags
      id: aws.appconfig.deployment_strategy_tags
      x-cfn-schema-name: DeploymentStrategy
      x-cfn-type-name: AWS::AppConfig::DeploymentStrategy
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DeploymentDurationInMinutes') as deployment_duration_in_minutes,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.FinalBakeTimeInMinutes') as final_bake_time_in_minutes,
              JSON_EXTRACT(detail.Properties, '$.GrowthFactor') as growth_factor,
              JSON_EXTRACT(detail.Properties, '$.GrowthType') as growth_type,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.ReplicateTo') as replicate_to,
              JSON_EXTRACT(detail.Properties, '$.Id') as id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
              AND detail.data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DeploymentDurationInMinutes') as deployment_duration_in_minutes,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'FinalBakeTimeInMinutes') as final_bake_time_in_minutes,
                json_extract_path_text(detail.Properties, 'GrowthFactor') as growth_factor,
                json_extract_path_text(detail.Properties, 'GrowthType') as growth_type,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'ReplicateTo') as replicate_to,
                json_extract_path_text(detail.Properties, 'Id') as id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
                AND detail.data__TypeName = 'AWS::AppConfig::DeploymentStrategy'
                AND listing.region = 'us-east-1'
    environments:
      name: environments
      id: aws.appconfig.environments
      x-cfn-schema-name: Environment
      x-cfn-type-name: AWS::AppConfig::Environment
      x-identifiers:
        - ApplicationId
        - EnvironmentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Environment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::Environment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::Environment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::Environment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/environments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/environments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/environments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Monitors') as monitors,
              JSON_EXTRACT(Properties, '$.DeletionProtectionCheck') as deletion_protection_check,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Environment'
              AND data__Identifier = '<ApplicationId>|<EnvironmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.EnvironmentId') as environment_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Monitors') as monitors,
                JSON_EXTRACT(detail.Properties, '$.DeletionProtectionCheck') as deletion_protection_check,
                JSON_EXTRACT(detail.Properties, '$.ApplicationId') as application_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppConfig::Environment'
                AND detail.data__TypeName = 'AWS::AppConfig::Environment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'EnvironmentId') as environment_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Monitors') as monitors,
                  json_extract_path_text(Properties, 'DeletionProtectionCheck') as deletion_protection_check,
                  json_extract_path_text(Properties, 'ApplicationId') as application_id,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Name') as name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Environment'
                  AND data__Identifier = '<ApplicationId>|<EnvironmentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'EnvironmentId') as environment_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Monitors') as monitors,
                    json_extract_path_text(detail.Properties, 'DeletionProtectionCheck') as deletion_protection_check,
                    json_extract_path_text(detail.Properties, 'ApplicationId') as application_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Name') as name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppConfig::Environment'
                    AND detail.data__TypeName = 'AWS::AppConfig::Environment'
                    AND listing.region = 'us-east-1'
    environments_list_only:
      name: environments_list_only
      id: aws.appconfig.environments_list_only
      x-cfn-schema-name: Environment
      x-cfn-type-name: AWS::AppConfig::Environment
      x-identifiers:
        - ApplicationId
        - EnvironmentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Environment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'EnvironmentId') as environment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Environment'
                AND region = 'us-east-1'
    environment_tags:
      name: environment_tags
      id: aws.appconfig.environment_tags
      x-cfn-schema-name: Environment
      x-cfn-type-name: AWS::AppConfig::Environment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Monitors') as monitors,
              JSON_EXTRACT(detail.Properties, '$.DeletionProtectionCheck') as deletion_protection_check,
              JSON_EXTRACT(detail.Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::AppConfig::Environment'
              AND detail.data__TypeName = 'AWS::AppConfig::Environment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'EnvironmentId') as environment_id,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Monitors') as monitors,
                json_extract_path_text(detail.Properties, 'DeletionProtectionCheck') as deletion_protection_check,
                json_extract_path_text(detail.Properties, 'ApplicationId') as application_id,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::AppConfig::Environment'
                AND detail.data__TypeName = 'AWS::AppConfig::Environment'
                AND listing.region = 'us-east-1'
    extensions:
      name: extensions
      id: aws.appconfig.extensions
      x-cfn-schema-name: Extension
      x-cfn-type-name: AWS::AppConfig::Extension
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Extension&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::Extension"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::Extension"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::Extension"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/extensions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/extensions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/extensions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.VersionNumber') as version_number,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Actions') as actions,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.LatestVersionNumber') as latest_version_number,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Extension'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.VersionNumber') as version_number,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Actions') as actions,
                JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters,
                JSON_EXTRACT(detail.Properties, '$.LatestVersionNumber') as latest_version_number,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppConfig::Extension'
                AND detail.data__TypeName = 'AWS::AppConfig::Extension'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'VersionNumber') as version_number,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Actions') as actions,
                  json_extract_path_text(Properties, 'Parameters') as parameters,
                  json_extract_path_text(Properties, 'LatestVersionNumber') as latest_version_number,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::Extension'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'VersionNumber') as version_number,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Actions') as actions,
                    json_extract_path_text(detail.Properties, 'Parameters') as parameters,
                    json_extract_path_text(detail.Properties, 'LatestVersionNumber') as latest_version_number,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppConfig::Extension'
                    AND detail.data__TypeName = 'AWS::AppConfig::Extension'
                    AND listing.region = 'us-east-1'
    extensions_list_only:
      name: extensions_list_only
      id: aws.appconfig.extensions_list_only
      x-cfn-schema-name: Extension
      x-cfn-type-name: AWS::AppConfig::Extension
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Extension'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::Extension'
                AND region = 'us-east-1'
    extension_tags:
      name: extension_tags
      id: aws.appconfig.extension_tags
      x-cfn-schema-name: Extension
      x-cfn-type-name: AWS::AppConfig::Extension
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.VersionNumber') as version_number,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Actions') as actions,
              JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(detail.Properties, '$.LatestVersionNumber') as latest_version_number
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::AppConfig::Extension'
              AND detail.data__TypeName = 'AWS::AppConfig::Extension'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'VersionNumber') as version_number,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Actions') as actions,
                json_extract_path_text(detail.Properties, 'Parameters') as parameters,
                json_extract_path_text(detail.Properties, 'LatestVersionNumber') as latest_version_number
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::AppConfig::Extension'
                AND detail.data__TypeName = 'AWS::AppConfig::Extension'
                AND listing.region = 'us-east-1'
    extension_associations:
      name: extension_associations
      id: aws.appconfig.extension_associations
      x-cfn-schema-name: ExtensionAssociation
      x-cfn-type-name: AWS::AppConfig::ExtensionAssociation
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ExtensionAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::ExtensionAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::ExtensionAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::ExtensionAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/extension_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/extension_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/extension_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ExtensionArn') as extension_arn,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.ExtensionIdentifier') as extension_identifier,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(Properties, '$.ExtensionVersionNumber') as extension_version_number,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ExtensionArn') as extension_arn,
                JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
                JSON_EXTRACT(detail.Properties, '$.ExtensionIdentifier') as extension_identifier,
                JSON_EXTRACT(detail.Properties, '$.ResourceIdentifier') as resource_identifier,
                JSON_EXTRACT(detail.Properties, '$.ExtensionVersionNumber') as extension_version_number,
                JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
                AND detail.data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ExtensionArn') as extension_arn,
                  json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                  json_extract_path_text(Properties, 'ExtensionIdentifier') as extension_identifier,
                  json_extract_path_text(Properties, 'ResourceIdentifier') as resource_identifier,
                  json_extract_path_text(Properties, 'ExtensionVersionNumber') as extension_version_number,
                  json_extract_path_text(Properties, 'Parameters') as parameters,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ExtensionArn') as extension_arn,
                    json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                    json_extract_path_text(detail.Properties, 'ExtensionIdentifier') as extension_identifier,
                    json_extract_path_text(detail.Properties, 'ResourceIdentifier') as resource_identifier,
                    json_extract_path_text(detail.Properties, 'ExtensionVersionNumber') as extension_version_number,
                    json_extract_path_text(detail.Properties, 'Parameters') as parameters,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
                    AND detail.data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
                    AND listing.region = 'us-east-1'
    extension_associations_list_only:
      name: extension_associations_list_only
      id: aws.appconfig.extension_associations_list_only
      x-cfn-schema-name: ExtensionAssociation
      x-cfn-type-name: AWS::AppConfig::ExtensionAssociation
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
                AND region = 'us-east-1'
    extension_association_tags:
      name: extension_association_tags
      id: aws.appconfig.extension_association_tags
      x-cfn-schema-name: ExtensionAssociation
      x-cfn-type-name: AWS::AppConfig::ExtensionAssociation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ExtensionArn') as extension_arn,
              JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(detail.Properties, '$.ExtensionIdentifier') as extension_identifier,
              JSON_EXTRACT(detail.Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(detail.Properties, '$.ExtensionVersionNumber') as extension_version_number,
              JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
              AND detail.data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ExtensionArn') as extension_arn,
                json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(detail.Properties, 'ExtensionIdentifier') as extension_identifier,
                json_extract_path_text(detail.Properties, 'ResourceIdentifier') as resource_identifier,
                json_extract_path_text(detail.Properties, 'ExtensionVersionNumber') as extension_version_number,
                json_extract_path_text(detail.Properties, 'Parameters') as parameters
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
                AND detail.data__TypeName = 'AWS::AppConfig::ExtensionAssociation'
                AND listing.region = 'us-east-1'
    hosted_configuration_versions:
      name: hosted_configuration_versions
      id: aws.appconfig.hosted_configuration_versions
      x-cfn-schema-name: HostedConfigurationVersion
      x-cfn-type-name: AWS::AppConfig::HostedConfigurationVersion
      x-identifiers:
        - ApplicationId
        - ConfigurationProfileId
        - VersionNumber
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__HostedConfigurationVersion&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::HostedConfigurationVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::AppConfig::HostedConfigurationVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/hosted_configuration_versions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/hosted_configuration_versions/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ConfigurationProfileId') as configuration_profile_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ContentType') as content_type,
              JSON_EXTRACT(Properties, '$.LatestVersionNumber') as latest_version_number,
              JSON_EXTRACT(Properties, '$.Content') as content,
              JSON_EXTRACT(Properties, '$.VersionLabel') as version_label,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.VersionNumber') as version_number
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
              AND data__Identifier = '<ApplicationId>|<ConfigurationProfileId>|<VersionNumber>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ConfigurationProfileId') as configuration_profile_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ContentType') as content_type,
                JSON_EXTRACT(detail.Properties, '$.LatestVersionNumber') as latest_version_number,
                JSON_EXTRACT(detail.Properties, '$.Content') as content,
                JSON_EXTRACT(detail.Properties, '$.VersionLabel') as version_label,
                JSON_EXTRACT(detail.Properties, '$.ApplicationId') as application_id,
                JSON_EXTRACT(detail.Properties, '$.VersionNumber') as version_number
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
                AND detail.data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ConfigurationProfileId') as configuration_profile_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ContentType') as content_type,
                  json_extract_path_text(Properties, 'LatestVersionNumber') as latest_version_number,
                  json_extract_path_text(Properties, 'Content') as content,
                  json_extract_path_text(Properties, 'VersionLabel') as version_label,
                  json_extract_path_text(Properties, 'ApplicationId') as application_id,
                  json_extract_path_text(Properties, 'VersionNumber') as version_number
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
                  AND data__Identifier = '<ApplicationId>|<ConfigurationProfileId>|<VersionNumber>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ConfigurationProfileId') as configuration_profile_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ContentType') as content_type,
                    json_extract_path_text(detail.Properties, 'LatestVersionNumber') as latest_version_number,
                    json_extract_path_text(detail.Properties, 'Content') as content,
                    json_extract_path_text(detail.Properties, 'VersionLabel') as version_label,
                    json_extract_path_text(detail.Properties, 'ApplicationId') as application_id,
                    json_extract_path_text(detail.Properties, 'VersionNumber') as version_number
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
                    AND detail.data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
                    AND listing.region = 'us-east-1'
    hosted_configuration_versions_list_only:
      name: hosted_configuration_versions_list_only
      id: aws.appconfig.hosted_configuration_versions_list_only
      x-cfn-schema-name: HostedConfigurationVersion
      x-cfn-type-name: AWS::AppConfig::HostedConfigurationVersion
      x-identifiers:
        - ApplicationId
        - ConfigurationProfileId
        - VersionNumber
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.ConfigurationProfileId') as configuration_profile_id,
              JSON_EXTRACT(Properties, '$.VersionNumber') as version_number
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'ConfigurationProfileId') as configuration_profile_id,
                json_extract_path_text(Properties, 'VersionNumber') as version_number
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AppConfig::HostedConfigurationVersion'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Application&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateApplication
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateApplicationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ConfigurationProfile&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateConfigurationProfile
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateConfigurationProfileRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Deployment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDeployment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDeploymentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DeploymentStrategy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDeploymentStrategy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDeploymentStrategyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Environment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEnvironment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEnvironmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Extension&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateExtension
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateExtensionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ExtensionAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateExtensionAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateExtensionAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__HostedConfigurationVersion&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateHostedConfigurationVersion
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateHostedConfigurationVersionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
