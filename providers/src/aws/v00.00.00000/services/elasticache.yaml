openapi: 3.0.0
info:
  title: ElastiCache
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    GlobalReplicationGroupMember:
      type: object
      additionalProperties: false
      properties:
        ReplicationGroupId:
          description: Regionally unique identifier for the member i.e. ReplicationGroupId.
          type: string
        ReplicationGroupRegion:
          description: The AWS region of the Global Datastore member.
          type: string
        Role:
          description: Indicates the role of the member, primary or secondary.
          type: string
          enum:
            - PRIMARY
            - SECONDARY
    ReshardingConfiguration:
      type: object
      additionalProperties: false
      properties:
        NodeGroupId:
          description: Unique identifier for the Node Group. This is either auto-generated by ElastiCache (4-digit id) or a user supplied id.
          type: string
        PreferredAvailabilityZones:
          description: A list of preferred availability zones for the nodes of new node groups.
          type: array
          uniqueItems: false
          items:
            type: string
    RegionalConfiguration:
      type: object
      additionalProperties: false
      properties:
        ReplicationGroupId:
          description: The replication group id of the Global Datastore member.
          type: string
        ReplicationGroupRegion:
          description: The AWS region of the Global Datastore member.
          type: string
        ReshardingConfigurations:
          description: 'A list of PreferredAvailabilityZones objects that specifies the configuration of a node group in the resharded cluster. '
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ReshardingConfiguration'
    GlobalReplicationGroup:
      type: object
      properties:
        GlobalReplicationGroupIdSuffix:
          description: 'The suffix name of a Global Datastore. Amazon ElastiCache automatically applies a prefix to the Global Datastore ID when it is created. Each AWS Region has its own prefix. '
          type: string
        AutomaticFailoverEnabled:
          description: AutomaticFailoverEnabled
          type: boolean
        CacheNodeType:
          description: The cache node type of the Global Datastore
          type: string
        EngineVersion:
          description: The engine version of the Global Datastore.
          type: string
        Engine:
          description: The engine of the Global Datastore.
          type: string
        CacheParameterGroupName:
          description: Cache parameter group name to use for the new engine version. This parameter cannot be modified independently.
          type: string
        GlobalNodeGroupCount:
          description: Indicates the number of node groups in the Global Datastore.
          type: integer
        GlobalReplicationGroupDescription:
          description: The optional description of the Global Datastore
          type: string
        GlobalReplicationGroupId:
          description: The name of the Global Datastore, it is generated by ElastiCache adding a prefix to GlobalReplicationGroupIdSuffix.
          type: string
        Members:
          description: The replication groups that comprise the Global Datastore.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/GlobalReplicationGroupMember'
          minItems: 1
        Status:
          description: The status of the Global Datastore
          type: string
        RegionalConfigurations:
          description: 'Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that comprise the Global Datastore '
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/RegionalConfiguration'
      required:
        - Members
      x-stackql-resource-name: global_replication_group
      description: The AWS::ElastiCache::GlobalReplicationGroup resource creates an Amazon ElastiCache Global Replication Group.
      x-type-name: AWS::ElastiCache::GlobalReplicationGroup
      x-stackql-primary-identifier:
        - GlobalReplicationGroupId
      x-write-only-properties:
        - GlobalReplicationGroupIdSuffix
        - AutomaticFailoverEnabled
        - CacheNodeType
        - EngineVersion
        - GlobalNodeGroupCount
        - RegionalConfigurations
      x-read-only-properties:
        - GlobalReplicationGroupId
        - Status
      x-required-properties:
        - Members
      x-required-permissions:
        create:
          - elasticache:CreateGlobalReplicationGroup
          - elasticache:DescribeGlobalReplicationGroups
        read:
          - elasticache:DescribeGlobalReplicationGroups
        update:
          - elasticache:ModifyGlobalReplicationGroup
          - elasticache:FailoverGlobalReplicationGroup
          - elasticache:DescribeGlobalReplicationGroups
          - elasticache:IncreaseNodeGroupsInGlobalReplicationGroup
          - elasticache:DecreaseNodeGroupsInGlobalReplicationGroup
          - elasticache:DisassociateGlobalReplicationGroup
          - elasticache:RebalanceSlotsInGlobalReplicationGroup
        delete:
          - elasticache:DeleteGlobalReplicationGroup
          - elasticache:DisassociateGlobalReplicationGroup
          - elasticache:DescribeGlobalReplicationGroups
        list:
          - elasticache:DescribeGlobalReplicationGroups
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with ''aws:''. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          pattern: ^(?!aws:)[a-zA-Z0-9 _\.\/=+:\-@]*$
          minLength: 1
          maxLength: 128
        Value:
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          pattern: ^[a-zA-Z0-9 _\.\/=+:\-@]*$
          minLength: 0
          maxLength: 256
      required:
        - Key
    ParameterGroup:
      type: object
      properties:
        Description:
          type: string
          description: The description for this cache parameter group.
        Properties:
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: A comma-delimited list of parameter name/value pairs. For more information see ModifyCacheParameterGroup in the Amazon ElastiCache API Reference Guide.
        Tags:
          type: array
          description: Tags are composed of a Key/Value pair. You can use tags to categorize and track each parameter group. The tag value null is permitted.
          items:
            $ref: '#/components/schemas/Tag'
          x-insertionOrder: false
          uniqueItems: false
        CacheParameterGroupName:
          type: string
          description: The name of the Cache Parameter Group.
        CacheParameterGroupFamily:
          type: string
          description: The name of the cache parameter group family that this cache parameter group is compatible with.
      required:
        - Description
        - CacheParameterGroupFamily
      x-stackql-resource-name: parameter_group
      description: Resource Type definition for AWS::ElastiCache::ParameterGroup
      x-type-name: AWS::ElastiCache::ParameterGroup
      x-stackql-primary-identifier:
        - CacheParameterGroupName
      x-create-only-properties:
        - CacheParameterGroupFamily
      x-read-only-properties:
        - CacheParameterGroupName
      x-required-properties:
        - Description
        - CacheParameterGroupFamily
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - ElastiCache:CreateCacheParameterGroup
          - ElastiCache:DescribeCacheParameterGroups
          - ElastiCache:AddTagsToResource
          - ElastiCache:ModifyCacheParameterGroup
          - iam:CreateServiceLinkedRole
          - iam:PutRolePolicy
        read:
          - ElastiCache:DescribeCacheParameterGroups
          - ElastiCache:DescribeCacheParameters
          - ElastiCache:ListTagsForResource
        update:
          - ElastiCache:ModifyCacheParameterGroup
          - ElastiCache:DescribeCacheParameterGroups
          - ElastiCache:DescribeCacheParameters
          - ElastiCache:DescribeEngineDefaultParameters
          - ElastiCache:AddTagsToResource
          - ElastiCache:RemoveTagsFromResource
        delete:
          - ElastiCache:DescribeCacheParameterGroups
          - ElastiCache:DeleteCacheParameterGroup
        list:
          - ElastiCache:DescribeCacheParameterGroups
    CacheUsageLimits:
      description: The cache capacity limit of the Serverless Cache.
      type: object
      properties:
        DataStorage:
          $ref: '#/components/schemas/DataStorage'
        ECPUPerSecond:
          $ref: '#/components/schemas/ECPUPerSecond'
      additionalProperties: false
    DataStorage:
      description: The cached data capacity of the Serverless Cache.
      type: object
      properties:
        Minimum:
          description: The minimum cached data capacity of the Serverless Cache.
          type: integer
        Maximum:
          description: The maximum cached data capacity of the Serverless Cache.
          type: integer
        Unit:
          description: The unit of cached data capacity of the Serverless Cache.
          type: string
          enum:
            - GB
      additionalProperties: false
      required:
        - Unit
    ECPUPerSecond:
      description: The ECPU per second of the Serverless Cache.
      type: object
      properties:
        Minimum:
          description: The minimum ECPU per second of the Serverless Cache.
          type: integer
        Maximum:
          description: The maximum ECPU per second of the Serverless Cache.
          type: integer
      additionalProperties: false
    Endpoint:
      description: The address and the port.
      type: object
      properties:
        Address:
          description: Endpoint address.
          type: string
        Port:
          description: Endpoint port.
          type: string
      additionalProperties: false
    ServerlessCache:
      type: object
      properties:
        ServerlessCacheName:
          description: The name of the Serverless Cache. This value must be unique.
          type: string
        Description:
          description: The description of the Serverless Cache.
          type: string
        Engine:
          description: The engine name of the Serverless Cache.
          type: string
        MajorEngineVersion:
          description: The major engine version of the Serverless Cache.
          type: string
        FullEngineVersion:
          description: The full engine version of the Serverless Cache.
          type: string
        CacheUsageLimits:
          $ref: '#/components/schemas/CacheUsageLimits'
        KmsKeyId:
          description: The ID of the KMS key used to encrypt the cluster.
          type: string
        SecurityGroupIds:
          description: One or more Amazon VPC security groups associated with this Serverless Cache.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        SnapshotArnsToRestore:
          description: The ARN's of snapshot to restore Serverless Cache.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Tags:
          description: An array of key-value pairs to apply to this Serverless Cache.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        UserGroupId:
          description: The ID of the user group.
          type: string
        SubnetIds:
          description: The subnet id's of the Serverless Cache.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        SnapshotRetentionLimit:
          description: The snapshot retention limit of the Serverless Cache.
          type: integer
        DailySnapshotTime:
          description: The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
          type: string
        CreateTime:
          description: The creation time of the Serverless Cache.
          type: string
        Status:
          description: The status of the Serverless Cache.
          type: string
        Endpoint:
          $ref: '#/components/schemas/Endpoint'
        ReaderEndpoint:
          $ref: '#/components/schemas/Endpoint'
        ARN:
          description: The ARN of the Serverless Cache.
          type: string
        FinalSnapshotName:
          description: The final snapshot name which is taken before Serverless Cache is deleted.
          type: string
      required:
        - ServerlessCacheName
        - Engine
      x-stackql-resource-name: serverless_cache
      description: The AWS::ElastiCache::ServerlessCache resource creates an Amazon ElastiCache Serverless Cache.
      x-type-name: AWS::ElastiCache::ServerlessCache
      x-stackql-primary-identifier:
        - ServerlessCacheName
      x-create-only-properties:
        - ServerlessCacheName
        - KmsKeyId
        - SnapshotArnsToRestore
        - SubnetIds
      x-write-only-properties:
        - SnapshotArnsToRestore
        - FinalSnapshotName
      x-read-only-properties:
        - FullEngineVersion
        - CreateTime
        - Status
        - Endpoint/Address
        - Endpoint/Port
        - ReaderEndpoint/Address
        - ReaderEndpoint/Port
        - ARN
      x-required-properties:
        - ServerlessCacheName
        - Engine
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - elasticache:AddTagsToResource
          - elasticache:RemoveTagsFromResource
      x-required-permissions:
        create:
          - elasticache:CreateServerlessCache
          - elasticache:DescribeServerlessCaches
          - elasticache:AddTagsToResource
          - elasticache:ListTagsForResource
          - ec2:CreateTags
          - ec2:CreateVpcEndpoint
          - kms:CreateGrant
          - kms:DescribeKey
        read:
          - elasticache:DescribeServerlessCaches
          - elasticache:ListTagsForResource
        update:
          - elasticache:ModifyServerlessCache
          - elasticache:DescribeServerlessCaches
          - elasticache:AddTagsToResource
          - elasticache:ListTagsForResource
          - elasticache:RemoveTagsFromResource
        delete:
          - elasticache:DeleteServerlessCache
          - elasticache:DescribeServerlessCaches
          - elasticache:ListTagsForResource
        list:
          - elasticache:DescribeServerlessCaches
          - elasticache:ListTagsForResource
    SubnetGroup:
      type: object
      properties:
        Description:
          type: string
          description: The description for the cache subnet group.
        SubnetIds:
          description: The EC2 subnet IDs for the cache subnet group.
          type: array
          items:
            type: string
          x-insertionOrder: false
          uniqueItems: false
        CacheSubnetGroupName:
          type: string
          description: The name for the cache subnet group. This value is stored as a lowercase string.
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Description
        - SubnetIds
      x-stackql-resource-name: subnet_group
      description: Resource Type definition for AWS::ElastiCache::SubnetGroup
      x-type-name: AWS::ElastiCache::SubnetGroup
      x-stackql-primary-identifier:
        - CacheSubnetGroupName
      x-create-only-properties:
        - CacheSubnetGroupName
      x-required-properties:
        - Description
        - SubnetIds
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - elasticache:CreateCacheSubnetGroup
          - elasticache:AddTagsToResource
          - elasticache:DescribeCacheSubnetGroups
          - elasticache:ListTagsForResource
        read:
          - elasticache:DescribeCacheSubnetGroups
          - elasticache:ListTagsForResource
        delete:
          - elasticache:DeleteCacheSubnetGroup
          - elasticache:DescribeCacheSubnetGroups
          - elasticache:ListTagsForResource
        list:
          - elasticache:DescribeCacheSubnetGroups
        update:
          - elasticache:ModifyCacheSubnetGroup
          - elasticache:DescribeCacheSubnetGroups
          - elasticache:AddTagsToResource
          - elasticache:RemoveTagsFromResource
    User:
      type: object
      properties:
        Status:
          description: Indicates the user status. Can be "active", "modifying" or "deleting".
          type: string
        UserId:
          description: The ID of the user.
          pattern: '[a-z][a-z0-9\\-]*'
          type: string
        UserName:
          description: The username of the user.
          type: string
        Engine:
          description: The target cache engine for the user.
          type: string
          enum:
            - redis
            - valkey
        AccessString:
          description: Access permissions string used for this user account.
          type: string
        NoPasswordRequired:
          description: Indicates a password is not required for this user account.
          type: boolean
        Passwords:
          type: array
          x-$comment: List of passwords.
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
          description: Passwords used for this user account. You can create up to two passwords for each user.
        Arn:
          description: The Amazon Resource Name (ARN) of the user account.
          type: string
        AuthenticationMode:
          type: object
          additionalProperties: false
          properties:
            Type:
              description: Authentication Type
              type: string
              enum:
                - password
                - no-password-required
                - iam
            Passwords:
              type: array
              x-$comment: List of passwords.
              uniqueItems: true
              x-insertionOrder: true
              items:
                type: string
              description: Passwords used for this user account. You can create up to two passwords for each user.
          required:
            - Type
        Tags:
          description: An array of key-value pairs to apply to this user.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - UserId
        - UserName
        - Engine
      x-stackql-resource-name: user
      description: Resource Type definition for AWS::ElastiCache::User
      x-type-name: AWS::ElastiCache::User
      x-stackql-primary-identifier:
        - UserId
      x-create-only-properties:
        - UserId
        - UserName
      x-write-only-properties:
        - Passwords
        - NoPasswordRequired
        - AccessString
        - AuthenticationMode
      x-read-only-properties:
        - Status
        - Arn
      x-required-properties:
        - UserId
        - UserName
        - Engine
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - elasticache:CreateUser
          - elasticache:DescribeUsers
          - elasticache:ListTagsForResource
          - elasticache:AddTagsToResource
        read:
          - elasticache:DescribeUsers
          - elasticache:ListTagsForResource
        update:
          - elasticache:ModifyUser
          - elasticache:DescribeUsers
          - elasticache:ListTagsForResource
          - elasticache:AddTagsToResource
          - elasticache:RemoveTagsFromResource
        delete:
          - elasticache:DeleteUser
          - elasticache:DescribeUsers
        list:
          - elasticache:DescribeUsers
          - elasticache:ListTagsForResource
    UserGroup:
      type: object
      properties:
        Status:
          description: Indicates user group status. Can be "creating", "active", "modifying", "deleting".
          type: string
        UserGroupId:
          description: The ID of the user group.
          pattern: '[a-z][a-z0-9\\-]*'
          type: string
        Engine:
          description: Must be redis.
          type: string
          enum:
            - redis
        UserIds:
          type: array
          x-$comment: List of users.
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
          description: List of users associated to this user group.
        Arn:
          description: The Amazon Resource Name (ARN) of the user account.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this user.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - UserGroupId
        - Engine
        - UserIds
      x-stackql-resource-name: user_group
      description: Resource Type definition for AWS::ElastiCache::UserGroup
      x-type-name: AWS::ElastiCache::UserGroup
      x-stackql-primary-identifier:
        - UserGroupId
      x-create-only-properties:
        - UserGroupId
        - Engine
      x-read-only-properties:
        - Status
        - Arn
      x-required-properties:
        - UserGroupId
        - Engine
        - UserIds
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - elasticache:CreateUserGroup
          - elasticache:DescribeUserGroups
          - elasticache:ListTagsForResource
          - elasticache:AddTagsToResource
        read:
          - elasticache:DescribeUserGroups
          - elasticache:ListTagsForResource
        update:
          - elasticache:ModifyUserGroup
          - elasticache:DescribeUserGroups
          - elasticache:ListTagsForResource
          - elasticache:AddTagsToResource
          - elasticache:RemoveTagsFromResource
        delete:
          - elasticache:ModifyReplicationGroup
          - elasticache:DeleteUserGroup
          - elasticache:DescribeUserGroups
          - elasticache:ListTagsForResource
        list:
          - elasticache:DescribeUserGroups
          - elasticache:ListTagsForResource
    CreateGlobalReplicationGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            GlobalReplicationGroupIdSuffix:
              description: 'The suffix name of a Global Datastore. Amazon ElastiCache automatically applies a prefix to the Global Datastore ID when it is created. Each AWS Region has its own prefix. '
              type: string
            AutomaticFailoverEnabled:
              description: AutomaticFailoverEnabled
              type: boolean
            CacheNodeType:
              description: The cache node type of the Global Datastore
              type: string
            EngineVersion:
              description: The engine version of the Global Datastore.
              type: string
            Engine:
              description: The engine of the Global Datastore.
              type: string
            CacheParameterGroupName:
              description: Cache parameter group name to use for the new engine version. This parameter cannot be modified independently.
              type: string
            GlobalNodeGroupCount:
              description: Indicates the number of node groups in the Global Datastore.
              type: integer
            GlobalReplicationGroupDescription:
              description: The optional description of the Global Datastore
              type: string
            GlobalReplicationGroupId:
              description: The name of the Global Datastore, it is generated by ElastiCache adding a prefix to GlobalReplicationGroupIdSuffix.
              type: string
            Members:
              description: The replication groups that comprise the Global Datastore.
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/GlobalReplicationGroupMember'
              minItems: 1
            Status:
              description: The status of the Global Datastore
              type: string
            RegionalConfigurations:
              description: 'Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that comprise the Global Datastore '
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/RegionalConfiguration'
          x-stackQL-stringOnly: true
      x-title: CreateGlobalReplicationGroupRequest
      type: object
      required: []
    CreateParameterGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              type: string
              description: The description for this cache parameter group.
            Properties:
              type: object
              additionalProperties: false
              x-patternProperties:
                '[a-zA-Z0-9]+':
                  type: string
              description: A comma-delimited list of parameter name/value pairs. For more information see ModifyCacheParameterGroup in the Amazon ElastiCache API Reference Guide.
            Tags:
              type: array
              description: Tags are composed of a Key/Value pair. You can use tags to categorize and track each parameter group. The tag value null is permitted.
              items:
                $ref: '#/components/schemas/Tag'
              x-insertionOrder: false
              uniqueItems: false
            CacheParameterGroupName:
              type: string
              description: The name of the Cache Parameter Group.
            CacheParameterGroupFamily:
              type: string
              description: The name of the cache parameter group family that this cache parameter group is compatible with.
          x-stackQL-stringOnly: true
      x-title: CreateParameterGroupRequest
      type: object
      required: []
    CreateServerlessCacheRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ServerlessCacheName:
              description: The name of the Serverless Cache. This value must be unique.
              type: string
            Description:
              description: The description of the Serverless Cache.
              type: string
            Engine:
              description: The engine name of the Serverless Cache.
              type: string
            MajorEngineVersion:
              description: The major engine version of the Serverless Cache.
              type: string
            FullEngineVersion:
              description: The full engine version of the Serverless Cache.
              type: string
            CacheUsageLimits:
              $ref: '#/components/schemas/CacheUsageLimits'
            KmsKeyId:
              description: The ID of the KMS key used to encrypt the cluster.
              type: string
            SecurityGroupIds:
              description: One or more Amazon VPC security groups associated with this Serverless Cache.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            SnapshotArnsToRestore:
              description: The ARN's of snapshot to restore Serverless Cache.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            Tags:
              description: An array of key-value pairs to apply to this Serverless Cache.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            UserGroupId:
              description: The ID of the user group.
              type: string
            SubnetIds:
              description: The subnet id's of the Serverless Cache.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            SnapshotRetentionLimit:
              description: The snapshot retention limit of the Serverless Cache.
              type: integer
            DailySnapshotTime:
              description: The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
              type: string
            CreateTime:
              description: The creation time of the Serverless Cache.
              type: string
            Status:
              description: The status of the Serverless Cache.
              type: string
            Endpoint:
              $ref: '#/components/schemas/Endpoint'
            ReaderEndpoint:
              $ref: '#/components/schemas/Endpoint'
            ARN:
              description: The ARN of the Serverless Cache.
              type: string
            FinalSnapshotName:
              description: The final snapshot name which is taken before Serverless Cache is deleted.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateServerlessCacheRequest
      type: object
      required: []
    CreateSubnetGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              type: string
              description: The description for the cache subnet group.
            SubnetIds:
              description: The EC2 subnet IDs for the cache subnet group.
              type: array
              items:
                type: string
              x-insertionOrder: false
              uniqueItems: false
            CacheSubnetGroupName:
              type: string
              description: The name for the cache subnet group. This value is stored as a lowercase string.
            Tags:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateSubnetGroupRequest
      type: object
      required: []
    CreateUserRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Status:
              description: Indicates the user status. Can be "active", "modifying" or "deleting".
              type: string
            UserId:
              description: The ID of the user.
              pattern: '[a-z][a-z0-9\\-]*'
              type: string
            UserName:
              description: The username of the user.
              type: string
            Engine:
              description: The target cache engine for the user.
              type: string
              enum:
                - redis
                - valkey
            AccessString:
              description: Access permissions string used for this user account.
              type: string
            NoPasswordRequired:
              description: Indicates a password is not required for this user account.
              type: boolean
            Passwords:
              type: array
              x-$comment: List of passwords.
              uniqueItems: true
              x-insertionOrder: true
              items:
                type: string
              description: Passwords used for this user account. You can create up to two passwords for each user.
            Arn:
              description: The Amazon Resource Name (ARN) of the user account.
              type: string
            AuthenticationMode:
              type: object
              additionalProperties: false
              properties:
                Type:
                  description: Authentication Type
                  type: string
                  enum:
                    - password
                    - no-password-required
                    - iam
                Passwords:
                  type: array
                  x-$comment: List of passwords.
                  uniqueItems: true
                  x-insertionOrder: true
                  items:
                    type: string
                  description: Passwords used for this user account. You can create up to two passwords for each user.
              required:
                - Type
            Tags:
              description: An array of key-value pairs to apply to this user.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateUserRequest
      type: object
      required: []
    CreateUserGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Status:
              description: Indicates user group status. Can be "creating", "active", "modifying", "deleting".
              type: string
            UserGroupId:
              description: The ID of the user group.
              pattern: '[a-z][a-z0-9\\-]*'
              type: string
            Engine:
              description: Must be redis.
              type: string
              enum:
                - redis
            UserIds:
              type: array
              x-$comment: List of users.
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
              description: List of users associated to this user group.
            Arn:
              description: The Amazon Resource Name (ARN) of the user account.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this user.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateUserGroupRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    global_replication_groups:
      name: global_replication_groups
      id: aws.elasticache.global_replication_groups
      x-cfn-schema-name: GlobalReplicationGroup
      x-cfn-type-name: AWS::ElastiCache::GlobalReplicationGroup
      x-identifiers:
        - GlobalReplicationGroupId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__GlobalReplicationGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::GlobalReplicationGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::GlobalReplicationGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::GlobalReplicationGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/global_replication_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/global_replication_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/global_replication_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GlobalReplicationGroupIdSuffix') as global_replication_group_id_suffix,
              JSON_EXTRACT(Properties, '$.AutomaticFailoverEnabled') as automatic_failover_enabled,
              JSON_EXTRACT(Properties, '$.CacheNodeType') as cache_node_type,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.CacheParameterGroupName') as cache_parameter_group_name,
              JSON_EXTRACT(Properties, '$.GlobalNodeGroupCount') as global_node_group_count,
              JSON_EXTRACT(Properties, '$.GlobalReplicationGroupDescription') as global_replication_group_description,
              JSON_EXTRACT(Properties, '$.GlobalReplicationGroupId') as global_replication_group_id,
              JSON_EXTRACT(Properties, '$.Members') as members,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.RegionalConfigurations') as regional_configurations
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
              AND data__Identifier = '<GlobalReplicationGroupId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.GlobalReplicationGroupIdSuffix') as global_replication_group_id_suffix,
                JSON_EXTRACT(detail.Properties, '$.AutomaticFailoverEnabled') as automatic_failover_enabled,
                JSON_EXTRACT(detail.Properties, '$.CacheNodeType') as cache_node_type,
                JSON_EXTRACT(detail.Properties, '$.EngineVersion') as engine_version,
                JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
                JSON_EXTRACT(detail.Properties, '$.CacheParameterGroupName') as cache_parameter_group_name,
                JSON_EXTRACT(detail.Properties, '$.GlobalNodeGroupCount') as global_node_group_count,
                JSON_EXTRACT(detail.Properties, '$.GlobalReplicationGroupDescription') as global_replication_group_description,
                JSON_EXTRACT(detail.Properties, '$.GlobalReplicationGroupId') as global_replication_group_id,
                JSON_EXTRACT(detail.Properties, '$.Members') as members,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.RegionalConfigurations') as regional_configurations
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
                AND detail.data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'GlobalReplicationGroupIdSuffix') as global_replication_group_id_suffix,
                  json_extract_path_text(Properties, 'AutomaticFailoverEnabled') as automatic_failover_enabled,
                  json_extract_path_text(Properties, 'CacheNodeType') as cache_node_type,
                  json_extract_path_text(Properties, 'EngineVersion') as engine_version,
                  json_extract_path_text(Properties, 'Engine') as engine,
                  json_extract_path_text(Properties, 'CacheParameterGroupName') as cache_parameter_group_name,
                  json_extract_path_text(Properties, 'GlobalNodeGroupCount') as global_node_group_count,
                  json_extract_path_text(Properties, 'GlobalReplicationGroupDescription') as global_replication_group_description,
                  json_extract_path_text(Properties, 'GlobalReplicationGroupId') as global_replication_group_id,
                  json_extract_path_text(Properties, 'Members') as members,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'RegionalConfigurations') as regional_configurations
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
                  AND data__Identifier = '<GlobalReplicationGroupId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'GlobalReplicationGroupIdSuffix') as global_replication_group_id_suffix,
                    json_extract_path_text(detail.Properties, 'AutomaticFailoverEnabled') as automatic_failover_enabled,
                    json_extract_path_text(detail.Properties, 'CacheNodeType') as cache_node_type,
                    json_extract_path_text(detail.Properties, 'EngineVersion') as engine_version,
                    json_extract_path_text(detail.Properties, 'Engine') as engine,
                    json_extract_path_text(detail.Properties, 'CacheParameterGroupName') as cache_parameter_group_name,
                    json_extract_path_text(detail.Properties, 'GlobalNodeGroupCount') as global_node_group_count,
                    json_extract_path_text(detail.Properties, 'GlobalReplicationGroupDescription') as global_replication_group_description,
                    json_extract_path_text(detail.Properties, 'GlobalReplicationGroupId') as global_replication_group_id,
                    json_extract_path_text(detail.Properties, 'Members') as members,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'RegionalConfigurations') as regional_configurations
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
                    AND detail.data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
                    AND listing.region = 'us-east-1'
    global_replication_groups_list_only:
      name: global_replication_groups_list_only
      id: aws.elasticache.global_replication_groups_list_only
      x-cfn-schema-name: GlobalReplicationGroup
      x-cfn-type-name: AWS::ElastiCache::GlobalReplicationGroup
      x-identifiers:
        - GlobalReplicationGroupId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GlobalReplicationGroupId') as global_replication_group_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GlobalReplicationGroupId') as global_replication_group_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
                AND region = 'us-east-1'
    parameter_groups:
      name: parameter_groups
      id: aws.elasticache.parameter_groups
      x-cfn-schema-name: ParameterGroup
      x-cfn-type-name: AWS::ElastiCache::ParameterGroup
      x-identifiers:
        - CacheParameterGroupName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ParameterGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::ParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::ParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::ParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/parameter_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/parameter_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/parameter_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Properties') as properties,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CacheParameterGroupName') as cache_parameter_group_name,
              JSON_EXTRACT(Properties, '$.CacheParameterGroupFamily') as cache_parameter_group_family
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::ParameterGroup'
              AND data__Identifier = '<CacheParameterGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Properties') as properties,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.CacheParameterGroupName') as cache_parameter_group_name,
                JSON_EXTRACT(detail.Properties, '$.CacheParameterGroupFamily') as cache_parameter_group_family
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElastiCache::ParameterGroup'
                AND detail.data__TypeName = 'AWS::ElastiCache::ParameterGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Properties') as properties,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'CacheParameterGroupName') as cache_parameter_group_name,
                  json_extract_path_text(Properties, 'CacheParameterGroupFamily') as cache_parameter_group_family
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::ParameterGroup'
                  AND data__Identifier = '<CacheParameterGroupName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Properties') as properties,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'CacheParameterGroupName') as cache_parameter_group_name,
                    json_extract_path_text(detail.Properties, 'CacheParameterGroupFamily') as cache_parameter_group_family
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElastiCache::ParameterGroup'
                    AND detail.data__TypeName = 'AWS::ElastiCache::ParameterGroup'
                    AND listing.region = 'us-east-1'
    parameter_groups_list_only:
      name: parameter_groups_list_only
      id: aws.elasticache.parameter_groups_list_only
      x-cfn-schema-name: ParameterGroup
      x-cfn-type-name: AWS::ElastiCache::ParameterGroup
      x-identifiers:
        - CacheParameterGroupName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CacheParameterGroupName') as cache_parameter_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::ParameterGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CacheParameterGroupName') as cache_parameter_group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::ParameterGroup'
                AND region = 'us-east-1'
    parameter_group_tags:
      name: parameter_group_tags
      id: aws.elasticache.parameter_group_tags
      x-cfn-schema-name: ParameterGroup
      x-cfn-type-name: AWS::ElastiCache::ParameterGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Properties') as properties,
              JSON_EXTRACT(detail.Properties, '$.CacheParameterGroupName') as cache_parameter_group_name,
              JSON_EXTRACT(detail.Properties, '$.CacheParameterGroupFamily') as cache_parameter_group_family
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ElastiCache::ParameterGroup'
              AND detail.data__TypeName = 'AWS::ElastiCache::ParameterGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Properties') as properties,
                json_extract_path_text(detail.Properties, 'CacheParameterGroupName') as cache_parameter_group_name,
                json_extract_path_text(detail.Properties, 'CacheParameterGroupFamily') as cache_parameter_group_family
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ElastiCache::ParameterGroup'
                AND detail.data__TypeName = 'AWS::ElastiCache::ParameterGroup'
                AND listing.region = 'us-east-1'
    serverless_caches:
      name: serverless_caches
      id: aws.elasticache.serverless_caches
      x-cfn-schema-name: ServerlessCache
      x-cfn-type-name: AWS::ElastiCache::ServerlessCache
      x-identifiers:
        - ServerlessCacheName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ServerlessCache&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::ServerlessCache"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::ServerlessCache"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::ServerlessCache"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/serverless_caches/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/serverless_caches/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/serverless_caches/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ServerlessCacheName') as serverless_cache_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.MajorEngineVersion') as major_engine_version,
              JSON_EXTRACT(Properties, '$.FullEngineVersion') as full_engine_version,
              JSON_EXTRACT(Properties, '$.CacheUsageLimits') as cache_usage_limits,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.SnapshotArnsToRestore') as snapshot_arns_to_restore,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UserGroupId') as user_group_id,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.SnapshotRetentionLimit') as snapshot_retention_limit,
              JSON_EXTRACT(Properties, '$.DailySnapshotTime') as daily_snapshot_time,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.ReaderEndpoint') as reader_endpoint,
              JSON_EXTRACT(Properties, '$.ARN') as arn,
              JSON_EXTRACT(Properties, '$.FinalSnapshotName') as final_snapshot_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::ServerlessCache'
              AND data__Identifier = '<ServerlessCacheName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ServerlessCacheName') as serverless_cache_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
                JSON_EXTRACT(detail.Properties, '$.MajorEngineVersion') as major_engine_version,
                JSON_EXTRACT(detail.Properties, '$.FullEngineVersion') as full_engine_version,
                JSON_EXTRACT(detail.Properties, '$.CacheUsageLimits') as cache_usage_limits,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.SnapshotArnsToRestore') as snapshot_arns_to_restore,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.UserGroupId') as user_group_id,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.SnapshotRetentionLimit') as snapshot_retention_limit,
                JSON_EXTRACT(detail.Properties, '$.DailySnapshotTime') as daily_snapshot_time,
                JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Endpoint') as endpoint,
                JSON_EXTRACT(detail.Properties, '$.ReaderEndpoint') as reader_endpoint,
                JSON_EXTRACT(detail.Properties, '$.ARN') as arn,
                JSON_EXTRACT(detail.Properties, '$.FinalSnapshotName') as final_snapshot_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElastiCache::ServerlessCache'
                AND detail.data__TypeName = 'AWS::ElastiCache::ServerlessCache'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ServerlessCacheName') as serverless_cache_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Engine') as engine,
                  json_extract_path_text(Properties, 'MajorEngineVersion') as major_engine_version,
                  json_extract_path_text(Properties, 'FullEngineVersion') as full_engine_version,
                  json_extract_path_text(Properties, 'CacheUsageLimits') as cache_usage_limits,
                  json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                  json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                  json_extract_path_text(Properties, 'SnapshotArnsToRestore') as snapshot_arns_to_restore,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'UserGroupId') as user_group_id,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'SnapshotRetentionLimit') as snapshot_retention_limit,
                  json_extract_path_text(Properties, 'DailySnapshotTime') as daily_snapshot_time,
                  json_extract_path_text(Properties, 'CreateTime') as create_time,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Endpoint') as endpoint,
                  json_extract_path_text(Properties, 'ReaderEndpoint') as reader_endpoint,
                  json_extract_path_text(Properties, 'ARN') as arn,
                  json_extract_path_text(Properties, 'FinalSnapshotName') as final_snapshot_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::ServerlessCache'
                  AND data__Identifier = '<ServerlessCacheName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ServerlessCacheName') as serverless_cache_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Engine') as engine,
                    json_extract_path_text(detail.Properties, 'MajorEngineVersion') as major_engine_version,
                    json_extract_path_text(detail.Properties, 'FullEngineVersion') as full_engine_version,
                    json_extract_path_text(detail.Properties, 'CacheUsageLimits') as cache_usage_limits,
                    json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                    json_extract_path_text(detail.Properties, 'SnapshotArnsToRestore') as snapshot_arns_to_restore,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'UserGroupId') as user_group_id,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'SnapshotRetentionLimit') as snapshot_retention_limit,
                    json_extract_path_text(detail.Properties, 'DailySnapshotTime') as daily_snapshot_time,
                    json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Endpoint') as endpoint,
                    json_extract_path_text(detail.Properties, 'ReaderEndpoint') as reader_endpoint,
                    json_extract_path_text(detail.Properties, 'ARN') as arn,
                    json_extract_path_text(detail.Properties, 'FinalSnapshotName') as final_snapshot_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElastiCache::ServerlessCache'
                    AND detail.data__TypeName = 'AWS::ElastiCache::ServerlessCache'
                    AND listing.region = 'us-east-1'
    serverless_caches_list_only:
      name: serverless_caches_list_only
      id: aws.elasticache.serverless_caches_list_only
      x-cfn-schema-name: ServerlessCache
      x-cfn-type-name: AWS::ElastiCache::ServerlessCache
      x-identifiers:
        - ServerlessCacheName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServerlessCacheName') as serverless_cache_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::ServerlessCache'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ServerlessCacheName') as serverless_cache_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::ServerlessCache'
                AND region = 'us-east-1'
    serverless_cache_tags:
      name: serverless_cache_tags
      id: aws.elasticache.serverless_cache_tags
      x-cfn-schema-name: ServerlessCache
      x-cfn-type-name: AWS::ElastiCache::ServerlessCache
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ServerlessCacheName') as serverless_cache_name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
              JSON_EXTRACT(detail.Properties, '$.MajorEngineVersion') as major_engine_version,
              JSON_EXTRACT(detail.Properties, '$.FullEngineVersion') as full_engine_version,
              JSON_EXTRACT(detail.Properties, '$.CacheUsageLimits') as cache_usage_limits,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(detail.Properties, '$.SnapshotArnsToRestore') as snapshot_arns_to_restore,
              JSON_EXTRACT(detail.Properties, '$.UserGroupId') as user_group_id,
              JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(detail.Properties, '$.SnapshotRetentionLimit') as snapshot_retention_limit,
              JSON_EXTRACT(detail.Properties, '$.DailySnapshotTime') as daily_snapshot_time,
              JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(detail.Properties, '$.ReaderEndpoint') as reader_endpoint,
              JSON_EXTRACT(detail.Properties, '$.ARN') as arn,
              JSON_EXTRACT(detail.Properties, '$.FinalSnapshotName') as final_snapshot_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ElastiCache::ServerlessCache'
              AND detail.data__TypeName = 'AWS::ElastiCache::ServerlessCache'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ServerlessCacheName') as serverless_cache_name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Engine') as engine,
                json_extract_path_text(detail.Properties, 'MajorEngineVersion') as major_engine_version,
                json_extract_path_text(detail.Properties, 'FullEngineVersion') as full_engine_version,
                json_extract_path_text(detail.Properties, 'CacheUsageLimits') as cache_usage_limits,
                json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(detail.Properties, 'SnapshotArnsToRestore') as snapshot_arns_to_restore,
                json_extract_path_text(detail.Properties, 'UserGroupId') as user_group_id,
                json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(detail.Properties, 'SnapshotRetentionLimit') as snapshot_retention_limit,
                json_extract_path_text(detail.Properties, 'DailySnapshotTime') as daily_snapshot_time,
                json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'Endpoint') as endpoint,
                json_extract_path_text(detail.Properties, 'ReaderEndpoint') as reader_endpoint,
                json_extract_path_text(detail.Properties, 'ARN') as arn,
                json_extract_path_text(detail.Properties, 'FinalSnapshotName') as final_snapshot_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ElastiCache::ServerlessCache'
                AND detail.data__TypeName = 'AWS::ElastiCache::ServerlessCache'
                AND listing.region = 'us-east-1'
    subnet_groups:
      name: subnet_groups
      id: aws.elasticache.subnet_groups
      x-cfn-schema-name: SubnetGroup
      x-cfn-type-name: AWS::ElastiCache::SubnetGroup
      x-identifiers:
        - CacheSubnetGroupName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SubnetGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::SubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::SubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::SubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/subnet_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/subnet_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/subnet_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.CacheSubnetGroupName') as cache_subnet_group_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::SubnetGroup'
              AND data__Identifier = '<CacheSubnetGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.CacheSubnetGroupName') as cache_subnet_group_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElastiCache::SubnetGroup'
                AND detail.data__TypeName = 'AWS::ElastiCache::SubnetGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'CacheSubnetGroupName') as cache_subnet_group_name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::SubnetGroup'
                  AND data__Identifier = '<CacheSubnetGroupName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'CacheSubnetGroupName') as cache_subnet_group_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElastiCache::SubnetGroup'
                    AND detail.data__TypeName = 'AWS::ElastiCache::SubnetGroup'
                    AND listing.region = 'us-east-1'
    subnet_groups_list_only:
      name: subnet_groups_list_only
      id: aws.elasticache.subnet_groups_list_only
      x-cfn-schema-name: SubnetGroup
      x-cfn-type-name: AWS::ElastiCache::SubnetGroup
      x-identifiers:
        - CacheSubnetGroupName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CacheSubnetGroupName') as cache_subnet_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::SubnetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CacheSubnetGroupName') as cache_subnet_group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::SubnetGroup'
                AND region = 'us-east-1'
    subnet_group_tags:
      name: subnet_group_tags
      id: aws.elasticache.subnet_group_tags
      x-cfn-schema-name: SubnetGroup
      x-cfn-type-name: AWS::ElastiCache::SubnetGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(detail.Properties, '$.CacheSubnetGroupName') as cache_subnet_group_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ElastiCache::SubnetGroup'
              AND detail.data__TypeName = 'AWS::ElastiCache::SubnetGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(detail.Properties, 'CacheSubnetGroupName') as cache_subnet_group_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ElastiCache::SubnetGroup'
                AND detail.data__TypeName = 'AWS::ElastiCache::SubnetGroup'
                AND listing.region = 'us-east-1'
    users:
      name: users
      id: aws.elasticache.users
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::ElastiCache::User
      x-identifiers:
        - UserId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__User&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/users/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/users/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/users/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.UserId') as user_id,
              JSON_EXTRACT(Properties, '$.UserName') as user_name,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.AccessString') as access_string,
              JSON_EXTRACT(Properties, '$.NoPasswordRequired') as no_password_required,
              JSON_EXTRACT(Properties, '$.Passwords') as passwords,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AuthenticationMode') as authentication_mode,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::User'
              AND data__Identifier = '<UserId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.UserId') as user_id,
                JSON_EXTRACT(detail.Properties, '$.UserName') as user_name,
                JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
                JSON_EXTRACT(detail.Properties, '$.AccessString') as access_string,
                JSON_EXTRACT(detail.Properties, '$.NoPasswordRequired') as no_password_required,
                JSON_EXTRACT(detail.Properties, '$.Passwords') as passwords,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.AuthenticationMode') as authentication_mode,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElastiCache::User'
                AND detail.data__TypeName = 'AWS::ElastiCache::User'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'UserId') as user_id,
                  json_extract_path_text(Properties, 'UserName') as user_name,
                  json_extract_path_text(Properties, 'Engine') as engine,
                  json_extract_path_text(Properties, 'AccessString') as access_string,
                  json_extract_path_text(Properties, 'NoPasswordRequired') as no_password_required,
                  json_extract_path_text(Properties, 'Passwords') as passwords,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'AuthenticationMode') as authentication_mode,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::User'
                  AND data__Identifier = '<UserId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'UserId') as user_id,
                    json_extract_path_text(detail.Properties, 'UserName') as user_name,
                    json_extract_path_text(detail.Properties, 'Engine') as engine,
                    json_extract_path_text(detail.Properties, 'AccessString') as access_string,
                    json_extract_path_text(detail.Properties, 'NoPasswordRequired') as no_password_required,
                    json_extract_path_text(detail.Properties, 'Passwords') as passwords,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'AuthenticationMode') as authentication_mode,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElastiCache::User'
                    AND detail.data__TypeName = 'AWS::ElastiCache::User'
                    AND listing.region = 'us-east-1'
    users_list_only:
      name: users_list_only
      id: aws.elasticache.users_list_only
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::ElastiCache::User
      x-identifiers:
        - UserId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserId') as user_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::User'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserId') as user_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::User'
                AND region = 'us-east-1'
    user_tags:
      name: user_tags
      id: aws.elasticache.user_tags
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::ElastiCache::User
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.UserId') as user_id,
              JSON_EXTRACT(detail.Properties, '$.UserName') as user_name,
              JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
              JSON_EXTRACT(detail.Properties, '$.AccessString') as access_string,
              JSON_EXTRACT(detail.Properties, '$.NoPasswordRequired') as no_password_required,
              JSON_EXTRACT(detail.Properties, '$.Passwords') as passwords,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.AuthenticationMode') as authentication_mode
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ElastiCache::User'
              AND detail.data__TypeName = 'AWS::ElastiCache::User'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'UserId') as user_id,
                json_extract_path_text(detail.Properties, 'UserName') as user_name,
                json_extract_path_text(detail.Properties, 'Engine') as engine,
                json_extract_path_text(detail.Properties, 'AccessString') as access_string,
                json_extract_path_text(detail.Properties, 'NoPasswordRequired') as no_password_required,
                json_extract_path_text(detail.Properties, 'Passwords') as passwords,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'AuthenticationMode') as authentication_mode
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ElastiCache::User'
                AND detail.data__TypeName = 'AWS::ElastiCache::User'
                AND listing.region = 'us-east-1'
    user_groups:
      name: user_groups
      id: aws.elasticache.user_groups
      x-cfn-schema-name: UserGroup
      x-cfn-type-name: AWS::ElastiCache::UserGroup
      x-identifiers:
        - UserGroupId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__UserGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::UserGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::UserGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElastiCache::UserGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/user_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/user_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/user_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.UserGroupId') as user_group_id,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.UserIds') as user_ids,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::UserGroup'
              AND data__Identifier = '<UserGroupId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.UserGroupId') as user_group_id,
                JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
                JSON_EXTRACT(detail.Properties, '$.UserIds') as user_ids,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElastiCache::UserGroup'
                AND detail.data__TypeName = 'AWS::ElastiCache::UserGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'UserGroupId') as user_group_id,
                  json_extract_path_text(Properties, 'Engine') as engine,
                  json_extract_path_text(Properties, 'UserIds') as user_ids,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::UserGroup'
                  AND data__Identifier = '<UserGroupId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'UserGroupId') as user_group_id,
                    json_extract_path_text(detail.Properties, 'Engine') as engine,
                    json_extract_path_text(detail.Properties, 'UserIds') as user_ids,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElastiCache::UserGroup'
                    AND detail.data__TypeName = 'AWS::ElastiCache::UserGroup'
                    AND listing.region = 'us-east-1'
    user_groups_list_only:
      name: user_groups_list_only
      id: aws.elasticache.user_groups_list_only
      x-cfn-schema-name: UserGroup
      x-cfn-type-name: AWS::ElastiCache::UserGroup
      x-identifiers:
        - UserGroupId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserGroupId') as user_group_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::UserGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserGroupId') as user_group_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::UserGroup'
                AND region = 'us-east-1'
    user_group_tags:
      name: user_group_tags
      id: aws.elasticache.user_group_tags
      x-cfn-schema-name: UserGroup
      x-cfn-type-name: AWS::ElastiCache::UserGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.UserGroupId') as user_group_id,
              JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
              JSON_EXTRACT(detail.Properties, '$.UserIds') as user_ids,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ElastiCache::UserGroup'
              AND detail.data__TypeName = 'AWS::ElastiCache::UserGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'UserGroupId') as user_group_id,
                json_extract_path_text(detail.Properties, 'Engine') as engine,
                json_extract_path_text(detail.Properties, 'UserIds') as user_ids,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ElastiCache::UserGroup'
                AND detail.data__TypeName = 'AWS::ElastiCache::UserGroup'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__GlobalReplicationGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateGlobalReplicationGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateGlobalReplicationGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ParameterGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateParameterGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateParameterGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ServerlessCache&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateServerlessCache
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateServerlessCacheRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SubnetGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSubnetGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSubnetGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__User&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateUser
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__UserGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateUserGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateUserGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
