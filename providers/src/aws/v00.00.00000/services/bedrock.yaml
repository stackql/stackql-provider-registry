openapi: 3.0.0
info:
  title: Bedrock
  version: 1.0.0
paths: {}
components:
  schemas:
    APISchema:
      description: Contains information about the API Schema for the Action Group
      oneOf:
        - type: object
          title: S3
          properties:
            S3:
              $ref: '#/components/schemas/S3Identifier'
          required:
            - S3
          additionalProperties: false
        - type: object
          title: Payload
          properties:
            Payload:
              type: string
              description: String OpenAPI Payload
          required:
            - Payload
          additionalProperties: false
    ActionGroupExecutor:
      type: object
      x-title: Lambda
      properties:
        Lambda:
          type: string
          maxLength: 2048
          pattern: ^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_\.]+(:(\$LATEST|[a-zA-Z0-9-_]+))?$
          description: ARN of a Lambda.
      required:
        - Lambda
      additionalProperties: false
    ActionGroupSignature:
      type: string
      description: Action Group Signature for a BuiltIn Action
      enum:
        - AMAZON.UserInput
    ActionGroupState:
      type: string
      description: State of the action group
      enum:
        - ENABLED
        - DISABLED
    AgentActionGroup:
      type: object
      description: Contains the information of an Agent Action Group
      properties:
        ActionGroupName:
          type: string
          pattern: ^([0-9a-zA-Z][_-]?){1,100}$
          description: Name of the action group
        Description:
          type: string
          maxLength: 200
          minLength: 1
          description: Description of action group
        ParentActionGroupSignature:
          $ref: '#/components/schemas/ActionGroupSignature'
        ActionGroupExecutor:
          $ref: '#/components/schemas/ActionGroupExecutor'
        ApiSchema:
          $ref: '#/components/schemas/APISchema'
        ActionGroupState:
          $ref: '#/components/schemas/ActionGroupState'
        SkipResourceInUseCheckOnDelete:
          description: Specifies whether to allow deleting action group while it is in use.
          type: boolean
          default: false
      required:
        - ActionGroupName
      additionalProperties: false
    AgentKnowledgeBase:
      type: object
      description: Agent Knowledge Base
      properties:
        KnowledgeBaseId:
          type: string
          pattern: ^[0-9a-zA-Z]{10}$
          description: Identifier for a resource.
        Description:
          type: string
          maxLength: 200
          minLength: 1
          description: Description of the Resource.
        KnowledgeBaseState:
          $ref: '#/components/schemas/KnowledgeBaseState'
      required:
        - KnowledgeBaseId
        - Description
      additionalProperties: false
    AgentStatus:
      type: string
      description: Schema Type for Action APIs.
      enum:
        - CREATING
        - PREPARING
        - PREPARED
        - NOT_PREPARED
        - DELETING
        - FAILED
        - VERSIONING
        - UPDATING
    CreationMode:
      type: string
      description: Creation Mode for Prompt Configuration.
      enum:
        - DEFAULT
        - OVERRIDDEN
    InferenceConfiguration:
      type: object
      description: Configuration for inference in prompt configuration
      properties:
        Temperature:
          type: number
          maximum: 1
          minimum: 0
          description: Controls randomness, higher values increase diversity
        TopP:
          type: number
          maximum: 1
          minimum: 0
          description: Cumulative probability cutoff for token selection
        TopK:
          type: number
          maximum: 500
          minimum: 0
          description: Sample from the k most likely next tokens
        MaximumLength:
          type: number
          maximum: 4096
          minimum: 0
          description: Maximum length of output
        StopSequences:
          type: array
          items:
            type: string
          maxItems: 4
          minItems: 0
          description: List of stop sequences
          x-insertionOrder: false
      additionalProperties: false
    KnowledgeBaseState:
      type: string
      description: State of the knowledge base; whether it is enabled or disabled
      enum:
        - ENABLED
        - DISABLED
    PromptConfiguration:
      type: object
      description: BasePromptConfiguration per Prompt Type.
      properties:
        PromptType:
          $ref: '#/components/schemas/PromptType'
        PromptCreationMode:
          $ref: '#/components/schemas/CreationMode'
        PromptState:
          $ref: '#/components/schemas/PromptState'
        BasePromptTemplate:
          type: string
          maxLength: 100000
          minLength: 1
          description: Base Prompt Template.
        InferenceConfiguration:
          $ref: '#/components/schemas/InferenceConfiguration'
        ParserMode:
          $ref: '#/components/schemas/CreationMode'
      additionalProperties: false
    PromptOverrideConfiguration:
      type: object
      description: Configuration for prompt override.
      properties:
        PromptConfigurations:
          type: array
          items:
            $ref: '#/components/schemas/PromptConfiguration'
          maxItems: 10
          description: List of BasePromptConfiguration
          x-insertionOrder: false
        OverrideLambda:
          type: string
          maxLength: 2048
          pattern: ^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_\.]+(:(\$LATEST|[a-zA-Z0-9-_]+))?$
          description: ARN of a Lambda.
      required:
        - PromptConfigurations
      additionalProperties: false
    PromptState:
      type: string
      description: Prompt State.
      enum:
        - ENABLED
        - DISABLED
    PromptType:
      type: string
      description: Prompt Type.
      enum:
        - PRE_PROCESSING
        - ORCHESTRATION
        - POST_PROCESSING
        - KNOWLEDGE_BASE_RESPONSE_GENERATION
    S3Identifier:
      type: object
      description: The identifier for the S3 resource.
      properties:
        S3BucketName:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$
          description: A bucket in S3.
        S3ObjectKey:
          type: string
          maxLength: 1024
          minLength: 1
          pattern: ^[\.\-\!\*\_\'\(\)a-zA-Z0-9][\.\-\!\*\_\'\(\)\/a-zA-Z0-9]*$
          description: A object key in S3.
      additionalProperties: false
    TagsMap:
      type: object
      description: A map of tag keys and values
      x-patternProperties:
        ^[a-zA-Z0-9\s._:/=+@-]*$:
          type: string
          maxLength: 256
          minLength: 0
          pattern: ^[a-zA-Z0-9\s._:/=+@-]*$
          description: Value of a tag
      additionalProperties: false
    Agent:
      type: object
      properties:
        ActionGroups:
          type: array
          items:
            $ref: '#/components/schemas/AgentActionGroup'
          description: List of ActionGroups
          x-insertionOrder: false
        AgentArn:
          type: string
          maxLength: 2048
          pattern: ^arn:aws(|-cn|-us-gov):bedrock:[a-z0-9-]{1,20}:[0-9]{12}:agent/[0-9a-zA-Z]{10}$
          description: Arn representation of the Agent.
        AgentId:
          type: string
          pattern: ^[0-9a-zA-Z]{10}$
          description: Identifier for a resource.
        AgentName:
          type: string
          pattern: ^([0-9a-zA-Z][_-]?){1,100}$
          description: Name for a resource.
        AgentResourceRoleArn:
          type: string
          maxLength: 2048
          pattern: ^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/(service-role/)?AmazonBedrockExecutionRoleForAgents.+$
          description: ARN of a IAM role.
        AgentStatus:
          $ref: '#/components/schemas/AgentStatus'
        AgentVersion:
          type: string
          maxLength: 5
          minLength: 5
          pattern: ^DRAFT$
          description: Draft Agent Version.
        AutoPrepare:
          description: Specifies whether to automatically prepare after creating or updating the agent.
          type: boolean
          default: false
        CreatedAt:
          type: string
          description: Time Stamp.
          format: date-time
        CustomerEncryptionKeyArn:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$
          description: A KMS key ARN
        SkipResourceInUseCheckOnDelete:
          description: Specifies whether to allow deleting agent while it is in use.
          type: boolean
          default: false
        Description:
          type: string
          maxLength: 200
          minLength: 1
          description: Description of the Resource.
        FailureReasons:
          type: array
          items:
            type: string
            maxLength: 2048
            description: Failure Reason for Error.
          maxItems: 2048
          description: Failure Reasons for Error.
          x-insertionOrder: false
        FoundationModel:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:(([0-9]{12}:custom-model/[a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}(([:][a-z0-9-]{1,63}){0,2})?/[a-z0-9]{12})|(:foundation-model/([a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}([.]?[a-z0-9-]{1,63})([:][a-z0-9-]{1,63}){0,2})))|(([a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}([.]?[a-z0-9-]{1,63})([:][a-z0-9-]{1,63}){0,2}))|(([0-9a-zA-Z][_-]?)+)$
          description: ARN or name of a Bedrock model.
        IdleSessionTTLInSeconds:
          type: number
          maximum: 3600
          minimum: 60
          description: Max Session Time.
        Instruction:
          type: string
          maxLength: 1200
          minLength: 40
          description: Instruction for the agent.
        KnowledgeBases:
          type: array
          items:
            $ref: '#/components/schemas/AgentKnowledgeBase'
          description: List of Agent Knowledge Bases
          x-insertionOrder: false
        PreparedAt:
          type: string
          description: Time Stamp.
          format: date-time
        PromptOverrideConfiguration:
          $ref: '#/components/schemas/PromptOverrideConfiguration'
        RecommendedActions:
          type: array
          items:
            type: string
            maxLength: 2048
            description: The recommended action users can take to resolve an error in failureReasons.
          maxItems: 2048
          description: The recommended actions users can take to resolve an error in failureReasons.
          x-insertionOrder: false
        Tags:
          $ref: '#/components/schemas/TagsMap'
        UpdatedAt:
          type: string
          description: Time Stamp.
          format: date-time
      required:
        - AgentName
      x-stackql-resource-name: agent
      description: Definition of AWS::Bedrock::Agent Resource Type
      x-type-name: AWS::Bedrock::Agent
      x-stackql-primary-identifier:
        - AgentId
      x-write-only-properties:
        - AutoPrepare
        - SkipResourceInUseCheckOnDelete
        - ActionGroups/*/SkipResourceInUseCheckOnDelete
      x-read-only-properties:
        - AgentArn
        - AgentId
        - AgentStatus
        - AgentVersion
        - CreatedAt
        - FailureReasons
        - PreparedAt
        - RecommendedActions
        - UpdatedAt
      x-required-properties:
        - AgentName
      x-tagging:
        cloudFormationSystemTags: false
        tagOnCreate: true
        tagProperty: /properties/Tags
        tagUpdatable: true
        taggable: true
      x-required-permissions:
        create:
          - bedrock:CreateAgent
          - bedrock:GetAgent
          - bedrock:PrepareAgent
          - bedrock:GetAgentKnowledgeBase
          - bedrock:AssociateAgentKnowledgeBase
          - bedrock:ListAgentKnowledgeBases
          - bedrock:CreateAgentActionGroup
          - bedrock:GetAgentActionGroup
          - bedrock:ListAgentActionGroups
          - bedrock:TagResource
          - bedrock:ListTagsForResource
          - iam:PassRole
        read:
          - bedrock:GetAgent
          - bedrock:GetAgentActionGroup
          - bedrock:ListAgentActionGroups
          - bedrock:GetAgentKnowledgeBase
          - bedrock:ListAgentKnowledgeBases
          - bedrock:ListTagsForResource
        update:
          - bedrock:GetAgent
          - bedrock:UpdateAgent
          - bedrock:PrepareAgent
          - bedrock:GetAgentKnowledgeBase
          - bedrock:UpdateAgentKnowledgeBase
          - bedrock:AssociateAgentKnowledgeBase
          - bedrock:DisassociateAgentKnowledgeBase
          - bedrock:ListAgentKnowledgeBases
          - bedrock:CreateAgentActionGroup
          - bedrock:GetAgentActionGroup
          - bedrock:UpdateAgentActionGroup
          - bedrock:DeleteAgentActionGroup
          - bedrock:ListAgentActionGroups
          - bedrock:TagResource
          - bedrock:UntagResource
          - bedrock:ListTagsForResource
          - iam:PassRole
        delete:
          - bedrock:GetAgent
          - bedrock:DeleteAgent
        list:
          - bedrock:ListAgents
    AgentAliasHistoryEvent:
      type: object
      description: History event for an alias for an Agent.
      properties:
        RoutingConfiguration:
          type: array
          items:
            $ref: '#/components/schemas/AgentAliasRoutingConfigurationListItem'
          maxItems: 1
          description: Routing configuration for an Agent alias.
          x-insertionOrder: false
        EndDate:
          type: string
          description: Time Stamp.
        StartDate:
          type: string
          description: Time Stamp.
      additionalProperties: false
    AgentAliasRoutingConfigurationListItem:
      type: object
      description: Details about the routing configuration for an Agent alias.
      properties:
        AgentVersion:
          type: string
          maxLength: 5
          minLength: 1
          pattern: ^(DRAFT|[0-9]{0,4}[1-9][0-9]{0,4})$
          description: Agent Version.
      required:
        - AgentVersion
      additionalProperties: false
    AgentAliasStatus:
      type: string
      description: The statuses an Agent Alias can be in.
      enum:
        - CREATING
        - PREPARED
        - FAILED
        - UPDATING
        - DELETING
    AgentAlias:
      type: object
      properties:
        AgentAliasArn:
          type: string
          maxLength: 2048
          pattern: ^arn:aws(|-cn|-us-gov):bedrock:[a-z0-9-]{1,20}:[0-9]{12}:agent-alias/[0-9a-zA-Z]{10}/[0-9a-zA-Z]{10}$
          description: Arn representation of the Agent Alias.
        AgentAliasHistoryEvents:
          type: array
          items:
            $ref: '#/components/schemas/AgentAliasHistoryEvent'
          maxItems: 10
          description: The list of history events for an alias for an Agent.
          x-insertionOrder: false
        AgentAliasId:
          type: string
          maxLength: 10
          minLength: 10
          pattern: ^(\bTSTALIASID\b|[0-9a-zA-Z]+)$
          description: Id for an Agent Alias generated at the server side.
        AgentAliasName:
          type: string
          pattern: ^([0-9a-zA-Z][_-]?){1,100}$
          description: Name for a resource.
        AgentAliasStatus:
          $ref: '#/components/schemas/AgentAliasStatus'
        AgentId:
          type: string
          pattern: ^[0-9a-zA-Z]{10}$
          description: Identifier for a resource.
        CreatedAt:
          type: string
          description: Time Stamp.
        Description:
          type: string
          maxLength: 200
          minLength: 1
          description: Description of the Resource.
        RoutingConfiguration:
          type: array
          items:
            $ref: '#/components/schemas/AgentAliasRoutingConfigurationListItem'
          maxItems: 1
          description: Routing configuration for an Agent alias.
          x-insertionOrder: false
        Tags:
          $ref: '#/components/schemas/TagsMap'
        UpdatedAt:
          type: string
          description: Time Stamp.
      required:
        - AgentAliasName
        - AgentId
      x-stackql-resource-name: agent_alias
      description: Definition of AWS::Bedrock::AgentAlias Resource Type
      x-type-name: AWS::Bedrock::AgentAlias
      x-stackql-primary-identifier:
        - AgentId
        - AgentAliasId
      x-stackql-additional-identifiers:
        - - AgentAliasArn
      x-create-only-properties:
        - AgentId
      x-read-only-properties:
        - AgentAliasArn
        - AgentAliasHistoryEvents
        - AgentAliasId
        - AgentAliasStatus
        - CreatedAt
        - UpdatedAt
      x-required-properties:
        - AgentAliasName
        - AgentId
      x-tagging:
        cloudFormationSystemTags: false
        tagOnCreate: true
        tagProperty: /properties/Tags
        tagUpdatable: true
        taggable: true
      x-required-permissions:
        create:
          - bedrock:PrepareAgent
          - bedrock:GetAgent
          - bedrock:CreateAgentAlias
          - bedrock:TagResource
          - bedrock:GetAgentAlias
          - bedrock:ListTagsForResource
        read:
          - bedrock:GetAgentAlias
          - bedrock:ListTagsForResource
        update:
          - bedrock:PrepareAgent
          - bedrock:GetAgent
          - bedrock:UpdateAgentAlias
          - bedrock:TagResource
          - bedrock:UntagResource
          - bedrock:GetAgentAlias
          - bedrock:ListTagsForResource
        delete:
          - bedrock:DeleteAgentAlias
        list:
          - bedrock:ListAgentAliases
    ChunkingConfiguration:
      type: object
      description: Details about how to chunk the documents in the data source. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried.
      properties:
        ChunkingStrategy:
          $ref: '#/components/schemas/ChunkingStrategy'
        FixedSizeChunkingConfiguration:
          $ref: '#/components/schemas/FixedSizeChunkingConfiguration'
      required:
        - ChunkingStrategy
      additionalProperties: false
    ChunkingStrategy:
      type: string
      description: Knowledge base can split your source data into chunks. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried. You have the following options for chunking your data. If you opt for NONE, then you may want to pre-process your files by splitting them up such that each file corresponds to a chunk.
      enum:
        - FIXED_SIZE
        - NONE
    DataSourceConfiguration:
      type: object
      description: Specifies a raw data source location to ingest.
      properties:
        Type:
          $ref: '#/components/schemas/DataSourceType'
        S3Configuration:
          $ref: '#/components/schemas/S3DataSourceConfiguration'
      required:
        - Type
        - S3Configuration
      additionalProperties: false
    DataSourceStatus:
      type: string
      description: The status of a data source.
      enum:
        - AVAILABLE
        - DELETING
    DataSourceType:
      type: string
      description: The type of the data source location.
      enum:
        - S3
    FixedSizeChunkingConfiguration:
      type: object
      description: Configurations for when you choose fixed-size chunking. If you set the chunkingStrategy as NONE, exclude this field.
      properties:
        MaxTokens:
          type: integer
          minimum: 1
          description: The maximum number of tokens to include in a chunk.
        OverlapPercentage:
          type: integer
          maximum: 99
          minimum: 1
          description: The percentage of overlap between adjacent chunks of a data source.
      required:
        - MaxTokens
        - OverlapPercentage
      additionalProperties: false
    S3DataSourceConfiguration:
      type: object
      description: Contains information about the S3 configuration of the data source.
      properties:
        BucketArn:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^arn:aws(|-cn|-us-gov):s3:::[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$
          description: The ARN of the bucket that contains the data source.
        InclusionPrefixes:
          type: array
          items:
            type: string
            maxLength: 300
            minLength: 1
            description: Prefix for s3 object.
          maxItems: 1
          minItems: 1
          description: A list of S3 prefixes that define the object containing the data sources.
          x-insertionOrder: false
      required:
        - BucketArn
      additionalProperties: false
    ServerSideEncryptionConfiguration:
      type: object
      description: Contains details about the server-side encryption for the data source.
      properties:
        KmsKeyArn:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$
          description: The ARN of the AWS KMS key used to encrypt the resource.
      additionalProperties: false
    VectorIngestionConfiguration:
      type: object
      description: Details about how to chunk the documents in the data source. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried.
      properties:
        ChunkingConfiguration:
          $ref: '#/components/schemas/ChunkingConfiguration'
      additionalProperties: false
    DataSource:
      type: object
      properties:
        DataSourceConfiguration:
          $ref: '#/components/schemas/DataSourceConfiguration'
        DataSourceId:
          type: string
          pattern: ^[0-9a-zA-Z]{10}$
          description: Identifier for a resource.
        Description:
          type: string
          maxLength: 200
          minLength: 1
          description: Description of the Resource.
        KnowledgeBaseId:
          type: string
          pattern: ^[0-9a-zA-Z]{10}$
          description: The unique identifier of the knowledge base to which to add the data source.
        DataSourceStatus:
          $ref: '#/components/schemas/DataSourceStatus'
        Name:
          type: string
          pattern: ^([0-9a-zA-Z][_-]?){1,100}$
          description: The name of the data source.
        ServerSideEncryptionConfiguration:
          $ref: '#/components/schemas/ServerSideEncryptionConfiguration'
        VectorIngestionConfiguration:
          $ref: '#/components/schemas/VectorIngestionConfiguration'
        CreatedAt:
          type: string
          description: The time at which the data source was created.
        UpdatedAt:
          type: string
          description: The time at which the knowledge base was last updated.
      required:
        - DataSourceConfiguration
        - Name
        - KnowledgeBaseId
      x-stackql-resource-name: data_source
      description: Definition of AWS::Bedrock::DataSource Resource Type
      x-type-name: AWS::Bedrock::DataSource
      x-stackql-primary-identifier:
        - KnowledgeBaseId
        - DataSourceId
      x-create-only-properties:
        - KnowledgeBaseId
        - VectorIngestionConfiguration
      x-read-only-properties:
        - DataSourceId
        - DataSourceStatus
        - CreatedAt
        - UpdatedAt
      x-required-properties:
        - DataSourceConfiguration
        - Name
        - KnowledgeBaseId
      x-tagging:
        taggable: false
        cloudFormationSystemTags: true
      x-required-permissions:
        create:
          - bedrock:CreateDataSource
          - bedrock:GetDataSource
          - bedrock:GetKnowledgeBase
        read:
          - bedrock:GetDataSource
        update:
          - bedrock:GetDataSource
          - bedrock:UpdateDataSource
        delete:
          - bedrock:GetDataSource
          - bedrock:DeleteDataSource
        list:
          - bedrock:ListDataSources
    KnowledgeBaseConfiguration:
      type: object
      description: Contains details about the embeddings model used for the knowledge base.
      properties:
        Type:
          $ref: '#/components/schemas/KnowledgeBaseType'
        VectorKnowledgeBaseConfiguration:
          $ref: '#/components/schemas/VectorKnowledgeBaseConfiguration'
      required:
        - Type
        - VectorKnowledgeBaseConfiguration
      additionalProperties: false
    KnowledgeBaseStatus:
      type: string
      description: The status of a knowledge base.
      enum:
        - CREATING
        - ACTIVE
        - DELETING
        - UPDATING
        - FAILED
    KnowledgeBaseStorageType:
      type: string
      description: The storage type of a knowledge base.
      enum:
        - OPENSEARCH_SERVERLESS
        - PINECONE
        - RDS
    KnowledgeBaseType:
      type: string
      description: The type of a knowledge base.
      enum:
        - VECTOR
    OpenSearchServerlessConfiguration:
      type: object
      description: Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.
      properties:
        CollectionArn:
          type: string
          maxLength: 2048
          pattern: ^arn:aws:aoss:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:collection/[a-z0-9-]{3,32}$
          description: The ARN of the OpenSearch Service vector store.
        VectorIndexName:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The name of the vector store.
        FieldMapping:
          $ref: '#/components/schemas/OpenSearchServerlessFieldMapping'
      required:
        - CollectionArn
        - FieldMapping
        - VectorIndexName
      additionalProperties: false
    OpenSearchServerlessFieldMapping:
      type: object
      description: A mapping of Bedrock Knowledge Base fields to OpenSearch Serverless field names
      properties:
        VectorField:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
        TextField:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
        MetadataField:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The name of the field in which Amazon Bedrock stores metadata about the vector store.
      required:
        - MetadataField
        - TextField
        - VectorField
      additionalProperties: false
    PineconeConfiguration:
      type: object
      description: Contains the storage configuration of the knowledge base in Pinecone.
      properties:
        ConnectionString:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The endpoint URL for your index management page.
        CredentialsSecretArn:
          type: string
          pattern: ^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$
          description: The ARN of the secret that you created in AWS Secrets Manager that is linked to your Pinecone API key.
        Namespace:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The namespace to be used to write new data to your database.
        FieldMapping:
          $ref: '#/components/schemas/PineconeFieldMapping'
      required:
        - ConnectionString
        - CredentialsSecretArn
        - FieldMapping
      additionalProperties: false
    PineconeFieldMapping:
      type: object
      description: Contains the names of the fields to which to map information about the vector store.
      properties:
        TextField:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
        MetadataField:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The name of the field in which Amazon Bedrock stores metadata about the vector store.
      required:
        - MetadataField
        - TextField
      additionalProperties: false
    RdsConfiguration:
      type: object
      description: Contains details about the storage configuration of the knowledge base in Amazon RDS. For more information, see Create a vector index in Amazon RDS.
      properties:
        ResourceArn:
          type: string
          pattern: ^arn:aws(|-cn|-us-gov):rds:[a-zA-Z0-9-]*:[0-9]{12}:cluster:[a-zA-Z0-9-]{1,63}$
          description: The ARN of the vector store.
        CredentialsSecretArn:
          type: string
          pattern: ^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$
          description: The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon RDS database.
        DatabaseName:
          type: string
          maxLength: 63
          pattern: ^[a-zA-Z0-9_\-]+$
          description: The name of your Amazon RDS database.
        TableName:
          type: string
          maxLength: 63
          pattern: ^[a-zA-Z0-9_\.\-]+$
          description: The name of the table in the database.
        FieldMapping:
          $ref: '#/components/schemas/RdsFieldMapping'
      required:
        - CredentialsSecretArn
        - DatabaseName
        - FieldMapping
        - ResourceArn
        - TableName
      additionalProperties: false
    RdsFieldMapping:
      type: object
      description: Contains the names of the fields to which to map information about the vector store.
      properties:
        PrimaryKeyField:
          type: string
          maxLength: 63
          pattern: ^[a-zA-Z0-9_\-]+$
          description: The name of the field in which Amazon Bedrock stores the ID for each entry.
        VectorField:
          type: string
          maxLength: 63
          pattern: ^[a-zA-Z0-9_\-]+$
          description: The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
        TextField:
          type: string
          maxLength: 63
          pattern: ^[a-zA-Z0-9_\-]+$
          description: The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
        MetadataField:
          type: string
          maxLength: 63
          pattern: ^[a-zA-Z0-9_\-]+$
          description: The name of the field in which Amazon Bedrock stores metadata about the vector store.
      required:
        - MetadataField
        - PrimaryKeyField
        - TextField
        - VectorField
      additionalProperties: false
    RedisEnterpriseCloudConfiguration:
      type: object
      description: Contains the storage configuration of the knowledge base in Redis Enterprise Cloud.
      properties:
        Endpoint:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The endpoint URL of the Redis Enterprise Cloud database.
        VectorIndexName:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The name of the vector index.
        CredentialsSecretArn:
          type: string
          pattern: ^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$
          description: The ARN of the secret that you created in AWS Secrets Manager that is linked to your Redis Enterprise Cloud database.
        FieldMapping:
          $ref: '#/components/schemas/RedisEnterpriseCloudFieldMapping'
      required:
        - CredentialsSecretArn
        - Endpoint
        - FieldMapping
        - VectorIndexName
      additionalProperties: false
    RedisEnterpriseCloudFieldMapping:
      type: object
      description: Contains the names of the fields to which to map information about the vector store.
      properties:
        VectorField:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
        TextField:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
        MetadataField:
          type: string
          maxLength: 2048
          pattern: ^.*$
          description: The name of the field in which Amazon Bedrock stores metadata about the vector store.
      required:
        - MetadataField
        - TextField
        - VectorField
      additionalProperties: false
    StorageConfiguration:
      type: object
      description: The vector store service in which the knowledge base is stored.
      properties:
        Type:
          $ref: '#/components/schemas/KnowledgeBaseStorageType'
        OpensearchServerlessConfiguration:
          $ref: '#/components/schemas/OpenSearchServerlessConfiguration'
        PineconeConfiguration:
          $ref: '#/components/schemas/PineconeConfiguration'
        RdsConfiguration:
          $ref: '#/components/schemas/RdsConfiguration'
      required:
        - Type
      oneOf:
        - required:
            - OpensearchServerlessConfiguration
        - required:
            - PineconeConfiguration
        - required:
            - RdsConfiguration
      additionalProperties: false
    VectorKnowledgeBaseConfiguration:
      type: object
      description: Contains details about the model used to create vector embeddings for the knowledge base.
      properties:
        EmbeddingModelArn:
          type: string
          maxLength: 1011
          minLength: 20
          pattern: ^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:(([0-9]{12}:custom-model/[a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}/[a-z0-9]{12})|(:foundation-model/[a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}))$
          description: The ARN of the model used to create vector embeddings for the knowledge base.
      required:
        - EmbeddingModelArn
      additionalProperties: false
    KnowledgeBase:
      type: object
      properties:
        Description:
          type: string
          maxLength: 200
          minLength: 1
          description: Description of the Resource.
        KnowledgeBaseConfiguration:
          $ref: '#/components/schemas/KnowledgeBaseConfiguration'
        KnowledgeBaseId:
          type: string
          pattern: ^[0-9a-zA-Z]{10}$
          description: The unique identifier of the knowledge base.
        KnowledgeBaseArn:
          type: string
          maxLength: 128
          minLength: 0
          pattern: ^arn:aws(|-cn|-us-gov):bedrock:[a-zA-Z0-9-]*:[0-9]{12}:knowledge-base/[0-9a-zA-Z]+$
          description: The ARN of the knowledge base.
        Name:
          type: string
          pattern: ^([0-9a-zA-Z][_-]?){1,100}$
          description: The name of the knowledge base.
        Status:
          $ref: '#/components/schemas/KnowledgeBaseStatus'
        RoleArn:
          type: string
          maxLength: 2048
          pattern: ^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/.+$
          description: The ARN of the IAM role with permissions to invoke API operations on the knowledge base. The ARN must begin with AmazonBedrockExecutionRoleForKnowledgeBase_
        CreatedAt:
          type: string
          description: The time at which the knowledge base was created.
        FailureReasons:
          type: array
          items:
            type: string
            maxLength: 2048
            description: Failure Reason for Error.
          maxItems: 2048
          description: A list of reasons that the API operation on the knowledge base failed.
          x-insertionOrder: false
        UpdatedAt:
          type: string
          description: The time at which the knowledge base was last updated.
        StorageConfiguration:
          $ref: '#/components/schemas/StorageConfiguration'
        Tags:
          $ref: '#/components/schemas/TagsMap'
      required:
        - KnowledgeBaseConfiguration
        - Name
        - RoleArn
        - StorageConfiguration
      x-stackql-resource-name: knowledge_base
      description: Definition of AWS::Bedrock::KnowledgeBase Resource Type
      x-type-name: AWS::Bedrock::KnowledgeBase
      x-stackql-primary-identifier:
        - KnowledgeBaseId
      x-create-only-properties:
        - StorageConfiguration
        - KnowledgeBaseConfiguration
      x-read-only-properties:
        - KnowledgeBaseId
        - KnowledgeBaseArn
        - CreatedAt
        - UpdatedAt
        - FailureReasons
        - Status
      x-required-properties:
        - KnowledgeBaseConfiguration
        - Name
        - RoleArn
        - StorageConfiguration
      x-tagging:
        cloudFormationSystemTags: true
        tagOnCreate: true
        tagProperty: /properties/Tags
        tagUpdatable: true
        taggable: true
      x-required-permissions:
        create:
          - bedrock:CreateKnowledgeBase
          - bedrock:GetKnowledgeBase
          - bedrock:TagResource
          - bedrock:ListTagsForResource
          - bedrock:AssociateThirdPartyKnowledgeBase
          - iam:PassRole
        read:
          - bedrock:GetKnowledgeBase
          - bedrock:ListTagsForResource
        update:
          - bedrock:GetKnowledgeBase
          - bedrock:UpdateKnowledgeBase
          - bedrock:TagResource
          - bedrock:UntagResource
          - bedrock:ListTagsForResource
          - bedrock:AssociateThirdPartyKnowledgeBase
          - iam:PassRole
        delete:
          - bedrock:GetKnowledgeBase
          - bedrock:DeleteKnowledgeBase
          - bedrock:ListDataSources
        list:
          - bedrock:ListKnowledgeBases
  x-stackQL-resources:
    agents:
      name: agents
      id: aws.bedrock.agents
      x-cfn-schema-name: Agent
      x-type: list
      x-identifiers:
        - AgentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AgentId') as agent_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Bedrock::Agent'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AgentId') as agent_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Bedrock::Agent'
                AND region = 'us-east-1'
    agent:
      name: agent
      id: aws.bedrock.agent
      x-cfn-schema-name: Agent
      x-type: get
      x-identifiers:
        - AgentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ActionGroups') as action_groups,
              JSON_EXTRACT(Properties, '$.AgentArn') as agent_arn,
              JSON_EXTRACT(Properties, '$.AgentId') as agent_id,
              JSON_EXTRACT(Properties, '$.AgentName') as agent_name,
              JSON_EXTRACT(Properties, '$.AgentResourceRoleArn') as agent_resource_role_arn,
              JSON_EXTRACT(Properties, '$.AgentStatus') as agent_status,
              JSON_EXTRACT(Properties, '$.AgentVersion') as agent_version,
              JSON_EXTRACT(Properties, '$.AutoPrepare') as auto_prepare,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.CustomerEncryptionKeyArn') as customer_encryption_key_arn,
              JSON_EXTRACT(Properties, '$.SkipResourceInUseCheckOnDelete') as skip_resource_in_use_check_on_delete,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FailureReasons') as failure_reasons,
              JSON_EXTRACT(Properties, '$.FoundationModel') as foundation_model,
              JSON_EXTRACT(Properties, '$.IdleSessionTTLInSeconds') as idle_session_ttl_in_seconds,
              JSON_EXTRACT(Properties, '$.Instruction') as instruction,
              JSON_EXTRACT(Properties, '$.KnowledgeBases') as knowledge_bases,
              JSON_EXTRACT(Properties, '$.PreparedAt') as prepared_at,
              JSON_EXTRACT(Properties, '$.PromptOverrideConfiguration') as prompt_override_configuration,
              JSON_EXTRACT(Properties, '$.RecommendedActions') as recommended_actions,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Bedrock::Agent'
              AND data__Identifier = '<AgentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ActionGroups') as action_groups,
                json_extract_path_text(Properties, 'AgentArn') as agent_arn,
                json_extract_path_text(Properties, 'AgentId') as agent_id,
                json_extract_path_text(Properties, 'AgentName') as agent_name,
                json_extract_path_text(Properties, 'AgentResourceRoleArn') as agent_resource_role_arn,
                json_extract_path_text(Properties, 'AgentStatus') as agent_status,
                json_extract_path_text(Properties, 'AgentVersion') as agent_version,
                json_extract_path_text(Properties, 'AutoPrepare') as auto_prepare,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'CustomerEncryptionKeyArn') as customer_encryption_key_arn,
                json_extract_path_text(Properties, 'SkipResourceInUseCheckOnDelete') as skip_resource_in_use_check_on_delete,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'FailureReasons') as failure_reasons,
                json_extract_path_text(Properties, 'FoundationModel') as foundation_model,
                json_extract_path_text(Properties, 'IdleSessionTTLInSeconds') as idle_session_ttl_in_seconds,
                json_extract_path_text(Properties, 'Instruction') as instruction,
                json_extract_path_text(Properties, 'KnowledgeBases') as knowledge_bases,
                json_extract_path_text(Properties, 'PreparedAt') as prepared_at,
                json_extract_path_text(Properties, 'PromptOverrideConfiguration') as prompt_override_configuration,
                json_extract_path_text(Properties, 'RecommendedActions') as recommended_actions,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Bedrock::Agent'
                AND data__Identifier = '<AgentId>'
                AND region = 'us-east-1'
    agent_aliases:
      name: agent_aliases
      id: aws.bedrock.agent_aliases
      x-cfn-schema-name: AgentAlias
      x-type: list
      x-identifiers:
        - AgentId
        - AgentAliasId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AgentId') as agent_id,
              JSON_EXTRACT(Properties, '$.AgentAliasId') as agent_alias_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Bedrock::AgentAlias'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AgentId') as agent_id,
                json_extract_path_text(Properties, 'AgentAliasId') as agent_alias_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Bedrock::AgentAlias'
                AND region = 'us-east-1'
    agent_alias:
      name: agent_alias
      id: aws.bedrock.agent_alias
      x-cfn-schema-name: AgentAlias
      x-type: get
      x-identifiers:
        - AgentId
        - AgentAliasId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AgentAliasArn') as agent_alias_arn,
              JSON_EXTRACT(Properties, '$.AgentAliasHistoryEvents') as agent_alias_history_events,
              JSON_EXTRACT(Properties, '$.AgentAliasId') as agent_alias_id,
              JSON_EXTRACT(Properties, '$.AgentAliasName') as agent_alias_name,
              JSON_EXTRACT(Properties, '$.AgentAliasStatus') as agent_alias_status,
              JSON_EXTRACT(Properties, '$.AgentId') as agent_id,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.RoutingConfiguration') as routing_configuration,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Bedrock::AgentAlias'
              AND data__Identifier = '<AgentId>|<AgentAliasId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AgentAliasArn') as agent_alias_arn,
                json_extract_path_text(Properties, 'AgentAliasHistoryEvents') as agent_alias_history_events,
                json_extract_path_text(Properties, 'AgentAliasId') as agent_alias_id,
                json_extract_path_text(Properties, 'AgentAliasName') as agent_alias_name,
                json_extract_path_text(Properties, 'AgentAliasStatus') as agent_alias_status,
                json_extract_path_text(Properties, 'AgentId') as agent_id,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'RoutingConfiguration') as routing_configuration,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Bedrock::AgentAlias'
                AND data__Identifier = '<AgentId>|<AgentAliasId>'
                AND region = 'us-east-1'
    data_sources:
      name: data_sources
      id: aws.bedrock.data_sources
      x-cfn-schema-name: DataSource
      x-type: list
      x-identifiers:
        - KnowledgeBaseId
        - DataSourceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.KnowledgeBaseId') as knowledge_base_id,
              JSON_EXTRACT(Properties, '$.DataSourceId') as data_source_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Bedrock::DataSource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'KnowledgeBaseId') as knowledge_base_id,
                json_extract_path_text(Properties, 'DataSourceId') as data_source_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Bedrock::DataSource'
                AND region = 'us-east-1'
    data_source:
      name: data_source
      id: aws.bedrock.data_source
      x-cfn-schema-name: DataSource
      x-type: get
      x-identifiers:
        - KnowledgeBaseId
        - DataSourceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DataSourceConfiguration') as data_source_configuration,
              JSON_EXTRACT(Properties, '$.DataSourceId') as data_source_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.KnowledgeBaseId') as knowledge_base_id,
              JSON_EXTRACT(Properties, '$.DataSourceStatus') as data_source_status,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ServerSideEncryptionConfiguration') as server_side_encryption_configuration,
              JSON_EXTRACT(Properties, '$.VectorIngestionConfiguration') as vector_ingestion_configuration,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Bedrock::DataSource'
              AND data__Identifier = '<KnowledgeBaseId>|<DataSourceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DataSourceConfiguration') as data_source_configuration,
                json_extract_path_text(Properties, 'DataSourceId') as data_source_id,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'KnowledgeBaseId') as knowledge_base_id,
                json_extract_path_text(Properties, 'DataSourceStatus') as data_source_status,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ServerSideEncryptionConfiguration') as server_side_encryption_configuration,
                json_extract_path_text(Properties, 'VectorIngestionConfiguration') as vector_ingestion_configuration,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Bedrock::DataSource'
                AND data__Identifier = '<KnowledgeBaseId>|<DataSourceId>'
                AND region = 'us-east-1'
    knowledge_bases:
      name: knowledge_bases
      id: aws.bedrock.knowledge_bases
      x-cfn-schema-name: KnowledgeBase
      x-type: list
      x-identifiers:
        - KnowledgeBaseId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.KnowledgeBaseId') as knowledge_base_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Bedrock::KnowledgeBase'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'KnowledgeBaseId') as knowledge_base_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Bedrock::KnowledgeBase'
                AND region = 'us-east-1'
    knowledge_base:
      name: knowledge_base
      id: aws.bedrock.knowledge_base
      x-cfn-schema-name: KnowledgeBase
      x-type: get
      x-identifiers:
        - KnowledgeBaseId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.KnowledgeBaseConfiguration') as knowledge_base_configuration,
              JSON_EXTRACT(Properties, '$.KnowledgeBaseId') as knowledge_base_id,
              JSON_EXTRACT(Properties, '$.KnowledgeBaseArn') as knowledge_base_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.FailureReasons') as failure_reasons,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.StorageConfiguration') as storage_configuration,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Bedrock::KnowledgeBase'
              AND data__Identifier = '<KnowledgeBaseId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'KnowledgeBaseConfiguration') as knowledge_base_configuration,
                json_extract_path_text(Properties, 'KnowledgeBaseId') as knowledge_base_id,
                json_extract_path_text(Properties, 'KnowledgeBaseArn') as knowledge_base_arn,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'FailureReasons') as failure_reasons,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(Properties, 'StorageConfiguration') as storage_configuration,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Bedrock::KnowledgeBase'
                AND data__Identifier = '<KnowledgeBaseId>'
                AND region = 'us-east-1'
