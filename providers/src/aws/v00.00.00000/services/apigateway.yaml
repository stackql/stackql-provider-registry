openapi: 3.0.0
info:
  title: ApiGateway
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Account:
      type: object
      properties:
        Id:
          description: ''
          type: string
        CloudWatchRoleArn:
          description: ''
          type: string
      x-stackql-resource-name: account
      description: The ``AWS::ApiGateway::Account`` resource specifies the IAM role that Amazon API Gateway uses to write API logs to Amazon CloudWatch Logs. To avoid overwriting other roles, you should only have one ``AWS::ApiGateway::Account`` resource per region per account.
      x-type-name: AWS::ApiGateway::Account
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Id
      x-tagging:
        taggable: false
      x-required-permissions:
        read:
          - apigateway:GET
        create:
          - apigateway:PATCH
          - iam:GetRole
          - iam:PassRole
        update:
          - apigateway:PATCH
          - iam:GetRole
          - iam:PassRole
        delete:
          - apigateway:PATCH
    StageKey:
      type: object
      additionalProperties: false
      properties:
        RestApiId:
          description: ''
          type: string
        StageName:
          description: ''
          type: string
      description: '``StageKey`` is a property of the [AWS::ApiGateway::ApiKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-apikey.html) resource that specifies the stage to associate with the API key. This association allows only clients with the key to make requests to methods in that stage.'
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
      description: ''
    ApiKey:
      type: object
      properties:
        APIKeyId:
          description: ''
          type: string
        CustomerId:
          description: ''
          type: string
        Description:
          description: ''
          type: string
        Enabled:
          description: ''
          default: false
          type: boolean
        GenerateDistinctId:
          description: ''
          type: boolean
        Name:
          description: |-
            A name for the API key. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the API key name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
             If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
          type: string
        StageKeys:
          description: ''
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/StageKey'
        Tags:
          description: ''
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Value:
          description: ''
          type: string
      x-stackql-resource-name: api_key
      description: The ``AWS::ApiGateway::ApiKey`` resource creates a unique key that you can distribute to clients who are executing API Gateway ``Method`` resources that require an API key. To specify which API key clients must use, map the API key with the ``RestApi`` and ``Stage`` resources that include the methods that require a key.
      x-type-name: AWS::ApiGateway::ApiKey
      x-stackql-primary-identifier:
        - APIKeyId
      x-create-only-properties:
        - GenerateDistinctId
        - Name
        - Value
      x-write-only-properties:
        - GenerateDistinctId
      x-read-only-properties:
        - APIKeyId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - apigateway:PUT
          - apigateway:DELETE
          - apigateway:GET
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:DELETE
        delete:
          - apigateway:DELETE
          - apigateway:GET
        list:
          - apigateway:GET
    Authorizer:
      type: object
      properties:
        RestApiId:
          description: ''
          type: string
        AuthorizerId:
          type: string
          description: ''
        AuthType:
          description: ''
          type: string
        AuthorizerCredentials:
          description: ''
          type: string
        AuthorizerResultTtlInSeconds:
          description: ''
          type: integer
        AuthorizerUri:
          description: ''
          type: string
        IdentitySource:
          description: ''
          type: string
        IdentityValidationExpression:
          description: ''
          type: string
        Name:
          description: ''
          type: string
        ProviderARNs:
          description: ''
          type: array
          uniqueItems: true
          items:
            type: string
          x-insertionOrder: false
        Type:
          description: ''
          type: string
      required:
        - RestApiId
        - Type
        - Name
      x-stackql-resource-name: authorizer
      description: The ``AWS::ApiGateway::Authorizer`` resource creates an authorization layer that API Gateway activates for methods that have authorization enabled. API Gateway activates the authorizer when a client calls those methods.
      x-type-name: AWS::ApiGateway::Authorizer
      x-stackql-primary-identifier:
        - RestApiId
        - AuthorizerId
      x-create-only-properties:
        - RestApiId
      x-read-only-properties:
        - AuthorizerId
      x-required-properties:
        - RestApiId
        - Type
        - Name
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - apigateway:POST
          - iam:PassRole
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
          - iam:PassRole
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    BasePathMapping:
      type: object
      properties:
        BasePath:
          type: string
          description: ''
        DomainName:
          type: string
          description: ''
        RestApiId:
          type: string
          description: ''
        Stage:
          type: string
          description: ''
      required:
        - DomainName
      x-stackql-resource-name: base_path_mapping
      description: The ``AWS::ApiGateway::BasePathMapping`` resource creates a base path that clients who call your API must use in the invocation URL.
      x-type-name: AWS::ApiGateway::BasePathMapping
      x-stackql-primary-identifier:
        - DomainName
        - BasePath
      x-create-only-properties:
        - DomainName
        - BasePath
      x-required-properties:
        - DomainName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:DELETE
          - apigateway:PATCH
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    BasePathMappingV2:
      type: object
      properties:
        BasePath:
          type: string
          description: The base path name that callers of the API must provide in the URL after the domain name.
        DomainNameArn:
          type: string
          description: The Arn of an AWS::ApiGateway::DomainNameV2 resource.
        RestApiId:
          type: string
          description: The ID of the API.
        Stage:
          type: string
          description: The name of the API's stage.
        BasePathMappingArn:
          type: string
          description: Amazon Resource Name (ARN) of the resource.
      required:
        - DomainNameArn
        - RestApiId
      x-stackql-resource-name: base_path_mapping_v2
      description: Resource Type definition for AWS::ApiGateway::BasePathMappingV2
      x-type-name: AWS::ApiGateway::BasePathMappingV2
      x-stackql-primary-identifier:
        - BasePathMappingArn
      x-create-only-properties:
        - DomainNameArn
        - BasePath
      x-read-only-properties:
        - BasePathMappingArn
      x-required-properties:
        - DomainNameArn
        - RestApiId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:DELETE
          - apigateway:PATCH
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    ClientCertificate:
      type: object
      properties:
        ClientCertificateId:
          description: ''
          type: string
        Description:
          description: ''
          type: string
        Tags:
          description: ''
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: client_certificate
      description: The ``AWS::ApiGateway::ClientCertificate`` resource creates a client certificate that API Gateway uses to configure client-side SSL authentication for sending requests to the integration endpoint.
      x-type-name: AWS::ApiGateway::ClientCertificate
      x-stackql-primary-identifier:
        - ClientCertificateId
      x-read-only-properties:
        - ClientCertificateId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - apigateway:PUT
          - apigateway:DELETE
          - apigateway:GET
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:DELETE
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    MethodSetting:
      description: |-
        The ``MethodSetting`` property type configures settings for all methods in a stage.
         The ``MethodSettings`` property of the ``AWS::ApiGateway::Stage`` resource contains a list of ``MethodSetting`` property types.
      type: object
      additionalProperties: false
      properties:
        CacheDataEncrypted:
          description: ''
          type: boolean
        CacheTtlInSeconds:
          description: ''
          type: integer
        CachingEnabled:
          description: ''
          type: boolean
        DataTraceEnabled:
          description: ''
          type: boolean
        HttpMethod:
          description: The HTTP method. To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
          type: string
        LoggingLevel:
          description: ''
          type: string
        MetricsEnabled:
          description: ''
          type: boolean
        ResourcePath:
          description: >-
            The resource path for this method. Forward slashes (``/``) are encoded as ``~1`` and the initial slash must include a forward slash. For example, the path value ``/resource/subresource`` must be encoded as ``/~1resource~1subresource``. To specify the root path, use only a slash (``/``). To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a
            ``MethodSetting``.
          type: string
        ThrottlingBurstLimit:
          description: ''
          type: integer
          minimum: 0
        ThrottlingRateLimit:
          description: ''
          type: number
          minimum: 0
    StageDescription:
      description: '``StageDescription`` is a property of the [AWS::ApiGateway::Deployment](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-deployment.html) resource that configures a deployment stage.'
      additionalProperties: false
      type: object
      properties:
        CacheTtlInSeconds:
          description: The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
          type: integer
        Description:
          description: A description of the purpose of the stage.
          type: string
        LoggingLevel:
          description: The logging level for this method. For valid values, see the ``loggingLevel`` property of the [MethodSetting](https://docs.aws.amazon.com/apigateway/latest/api/API_MethodSetting.html) resource in the *Amazon API Gateway API Reference*.
          type: string
        CanarySetting:
          description: Specifies settings for the canary deployment in this stage.
          $ref: '#/components/schemas/CanarySetting'
        ThrottlingRateLimit:
          description: The target request steady-state rate limit. For more information, see [Manage API Request Throttling](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html) in the *API Gateway Developer Guide*.
          type: number
        ClientCertificateId:
          description: The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage.
          type: string
        Variables:
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: 'A map that defines the stage variables. Variable names must consist of alphanumeric characters, and the values must match the following regular expression: ``[A-Za-z0-9-._~:/?#&=,]+``.'
          additionalProperties: false
          type: object
        DocumentationVersion:
          description: The version identifier of the API documentation snapshot.
          type: string
        CacheDataEncrypted:
          description: Indicates whether the cached responses are encrypted.
          type: boolean
        DataTraceEnabled:
          description: Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
          type: boolean
        ThrottlingBurstLimit:
          description: The target request burst rate limit. This allows more requests through for a period of time than the target rate limit. For more information, see [Manage API Request Throttling](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html) in the *API Gateway Developer Guide*.
          type: integer
        CachingEnabled:
          description: Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses. For more information, see [Enable API Gateway Caching in a Stage to Enhance API Performance](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html) in the *API Gateway Developer Guide*.
          type: boolean
        TracingEnabled:
          description: |-
            Specifies whether active tracing with X-ray is enabled for this stage.
             For more information, see [Trace API Gateway API Execution with X-Ray](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-xray.html) in the *API Gateway Developer Guide*.
          type: boolean
        MethodSettings:
          uniqueItems: true
          description: Configures settings for all of the stage's methods.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/MethodSetting'
        AccessLogSetting:
          description: Specifies settings for logging access in this stage.
          $ref: '#/components/schemas/AccessLogSetting'
        CacheClusterSize:
          description: The size of the stage's cache cluster. For more information, see [cacheClusterSize](https://docs.aws.amazon.com/apigateway/latest/api/API_CreateStage.html#apigw-CreateStage-request-cacheClusterSize) in the *API Gateway API Reference*.
          type: string
        MetricsEnabled:
          description: Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
          type: boolean
        Tags:
          uniqueItems: false
          description: An array of arbitrary tags (key-value pairs) to associate with the stage.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        CacheClusterEnabled:
          description: ''
          type: boolean
    CanarySetting:
      description: ''
      type: object
      additionalProperties: false
      properties:
        DeploymentId:
          description: ''
          type: string
        PercentTraffic:
          description: ''
          type: number
          minimum: 0
          maximum: 100
        StageVariableOverrides:
          description: ''
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        UseStageCache:
          description: ''
          type: boolean
    DeploymentCanarySettings:
      description: The ``DeploymentCanarySettings`` property type specifies settings for the canary deployment.
      additionalProperties: false
      type: object
      properties:
        StageVariableOverrides:
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: ''
          additionalProperties: false
          type: object
        PercentTraffic:
          description: ''
          type: number
        UseStageCache:
          description: ''
          type: boolean
    AccessLogSetting:
      description: |-
        The ``AccessLogSetting`` property type specifies settings for logging access in this stage.
          ``AccessLogSetting`` is a property of the [AWS::ApiGateway::Stage](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-stage.html) resource.
      type: object
      additionalProperties: false
      properties:
        DestinationArn:
          description: The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with ``amazon-apigateway-``. This parameter is required to enable access logging.
          type: string
        Format:
          description: A single line format of the access logs of data, as specified by selected [$context variables](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference). The format must include at least ``$context.requestId``. This parameter is required to enable access logging.
          type: string
    Deployment:
      type: object
      properties:
        DeploymentId:
          description: ''
          type: string
        Description:
          description: ''
          type: string
        StageDescription:
          description: The description of the Stage resource for the Deployment resource to create. To specify a stage description, you must also provide a stage name.
          $ref: '#/components/schemas/StageDescription'
        StageName:
          description: ''
          type: string
        RestApiId:
          description: ''
          type: string
        DeploymentCanarySettings:
          description: ''
          $ref: '#/components/schemas/DeploymentCanarySettings'
      required:
        - RestApiId
      x-stackql-resource-name: deployment
      description: The ``AWS::ApiGateway::Deployment`` resource deploys an API Gateway ``RestApi`` resource to a stage so that clients can call the API over the internet. The stage acts as an environment.
      x-type-name: AWS::ApiGateway::Deployment
      x-stackql-primary-identifier:
        - DeploymentId
        - RestApiId
      x-create-only-properties:
        - DeploymentCanarySettings
        - RestApiId
      x-write-only-properties:
        - StageName
        - StageDescription
        - DeploymentCanarySettings
      x-read-only-properties:
        - DeploymentId
      x-required-properties:
        - RestApiId
      x-tagging:
        taggable: false
      x-required-permissions:
        read:
          - apigateway:GET
        create:
          - apigateway:POST
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:GET
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
          - apigateway:DELETE
        list:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
    Location:
      type: object
      additionalProperties: false
      properties:
        Method:
          description: ''
          type: string
        Name:
          description: ''
          type: string
        Path:
          description: ''
          type: string
        StatusCode:
          description: ''
          type: string
        Type:
          description: ''
          type: string
          enum:
            - API
            - AUTHORIZER
            - MODEL
            - RESOURCE
            - METHOD
            - PATH_PARAMETER
            - QUERY_PARAMETER
            - REQUEST_HEADER
            - REQUEST_BODY
            - RESPONSE
            - RESPONSE_HEADER
            - RESPONSE_BODY
      description: |-
        The ``Location`` property specifies the location of the Amazon API Gateway API entity that the documentation applies to. ``Location`` is a property of the [AWS::ApiGateway::DocumentationPart](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-documentationpart.html) resource.
         For more information about each property, including constraints and valid values, see [DocumentationPart](https://docs.aws.amazon.com/apigateway/latest/api/API_DocumentationPartLocation.html) in the *Amazon API Gateway REST API Reference*.
    DocumentationPart:
      type: object
      properties:
        DocumentationPartId:
          description: ''
          type: string
        Location:
          description: ''
          $ref: '#/components/schemas/Location'
        Properties:
          description: ''
          type: string
        RestApiId:
          description: ''
          type: string
      required:
        - Location
        - Properties
        - RestApiId
      x-stackql-resource-name: documentation_part
      description: The ``AWS::ApiGateway::DocumentationPart`` resource creates a documentation part for an API. For more information, see [Representation of API Documentation in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api-content-representation.html) in the *API Gateway Developer Guide*.
      x-type-name: AWS::ApiGateway::DocumentationPart
      x-stackql-primary-identifier:
        - DocumentationPartId
        - RestApiId
      x-create-only-properties:
        - Location
        - RestApiId
      x-read-only-properties:
        - DocumentationPartId
      x-required-properties:
        - Location
        - Properties
        - RestApiId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - apigateway:GET
          - apigateway:POST
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    DocumentationVersion:
      type: object
      properties:
        Description:
          description: ''
          type: string
        DocumentationVersion:
          description: ''
          type: string
          minLength: 1
        RestApiId:
          description: ''
          type: string
          minLength: 1
      required:
        - DocumentationVersion
        - RestApiId
      x-stackql-resource-name: documentation_version
      description: The ``AWS::ApiGateway::DocumentationVersion`` resource creates a snapshot of the documentation for an API. For more information, see [Representation of API Documentation in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api-content-representation.html) in the *API Gateway Developer Guide*.
      x-type-name: AWS::ApiGateway::DocumentationVersion
      x-stackql-primary-identifier:
        - DocumentationVersion
        - RestApiId
      x-create-only-properties:
        - DocumentationVersion
        - RestApiId
      x-required-properties:
        - DocumentationVersion
        - RestApiId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - apigateway:GET
          - apigateway:POST
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    MutualTlsAuthentication:
      additionalProperties: false
      type: object
      properties:
        TruststoreVersion:
          type: string
        TruststoreUri:
          type: string
    EndpointConfiguration:
      description: |-
        The ``EndpointConfiguration`` property type specifies the endpoint types of a REST API.
         ``EndpointConfiguration`` is a property of the [AWS::ApiGateway::RestApi](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html) resource.
      additionalProperties: false
      type: object
      properties:
        Types:
          uniqueItems: true
          description: ''
          type: array
          items:
            type: string
        VpcEndpointIds:
          uniqueItems: true
          description: ''
          type: array
          items:
            relationshipRef:
              typeName: AWS::EC2::VPCEndpoint
              propertyPath: /properties/Id
            type: string
    DomainName:
      type: object
      properties:
        MutualTlsAuthentication:
          $ref: '#/components/schemas/MutualTlsAuthentication'
        OwnershipVerificationCertificateArn:
          type: string
        RegionalHostedZoneId:
          type: string
        RegionalDomainName:
          type: string
        DomainName:
          type: string
        SecurityPolicy:
          type: string
        DistributionHostedZoneId:
          type: string
        EndpointConfiguration:
          $ref: '#/components/schemas/EndpointConfiguration'
        DistributionDomainName:
          type: string
        RegionalCertificateArn:
          type: string
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        CertificateArn:
          type: string
      x-stackql-resource-name: domain_name
      description: Resource Type definition for AWS::ApiGateway::DomainName.
      x-type-name: AWS::ApiGateway::DomainName
      x-stackql-primary-identifier:
        - DomainName
      x-create-only-properties:
        - DomainName
      x-read-only-properties:
        - RegionalHostedZoneId
        - DistributionDomainName
        - RegionalDomainName
        - DistributionHostedZoneId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - apigateway:*
        create:
          - apigateway:*
        update:
          - apigateway:*
        list:
          - apigateway:*
        delete:
          - apigateway:*
    DomainNameAccessAssociation:
      type: object
      properties:
        DomainNameAccessAssociationArn:
          type: string
          description: The amazon resource name (ARN) of the domain name access association resource.
        DomainNameArn:
          type: string
          description: The amazon resource name (ARN) of the domain name resource.
        AccessAssociationSource:
          type: string
          description: The source of the domain name access association resource.
        AccessAssociationSourceType:
          type: string
          description: The source type of the domain name access association resource.
          enum:
            - VPCE
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the domainname access association.
          uniqueItems: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DomainNameArn
        - AccessAssociationSource
        - AccessAssociationSourceType
      x-stackql-resource-name: domain_name_access_association
      description: Resource Type definition for AWS::ApiGateway::DomainNameAccessAssociation.
      x-type-name: AWS::ApiGateway::DomainNameAccessAssociation
      x-stackql-primary-identifier:
        - DomainNameAccessAssociationArn
      x-create-only-properties:
        - DomainNameArn
        - AccessAssociationSource
        - AccessAssociationSourceType
        - Tags
      x-read-only-properties:
        - DomainNameAccessAssociationArn
      x-required-properties:
        - DomainNameArn
        - AccessAssociationSource
        - AccessAssociationSourceType
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - apigateway:POST
          - apigateway:DELETE
          - apigateway:GET
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
        read:
          - apigateway:GET
        delete:
          - apigateway:DELETE
          - apigateway:GET
        list:
          - apigateway:GET
    DomainNameV2:
      type: object
      properties:
        CertificateArn:
          type: string
        DomainName:
          type: string
        EndpointConfiguration:
          $ref: '#/components/schemas/EndpointConfiguration'
        SecurityPolicy:
          type: string
        Policy:
          type: object
        DomainNameId:
          type: string
        DomainNameArn:
          type: string
          description: The amazon resource name (ARN) of the domain name resource.
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: domain_name_v2
      description: Resource Type definition for AWS::ApiGateway::DomainNameV2.
      x-type-name: AWS::ApiGateway::DomainNameV2
      x-stackql-primary-identifier:
        - DomainNameArn
      x-create-only-properties:
        - DomainName
        - SecurityPolicy
        - EndpointConfiguration
      x-read-only-properties:
        - DomainNameId
        - DomainNameArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - apigateway:PUT
          - apigateway:PATCH
          - apigateway:DELETE
          - apigateway:GET
          - apigateway:POST
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
          - apigateway:UpdateDomainNamePolicy
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PUT
          - apigateway:PATCH
          - apigateway:UpdateDomainNamePolicy
        delete:
          - apigateway:DELETE
          - apigateway:GET
          - apigateway:UpdateDomainNamePolicy
        list:
          - apigateway:GET
    GatewayResponse:
      type: object
      properties:
        Id:
          description: ''
          type: string
        RestApiId:
          description: ''
          type: string
        ResponseType:
          description: ''
          type: string
        StatusCode:
          description: ''
          type: string
        ResponseParameters:
          description: ''
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        ResponseTemplates:
          description: ''
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      required:
        - ResponseType
        - RestApiId
      x-stackql-resource-name: gateway_response
      description: The ``AWS::ApiGateway::GatewayResponse`` resource creates a gateway response for your API. For more information, see [API Gateway Responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/customize-gateway-responses.html#api-gateway-gatewayResponse-definition) in the *API Gateway Developer Guide*.
      x-type-name: AWS::ApiGateway::GatewayResponse
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - ResponseType
        - RestApiId
      x-read-only-properties:
        - Id
      x-required-properties:
        - ResponseType
        - RestApiId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - apigateway:PUT
          - apigateway:GET
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PUT
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    MethodResponse:
      description: ''
      additionalProperties: false
      type: object
      properties:
        ResponseParameters:
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: boolean
          description: ''
          additionalProperties: false
          type: object
        StatusCode:
          description: ''
          type: string
        ResponseModels:
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: ''
          additionalProperties: false
          type: object
      required:
        - StatusCode
    Integration:
      description: '``Integration`` is a property of the [AWS::ApiGateway::Method](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html) resource that specifies information about the target backend that a method calls.'
      additionalProperties: false
      type: object
      properties:
        CacheNamespace:
          description: ''
          type: string
        ConnectionType:
          description: ''
          type: string
          enum:
            - INTERNET
            - VPC_LINK
        IntegrationResponses:
          uniqueItems: true
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/IntegrationResponse'
        IntegrationHttpMethod:
          description: ''
          type: string
        Uri:
          description: ''
          type: string
        PassthroughBehavior:
          description: ''
          type: string
          enum:
            - WHEN_NO_MATCH
            - WHEN_NO_TEMPLATES
            - NEVER
        RequestParameters:
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: ''
          additionalProperties: false
          type: object
        ConnectionId:
          description: ''
          type: string
        Type:
          description: ''
          type: string
          enum:
            - AWS
            - AWS_PROXY
            - HTTP
            - HTTP_PROXY
            - MOCK
        CacheKeyParameters:
          uniqueItems: true
          description: ''
          type: array
          items:
            type: string
        ContentHandling:
          description: ''
          type: string
          enum:
            - CONVERT_TO_BINARY
            - CONVERT_TO_TEXT
        RequestTemplates:
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: ''
          additionalProperties: false
          type: object
        TimeoutInMillis:
          description: ''
          type: integer
          minimum: 50
        Credentials:
          description: ''
          type: string
      required:
        - Type
    IntegrationResponse:
      description: '``IntegrationResponse`` is a property of the [Amazon API Gateway Method Integration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apitgateway-method-integration.html) property type that specifies the response that API Gateway sends after a method''s backend finishes processing a request.'
      additionalProperties: false
      type: object
      properties:
        ResponseTemplates:
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: ''
          additionalProperties: false
          type: object
        SelectionPattern:
          description: ''
          type: string
        ContentHandling:
          description: ''
          type: string
          enum:
            - CONVERT_TO_BINARY
            - CONVERT_TO_TEXT
        ResponseParameters:
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: ''
          additionalProperties: false
          type: object
        StatusCode:
          description: ''
          type: string
      required:
        - StatusCode
    Method:
      type: object
      properties:
        Integration:
          description: ''
          $ref: '#/components/schemas/Integration'
        OperationName:
          description: ''
          type: string
        RequestModels:
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: ''
          additionalProperties: false
          type: object
        RestApiId:
          description: ''
          type: string
        AuthorizationScopes:
          description: ''
          type: array
          items:
            type: string
        RequestValidatorId:
          description: ''
          type: string
        RequestParameters:
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: boolean
          description: ''
          additionalProperties: false
          type: object
        MethodResponses:
          uniqueItems: true
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/MethodResponse'
        AuthorizerId:
          description: ''
          type: string
        ResourceId:
          description: ''
          type: string
        ApiKeyRequired:
          description: ''
          type: boolean
        AuthorizationType:
          description: |-
            The method's authorization type. This parameter is required. For valid values, see [Method](https://docs.aws.amazon.com/apigateway/latest/api/API_Method.html) in the *API Gateway API Reference*.
              If you specify the ``AuthorizerId`` property, specify ``CUSTOM`` or ``COGNITO_USER_POOLS`` for this property.
          type: string
        HttpMethod:
          description: ''
          type: string
      required:
        - RestApiId
        - ResourceId
        - HttpMethod
      x-stackql-resource-name: method
      description: The ``AWS::ApiGateway::Method`` resource creates API Gateway methods that define the parameters and body that clients must send in their requests.
      x-type-name: AWS::ApiGateway::Method
      x-stackql-primary-identifier:
        - RestApiId
        - ResourceId
        - HttpMethod
      x-create-only-properties:
        - RestApiId
        - ResourceId
        - HttpMethod
      x-required-properties:
        - RestApiId
        - ResourceId
        - HttpMethod
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - apigateway:GET
        create:
          - apigateway:PUT
          - apigateway:GET
          - iam:PassRole
        update:
          - apigateway:GET
          - apigateway:DELETE
          - apigateway:PUT
          - iam:PassRole
        delete:
          - apigateway:DELETE
    Model:
      type: object
      properties:
        ContentType:
          type: string
          description: ''
        Description:
          type: string
          description: ''
        Name:
          type: string
          description: |-
            A name for the model. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the model name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
              If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
        RestApiId:
          type: string
          description: ''
        Schema:
          description: ''
          type: object
      required:
        - RestApiId
      x-stackql-resource-name: model
      description: The ``AWS::ApiGateway::Model`` resource defines the structure of a request or response payload for an API method.
      x-type-name: AWS::ApiGateway::Model
      x-stackql-primary-identifier:
        - RestApiId
        - Name
      x-create-only-properties:
        - ContentType
        - Name
        - RestApiId
      x-required-properties:
        - RestApiId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
        read:
          - apigateway:GET
        update:
          - apigateway:PATCH
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    RequestValidator:
      type: object
      properties:
        RequestValidatorId:
          description: ''
          type: string
        Name:
          description: ''
          type: string
        RestApiId:
          description: ''
          type: string
        ValidateRequestBody:
          description: ''
          type: boolean
        ValidateRequestParameters:
          description: ''
          type: boolean
      required:
        - RestApiId
      x-stackql-resource-name: request_validator
      description: The ``AWS::ApiGateway::RequestValidator`` resource sets up basic validation rules for incoming requests to your API. For more information, see [Enable Basic Request Validation for an API in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html) in the *API Gateway Developer Guide*.
      x-type-name: AWS::ApiGateway::RequestValidator
      x-stackql-primary-identifier:
        - RestApiId
        - RequestValidatorId
      x-create-only-properties:
        - Name
        - RestApiId
      x-read-only-properties:
        - RequestValidatorId
      x-required-properties:
        - RestApiId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
        update:
          - apigateway:PATCH
          - apigateway:GET
        delete:
          - apigateway:DELETE
        read:
          - apigateway:GET
        list:
          - apigateway:GET
    Resource:
      type: object
      properties:
        ParentId:
          description: ''
          type: string
        PathPart:
          description: ''
          type: string
        ResourceId:
          description: ''
          type: string
        RestApiId:
          description: ''
          type: string
      required:
        - ParentId
        - PathPart
        - RestApiId
      x-stackql-resource-name: resource
      description: The ``AWS::ApiGateway::Resource`` resource creates a resource in an API.
      x-type-name: AWS::ApiGateway::Resource
      x-stackql-primary-identifier:
        - RestApiId
        - ResourceId
      x-create-only-properties:
        - PathPart
        - ParentId
        - RestApiId
      x-read-only-properties:
        - ResourceId
      x-required-properties:
        - ParentId
        - PathPart
        - RestApiId
      x-tagging:
        taggable: false
      x-required-permissions:
        read:
          - apigateway:GET
        create:
          - apigateway:POST
        update:
          - apigateway:GET
          - apigateway:PATCH
        list:
          - apigateway:GET
        delete:
          - apigateway:DELETE
    S3Location:
      description: |-
        ``S3Location`` is a property of the [AWS::ApiGateway::RestApi](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html) resource that specifies the Amazon S3 location of a OpenAPI (formerly Swagger) file that defines a set of RESTful APIs in JSON or YAML.
         On January 1, 2016, the Swagger Specification was donated to the [OpenAPI initiative](https://docs.aws.amazon.com/https://www.openapis.org/), becoming the foundation of the OpenAPI Specification.
      additionalProperties: false
      type: object
      properties:
        Bucket:
          x-relationshipRef:
            typeName: AWS::S3::Bucket
            propertyPath: /properties/BucketName
          description: The name of the S3 bucket where the OpenAPI file is stored.
          type: string
        ETag:
          description: The Amazon S3 ETag (a file checksum) of the OpenAPI file. If you don't specify a value, API Gateway skips ETag validation of your OpenAPI file.
          type: string
        Version:
          description: For versioning-enabled buckets, a specific version of the OpenAPI file.
          type: string
        Key:
          description: The file name of the OpenAPI file (Amazon S3 object name).
          type: string
    RestApi:
      type: object
      properties:
        Policy:
          description: A policy document that contains the permissions for the ``RestApi`` resource. To set the ARN for the policy, use the ``!Join`` intrinsic function with ``""`` as delimiter and values of ``"execute-api:/"`` and ``"*"``.
          type: object
        BodyS3Location:
          description: The Amazon Simple Storage Service (Amazon S3) location that points to an OpenAPI file, which defines a set of RESTful APIs in JSON or YAML format.
          $ref: '#/components/schemas/S3Location'
        Description:
          description: ''
          type: string
        MinimumCompressionSize:
          description: ''
          type: integer
        Parameters:
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: ''
          additionalProperties: false
          type: object
        CloneFrom:
          description: ''
          type: string
        Mode:
          description: |-
            This property applies only when you use OpenAPI to define your REST API. The ``Mode`` determines how API Gateway handles resource updates.
             Valid values are ``overwrite`` or ``merge``. 
             For ``overwrite``, the new API definition replaces the existing one. The existing API identifier remains unchanged.
              For ``merge``, the new API definition is merged with the existing API.
             If you don't specify this property, a default value is chosen. For REST APIs created before March 29, 2021, the default is ``overwrite``. For REST APIs created after March 29, 2021, the new API definition takes precedence, but any container types such as endpoint configurations and binary media types are merged with the existing API. 
             Use the default mode to define top-level ``RestApi`` properties in addition to using OpenAPI. Generally, it's preferred to use API Gateway's OpenAPI extensions to model these properties.
          type: string
        RestApiId:
          description: ''
          type: string
        DisableExecuteApiEndpoint:
          description: ''
          type: boolean
        FailOnWarnings:
          description: ''
          type: boolean
        BinaryMediaTypes:
          uniqueItems: true
          description: ''
          type: array
          items:
            type: string
        Name:
          description: The name of the RestApi. A name is required if the REST API is not based on an OpenAPI specification.
          type: string
        RootResourceId:
          description: ''
          type: string
        ApiKeySourceType:
          description: ''
          type: string
        EndpointConfiguration:
          description: A list of the endpoint types of the API. Use this property when creating an API. When importing an existing API, specify the endpoint configuration types using the ``Parameters`` property.
          $ref: '#/components/schemas/EndpointConfiguration'
        Body:
          description: An OpenAPI specification that defines a set of RESTful APIs in JSON format. For YAML templates, you can also provide the specification in YAML format.
          type: object
        Tags:
          uniqueItems: false
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: rest_api
      description: |-
        The ``AWS::ApiGateway::RestApi`` resource creates a REST API. For more information, see [restapi:create](https://docs.aws.amazon.com/apigateway/latest/api/API_CreateRestApi.html) in the *Amazon API Gateway REST API Reference*.
         On January 1, 2016, the Swagger Specification was donated to the [OpenAPI initiative](https://docs.aws.amazon.com/https://www.openapis.org/), becoming the foundation of the OpenAPI Specification.
      x-type-name: AWS::ApiGateway::RestApi
      x-stackql-primary-identifier:
        - RestApiId
      x-write-only-properties:
        - Body
        - BodyS3Location
        - CloneFrom
        - FailOnWarnings
        - Mode
        - Parameters
      x-read-only-properties:
        - RestApiId
        - RootResourceId
      x-tagging:
        permissions:
          - apigateway:PUT
          - apigateway:DELETE
          - apigateway:GET
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - apigateway:GET
        create:
          - apigateway:GET
          - apigateway:POST
          - apigateway:PUT
          - apigateway:PATCH
          - apigateway:UpdateRestApiPolicy
          - s3:GetObject
          - iam:PassRole
        update:
          - apigateway:GET
          - apigateway:DELETE
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:UpdateRestApiPolicy
          - s3:GetObject
          - iam:PassRole
        list:
          - apigateway:GET
        delete:
          - apigateway:DELETE
    Stage:
      type: object
      properties:
        AccessLogSetting:
          description: ''
          $ref: '#/components/schemas/AccessLogSetting'
        CacheClusterEnabled:
          description: ''
          type: boolean
        CacheClusterSize:
          description: ''
          type: string
        CanarySetting:
          description: ''
          $ref: '#/components/schemas/CanarySetting'
        ClientCertificateId:
          description: ''
          type: string
        DeploymentId:
          description: ''
          type: string
        Description:
          description: ''
          type: string
        DocumentationVersion:
          description: ''
          type: string
        MethodSettings:
          description: ''
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MethodSetting'
        RestApiId:
          description: ''
          type: string
        StageName:
          description: ''
          type: string
        Tags:
          description: ''
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        TracingEnabled:
          description: ''
          type: boolean
        Variables:
          description: 'A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value. Variable names are limited to alphanumeric characters. Values must match the following regular expression: ``[A-Za-z0-9-._~:/?#&=,]+``.'
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      required:
        - RestApiId
      x-stackql-resource-name: stage
      description: The ``AWS::ApiGateway::Stage`` resource creates a stage for a deployment.
      x-type-name: AWS::ApiGateway::Stage
      x-stackql-primary-identifier:
        - RestApiId
        - StageName
      x-create-only-properties:
        - RestApiId
        - StageName
      x-required-properties:
        - RestApiId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - apigateway:PUT
          - apigateway:DELETE
          - apigateway:GET
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:DELETE
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    ApiStage:
      type: object
      additionalProperties: false
      properties:
        ApiId:
          type: string
          description: ''
        Stage:
          type: string
          description: ''
        Throttle:
          type: object
          description: ''
          additionalProperties: false
          x-patternProperties:
            .*:
              $ref: '#/components/schemas/ThrottleSettings'
      description: ''
    ThrottleSettings:
      type: object
      additionalProperties: false
      properties:
        BurstLimit:
          type: integer
          minimum: 0
          description: ''
        RateLimit:
          type: number
          minimum: 0
          description: ''
      description: '``ThrottleSettings`` is a property of the [AWS::ApiGateway::UsagePlan](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplan.html) resource that specifies the overall request rate (average requests per second) and burst capacity when users call your REST APIs.'
    QuotaSettings:
      type: object
      additionalProperties: false
      properties:
        Limit:
          type: integer
          minimum: 0
          description: ''
        Offset:
          type: integer
          minimum: 0
          description: ''
        Period:
          type: string
          description: ''
      description: |-
        ``QuotaSettings`` is a property of the [AWS::ApiGateway::UsagePlan](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplan.html) resource that specifies a target for the maximum number of requests users can make to your REST APIs.
         In some cases clients can exceed the targets that you set. Don’t rely on usage plans to control costs. Consider using [](https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html) to monitor costs and [](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html) to manage API requests.
    UsagePlan:
      type: object
      properties:
        Id:
          type: string
          description: ''
        ApiStages:
          type: array
          description: ''
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ApiStage'
        Description:
          type: string
          description: ''
        Quota:
          $ref: '#/components/schemas/QuotaSettings'
          description: ''
        Tags:
          type: array
          description: ''
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Throttle:
          $ref: '#/components/schemas/ThrottleSettings'
          description: ''
        UsagePlanName:
          type: string
          description: ''
      x-stackql-resource-name: usage_plan
      description: |-
        The ``AWS::ApiGateway::UsagePlan`` resource creates a usage plan for deployed APIs. A usage plan sets a target for the throttling and quota limits on individual client API keys. For more information, see [Creating and Using API Usage Plans in Amazon API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html) in the *API Gateway Developer Guide*.
         In some cases clients can exceed the targets that you set. Don’t rely on usage plans to control costs. Consider using [](https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html) to monitor costs and [](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html) to manage API requests.
      x-type-name: AWS::ApiGateway::UsagePlan
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Id
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - apigateway:PUT
          - apigateway:DELETE
          - apigateway:GET
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:DELETE
          - apigateway:PATCH
          - apigateway:PUT
        delete:
          - apigateway:DELETE
          - apigateway:GET
          - apigateway:PATCH
        list:
          - apigateway:GET
    UsagePlanKey:
      type: object
      properties:
        KeyId:
          description: The Id of the UsagePlanKey resource.
          type: string
        KeyType:
          description: ''
          type: string
          enum:
            - API_KEY
        UsagePlanId:
          description: The Id of the UsagePlan resource representing the usage plan containing the UsagePlanKey resource representing a plan customer.
          type: string
        Id:
          description: ''
          type: string
      required:
        - KeyType
        - UsagePlanId
        - KeyId
      x-stackql-resource-name: usage_plan_key
      description: The ``AWS::ApiGateway::UsagePlanKey`` resource associates an API key with a usage plan. This association determines which users the usage plan is applied to.
      x-type-name: AWS::ApiGateway::UsagePlanKey
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - KeyId
        - UsagePlanId
        - KeyType
      x-read-only-properties:
        - Id
      x-required-properties:
        - KeyType
        - UsagePlanId
        - KeyId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
        read:
          - apigateway:GET
        delete:
          - apigateway:DELETE
          - apigateway:GET
        list:
          - apigateway:GET
    VpcLink:
      type: object
      properties:
        Name:
          description: ''
          type: string
        Description:
          description: ''
          type: string
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the VPC link.
          x-insertionOrder: false
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        TargetArns:
          description: ''
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        VpcLinkId:
          description: ''
          type: string
      required:
        - Name
        - TargetArns
      x-stackql-resource-name: vpc_link
      description: The ``AWS::ApiGateway::VpcLink`` resource creates an API Gateway VPC link for a REST API to access resources in an Amazon Virtual Private Cloud (VPC). For more information, see [vpclink:create](https://docs.aws.amazon.com/apigateway/latest/api/API_CreateVpcLink.html) in the ``Amazon API Gateway REST API Reference``.
      x-type-name: AWS::ApiGateway::VpcLink
      x-stackql-primary-identifier:
        - VpcLinkId
      x-create-only-properties:
        - TargetArns
      x-read-only-properties:
        - VpcLinkId
      x-required-properties:
        - Name
        - TargetArns
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:PUT
          - apigateway:GET
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePermissions
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePermissions
        read:
          - apigateway:GET
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePermissions
        list:
          - apigateway:GET
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePermissions
        delete:
          - apigateway:GET
          - apigateway:DELETE
          - apigateway:PUT
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePermissions
    CreateAccountRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: ''
              type: string
            CloudWatchRoleArn:
              description: ''
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateAccountRequest
      type: object
      required: []
    CreateApiKeyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            APIKeyId:
              description: ''
              type: string
            CustomerId:
              description: ''
              type: string
            Description:
              description: ''
              type: string
            Enabled:
              description: ''
              default: false
              type: boolean
            GenerateDistinctId:
              description: ''
              type: boolean
            Name:
              description: |-
                A name for the API key. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the API key name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
                 If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
              type: string
            StageKeys:
              description: ''
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/StageKey'
            Tags:
              description: ''
              type: array
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
            Value:
              description: ''
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateApiKeyRequest
      type: object
      required: []
    CreateAuthorizerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RestApiId:
              description: ''
              type: string
            AuthorizerId:
              type: string
              description: ''
            AuthType:
              description: ''
              type: string
            AuthorizerCredentials:
              description: ''
              type: string
            AuthorizerResultTtlInSeconds:
              description: ''
              type: integer
            AuthorizerUri:
              description: ''
              type: string
            IdentitySource:
              description: ''
              type: string
            IdentityValidationExpression:
              description: ''
              type: string
            Name:
              description: ''
              type: string
            ProviderARNs:
              description: ''
              type: array
              uniqueItems: true
              items:
                type: string
              x-insertionOrder: false
            Type:
              description: ''
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateAuthorizerRequest
      type: object
      required: []
    CreateBasePathMappingRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            BasePath:
              type: string
              description: ''
            DomainName:
              type: string
              description: ''
            RestApiId:
              type: string
              description: ''
            Stage:
              type: string
              description: ''
          x-stackQL-stringOnly: true
      x-title: CreateBasePathMappingRequest
      type: object
      required: []
    CreateBasePathMappingV2Request:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            BasePath:
              type: string
              description: The base path name that callers of the API must provide in the URL after the domain name.
            DomainNameArn:
              type: string
              description: The Arn of an AWS::ApiGateway::DomainNameV2 resource.
            RestApiId:
              type: string
              description: The ID of the API.
            Stage:
              type: string
              description: The name of the API's stage.
            BasePathMappingArn:
              type: string
              description: Amazon Resource Name (ARN) of the resource.
          x-stackQL-stringOnly: true
      x-title: CreateBasePathMappingV2Request
      type: object
      required: []
    CreateClientCertificateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ClientCertificateId:
              description: ''
              type: string
            Description:
              description: ''
              type: string
            Tags:
              description: ''
              type: array
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateClientCertificateRequest
      type: object
      required: []
    CreateDeploymentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DeploymentId:
              description: ''
              type: string
            Description:
              description: ''
              type: string
            StageDescription:
              description: The description of the Stage resource for the Deployment resource to create. To specify a stage description, you must also provide a stage name.
              $ref: '#/components/schemas/StageDescription'
            StageName:
              description: ''
              type: string
            RestApiId:
              description: ''
              type: string
            DeploymentCanarySettings:
              description: ''
              $ref: '#/components/schemas/DeploymentCanarySettings'
          x-stackQL-stringOnly: true
      x-title: CreateDeploymentRequest
      type: object
      required: []
    CreateDocumentationPartRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DocumentationPartId:
              description: ''
              type: string
            Location:
              description: ''
              $ref: '#/components/schemas/Location'
            Properties:
              description: ''
              type: string
            RestApiId:
              description: ''
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateDocumentationPartRequest
      type: object
      required: []
    CreateDocumentationVersionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              description: ''
              type: string
            DocumentationVersion:
              description: ''
              type: string
              minLength: 1
            RestApiId:
              description: ''
              type: string
              minLength: 1
          x-stackQL-stringOnly: true
      x-title: CreateDocumentationVersionRequest
      type: object
      required: []
    CreateDomainNameRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            MutualTlsAuthentication:
              $ref: '#/components/schemas/MutualTlsAuthentication'
            OwnershipVerificationCertificateArn:
              type: string
            RegionalHostedZoneId:
              type: string
            RegionalDomainName:
              type: string
            DomainName:
              type: string
            SecurityPolicy:
              type: string
            DistributionHostedZoneId:
              type: string
            EndpointConfiguration:
              $ref: '#/components/schemas/EndpointConfiguration'
            DistributionDomainName:
              type: string
            RegionalCertificateArn:
              type: string
            Tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            CertificateArn:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateDomainNameRequest
      type: object
      required: []
    CreateDomainNameAccessAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DomainNameAccessAssociationArn:
              type: string
              description: The amazon resource name (ARN) of the domain name access association resource.
            DomainNameArn:
              type: string
              description: The amazon resource name (ARN) of the domain name resource.
            AccessAssociationSource:
              type: string
              description: The source of the domain name access association resource.
            AccessAssociationSourceType:
              type: string
              description: The source type of the domain name access association resource.
              enum:
                - VPCE
            Tags:
              description: An array of arbitrary tags (key-value pairs) to associate with the domainname access association.
              uniqueItems: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateDomainNameAccessAssociationRequest
      type: object
      required: []
    CreateDomainNameV2Request:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CertificateArn:
              type: string
            DomainName:
              type: string
            EndpointConfiguration:
              $ref: '#/components/schemas/EndpointConfiguration'
            SecurityPolicy:
              type: string
            Policy:
              type: object
            DomainNameId:
              type: string
            DomainNameArn:
              type: string
              description: The amazon resource name (ARN) of the domain name resource.
            Tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateDomainNameV2Request
      type: object
      required: []
    CreateGatewayResponseRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: ''
              type: string
            RestApiId:
              description: ''
              type: string
            ResponseType:
              description: ''
              type: string
            StatusCode:
              description: ''
              type: string
            ResponseParameters:
              description: ''
              type: object
              additionalProperties: false
              x-patternProperties:
                '[a-zA-Z0-9]+':
                  type: string
            ResponseTemplates:
              description: ''
              type: object
              additionalProperties: false
              x-patternProperties:
                '[a-zA-Z0-9]+':
                  type: string
          x-stackQL-stringOnly: true
      x-title: CreateGatewayResponseRequest
      type: object
      required: []
    CreateMethodRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Integration:
              description: ''
              $ref: '#/components/schemas/Integration'
            OperationName:
              description: ''
              type: string
            RequestModels:
              x-patternProperties:
                '[a-zA-Z0-9]+':
                  type: string
              description: ''
              additionalProperties: false
              type: object
            RestApiId:
              description: ''
              type: string
            AuthorizationScopes:
              description: ''
              type: array
              items:
                type: string
            RequestValidatorId:
              description: ''
              type: string
            RequestParameters:
              x-patternProperties:
                '[a-zA-Z0-9]+':
                  type: boolean
              description: ''
              additionalProperties: false
              type: object
            MethodResponses:
              uniqueItems: true
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/MethodResponse'
            AuthorizerId:
              description: ''
              type: string
            ResourceId:
              description: ''
              type: string
            ApiKeyRequired:
              description: ''
              type: boolean
            AuthorizationType:
              description: |-
                The method's authorization type. This parameter is required. For valid values, see [Method](https://docs.aws.amazon.com/apigateway/latest/api/API_Method.html) in the *API Gateway API Reference*.
                  If you specify the ``AuthorizerId`` property, specify ``CUSTOM`` or ``COGNITO_USER_POOLS`` for this property.
              type: string
            HttpMethod:
              description: ''
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateMethodRequest
      type: object
      required: []
    CreateModelRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ContentType:
              type: string
              description: ''
            Description:
              type: string
              description: ''
            Name:
              type: string
              description: |-
                A name for the model. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the model name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
                  If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
            RestApiId:
              type: string
              description: ''
            Schema:
              description: ''
              type: object
          x-stackQL-stringOnly: true
      x-title: CreateModelRequest
      type: object
      required: []
    CreateRequestValidatorRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RequestValidatorId:
              description: ''
              type: string
            Name:
              description: ''
              type: string
            RestApiId:
              description: ''
              type: string
            ValidateRequestBody:
              description: ''
              type: boolean
            ValidateRequestParameters:
              description: ''
              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreateRequestValidatorRequest
      type: object
      required: []
    CreateResourceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ParentId:
              description: ''
              type: string
            PathPart:
              description: ''
              type: string
            ResourceId:
              description: ''
              type: string
            RestApiId:
              description: ''
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateResourceRequest
      type: object
      required: []
    CreateRestApiRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Policy:
              description: A policy document that contains the permissions for the ``RestApi`` resource. To set the ARN for the policy, use the ``!Join`` intrinsic function with ``""`` as delimiter and values of ``"execute-api:/"`` and ``"*"``.
              type: object
            BodyS3Location:
              description: The Amazon Simple Storage Service (Amazon S3) location that points to an OpenAPI file, which defines a set of RESTful APIs in JSON or YAML format.
              $ref: '#/components/schemas/S3Location'
            Description:
              description: ''
              type: string
            MinimumCompressionSize:
              description: ''
              type: integer
            Parameters:
              x-patternProperties:
                '[a-zA-Z0-9]+':
                  type: string
              description: ''
              additionalProperties: false
              type: object
            CloneFrom:
              description: ''
              type: string
            Mode:
              description: |-
                This property applies only when you use OpenAPI to define your REST API. The ``Mode`` determines how API Gateway handles resource updates.
                 Valid values are ``overwrite`` or ``merge``. 
                 For ``overwrite``, the new API definition replaces the existing one. The existing API identifier remains unchanged.
                  For ``merge``, the new API definition is merged with the existing API.
                 If you don't specify this property, a default value is chosen. For REST APIs created before March 29, 2021, the default is ``overwrite``. For REST APIs created after March 29, 2021, the new API definition takes precedence, but any container types such as endpoint configurations and binary media types are merged with the existing API. 
                 Use the default mode to define top-level ``RestApi`` properties in addition to using OpenAPI. Generally, it's preferred to use API Gateway's OpenAPI extensions to model these properties.
              type: string
            RestApiId:
              description: ''
              type: string
            DisableExecuteApiEndpoint:
              description: ''
              type: boolean
            FailOnWarnings:
              description: ''
              type: boolean
            BinaryMediaTypes:
              uniqueItems: true
              description: ''
              type: array
              items:
                type: string
            Name:
              description: The name of the RestApi. A name is required if the REST API is not based on an OpenAPI specification.
              type: string
            RootResourceId:
              description: ''
              type: string
            ApiKeySourceType:
              description: ''
              type: string
            EndpointConfiguration:
              description: A list of the endpoint types of the API. Use this property when creating an API. When importing an existing API, specify the endpoint configuration types using the ``Parameters`` property.
              $ref: '#/components/schemas/EndpointConfiguration'
            Body:
              description: An OpenAPI specification that defines a set of RESTful APIs in JSON format. For YAML templates, you can also provide the specification in YAML format.
              type: object
            Tags:
              uniqueItems: false
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateRestApiRequest
      type: object
      required: []
    CreateStageRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccessLogSetting:
              description: ''
              $ref: '#/components/schemas/AccessLogSetting'
            CacheClusterEnabled:
              description: ''
              type: boolean
            CacheClusterSize:
              description: ''
              type: string
            CanarySetting:
              description: ''
              $ref: '#/components/schemas/CanarySetting'
            ClientCertificateId:
              description: ''
              type: string
            DeploymentId:
              description: ''
              type: string
            Description:
              description: ''
              type: string
            DocumentationVersion:
              description: ''
              type: string
            MethodSettings:
              description: ''
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/MethodSetting'
            RestApiId:
              description: ''
              type: string
            StageName:
              description: ''
              type: string
            Tags:
              description: ''
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            TracingEnabled:
              description: ''
              type: boolean
            Variables:
              description: 'A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value. Variable names are limited to alphanumeric characters. Values must match the following regular expression: ``[A-Za-z0-9-._~:/?#&=,]+``.'
              type: object
              additionalProperties: false
              x-patternProperties:
                '[a-zA-Z0-9]+':
                  type: string
          x-stackQL-stringOnly: true
      x-title: CreateStageRequest
      type: object
      required: []
    CreateUsagePlanRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              type: string
              description: ''
            ApiStages:
              type: array
              description: ''
              uniqueItems: true
              items:
                $ref: '#/components/schemas/ApiStage'
            Description:
              type: string
              description: ''
            Quota:
              $ref: '#/components/schemas/QuotaSettings'
              description: ''
            Tags:
              type: array
              description: ''
              x-insertionOrder: false
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
            Throttle:
              $ref: '#/components/schemas/ThrottleSettings'
              description: ''
            UsagePlanName:
              type: string
              description: ''
          x-stackQL-stringOnly: true
      x-title: CreateUsagePlanRequest
      type: object
      required: []
    CreateUsagePlanKeyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            KeyId:
              description: The Id of the UsagePlanKey resource.
              type: string
            KeyType:
              description: ''
              type: string
              enum:
                - API_KEY
            UsagePlanId:
              description: The Id of the UsagePlan resource representing the usage plan containing the UsagePlanKey resource representing a plan customer.
              type: string
            Id:
              description: ''
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateUsagePlanKeyRequest
      type: object
      required: []
    CreateVpcLinkRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: ''
              type: string
            Description:
              description: ''
              type: string
            Tags:
              description: An array of arbitrary tags (key-value pairs) to associate with the VPC link.
              x-insertionOrder: false
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            TargetArns:
              description: ''
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                type: string
            VpcLinkId:
              description: ''
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateVpcLinkRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    accounts:
      name: accounts
      id: aws.apigateway.accounts
      x-cfn-schema-name: Account
      x-cfn-type-name: AWS::ApiGateway::Account
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Account&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Account"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Account"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Account"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/accounts/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/accounts/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/accounts/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CloudWatchRoleArn') as cloud_watch_role_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Account'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'CloudWatchRoleArn') as cloud_watch_role_arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Account'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    api_keys:
      name: api_keys
      id: aws.apigateway.api_keys
      x-cfn-schema-name: ApiKey
      x-cfn-type-name: AWS::ApiGateway::ApiKey
      x-identifiers:
        - APIKeyId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ApiKey&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::ApiKey"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::ApiKey"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::ApiKey"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/api_keys/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/api_keys/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/api_keys/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.APIKeyId') as api_key_id,
              JSON_EXTRACT(Properties, '$.CustomerId') as customer_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.GenerateDistinctId') as generate_distinct_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.StageKeys') as stage_keys,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Value') as value
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::ApiKey'
              AND data__Identifier = '<APIKeyId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.APIKeyId') as api_key_id,
                JSON_EXTRACT(detail.Properties, '$.CustomerId') as customer_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
                JSON_EXTRACT(detail.Properties, '$.GenerateDistinctId') as generate_distinct_id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.StageKeys') as stage_keys,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Value') as value
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::ApiKey'
                AND detail.data__TypeName = 'AWS::ApiGateway::ApiKey'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'APIKeyId') as api_key_id,
                  json_extract_path_text(Properties, 'CustomerId') as customer_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Enabled') as enabled,
                  json_extract_path_text(Properties, 'GenerateDistinctId') as generate_distinct_id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'StageKeys') as stage_keys,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Value') as value
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::ApiKey'
                  AND data__Identifier = '<APIKeyId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'APIKeyId') as api_key_id,
                    json_extract_path_text(detail.Properties, 'CustomerId') as customer_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                    json_extract_path_text(detail.Properties, 'GenerateDistinctId') as generate_distinct_id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'StageKeys') as stage_keys,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Value') as value
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::ApiKey'
                    AND detail.data__TypeName = 'AWS::ApiGateway::ApiKey'
                    AND listing.region = 'us-east-1'
    api_keys_list_only:
      name: api_keys_list_only
      id: aws.apigateway.api_keys_list_only
      x-cfn-schema-name: ApiKey
      x-cfn-type-name: AWS::ApiGateway::ApiKey
      x-identifiers:
        - APIKeyId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.APIKeyId') as api_key_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::ApiKey'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'APIKeyId') as api_key_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::ApiKey'
                AND region = 'us-east-1'
    api_key_tags:
      name: api_key_tags
      id: aws.apigateway.api_key_tags
      x-cfn-schema-name: ApiKey
      x-cfn-type-name: AWS::ApiGateway::ApiKey
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.APIKeyId') as api_key_id,
              JSON_EXTRACT(detail.Properties, '$.CustomerId') as customer_id,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(detail.Properties, '$.GenerateDistinctId') as generate_distinct_id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.StageKeys') as stage_keys,
              JSON_EXTRACT(detail.Properties, '$.Value') as value
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGateway::ApiKey'
              AND detail.data__TypeName = 'AWS::ApiGateway::ApiKey'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'APIKeyId') as api_key_id,
                json_extract_path_text(detail.Properties, 'CustomerId') as customer_id,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                json_extract_path_text(detail.Properties, 'GenerateDistinctId') as generate_distinct_id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'StageKeys') as stage_keys,
                json_extract_path_text(detail.Properties, 'Value') as value
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGateway::ApiKey'
                AND detail.data__TypeName = 'AWS::ApiGateway::ApiKey'
                AND listing.region = 'us-east-1'
    authorizers:
      name: authorizers
      id: aws.apigateway.authorizers
      x-cfn-schema-name: Authorizer
      x-cfn-type-name: AWS::ApiGateway::Authorizer
      x-identifiers:
        - RestApiId
        - AuthorizerId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Authorizer&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Authorizer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Authorizer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Authorizer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/authorizers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/authorizers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/authorizers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.AuthorizerCredentials') as authorizer_credentials,
              JSON_EXTRACT(Properties, '$.AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
              JSON_EXTRACT(Properties, '$.AuthorizerUri') as authorizer_uri,
              JSON_EXTRACT(Properties, '$.IdentitySource') as identity_source,
              JSON_EXTRACT(Properties, '$.IdentityValidationExpression') as identity_validation_expression,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ProviderARNs') as provider_arns,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Authorizer'
              AND data__Identifier = '<RestApiId>|<AuthorizerId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id,
                JSON_EXTRACT(detail.Properties, '$.AuthorizerId') as authorizer_id,
                JSON_EXTRACT(detail.Properties, '$.AuthType') as auth_type,
                JSON_EXTRACT(detail.Properties, '$.AuthorizerCredentials') as authorizer_credentials,
                JSON_EXTRACT(detail.Properties, '$.AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
                JSON_EXTRACT(detail.Properties, '$.AuthorizerUri') as authorizer_uri,
                JSON_EXTRACT(detail.Properties, '$.IdentitySource') as identity_source,
                JSON_EXTRACT(detail.Properties, '$.IdentityValidationExpression') as identity_validation_expression,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.ProviderARNs') as provider_arns,
                JSON_EXTRACT(detail.Properties, '$.Type') as type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::Authorizer'
                AND detail.data__TypeName = 'AWS::ApiGateway::Authorizer'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                  json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id,
                  json_extract_path_text(Properties, 'AuthType') as auth_type,
                  json_extract_path_text(Properties, 'AuthorizerCredentials') as authorizer_credentials,
                  json_extract_path_text(Properties, 'AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
                  json_extract_path_text(Properties, 'AuthorizerUri') as authorizer_uri,
                  json_extract_path_text(Properties, 'IdentitySource') as identity_source,
                  json_extract_path_text(Properties, 'IdentityValidationExpression') as identity_validation_expression,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'ProviderARNs') as provider_arns,
                  json_extract_path_text(Properties, 'Type') as type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Authorizer'
                  AND data__Identifier = '<RestApiId>|<AuthorizerId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id,
                    json_extract_path_text(detail.Properties, 'AuthorizerId') as authorizer_id,
                    json_extract_path_text(detail.Properties, 'AuthType') as auth_type,
                    json_extract_path_text(detail.Properties, 'AuthorizerCredentials') as authorizer_credentials,
                    json_extract_path_text(detail.Properties, 'AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
                    json_extract_path_text(detail.Properties, 'AuthorizerUri') as authorizer_uri,
                    json_extract_path_text(detail.Properties, 'IdentitySource') as identity_source,
                    json_extract_path_text(detail.Properties, 'IdentityValidationExpression') as identity_validation_expression,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'ProviderARNs') as provider_arns,
                    json_extract_path_text(detail.Properties, 'Type') as type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::Authorizer'
                    AND detail.data__TypeName = 'AWS::ApiGateway::Authorizer'
                    AND listing.region = 'us-east-1'
    authorizers_list_only:
      name: authorizers_list_only
      id: aws.apigateway.authorizers_list_only
      x-cfn-schema-name: Authorizer
      x-cfn-type-name: AWS::ApiGateway::Authorizer
      x-identifiers:
        - RestApiId
        - AuthorizerId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Authorizer'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Authorizer'
                AND region = 'us-east-1'
    base_path_mappings:
      name: base_path_mappings
      id: aws.apigateway.base_path_mappings
      x-cfn-schema-name: BasePathMapping
      x-cfn-type-name: AWS::ApiGateway::BasePathMapping
      x-identifiers:
        - DomainName
        - BasePath
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__BasePathMapping&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::BasePathMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::BasePathMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::BasePathMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/base_path_mappings/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/base_path_mappings/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/base_path_mappings/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.BasePath') as base_path,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.Stage') as stage
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::BasePathMapping'
              AND data__Identifier = '<DomainName>|<BasePath>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.BasePath') as base_path,
                JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id,
                JSON_EXTRACT(detail.Properties, '$.Stage') as stage
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::BasePathMapping'
                AND detail.data__TypeName = 'AWS::ApiGateway::BasePathMapping'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'BasePath') as base_path,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                  json_extract_path_text(Properties, 'Stage') as stage
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::BasePathMapping'
                  AND data__Identifier = '<DomainName>|<BasePath>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'BasePath') as base_path,
                    json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id,
                    json_extract_path_text(detail.Properties, 'Stage') as stage
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::BasePathMapping'
                    AND detail.data__TypeName = 'AWS::ApiGateway::BasePathMapping'
                    AND listing.region = 'us-east-1'
    base_path_mappings_list_only:
      name: base_path_mappings_list_only
      id: aws.apigateway.base_path_mappings_list_only
      x-cfn-schema-name: BasePathMapping
      x-cfn-type-name: AWS::ApiGateway::BasePathMapping
      x-identifiers:
        - DomainName
        - BasePath
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.BasePath') as base_path
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::BasePathMapping'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'BasePath') as base_path
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::BasePathMapping'
                AND region = 'us-east-1'
    base_path_mapping_v2s:
      name: base_path_mapping_v2s
      id: aws.apigateway.base_path_mapping_v2s
      x-cfn-schema-name: BasePathMappingV2
      x-cfn-type-name: AWS::ApiGateway::BasePathMappingV2
      x-identifiers:
        - BasePathMappingArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__BasePathMappingV2&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::BasePathMappingV2"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::BasePathMappingV2"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::BasePathMappingV2"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/base_path_mapping_v2s/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/base_path_mapping_v2s/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/base_path_mapping_v2s/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.BasePath') as base_path,
              JSON_EXTRACT(Properties, '$.DomainNameArn') as domain_name_arn,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.Stage') as stage,
              JSON_EXTRACT(Properties, '$.BasePathMappingArn') as base_path_mapping_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::BasePathMappingV2'
              AND data__Identifier = '<BasePathMappingArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.BasePath') as base_path,
                JSON_EXTRACT(detail.Properties, '$.DomainNameArn') as domain_name_arn,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id,
                JSON_EXTRACT(detail.Properties, '$.Stage') as stage,
                JSON_EXTRACT(detail.Properties, '$.BasePathMappingArn') as base_path_mapping_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::BasePathMappingV2'
                AND detail.data__TypeName = 'AWS::ApiGateway::BasePathMappingV2'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'BasePath') as base_path,
                  json_extract_path_text(Properties, 'DomainNameArn') as domain_name_arn,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                  json_extract_path_text(Properties, 'Stage') as stage,
                  json_extract_path_text(Properties, 'BasePathMappingArn') as base_path_mapping_arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::BasePathMappingV2'
                  AND data__Identifier = '<BasePathMappingArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'BasePath') as base_path,
                    json_extract_path_text(detail.Properties, 'DomainNameArn') as domain_name_arn,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id,
                    json_extract_path_text(detail.Properties, 'Stage') as stage,
                    json_extract_path_text(detail.Properties, 'BasePathMappingArn') as base_path_mapping_arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::BasePathMappingV2'
                    AND detail.data__TypeName = 'AWS::ApiGateway::BasePathMappingV2'
                    AND listing.region = 'us-east-1'
    base_path_mapping_v2s_list_only:
      name: base_path_mapping_v2s_list_only
      id: aws.apigateway.base_path_mapping_v2s_list_only
      x-cfn-schema-name: BasePathMappingV2
      x-cfn-type-name: AWS::ApiGateway::BasePathMappingV2
      x-identifiers:
        - BasePathMappingArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BasePathMappingArn') as base_path_mapping_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::BasePathMappingV2'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'BasePathMappingArn') as base_path_mapping_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::BasePathMappingV2'
                AND region = 'us-east-1'
    client_certificates:
      name: client_certificates
      id: aws.apigateway.client_certificates
      x-cfn-schema-name: ClientCertificate
      x-cfn-type-name: AWS::ApiGateway::ClientCertificate
      x-identifiers:
        - ClientCertificateId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ClientCertificate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::ClientCertificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::ClientCertificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::ClientCertificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/client_certificates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/client_certificates/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/client_certificates/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::ClientCertificate'
              AND data__Identifier = '<ClientCertificateId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ClientCertificateId') as client_certificate_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::ClientCertificate'
                AND detail.data__TypeName = 'AWS::ApiGateway::ClientCertificate'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ClientCertificateId') as client_certificate_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::ClientCertificate'
                  AND data__Identifier = '<ClientCertificateId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ClientCertificateId') as client_certificate_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::ClientCertificate'
                    AND detail.data__TypeName = 'AWS::ApiGateway::ClientCertificate'
                    AND listing.region = 'us-east-1'
    client_certificates_list_only:
      name: client_certificates_list_only
      id: aws.apigateway.client_certificates_list_only
      x-cfn-schema-name: ClientCertificate
      x-cfn-type-name: AWS::ApiGateway::ClientCertificate
      x-identifiers:
        - ClientCertificateId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::ClientCertificate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClientCertificateId') as client_certificate_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::ClientCertificate'
                AND region = 'us-east-1'
    client_certificate_tags:
      name: client_certificate_tags
      id: aws.apigateway.client_certificate_tags
      x-cfn-schema-name: ClientCertificate
      x-cfn-type-name: AWS::ApiGateway::ClientCertificate
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ClientCertificateId') as client_certificate_id,
              JSON_EXTRACT(detail.Properties, '$.Description') as description
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGateway::ClientCertificate'
              AND detail.data__TypeName = 'AWS::ApiGateway::ClientCertificate'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ClientCertificateId') as client_certificate_id,
                json_extract_path_text(detail.Properties, 'Description') as description
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGateway::ClientCertificate'
                AND detail.data__TypeName = 'AWS::ApiGateway::ClientCertificate'
                AND listing.region = 'us-east-1'
    deployments:
      name: deployments
      id: aws.apigateway.deployments
      x-cfn-schema-name: Deployment
      x-cfn-type-name: AWS::ApiGateway::Deployment
      x-identifiers:
        - DeploymentId
        - RestApiId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Deployment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Deployment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Deployment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Deployment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/deployments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/deployments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/deployments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.StageDescription') as stage_description,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.DeploymentCanarySettings') as deployment_canary_settings
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Deployment'
              AND data__Identifier = '<DeploymentId>|<RestApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DeploymentId') as deployment_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.StageDescription') as stage_description,
                JSON_EXTRACT(detail.Properties, '$.StageName') as stage_name,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id,
                JSON_EXTRACT(detail.Properties, '$.DeploymentCanarySettings') as deployment_canary_settings
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::Deployment'
                AND detail.data__TypeName = 'AWS::ApiGateway::Deployment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DeploymentId') as deployment_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'StageDescription') as stage_description,
                  json_extract_path_text(Properties, 'StageName') as stage_name,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                  json_extract_path_text(Properties, 'DeploymentCanarySettings') as deployment_canary_settings
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Deployment'
                  AND data__Identifier = '<DeploymentId>|<RestApiId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DeploymentId') as deployment_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'StageDescription') as stage_description,
                    json_extract_path_text(detail.Properties, 'StageName') as stage_name,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id,
                    json_extract_path_text(detail.Properties, 'DeploymentCanarySettings') as deployment_canary_settings
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::Deployment'
                    AND detail.data__TypeName = 'AWS::ApiGateway::Deployment'
                    AND listing.region = 'us-east-1'
    deployments_list_only:
      name: deployments_list_only
      id: aws.apigateway.deployments_list_only
      x-cfn-schema-name: Deployment
      x-cfn-type-name: AWS::ApiGateway::Deployment
      x-identifiers:
        - DeploymentId
        - RestApiId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Deployment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DeploymentId') as deployment_id,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Deployment'
                AND region = 'us-east-1'
    documentation_parts:
      name: documentation_parts
      id: aws.apigateway.documentation_parts
      x-cfn-schema-name: DocumentationPart
      x-cfn-type-name: AWS::ApiGateway::DocumentationPart
      x-identifiers:
        - DocumentationPartId
        - RestApiId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DocumentationPart&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DocumentationPart"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DocumentationPart"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DocumentationPart"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/documentation_parts/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/documentation_parts/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/documentation_parts/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DocumentationPartId') as documentation_part_id,
              JSON_EXTRACT(Properties, '$.Location') as location,
              JSON_EXTRACT(Properties, '$.Properties') as properties,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DocumentationPart'
              AND data__Identifier = '<DocumentationPartId>|<RestApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DocumentationPartId') as documentation_part_id,
                JSON_EXTRACT(detail.Properties, '$.Location') as location,
                JSON_EXTRACT(detail.Properties, '$.Properties') as properties,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::DocumentationPart'
                AND detail.data__TypeName = 'AWS::ApiGateway::DocumentationPart'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DocumentationPartId') as documentation_part_id,
                  json_extract_path_text(Properties, 'Location') as location,
                  json_extract_path_text(Properties, 'Properties') as properties,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DocumentationPart'
                  AND data__Identifier = '<DocumentationPartId>|<RestApiId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DocumentationPartId') as documentation_part_id,
                    json_extract_path_text(detail.Properties, 'Location') as location,
                    json_extract_path_text(detail.Properties, 'Properties') as properties,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::DocumentationPart'
                    AND detail.data__TypeName = 'AWS::ApiGateway::DocumentationPart'
                    AND listing.region = 'us-east-1'
    documentation_parts_list_only:
      name: documentation_parts_list_only
      id: aws.apigateway.documentation_parts_list_only
      x-cfn-schema-name: DocumentationPart
      x-cfn-type-name: AWS::ApiGateway::DocumentationPart
      x-identifiers:
        - DocumentationPartId
        - RestApiId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DocumentationPartId') as documentation_part_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DocumentationPart'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DocumentationPartId') as documentation_part_id,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DocumentationPart'
                AND region = 'us-east-1'
    documentation_versions:
      name: documentation_versions
      id: aws.apigateway.documentation_versions
      x-cfn-schema-name: DocumentationVersion
      x-cfn-type-name: AWS::ApiGateway::DocumentationVersion
      x-identifiers:
        - DocumentationVersion
        - RestApiId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DocumentationVersion&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DocumentationVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DocumentationVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DocumentationVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/documentation_versions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/documentation_versions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/documentation_versions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DocumentationVersion') as documentation_version,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
              AND data__Identifier = '<DocumentationVersion>|<RestApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.DocumentationVersion') as documentation_version,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
                AND detail.data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'DocumentationVersion') as documentation_version,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
                  AND data__Identifier = '<DocumentationVersion>|<RestApiId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'DocumentationVersion') as documentation_version,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
                    AND detail.data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
                    AND listing.region = 'us-east-1'
    documentation_versions_list_only:
      name: documentation_versions_list_only
      id: aws.apigateway.documentation_versions_list_only
      x-cfn-schema-name: DocumentationVersion
      x-cfn-type-name: AWS::ApiGateway::DocumentationVersion
      x-identifiers:
        - DocumentationVersion
        - RestApiId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DocumentationVersion') as documentation_version,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DocumentationVersion') as documentation_version,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
                AND region = 'us-east-1'
    domain_names:
      name: domain_names
      id: aws.apigateway.domain_names
      x-cfn-schema-name: DomainName
      x-cfn-type-name: AWS::ApiGateway::DomainName
      x-identifiers:
        - DomainName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DomainName&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/domain_names/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/domain_names/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/domain_names/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.MutualTlsAuthentication') as mutual_tls_authentication,
              JSON_EXTRACT(Properties, '$.OwnershipVerificationCertificateArn') as ownership_verification_certificate_arn,
              JSON_EXTRACT(Properties, '$.RegionalHostedZoneId') as regional_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.RegionalDomainName') as regional_domain_name,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.SecurityPolicy') as security_policy,
              JSON_EXTRACT(Properties, '$.DistributionHostedZoneId') as distribution_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.EndpointConfiguration') as endpoint_configuration,
              JSON_EXTRACT(Properties, '$.DistributionDomainName') as distribution_domain_name,
              JSON_EXTRACT(Properties, '$.RegionalCertificateArn') as regional_certificate_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DomainName'
              AND data__Identifier = '<DomainName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.MutualTlsAuthentication') as mutual_tls_authentication,
                JSON_EXTRACT(detail.Properties, '$.OwnershipVerificationCertificateArn') as ownership_verification_certificate_arn,
                JSON_EXTRACT(detail.Properties, '$.RegionalHostedZoneId') as regional_hosted_zone_id,
                JSON_EXTRACT(detail.Properties, '$.RegionalDomainName') as regional_domain_name,
                JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(detail.Properties, '$.SecurityPolicy') as security_policy,
                JSON_EXTRACT(detail.Properties, '$.DistributionHostedZoneId') as distribution_hosted_zone_id,
                JSON_EXTRACT(detail.Properties, '$.EndpointConfiguration') as endpoint_configuration,
                JSON_EXTRACT(detail.Properties, '$.DistributionDomainName') as distribution_domain_name,
                JSON_EXTRACT(detail.Properties, '$.RegionalCertificateArn') as regional_certificate_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainName'
                AND detail.data__TypeName = 'AWS::ApiGateway::DomainName'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'MutualTlsAuthentication') as mutual_tls_authentication,
                  json_extract_path_text(Properties, 'OwnershipVerificationCertificateArn') as ownership_verification_certificate_arn,
                  json_extract_path_text(Properties, 'RegionalHostedZoneId') as regional_hosted_zone_id,
                  json_extract_path_text(Properties, 'RegionalDomainName') as regional_domain_name,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'SecurityPolicy') as security_policy,
                  json_extract_path_text(Properties, 'DistributionHostedZoneId') as distribution_hosted_zone_id,
                  json_extract_path_text(Properties, 'EndpointConfiguration') as endpoint_configuration,
                  json_extract_path_text(Properties, 'DistributionDomainName') as distribution_domain_name,
                  json_extract_path_text(Properties, 'RegionalCertificateArn') as regional_certificate_arn,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'CertificateArn') as certificate_arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DomainName'
                  AND data__Identifier = '<DomainName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'MutualTlsAuthentication') as mutual_tls_authentication,
                    json_extract_path_text(detail.Properties, 'OwnershipVerificationCertificateArn') as ownership_verification_certificate_arn,
                    json_extract_path_text(detail.Properties, 'RegionalHostedZoneId') as regional_hosted_zone_id,
                    json_extract_path_text(detail.Properties, 'RegionalDomainName') as regional_domain_name,
                    json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                    json_extract_path_text(detail.Properties, 'SecurityPolicy') as security_policy,
                    json_extract_path_text(detail.Properties, 'DistributionHostedZoneId') as distribution_hosted_zone_id,
                    json_extract_path_text(detail.Properties, 'EndpointConfiguration') as endpoint_configuration,
                    json_extract_path_text(detail.Properties, 'DistributionDomainName') as distribution_domain_name,
                    json_extract_path_text(detail.Properties, 'RegionalCertificateArn') as regional_certificate_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainName'
                    AND detail.data__TypeName = 'AWS::ApiGateway::DomainName'
                    AND listing.region = 'us-east-1'
    domain_names_list_only:
      name: domain_names_list_only
      id: aws.apigateway.domain_names_list_only
      x-cfn-schema-name: DomainName
      x-cfn-type-name: AWS::ApiGateway::DomainName
      x-identifiers:
        - DomainName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DomainName'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainName') as domain_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DomainName'
                AND region = 'us-east-1'
    domain_name_tags:
      name: domain_name_tags
      id: aws.apigateway.domain_name_tags
      x-cfn-schema-name: DomainName
      x-cfn-type-name: AWS::ApiGateway::DomainName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.MutualTlsAuthentication') as mutual_tls_authentication,
              JSON_EXTRACT(detail.Properties, '$.OwnershipVerificationCertificateArn') as ownership_verification_certificate_arn,
              JSON_EXTRACT(detail.Properties, '$.RegionalHostedZoneId') as regional_hosted_zone_id,
              JSON_EXTRACT(detail.Properties, '$.RegionalDomainName') as regional_domain_name,
              JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(detail.Properties, '$.SecurityPolicy') as security_policy,
              JSON_EXTRACT(detail.Properties, '$.DistributionHostedZoneId') as distribution_hosted_zone_id,
              JSON_EXTRACT(detail.Properties, '$.EndpointConfiguration') as endpoint_configuration,
              JSON_EXTRACT(detail.Properties, '$.DistributionDomainName') as distribution_domain_name,
              JSON_EXTRACT(detail.Properties, '$.RegionalCertificateArn') as regional_certificate_arn,
              JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainName'
              AND detail.data__TypeName = 'AWS::ApiGateway::DomainName'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'MutualTlsAuthentication') as mutual_tls_authentication,
                json_extract_path_text(detail.Properties, 'OwnershipVerificationCertificateArn') as ownership_verification_certificate_arn,
                json_extract_path_text(detail.Properties, 'RegionalHostedZoneId') as regional_hosted_zone_id,
                json_extract_path_text(detail.Properties, 'RegionalDomainName') as regional_domain_name,
                json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                json_extract_path_text(detail.Properties, 'SecurityPolicy') as security_policy,
                json_extract_path_text(detail.Properties, 'DistributionHostedZoneId') as distribution_hosted_zone_id,
                json_extract_path_text(detail.Properties, 'EndpointConfiguration') as endpoint_configuration,
                json_extract_path_text(detail.Properties, 'DistributionDomainName') as distribution_domain_name,
                json_extract_path_text(detail.Properties, 'RegionalCertificateArn') as regional_certificate_arn,
                json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainName'
                AND detail.data__TypeName = 'AWS::ApiGateway::DomainName'
                AND listing.region = 'us-east-1'
    domain_name_access_associations:
      name: domain_name_access_associations
      id: aws.apigateway.domain_name_access_associations
      x-cfn-schema-name: DomainNameAccessAssociation
      x-cfn-type-name: AWS::ApiGateway::DomainNameAccessAssociation
      x-identifiers:
        - DomainNameAccessAssociationArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DomainNameAccessAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DomainNameAccessAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DomainNameAccessAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/domain_name_access_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/domain_name_access_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DomainNameAccessAssociationArn') as domain_name_access_association_arn,
              JSON_EXTRACT(Properties, '$.DomainNameArn') as domain_name_arn,
              JSON_EXTRACT(Properties, '$.AccessAssociationSource') as access_association_source,
              JSON_EXTRACT(Properties, '$.AccessAssociationSourceType') as access_association_source_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
              AND data__Identifier = '<DomainNameAccessAssociationArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DomainNameAccessAssociationArn') as domain_name_access_association_arn,
                JSON_EXTRACT(detail.Properties, '$.DomainNameArn') as domain_name_arn,
                JSON_EXTRACT(detail.Properties, '$.AccessAssociationSource') as access_association_source,
                JSON_EXTRACT(detail.Properties, '$.AccessAssociationSourceType') as access_association_source_type,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
                AND detail.data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DomainNameAccessAssociationArn') as domain_name_access_association_arn,
                  json_extract_path_text(Properties, 'DomainNameArn') as domain_name_arn,
                  json_extract_path_text(Properties, 'AccessAssociationSource') as access_association_source,
                  json_extract_path_text(Properties, 'AccessAssociationSourceType') as access_association_source_type,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
                  AND data__Identifier = '<DomainNameAccessAssociationArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DomainNameAccessAssociationArn') as domain_name_access_association_arn,
                    json_extract_path_text(detail.Properties, 'DomainNameArn') as domain_name_arn,
                    json_extract_path_text(detail.Properties, 'AccessAssociationSource') as access_association_source,
                    json_extract_path_text(detail.Properties, 'AccessAssociationSourceType') as access_association_source_type,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
                    AND detail.data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
                    AND listing.region = 'us-east-1'
    domain_name_access_associations_list_only:
      name: domain_name_access_associations_list_only
      id: aws.apigateway.domain_name_access_associations_list_only
      x-cfn-schema-name: DomainNameAccessAssociation
      x-cfn-type-name: AWS::ApiGateway::DomainNameAccessAssociation
      x-identifiers:
        - DomainNameAccessAssociationArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainNameAccessAssociationArn') as domain_name_access_association_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainNameAccessAssociationArn') as domain_name_access_association_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
                AND region = 'us-east-1'
    domain_name_access_association_tags:
      name: domain_name_access_association_tags
      id: aws.apigateway.domain_name_access_association_tags
      x-cfn-schema-name: DomainNameAccessAssociation
      x-cfn-type-name: AWS::ApiGateway::DomainNameAccessAssociation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DomainNameAccessAssociationArn') as domain_name_access_association_arn,
              JSON_EXTRACT(detail.Properties, '$.DomainNameArn') as domain_name_arn,
              JSON_EXTRACT(detail.Properties, '$.AccessAssociationSource') as access_association_source,
              JSON_EXTRACT(detail.Properties, '$.AccessAssociationSourceType') as access_association_source_type
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
              AND detail.data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DomainNameAccessAssociationArn') as domain_name_access_association_arn,
                json_extract_path_text(detail.Properties, 'DomainNameArn') as domain_name_arn,
                json_extract_path_text(detail.Properties, 'AccessAssociationSource') as access_association_source,
                json_extract_path_text(detail.Properties, 'AccessAssociationSourceType') as access_association_source_type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
                AND detail.data__TypeName = 'AWS::ApiGateway::DomainNameAccessAssociation'
                AND listing.region = 'us-east-1'
    domain_name_v2s:
      name: domain_name_v2s
      id: aws.apigateway.domain_name_v2s
      x-cfn-schema-name: DomainNameV2
      x-cfn-type-name: AWS::ApiGateway::DomainNameV2
      x-identifiers:
        - DomainNameArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DomainNameV2&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DomainNameV2"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DomainNameV2"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::DomainNameV2"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/domain_name_v2s/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/domain_name_v2s/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/domain_name_v2s/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.EndpointConfiguration') as endpoint_configuration,
              JSON_EXTRACT(Properties, '$.SecurityPolicy') as security_policy,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.DomainNameId') as domain_name_id,
              JSON_EXTRACT(Properties, '$.DomainNameArn') as domain_name_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DomainNameV2'
              AND data__Identifier = '<DomainNameArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn,
                JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(detail.Properties, '$.EndpointConfiguration') as endpoint_configuration,
                JSON_EXTRACT(detail.Properties, '$.SecurityPolicy') as security_policy,
                JSON_EXTRACT(detail.Properties, '$.Policy') as policy,
                JSON_EXTRACT(detail.Properties, '$.DomainNameId') as domain_name_id,
                JSON_EXTRACT(detail.Properties, '$.DomainNameArn') as domain_name_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainNameV2'
                AND detail.data__TypeName = 'AWS::ApiGateway::DomainNameV2'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'EndpointConfiguration') as endpoint_configuration,
                  json_extract_path_text(Properties, 'SecurityPolicy') as security_policy,
                  json_extract_path_text(Properties, 'Policy') as policy,
                  json_extract_path_text(Properties, 'DomainNameId') as domain_name_id,
                  json_extract_path_text(Properties, 'DomainNameArn') as domain_name_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DomainNameV2'
                  AND data__Identifier = '<DomainNameArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn,
                    json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                    json_extract_path_text(detail.Properties, 'EndpointConfiguration') as endpoint_configuration,
                    json_extract_path_text(detail.Properties, 'SecurityPolicy') as security_policy,
                    json_extract_path_text(detail.Properties, 'Policy') as policy,
                    json_extract_path_text(detail.Properties, 'DomainNameId') as domain_name_id,
                    json_extract_path_text(detail.Properties, 'DomainNameArn') as domain_name_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainNameV2'
                    AND detail.data__TypeName = 'AWS::ApiGateway::DomainNameV2'
                    AND listing.region = 'us-east-1'
    domain_name_v2s_list_only:
      name: domain_name_v2s_list_only
      id: aws.apigateway.domain_name_v2s_list_only
      x-cfn-schema-name: DomainNameV2
      x-cfn-type-name: AWS::ApiGateway::DomainNameV2
      x-identifiers:
        - DomainNameArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainNameArn') as domain_name_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DomainNameV2'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainNameArn') as domain_name_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DomainNameV2'
                AND region = 'us-east-1'
    domain_name_v2_tags:
      name: domain_name_v2_tags
      id: aws.apigateway.domain_name_v2_tags
      x-cfn-schema-name: DomainNameV2
      x-cfn-type-name: AWS::ApiGateway::DomainNameV2
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(detail.Properties, '$.EndpointConfiguration') as endpoint_configuration,
              JSON_EXTRACT(detail.Properties, '$.SecurityPolicy') as security_policy,
              JSON_EXTRACT(detail.Properties, '$.Policy') as policy,
              JSON_EXTRACT(detail.Properties, '$.DomainNameId') as domain_name_id,
              JSON_EXTRACT(detail.Properties, '$.DomainNameArn') as domain_name_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainNameV2'
              AND detail.data__TypeName = 'AWS::ApiGateway::DomainNameV2'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn,
                json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                json_extract_path_text(detail.Properties, 'EndpointConfiguration') as endpoint_configuration,
                json_extract_path_text(detail.Properties, 'SecurityPolicy') as security_policy,
                json_extract_path_text(detail.Properties, 'Policy') as policy,
                json_extract_path_text(detail.Properties, 'DomainNameId') as domain_name_id,
                json_extract_path_text(detail.Properties, 'DomainNameArn') as domain_name_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGateway::DomainNameV2'
                AND detail.data__TypeName = 'AWS::ApiGateway::DomainNameV2'
                AND listing.region = 'us-east-1'
    gateway_responses:
      name: gateway_responses
      id: aws.apigateway.gateway_responses
      x-cfn-schema-name: GatewayResponse
      x-cfn-type-name: AWS::ApiGateway::GatewayResponse
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__GatewayResponse&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::GatewayResponse"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::GatewayResponse"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::GatewayResponse"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/gateway_responses/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/gateway_responses/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/gateway_responses/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ResponseType') as response_type,
              JSON_EXTRACT(Properties, '$.StatusCode') as status_code,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.ResponseTemplates') as response_templates
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::GatewayResponse'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id,
                JSON_EXTRACT(detail.Properties, '$.ResponseType') as response_type,
                JSON_EXTRACT(detail.Properties, '$.StatusCode') as status_code,
                JSON_EXTRACT(detail.Properties, '$.ResponseParameters') as response_parameters,
                JSON_EXTRACT(detail.Properties, '$.ResponseTemplates') as response_templates
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::GatewayResponse'
                AND detail.data__TypeName = 'AWS::ApiGateway::GatewayResponse'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                  json_extract_path_text(Properties, 'ResponseType') as response_type,
                  json_extract_path_text(Properties, 'StatusCode') as status_code,
                  json_extract_path_text(Properties, 'ResponseParameters') as response_parameters,
                  json_extract_path_text(Properties, 'ResponseTemplates') as response_templates
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::GatewayResponse'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id,
                    json_extract_path_text(detail.Properties, 'ResponseType') as response_type,
                    json_extract_path_text(detail.Properties, 'StatusCode') as status_code,
                    json_extract_path_text(detail.Properties, 'ResponseParameters') as response_parameters,
                    json_extract_path_text(detail.Properties, 'ResponseTemplates') as response_templates
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::GatewayResponse'
                    AND detail.data__TypeName = 'AWS::ApiGateway::GatewayResponse'
                    AND listing.region = 'us-east-1'
    gateway_responses_list_only:
      name: gateway_responses_list_only
      id: aws.apigateway.gateway_responses_list_only
      x-cfn-schema-name: GatewayResponse
      x-cfn-type-name: AWS::ApiGateway::GatewayResponse
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::GatewayResponse'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::GatewayResponse'
                AND region = 'us-east-1'
    methods:
      name: methods
      id: aws.apigateway.methods
      x-cfn-schema-name: Method
      x-cfn-type-name: AWS::ApiGateway::Method
      x-identifiers:
        - RestApiId
        - ResourceId
        - HttpMethod
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Method&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Method"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Method"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Method"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/methods/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/methods/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/methods/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Integration') as integration,
              JSON_EXTRACT(Properties, '$.OperationName') as operation_name,
              JSON_EXTRACT(Properties, '$.RequestModels') as request_models,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.AuthorizationScopes') as authorization_scopes,
              JSON_EXTRACT(Properties, '$.RequestValidatorId') as request_validator_id,
              JSON_EXTRACT(Properties, '$.RequestParameters') as request_parameters,
              JSON_EXTRACT(Properties, '$.MethodResponses') as method_responses,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ApiKeyRequired') as api_key_required,
              JSON_EXTRACT(Properties, '$.AuthorizationType') as authorization_type,
              JSON_EXTRACT(Properties, '$.HttpMethod') as http_method
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Method'
              AND data__Identifier = '<RestApiId>|<ResourceId>|<HttpMethod>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Integration') as integration,
                json_extract_path_text(Properties, 'OperationName') as operation_name,
                json_extract_path_text(Properties, 'RequestModels') as request_models,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'AuthorizationScopes') as authorization_scopes,
                json_extract_path_text(Properties, 'RequestValidatorId') as request_validator_id,
                json_extract_path_text(Properties, 'RequestParameters') as request_parameters,
                json_extract_path_text(Properties, 'MethodResponses') as method_responses,
                json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id,
                json_extract_path_text(Properties, 'ResourceId') as resource_id,
                json_extract_path_text(Properties, 'ApiKeyRequired') as api_key_required,
                json_extract_path_text(Properties, 'AuthorizationType') as authorization_type,
                json_extract_path_text(Properties, 'HttpMethod') as http_method
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Method'
                AND data__Identifier = '<RestApiId>|<ResourceId>|<HttpMethod>'
                AND region = 'us-east-1'
    models:
      name: models
      id: aws.apigateway.models
      x-cfn-schema-name: Model
      x-cfn-type-name: AWS::ApiGateway::Model
      x-identifiers:
        - RestApiId
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Model&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Model"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Model"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Model"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/models/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/models/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/models/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ContentType') as content_type,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.Schema') as _schema
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Model'
              AND data__Identifier = '<RestApiId>|<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ContentType') as content_type,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id,
                JSON_EXTRACT(detail.Properties, '$.Schema') as _schema
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::Model'
                AND detail.data__TypeName = 'AWS::ApiGateway::Model'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ContentType') as content_type,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                  json_extract_path_text(Properties, 'Schema') as _schema
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Model'
                  AND data__Identifier = '<RestApiId>|<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ContentType') as content_type,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id,
                    json_extract_path_text(detail.Properties, 'Schema') as _schema
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::Model'
                    AND detail.data__TypeName = 'AWS::ApiGateway::Model'
                    AND listing.region = 'us-east-1'
    models_list_only:
      name: models_list_only
      id: aws.apigateway.models_list_only
      x-cfn-schema-name: Model
      x-cfn-type-name: AWS::ApiGateway::Model
      x-identifiers:
        - RestApiId
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Model'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Model'
                AND region = 'us-east-1'
    request_validators:
      name: request_validators
      id: aws.apigateway.request_validators
      x-cfn-schema-name: RequestValidator
      x-cfn-type-name: AWS::ApiGateway::RequestValidator
      x-identifiers:
        - RestApiId
        - RequestValidatorId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RequestValidator&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::RequestValidator"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::RequestValidator"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::RequestValidator"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/request_validators/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/request_validators/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/request_validators/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RequestValidatorId') as request_validator_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ValidateRequestBody') as validate_request_body,
              JSON_EXTRACT(Properties, '$.ValidateRequestParameters') as validate_request_parameters
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::RequestValidator'
              AND data__Identifier = '<RestApiId>|<RequestValidatorId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RequestValidatorId') as request_validator_id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id,
                JSON_EXTRACT(detail.Properties, '$.ValidateRequestBody') as validate_request_body,
                JSON_EXTRACT(detail.Properties, '$.ValidateRequestParameters') as validate_request_parameters
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::RequestValidator'
                AND detail.data__TypeName = 'AWS::ApiGateway::RequestValidator'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RequestValidatorId') as request_validator_id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                  json_extract_path_text(Properties, 'ValidateRequestBody') as validate_request_body,
                  json_extract_path_text(Properties, 'ValidateRequestParameters') as validate_request_parameters
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::RequestValidator'
                  AND data__Identifier = '<RestApiId>|<RequestValidatorId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RequestValidatorId') as request_validator_id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id,
                    json_extract_path_text(detail.Properties, 'ValidateRequestBody') as validate_request_body,
                    json_extract_path_text(detail.Properties, 'ValidateRequestParameters') as validate_request_parameters
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::RequestValidator'
                    AND detail.data__TypeName = 'AWS::ApiGateway::RequestValidator'
                    AND listing.region = 'us-east-1'
    request_validators_list_only:
      name: request_validators_list_only
      id: aws.apigateway.request_validators_list_only
      x-cfn-schema-name: RequestValidator
      x-cfn-type-name: AWS::ApiGateway::RequestValidator
      x-identifiers:
        - RestApiId
        - RequestValidatorId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.RequestValidatorId') as request_validator_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::RequestValidator'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'RequestValidatorId') as request_validator_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::RequestValidator'
                AND region = 'us-east-1'
    resources:
      name: resources
      id: aws.apigateway.resources
      x-cfn-schema-name: Resource
      x-cfn-type-name: AWS::ApiGateway::Resource
      x-identifiers:
        - RestApiId
        - ResourceId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Resource&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Resource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Resource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Resource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resources/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resources/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/resources/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ParentId') as parent_id,
              JSON_EXTRACT(Properties, '$.PathPart') as path_part,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Resource'
              AND data__Identifier = '<RestApiId>|<ResourceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ParentId') as parent_id,
                JSON_EXTRACT(detail.Properties, '$.PathPart') as path_part,
                JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::Resource'
                AND detail.data__TypeName = 'AWS::ApiGateway::Resource'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ParentId') as parent_id,
                  json_extract_path_text(Properties, 'PathPart') as path_part,
                  json_extract_path_text(Properties, 'ResourceId') as resource_id,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Resource'
                  AND data__Identifier = '<RestApiId>|<ResourceId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ParentId') as parent_id,
                    json_extract_path_text(detail.Properties, 'PathPart') as path_part,
                    json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::Resource'
                    AND detail.data__TypeName = 'AWS::ApiGateway::Resource'
                    AND listing.region = 'us-east-1'
    resources_list_only:
      name: resources_list_only
      id: aws.apigateway.resources_list_only
      x-cfn-schema-name: Resource
      x-cfn-type-name: AWS::ApiGateway::Resource
      x-identifiers:
        - RestApiId
        - ResourceId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Resource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'ResourceId') as resource_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Resource'
                AND region = 'us-east-1'
    rest_apis:
      name: rest_apis
      id: aws.apigateway.rest_apis
      x-cfn-schema-name: RestApi
      x-cfn-type-name: AWS::ApiGateway::RestApi
      x-identifiers:
        - RestApiId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RestApi&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::RestApi"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::RestApi"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::RestApi"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/rest_apis/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/rest_apis/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/rest_apis/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.BodyS3Location') as body_s3_location,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.MinimumCompressionSize') as minimum_compression_size,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.CloneFrom') as clone_from,
              JSON_EXTRACT(Properties, '$.Mode') as mode,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
              JSON_EXTRACT(Properties, '$.FailOnWarnings') as fail_on_warnings,
              JSON_EXTRACT(Properties, '$.BinaryMediaTypes') as binary_media_types,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RootResourceId') as root_resource_id,
              JSON_EXTRACT(Properties, '$.ApiKeySourceType') as api_key_source_type,
              JSON_EXTRACT(Properties, '$.EndpointConfiguration') as endpoint_configuration,
              JSON_EXTRACT(Properties, '$.Body') as body,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::RestApi'
              AND data__Identifier = '<RestApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Policy') as policy,
                JSON_EXTRACT(detail.Properties, '$.BodyS3Location') as body_s3_location,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.MinimumCompressionSize') as minimum_compression_size,
                JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters,
                JSON_EXTRACT(detail.Properties, '$.CloneFrom') as clone_from,
                JSON_EXTRACT(detail.Properties, '$.Mode') as mode,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id,
                JSON_EXTRACT(detail.Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
                JSON_EXTRACT(detail.Properties, '$.FailOnWarnings') as fail_on_warnings,
                JSON_EXTRACT(detail.Properties, '$.BinaryMediaTypes') as binary_media_types,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.RootResourceId') as root_resource_id,
                JSON_EXTRACT(detail.Properties, '$.ApiKeySourceType') as api_key_source_type,
                JSON_EXTRACT(detail.Properties, '$.EndpointConfiguration') as endpoint_configuration,
                JSON_EXTRACT(detail.Properties, '$.Body') as body,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::RestApi'
                AND detail.data__TypeName = 'AWS::ApiGateway::RestApi'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Policy') as policy,
                  json_extract_path_text(Properties, 'BodyS3Location') as body_s3_location,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'MinimumCompressionSize') as minimum_compression_size,
                  json_extract_path_text(Properties, 'Parameters') as parameters,
                  json_extract_path_text(Properties, 'CloneFrom') as clone_from,
                  json_extract_path_text(Properties, 'Mode') as mode,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                  json_extract_path_text(Properties, 'DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
                  json_extract_path_text(Properties, 'FailOnWarnings') as fail_on_warnings,
                  json_extract_path_text(Properties, 'BinaryMediaTypes') as binary_media_types,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'RootResourceId') as root_resource_id,
                  json_extract_path_text(Properties, 'ApiKeySourceType') as api_key_source_type,
                  json_extract_path_text(Properties, 'EndpointConfiguration') as endpoint_configuration,
                  json_extract_path_text(Properties, 'Body') as body,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::RestApi'
                  AND data__Identifier = '<RestApiId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Policy') as policy,
                    json_extract_path_text(detail.Properties, 'BodyS3Location') as body_s3_location,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'MinimumCompressionSize') as minimum_compression_size,
                    json_extract_path_text(detail.Properties, 'Parameters') as parameters,
                    json_extract_path_text(detail.Properties, 'CloneFrom') as clone_from,
                    json_extract_path_text(detail.Properties, 'Mode') as mode,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id,
                    json_extract_path_text(detail.Properties, 'DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
                    json_extract_path_text(detail.Properties, 'FailOnWarnings') as fail_on_warnings,
                    json_extract_path_text(detail.Properties, 'BinaryMediaTypes') as binary_media_types,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'RootResourceId') as root_resource_id,
                    json_extract_path_text(detail.Properties, 'ApiKeySourceType') as api_key_source_type,
                    json_extract_path_text(detail.Properties, 'EndpointConfiguration') as endpoint_configuration,
                    json_extract_path_text(detail.Properties, 'Body') as body,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::RestApi'
                    AND detail.data__TypeName = 'AWS::ApiGateway::RestApi'
                    AND listing.region = 'us-east-1'
    rest_apis_list_only:
      name: rest_apis_list_only
      id: aws.apigateway.rest_apis_list_only
      x-cfn-schema-name: RestApi
      x-cfn-type-name: AWS::ApiGateway::RestApi
      x-identifiers:
        - RestApiId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::RestApi'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::RestApi'
                AND region = 'us-east-1'
    rest_api_tags:
      name: rest_api_tags
      id: aws.apigateway.rest_api_tags
      x-cfn-schema-name: RestApi
      x-cfn-type-name: AWS::ApiGateway::RestApi
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Policy') as policy,
              JSON_EXTRACT(detail.Properties, '$.BodyS3Location') as body_s3_location,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.MinimumCompressionSize') as minimum_compression_size,
              JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(detail.Properties, '$.CloneFrom') as clone_from,
              JSON_EXTRACT(detail.Properties, '$.Mode') as mode,
              JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(detail.Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
              JSON_EXTRACT(detail.Properties, '$.FailOnWarnings') as fail_on_warnings,
              JSON_EXTRACT(detail.Properties, '$.BinaryMediaTypes') as binary_media_types,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.RootResourceId') as root_resource_id,
              JSON_EXTRACT(detail.Properties, '$.ApiKeySourceType') as api_key_source_type,
              JSON_EXTRACT(detail.Properties, '$.EndpointConfiguration') as endpoint_configuration,
              JSON_EXTRACT(detail.Properties, '$.Body') as body
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGateway::RestApi'
              AND detail.data__TypeName = 'AWS::ApiGateway::RestApi'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Policy') as policy,
                json_extract_path_text(detail.Properties, 'BodyS3Location') as body_s3_location,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'MinimumCompressionSize') as minimum_compression_size,
                json_extract_path_text(detail.Properties, 'Parameters') as parameters,
                json_extract_path_text(detail.Properties, 'CloneFrom') as clone_from,
                json_extract_path_text(detail.Properties, 'Mode') as mode,
                json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(detail.Properties, 'DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
                json_extract_path_text(detail.Properties, 'FailOnWarnings') as fail_on_warnings,
                json_extract_path_text(detail.Properties, 'BinaryMediaTypes') as binary_media_types,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'RootResourceId') as root_resource_id,
                json_extract_path_text(detail.Properties, 'ApiKeySourceType') as api_key_source_type,
                json_extract_path_text(detail.Properties, 'EndpointConfiguration') as endpoint_configuration,
                json_extract_path_text(detail.Properties, 'Body') as body
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGateway::RestApi'
                AND detail.data__TypeName = 'AWS::ApiGateway::RestApi'
                AND listing.region = 'us-east-1'
    stages:
      name: stages
      id: aws.apigateway.stages
      x-cfn-schema-name: Stage
      x-cfn-type-name: AWS::ApiGateway::Stage
      x-identifiers:
        - RestApiId
        - StageName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Stage&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Stage"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Stage"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::Stage"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/stages/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/stages/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/stages/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessLogSetting') as access_log_setting,
              JSON_EXTRACT(Properties, '$.CacheClusterEnabled') as cache_cluster_enabled,
              JSON_EXTRACT(Properties, '$.CacheClusterSize') as cache_cluster_size,
              JSON_EXTRACT(Properties, '$.CanarySetting') as canary_setting,
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DocumentationVersion') as documentation_version,
              JSON_EXTRACT(Properties, '$.MethodSettings') as method_settings,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TracingEnabled') as tracing_enabled,
              JSON_EXTRACT(Properties, '$.Variables') as variables
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Stage'
              AND data__Identifier = '<RestApiId>|<StageName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccessLogSetting') as access_log_setting,
                JSON_EXTRACT(detail.Properties, '$.CacheClusterEnabled') as cache_cluster_enabled,
                JSON_EXTRACT(detail.Properties, '$.CacheClusterSize') as cache_cluster_size,
                JSON_EXTRACT(detail.Properties, '$.CanarySetting') as canary_setting,
                JSON_EXTRACT(detail.Properties, '$.ClientCertificateId') as client_certificate_id,
                JSON_EXTRACT(detail.Properties, '$.DeploymentId') as deployment_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.DocumentationVersion') as documentation_version,
                JSON_EXTRACT(detail.Properties, '$.MethodSettings') as method_settings,
                JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id,
                JSON_EXTRACT(detail.Properties, '$.StageName') as stage_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.TracingEnabled') as tracing_enabled,
                JSON_EXTRACT(detail.Properties, '$.Variables') as variables
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::Stage'
                AND detail.data__TypeName = 'AWS::ApiGateway::Stage'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccessLogSetting') as access_log_setting,
                  json_extract_path_text(Properties, 'CacheClusterEnabled') as cache_cluster_enabled,
                  json_extract_path_text(Properties, 'CacheClusterSize') as cache_cluster_size,
                  json_extract_path_text(Properties, 'CanarySetting') as canary_setting,
                  json_extract_path_text(Properties, 'ClientCertificateId') as client_certificate_id,
                  json_extract_path_text(Properties, 'DeploymentId') as deployment_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'DocumentationVersion') as documentation_version,
                  json_extract_path_text(Properties, 'MethodSettings') as method_settings,
                  json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                  json_extract_path_text(Properties, 'StageName') as stage_name,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'TracingEnabled') as tracing_enabled,
                  json_extract_path_text(Properties, 'Variables') as variables
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Stage'
                  AND data__Identifier = '<RestApiId>|<StageName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccessLogSetting') as access_log_setting,
                    json_extract_path_text(detail.Properties, 'CacheClusterEnabled') as cache_cluster_enabled,
                    json_extract_path_text(detail.Properties, 'CacheClusterSize') as cache_cluster_size,
                    json_extract_path_text(detail.Properties, 'CanarySetting') as canary_setting,
                    json_extract_path_text(detail.Properties, 'ClientCertificateId') as client_certificate_id,
                    json_extract_path_text(detail.Properties, 'DeploymentId') as deployment_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'DocumentationVersion') as documentation_version,
                    json_extract_path_text(detail.Properties, 'MethodSettings') as method_settings,
                    json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id,
                    json_extract_path_text(detail.Properties, 'StageName') as stage_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'TracingEnabled') as tracing_enabled,
                    json_extract_path_text(detail.Properties, 'Variables') as variables
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::Stage'
                    AND detail.data__TypeName = 'AWS::ApiGateway::Stage'
                    AND listing.region = 'us-east-1'
    stages_list_only:
      name: stages_list_only
      id: aws.apigateway.stages_list_only
      x-cfn-schema-name: Stage
      x-cfn-type-name: AWS::ApiGateway::Stage
      x-identifiers:
        - RestApiId
        - StageName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Stage'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'StageName') as stage_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Stage'
                AND region = 'us-east-1'
    stage_tags:
      name: stage_tags
      id: aws.apigateway.stage_tags
      x-cfn-schema-name: Stage
      x-cfn-type-name: AWS::ApiGateway::Stage
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AccessLogSetting') as access_log_setting,
              JSON_EXTRACT(detail.Properties, '$.CacheClusterEnabled') as cache_cluster_enabled,
              JSON_EXTRACT(detail.Properties, '$.CacheClusterSize') as cache_cluster_size,
              JSON_EXTRACT(detail.Properties, '$.CanarySetting') as canary_setting,
              JSON_EXTRACT(detail.Properties, '$.ClientCertificateId') as client_certificate_id,
              JSON_EXTRACT(detail.Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.DocumentationVersion') as documentation_version,
              JSON_EXTRACT(detail.Properties, '$.MethodSettings') as method_settings,
              JSON_EXTRACT(detail.Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(detail.Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(detail.Properties, '$.TracingEnabled') as tracing_enabled,
              JSON_EXTRACT(detail.Properties, '$.Variables') as variables
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGateway::Stage'
              AND detail.data__TypeName = 'AWS::ApiGateway::Stage'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AccessLogSetting') as access_log_setting,
                json_extract_path_text(detail.Properties, 'CacheClusterEnabled') as cache_cluster_enabled,
                json_extract_path_text(detail.Properties, 'CacheClusterSize') as cache_cluster_size,
                json_extract_path_text(detail.Properties, 'CanarySetting') as canary_setting,
                json_extract_path_text(detail.Properties, 'ClientCertificateId') as client_certificate_id,
                json_extract_path_text(detail.Properties, 'DeploymentId') as deployment_id,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'DocumentationVersion') as documentation_version,
                json_extract_path_text(detail.Properties, 'MethodSettings') as method_settings,
                json_extract_path_text(detail.Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(detail.Properties, 'StageName') as stage_name,
                json_extract_path_text(detail.Properties, 'TracingEnabled') as tracing_enabled,
                json_extract_path_text(detail.Properties, 'Variables') as variables
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGateway::Stage'
                AND detail.data__TypeName = 'AWS::ApiGateway::Stage'
                AND listing.region = 'us-east-1'
    usage_plans:
      name: usage_plans
      id: aws.apigateway.usage_plans
      x-cfn-schema-name: UsagePlan
      x-cfn-type-name: AWS::ApiGateway::UsagePlan
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__UsagePlan&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::UsagePlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::UsagePlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::UsagePlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/usage_plans/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/usage_plans/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/usage_plans/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiStages') as api_stages,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Quota') as quota,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Throttle') as throttle,
              JSON_EXTRACT(Properties, '$.UsagePlanName') as usage_plan_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::UsagePlan'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.ApiStages') as api_stages,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Quota') as quota,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Throttle') as throttle,
                JSON_EXTRACT(detail.Properties, '$.UsagePlanName') as usage_plan_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::UsagePlan'
                AND detail.data__TypeName = 'AWS::ApiGateway::UsagePlan'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'ApiStages') as api_stages,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Quota') as quota,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Throttle') as throttle,
                  json_extract_path_text(Properties, 'UsagePlanName') as usage_plan_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::UsagePlan'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'ApiStages') as api_stages,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Quota') as quota,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Throttle') as throttle,
                    json_extract_path_text(detail.Properties, 'UsagePlanName') as usage_plan_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::UsagePlan'
                    AND detail.data__TypeName = 'AWS::ApiGateway::UsagePlan'
                    AND listing.region = 'us-east-1'
    usage_plans_list_only:
      name: usage_plans_list_only
      id: aws.apigateway.usage_plans_list_only
      x-cfn-schema-name: UsagePlan
      x-cfn-type-name: AWS::ApiGateway::UsagePlan
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::UsagePlan'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::UsagePlan'
                AND region = 'us-east-1'
    usage_plan_tags:
      name: usage_plan_tags
      id: aws.apigateway.usage_plan_tags
      x-cfn-schema-name: UsagePlan
      x-cfn-type-name: AWS::ApiGateway::UsagePlan
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.ApiStages') as api_stages,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Quota') as quota,
              JSON_EXTRACT(detail.Properties, '$.Throttle') as throttle,
              JSON_EXTRACT(detail.Properties, '$.UsagePlanName') as usage_plan_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGateway::UsagePlan'
              AND detail.data__TypeName = 'AWS::ApiGateway::UsagePlan'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'ApiStages') as api_stages,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Quota') as quota,
                json_extract_path_text(detail.Properties, 'Throttle') as throttle,
                json_extract_path_text(detail.Properties, 'UsagePlanName') as usage_plan_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGateway::UsagePlan'
                AND detail.data__TypeName = 'AWS::ApiGateway::UsagePlan'
                AND listing.region = 'us-east-1'
    usage_plan_keys:
      name: usage_plan_keys
      id: aws.apigateway.usage_plan_keys
      x-cfn-schema-name: UsagePlanKey
      x-cfn-type-name: AWS::ApiGateway::UsagePlanKey
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__UsagePlanKey&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::UsagePlanKey"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::UsagePlanKey"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/usage_plan_keys/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/usage_plan_keys/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.KeyId') as key_id,
              JSON_EXTRACT(Properties, '$.KeyType') as key_type,
              JSON_EXTRACT(Properties, '$.UsagePlanId') as usage_plan_id,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.KeyId') as key_id,
                JSON_EXTRACT(detail.Properties, '$.KeyType') as key_type,
                JSON_EXTRACT(detail.Properties, '$.UsagePlanId') as usage_plan_id,
                JSON_EXTRACT(detail.Properties, '$.Id') as id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
                AND detail.data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'KeyId') as key_id,
                  json_extract_path_text(Properties, 'KeyType') as key_type,
                  json_extract_path_text(Properties, 'UsagePlanId') as usage_plan_id,
                  json_extract_path_text(Properties, 'Id') as id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'KeyId') as key_id,
                    json_extract_path_text(detail.Properties, 'KeyType') as key_type,
                    json_extract_path_text(detail.Properties, 'UsagePlanId') as usage_plan_id,
                    json_extract_path_text(detail.Properties, 'Id') as id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
                    AND detail.data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
                    AND listing.region = 'us-east-1'
    usage_plan_keys_list_only:
      name: usage_plan_keys_list_only
      id: aws.apigateway.usage_plan_keys_list_only
      x-cfn-schema-name: UsagePlanKey
      x-cfn-type-name: AWS::ApiGateway::UsagePlanKey
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
                AND region = 'us-east-1'
    vpc_links:
      name: vpc_links
      id: aws.apigateway.vpc_links
      x-cfn-schema-name: VpcLink
      x-cfn-type-name: AWS::ApiGateway::VpcLink
      x-identifiers:
        - VpcLinkId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VpcLink&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::VpcLink"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::VpcLink"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGateway::VpcLink"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_links/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_links/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_links/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TargetArns') as target_arns,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::VpcLink'
              AND data__Identifier = '<VpcLinkId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.TargetArns') as target_arns,
                JSON_EXTRACT(detail.Properties, '$.VpcLinkId') as vpc_link_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGateway::VpcLink'
                AND detail.data__TypeName = 'AWS::ApiGateway::VpcLink'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'TargetArns') as target_arns,
                  json_extract_path_text(Properties, 'VpcLinkId') as vpc_link_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::VpcLink'
                  AND data__Identifier = '<VpcLinkId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'TargetArns') as target_arns,
                    json_extract_path_text(detail.Properties, 'VpcLinkId') as vpc_link_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGateway::VpcLink'
                    AND detail.data__TypeName = 'AWS::ApiGateway::VpcLink'
                    AND listing.region = 'us-east-1'
    vpc_links_list_only:
      name: vpc_links_list_only
      id: aws.apigateway.vpc_links_list_only
      x-cfn-schema-name: VpcLink
      x-cfn-type-name: AWS::ApiGateway::VpcLink
      x-identifiers:
        - VpcLinkId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::VpcLink'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VpcLinkId') as vpc_link_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::VpcLink'
                AND region = 'us-east-1'
    vpc_link_tags:
      name: vpc_link_tags
      id: aws.apigateway.vpc_link_tags
      x-cfn-schema-name: VpcLink
      x-cfn-type-name: AWS::ApiGateway::VpcLink
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.TargetArns') as target_arns,
              JSON_EXTRACT(detail.Properties, '$.VpcLinkId') as vpc_link_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGateway::VpcLink'
              AND detail.data__TypeName = 'AWS::ApiGateway::VpcLink'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'TargetArns') as target_arns,
                json_extract_path_text(detail.Properties, 'VpcLinkId') as vpc_link_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGateway::VpcLink'
                AND detail.data__TypeName = 'AWS::ApiGateway::VpcLink'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Account&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAccount
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ApiKey&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateApiKey
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Authorizer&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAuthorizer
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAuthorizerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__BasePathMapping&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateBasePathMapping
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateBasePathMappingRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__BasePathMappingV2&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateBasePathMappingV2
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateBasePathMappingV2Request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ClientCertificate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateClientCertificate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateClientCertificateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Deployment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDeployment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDeploymentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DocumentationPart&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDocumentationPart
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDocumentationPartRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DocumentationVersion&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDocumentationVersion
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDocumentationVersionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DomainName&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDomainName
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDomainNameRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DomainNameAccessAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDomainNameAccessAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDomainNameAccessAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DomainNameV2&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDomainNameV2
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDomainNameV2Request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__GatewayResponse&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateGatewayResponse
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateGatewayResponseRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Method&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateMethod
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateMethodRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Model&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateModel
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateModelRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RequestValidator&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRequestValidator
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRequestValidatorRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Resource&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResourceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RestApi&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRestApi
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRestApiRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Stage&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateStage
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateStageRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__UsagePlan&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateUsagePlan
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateUsagePlanRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__UsagePlanKey&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateUsagePlanKey
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateUsagePlanKeyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VpcLink&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVpcLink
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVpcLinkRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
