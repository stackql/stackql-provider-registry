openapi: 3.0.0
info:
  title: ApiGateway
  version: 1.0.0
paths: {}
components:
  schemas:
    Account:
      type: object
      properties:
        Id:
          description: Primary identifier which is manually generated.
          type: string
        CloudWatchRoleArn:
          description: The Amazon Resource Name (ARN) of an IAM role that has write access to CloudWatch Logs in your account.
          type: string
      x-stackql-resource-name: account
      x-stackql-primaryIdentifier:
        - Id
    StageKey:
      type: object
      additionalProperties: false
      properties:
        RestApiId:
          description: The ID of a RestApi resource that includes the stage with which you want to associate the API key.
          type: string
        StageName:
          description: 'The name of the stage with which to associate the API key. The stage must be included in the RestApi resource that you specified in the RestApiId property. '
          type: string
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    ApiKey:
      type: object
      properties:
        APIKeyId:
          description: 'A Unique Key ID which identifies the API Key. Generated by the Create API and returned by the Read and List APIs '
          type: string
        CustomerId:
          description: An AWS Marketplace customer identifier to use when integrating with the AWS SaaS Marketplace.
          type: string
        Description:
          description: A description of the purpose of the API key.
          type: string
        Enabled:
          description: Indicates whether the API key can be used by clients.
          default: false
          type: boolean
        GenerateDistinctId:
          description: Specifies whether the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.
          type: boolean
        Name:
          description: A name for the API key. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the API key name.
          type: string
        StageKeys:
          description: A list of stages to associate with this API key.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/StageKey'
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the API key.
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Value:
          description: The value of the API key. Must be at least 20 characters long.
          type: string
      x-stackql-resource-name: api_key
      x-stackql-primaryIdentifier:
        - APIKeyId
    Authorizer:
      type: object
      properties:
        RestApiId:
          description: The identifier of the API.
          type: string
        AuthorizerId:
          type: string
        AuthType:
          description: Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
          type: string
        AuthorizerCredentials:
          description: Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer.
          type: string
        AuthorizerResultTtlInSeconds:
          description: The TTL in seconds of cached authorizer results.
          type: integer
        AuthorizerUri:
          description: Specifies the authorizer's Uniform Resource Identifier (URI).
          type: string
        IdentitySource:
          description: The identity source for which authorization is requested.
          type: string
        IdentityValidationExpression:
          description: A validation expression for the incoming identity token.
          type: string
        Name:
          description: The name of the authorizer.
          type: string
        ProviderARNs:
          description: A list of the Amazon Cognito user pool ARNs for the COGNITO_USER_POOLS authorizer.
          type: array
          uniqueItems: true
          items:
            type: string
          x-insertionOrder: false
        Type:
          description: The authorizer type.
          type: string
      required:
        - RestApiId
        - Type
        - Name
      x-stackql-resource-name: authorizer
      x-stackql-primaryIdentifier:
        - RestApiId
        - AuthorizerId
    BasePathMapping:
      type: object
      properties:
        BasePath:
          type: string
          description: The base path name that callers of the API must provide in the URL after the domain name.
        DomainName:
          type: string
          description: The DomainName of an AWS::ApiGateway::DomainName resource.
        RestApiId:
          type: string
          description: The ID of the API.
        Stage:
          type: string
          description: The name of the API's stage.
      required:
        - DomainName
      x-stackql-resource-name: base_path_mapping
      x-stackql-primaryIdentifier:
        - DomainName
        - BasePath
    ClientCertificate:
      type: object
      properties:
        ClientCertificateId:
          description: The Primary Identifier of the Client Certficate, generated by a Create API Call
          type: string
        Description:
          description: A description of the client certificate.
          type: string
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the client certificate.
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: client_certificate
      x-stackql-primaryIdentifier:
        - ClientCertificateId
    StageDescription:
      type: object
      additionalProperties: false
      properties:
        AccessLogSetting:
          description: Specifies settings for logging access in this stage.
          $ref: '#/components/schemas/AccessLogSetting'
        CacheClusterEnabled:
          description: Indicates whether cache clustering is enabled for the stage.
          type: boolean
        CacheClusterSize:
          description: The size of the stage's cache cluster.
          type: string
        CacheDataEncrypted:
          description: 'The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses. '
          type: boolean
        CacheTtlInSeconds:
          description: 'The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses. '
          type: integer
        CachingEnabled:
          description: Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses.
          type: boolean
        CanarySetting:
          description: Specifies settings for the canary deployment in this stage.
          $ref: '#/components/schemas/CanarySetting'
        ClientCertificateId:
          description: 'The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage. '
          type: string
        DataTraceEnabled:
          description: 'Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs. '
          type: boolean
        Description:
          description: A description of the purpose of the stage.
          type: string
        DocumentationVersion:
          description: The version identifier of the API documentation snapshot.
          type: string
        LoggingLevel:
          description: 'The logging level for this method. For valid values, see the loggingLevel property of the Stage resource in the Amazon API Gateway API Reference. '
          type: string
        MethodSettings:
          description: Configures settings for all of the stage's methods.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MethodSetting'
        MetricsEnabled:
          description: Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
          type: boolean
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the stage.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        ThrottlingBurstLimit:
          description: The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
          type: integer
        ThrottlingRateLimit:
          description: The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
          type: number
        TracingEnabled:
          description: Specifies whether active tracing with X-ray is enabled for this stage.
          type: boolean
        Variables:
          description: 'A map that defines the stage variables. Variable names must consist of alphanumeric characters, and the values must match the following regular expression: [A-Za-z0-9-._~:/?#&=,]+. '
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
    DeploymentCanarySettings:
      type: object
      additionalProperties: false
      properties:
        PercentTraffic:
          description: The percentage (0-100) of traffic diverted to a canary deployment.
          type: number
        StageVariableOverrides:
          description: Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values. Duplicates are not allowed.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        UseStageCache:
          description: Whether the canary deployment uses the stage cache.
          type: boolean
    AccessLogSetting:
      description: Specifies settings for logging access in this stage.
      type: object
      additionalProperties: false
      properties:
        DestinationArn:
          description: The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with amazon-apigateway-. This parameter is required to enable access logging.
          type: string
        Format:
          description: A single line format of the access logs of data, as specified by selected $context variables (https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference). The format must include at least $context.requestId. This parameter is required to enable access logging.
          type: string
    CanarySetting:
      description: Specifies settings for the canary deployment in this stage.
      type: object
      additionalProperties: false
      properties:
        DeploymentId:
          description: The identifier of the deployment that the stage points to.
          type: string
        PercentTraffic:
          description: The percentage (0-100) of traffic diverted to a canary deployment.
          type: number
          minimum: 0
          maximum: 100
        StageVariableOverrides:
          description: Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        UseStageCache:
          description: Whether the canary deployment uses the stage cache or not.
          type: boolean
    MethodSetting:
      description: Configures settings for all methods in a stage.
      type: object
      additionalProperties: false
      properties:
        CacheDataEncrypted:
          description: Indicates whether the cached responses are encrypted.
          type: boolean
        CacheTtlInSeconds:
          description: The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
          type: integer
        CachingEnabled:
          description: Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses.
          type: boolean
        DataTraceEnabled:
          description: Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
          type: boolean
        HttpMethod:
          description: The HTTP method. You can use an asterisk (*) as a wildcard to apply method settings to multiple methods.
          type: string
        LoggingLevel:
          description: The logging level for this method. For valid values, see the loggingLevel property of the Stage (https://docs.aws.amazon.com/apigateway/api-reference/resource/stage/#loggingLevel) resource in the Amazon API Gateway API Reference.
          type: string
        MetricsEnabled:
          description: Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
          type: boolean
        ResourcePath:
          description: The resource path for this method. Forward slashes (/) are encoded as ~1 and the initial slash must include a forward slash. For example, the path value /resource/subresource must be encoded as /~1resource~1subresource. To specify the root path, use only a slash (/). You can use an asterisk (*) as a wildcard to apply method settings to multiple methods.
          type: string
        ThrottlingBurstLimit:
          description: The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
          type: integer
          minimum: 0
        ThrottlingRateLimit:
          description: The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
          type: number
          minimum: 0
    Deployment:
      type: object
      properties:
        DeploymentId:
          type: string
          description: Primary Id for this resource
        DeploymentCanarySettings:
          $ref: '#/components/schemas/DeploymentCanarySettings'
          description: Specifies settings for the canary deployment.
        Description:
          type: string
          description: A description of the purpose of the API Gateway deployment.
        RestApiId:
          type: string
          description: 'The ID of the RestApi resource to deploy. '
        StageDescription:
          $ref: '#/components/schemas/StageDescription'
          description: Configures the stage that API Gateway creates with this deployment.
        StageName:
          type: string
          description: A name for the stage that API Gateway creates with this deployment. Use only alphanumeric characters.
      required:
        - RestApiId
      x-stackql-resource-name: deployment
      x-stackql-primaryIdentifier:
        - DeploymentId
        - RestApiId
    Location:
      type: object
      additionalProperties: false
      properties:
        Method:
          description: The HTTP verb of a method.
          type: string
        Name:
          description: The name of the targeted API entity.
          type: string
        Path:
          description: The URL path of the target.
          type: string
        StatusCode:
          description: The HTTP status code of a response.
          type: string
        Type:
          description: The type of API entity that the documentation content applies to.
          type: string
          enum:
            - API
            - AUTHORIZER
            - MODEL
            - RESOURCE
            - METHOD
            - PATH_PARAMETER
            - QUERY_PARAMETER
            - REQUEST_HEADER
            - REQUEST_BODY
            - RESPONSE
            - RESPONSE_HEADER
            - RESPONSE_BODY
    DocumentationPart:
      type: object
      properties:
        DocumentationPartId:
          description: The identifier of the documentation Part.
          type: string
        Location:
          description: The location of the API entity that the documentation applies to.
          $ref: '#/components/schemas/Location'
        Properties:
          description: The documentation content map of the targeted API entity.
          type: string
        RestApiId:
          description: Identifier of the targeted API entity
          type: string
      required:
        - Location
        - Properties
        - RestApiId
      x-stackql-resource-name: documentation_part
      x-stackql-primaryIdentifier:
        - DocumentationPartId
        - RestApiId
    DocumentationVersion:
      type: object
      properties:
        Description:
          description: The description of the API documentation snapshot.
          type: string
        DocumentationVersion:
          description: The version identifier of the API documentation snapshot.
          type: string
          minLength: 1
        RestApiId:
          description: The identifier of the API.
          type: string
          minLength: 1
      required:
        - DocumentationVersion
        - RestApiId
      x-stackql-resource-name: documentation_version
      x-stackql-primaryIdentifier:
        - DocumentationVersion
        - RestApiId
    EndpointConfiguration:
      type: object
      additionalProperties: false
      properties:
        Types:
          type: array
          uniqueItems: true
          items:
            type: string
        VpcEndpointIds:
          type: array
          uniqueItems: true
          items:
            type: string
    MutualTlsAuthentication:
      type: object
      properties:
        TruststoreUri:
          type: string
        TruststoreVersion:
          type: string
      additionalProperties: false
    DomainName:
      type: object
      properties:
        DomainName:
          type: string
        DistributionDomainName:
          type: string
        DistributionHostedZoneId:
          type: string
        EndpointConfiguration:
          $ref: '#/components/schemas/EndpointConfiguration'
        MutualTlsAuthentication:
          $ref: '#/components/schemas/MutualTlsAuthentication'
        RegionalDomainName:
          type: string
        RegionalHostedZoneId:
          type: string
        CertificateArn:
          type: string
        RegionalCertificateArn:
          type: string
        OwnershipVerificationCertificateArn:
          type: string
        SecurityPolicy:
          type: string
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: domain_name
      x-stackql-primaryIdentifier:
        - DomainName
    GatewayResponse:
      type: object
      properties:
        Id:
          description: A Cloudformation auto generated ID.
          type: string
        RestApiId:
          description: The identifier of the API.
          type: string
        ResponseType:
          description: The type of the Gateway Response.
          type: string
        StatusCode:
          description: The HTTP status code for the response.
          type: string
        ResponseParameters:
          description: The response parameters (paths, query strings, and headers) for the response.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        ResponseTemplates:
          description: The response templates for the response.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      required:
        - ResponseType
        - RestApiId
      x-stackql-resource-name: gateway_response
      x-stackql-primaryIdentifier:
        - Id
    Integration:
      type: object
      additionalProperties: false
      properties:
        CacheKeyParameters:
          description: A list of request parameters whose values API Gateway caches.
          type: array
          uniqueItems: true
          items:
            type: string
        CacheNamespace:
          description: An API-specific tag group of related cached parameters.
          type: string
        ConnectionId:
          description: The ID of the VpcLink used for the integration when connectionType=VPC_LINK, otherwise undefined.
          type: string
        ConnectionType:
          description: The type of the network connection to the integration endpoint.
          type: string
          enum:
            - INTERNET
            - VPC_LINK
        ContentHandling:
          description: Specifies how to handle request payload content type conversions.
          type: string
          enum:
            - CONVERT_TO_BINARY
            - CONVERT_TO_TEXT
        Credentials:
          description: The credentials that are required for the integration.
          type: string
        IntegrationHttpMethod:
          description: The integration's HTTP method type.
          type: string
        IntegrationResponses:
          description: The response that API Gateway provides after a method's backend completes processing a request.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/IntegrationResponse'
        PassthroughBehavior:
          description: Indicates when API Gateway passes requests to the targeted backend.
          type: string
          enum:
            - WHEN_NO_MATCH
            - WHEN_NO_TEMPLATES
            - NEVER
        RequestParameters:
          description: The request parameters that API Gateway sends with the backend request.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        RequestTemplates:
          description: A map of Apache Velocity templates that are applied on the request payload.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        TimeoutInMillis:
          description: Custom timeout between 50 and 29,000 milliseconds.
          type: integer
          minimum: 50
          maximum: 29000
        Type:
          description: The type of backend that your method is running.
          type: string
          enum:
            - AWS
            - AWS_PROXY
            - HTTP
            - HTTP_PROXY
            - MOCK
        Uri:
          description: The Uniform Resource Identifier (URI) for the integration.
          type: string
      required:
        - Type
    MethodResponse:
      type: object
      additionalProperties: false
      properties:
        ResponseModels:
          description: The resources used for the response's content type. Specify response models as key-value pairs (string-to-string maps), with a content type as the key and a Model resource name as the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        ResponseParameters:
          description: Response parameters that API Gateway sends to the client that called a method. Specify response parameters as key-value pairs (string-to-Boolean maps), with a destination as the key and a Boolean as the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: boolean
        StatusCode:
          description: The method response's status code, which you map to an IntegrationResponse.
          type: string
      required:
        - StatusCode
    IntegrationResponse:
      type: object
      additionalProperties: false
      properties:
        ContentHandling:
          description: Specifies how to handle request payload content type conversions.
          type: string
          enum:
            - CONVERT_TO_BINARY
            - CONVERT_TO_TEXT
        ResponseParameters:
          description: The response parameters from the backend response that API Gateway sends to the method response.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        ResponseTemplates:
          description: The templates that are used to transform the integration response body. Specify templates as key-value pairs (string-to-string mappings), with a content type as the key and a template as the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        SelectionPattern:
          description: A regular expression that specifies which error strings or status codes from the backend map to the integration response.
          type: string
        StatusCode:
          description: The status code that API Gateway uses to map the integration response to a MethodResponse status code.
          type: string
      required:
        - StatusCode
    Method:
      type: object
      properties:
        ApiKeyRequired:
          description: Indicates whether the method requires clients to submit a valid API key.
          type: boolean
        AuthorizationScopes:
          description: A list of authorization scopes configured on the method.
          type: array
          items:
            type: string
        AuthorizationType:
          description: The method's authorization type.
          type: string
          enum:
            - NONE
            - AWS_IAM
            - CUSTOM
            - COGNITO_USER_POOLS
        AuthorizerId:
          description: The identifier of the authorizer to use on this method.
          type: string
        HttpMethod:
          description: The backend system that the method calls when it receives a request.
          type: string
        Integration:
          description: The backend system that the method calls when it receives a request.
          $ref: '#/components/schemas/Integration'
        MethodResponses:
          description: The responses that can be sent to the client who calls the method.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/MethodResponse'
        OperationName:
          description: A friendly operation name for the method.
          type: string
        RequestModels:
          description: The resources that are used for the request's content type. Specify request models as key-value pairs (string-to-string mapping), with a content type as the key and a Model resource name as the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        RequestParameters:
          description: The request parameters that API Gateway accepts. Specify request parameters as key-value pairs (string-to-Boolean mapping), with a source as the key and a Boolean as the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: boolean
        RequestValidatorId:
          description: The ID of the associated request validator.
          type: string
        ResourceId:
          description: The ID of an API Gateway resource.
          type: string
        RestApiId:
          description: The ID of the RestApi resource in which API Gateway creates the method.
          type: string
      required:
        - RestApiId
        - ResourceId
        - HttpMethod
      x-stackql-resource-name: method
      x-stackql-primaryIdentifier:
        - RestApiId
        - ResourceId
        - HttpMethod
    Model:
      type: object
      properties:
        ContentType:
          type: string
          description: The content type for the model.
        Description:
          type: string
          description: A description that identifies this model.
        Name:
          type: string
          description: A name for the model. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the model name.
        RestApiId:
          type: string
          description: The ID of a REST API with which to associate this model.
        Schema:
          type: string
      required:
        - RestApiId
      x-stackql-resource-name: model
      x-stackql-primaryIdentifier:
        - RestApiId
        - Name
    RequestValidator:
      type: object
      properties:
        RequestValidatorId:
          description: ID of the request validator.
          type: string
        Name:
          description: Name of the request validator.
          type: string
        RestApiId:
          description: The identifier of the targeted API entity.
          type: string
        ValidateRequestBody:
          description: 'Indicates whether to validate the request body according to the configured schema for the targeted API and method. '
          type: boolean
        ValidateRequestParameters:
          description: Indicates whether to validate request parameters.
          type: boolean
      required:
        - RestApiId
      x-stackql-resource-name: request_validator
      x-stackql-primaryIdentifier:
        - RestApiId
        - RequestValidatorId
    Resource:
      type: object
      properties:
        ResourceId:
          description: A unique primary identifier for a Resource
          type: string
        RestApiId:
          description: The ID of the RestApi resource in which you want to create this resource..
          type: string
        ParentId:
          description: The parent resource's identifier.
          type: string
        PathPart:
          description: The last path segment for this resource.
          type: string
      required:
        - ParentId
        - PathPart
        - RestApiId
      x-stackql-resource-name: resource
      x-stackql-primaryIdentifier:
        - RestApiId
        - ResourceId
    S3Location:
      type: object
      additionalProperties: false
      properties:
        Bucket:
          type: string
        ETag:
          type: string
        Version:
          type: string
        Key:
          type: string
    RestApi:
      type: object
      properties:
        RestApiId:
          type: string
        RootResourceId:
          type: string
        ApiKeySourceType:
          type: string
        BinaryMediaTypes:
          type: array
          uniqueItems: true
          items:
            type: string
        Body:
          type: string
        BodyS3Location:
          $ref: '#/components/schemas/S3Location'
        CloneFrom:
          type: string
        EndpointConfiguration:
          $ref: '#/components/schemas/EndpointConfiguration'
        Description:
          type: string
        DisableExecuteApiEndpoint:
          type: boolean
        FailOnWarnings:
          type: boolean
        Name:
          type: string
        MinimumCompressionSize:
          type: integer
        Mode:
          type: string
        Policy:
          type: string
        Parameters:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: rest_api
      x-stackql-primaryIdentifier:
        - RestApiId
    Stage:
      type: object
      properties:
        AccessLogSetting:
          description: Specifies settings for logging access in this stage.
          $ref: '#/components/schemas/AccessLogSetting'
        CacheClusterEnabled:
          description: Indicates whether cache clustering is enabled for the stage.
          type: boolean
        CacheClusterSize:
          description: The stage's cache cluster size.
          type: string
        CanarySetting:
          description: Specifies settings for the canary deployment in this stage.
          $ref: '#/components/schemas/CanarySetting'
        ClientCertificateId:
          description: 'The ID of the client certificate that API Gateway uses to call your integration endpoints in the stage. '
          type: string
        DeploymentId:
          description: 'The ID of the deployment that the stage is associated with. This parameter is required to create a stage. '
          type: string
        Description:
          description: A description of the stage.
          type: string
        DocumentationVersion:
          description: The version ID of the API documentation snapshot.
          type: string
        MethodSettings:
          description: Settings for all methods in the stage.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MethodSetting'
        RestApiId:
          description: The ID of the RestApi resource that you're deploying with this stage.
          type: string
        StageName:
          description: The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI).
          type: string
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the stage.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        TracingEnabled:
          description: Specifies whether active X-Ray tracing is enabled for this stage.
          type: boolean
        Variables:
          description: A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      required:
        - RestApiId
      x-stackql-resource-name: stage
      x-stackql-primaryIdentifier:
        - RestApiId
        - StageName
    ApiStage:
      type: object
      additionalProperties: false
      properties:
        ApiId:
          type: string
          description: The ID of an API that is in the specified Stage property that you want to associate with the usage plan.
        Stage:
          type: string
          description: The name of the stage to associate with the usage plan.
        Throttle:
          type: object
          description: Map containing method-level throttling information for an API stage in a usage plan. The key for the map is the path and method for which to configure custom throttling, for example, '/pets/GET'. Duplicates are not allowed.
          additionalProperties: false
          x-patternProperties:
            .*:
              $ref: '#/components/schemas/ThrottleSettings'
    ThrottleSettings:
      type: object
      additionalProperties: false
      properties:
        BurstLimit:
          type: integer
          minimum: 0
          description: The maximum API request rate limit over a time ranging from one to a few seconds. The maximum API request rate limit depends on whether the underlying token bucket is at its full capacity.
        RateLimit:
          type: number
          minimum: 0
          description: The API request steady-state rate limit (average requests per second over an extended period of time).
    QuotaSettings:
      type: object
      additionalProperties: false
      properties:
        Limit:
          type: integer
          minimum: 0
          description: The maximum number of requests that users can make within the specified time period.
        Offset:
          type: integer
          minimum: 0
          description: For the initial time period, the number of requests to subtract from the specified limit. When you first implement a usage plan, the plan might start in the middle of the week or month. With this property, you can decrease the limit for this initial time period.
        Period:
          type: string
          description: The time period for which the maximum limit of requests applies, such as DAY or WEEK. For valid values, see the period property for the UsagePlan resource in the Amazon API Gateway REST API Reference.
    UsagePlan:
      type: object
      properties:
        Id:
          type: string
          description: The provider-assigned unique ID for this managed resource.
        ApiStages:
          type: array
          description: The API stages to associate with this usage plan.
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ApiStage'
        Description:
          type: string
          description: A description of the usage plan.
        Quota:
          $ref: '#/components/schemas/QuotaSettings'
          description: Configures the number of requests that users can make within a given interval.
        Tags:
          type: array
          description: An array of arbitrary tags (key-value pairs) to associate with the usage plan.
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Throttle:
          $ref: '#/components/schemas/ThrottleSettings'
          description: Configures the overall request rate (average requests per second) and burst capacity.
        UsagePlanName:
          type: string
          description: A name for the usage plan.
      x-stackql-resource-name: usage_plan
      x-stackql-primaryIdentifier:
        - Id
    UsagePlanKey:
      type: object
      properties:
        KeyId:
          description: The ID of the usage plan key.
          type: string
        KeyType:
          description: The type of usage plan key. Currently, the only valid key type is API_KEY.
          type: string
          enum:
            - API_KEY
        UsagePlanId:
          description: The ID of the usage plan.
          type: string
        Id:
          description: 'An autogenerated ID which is a combination of the ID of the key and ID of the usage plan combined with a : such as 123abcdef:abc123.'
          type: string
      required:
        - KeyType
        - UsagePlanId
        - KeyId
      x-stackql-resource-name: usage_plan_key
      x-stackql-primaryIdentifier:
        - Id
    VpcLink:
      type: object
      properties:
        Name:
          description: A name for the VPC link.
          type: string
        Description:
          description: A description of the VPC link.
          type: string
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the stage.
          x-insertionOrder: false
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        TargetArns:
          description: The ARN of network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        VpcLinkId:
          description: The ID of the instance that backs VPC link.
          type: string
      required:
        - Name
        - TargetArns
      x-stackql-resource-name: vpc_link
      x-stackql-primaryIdentifier:
        - VpcLinkId
  x-stackQL-resources:
    accounts:
      name: accounts
      id: aws.apigateway.accounts
      x-cfn-schema-name: Account
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Account'
    account:
      name: account
      id: aws.apigateway.account
      x-cfn-schema-name: Account
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CloudWatchRoleArn') as cloud_watch_role_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Account'
    api_keys:
      name: api_keys
      id: aws.apigateway.api_keys
      x-cfn-schema-name: ApiKey
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.APIKeyId') as a_pi_key_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::ApiKey'
    api_key:
      name: api_key
      id: aws.apigateway.api_key
      x-cfn-schema-name: ApiKey
      x-type: get
      x-identifiers:
        - APIKeyId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.APIKeyId') as a_pi_key_id,
              JSON_EXTRACT(Properties, '$.CustomerId') as customer_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.GenerateDistinctId') as generate_distinct_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.StageKeys') as stage_keys,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Value') as value
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::ApiKey'
    authorizers:
      name: authorizers
      id: aws.apigateway.authorizers
      x-cfn-schema-name: Authorizer
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Authorizer'
    authorizer:
      name: authorizer
      id: aws.apigateway.authorizer
      x-cfn-schema-name: Authorizer
      x-type: get
      x-identifiers:
        - RestApiId
        - AuthorizerId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.AuthorizerCredentials') as authorizer_credentials,
              JSON_EXTRACT(Properties, '$.AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
              JSON_EXTRACT(Properties, '$.AuthorizerUri') as authorizer_uri,
              JSON_EXTRACT(Properties, '$.IdentitySource') as identity_source,
              JSON_EXTRACT(Properties, '$.IdentityValidationExpression') as identity_validation_expression,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ProviderARNs') as provider_ar_ns,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Authorizer'
    base_path_mappings:
      name: base_path_mappings
      id: aws.apigateway.base_path_mappings
      x-cfn-schema-name: BasePathMapping
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.BasePath') as base_path
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::BasePathMapping'
    base_path_mapping:
      name: base_path_mapping
      id: aws.apigateway.base_path_mapping
      x-cfn-schema-name: BasePathMapping
      x-type: get
      x-identifiers:
        - DomainName
        - BasePath
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BasePath') as base_path,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.Stage') as stage
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::BasePathMapping'
    client_certificates:
      name: client_certificates
      id: aws.apigateway.client_certificates
      x-cfn-schema-name: ClientCertificate
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::ClientCertificate'
    client_certificate:
      name: client_certificate
      id: aws.apigateway.client_certificate
      x-cfn-schema-name: ClientCertificate
      x-type: get
      x-identifiers:
        - ClientCertificateId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::ClientCertificate'
    deployments:
      name: deployments
      id: aws.apigateway.deployments
      x-cfn-schema-name: Deployment
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Deployment'
    deployment:
      name: deployment
      id: aws.apigateway.deployment
      x-cfn-schema-name: Deployment
      x-type: get
      x-identifiers:
        - DeploymentId
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.DeploymentCanarySettings.PercentTraffic') as deployment_canary_settings_percent_traffic,
              JSON_EXTRACT(Properties, '$.DeploymentCanarySettings.StageVariableOverrides') as deployment_canary_settings_stage_variable_overrides,
              JSON_EXTRACT(Properties, '$.DeploymentCanarySettings.UseStageCache') as deployment_canary_settings_use_stage_cache,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.StageDescription.AccessLogSetting') as stage_description_access_log_setting,
              JSON_EXTRACT(Properties, '$.StageDescription.CacheClusterEnabled') as stage_description_cache_cluster_enabled,
              JSON_EXTRACT(Properties, '$.StageDescription.CacheClusterSize') as stage_description_cache_cluster_size,
              JSON_EXTRACT(Properties, '$.StageDescription.CacheDataEncrypted') as stage_description_cache_data_encrypted,
              JSON_EXTRACT(Properties, '$.StageDescription.CacheTtlInSeconds') as stage_description_cache_ttl_in_seconds,
              JSON_EXTRACT(Properties, '$.StageDescription.CachingEnabled') as stage_description_caching_enabled,
              JSON_EXTRACT(Properties, '$.StageDescription.CanarySetting') as stage_description_canary_setting,
              JSON_EXTRACT(Properties, '$.StageDescription.ClientCertificateId') as stage_description_client_certificate_id,
              JSON_EXTRACT(Properties, '$.StageDescription.DataTraceEnabled') as stage_description_data_trace_enabled,
              JSON_EXTRACT(Properties, '$.StageDescription.Description') as stage_description_description,
              JSON_EXTRACT(Properties, '$.StageDescription.DocumentationVersion') as stage_description_documentation_version,
              JSON_EXTRACT(Properties, '$.StageDescription.LoggingLevel') as stage_description_logging_level,
              JSON_EXTRACT(Properties, '$.StageDescription.MethodSettings') as stage_description_method_settings,
              JSON_EXTRACT(Properties, '$.StageDescription.MetricsEnabled') as stage_description_metrics_enabled,
              JSON_EXTRACT(Properties, '$.StageDescription.Tags') as stage_description_tags,
              JSON_EXTRACT(Properties, '$.StageDescription.ThrottlingBurstLimit') as stage_description_throttling_burst_limit,
              JSON_EXTRACT(Properties, '$.StageDescription.ThrottlingRateLimit') as stage_description_throttling_rate_limit,
              JSON_EXTRACT(Properties, '$.StageDescription.TracingEnabled') as stage_description_tracing_enabled,
              JSON_EXTRACT(Properties, '$.StageDescription.Variables') as stage_description_variables,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Deployment'
    documentation_parts:
      name: documentation_parts
      id: aws.apigateway.documentation_parts
      x-cfn-schema-name: DocumentationPart
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DocumentationPartId') as documentation_part_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DocumentationPart'
    documentation_part:
      name: documentation_part
      id: aws.apigateway.documentation_part
      x-cfn-schema-name: DocumentationPart
      x-type: get
      x-identifiers:
        - DocumentationPartId
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DocumentationPartId') as documentation_part_id,
              JSON_EXTRACT(Properties, '$.Location.Method') as location_method,
              JSON_EXTRACT(Properties, '$.Location.Name') as location_name,
              JSON_EXTRACT(Properties, '$.Location.Path') as location_path,
              JSON_EXTRACT(Properties, '$.Location.StatusCode') as location_status_code,
              JSON_EXTRACT(Properties, '$.Location.Type') as location_type,
              JSON_EXTRACT(Properties, '$.Properties') as properties,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DocumentationPart'
    documentation_versions:
      name: documentation_versions
      id: aws.apigateway.documentation_versions
      x-cfn-schema-name: DocumentationVersion
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DocumentationVersion') as documentation_version,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
    documentation_version:
      name: documentation_version
      id: aws.apigateway.documentation_version
      x-cfn-schema-name: DocumentationVersion
      x-type: get
      x-identifiers:
        - DocumentationVersion
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DocumentationVersion') as documentation_version,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
    domain_names:
      name: domain_names
      id: aws.apigateway.domain_names
      x-cfn-schema-name: DomainName
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DomainName'
    domain_name:
      name: domain_name
      id: aws.apigateway.domain_name
      x-cfn-schema-name: DomainName
      x-type: get
      x-identifiers:
        - DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.DistributionDomainName') as distribution_domain_name,
              JSON_EXTRACT(Properties, '$.DistributionHostedZoneId') as distribution_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.EndpointConfiguration.Types') as endpoint_configuration_types,
              JSON_EXTRACT(Properties, '$.EndpointConfiguration.VpcEndpointIds') as endpoint_configuration_vpc_endpoint_ids,
              JSON_EXTRACT(Properties, '$.MutualTlsAuthentication.TruststoreUri') as mutual_tls_authentication_truststore_uri,
              JSON_EXTRACT(Properties, '$.MutualTlsAuthentication.TruststoreVersion') as mutual_tls_authentication_truststore_version,
              JSON_EXTRACT(Properties, '$.RegionalDomainName') as regional_domain_name,
              JSON_EXTRACT(Properties, '$.RegionalHostedZoneId') as regional_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.RegionalCertificateArn') as regional_certificate_arn,
              JSON_EXTRACT(Properties, '$.OwnershipVerificationCertificateArn') as ownership_verification_certificate_arn,
              JSON_EXTRACT(Properties, '$.SecurityPolicy') as security_policy,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DomainName'
    gateway_responses:
      name: gateway_responses
      id: aws.apigateway.gateway_responses
      x-cfn-schema-name: GatewayResponse
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::GatewayResponse'
    gateway_response:
      name: gateway_response
      id: aws.apigateway.gateway_response
      x-cfn-schema-name: GatewayResponse
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ResponseType') as response_type,
              JSON_EXTRACT(Properties, '$.StatusCode') as status_code,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.ResponseTemplates') as response_templates
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::GatewayResponse'
    methods:
      name: methods
      id: aws.apigateway.methods
      x-cfn-schema-name: Method
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.HttpMethod') as http_method
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Method'
    method:
      name: method
      id: aws.apigateway.method
      x-cfn-schema-name: Method
      x-type: get
      x-identifiers:
        - RestApiId
        - ResourceId
        - HttpMethod
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiKeyRequired') as api_key_required,
              JSON_EXTRACT(Properties, '$.AuthorizationScopes') as authorization_scopes,
              JSON_EXTRACT(Properties, '$.AuthorizationType') as authorization_type,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.HttpMethod') as http_method,
              JSON_EXTRACT(Properties, '$.Integration.CacheKeyParameters') as integration_cache_key_parameters,
              JSON_EXTRACT(Properties, '$.Integration.CacheNamespace') as integration_cache_namespace,
              JSON_EXTRACT(Properties, '$.Integration.ConnectionId') as integration_connection_id,
              JSON_EXTRACT(Properties, '$.Integration.ConnectionType') as integration_connection_type,
              JSON_EXTRACT(Properties, '$.Integration.ContentHandling') as integration_content_handling,
              JSON_EXTRACT(Properties, '$.Integration.Credentials') as integration_credentials,
              JSON_EXTRACT(Properties, '$.Integration.IntegrationHttpMethod') as integration_integration_http_method,
              JSON_EXTRACT(Properties, '$.Integration.IntegrationResponses') as integration_integration_responses,
              JSON_EXTRACT(Properties, '$.Integration.PassthroughBehavior') as integration_passthrough_behavior,
              JSON_EXTRACT(Properties, '$.Integration.RequestParameters') as integration_request_parameters,
              JSON_EXTRACT(Properties, '$.Integration.RequestTemplates') as integration_request_templates,
              JSON_EXTRACT(Properties, '$.Integration.TimeoutInMillis') as integration_timeout_in_millis,
              JSON_EXTRACT(Properties, '$.Integration.Type') as integration_type,
              JSON_EXTRACT(Properties, '$.Integration.Uri') as integration_uri,
              JSON_EXTRACT(Properties, '$.MethodResponses') as method_responses,
              JSON_EXTRACT(Properties, '$.OperationName') as operation_name,
              JSON_EXTRACT(Properties, '$.RequestModels') as request_models,
              JSON_EXTRACT(Properties, '$.RequestParameters') as request_parameters,
              JSON_EXTRACT(Properties, '$.RequestValidatorId') as request_validator_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Method'
    models:
      name: models
      id: aws.apigateway.models
      x-cfn-schema-name: Model
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Model'
    model:
      name: model
      id: aws.apigateway.model
      x-cfn-schema-name: Model
      x-type: get
      x-identifiers:
        - RestApiId
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ContentType') as content_type,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.Schema') as schema
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Model'
    request_validators:
      name: request_validators
      id: aws.apigateway.request_validators
      x-cfn-schema-name: RequestValidator
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.RequestValidatorId') as request_validator_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::RequestValidator'
    request_validator:
      name: request_validator
      id: aws.apigateway.request_validator
      x-cfn-schema-name: RequestValidator
      x-type: get
      x-identifiers:
        - RestApiId
        - RequestValidatorId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RequestValidatorId') as request_validator_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ValidateRequestBody') as validate_request_body,
              JSON_EXTRACT(Properties, '$.ValidateRequestParameters') as validate_request_parameters
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::RequestValidator'
    resources:
      name: resources
      id: aws.apigateway.resources
      x-cfn-schema-name: Resource
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Resource'
    resource:
      name: resource
      id: aws.apigateway.resource
      x-cfn-schema-name: Resource
      x-type: get
      x-identifiers:
        - RestApiId
        - ResourceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ParentId') as parent_id,
              JSON_EXTRACT(Properties, '$.PathPart') as path_part
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Resource'
    rest_apis:
      name: rest_apis
      id: aws.apigateway.rest_apis
      x-cfn-schema-name: RestApi
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::RestApi'
    rest_api:
      name: rest_api
      id: aws.apigateway.rest_api
      x-cfn-schema-name: RestApi
      x-type: get
      x-identifiers:
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.RootResourceId') as root_resource_id,
              JSON_EXTRACT(Properties, '$.ApiKeySourceType') as api_key_source_type,
              JSON_EXTRACT(Properties, '$.BinaryMediaTypes') as binary_media_types,
              JSON_EXTRACT(Properties, '$.Body') as body,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Bucket') as body_s3_location_bucket,
              JSON_EXTRACT(Properties, '$.BodyS3Location.ETag') as body_s3_location_etag,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Version') as body_s3_location_version,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Key') as body_s3_location_key,
              JSON_EXTRACT(Properties, '$.CloneFrom') as clone_from,
              JSON_EXTRACT(Properties, '$.EndpointConfiguration.Types') as endpoint_configuration_types,
              JSON_EXTRACT(Properties, '$.EndpointConfiguration.VpcEndpointIds') as endpoint_configuration_vpc_endpoint_ids,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
              JSON_EXTRACT(Properties, '$.FailOnWarnings') as fail_on_warnings,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.MinimumCompressionSize') as minimum_compression_size,
              JSON_EXTRACT(Properties, '$.Mode') as mode,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::RestApi'
    stages:
      name: stages
      id: aws.apigateway.stages
      x-cfn-schema-name: Stage
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Stage'
    stage:
      name: stage
      id: aws.apigateway.stage
      x-cfn-schema-name: Stage
      x-type: get
      x-identifiers:
        - RestApiId
        - StageName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccessLogSetting.DestinationArn') as access_log_setting_destination_arn,
              JSON_EXTRACT(Properties, '$.AccessLogSetting.Format') as access_log_setting_format,
              JSON_EXTRACT(Properties, '$.CacheClusterEnabled') as cache_cluster_enabled,
              JSON_EXTRACT(Properties, '$.CacheClusterSize') as cache_cluster_size,
              JSON_EXTRACT(Properties, '$.CanarySetting.DeploymentId') as canary_setting_deployment_id,
              JSON_EXTRACT(Properties, '$.CanarySetting.PercentTraffic') as canary_setting_percent_traffic,
              JSON_EXTRACT(Properties, '$.CanarySetting.StageVariableOverrides') as canary_setting_stage_variable_overrides,
              JSON_EXTRACT(Properties, '$.CanarySetting.UseStageCache') as canary_setting_use_stage_cache,
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DocumentationVersion') as documentation_version,
              JSON_EXTRACT(Properties, '$.MethodSettings') as method_settings,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TracingEnabled') as tracing_enabled,
              JSON_EXTRACT(Properties, '$.Variables') as variables
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Stage'
    usage_plans:
      name: usage_plans
      id: aws.apigateway.usage_plans
      x-cfn-schema-name: UsagePlan
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::UsagePlan'
    usage_plan:
      name: usage_plan
      id: aws.apigateway.usage_plan
      x-cfn-schema-name: UsagePlan
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiStages') as api_stages,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Quota.Limit') as quota_limit,
              JSON_EXTRACT(Properties, '$.Quota.Offset') as quota_offset,
              JSON_EXTRACT(Properties, '$.Quota.Period') as quota_period,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Throttle.BurstLimit') as throttle_burst_limit,
              JSON_EXTRACT(Properties, '$.Throttle.RateLimit') as throttle_rate_limit,
              JSON_EXTRACT(Properties, '$.UsagePlanName') as usage_plan_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::UsagePlan'
    usage_plan_keys:
      name: usage_plan_keys
      id: aws.apigateway.usage_plan_keys
      x-cfn-schema-name: UsagePlanKey
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
    usage_plan_key:
      name: usage_plan_key
      id: aws.apigateway.usage_plan_key
      x-cfn-schema-name: UsagePlanKey
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.KeyId') as key_id,
              JSON_EXTRACT(Properties, '$.KeyType') as key_type,
              JSON_EXTRACT(Properties, '$.UsagePlanId') as usage_plan_id,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
    vpc_links:
      name: vpc_links
      id: aws.apigateway.vpc_links
      x-cfn-schema-name: VpcLink
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::VpcLink'
    vpc_link:
      name: vpc_link
      id: aws.apigateway.vpc_link
      x-cfn-schema-name: VpcLink
      x-type: get
      x-identifiers:
        - VpcLinkId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TargetArns') as target_arns,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::VpcLink'
