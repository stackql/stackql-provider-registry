openapi: 3.0.0
info:
  title: Route53RecoveryControl
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    ClusterEndpoint:
      type: object
      properties:
        Endpoint:
          type: string
          minLength: 1
          maxLength: 128
        Region:
          type: string
          minLength: 1
          maxLength: 32
      additionalProperties: false
    Tag:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          maxLength: 256
      required:
        - Value
        - Key
      additionalProperties: false
    Cluster:
      type: object
      properties:
        Name:
          description: Name of a Cluster. You can use any non-white space character in the name
          type: string
          minLength: 1
          maxLength: 64
        ClusterArn:
          description: The Amazon Resource Name (ARN) of the cluster.
          type: string
          minLength: 1
          maxLength: 2048
          pattern: ^[A-Za-z0-9:\/_-]*$
        Status:
          description: 'Deployment status of a resource. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
          type: string
          enum:
            - PENDING
            - DEPLOYED
            - PENDING_DELETION
        ClusterEndpoints:
          description: Endpoints for the cluster.
          type: array
          items:
            $ref: '#/components/schemas/ClusterEndpoint'
          x-insertionOrder: false
        Tags:
          description: A collection of tags associated with a resource
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            maxItems: 20
          x-insertionOrder: false
      required:
        - Name
      x-stackql-resource-name: cluster
      description: AWS Route53 Recovery Control Cluster resource schema
      x-type-name: AWS::Route53RecoveryControl::Cluster
      x-stackql-primary-identifier:
        - ClusterArn
      x-create-only-properties:
        - Name
        - Tags
      x-read-only-properties:
        - ClusterArn
        - ClusterEndpoints
        - Status
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
        permissions:
          - route53-recovery-control-config:TagResource
          - route53-recovery-control-config:UntagResource
          - route53-recovery-control-config:ListTagsForResource
      x-required-permissions:
        create:
          - route53-recovery-control-config:CreateCluster
          - route53-recovery-control-config:DescribeCluster
          - route53-recovery-control-config:ListTagsForResource
          - route53-recovery-control-config:TagResource
        read:
          - route53-recovery-control-config:DescribeCluster
          - route53-recovery-control-config:ListTagsForResource
        delete:
          - route53-recovery-control-config:DescribeCluster
          - route53-recovery-control-config:DeleteCluster
        list:
          - route53-recovery-control-config:ListClusters
    ControlPanel:
      type: object
      properties:
        ClusterArn:
          description: Cluster to associate with the Control Panel
          type: string
          pattern: ^[A-Za-z0-9:\/_-]*$
        ControlPanelArn:
          description: The Amazon Resource Name (ARN) of the cluster.
          type: string
          pattern: ^[A-Za-z0-9:\/_-]*$
        Name:
          description: The name of the control panel. You can use any non-white space character in the name.
          type: string
          minLength: 1
          maxLength: 64
        Status:
          description: 'The deployment status of control panel. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
          type: string
          enum:
            - PENDING
            - DEPLOYED
            - PENDING_DELETION
        DefaultControlPanel:
          description: A flag that Amazon Route 53 Application Recovery Controller sets to true to designate the default control panel for a cluster. When you create a cluster, Amazon Route 53 Application Recovery Controller creates a control panel, and sets this flag for that control panel. If you create a control panel yourself, this flag is set to false.
          type: boolean
        RoutingControlCount:
          description: Count of associated routing controls
          type: integer
        Tags:
          description: A collection of tags associated with a resource
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            maxItems: 20
          x-insertionOrder: false
      required:
        - Name
      x-stackql-resource-name: control_panel
      description: AWS Route53 Recovery Control Control Panel resource schema .
      x-type-name: AWS::Route53RecoveryControl::ControlPanel
      x-stackql-primary-identifier:
        - ControlPanelArn
      x-create-only-properties:
        - ClusterArn
        - Tags
      x-read-only-properties:
        - ControlPanelArn
        - Status
        - RoutingControlCount
        - DefaultControlPanel
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
        permissions:
          - route53-recovery-control-config:TagResource
          - route53-recovery-control-config:UntagResource
          - route53-recovery-control-config:ListTagsForResource
      x-required-permissions:
        create:
          - route53-recovery-control-config:CreateControlPanel
          - route53-recovery-control-config:DescribeCluster
          - route53-recovery-control-config:DescribeControlPanel
          - route53-recovery-control-config:ListTagsForResource
          - route53-recovery-control-config:TagResource
        read:
          - route53-recovery-control-config:DescribeControlPanel
          - route53-recovery-control-config:ListTagsForResource
        update:
          - route53-recovery-control-config:UpdateControlPanel
          - route53-recovery-control-config:DescribeControlPanel
          - route53-recovery-control-config:ListTagsForResource
          - route53-recovery-control-config:TagResource
          - route53-recovery-control-config:UntagResource
        delete:
          - route53-recovery-control-config:DeleteControlPanel
          - route53-recovery-control-config:DescribeControlPanel
        list:
          - route53-recovery-control-config:ListControlPanels
    RoutingControl:
      type: object
      properties:
        RoutingControlArn:
          description: The Amazon Resource Name (ARN) of the routing control.
          type: string
          pattern: ^[A-Za-z0-9:\/_-]*$
        ControlPanelArn:
          description: The Amazon Resource Name (ARN) of the control panel.
          type: string
          pattern: ^[A-Za-z0-9:\/_-]*$
        Name:
          description: The name of the routing control. You can use any non-white space character in the name.
          type: string
          minLength: 1
          maxLength: 64
        Status:
          description: 'The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
          type: string
          enum:
            - PENDING
            - DEPLOYED
            - PENDING_DELETION
        ClusterArn:
          description: Arn associated with Control Panel
          type: string
          pattern: ^[A-Za-z0-9:\/_-]*$
      required:
        - Name
      x-stackql-resource-name: routing_control
      description: AWS Route53 Recovery Control Routing Control resource schema .
      x-type-name: AWS::Route53RecoveryControl::RoutingControl
      x-stackql-primary-identifier:
        - RoutingControlArn
      x-create-only-properties:
        - ControlPanelArn
        - ClusterArn
      x-write-only-properties:
        - ClusterArn
      x-read-only-properties:
        - RoutingControlArn
        - Status
      x-required-properties:
        - Name
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - route53-recovery-control-config:CreateRoutingControl
          - route53-recovery-control-config:DescribeRoutingControl
          - route53-recovery-control-config:DescribeControlPanel
          - route53-recovery-control-config:DescribeCluster
        read:
          - route53-recovery-control-config:DescribeRoutingControl
        update:
          - route53-recovery-control-config:UpdateRoutingControl
          - route53-recovery-control-config:DescribeRoutingControl
          - route53-recovery-control-config:DescribeControlPanel
        delete:
          - route53-recovery-control-config:DescribeRoutingControl
          - route53-recovery-control-config:DeleteRoutingControl
        list:
          - route53-recovery-control-config:ListRoutingControls
    SafetyRuleName:
      description: The name for the safety rule.
      type: string
    RuleType:
      description: 'A rule can be one of the following: ATLEAST, AND, or OR.'
      type: string
      enum:
        - AND
        - OR
        - ATLEAST
    RuleConfig:
      description: The rule configuration for an assertion rule or gating rule. This is the criteria that you set for specific assertion controls (routing controls) or gating controls. This configuration specifies how many controls must be enabled after a transaction completes.
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/RuleType'
        Threshold:
          description: The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.
          type: integer
        Inverted:
          description: Logical negation of the rule. If the rule would usually evaluate true, it's evaluated as false, and vice versa.
          type: boolean
      required:
        - Type
        - Threshold
        - Inverted
      additionalProperties: false
    GatingRule:
      description: A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify. If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control state changes to run and complete against the set of target controls.
      type: object
      properties:
        GatingControls:
          description: The gating controls for the gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
          type: array
          items:
            type: string
          x-insertionOrder: false
        TargetControls:
          description: |-
            Routing controls that can only be set or unset if the specified RuleConfig evaluates to true for the specified GatingControls. For example, say you have three gating controls, one for each of three AWS Regions. Now you specify AtLeast 2 as your RuleConfig. With these settings, you can only change (set or unset) the routing controls that you have specified as TargetControls if that rule evaluates to true. 
            In other words, your ability to change the routing controls that you have specified as TargetControls is gated by the rule that you set for the routing controls in GatingControls.
          type: array
          items:
            type: string
          x-insertionOrder: false
        WaitPeriodMs:
          description: An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
          type: integer
      required:
        - WaitPeriodMs
        - TargetControls
        - GatingControls
      additionalProperties: false
    AssertionRule:
      description: An assertion rule enforces that, when a routing control state is changed, that the criteria set by the rule configuration is met. Otherwise, the change to the routing control is not accepted.
      type: object
      properties:
        WaitPeriodMs:
          description: An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
          type: integer
        AssertedControls:
          description: The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three AWS Regions.
          type: array
          items:
            type: string
          x-insertionOrder: false
      required:
        - AssertedControls
        - WaitPeriodMs
      additionalProperties: false
    SafetyRule:
      type: object
      properties:
        AssertionRule:
          $ref: '#/components/schemas/AssertionRule'
        GatingRule:
          $ref: '#/components/schemas/GatingRule'
        Name:
          $ref: '#/components/schemas/SafetyRuleName'
        SafetyRuleArn:
          description: The Amazon Resource Name (ARN) of the safety rule.
          type: string
        ControlPanelArn:
          description: The Amazon Resource Name (ARN) of the control panel.
          type: string
        Status:
          description: 'The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
          type: string
          enum:
            - PENDING
            - DEPLOYED
            - PENDING_DELETION
        RuleConfig:
          $ref: '#/components/schemas/RuleConfig'
        Tags:
          description: A collection of tags associated with a resource
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            maxItems: 20
          x-insertionOrder: false
      required: []
      x-stackql-resource-name: safety_rule
      description: Resource schema for AWS Route53 Recovery Control basic constructs and validation rules.
      x-type-name: AWS::Route53RecoveryControl::SafetyRule
      x-stackql-primary-identifier:
        - SafetyRuleArn
      x-conditional-create-only-properties:
        - ControlPanelArn
        - RuleConfig
        - Tags
        - AssertionRule/AssertedControls
        - GatingRule/GatingControls
        - GatingRule/TargetControls
      x-read-only-properties:
        - SafetyRuleArn
        - Status
      x-required-properties: []
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
        permissions:
          - route53-recovery-control-config:TagResource
          - route53-recovery-control-config:UntagResource
          - route53-recovery-control-config:ListTagsForResource
      x-required-permissions:
        create:
          - route53-recovery-control-config:CreateSafetyRule
          - route53-recovery-control-config:DescribeSafetyRule
          - route53-recovery-control-config:DescribeControlPanel
          - route53-recovery-control-config:DescribeRoutingControl
          - route53-recovery-control-config:ListTagsForResource
          - route53-recovery-control-config:TagResource
        read:
          - route53-recovery-control-config:DescribeSafetyRule
          - route53-recovery-control-config:ListTagsForResource
        update:
          - route53-recovery-control-config:UpdateSafetyRule
          - route53-recovery-control-config:DescribeSafetyRule
          - route53-recovery-control-config:ListTagsForResource
          - route53-recovery-control-config:TagResource
          - route53-recovery-control-config:UntagResource
        delete:
          - route53-recovery-control-config:DescribeSafetyRule
          - route53-recovery-control-config:DeleteSafetyRule
        list:
          - route53-recovery-control-config:ListSafetyRules
    CreateClusterRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: Name of a Cluster. You can use any non-white space character in the name
              type: string
              minLength: 1
              maxLength: 64
            ClusterArn:
              description: The Amazon Resource Name (ARN) of the cluster.
              type: string
              minLength: 1
              maxLength: 2048
              pattern: ^[A-Za-z0-9:\/_-]*$
            Status:
              description: 'Deployment status of a resource. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
              type: string
              enum:
                - PENDING
                - DEPLOYED
                - PENDING_DELETION
            ClusterEndpoints:
              description: Endpoints for the cluster.
              type: array
              items:
                $ref: '#/components/schemas/ClusterEndpoint'
              x-insertionOrder: false
            Tags:
              description: A collection of tags associated with a resource
              type: array
              items:
                $ref: '#/components/schemas/Tag'
                maxItems: 20
              x-insertionOrder: false
          x-stackQL-stringOnly: true
      x-title: CreateClusterRequest
      type: object
      required: []
    CreateControlPanelRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ClusterArn:
              description: Cluster to associate with the Control Panel
              type: string
              pattern: ^[A-Za-z0-9:\/_-]*$
            ControlPanelArn:
              description: The Amazon Resource Name (ARN) of the cluster.
              type: string
              pattern: ^[A-Za-z0-9:\/_-]*$
            Name:
              description: The name of the control panel. You can use any non-white space character in the name.
              type: string
              minLength: 1
              maxLength: 64
            Status:
              description: 'The deployment status of control panel. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
              type: string
              enum:
                - PENDING
                - DEPLOYED
                - PENDING_DELETION
            DefaultControlPanel:
              description: A flag that Amazon Route 53 Application Recovery Controller sets to true to designate the default control panel for a cluster. When you create a cluster, Amazon Route 53 Application Recovery Controller creates a control panel, and sets this flag for that control panel. If you create a control panel yourself, this flag is set to false.
              type: boolean
            RoutingControlCount:
              description: Count of associated routing controls
              type: integer
            Tags:
              description: A collection of tags associated with a resource
              type: array
              items:
                $ref: '#/components/schemas/Tag'
                maxItems: 20
              x-insertionOrder: false
          x-stackQL-stringOnly: true
      x-title: CreateControlPanelRequest
      type: object
      required: []
    CreateRoutingControlRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RoutingControlArn:
              description: The Amazon Resource Name (ARN) of the routing control.
              type: string
              pattern: ^[A-Za-z0-9:\/_-]*$
            ControlPanelArn:
              description: The Amazon Resource Name (ARN) of the control panel.
              type: string
              pattern: ^[A-Za-z0-9:\/_-]*$
            Name:
              description: The name of the routing control. You can use any non-white space character in the name.
              type: string
              minLength: 1
              maxLength: 64
            Status:
              description: 'The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
              type: string
              enum:
                - PENDING
                - DEPLOYED
                - PENDING_DELETION
            ClusterArn:
              description: Arn associated with Control Panel
              type: string
              pattern: ^[A-Za-z0-9:\/_-]*$
          x-stackQL-stringOnly: true
      x-title: CreateRoutingControlRequest
      type: object
      required: []
    CreateSafetyRuleRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AssertionRule:
              $ref: '#/components/schemas/AssertionRule'
            GatingRule:
              $ref: '#/components/schemas/GatingRule'
            Name:
              $ref: '#/components/schemas/SafetyRuleName'
            SafetyRuleArn:
              description: The Amazon Resource Name (ARN) of the safety rule.
              type: string
            ControlPanelArn:
              description: The Amazon Resource Name (ARN) of the control panel.
              type: string
            Status:
              description: 'The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.'
              type: string
              enum:
                - PENDING
                - DEPLOYED
                - PENDING_DELETION
            RuleConfig:
              $ref: '#/components/schemas/RuleConfig'
            Tags:
              description: A collection of tags associated with a resource
              type: array
              items:
                $ref: '#/components/schemas/Tag'
                maxItems: 20
              x-insertionOrder: false
          x-stackQL-stringOnly: true
      x-title: CreateSafetyRuleRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    clusters:
      name: clusters
      id: aws.route53recoverycontrol.clusters
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::Route53RecoveryControl::Cluster
      x-identifiers:
        - ClusterArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Cluster&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53RecoveryControl::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53RecoveryControl::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ClusterArn') as cluster_arn,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.ClusterEndpoints') as cluster_endpoints,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
              AND data__Identifier = '<ClusterArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.ClusterArn') as cluster_arn,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.ClusterEndpoints') as cluster_endpoints,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
                AND detail.data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'ClusterArn') as cluster_arn,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'ClusterEndpoints') as cluster_endpoints,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
                  AND data__Identifier = '<ClusterArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'ClusterArn') as cluster_arn,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'ClusterEndpoints') as cluster_endpoints,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
                    AND detail.data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
                    AND listing.region = 'us-east-1'
    clusters_list_only:
      name: clusters_list_only
      id: aws.route53recoverycontrol.clusters_list_only
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::Route53RecoveryControl::Cluster
      x-identifiers:
        - ClusterArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClusterArn') as cluster_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClusterArn') as cluster_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
                AND region = 'us-east-1'
    cluster_tags:
      name: cluster_tags
      id: aws.route53recoverycontrol.cluster_tags
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::Route53RecoveryControl::Cluster
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.ClusterArn') as cluster_arn,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.ClusterEndpoints') as cluster_endpoints
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
              AND detail.data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'ClusterArn') as cluster_arn,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'ClusterEndpoints') as cluster_endpoints
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
                AND detail.data__TypeName = 'AWS::Route53RecoveryControl::Cluster'
                AND listing.region = 'us-east-1'
    control_panels:
      name: control_panels
      id: aws.route53recoverycontrol.control_panels
      x-cfn-schema-name: ControlPanel
      x-cfn-type-name: AWS::Route53RecoveryControl::ControlPanel
      x-identifiers:
        - ControlPanelArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ControlPanel&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53RecoveryControl::ControlPanel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53RecoveryControl::ControlPanel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53RecoveryControl::ControlPanel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/control_panels/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/control_panels/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/control_panels/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ClusterArn') as cluster_arn,
              JSON_EXTRACT(Properties, '$.ControlPanelArn') as control_panel_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.DefaultControlPanel') as default_control_panel,
              JSON_EXTRACT(Properties, '$.RoutingControlCount') as routing_control_count,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
              AND data__Identifier = '<ControlPanelArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ClusterArn') as cluster_arn,
                JSON_EXTRACT(detail.Properties, '$.ControlPanelArn') as control_panel_arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.DefaultControlPanel') as default_control_panel,
                JSON_EXTRACT(detail.Properties, '$.RoutingControlCount') as routing_control_count,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
                AND detail.data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ClusterArn') as cluster_arn,
                  json_extract_path_text(Properties, 'ControlPanelArn') as control_panel_arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'DefaultControlPanel') as default_control_panel,
                  json_extract_path_text(Properties, 'RoutingControlCount') as routing_control_count,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
                  AND data__Identifier = '<ControlPanelArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ClusterArn') as cluster_arn,
                    json_extract_path_text(detail.Properties, 'ControlPanelArn') as control_panel_arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'DefaultControlPanel') as default_control_panel,
                    json_extract_path_text(detail.Properties, 'RoutingControlCount') as routing_control_count,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
                    AND detail.data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
                    AND listing.region = 'us-east-1'
    control_panels_list_only:
      name: control_panels_list_only
      id: aws.route53recoverycontrol.control_panels_list_only
      x-cfn-schema-name: ControlPanel
      x-cfn-type-name: AWS::Route53RecoveryControl::ControlPanel
      x-identifiers:
        - ControlPanelArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ControlPanelArn') as control_panel_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ControlPanelArn') as control_panel_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
                AND region = 'us-east-1'
    control_panel_tags:
      name: control_panel_tags
      id: aws.route53recoverycontrol.control_panel_tags
      x-cfn-schema-name: ControlPanel
      x-cfn-type-name: AWS::Route53RecoveryControl::ControlPanel
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ClusterArn') as cluster_arn,
              JSON_EXTRACT(detail.Properties, '$.ControlPanelArn') as control_panel_arn,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.DefaultControlPanel') as default_control_panel,
              JSON_EXTRACT(detail.Properties, '$.RoutingControlCount') as routing_control_count
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
              AND detail.data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ClusterArn') as cluster_arn,
                json_extract_path_text(detail.Properties, 'ControlPanelArn') as control_panel_arn,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'DefaultControlPanel') as default_control_panel,
                json_extract_path_text(detail.Properties, 'RoutingControlCount') as routing_control_count
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
                AND detail.data__TypeName = 'AWS::Route53RecoveryControl::ControlPanel'
                AND listing.region = 'us-east-1'
    routing_controls:
      name: routing_controls
      id: aws.route53recoverycontrol.routing_controls
      x-cfn-schema-name: RoutingControl
      x-cfn-type-name: AWS::Route53RecoveryControl::RoutingControl
      x-identifiers:
        - RoutingControlArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RoutingControl&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53RecoveryControl::RoutingControl"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53RecoveryControl::RoutingControl"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53RecoveryControl::RoutingControl"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/routing_controls/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/routing_controls/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/routing_controls/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RoutingControlArn') as routing_control_arn,
              JSON_EXTRACT(Properties, '$.ControlPanelArn') as control_panel_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.ClusterArn') as cluster_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53RecoveryControl::RoutingControl'
              AND data__Identifier = '<RoutingControlArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RoutingControlArn') as routing_control_arn,
                JSON_EXTRACT(detail.Properties, '$.ControlPanelArn') as control_panel_arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.ClusterArn') as cluster_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::RoutingControl'
                AND detail.data__TypeName = 'AWS::Route53RecoveryControl::RoutingControl'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RoutingControlArn') as routing_control_arn,
                  json_extract_path_text(Properties, 'ControlPanelArn') as control_panel_arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'ClusterArn') as cluster_arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53RecoveryControl::RoutingControl'
                  AND data__Identifier = '<RoutingControlArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RoutingControlArn') as routing_control_arn,
                    json_extract_path_text(detail.Properties, 'ControlPanelArn') as control_panel_arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'ClusterArn') as cluster_arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::RoutingControl'
                    AND detail.data__TypeName = 'AWS::Route53RecoveryControl::RoutingControl'
                    AND listing.region = 'us-east-1'
    routing_controls_list_only:
      name: routing_controls_list_only
      id: aws.route53recoverycontrol.routing_controls_list_only
      x-cfn-schema-name: RoutingControl
      x-cfn-type-name: AWS::Route53RecoveryControl::RoutingControl
      x-identifiers:
        - RoutingControlArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RoutingControlArn') as routing_control_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53RecoveryControl::RoutingControl'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RoutingControlArn') as routing_control_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53RecoveryControl::RoutingControl'
                AND region = 'us-east-1'
    safety_rules:
      name: safety_rules
      id: aws.route53recoverycontrol.safety_rules
      x-cfn-schema-name: SafetyRule
      x-cfn-type-name: AWS::Route53RecoveryControl::SafetyRule
      x-identifiers:
        - SafetyRuleArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SafetyRule&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53RecoveryControl::SafetyRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53RecoveryControl::SafetyRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53RecoveryControl::SafetyRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/safety_rules/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/safety_rules/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/safety_rules/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AssertionRule') as assertion_rule,
              JSON_EXTRACT(Properties, '$.GatingRule') as gating_rule,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SafetyRuleArn') as safety_rule_arn,
              JSON_EXTRACT(Properties, '$.ControlPanelArn') as control_panel_arn,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.RuleConfig') as rule_config,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
              AND data__Identifier = '<SafetyRuleArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AssertionRule') as assertion_rule,
                JSON_EXTRACT(detail.Properties, '$.GatingRule') as gating_rule,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.SafetyRuleArn') as safety_rule_arn,
                JSON_EXTRACT(detail.Properties, '$.ControlPanelArn') as control_panel_arn,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.RuleConfig') as rule_config,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
                AND detail.data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AssertionRule') as assertion_rule,
                  json_extract_path_text(Properties, 'GatingRule') as gating_rule,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'SafetyRuleArn') as safety_rule_arn,
                  json_extract_path_text(Properties, 'ControlPanelArn') as control_panel_arn,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'RuleConfig') as rule_config,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
                  AND data__Identifier = '<SafetyRuleArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AssertionRule') as assertion_rule,
                    json_extract_path_text(detail.Properties, 'GatingRule') as gating_rule,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'SafetyRuleArn') as safety_rule_arn,
                    json_extract_path_text(detail.Properties, 'ControlPanelArn') as control_panel_arn,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'RuleConfig') as rule_config,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
                    AND detail.data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
                    AND listing.region = 'us-east-1'
    safety_rules_list_only:
      name: safety_rules_list_only
      id: aws.route53recoverycontrol.safety_rules_list_only
      x-cfn-schema-name: SafetyRule
      x-cfn-type-name: AWS::Route53RecoveryControl::SafetyRule
      x-identifiers:
        - SafetyRuleArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SafetyRuleArn') as safety_rule_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SafetyRuleArn') as safety_rule_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
                AND region = 'us-east-1'
    safety_rule_tags:
      name: safety_rule_tags
      id: aws.route53recoverycontrol.safety_rule_tags
      x-cfn-schema-name: SafetyRule
      x-cfn-type-name: AWS::Route53RecoveryControl::SafetyRule
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AssertionRule') as assertion_rule,
              JSON_EXTRACT(detail.Properties, '$.GatingRule') as gating_rule,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.SafetyRuleArn') as safety_rule_arn,
              JSON_EXTRACT(detail.Properties, '$.ControlPanelArn') as control_panel_arn,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.RuleConfig') as rule_config
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
              AND detail.data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AssertionRule') as assertion_rule,
                json_extract_path_text(detail.Properties, 'GatingRule') as gating_rule,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'SafetyRuleArn') as safety_rule_arn,
                json_extract_path_text(detail.Properties, 'ControlPanelArn') as control_panel_arn,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'RuleConfig') as rule_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
                AND detail.data__TypeName = 'AWS::Route53RecoveryControl::SafetyRule'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Cluster&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCluster
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateClusterRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ControlPanel&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateControlPanel
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateControlPanelRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RoutingControl&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRoutingControl
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRoutingControlRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SafetyRule&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSafetyRule
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSafetyRuleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
