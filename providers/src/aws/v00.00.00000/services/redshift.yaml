openapi: 3.0.0
info:
  title: Redshift
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Endpoint:
      additionalProperties: false
      type: object
      properties:
        Address:
          type: string
        Port:
          type: string
    LoggingProperties:
      additionalProperties: false
      type: object
      properties:
        BucketName:
          x-relationshipRef:
            typeName: AWS::S3::Bucket
            propertyPath: /properties/BucketName
          type: string
        S3KeyPrefix:
          type: string
        LogDestinationType:
          type: string
        LogExports:
          maxItems: 3
          x-insertionOrder: false
          type: array
          items:
            type: string
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 0
          maxLength: 256
      required:
        - Key
    Cluster:
      type: object
      properties:
        RevisionTarget:
          description: The identifier of the database revision. You can retrieve this value from the response to the DescribeClusterDbRevisions request.
          type: string
        AutomatedSnapshotRetentionPeriod:
          description: The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Default value is 1
          type: integer
        Encrypted:
          description: If true, the data in the cluster is encrypted at rest.
          type: boolean
        Port:
          description: The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings
          type: integer
        NumberOfNodes:
          description: The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node.
          type: integer
        DestinationRegion:
          description: 'The destination AWS Region that you want to copy snapshots to. Constraints: Must be the name of a valid AWS Region. For more information, see Regions and Endpoints in the Amazon Web Services [https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region] General Reference'
          type: string
        AllowVersionUpgrade:
          description: Major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default value is True
          type: boolean
        Endpoint:
          $ref: '#/components/schemas/Endpoint'
        NamespaceResourcePolicy:
          description: The namespace resource policy document that will be attached to a Redshift cluster.
          type: object
        MaintenanceTrackName:
          description: The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
          type: string
        OwnerAccount:
          type: string
        MultiAZ:
          description: A boolean indicating if the redshift cluster is multi-az or not. If you don't provide this parameter or set the value to false, the redshift cluster will be single-az.
          type: boolean
        Tags:
          maxItems: 50
          uniqueItems: false
          description: The list of tags for the cluster parameter group.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        SnapshotClusterIdentifier:
          description: The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
          type: string
        IamRoles:
          maxItems: 50
          description: A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 50 IAM roles in a single request
          x-insertionOrder: false
          type: array
          items:
            relationshipRef:
              typeName: AWS::IAM::Role
              propertyPath: /properties/Arn
            type: string
        KmsKeyId:
          description: The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
          anyOf:
            - relationshipRef:
                typeName: AWS::KMS::Key
                propertyPath: /properties/Arn
            - relationshipRef:
                typeName: AWS::KMS::Key
                propertyPath: /properties/KeyId
          type: string
        SnapshotCopyManual:
          description: Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
          type: boolean
        ManageMasterPassword:
          description: A boolean indicating if the redshift cluster's admin user credentials is managed by Redshift or not. You can't use MasterUserPassword if ManageMasterPassword is true. If ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's password.
          type: boolean
        AvailabilityZone:
          description: 'The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint'
          type: string
        ClusterSecurityGroups:
          uniqueItems: false
          description: A list of security groups to be associated with this cluster.
          x-insertionOrder: false
          type: array
          items:
            anyOf:
              - relationshipRef:
                  typeName: AWS::EC2::SecurityGroup
                  propertyPath: /properties/Id
              - relationshipRef:
                  typeName: AWS::Redshift::ClusterSecurityGroup
                  propertyPath: /properties/Id
            type: string
        ClusterIdentifier:
          description: A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account
          type: string
          maxLength: 63
        MasterUserPassword:
          description: The password associated with the master user account for the cluster that is being created. You can't use MasterUserPassword if ManageMasterPassword is true. Password must be between 8 and 64 characters in length, should have at least one uppercase letter.Must contain at least one lowercase letter.Must contain one number.Can be any printable ASCII character.
          type: string
          maxLength: 64
        ClusterSubnetGroupName:
          description: The name of a cluster subnet group to be associated with this cluster.
          type: string
        LoggingProperties:
          $ref: '#/components/schemas/LoggingProperties'
        DeferMaintenance:
          description: A boolean indicating whether to enable the deferred maintenance window.
          type: boolean
        NodeType:
          description: 'The node type to be provisioned for the cluster.Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.4xlarge | ra3.16xlarge'
          type: string
        MasterUsername:
          description: The user name associated with the master user account for the cluster that is being created. The user name can't be PUBLIC and first character must be a letter.
          type: string
          maxLength: 128
        PubliclyAccessible:
          description: If true, the cluster can be accessed from a public network.
          type: boolean
        DeferMaintenanceIdentifier:
          description: A unique identifier for the deferred maintenance window.
          type: string
        ManualSnapshotRetentionPeriod:
          description: |-
            The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot is retained indefinitely.

            The value must be either -1 or an integer between 1 and 3,653.
          type: integer
        ResourceAction:
          description: The Redshift operation to be performed. Resource Action supports pause-cluster, resume-cluster, failover-primary-compute APIs
          type: string
        HsmClientCertificateIdentifier:
          description: Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM
          type: string
        ElasticIp:
          description: The Elastic IP (EIP) address for the cluster.
          type: string
        AvailabilityZoneRelocationStatus:
          description: The availability zone relocation status of the cluster
          type: string
        AquaConfigurationStatus:
          description: |
            The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored. Possible values include the following.

            enabled - Use AQUA if it is available for the current Region and Amazon Redshift node type.
            disabled - Don't use AQUA.
            auto - Amazon Redshift determines whether to use AQUA.
          type: string
        SnapshotIdentifier:
          description: The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.
          type: string
        AvailabilityZoneRelocation:
          description: The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster modification is complete.
          type: boolean
        SnapshotCopyGrantName:
          description: The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
          type: string
        EnhancedVpcRouting:
          description: |-
            An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide.

            If this option is true , enhanced VPC routing is enabled.

            Default: false
          type: boolean
        ClusterParameterGroupName:
          description: The name of the parameter group to be associated with this cluster.
          type: string
          maxLength: 255
        DeferMaintenanceEndTime:
          description: A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
          type: string
        RotateEncryptionKey:
          description: A boolean indicating if we want to rotate Encryption Keys.
          type: boolean
        VpcSecurityGroupIds:
          uniqueItems: false
          description: A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.
          x-insertionOrder: false
          type: array
          items:
            relationshipRef:
              typeName: AWS::EC2::VPC
              propertyPath: /properties/VpcId
            type: string
        ClusterNamespaceArn:
          description: The Amazon Resource Name (ARN) of the cluster namespace.
          type: string
        MasterPasswordSecretArn:
          description: The Amazon Resource Name (ARN) for the cluster's admin user credentials secret.
          type: string
        ClusterVersion:
          description: The version of the Amazon Redshift engine software that you want to deploy on the cluster.The version selected runs on all the nodes in the cluster.
          type: string
        HsmConfigurationIdentifier:
          description: Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
          type: string
        PreferredMaintenanceWindow:
          description: The weekly time range (in UTC) during which automated cluster maintenance can occur.
          type: string
        DeferMaintenanceStartTime:
          description: A timestamp indicating the start time for the deferred maintenance window.
          type: string
        ClusterType:
          description: The type of the cluster. When cluster type is specified as single-node, the NumberOfNodes parameter is not required and if multi-node, the NumberOfNodes parameter is required
          type: string
        Classic:
          description: A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false , the resize type is elastic.
          type: boolean
        MasterPasswordSecretKmsKeyId:
          description: The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin user credentials secret.
          anyOf:
            - relationshipRef:
                typeName: AWS::KMS::Key
                propertyPath: /properties/Arn
            - relationshipRef:
                typeName: AWS::KMS::Key
                propertyPath: /properties/KeyId
          type: string
        DeferMaintenanceDuration:
          description: An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
          type: integer
        DBName:
          description: The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database.
          type: string
        SnapshotCopyRetentionPeriod:
          description: |-
            The number of days to retain automated snapshots in the destination region after they are copied from the source region. 

             Default is 7. 

             Constraints: Must be at least 1 and no more than 35.
          type: integer
      required:
        - NodeType
        - MasterUsername
        - DBName
        - ClusterType
      x-stackql-resource-name: cluster
      description: An example resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::Redshift::Cluster
      x-stackql-primary-identifier:
        - ClusterIdentifier
      x-create-only-properties:
        - ClusterIdentifier
        - OwnerAccount
        - SnapshotIdentifier
        - DBName
        - SnapshotClusterIdentifier
        - ClusterSubnetGroupName
        - MasterUsername
      x-write-only-properties:
        - MasterUserPassword
        - Classic
        - SnapshotIdentifier
        - DeferMaintenance
        - DeferMaintenanceDuration
        - ManageMasterPassword
      x-read-only-properties:
        - DeferMaintenanceIdentifier
        - Endpoint/Port
        - Endpoint/Address
        - ClusterNamespaceArn
        - MasterPasswordSecretArn
      x-required-properties:
        - NodeType
        - MasterUsername
        - DBName
        - ClusterType
      x-tagging:
        taggable: true
      x-required-permissions:
        read:
          - redshift:DescribeClusters
          - redshift:DescribeLoggingStatus
          - redshift:DescribeSnapshotCopyGrant
          - redshift:DescribeClusterDbRevisions
          - redshift:DescribeTags
          - redshift:GetResourcePolicy
        create:
          - iam:PassRole
          - iam:CreateServiceLinkedRole
          - redshift:DescribeClusters
          - redshift:CreateCluster
          - redshift:RestoreFromClusterSnapshot
          - redshift:EnableLogging
          - redshift:DescribeLoggingStatus
          - redshift:CreateTags
          - redshift:DescribeTags
          - redshift:GetResourcePolicy
          - redshift:PutResourcePolicy
          - redshift:ModifyClusterMaintenance
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeAddresses
          - ec2:AssociateAddress
          - ec2:CreateNetworkInterface
          - ec2:ModifyNetworkInterfaceAttribute
          - ec2:CreateVpcEndpoint
          - ec2:DescribeVpcEndpoints
          - ec2:ModifyVpcEndpoint
          - ec2:AllocateAddress
          - ec2:CreateSecurityGroup
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeInternetGateways
          - ec2:DescribeSecurityGroupRules
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeNetworkAcls
          - ec2:DescribeRouteTables
          - cloudwatch:PutMetricData
        update:
          - iam:PassRole
          - redshift:DescribeClusters
          - redshift:ModifyCluster
          - redshift:ModifyClusterIamRoles
          - redshift:EnableLogging
          - redshift:CreateTags
          - redshift:DeleteTags
          - redshift:DescribeTags
          - redshift:DisableLogging
          - redshift:DescribeLoggingStatus
          - redshift:RebootCluster
          - redshift:EnableSnapshotCopy
          - redshift:DisableSnapshotCopy
          - redshift:ModifySnapshotCopyRetentionPeriod
          - redshift:ModifyAquaConfiguration
          - redshift:ResizeCluster
          - redshift:ModifyClusterMaintenance
          - redshift:DescribeClusterDbRevisions
          - redshift:ModifyClusterDbRevisions
          - redshift:PauseCluster
          - redshift:ResumeCluster
          - redshift:RotateEncryptionKey
          - redshift:FailoverPrimaryCompute
          - redshift:PutResourcePolicy
          - redshift:GetResourcePolicy
          - redshift:DeleteResourcePolicy
          - cloudwatch:PutMetricData
        list:
          - redshift:DescribeTags
          - redshift:DescribeClusters
        delete:
          - redshift:DescribeTags
          - redshift:DescribeClusters
          - redshift:DeleteCluster
    Parameter:
      type: object
      additionalProperties: false
      properties:
        ParameterName:
          type: string
          description: The name of the parameter.
        ParameterValue:
          type: string
          description: The value of the parameter. If `ParameterName` is `wlm_json_configuration`, then the maximum size of `ParameterValue` is 8000 characters.
      required:
        - ParameterValue
        - ParameterName
    ClusterParameterGroup:
      type: object
      properties:
        ParameterGroupName:
          type: string
          description: The name of the cluster parameter group.
          maxLength: 255
        Description:
          type: string
          description: A description of the parameter group.
        ParameterGroupFamily:
          type: string
          description: The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters.
        Parameters:
          type: array
          description: An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Parameter'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Description
        - ParameterGroupFamily
      x-stackql-resource-name: cluster_parameter_group
      description: Resource Type definition for AWS::Redshift::ClusterParameterGroup
      x-type-name: AWS::Redshift::ClusterParameterGroup
      x-stackql-primary-identifier:
        - ParameterGroupName
      x-create-only-properties:
        - ParameterGroupName
        - ParameterGroupFamily
        - Description
      x-write-only-properties:
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-required-properties:
        - Description
        - ParameterGroupFamily
      x-tagging:
        taggable: true
      x-required-permissions:
        create:
          - redshift:CreateClusterParameterGroup
          - redshift:ModifyClusterParameterGroup
          - redshift:DescribeClusterParameterGroups
          - redshift:DescribeClusterParameters
          - redshift:DescribeTags
          - redshift:CreateTags
          - ec2:AllocateAddress
          - ec2:AssociateAddress
          - ec2:AttachNetworkInterface
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeInternetGateways
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
        read:
          - redshift:DescribeClusterParameterGroups
          - initech:DescribeReport
          - redshift:DescribeClusterParameters
          - redshift:DescribeTags
        update:
          - redshift:DescribeClusterParameterGroups
          - redshift:ResetClusterParameterGroup
          - redshift:ModifyClusterParameterGroup
          - redshift:DescribeClusterParameters
          - redshift:DescribeTags
          - redshift:CreateTags
          - redshift:DeleteTags
          - initech:UpdateReport
        delete:
          - redshift:DescribeTags
          - redshift:DescribeClusterParameterGroups
          - redshift:DeleteClusterParameterGroup
          - redshift:DescribeClusterParameters
          - initech:DeleteReport
        list:
          - redshift:DescribeTags
          - redshift:DescribeClusterParameterGroups
          - redshift:DescribeClusterParameters
          - initech:ListReports
    ClusterSubnetGroup:
      type: object
      properties:
        Description:
          description: The description of the parameter group.
          type: string
        SubnetIds:
          description: The list of VPC subnet IDs
          type: array
          x-insertionOrder: false
          maxItems: 20
          items:
            type: string
            relationshipRef:
              typeName: AWS::EC2::Subnet
              propertyPath: /properties/SubnetId
        Tags:
          description: The list of tags for the cluster parameter group.
          type: array
          x-insertionOrder: false
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
        ClusterSubnetGroupName:
          description: 'This name must be unique for all subnet groups that are created by your AWS account. If costumer do not provide it, cloudformation will generate it. Must not be "Default". '
          type: string
          maxLength: 255
      required:
        - Description
        - SubnetIds
      x-stackql-resource-name: cluster_subnet_group
      description: Specifies an Amazon Redshift subnet group.
      x-type-name: AWS::Redshift::ClusterSubnetGroup
      x-stackql-primary-identifier:
        - ClusterSubnetGroupName
      x-write-only-properties:
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-read-only-properties:
        - ClusterSubnetGroupName
      x-required-properties:
        - Description
        - SubnetIds
      x-tagging:
        taggable: true
      x-required-permissions:
        create:
          - redshift:CreateClusterSubnetGroup
          - redshift:CreateTags
          - redshift:DescribeClusterSubnetGroups
          - redshift:DescribeTags
          - ec2:AllocateAddress
          - ec2:AssociateAddress
          - ec2:AttachNetworkInterface
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeInternetGateways
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
        read:
          - redshift:DescribeClusterSubnetGroups
          - redshift:DescribeTags
          - ec2:AllocateAddress
          - ec2:AssociateAddress
          - ec2:AttachNetworkInterface
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeInternetGateways
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
        update:
          - redshift:ModifyClusterSubnetGroup
          - redshift:DescribeClusterSubnetGroups
          - redshift:DescribeTags
          - redshift:CreateTags
          - redshift:DeleteTags
          - ec2:AllocateAddress
          - ec2:AssociateAddress
          - ec2:AttachNetworkInterface
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeInternetGateways
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
        delete:
          - redshift:DeleteClusterSubnetGroup
          - redshift:DescribeClusterSubnetGroups
          - redshift:DescribeTags
          - ec2:AllocateAddress
          - ec2:AssociateAddress
          - ec2:AttachNetworkInterface
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeInternetGateways
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
        list:
          - redshift:DescribeClusterSubnetGroups
          - redshift:DescribeTags
          - ec2:AllocateAddress
          - ec2:AssociateAddress
          - ec2:AttachNetworkInterface
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeInternetGateways
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
    VpcSecurityGroup:
      description: Describes the members of a VPC security group.
      additionalProperties: false
      type: object
      properties:
        Status:
          description: The status of the VPC security group.
          type: string
        VpcSecurityGroupId:
          x-relationshipRef:
            typeName: AWS::EC2::SecurityGroup
            propertyPath: /properties/Id
          description: The identifier of the VPC security group.
          type: string
    NetworkInterface:
      description: Describes a network interface.
      additionalProperties: false
      type: object
      properties:
        PrivateIpAddress:
          x-relationshipRef:
            typeName: AWS::EC2::NetworkInterface
            propertyPath: /properties/PrivateIpAddress
          description: The IPv4 address of the network interface within the subnet.
          type: string
        AvailabilityZone:
          description: The Availability Zone.
          type: string
        SubnetId:
          x-relationshipRef:
            typeName: AWS::EC2::NetworkInterface
            propertyPath: /properties/SubnetId
          description: The subnet identifier.
          type: string
        NetworkInterfaceId:
          x-relationshipRef:
            typeName: AWS::EC2::NetworkInterface
            propertyPath: /properties/Id
          description: The network interface identifier.
          type: string
    EndpointAccess:
      type: object
      properties:
        EndpointStatus:
          description: The status of the endpoint.
          type: string
        VpcEndpoint:
          description: The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
          additionalProperties: false
          type: object
          properties:
            VpcId:
              x-relationshipRef:
                typeName: AWS::EC2::VPCEndpoint
                propertyPath: /properties/VpcId
              description: The VPC identifier that the endpoint is associated.
              type: string
            NetworkInterfaces:
              description: One or more network interfaces of the endpoint. Also known as an interface endpoint.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/NetworkInterface'
            VpcEndpointId:
              x-relationshipRef:
                typeName: AWS::EC2::VPCEndpoint
                propertyPath: /properties/Id
              description: The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
              type: string
        Address:
          description: The DNS address of the endpoint.
          type: string
        EndpointName:
          pattern: ^(?=^[a-z][a-z0-9]*(-[a-z0-9]+)*$).{1,30}$
          description: The name of the endpoint.
          type: string
        VpcSecurityGroupIds:
          description: A list of vpc security group ids to apply to the created endpoint access.
          x-insertionOrder: false
          type: array
          items:
            type: string
        ResourceOwner:
          pattern: ^\d{12}$
          description: The AWS account ID of the owner of the cluster.
          type: string
        SubnetGroupName:
          pattern: ^(?=^[a-zA-Z0-9-]+$).{1,255}$
          description: The subnet group name where Amazon Redshift chooses to deploy the endpoint.
          type: string
        Port:
          description: The port number on which the cluster accepts incoming connections.
          type: integer
        EndpointCreateTime:
          description: The time (UTC) that the endpoint was created.
          type: string
        ClusterIdentifier:
          description: A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account
          type: string
        VpcSecurityGroups:
          description: A list of Virtual Private Cloud (VPC) security groups to be associated with the endpoint.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/VpcSecurityGroup'
      required:
        - ClusterIdentifier
        - SubnetGroupName
        - EndpointName
        - VpcSecurityGroupIds
      x-stackql-resource-name: endpoint_access
      description: Resource schema for a Redshift-managed VPC endpoint.
      x-type-name: AWS::Redshift::EndpointAccess
      x-stackql-primary-identifier:
        - EndpointName
      x-create-only-properties:
        - EndpointName
        - ClusterIdentifier
        - ResourceOwner
        - SubnetGroupName
      x-read-only-properties:
        - Address
        - EndpointStatus
        - EndpointCreateTime
        - Port
        - VpcSecurityGroups
        - VpcSecurityGroups/*/VpcSecurityGroupId
        - VpcSecurityGroups/*/Status
        - VpcEndpoint
        - VpcEndpoint/VpcEndpointId
        - VpcEndpoint/VpcId
        - VpcEndpoint/NetworkInterfaces/*/NetworkInterfaceId
        - VpcEndpoint/NetworkInterfaces/*/PrivateIpAddress
        - VpcEndpoint/NetworkInterfaces/*/SubnetId
        - VpcEndpoint/NetworkInterfaces/*/AvailabilityZone
      x-required-properties:
        - ClusterIdentifier
        - SubnetGroupName
        - EndpointName
        - VpcSecurityGroupIds
      x-tagging:
        taggable: false
      x-required-permissions:
        read:
          - redshift:DescribeEndpointAccess
          - ec2:DescribeClientVpnEndpoints
          - ec2:DescribeVpcEndpoint
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
        create:
          - redshift:CreateEndpointAccess
          - redshift:DescribeEndpointAccess
          - ec2:CreateClientVpnEndpoint
          - ec2:CreateVpcEndpoint
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
        update:
          - redshift:DescribeEndpointAccess
          - redshift:ModifyEndpointAccess
          - ec2:ModifyClientVpnEndpoint
          - ec2:ModifyVpcEndpoint
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
        list:
          - redshift:DescribeEndpointAccess
          - ec2:DescribeClientVpnEndpoints
          - ec2:DescribeVpcEndpoints
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
        delete:
          - redshift:DeleteEndpointAccess
          - redshift:DescribeEndpointAccess
          - ec2:DeleteClientVpnEndpoint
          - ec2:DeleteVpcEndpoint
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
          - ec2:DescribeVpcEndpoint
    VpcId:
      x-relationshipRef:
        typeName: AWS::EC2::VPC
        propertyPath: /properties/VpcId
      pattern: ^vpc-[A-Za-z0-9]{1,17}$
      type: string
    AwsAccount:
      pattern: ^\d{12}$
      type: string
    EndpointAuthorization:
      type: object
      properties:
        Status:
          description: The status of the authorization action.
          type: string
        Grantee:
          description: The AWS account ID of the grantee of the cluster.
          $ref: '#/components/schemas/AwsAccount'
        Account:
          description: The target AWS account ID to grant or revoke access for.
          $ref: '#/components/schemas/AwsAccount'
        Grantor:
          description: The AWS account ID of the cluster owner.
          $ref: '#/components/schemas/AwsAccount'
        EndpointCount:
          description: The number of Redshift-managed VPC endpoints created for the authorization.
          type: integer
        AuthorizeTime:
          description: The time (UTC) when the authorization was created.
          type: string
        AllowedVPCs:
          description: The VPCs allowed access to the cluster.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/VpcId'
        Force:
          description: ' Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted.'
          type: boolean
        AllowedAllVPCs:
          description: Indicates whether all VPCs in the grantee account are allowed access to the cluster.
          type: boolean
        VpcIds:
          description: The virtual private cloud (VPC) identifiers to grant or revoke access to.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/VpcId'
        ClusterIdentifier:
          pattern: ^(?=^[a-z][a-z0-9]*(-[a-z0-9]+)*$).{1,63}$
          description: The cluster identifier.
          type: string
        ClusterStatus:
          description: The status of the cluster.
          type: string
      required:
        - ClusterIdentifier
        - Account
      x-stackql-resource-name: endpoint_authorization
      description: Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across AWS accounts.
      x-type-name: AWS::Redshift::EndpointAuthorization
      x-stackql-primary-identifier:
        - ClusterIdentifier
        - Account
      x-create-only-properties:
        - ClusterIdentifier
        - Account
      x-write-only-properties:
        - Force
      x-read-only-properties:
        - Grantor
        - Grantee
        - AuthorizeTime
        - ClusterStatus
        - Status
        - AllowedAllVPCs
        - AllowedVPCs
        - EndpointCount
      x-required-properties:
        - ClusterIdentifier
        - Account
      x-tagging:
        taggable: false
      x-required-permissions:
        read:
          - redshift:DescribeEndpointAuthorization
        create:
          - redshift:AuthorizeEndpointAccess
          - redshift:DescribeEndpointAuthorization
        update:
          - redshift:AuthorizeEndpointAccess
          - redshift:DescribeEndpointAuthorization
          - redshift:RevokeEndpointAccess
        list:
          - redshift:DescribeEndpointAuthorization
        delete:
          - redshift:RevokeEndpointAccess
          - redshift:DeleteEndpointAccess
          - redshift:DescribeEndpointAuthorization
          - ec2:DeleteClientVpnEndpoint
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
    EventSubscription:
      type: object
      properties:
        Status:
          description: The status of the Amazon Redshift event notification subscription.
          type: string
          enum:
            - active
            - no-permission
            - topic-not-exist
        CustSubscriptionId:
          description: The name of the Amazon Redshift event notification subscription.
          type: string
        EventCategoriesList:
          uniqueItems: true
          description: The list of Amazon Redshift event categories specified in the event notification subscription.
          x-insertionOrder: false
          type: array
          items:
            type: string
        SourceType:
          description: The type of source that will be generating the events.
          type: string
          enum:
            - cluster
            - cluster-parameter-group
            - cluster-security-group
            - cluster-snapshot
            - scheduled-action
        EventCategories:
          uniqueItems: true
          description: Specifies the Amazon Redshift event categories to be published by the event notification subscription.
          x-insertionOrder: false
          type: array
          items:
            type: string
            enum:
              - configuration
              - management
              - monitoring
              - security
              - pending
        Enabled:
          description: A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
          type: boolean
        Severity:
          description: Specifies the Amazon Redshift event severity to be published by the event notification subscription.
          type: string
          enum:
            - ERROR
            - INFO
        SubscriptionName:
          pattern: ^(?=^[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*$).{1,255}$
          description: The name of the Amazon Redshift event notification subscription
          type: string
        SourceIds:
          description: A list of one or more identifiers of Amazon Redshift source objects.
          x-insertionOrder: false
          type: array
          items:
            type: string
        CustomerAwsId:
          description: The AWS account associated with the Amazon Redshift event notification subscription.
          type: string
        SourceIdsList:
          description: A list of the sources that publish events to the Amazon Redshift event notification subscription.
          x-insertionOrder: false
          type: array
          items:
            type: string
        SnsTopicArn:
          description: The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
          type: string
        SubscriptionCreationTime:
          description: The date and time the Amazon Redshift event notification subscription was created.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - SubscriptionName
      x-stackql-resource-name: event_subscription
      description: The `AWS::Redshift::EventSubscription` resource creates an Amazon Redshift Event Subscription.
      x-type-name: AWS::Redshift::EventSubscription
      x-stackql-primary-identifier:
        - SubscriptionName
      x-create-only-properties:
        - SubscriptionName
      x-write-only-properties:
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-read-only-properties:
        - CustomerAwsId
        - CustSubscriptionId
        - Status
        - SubscriptionCreationTime
        - SourceIdsList
        - EventCategoriesList
      x-required-properties:
        - SubscriptionName
      x-tagging:
        taggable: true
      x-required-permissions:
        read:
          - redshift:DescribeEventSubscriptions
          - redshift:DescribeTags
        create:
          - redshift:CreateEventSubscription
          - redshift:CreateTags
          - redshift:DescribeTags
          - redshift:DescribeEventSubscriptions
        update:
          - redshift:ModifyEventSubscription
          - redshift:CreateTags
          - redshift:DescribeTags
          - redshift:DescribeEventSubscriptions
          - redshift:DeleteTags
        list:
          - redshift:DescribeTags
          - redshift:DescribeEventSubscriptions
        delete:
          - redshift:DescribeEventSubscriptions
          - redshift:DeleteEventSubscription
          - redshift:DescribeTags
          - redshift:DeleteTags
    Tags:
      type: array
      maxItems: 50
      uniqueItems: true
      x-insertionOrder: false
      description: An array of key-value pairs to apply to this resource.
      items:
        $ref: '#/components/schemas/Tag'
    EncryptionContextMap:
      type: object
      x-patternProperties:
        ^[\s\S]*$:
          type: string
          maxLength: 131072
          minLength: 0
      description: An optional set of non-secret key–value pairs that contains additional contextual information about the data.
      additionalProperties: false
    Integration:
      type: object
      properties:
        IntegrationArn:
          type: string
          description: The Amazon Resource Name (ARN) of the integration.
        IntegrationName:
          description: The name of the integration.
          type: string
          minLength: 1
          maxLength: 64
        SourceArn:
          type: string
          description: The Amazon Resource Name (ARN) of the database to use as the source for replication
        TargetArn:
          type: string
          description: The Amazon Resource Name (ARN) of the Redshift data warehouse to use as the target for replication
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
        CreateTime:
          type: string
          description: The time (UTC) when the integration was created.
        KMSKeyId:
          type: string
          description: An KMS key identifier for the key to use to encrypt the integration. If you don't specify an encryption key, the default AWS owned KMS key is used.
        AdditionalEncryptionContext:
          $ref: '#/components/schemas/EncryptionContextMap'
      required:
        - SourceArn
        - TargetArn
      x-stackql-resource-name: integration
      description: Integration from a source AWS service to a Redshift cluster
      x-type-name: AWS::Redshift::Integration
      x-stackql-primary-identifier:
        - IntegrationArn
      x-create-only-properties:
        - SourceArn
        - TargetArn
        - KMSKeyId
        - AdditionalEncryptionContext
      x-read-only-properties:
        - IntegrationArn
        - CreateTime
      x-required-properties:
        - SourceArn
        - TargetArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - redshift:CreateTags
          - redshift:DeleteTags
          - redshift:DescribeTags
      x-required-permissions:
        create:
          - redshift:CreateIntegration
          - redshift:DescribeIntegrations
          - redshift:CreateTags
          - redshift:DescribeTags
          - redshift:DescribeClusters
          - redshift:CreateInboundIntegration
          - redshift-serverless:ListNamespaces
          - kms:CreateGrant
          - kms:DescribeKey
        read:
          - redshift:DescribeIntegrations
          - redshift:DescribeTags
        update:
          - redshift:DescribeIntegrations
          - redshift:ModifyIntegration
          - redshift:CreateTags
          - redshift:DeleteTags
          - redshift:DescribeClusters
          - redshift:DescribeTags
          - redshift-serverless:ListNamespaces
        delete:
          - redshift:DeleteTags
          - redshift:DeleteIntegration
          - redshift:DescribeIntegrations
        list:
          - redshift:DescribeTags
          - redshift:DescribeIntegrations
    ScheduledActionType:
      oneOf:
        - additionalProperties: false
          properties:
            ResizeCluster:
              $ref: '#/components/schemas/ResizeClusterMessage'
        - additionalProperties: false
          properties:
            PauseCluster:
              $ref: '#/components/schemas/PauseClusterMessage'
        - additionalProperties: false
          properties:
            ResumeCluster:
              $ref: '#/components/schemas/ResumeClusterMessage'
      type: object
    ResizeClusterMessage:
      description: Describes a resize cluster operation. For example, a scheduled action to run the `ResizeCluster` API operation.
      additionalProperties: false
      type: object
      properties:
        NodeType:
          x-relationshipRef:
            typeName: AWS::Redshift::Cluster
            propertyPath: /properties/NodeType
          type: string
        NumberOfNodes:
          x-relationshipRef:
            typeName: AWS::Redshift::Cluster
            propertyPath: /properties/NumberOfNodes
          type: integer
        ClusterType:
          x-relationshipRef:
            typeName: AWS::Redshift::Cluster
            propertyPath: /properties/ClusterType
          type: string
        Classic:
          type: boolean
        ClusterIdentifier:
          x-relationshipRef:
            typeName: AWS::Redshift::Cluster
            propertyPath: /properties/ClusterIdentifier
          type: string
      required:
        - ClusterIdentifier
    PauseClusterMessage:
      description: Describes a pause cluster operation. For example, a scheduled action to run the `PauseCluster` API operation.
      additionalProperties: false
      type: object
      properties:
        ClusterIdentifier:
          x-relationshipRef:
            typeName: AWS::Redshift::Cluster
            propertyPath: /properties/ClusterIdentifier
          type: string
      required:
        - ClusterIdentifier
    ResumeClusterMessage:
      description: Describes a resume cluster operation. For example, a scheduled action to run the `ResumeCluster` API operation.
      additionalProperties: false
      type: object
      properties:
        ClusterIdentifier:
          x-relationshipRef:
            typeName: AWS::Redshift::Cluster
            propertyPath: /properties/ClusterIdentifier
          type: string
      required:
        - ClusterIdentifier
    timestamp:
      type: string
    ScheduledAction:
      type: object
      properties:
        ScheduledActionDescription:
          description: The description of the scheduled action.
          type: string
        ScheduledActionName:
          description: The name of the scheduled action. The name must be unique within an account.
          type: string
        EndTime:
          description: The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger.
          $ref: '#/components/schemas/timestamp'
        State:
          description: The state of the scheduled action.
          type: string
          enum:
            - ACTIVE
            - DISABLED
        Schedule:
          description: The schedule in `at( )` or `cron( )` format.
          type: string
        IamRole:
          description: The IAM role to assume to run the target action.
          type: string
        StartTime:
          description: The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger.
          $ref: '#/components/schemas/timestamp'
        Enable:
          description: If true, the schedule is enabled. If false, the scheduled action does not trigger.
          type: boolean
        TargetAction:
          description: A JSON format string of the Amazon Redshift API operation with input parameters.
          $ref: '#/components/schemas/ScheduledActionType'
        NextInvocations:
          description: List of times when the scheduled action will run.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/timestamp'
      required:
        - ScheduledActionName
      x-stackql-resource-name: scheduled_action
      description: The `AWS::Redshift::ScheduledAction` resource creates an Amazon Redshift Scheduled Action.
      x-type-name: AWS::Redshift::ScheduledAction
      x-stackql-primary-identifier:
        - ScheduledActionName
      x-create-only-properties:
        - ScheduledActionName
      x-read-only-properties:
        - State
        - NextInvocations
      x-required-properties:
        - ScheduledActionName
      x-tagging:
        taggable: false
      x-required-permissions:
        read:
          - redshift:DescribeScheduledActions
          - redshift:DescribeTags
        create:
          - redshift:CreateScheduledAction
          - redshift:DescribeScheduledActions
          - redshift:DescribeTags
          - redshift:PauseCluster
          - redshift:ResumeCluster
          - redshift:ResizeCluster
          - iam:PassRole
        update:
          - redshift:DescribeScheduledActions
          - redshift:ModifyScheduledAction
          - redshift:PauseCluster
          - redshift:ResumeCluster
          - redshift:ResizeCluster
          - redshift:DescribeTags
          - iam:PassRole
        list:
          - redshift:DescribeTags
          - redshift:DescribeScheduledActions
        delete:
          - redshift:DescribeTags
          - redshift:DescribeScheduledActions
          - redshift:DeleteScheduledAction
    CreateClusterRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RevisionTarget:
              description: The identifier of the database revision. You can retrieve this value from the response to the DescribeClusterDbRevisions request.
              type: string
            AutomatedSnapshotRetentionPeriod:
              description: The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Default value is 1
              type: integer
            Encrypted:
              description: If true, the data in the cluster is encrypted at rest.
              type: boolean
            Port:
              description: The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings
              type: integer
            NumberOfNodes:
              description: The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node.
              type: integer
            DestinationRegion:
              description: 'The destination AWS Region that you want to copy snapshots to. Constraints: Must be the name of a valid AWS Region. For more information, see Regions and Endpoints in the Amazon Web Services [https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region] General Reference'
              type: string
            AllowVersionUpgrade:
              description: Major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default value is True
              type: boolean
            Endpoint:
              $ref: '#/components/schemas/Endpoint'
            NamespaceResourcePolicy:
              description: The namespace resource policy document that will be attached to a Redshift cluster.
              type: object
            MaintenanceTrackName:
              description: The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
              type: string
            OwnerAccount:
              type: string
            MultiAZ:
              description: A boolean indicating if the redshift cluster is multi-az or not. If you don't provide this parameter or set the value to false, the redshift cluster will be single-az.
              type: boolean
            Tags:
              maxItems: 50
              uniqueItems: false
              description: The list of tags for the cluster parameter group.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            SnapshotClusterIdentifier:
              description: The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
              type: string
            IamRoles:
              maxItems: 50
              description: A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 50 IAM roles in a single request
              x-insertionOrder: false
              type: array
              items:
                relationshipRef:
                  typeName: AWS::IAM::Role
                  propertyPath: /properties/Arn
                type: string
            KmsKeyId:
              description: The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
              anyOf:
                - relationshipRef:
                    typeName: AWS::KMS::Key
                    propertyPath: /properties/Arn
                - relationshipRef:
                    typeName: AWS::KMS::Key
                    propertyPath: /properties/KeyId
              type: string
            SnapshotCopyManual:
              description: Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
              type: boolean
            ManageMasterPassword:
              description: A boolean indicating if the redshift cluster's admin user credentials is managed by Redshift or not. You can't use MasterUserPassword if ManageMasterPassword is true. If ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's password.
              type: boolean
            AvailabilityZone:
              description: 'The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint'
              type: string
            ClusterSecurityGroups:
              uniqueItems: false
              description: A list of security groups to be associated with this cluster.
              x-insertionOrder: false
              type: array
              items:
                anyOf:
                  - relationshipRef:
                      typeName: AWS::EC2::SecurityGroup
                      propertyPath: /properties/Id
                  - relationshipRef:
                      typeName: AWS::Redshift::ClusterSecurityGroup
                      propertyPath: /properties/Id
                type: string
            ClusterIdentifier:
              description: A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account
              type: string
              maxLength: 63
            MasterUserPassword:
              description: The password associated with the master user account for the cluster that is being created. You can't use MasterUserPassword if ManageMasterPassword is true. Password must be between 8 and 64 characters in length, should have at least one uppercase letter.Must contain at least one lowercase letter.Must contain one number.Can be any printable ASCII character.
              type: string
              maxLength: 64
            ClusterSubnetGroupName:
              description: The name of a cluster subnet group to be associated with this cluster.
              type: string
            LoggingProperties:
              $ref: '#/components/schemas/LoggingProperties'
            DeferMaintenance:
              description: A boolean indicating whether to enable the deferred maintenance window.
              type: boolean
            NodeType:
              description: 'The node type to be provisioned for the cluster.Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.4xlarge | ra3.16xlarge'
              type: string
            MasterUsername:
              description: The user name associated with the master user account for the cluster that is being created. The user name can't be PUBLIC and first character must be a letter.
              type: string
              maxLength: 128
            PubliclyAccessible:
              description: If true, the cluster can be accessed from a public network.
              type: boolean
            DeferMaintenanceIdentifier:
              description: A unique identifier for the deferred maintenance window.
              type: string
            ManualSnapshotRetentionPeriod:
              description: |-
                The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot is retained indefinitely.

                The value must be either -1 or an integer between 1 and 3,653.
              type: integer
            ResourceAction:
              description: The Redshift operation to be performed. Resource Action supports pause-cluster, resume-cluster, failover-primary-compute APIs
              type: string
            HsmClientCertificateIdentifier:
              description: Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM
              type: string
            ElasticIp:
              description: The Elastic IP (EIP) address for the cluster.
              type: string
            AvailabilityZoneRelocationStatus:
              description: The availability zone relocation status of the cluster
              type: string
            AquaConfigurationStatus:
              description: |
                The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored. Possible values include the following.

                enabled - Use AQUA if it is available for the current Region and Amazon Redshift node type.
                disabled - Don't use AQUA.
                auto - Amazon Redshift determines whether to use AQUA.
              type: string
            SnapshotIdentifier:
              description: The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.
              type: string
            AvailabilityZoneRelocation:
              description: The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster modification is complete.
              type: boolean
            SnapshotCopyGrantName:
              description: The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
              type: string
            EnhancedVpcRouting:
              description: |-
                An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide.

                If this option is true , enhanced VPC routing is enabled.

                Default: false
              type: boolean
            ClusterParameterGroupName:
              description: The name of the parameter group to be associated with this cluster.
              type: string
              maxLength: 255
            DeferMaintenanceEndTime:
              description: A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
              type: string
            RotateEncryptionKey:
              description: A boolean indicating if we want to rotate Encryption Keys.
              type: boolean
            VpcSecurityGroupIds:
              uniqueItems: false
              description: A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.
              x-insertionOrder: false
              type: array
              items:
                relationshipRef:
                  typeName: AWS::EC2::VPC
                  propertyPath: /properties/VpcId
                type: string
            ClusterNamespaceArn:
              description: The Amazon Resource Name (ARN) of the cluster namespace.
              type: string
            MasterPasswordSecretArn:
              description: The Amazon Resource Name (ARN) for the cluster's admin user credentials secret.
              type: string
            ClusterVersion:
              description: The version of the Amazon Redshift engine software that you want to deploy on the cluster.The version selected runs on all the nodes in the cluster.
              type: string
            HsmConfigurationIdentifier:
              description: Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
              type: string
            PreferredMaintenanceWindow:
              description: The weekly time range (in UTC) during which automated cluster maintenance can occur.
              type: string
            DeferMaintenanceStartTime:
              description: A timestamp indicating the start time for the deferred maintenance window.
              type: string
            ClusterType:
              description: The type of the cluster. When cluster type is specified as single-node, the NumberOfNodes parameter is not required and if multi-node, the NumberOfNodes parameter is required
              type: string
            Classic:
              description: A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false , the resize type is elastic.
              type: boolean
            MasterPasswordSecretKmsKeyId:
              description: The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin user credentials secret.
              anyOf:
                - relationshipRef:
                    typeName: AWS::KMS::Key
                    propertyPath: /properties/Arn
                - relationshipRef:
                    typeName: AWS::KMS::Key
                    propertyPath: /properties/KeyId
              type: string
            DeferMaintenanceDuration:
              description: An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
              type: integer
            DBName:
              description: The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database.
              type: string
            SnapshotCopyRetentionPeriod:
              description: |-
                The number of days to retain automated snapshots in the destination region after they are copied from the source region. 

                 Default is 7. 

                 Constraints: Must be at least 1 and no more than 35.
              type: integer
          x-stackQL-stringOnly: true
      x-title: CreateClusterRequest
      type: object
      required: []
    CreateClusterParameterGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ParameterGroupName:
              type: string
              description: The name of the cluster parameter group.
              maxLength: 255
            Description:
              type: string
              description: A description of the parameter group.
            ParameterGroupFamily:
              type: string
              description: The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters.
            Parameters:
              type: array
              description: An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Parameter'
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateClusterParameterGroupRequest
      type: object
      required: []
    CreateClusterSubnetGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              description: The description of the parameter group.
              type: string
            SubnetIds:
              description: The list of VPC subnet IDs
              type: array
              x-insertionOrder: false
              maxItems: 20
              items:
                type: string
                relationshipRef:
                  typeName: AWS::EC2::Subnet
                  propertyPath: /properties/SubnetId
            Tags:
              description: The list of tags for the cluster parameter group.
              type: array
              x-insertionOrder: false
              maxItems: 50
              items:
                $ref: '#/components/schemas/Tag'
            ClusterSubnetGroupName:
              description: 'This name must be unique for all subnet groups that are created by your AWS account. If costumer do not provide it, cloudformation will generate it. Must not be "Default". '
              type: string
              maxLength: 255
          x-stackQL-stringOnly: true
      x-title: CreateClusterSubnetGroupRequest
      type: object
      required: []
    CreateEndpointAccessRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            EndpointStatus:
              description: The status of the endpoint.
              type: string
            VpcEndpoint:
              description: The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
              additionalProperties: false
              type: object
              properties:
                VpcId:
                  x-relationshipRef:
                    typeName: AWS::EC2::VPCEndpoint
                    propertyPath: /properties/VpcId
                  description: The VPC identifier that the endpoint is associated.
                  type: string
                NetworkInterfaces:
                  description: One or more network interfaces of the endpoint. Also known as an interface endpoint.
                  x-insertionOrder: false
                  type: array
                  items:
                    $ref: '#/components/schemas/NetworkInterface'
                VpcEndpointId:
                  x-relationshipRef:
                    typeName: AWS::EC2::VPCEndpoint
                    propertyPath: /properties/Id
                  description: The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
                  type: string
            Address:
              description: The DNS address of the endpoint.
              type: string
            EndpointName:
              pattern: ^(?=^[a-z][a-z0-9]*(-[a-z0-9]+)*$).{1,30}$
              description: The name of the endpoint.
              type: string
            VpcSecurityGroupIds:
              description: A list of vpc security group ids to apply to the created endpoint access.
              x-insertionOrder: false
              type: array
              items:
                type: string
            ResourceOwner:
              pattern: ^\d{12}$
              description: The AWS account ID of the owner of the cluster.
              type: string
            SubnetGroupName:
              pattern: ^(?=^[a-zA-Z0-9-]+$).{1,255}$
              description: The subnet group name where Amazon Redshift chooses to deploy the endpoint.
              type: string
            Port:
              description: The port number on which the cluster accepts incoming connections.
              type: integer
            EndpointCreateTime:
              description: The time (UTC) that the endpoint was created.
              type: string
            ClusterIdentifier:
              description: A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account
              type: string
            VpcSecurityGroups:
              description: A list of Virtual Private Cloud (VPC) security groups to be associated with the endpoint.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/VpcSecurityGroup'
          x-stackQL-stringOnly: true
      x-title: CreateEndpointAccessRequest
      type: object
      required: []
    CreateEndpointAuthorizationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Status:
              description: The status of the authorization action.
              type: string
            Grantee:
              description: The AWS account ID of the grantee of the cluster.
              $ref: '#/components/schemas/AwsAccount'
            Account:
              description: The target AWS account ID to grant or revoke access for.
              $ref: '#/components/schemas/AwsAccount'
            Grantor:
              description: The AWS account ID of the cluster owner.
              $ref: '#/components/schemas/AwsAccount'
            EndpointCount:
              description: The number of Redshift-managed VPC endpoints created for the authorization.
              type: integer
            AuthorizeTime:
              description: The time (UTC) when the authorization was created.
              type: string
            AllowedVPCs:
              description: The VPCs allowed access to the cluster.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/VpcId'
            Force:
              description: ' Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted.'
              type: boolean
            AllowedAllVPCs:
              description: Indicates whether all VPCs in the grantee account are allowed access to the cluster.
              type: boolean
            VpcIds:
              description: The virtual private cloud (VPC) identifiers to grant or revoke access to.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/VpcId'
            ClusterIdentifier:
              pattern: ^(?=^[a-z][a-z0-9]*(-[a-z0-9]+)*$).{1,63}$
              description: The cluster identifier.
              type: string
            ClusterStatus:
              description: The status of the cluster.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateEndpointAuthorizationRequest
      type: object
      required: []
    CreateEventSubscriptionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Status:
              description: The status of the Amazon Redshift event notification subscription.
              type: string
              enum:
                - active
                - no-permission
                - topic-not-exist
            CustSubscriptionId:
              description: The name of the Amazon Redshift event notification subscription.
              type: string
            EventCategoriesList:
              uniqueItems: true
              description: The list of Amazon Redshift event categories specified in the event notification subscription.
              x-insertionOrder: false
              type: array
              items:
                type: string
            SourceType:
              description: The type of source that will be generating the events.
              type: string
              enum:
                - cluster
                - cluster-parameter-group
                - cluster-security-group
                - cluster-snapshot
                - scheduled-action
            EventCategories:
              uniqueItems: true
              description: Specifies the Amazon Redshift event categories to be published by the event notification subscription.
              x-insertionOrder: false
              type: array
              items:
                type: string
                enum:
                  - configuration
                  - management
                  - monitoring
                  - security
                  - pending
            Enabled:
              description: A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
              type: boolean
            Severity:
              description: Specifies the Amazon Redshift event severity to be published by the event notification subscription.
              type: string
              enum:
                - ERROR
                - INFO
            SubscriptionName:
              pattern: ^(?=^[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*$).{1,255}$
              description: The name of the Amazon Redshift event notification subscription
              type: string
            SourceIds:
              description: A list of one or more identifiers of Amazon Redshift source objects.
              x-insertionOrder: false
              type: array
              items:
                type: string
            CustomerAwsId:
              description: The AWS account associated with the Amazon Redshift event notification subscription.
              type: string
            SourceIdsList:
              description: A list of the sources that publish events to the Amazon Redshift event notification subscription.
              x-insertionOrder: false
              type: array
              items:
                type: string
            SnsTopicArn:
              description: The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
              type: string
            SubscriptionCreationTime:
              description: The date and time the Amazon Redshift event notification subscription was created.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateEventSubscriptionRequest
      type: object
      required: []
    CreateIntegrationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IntegrationArn:
              type: string
              description: The Amazon Resource Name (ARN) of the integration.
            IntegrationName:
              description: The name of the integration.
              type: string
              minLength: 1
              maxLength: 64
            SourceArn:
              type: string
              description: The Amazon Resource Name (ARN) of the database to use as the source for replication
            TargetArn:
              type: string
              description: The Amazon Resource Name (ARN) of the Redshift data warehouse to use as the target for replication
            Tags:
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              description: An array of key-value pairs to apply to this resource.
              items:
                $ref: '#/components/schemas/Tag'
            CreateTime:
              type: string
              description: The time (UTC) when the integration was created.
            KMSKeyId:
              type: string
              description: An KMS key identifier for the key to use to encrypt the integration. If you don't specify an encryption key, the default AWS owned KMS key is used.
            AdditionalEncryptionContext:
              $ref: '#/components/schemas/EncryptionContextMap'
          x-stackQL-stringOnly: true
      x-title: CreateIntegrationRequest
      type: object
      required: []
    CreateScheduledActionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ScheduledActionDescription:
              description: The description of the scheduled action.
              type: string
            ScheduledActionName:
              description: The name of the scheduled action. The name must be unique within an account.
              type: string
            EndTime:
              description: The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger.
              $ref: '#/components/schemas/timestamp'
            State:
              description: The state of the scheduled action.
              type: string
              enum:
                - ACTIVE
                - DISABLED
            Schedule:
              description: The schedule in `at( )` or `cron( )` format.
              type: string
            IamRole:
              description: The IAM role to assume to run the target action.
              type: string
            StartTime:
              description: The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger.
              $ref: '#/components/schemas/timestamp'
            Enable:
              description: If true, the schedule is enabled. If false, the scheduled action does not trigger.
              type: boolean
            TargetAction:
              description: A JSON format string of the Amazon Redshift API operation with input parameters.
              $ref: '#/components/schemas/ScheduledActionType'
            NextInvocations:
              description: List of times when the scheduled action will run.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/timestamp'
          x-stackQL-stringOnly: true
      x-title: CreateScheduledActionRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    clusters:
      name: clusters
      id: aws.redshift.clusters
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::Redshift::Cluster
      x-identifiers:
        - ClusterIdentifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Cluster&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RevisionTarget') as revision_target,
              JSON_EXTRACT(Properties, '$.AutomatedSnapshotRetentionPeriod') as automated_snapshot_retention_period,
              JSON_EXTRACT(Properties, '$.Encrypted') as encrypted,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.NumberOfNodes') as number_of_nodes,
              JSON_EXTRACT(Properties, '$.DestinationRegion') as destination_region,
              JSON_EXTRACT(Properties, '$.AllowVersionUpgrade') as allow_version_upgrade,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.NamespaceResourcePolicy') as namespace_resource_policy,
              JSON_EXTRACT(Properties, '$.MaintenanceTrackName') as maintenance_track_name,
              JSON_EXTRACT(Properties, '$.OwnerAccount') as owner_account,
              JSON_EXTRACT(Properties, '$.MultiAZ') as multi_az,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SnapshotClusterIdentifier') as snapshot_cluster_identifier,
              JSON_EXTRACT(Properties, '$.IamRoles') as iam_roles,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.SnapshotCopyManual') as snapshot_copy_manual,
              JSON_EXTRACT(Properties, '$.ManageMasterPassword') as manage_master_password,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.ClusterSecurityGroups') as cluster_security_groups,
              JSON_EXTRACT(Properties, '$.ClusterIdentifier') as cluster_identifier,
              JSON_EXTRACT(Properties, '$.MasterUserPassword') as master_user_password,
              JSON_EXTRACT(Properties, '$.ClusterSubnetGroupName') as cluster_subnet_group_name,
              JSON_EXTRACT(Properties, '$.LoggingProperties') as logging_properties,
              JSON_EXTRACT(Properties, '$.DeferMaintenance') as defer_maintenance,
              JSON_EXTRACT(Properties, '$.NodeType') as node_type,
              JSON_EXTRACT(Properties, '$.MasterUsername') as master_username,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.DeferMaintenanceIdentifier') as defer_maintenance_identifier,
              JSON_EXTRACT(Properties, '$.ManualSnapshotRetentionPeriod') as manual_snapshot_retention_period,
              JSON_EXTRACT(Properties, '$.ResourceAction') as resource_action,
              JSON_EXTRACT(Properties, '$.HsmClientCertificateIdentifier') as hsm_client_certificate_identifier,
              JSON_EXTRACT(Properties, '$.ElasticIp') as elastic_ip,
              JSON_EXTRACT(Properties, '$.AvailabilityZoneRelocationStatus') as availability_zone_relocation_status,
              JSON_EXTRACT(Properties, '$.AquaConfigurationStatus') as aqua_configuration_status,
              JSON_EXTRACT(Properties, '$.SnapshotIdentifier') as snapshot_identifier,
              JSON_EXTRACT(Properties, '$.AvailabilityZoneRelocation') as availability_zone_relocation,
              JSON_EXTRACT(Properties, '$.SnapshotCopyGrantName') as snapshot_copy_grant_name,
              JSON_EXTRACT(Properties, '$.EnhancedVpcRouting') as enhanced_vpc_routing,
              JSON_EXTRACT(Properties, '$.ClusterParameterGroupName') as cluster_parameter_group_name,
              JSON_EXTRACT(Properties, '$.DeferMaintenanceEndTime') as defer_maintenance_end_time,
              JSON_EXTRACT(Properties, '$.RotateEncryptionKey') as rotate_encryption_key,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
              JSON_EXTRACT(Properties, '$.ClusterNamespaceArn') as cluster_namespace_arn,
              JSON_EXTRACT(Properties, '$.MasterPasswordSecretArn') as master_password_secret_arn,
              JSON_EXTRACT(Properties, '$.ClusterVersion') as cluster_version,
              JSON_EXTRACT(Properties, '$.HsmConfigurationIdentifier') as hsm_configuration_identifier,
              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(Properties, '$.DeferMaintenanceStartTime') as defer_maintenance_start_time,
              JSON_EXTRACT(Properties, '$.ClusterType') as cluster_type,
              JSON_EXTRACT(Properties, '$.Classic') as classic,
              JSON_EXTRACT(Properties, '$.MasterPasswordSecretKmsKeyId') as master_password_secret_kms_key_id,
              JSON_EXTRACT(Properties, '$.DeferMaintenanceDuration') as defer_maintenance_duration,
              JSON_EXTRACT(Properties, '$.DBName') as db_name,
              JSON_EXTRACT(Properties, '$.SnapshotCopyRetentionPeriod') as snapshot_copy_retention_period
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::Cluster'
              AND data__Identifier = '<ClusterIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RevisionTarget') as revision_target,
                JSON_EXTRACT(detail.Properties, '$.AutomatedSnapshotRetentionPeriod') as automated_snapshot_retention_period,
                JSON_EXTRACT(detail.Properties, '$.Encrypted') as encrypted,
                JSON_EXTRACT(detail.Properties, '$.Port') as port,
                JSON_EXTRACT(detail.Properties, '$.NumberOfNodes') as number_of_nodes,
                JSON_EXTRACT(detail.Properties, '$.DestinationRegion') as destination_region,
                JSON_EXTRACT(detail.Properties, '$.AllowVersionUpgrade') as allow_version_upgrade,
                JSON_EXTRACT(detail.Properties, '$.Endpoint') as endpoint,
                JSON_EXTRACT(detail.Properties, '$.NamespaceResourcePolicy') as namespace_resource_policy,
                JSON_EXTRACT(detail.Properties, '$.MaintenanceTrackName') as maintenance_track_name,
                JSON_EXTRACT(detail.Properties, '$.OwnerAccount') as owner_account,
                JSON_EXTRACT(detail.Properties, '$.MultiAZ') as multi_az,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.SnapshotClusterIdentifier') as snapshot_cluster_identifier,
                JSON_EXTRACT(detail.Properties, '$.IamRoles') as iam_roles,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.SnapshotCopyManual') as snapshot_copy_manual,
                JSON_EXTRACT(detail.Properties, '$.ManageMasterPassword') as manage_master_password,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
                JSON_EXTRACT(detail.Properties, '$.ClusterSecurityGroups') as cluster_security_groups,
                JSON_EXTRACT(detail.Properties, '$.ClusterIdentifier') as cluster_identifier,
                JSON_EXTRACT(detail.Properties, '$.MasterUserPassword') as master_user_password,
                JSON_EXTRACT(detail.Properties, '$.ClusterSubnetGroupName') as cluster_subnet_group_name,
                JSON_EXTRACT(detail.Properties, '$.LoggingProperties') as logging_properties,
                JSON_EXTRACT(detail.Properties, '$.DeferMaintenance') as defer_maintenance,
                JSON_EXTRACT(detail.Properties, '$.NodeType') as node_type,
                JSON_EXTRACT(detail.Properties, '$.MasterUsername') as master_username,
                JSON_EXTRACT(detail.Properties, '$.PubliclyAccessible') as publicly_accessible,
                JSON_EXTRACT(detail.Properties, '$.DeferMaintenanceIdentifier') as defer_maintenance_identifier,
                JSON_EXTRACT(detail.Properties, '$.ManualSnapshotRetentionPeriod') as manual_snapshot_retention_period,
                JSON_EXTRACT(detail.Properties, '$.ResourceAction') as resource_action,
                JSON_EXTRACT(detail.Properties, '$.HsmClientCertificateIdentifier') as hsm_client_certificate_identifier,
                JSON_EXTRACT(detail.Properties, '$.ElasticIp') as elastic_ip,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZoneRelocationStatus') as availability_zone_relocation_status,
                JSON_EXTRACT(detail.Properties, '$.AquaConfigurationStatus') as aqua_configuration_status,
                JSON_EXTRACT(detail.Properties, '$.SnapshotIdentifier') as snapshot_identifier,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZoneRelocation') as availability_zone_relocation,
                JSON_EXTRACT(detail.Properties, '$.SnapshotCopyGrantName') as snapshot_copy_grant_name,
                JSON_EXTRACT(detail.Properties, '$.EnhancedVpcRouting') as enhanced_vpc_routing,
                JSON_EXTRACT(detail.Properties, '$.ClusterParameterGroupName') as cluster_parameter_group_name,
                JSON_EXTRACT(detail.Properties, '$.DeferMaintenanceEndTime') as defer_maintenance_end_time,
                JSON_EXTRACT(detail.Properties, '$.RotateEncryptionKey') as rotate_encryption_key,
                JSON_EXTRACT(detail.Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.ClusterNamespaceArn') as cluster_namespace_arn,
                JSON_EXTRACT(detail.Properties, '$.MasterPasswordSecretArn') as master_password_secret_arn,
                JSON_EXTRACT(detail.Properties, '$.ClusterVersion') as cluster_version,
                JSON_EXTRACT(detail.Properties, '$.HsmConfigurationIdentifier') as hsm_configuration_identifier,
                JSON_EXTRACT(detail.Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
                JSON_EXTRACT(detail.Properties, '$.DeferMaintenanceStartTime') as defer_maintenance_start_time,
                JSON_EXTRACT(detail.Properties, '$.ClusterType') as cluster_type,
                JSON_EXTRACT(detail.Properties, '$.Classic') as classic,
                JSON_EXTRACT(detail.Properties, '$.MasterPasswordSecretKmsKeyId') as master_password_secret_kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.DeferMaintenanceDuration') as defer_maintenance_duration,
                JSON_EXTRACT(detail.Properties, '$.DBName') as db_name,
                JSON_EXTRACT(detail.Properties, '$.SnapshotCopyRetentionPeriod') as snapshot_copy_retention_period
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Redshift::Cluster'
                AND detail.data__TypeName = 'AWS::Redshift::Cluster'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RevisionTarget') as revision_target,
                  json_extract_path_text(Properties, 'AutomatedSnapshotRetentionPeriod') as automated_snapshot_retention_period,
                  json_extract_path_text(Properties, 'Encrypted') as encrypted,
                  json_extract_path_text(Properties, 'Port') as port,
                  json_extract_path_text(Properties, 'NumberOfNodes') as number_of_nodes,
                  json_extract_path_text(Properties, 'DestinationRegion') as destination_region,
                  json_extract_path_text(Properties, 'AllowVersionUpgrade') as allow_version_upgrade,
                  json_extract_path_text(Properties, 'Endpoint') as endpoint,
                  json_extract_path_text(Properties, 'NamespaceResourcePolicy') as namespace_resource_policy,
                  json_extract_path_text(Properties, 'MaintenanceTrackName') as maintenance_track_name,
                  json_extract_path_text(Properties, 'OwnerAccount') as owner_account,
                  json_extract_path_text(Properties, 'MultiAZ') as multi_az,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'SnapshotClusterIdentifier') as snapshot_cluster_identifier,
                  json_extract_path_text(Properties, 'IamRoles') as iam_roles,
                  json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                  json_extract_path_text(Properties, 'SnapshotCopyManual') as snapshot_copy_manual,
                  json_extract_path_text(Properties, 'ManageMasterPassword') as manage_master_password,
                  json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                  json_extract_path_text(Properties, 'ClusterSecurityGroups') as cluster_security_groups,
                  json_extract_path_text(Properties, 'ClusterIdentifier') as cluster_identifier,
                  json_extract_path_text(Properties, 'MasterUserPassword') as master_user_password,
                  json_extract_path_text(Properties, 'ClusterSubnetGroupName') as cluster_subnet_group_name,
                  json_extract_path_text(Properties, 'LoggingProperties') as logging_properties,
                  json_extract_path_text(Properties, 'DeferMaintenance') as defer_maintenance,
                  json_extract_path_text(Properties, 'NodeType') as node_type,
                  json_extract_path_text(Properties, 'MasterUsername') as master_username,
                  json_extract_path_text(Properties, 'PubliclyAccessible') as publicly_accessible,
                  json_extract_path_text(Properties, 'DeferMaintenanceIdentifier') as defer_maintenance_identifier,
                  json_extract_path_text(Properties, 'ManualSnapshotRetentionPeriod') as manual_snapshot_retention_period,
                  json_extract_path_text(Properties, 'ResourceAction') as resource_action,
                  json_extract_path_text(Properties, 'HsmClientCertificateIdentifier') as hsm_client_certificate_identifier,
                  json_extract_path_text(Properties, 'ElasticIp') as elastic_ip,
                  json_extract_path_text(Properties, 'AvailabilityZoneRelocationStatus') as availability_zone_relocation_status,
                  json_extract_path_text(Properties, 'AquaConfigurationStatus') as aqua_configuration_status,
                  json_extract_path_text(Properties, 'SnapshotIdentifier') as snapshot_identifier,
                  json_extract_path_text(Properties, 'AvailabilityZoneRelocation') as availability_zone_relocation,
                  json_extract_path_text(Properties, 'SnapshotCopyGrantName') as snapshot_copy_grant_name,
                  json_extract_path_text(Properties, 'EnhancedVpcRouting') as enhanced_vpc_routing,
                  json_extract_path_text(Properties, 'ClusterParameterGroupName') as cluster_parameter_group_name,
                  json_extract_path_text(Properties, 'DeferMaintenanceEndTime') as defer_maintenance_end_time,
                  json_extract_path_text(Properties, 'RotateEncryptionKey') as rotate_encryption_key,
                  json_extract_path_text(Properties, 'VpcSecurityGroupIds') as vpc_security_group_ids,
                  json_extract_path_text(Properties, 'ClusterNamespaceArn') as cluster_namespace_arn,
                  json_extract_path_text(Properties, 'MasterPasswordSecretArn') as master_password_secret_arn,
                  json_extract_path_text(Properties, 'ClusterVersion') as cluster_version,
                  json_extract_path_text(Properties, 'HsmConfigurationIdentifier') as hsm_configuration_identifier,
                  json_extract_path_text(Properties, 'PreferredMaintenanceWindow') as preferred_maintenance_window,
                  json_extract_path_text(Properties, 'DeferMaintenanceStartTime') as defer_maintenance_start_time,
                  json_extract_path_text(Properties, 'ClusterType') as cluster_type,
                  json_extract_path_text(Properties, 'Classic') as classic,
                  json_extract_path_text(Properties, 'MasterPasswordSecretKmsKeyId') as master_password_secret_kms_key_id,
                  json_extract_path_text(Properties, 'DeferMaintenanceDuration') as defer_maintenance_duration,
                  json_extract_path_text(Properties, 'DBName') as db_name,
                  json_extract_path_text(Properties, 'SnapshotCopyRetentionPeriod') as snapshot_copy_retention_period
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::Cluster'
                  AND data__Identifier = '<ClusterIdentifier>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RevisionTarget') as revision_target,
                    json_extract_path_text(detail.Properties, 'AutomatedSnapshotRetentionPeriod') as automated_snapshot_retention_period,
                    json_extract_path_text(detail.Properties, 'Encrypted') as encrypted,
                    json_extract_path_text(detail.Properties, 'Port') as port,
                    json_extract_path_text(detail.Properties, 'NumberOfNodes') as number_of_nodes,
                    json_extract_path_text(detail.Properties, 'DestinationRegion') as destination_region,
                    json_extract_path_text(detail.Properties, 'AllowVersionUpgrade') as allow_version_upgrade,
                    json_extract_path_text(detail.Properties, 'Endpoint') as endpoint,
                    json_extract_path_text(detail.Properties, 'NamespaceResourcePolicy') as namespace_resource_policy,
                    json_extract_path_text(detail.Properties, 'MaintenanceTrackName') as maintenance_track_name,
                    json_extract_path_text(detail.Properties, 'OwnerAccount') as owner_account,
                    json_extract_path_text(detail.Properties, 'MultiAZ') as multi_az,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'SnapshotClusterIdentifier') as snapshot_cluster_identifier,
                    json_extract_path_text(detail.Properties, 'IamRoles') as iam_roles,
                    json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                    json_extract_path_text(detail.Properties, 'SnapshotCopyManual') as snapshot_copy_manual,
                    json_extract_path_text(detail.Properties, 'ManageMasterPassword') as manage_master_password,
                    json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                    json_extract_path_text(detail.Properties, 'ClusterSecurityGroups') as cluster_security_groups,
                    json_extract_path_text(detail.Properties, 'ClusterIdentifier') as cluster_identifier,
                    json_extract_path_text(detail.Properties, 'MasterUserPassword') as master_user_password,
                    json_extract_path_text(detail.Properties, 'ClusterSubnetGroupName') as cluster_subnet_group_name,
                    json_extract_path_text(detail.Properties, 'LoggingProperties') as logging_properties,
                    json_extract_path_text(detail.Properties, 'DeferMaintenance') as defer_maintenance,
                    json_extract_path_text(detail.Properties, 'NodeType') as node_type,
                    json_extract_path_text(detail.Properties, 'MasterUsername') as master_username,
                    json_extract_path_text(detail.Properties, 'PubliclyAccessible') as publicly_accessible,
                    json_extract_path_text(detail.Properties, 'DeferMaintenanceIdentifier') as defer_maintenance_identifier,
                    json_extract_path_text(detail.Properties, 'ManualSnapshotRetentionPeriod') as manual_snapshot_retention_period,
                    json_extract_path_text(detail.Properties, 'ResourceAction') as resource_action,
                    json_extract_path_text(detail.Properties, 'HsmClientCertificateIdentifier') as hsm_client_certificate_identifier,
                    json_extract_path_text(detail.Properties, 'ElasticIp') as elastic_ip,
                    json_extract_path_text(detail.Properties, 'AvailabilityZoneRelocationStatus') as availability_zone_relocation_status,
                    json_extract_path_text(detail.Properties, 'AquaConfigurationStatus') as aqua_configuration_status,
                    json_extract_path_text(detail.Properties, 'SnapshotIdentifier') as snapshot_identifier,
                    json_extract_path_text(detail.Properties, 'AvailabilityZoneRelocation') as availability_zone_relocation,
                    json_extract_path_text(detail.Properties, 'SnapshotCopyGrantName') as snapshot_copy_grant_name,
                    json_extract_path_text(detail.Properties, 'EnhancedVpcRouting') as enhanced_vpc_routing,
                    json_extract_path_text(detail.Properties, 'ClusterParameterGroupName') as cluster_parameter_group_name,
                    json_extract_path_text(detail.Properties, 'DeferMaintenanceEndTime') as defer_maintenance_end_time,
                    json_extract_path_text(detail.Properties, 'RotateEncryptionKey') as rotate_encryption_key,
                    json_extract_path_text(detail.Properties, 'VpcSecurityGroupIds') as vpc_security_group_ids,
                    json_extract_path_text(detail.Properties, 'ClusterNamespaceArn') as cluster_namespace_arn,
                    json_extract_path_text(detail.Properties, 'MasterPasswordSecretArn') as master_password_secret_arn,
                    json_extract_path_text(detail.Properties, 'ClusterVersion') as cluster_version,
                    json_extract_path_text(detail.Properties, 'HsmConfigurationIdentifier') as hsm_configuration_identifier,
                    json_extract_path_text(detail.Properties, 'PreferredMaintenanceWindow') as preferred_maintenance_window,
                    json_extract_path_text(detail.Properties, 'DeferMaintenanceStartTime') as defer_maintenance_start_time,
                    json_extract_path_text(detail.Properties, 'ClusterType') as cluster_type,
                    json_extract_path_text(detail.Properties, 'Classic') as classic,
                    json_extract_path_text(detail.Properties, 'MasterPasswordSecretKmsKeyId') as master_password_secret_kms_key_id,
                    json_extract_path_text(detail.Properties, 'DeferMaintenanceDuration') as defer_maintenance_duration,
                    json_extract_path_text(detail.Properties, 'DBName') as db_name,
                    json_extract_path_text(detail.Properties, 'SnapshotCopyRetentionPeriod') as snapshot_copy_retention_period
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Redshift::Cluster'
                    AND detail.data__TypeName = 'AWS::Redshift::Cluster'
                    AND listing.region = 'us-east-1'
    clusters_list_only:
      name: clusters_list_only
      id: aws.redshift.clusters_list_only
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::Redshift::Cluster
      x-identifiers:
        - ClusterIdentifier
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClusterIdentifier') as cluster_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::Cluster'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClusterIdentifier') as cluster_identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::Cluster'
                AND region = 'us-east-1'
    cluster_tags:
      name: cluster_tags
      id: aws.redshift.cluster_tags
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::Redshift::Cluster
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.RevisionTarget') as revision_target,
              JSON_EXTRACT(detail.Properties, '$.AutomatedSnapshotRetentionPeriod') as automated_snapshot_retention_period,
              JSON_EXTRACT(detail.Properties, '$.Encrypted') as encrypted,
              JSON_EXTRACT(detail.Properties, '$.Port') as port,
              JSON_EXTRACT(detail.Properties, '$.NumberOfNodes') as number_of_nodes,
              JSON_EXTRACT(detail.Properties, '$.DestinationRegion') as destination_region,
              JSON_EXTRACT(detail.Properties, '$.AllowVersionUpgrade') as allow_version_upgrade,
              JSON_EXTRACT(detail.Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(detail.Properties, '$.NamespaceResourcePolicy') as namespace_resource_policy,
              JSON_EXTRACT(detail.Properties, '$.MaintenanceTrackName') as maintenance_track_name,
              JSON_EXTRACT(detail.Properties, '$.OwnerAccount') as owner_account,
              JSON_EXTRACT(detail.Properties, '$.MultiAZ') as multi_az,
              JSON_EXTRACT(detail.Properties, '$.SnapshotClusterIdentifier') as snapshot_cluster_identifier,
              JSON_EXTRACT(detail.Properties, '$.IamRoles') as iam_roles,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.SnapshotCopyManual') as snapshot_copy_manual,
              JSON_EXTRACT(detail.Properties, '$.ManageMasterPassword') as manage_master_password,
              JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(detail.Properties, '$.ClusterSecurityGroups') as cluster_security_groups,
              JSON_EXTRACT(detail.Properties, '$.ClusterIdentifier') as cluster_identifier,
              JSON_EXTRACT(detail.Properties, '$.MasterUserPassword') as master_user_password,
              JSON_EXTRACT(detail.Properties, '$.ClusterSubnetGroupName') as cluster_subnet_group_name,
              JSON_EXTRACT(detail.Properties, '$.LoggingProperties') as logging_properties,
              JSON_EXTRACT(detail.Properties, '$.DeferMaintenance') as defer_maintenance,
              JSON_EXTRACT(detail.Properties, '$.NodeType') as node_type,
              JSON_EXTRACT(detail.Properties, '$.MasterUsername') as master_username,
              JSON_EXTRACT(detail.Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(detail.Properties, '$.DeferMaintenanceIdentifier') as defer_maintenance_identifier,
              JSON_EXTRACT(detail.Properties, '$.ManualSnapshotRetentionPeriod') as manual_snapshot_retention_period,
              JSON_EXTRACT(detail.Properties, '$.ResourceAction') as resource_action,
              JSON_EXTRACT(detail.Properties, '$.HsmClientCertificateIdentifier') as hsm_client_certificate_identifier,
              JSON_EXTRACT(detail.Properties, '$.ElasticIp') as elastic_ip,
              JSON_EXTRACT(detail.Properties, '$.AvailabilityZoneRelocationStatus') as availability_zone_relocation_status,
              JSON_EXTRACT(detail.Properties, '$.AquaConfigurationStatus') as aqua_configuration_status,
              JSON_EXTRACT(detail.Properties, '$.SnapshotIdentifier') as snapshot_identifier,
              JSON_EXTRACT(detail.Properties, '$.AvailabilityZoneRelocation') as availability_zone_relocation,
              JSON_EXTRACT(detail.Properties, '$.SnapshotCopyGrantName') as snapshot_copy_grant_name,
              JSON_EXTRACT(detail.Properties, '$.EnhancedVpcRouting') as enhanced_vpc_routing,
              JSON_EXTRACT(detail.Properties, '$.ClusterParameterGroupName') as cluster_parameter_group_name,
              JSON_EXTRACT(detail.Properties, '$.DeferMaintenanceEndTime') as defer_maintenance_end_time,
              JSON_EXTRACT(detail.Properties, '$.RotateEncryptionKey') as rotate_encryption_key,
              JSON_EXTRACT(detail.Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
              JSON_EXTRACT(detail.Properties, '$.ClusterNamespaceArn') as cluster_namespace_arn,
              JSON_EXTRACT(detail.Properties, '$.MasterPasswordSecretArn') as master_password_secret_arn,
              JSON_EXTRACT(detail.Properties, '$.ClusterVersion') as cluster_version,
              JSON_EXTRACT(detail.Properties, '$.HsmConfigurationIdentifier') as hsm_configuration_identifier,
              JSON_EXTRACT(detail.Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(detail.Properties, '$.DeferMaintenanceStartTime') as defer_maintenance_start_time,
              JSON_EXTRACT(detail.Properties, '$.ClusterType') as cluster_type,
              JSON_EXTRACT(detail.Properties, '$.Classic') as classic,
              JSON_EXTRACT(detail.Properties, '$.MasterPasswordSecretKmsKeyId') as master_password_secret_kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.DeferMaintenanceDuration') as defer_maintenance_duration,
              JSON_EXTRACT(detail.Properties, '$.DBName') as db_name,
              JSON_EXTRACT(detail.Properties, '$.SnapshotCopyRetentionPeriod') as snapshot_copy_retention_period
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Redshift::Cluster'
              AND detail.data__TypeName = 'AWS::Redshift::Cluster'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'RevisionTarget') as revision_target,
                json_extract_path_text(detail.Properties, 'AutomatedSnapshotRetentionPeriod') as automated_snapshot_retention_period,
                json_extract_path_text(detail.Properties, 'Encrypted') as encrypted,
                json_extract_path_text(detail.Properties, 'Port') as port,
                json_extract_path_text(detail.Properties, 'NumberOfNodes') as number_of_nodes,
                json_extract_path_text(detail.Properties, 'DestinationRegion') as destination_region,
                json_extract_path_text(detail.Properties, 'AllowVersionUpgrade') as allow_version_upgrade,
                json_extract_path_text(detail.Properties, 'Endpoint') as endpoint,
                json_extract_path_text(detail.Properties, 'NamespaceResourcePolicy') as namespace_resource_policy,
                json_extract_path_text(detail.Properties, 'MaintenanceTrackName') as maintenance_track_name,
                json_extract_path_text(detail.Properties, 'OwnerAccount') as owner_account,
                json_extract_path_text(detail.Properties, 'MultiAZ') as multi_az,
                json_extract_path_text(detail.Properties, 'SnapshotClusterIdentifier') as snapshot_cluster_identifier,
                json_extract_path_text(detail.Properties, 'IamRoles') as iam_roles,
                json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(detail.Properties, 'SnapshotCopyManual') as snapshot_copy_manual,
                json_extract_path_text(detail.Properties, 'ManageMasterPassword') as manage_master_password,
                json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(detail.Properties, 'ClusterSecurityGroups') as cluster_security_groups,
                json_extract_path_text(detail.Properties, 'ClusterIdentifier') as cluster_identifier,
                json_extract_path_text(detail.Properties, 'MasterUserPassword') as master_user_password,
                json_extract_path_text(detail.Properties, 'ClusterSubnetGroupName') as cluster_subnet_group_name,
                json_extract_path_text(detail.Properties, 'LoggingProperties') as logging_properties,
                json_extract_path_text(detail.Properties, 'DeferMaintenance') as defer_maintenance,
                json_extract_path_text(detail.Properties, 'NodeType') as node_type,
                json_extract_path_text(detail.Properties, 'MasterUsername') as master_username,
                json_extract_path_text(detail.Properties, 'PubliclyAccessible') as publicly_accessible,
                json_extract_path_text(detail.Properties, 'DeferMaintenanceIdentifier') as defer_maintenance_identifier,
                json_extract_path_text(detail.Properties, 'ManualSnapshotRetentionPeriod') as manual_snapshot_retention_period,
                json_extract_path_text(detail.Properties, 'ResourceAction') as resource_action,
                json_extract_path_text(detail.Properties, 'HsmClientCertificateIdentifier') as hsm_client_certificate_identifier,
                json_extract_path_text(detail.Properties, 'ElasticIp') as elastic_ip,
                json_extract_path_text(detail.Properties, 'AvailabilityZoneRelocationStatus') as availability_zone_relocation_status,
                json_extract_path_text(detail.Properties, 'AquaConfigurationStatus') as aqua_configuration_status,
                json_extract_path_text(detail.Properties, 'SnapshotIdentifier') as snapshot_identifier,
                json_extract_path_text(detail.Properties, 'AvailabilityZoneRelocation') as availability_zone_relocation,
                json_extract_path_text(detail.Properties, 'SnapshotCopyGrantName') as snapshot_copy_grant_name,
                json_extract_path_text(detail.Properties, 'EnhancedVpcRouting') as enhanced_vpc_routing,
                json_extract_path_text(detail.Properties, 'ClusterParameterGroupName') as cluster_parameter_group_name,
                json_extract_path_text(detail.Properties, 'DeferMaintenanceEndTime') as defer_maintenance_end_time,
                json_extract_path_text(detail.Properties, 'RotateEncryptionKey') as rotate_encryption_key,
                json_extract_path_text(detail.Properties, 'VpcSecurityGroupIds') as vpc_security_group_ids,
                json_extract_path_text(detail.Properties, 'ClusterNamespaceArn') as cluster_namespace_arn,
                json_extract_path_text(detail.Properties, 'MasterPasswordSecretArn') as master_password_secret_arn,
                json_extract_path_text(detail.Properties, 'ClusterVersion') as cluster_version,
                json_extract_path_text(detail.Properties, 'HsmConfigurationIdentifier') as hsm_configuration_identifier,
                json_extract_path_text(detail.Properties, 'PreferredMaintenanceWindow') as preferred_maintenance_window,
                json_extract_path_text(detail.Properties, 'DeferMaintenanceStartTime') as defer_maintenance_start_time,
                json_extract_path_text(detail.Properties, 'ClusterType') as cluster_type,
                json_extract_path_text(detail.Properties, 'Classic') as classic,
                json_extract_path_text(detail.Properties, 'MasterPasswordSecretKmsKeyId') as master_password_secret_kms_key_id,
                json_extract_path_text(detail.Properties, 'DeferMaintenanceDuration') as defer_maintenance_duration,
                json_extract_path_text(detail.Properties, 'DBName') as db_name,
                json_extract_path_text(detail.Properties, 'SnapshotCopyRetentionPeriod') as snapshot_copy_retention_period
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Redshift::Cluster'
                AND detail.data__TypeName = 'AWS::Redshift::Cluster'
                AND listing.region = 'us-east-1'
    cluster_parameter_groups:
      name: cluster_parameter_groups
      id: aws.redshift.cluster_parameter_groups
      x-cfn-schema-name: ClusterParameterGroup
      x-cfn-type-name: AWS::Redshift::ClusterParameterGroup
      x-identifiers:
        - ParameterGroupName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ClusterParameterGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::ClusterParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::ClusterParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::ClusterParameterGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/cluster_parameter_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/cluster_parameter_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/cluster_parameter_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ParameterGroupName') as parameter_group_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ParameterGroupFamily') as parameter_group_family,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
              AND data__Identifier = '<ParameterGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ParameterGroupName') as parameter_group_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ParameterGroupFamily') as parameter_group_family,
                JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
                AND detail.data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ParameterGroupName') as parameter_group_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ParameterGroupFamily') as parameter_group_family,
                  json_extract_path_text(Properties, 'Parameters') as parameters,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
                  AND data__Identifier = '<ParameterGroupName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ParameterGroupName') as parameter_group_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ParameterGroupFamily') as parameter_group_family,
                    json_extract_path_text(detail.Properties, 'Parameters') as parameters,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
                    AND detail.data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
                    AND listing.region = 'us-east-1'
    cluster_parameter_groups_list_only:
      name: cluster_parameter_groups_list_only
      id: aws.redshift.cluster_parameter_groups_list_only
      x-cfn-schema-name: ClusterParameterGroup
      x-cfn-type-name: AWS::Redshift::ClusterParameterGroup
      x-identifiers:
        - ParameterGroupName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ParameterGroupName') as parameter_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ParameterGroupName') as parameter_group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
                AND region = 'us-east-1'
    cluster_parameter_group_tags:
      name: cluster_parameter_group_tags
      id: aws.redshift.cluster_parameter_group_tags
      x-cfn-schema-name: ClusterParameterGroup
      x-cfn-type-name: AWS::Redshift::ClusterParameterGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ParameterGroupName') as parameter_group_name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.ParameterGroupFamily') as parameter_group_family,
              JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
              AND detail.data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ParameterGroupName') as parameter_group_name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'ParameterGroupFamily') as parameter_group_family,
                json_extract_path_text(detail.Properties, 'Parameters') as parameters
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
                AND detail.data__TypeName = 'AWS::Redshift::ClusterParameterGroup'
                AND listing.region = 'us-east-1'
    cluster_subnet_groups:
      name: cluster_subnet_groups
      id: aws.redshift.cluster_subnet_groups
      x-cfn-schema-name: ClusterSubnetGroup
      x-cfn-type-name: AWS::Redshift::ClusterSubnetGroup
      x-identifiers:
        - ClusterSubnetGroupName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ClusterSubnetGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::ClusterSubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::ClusterSubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::ClusterSubnetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/cluster_subnet_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/cluster_subnet_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/cluster_subnet_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ClusterSubnetGroupName') as cluster_subnet_group_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
              AND data__Identifier = '<ClusterSubnetGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.ClusterSubnetGroupName') as cluster_subnet_group_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
                AND detail.data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'ClusterSubnetGroupName') as cluster_subnet_group_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
                  AND data__Identifier = '<ClusterSubnetGroupName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'ClusterSubnetGroupName') as cluster_subnet_group_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
                    AND detail.data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
                    AND listing.region = 'us-east-1'
    cluster_subnet_groups_list_only:
      name: cluster_subnet_groups_list_only
      id: aws.redshift.cluster_subnet_groups_list_only
      x-cfn-schema-name: ClusterSubnetGroup
      x-cfn-type-name: AWS::Redshift::ClusterSubnetGroup
      x-identifiers:
        - ClusterSubnetGroupName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClusterSubnetGroupName') as cluster_subnet_group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClusterSubnetGroupName') as cluster_subnet_group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
                AND region = 'us-east-1'
    cluster_subnet_group_tags:
      name: cluster_subnet_group_tags
      id: aws.redshift.cluster_subnet_group_tags
      x-cfn-schema-name: ClusterSubnetGroup
      x-cfn-type-name: AWS::Redshift::ClusterSubnetGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(detail.Properties, '$.ClusterSubnetGroupName') as cluster_subnet_group_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
              AND detail.data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(detail.Properties, 'ClusterSubnetGroupName') as cluster_subnet_group_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
                AND detail.data__TypeName = 'AWS::Redshift::ClusterSubnetGroup'
                AND listing.region = 'us-east-1'
    endpoint_accesses:
      name: endpoint_accesses
      id: aws.redshift.endpoint_accesses
      x-cfn-schema-name: EndpointAccess
      x-cfn-type-name: AWS::Redshift::EndpointAccess
      x-identifiers:
        - EndpointName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EndpointAccess&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::EndpointAccess"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::EndpointAccess"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::EndpointAccess"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/endpoint_accesses/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/endpoint_accesses/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/endpoint_accesses/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.EndpointStatus') as endpoint_status,
              JSON_EXTRACT(Properties, '$.VpcEndpoint') as vpc_endpoint,
              JSON_EXTRACT(Properties, '$.Address') as address,
              JSON_EXTRACT(Properties, '$.EndpointName') as endpoint_name,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
              JSON_EXTRACT(Properties, '$.ResourceOwner') as resource_owner,
              JSON_EXTRACT(Properties, '$.SubnetGroupName') as subnet_group_name,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.EndpointCreateTime') as endpoint_create_time,
              JSON_EXTRACT(Properties, '$.ClusterIdentifier') as cluster_identifier,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroups') as vpc_security_groups
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::EndpointAccess'
              AND data__Identifier = '<EndpointName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.EndpointStatus') as endpoint_status,
                JSON_EXTRACT(detail.Properties, '$.VpcEndpoint') as vpc_endpoint,
                JSON_EXTRACT(detail.Properties, '$.Address') as address,
                JSON_EXTRACT(detail.Properties, '$.EndpointName') as endpoint_name,
                JSON_EXTRACT(detail.Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.ResourceOwner') as resource_owner,
                JSON_EXTRACT(detail.Properties, '$.SubnetGroupName') as subnet_group_name,
                JSON_EXTRACT(detail.Properties, '$.Port') as port,
                JSON_EXTRACT(detail.Properties, '$.EndpointCreateTime') as endpoint_create_time,
                JSON_EXTRACT(detail.Properties, '$.ClusterIdentifier') as cluster_identifier,
                JSON_EXTRACT(detail.Properties, '$.VpcSecurityGroups') as vpc_security_groups
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Redshift::EndpointAccess'
                AND detail.data__TypeName = 'AWS::Redshift::EndpointAccess'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'EndpointStatus') as endpoint_status,
                  json_extract_path_text(Properties, 'VpcEndpoint') as vpc_endpoint,
                  json_extract_path_text(Properties, 'Address') as address,
                  json_extract_path_text(Properties, 'EndpointName') as endpoint_name,
                  json_extract_path_text(Properties, 'VpcSecurityGroupIds') as vpc_security_group_ids,
                  json_extract_path_text(Properties, 'ResourceOwner') as resource_owner,
                  json_extract_path_text(Properties, 'SubnetGroupName') as subnet_group_name,
                  json_extract_path_text(Properties, 'Port') as port,
                  json_extract_path_text(Properties, 'EndpointCreateTime') as endpoint_create_time,
                  json_extract_path_text(Properties, 'ClusterIdentifier') as cluster_identifier,
                  json_extract_path_text(Properties, 'VpcSecurityGroups') as vpc_security_groups
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::EndpointAccess'
                  AND data__Identifier = '<EndpointName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'EndpointStatus') as endpoint_status,
                    json_extract_path_text(detail.Properties, 'VpcEndpoint') as vpc_endpoint,
                    json_extract_path_text(detail.Properties, 'Address') as address,
                    json_extract_path_text(detail.Properties, 'EndpointName') as endpoint_name,
                    json_extract_path_text(detail.Properties, 'VpcSecurityGroupIds') as vpc_security_group_ids,
                    json_extract_path_text(detail.Properties, 'ResourceOwner') as resource_owner,
                    json_extract_path_text(detail.Properties, 'SubnetGroupName') as subnet_group_name,
                    json_extract_path_text(detail.Properties, 'Port') as port,
                    json_extract_path_text(detail.Properties, 'EndpointCreateTime') as endpoint_create_time,
                    json_extract_path_text(detail.Properties, 'ClusterIdentifier') as cluster_identifier,
                    json_extract_path_text(detail.Properties, 'VpcSecurityGroups') as vpc_security_groups
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Redshift::EndpointAccess'
                    AND detail.data__TypeName = 'AWS::Redshift::EndpointAccess'
                    AND listing.region = 'us-east-1'
    endpoint_accesses_list_only:
      name: endpoint_accesses_list_only
      id: aws.redshift.endpoint_accesses_list_only
      x-cfn-schema-name: EndpointAccess
      x-cfn-type-name: AWS::Redshift::EndpointAccess
      x-identifiers:
        - EndpointName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EndpointName') as endpoint_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::EndpointAccess'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EndpointName') as endpoint_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::EndpointAccess'
                AND region = 'us-east-1'
    endpoint_authorizations:
      name: endpoint_authorizations
      id: aws.redshift.endpoint_authorizations
      x-cfn-schema-name: EndpointAuthorization
      x-cfn-type-name: AWS::Redshift::EndpointAuthorization
      x-identifiers:
        - ClusterIdentifier
        - Account
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EndpointAuthorization&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::EndpointAuthorization"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::EndpointAuthorization"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::EndpointAuthorization"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/endpoint_authorizations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/endpoint_authorizations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/endpoint_authorizations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Grantee') as grantee,
              JSON_EXTRACT(Properties, '$.Account') as account,
              JSON_EXTRACT(Properties, '$.Grantor') as grantor,
              JSON_EXTRACT(Properties, '$.EndpointCount') as endpoint_count,
              JSON_EXTRACT(Properties, '$.AuthorizeTime') as authorize_time,
              JSON_EXTRACT(Properties, '$.AllowedVPCs') as allowed_vpcs,
              JSON_EXTRACT(Properties, '$.Force') as _force,
              JSON_EXTRACT(Properties, '$.AllowedAllVPCs') as allowed_all_vpcs,
              JSON_EXTRACT(Properties, '$.VpcIds') as vpc_ids,
              JSON_EXTRACT(Properties, '$.ClusterIdentifier') as cluster_identifier,
              JSON_EXTRACT(Properties, '$.ClusterStatus') as cluster_status
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::EndpointAuthorization'
              AND data__Identifier = '<ClusterIdentifier>|<Account>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Grantee') as grantee,
                JSON_EXTRACT(detail.Properties, '$.Account') as account,
                JSON_EXTRACT(detail.Properties, '$.Grantor') as grantor,
                JSON_EXTRACT(detail.Properties, '$.EndpointCount') as endpoint_count,
                JSON_EXTRACT(detail.Properties, '$.AuthorizeTime') as authorize_time,
                JSON_EXTRACT(detail.Properties, '$.AllowedVPCs') as allowed_vpcs,
                JSON_EXTRACT(detail.Properties, '$.Force') as _force,
                JSON_EXTRACT(detail.Properties, '$.AllowedAllVPCs') as allowed_all_vpcs,
                JSON_EXTRACT(detail.Properties, '$.VpcIds') as vpc_ids,
                JSON_EXTRACT(detail.Properties, '$.ClusterIdentifier') as cluster_identifier,
                JSON_EXTRACT(detail.Properties, '$.ClusterStatus') as cluster_status
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Redshift::EndpointAuthorization'
                AND detail.data__TypeName = 'AWS::Redshift::EndpointAuthorization'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Grantee') as grantee,
                  json_extract_path_text(Properties, 'Account') as account,
                  json_extract_path_text(Properties, 'Grantor') as grantor,
                  json_extract_path_text(Properties, 'EndpointCount') as endpoint_count,
                  json_extract_path_text(Properties, 'AuthorizeTime') as authorize_time,
                  json_extract_path_text(Properties, 'AllowedVPCs') as allowed_vpcs,
                  json_extract_path_text(Properties, 'Force') as _force,
                  json_extract_path_text(Properties, 'AllowedAllVPCs') as allowed_all_vpcs,
                  json_extract_path_text(Properties, 'VpcIds') as vpc_ids,
                  json_extract_path_text(Properties, 'ClusterIdentifier') as cluster_identifier,
                  json_extract_path_text(Properties, 'ClusterStatus') as cluster_status
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::EndpointAuthorization'
                  AND data__Identifier = '<ClusterIdentifier>|<Account>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Grantee') as grantee,
                    json_extract_path_text(detail.Properties, 'Account') as account,
                    json_extract_path_text(detail.Properties, 'Grantor') as grantor,
                    json_extract_path_text(detail.Properties, 'EndpointCount') as endpoint_count,
                    json_extract_path_text(detail.Properties, 'AuthorizeTime') as authorize_time,
                    json_extract_path_text(detail.Properties, 'AllowedVPCs') as allowed_vpcs,
                    json_extract_path_text(detail.Properties, 'Force') as _force,
                    json_extract_path_text(detail.Properties, 'AllowedAllVPCs') as allowed_all_vpcs,
                    json_extract_path_text(detail.Properties, 'VpcIds') as vpc_ids,
                    json_extract_path_text(detail.Properties, 'ClusterIdentifier') as cluster_identifier,
                    json_extract_path_text(detail.Properties, 'ClusterStatus') as cluster_status
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Redshift::EndpointAuthorization'
                    AND detail.data__TypeName = 'AWS::Redshift::EndpointAuthorization'
                    AND listing.region = 'us-east-1'
    endpoint_authorizations_list_only:
      name: endpoint_authorizations_list_only
      id: aws.redshift.endpoint_authorizations_list_only
      x-cfn-schema-name: EndpointAuthorization
      x-cfn-type-name: AWS::Redshift::EndpointAuthorization
      x-identifiers:
        - ClusterIdentifier
        - Account
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClusterIdentifier') as cluster_identifier,
              JSON_EXTRACT(Properties, '$.Account') as account
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::EndpointAuthorization'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClusterIdentifier') as cluster_identifier,
                json_extract_path_text(Properties, 'Account') as account
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::EndpointAuthorization'
                AND region = 'us-east-1'
    event_subscriptions:
      name: event_subscriptions
      id: aws.redshift.event_subscriptions
      x-cfn-schema-name: EventSubscription
      x-cfn-type-name: AWS::Redshift::EventSubscription
      x-identifiers:
        - SubscriptionName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EventSubscription&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::EventSubscription"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::EventSubscription"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::EventSubscription"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/event_subscriptions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/event_subscriptions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/event_subscriptions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.CustSubscriptionId') as cust_subscription_id,
              JSON_EXTRACT(Properties, '$.EventCategoriesList') as event_categories_list,
              JSON_EXTRACT(Properties, '$.SourceType') as source_type,
              JSON_EXTRACT(Properties, '$.EventCategories') as event_categories,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.Severity') as severity,
              JSON_EXTRACT(Properties, '$.SubscriptionName') as subscription_name,
              JSON_EXTRACT(Properties, '$.SourceIds') as source_ids,
              JSON_EXTRACT(Properties, '$.CustomerAwsId') as customer_aws_id,
              JSON_EXTRACT(Properties, '$.SourceIdsList') as source_ids_list,
              JSON_EXTRACT(Properties, '$.SnsTopicArn') as sns_topic_arn,
              JSON_EXTRACT(Properties, '$.SubscriptionCreationTime') as subscription_creation_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::EventSubscription'
              AND data__Identifier = '<SubscriptionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.CustSubscriptionId') as cust_subscription_id,
                JSON_EXTRACT(detail.Properties, '$.EventCategoriesList') as event_categories_list,
                JSON_EXTRACT(detail.Properties, '$.SourceType') as source_type,
                JSON_EXTRACT(detail.Properties, '$.EventCategories') as event_categories,
                JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
                JSON_EXTRACT(detail.Properties, '$.Severity') as severity,
                JSON_EXTRACT(detail.Properties, '$.SubscriptionName') as subscription_name,
                JSON_EXTRACT(detail.Properties, '$.SourceIds') as source_ids,
                JSON_EXTRACT(detail.Properties, '$.CustomerAwsId') as customer_aws_id,
                JSON_EXTRACT(detail.Properties, '$.SourceIdsList') as source_ids_list,
                JSON_EXTRACT(detail.Properties, '$.SnsTopicArn') as sns_topic_arn,
                JSON_EXTRACT(detail.Properties, '$.SubscriptionCreationTime') as subscription_creation_time,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Redshift::EventSubscription'
                AND detail.data__TypeName = 'AWS::Redshift::EventSubscription'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'CustSubscriptionId') as cust_subscription_id,
                  json_extract_path_text(Properties, 'EventCategoriesList') as event_categories_list,
                  json_extract_path_text(Properties, 'SourceType') as source_type,
                  json_extract_path_text(Properties, 'EventCategories') as event_categories,
                  json_extract_path_text(Properties, 'Enabled') as enabled,
                  json_extract_path_text(Properties, 'Severity') as severity,
                  json_extract_path_text(Properties, 'SubscriptionName') as subscription_name,
                  json_extract_path_text(Properties, 'SourceIds') as source_ids,
                  json_extract_path_text(Properties, 'CustomerAwsId') as customer_aws_id,
                  json_extract_path_text(Properties, 'SourceIdsList') as source_ids_list,
                  json_extract_path_text(Properties, 'SnsTopicArn') as sns_topic_arn,
                  json_extract_path_text(Properties, 'SubscriptionCreationTime') as subscription_creation_time,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::EventSubscription'
                  AND data__Identifier = '<SubscriptionName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'CustSubscriptionId') as cust_subscription_id,
                    json_extract_path_text(detail.Properties, 'EventCategoriesList') as event_categories_list,
                    json_extract_path_text(detail.Properties, 'SourceType') as source_type,
                    json_extract_path_text(detail.Properties, 'EventCategories') as event_categories,
                    json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                    json_extract_path_text(detail.Properties, 'Severity') as severity,
                    json_extract_path_text(detail.Properties, 'SubscriptionName') as subscription_name,
                    json_extract_path_text(detail.Properties, 'SourceIds') as source_ids,
                    json_extract_path_text(detail.Properties, 'CustomerAwsId') as customer_aws_id,
                    json_extract_path_text(detail.Properties, 'SourceIdsList') as source_ids_list,
                    json_extract_path_text(detail.Properties, 'SnsTopicArn') as sns_topic_arn,
                    json_extract_path_text(detail.Properties, 'SubscriptionCreationTime') as subscription_creation_time,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Redshift::EventSubscription'
                    AND detail.data__TypeName = 'AWS::Redshift::EventSubscription'
                    AND listing.region = 'us-east-1'
    event_subscriptions_list_only:
      name: event_subscriptions_list_only
      id: aws.redshift.event_subscriptions_list_only
      x-cfn-schema-name: EventSubscription
      x-cfn-type-name: AWS::Redshift::EventSubscription
      x-identifiers:
        - SubscriptionName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SubscriptionName') as subscription_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::EventSubscription'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SubscriptionName') as subscription_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::EventSubscription'
                AND region = 'us-east-1'
    event_subscription_tags:
      name: event_subscription_tags
      id: aws.redshift.event_subscription_tags
      x-cfn-schema-name: EventSubscription
      x-cfn-type-name: AWS::Redshift::EventSubscription
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.CustSubscriptionId') as cust_subscription_id,
              JSON_EXTRACT(detail.Properties, '$.EventCategoriesList') as event_categories_list,
              JSON_EXTRACT(detail.Properties, '$.SourceType') as source_type,
              JSON_EXTRACT(detail.Properties, '$.EventCategories') as event_categories,
              JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(detail.Properties, '$.Severity') as severity,
              JSON_EXTRACT(detail.Properties, '$.SubscriptionName') as subscription_name,
              JSON_EXTRACT(detail.Properties, '$.SourceIds') as source_ids,
              JSON_EXTRACT(detail.Properties, '$.CustomerAwsId') as customer_aws_id,
              JSON_EXTRACT(detail.Properties, '$.SourceIdsList') as source_ids_list,
              JSON_EXTRACT(detail.Properties, '$.SnsTopicArn') as sns_topic_arn,
              JSON_EXTRACT(detail.Properties, '$.SubscriptionCreationTime') as subscription_creation_time
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Redshift::EventSubscription'
              AND detail.data__TypeName = 'AWS::Redshift::EventSubscription'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'CustSubscriptionId') as cust_subscription_id,
                json_extract_path_text(detail.Properties, 'EventCategoriesList') as event_categories_list,
                json_extract_path_text(detail.Properties, 'SourceType') as source_type,
                json_extract_path_text(detail.Properties, 'EventCategories') as event_categories,
                json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                json_extract_path_text(detail.Properties, 'Severity') as severity,
                json_extract_path_text(detail.Properties, 'SubscriptionName') as subscription_name,
                json_extract_path_text(detail.Properties, 'SourceIds') as source_ids,
                json_extract_path_text(detail.Properties, 'CustomerAwsId') as customer_aws_id,
                json_extract_path_text(detail.Properties, 'SourceIdsList') as source_ids_list,
                json_extract_path_text(detail.Properties, 'SnsTopicArn') as sns_topic_arn,
                json_extract_path_text(detail.Properties, 'SubscriptionCreationTime') as subscription_creation_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Redshift::EventSubscription'
                AND detail.data__TypeName = 'AWS::Redshift::EventSubscription'
                AND listing.region = 'us-east-1'
    integrations:
      name: integrations
      id: aws.redshift.integrations
      x-cfn-schema-name: Integration
      x-cfn-type-name: AWS::Redshift::Integration
      x-identifiers:
        - IntegrationArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Integration&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::Integration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::Integration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::Integration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/integrations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/integrations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/integrations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IntegrationArn') as integration_arn,
              JSON_EXTRACT(Properties, '$.IntegrationName') as integration_name,
              JSON_EXTRACT(Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(Properties, '$.TargetArn') as target_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.KMSKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.AdditionalEncryptionContext') as additional_encryption_context
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::Integration'
              AND data__Identifier = '<IntegrationArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IntegrationArn') as integration_arn,
                JSON_EXTRACT(detail.Properties, '$.IntegrationName') as integration_name,
                JSON_EXTRACT(detail.Properties, '$.SourceArn') as source_arn,
                JSON_EXTRACT(detail.Properties, '$.TargetArn') as target_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
                JSON_EXTRACT(detail.Properties, '$.KMSKeyId') as kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.AdditionalEncryptionContext') as additional_encryption_context
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Redshift::Integration'
                AND detail.data__TypeName = 'AWS::Redshift::Integration'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IntegrationArn') as integration_arn,
                  json_extract_path_text(Properties, 'IntegrationName') as integration_name,
                  json_extract_path_text(Properties, 'SourceArn') as source_arn,
                  json_extract_path_text(Properties, 'TargetArn') as target_arn,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'CreateTime') as create_time,
                  json_extract_path_text(Properties, 'KMSKeyId') as kms_key_id,
                  json_extract_path_text(Properties, 'AdditionalEncryptionContext') as additional_encryption_context
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::Integration'
                  AND data__Identifier = '<IntegrationArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IntegrationArn') as integration_arn,
                    json_extract_path_text(detail.Properties, 'IntegrationName') as integration_name,
                    json_extract_path_text(detail.Properties, 'SourceArn') as source_arn,
                    json_extract_path_text(detail.Properties, 'TargetArn') as target_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                    json_extract_path_text(detail.Properties, 'KMSKeyId') as kms_key_id,
                    json_extract_path_text(detail.Properties, 'AdditionalEncryptionContext') as additional_encryption_context
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Redshift::Integration'
                    AND detail.data__TypeName = 'AWS::Redshift::Integration'
                    AND listing.region = 'us-east-1'
    integrations_list_only:
      name: integrations_list_only
      id: aws.redshift.integrations_list_only
      x-cfn-schema-name: Integration
      x-cfn-type-name: AWS::Redshift::Integration
      x-identifiers:
        - IntegrationArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IntegrationArn') as integration_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::Integration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IntegrationArn') as integration_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::Integration'
                AND region = 'us-east-1'
    integration_tags:
      name: integration_tags
      id: aws.redshift.integration_tags
      x-cfn-schema-name: Integration
      x-cfn-type-name: AWS::Redshift::Integration
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.IntegrationArn') as integration_arn,
              JSON_EXTRACT(detail.Properties, '$.IntegrationName') as integration_name,
              JSON_EXTRACT(detail.Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(detail.Properties, '$.TargetArn') as target_arn,
              JSON_EXTRACT(detail.Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(detail.Properties, '$.KMSKeyId') as kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.AdditionalEncryptionContext') as additional_encryption_context
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Redshift::Integration'
              AND detail.data__TypeName = 'AWS::Redshift::Integration'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'IntegrationArn') as integration_arn,
                json_extract_path_text(detail.Properties, 'IntegrationName') as integration_name,
                json_extract_path_text(detail.Properties, 'SourceArn') as source_arn,
                json_extract_path_text(detail.Properties, 'TargetArn') as target_arn,
                json_extract_path_text(detail.Properties, 'CreateTime') as create_time,
                json_extract_path_text(detail.Properties, 'KMSKeyId') as kms_key_id,
                json_extract_path_text(detail.Properties, 'AdditionalEncryptionContext') as additional_encryption_context
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Redshift::Integration'
                AND detail.data__TypeName = 'AWS::Redshift::Integration'
                AND listing.region = 'us-east-1'
    scheduled_actions:
      name: scheduled_actions
      id: aws.redshift.scheduled_actions
      x-cfn-schema-name: ScheduledAction
      x-cfn-type-name: AWS::Redshift::ScheduledAction
      x-identifiers:
        - ScheduledActionName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ScheduledAction&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::ScheduledAction"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::ScheduledAction"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Redshift::ScheduledAction"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/scheduled_actions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/scheduled_actions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/scheduled_actions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ScheduledActionDescription') as scheduled_action_description,
              JSON_EXTRACT(Properties, '$.ScheduledActionName') as scheduled_action_name,
              JSON_EXTRACT(Properties, '$.EndTime') as end_time,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Schedule') as schedule,
              JSON_EXTRACT(Properties, '$.IamRole') as iam_role,
              JSON_EXTRACT(Properties, '$.StartTime') as start_time,
              JSON_EXTRACT(Properties, '$.Enable') as enable,
              JSON_EXTRACT(Properties, '$.TargetAction') as target_action,
              JSON_EXTRACT(Properties, '$.NextInvocations') as next_invocations
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::ScheduledAction'
              AND data__Identifier = '<ScheduledActionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ScheduledActionDescription') as scheduled_action_description,
                JSON_EXTRACT(detail.Properties, '$.ScheduledActionName') as scheduled_action_name,
                JSON_EXTRACT(detail.Properties, '$.EndTime') as end_time,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Schedule') as schedule,
                JSON_EXTRACT(detail.Properties, '$.IamRole') as iam_role,
                JSON_EXTRACT(detail.Properties, '$.StartTime') as start_time,
                JSON_EXTRACT(detail.Properties, '$.Enable') as enable,
                JSON_EXTRACT(detail.Properties, '$.TargetAction') as target_action,
                JSON_EXTRACT(detail.Properties, '$.NextInvocations') as next_invocations
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Redshift::ScheduledAction'
                AND detail.data__TypeName = 'AWS::Redshift::ScheduledAction'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ScheduledActionDescription') as scheduled_action_description,
                  json_extract_path_text(Properties, 'ScheduledActionName') as scheduled_action_name,
                  json_extract_path_text(Properties, 'EndTime') as end_time,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Schedule') as schedule,
                  json_extract_path_text(Properties, 'IamRole') as iam_role,
                  json_extract_path_text(Properties, 'StartTime') as start_time,
                  json_extract_path_text(Properties, 'Enable') as enable,
                  json_extract_path_text(Properties, 'TargetAction') as target_action,
                  json_extract_path_text(Properties, 'NextInvocations') as next_invocations
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Redshift::ScheduledAction'
                  AND data__Identifier = '<ScheduledActionName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ScheduledActionDescription') as scheduled_action_description,
                    json_extract_path_text(detail.Properties, 'ScheduledActionName') as scheduled_action_name,
                    json_extract_path_text(detail.Properties, 'EndTime') as end_time,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Schedule') as schedule,
                    json_extract_path_text(detail.Properties, 'IamRole') as iam_role,
                    json_extract_path_text(detail.Properties, 'StartTime') as start_time,
                    json_extract_path_text(detail.Properties, 'Enable') as enable,
                    json_extract_path_text(detail.Properties, 'TargetAction') as target_action,
                    json_extract_path_text(detail.Properties, 'NextInvocations') as next_invocations
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Redshift::ScheduledAction'
                    AND detail.data__TypeName = 'AWS::Redshift::ScheduledAction'
                    AND listing.region = 'us-east-1'
    scheduled_actions_list_only:
      name: scheduled_actions_list_only
      id: aws.redshift.scheduled_actions_list_only
      x-cfn-schema-name: ScheduledAction
      x-cfn-type-name: AWS::Redshift::ScheduledAction
      x-identifiers:
        - ScheduledActionName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ScheduledActionName') as scheduled_action_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::ScheduledAction'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ScheduledActionName') as scheduled_action_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Redshift::ScheduledAction'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Cluster&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCluster
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateClusterRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ClusterParameterGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateClusterParameterGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateClusterParameterGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ClusterSubnetGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateClusterSubnetGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateClusterSubnetGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EndpointAccess&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEndpointAccess
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEndpointAccessRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EndpointAuthorization&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEndpointAuthorization
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEndpointAuthorizationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EventSubscription&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEventSubscription
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEventSubscriptionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Integration&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIntegration
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIntegrationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ScheduledAction&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateScheduledAction
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateScheduledActionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
