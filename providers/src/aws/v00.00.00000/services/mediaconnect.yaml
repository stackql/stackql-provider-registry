openapi: 3.0.0
info:
  title: MediaConnect
  version: 1.0.0
paths: {}
components:
  schemas:
    FailoverConfig:
      type: object
      description: The settings for source failover
      properties:
        State:
          type: string
          enum:
            - ENABLED
            - DISABLED
        RecoveryWindow:
          type: integer
          description: Search window time to look for dash-7 packets
        FailoverMode:
          type: string
          description: The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.
          enum:
            - MERGE
            - FAILOVER
        SourcePriority:
          type: object
          description: The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
          properties:
            PrimarySource:
              type: string
              description: The name of the source you choose as the primary source for this flow.
          required:
            - PrimarySource
          additionalProperties: false
      additionalProperties: false
    BridgeStateEnum:
      type: string
      enum:
        - CREATING
        - STANDBY
        - STARTING
        - DEPLOYING
        - ACTIVE
        - STOPPING
        - DELETING
        - DELETED
        - START_FAILED
        - START_PENDING
        - UPDATING
    FailoverConfigStateEnum:
      type: string
      enum:
        - ENABLED
        - DISABLED
    FailoverModeEnum:
      type: string
      enum:
        - FAILOVER
    SourcePriority:
      type: object
      description: The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
      properties:
        PrimarySource:
          description: The name of the source you choose as the primary source for this flow.
          type: string
      additionalProperties: false
    BridgeOutput:
      type: object
      properties:
        BridgeArn:
          description: The Amazon Resource Number (ARN) of the bridge.
          type: string
        NetworkOutput:
          description: The output of the bridge.
          $ref: '#/components/schemas/BridgeNetworkOutput'
        Name:
          type: string
          description: The network output name.
      required:
        - BridgeArn
        - Name
        - NetworkOutput
      x-stackql-resource-name: bridge_output
      description: Resource schema for AWS::MediaConnect::BridgeOutput
      x-type-name: AWS::MediaConnect::BridgeOutput
      x-stackql-primary-identifier:
        - BridgeArn
        - Name
      x-create-only-properties:
        - BridgeArn
        - Name
      x-required-properties:
        - BridgeArn
        - Name
        - NetworkOutput
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - mediaconnect:AddBridgeOutputs
          - mediaconnect:DescribeBridge
        read:
          - mediaconnect:DescribeBridge
        update:
          - mediaconnect:DescribeBridge
          - mediaconnect:UpdateBridgeOutput
        delete:
          - mediaconnect:RemoveBridgeOutput
    BridgeNetworkOutput:
      type: object
      description: The output of the bridge. A network output is delivered to your premises.
      properties:
        Protocol:
          type: string
          enum:
            - rtp-fec
            - rtp
            - udp
          description: The network output protocol.
        IpAddress:
          type: string
          description: The network output IP Address.
        Port:
          type: integer
          description: The network output port.
        NetworkName:
          type: string
          description: The network output's gateway network name.
        Ttl:
          type: integer
          description: The network output TTL.
      required:
        - Protocol
        - IpAddress
        - Port
        - NetworkName
        - Ttl
      additionalProperties: false
    BridgeSource:
      type: object
      properties:
        Name:
          type: string
          description: The name of the source.
        BridgeArn:
          description: The Amazon Resource Number (ARN) of the bridge.
          type: string
        FlowSource:
          $ref: '#/components/schemas/BridgeFlowSource'
        NetworkSource:
          $ref: '#/components/schemas/BridgeNetworkSource'
      required:
        - Name
        - BridgeArn
      x-stackql-resource-name: bridge_source
      description: Resource schema for AWS::MediaConnect::BridgeSource
      x-type-name: AWS::MediaConnect::BridgeSource
      x-stackql-primary-identifier:
        - BridgeArn
        - Name
      x-create-only-properties:
        - BridgeArn
        - Name
      x-required-properties:
        - Name
        - BridgeArn
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - mediaconnect:AddBridgeSources
          - mediaconnect:DescribeBridge
        read:
          - mediaconnect:DescribeBridge
        update:
          - mediaconnect:DescribeBridge
          - mediaconnect:UpdateBridgeSource
        delete:
          - mediaconnect:RemoveBridgeSource
    BridgeFlowSource:
      type: object
      description: The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
      properties:
        FlowArn:
          description: The ARN of the cloud flow used as a source of this bridge.
          type: string
        FlowVpcInterfaceAttachment:
          description: The name of the VPC interface attachment to use for this source.
          $ref: '#/components/schemas/VpcInterfaceAttachment'
      additionalProperties: false
      required:
        - FlowArn
    VpcInterfaceAttachment:
      type: object
      description: The settings for attaching a VPC interface to an resource.
      properties:
        VpcInterfaceName:
          type: string
          description: The name of the VPC interface to use for this resource.
      additionalProperties: false
    BridgeNetworkSource:
      type: object
      description: The source of the bridge. A network source originates at your premises.
      properties:
        Protocol:
          description: The network source protocol.
          $ref: '#/components/schemas/ProtocolEnum'
        MulticastIp:
          description: The network source multicast IP.
          type: string
        Port:
          description: The network source port.
          type: integer
        NetworkName:
          description: The network source's gateway network name.
          type: string
      required:
        - Protocol
        - MulticastIp
        - Port
        - NetworkName
      additionalProperties: false
    ProtocolEnum:
      type: string
      enum:
        - rtp-fec
        - rtp
        - udp
    IngressGatewayBridge:
      type: object
      properties:
        MaxBitrate:
          description: The maximum expected bitrate of the ingress bridge.
          type: integer
        MaxOutputs:
          description: The maximum number of outputs on the ingress bridge.
          type: integer
      additionalProperties: false
      required:
        - MaxBitrate
        - MaxOutputs
    EgressGatewayBridge:
      type: object
      properties:
        MaxBitrate:
          type: integer
          description: The maximum expected bitrate of the egress bridge.
      additionalProperties: false
      required:
        - MaxBitrate
    Bridge:
      type: object
      properties:
        Name:
          description: The name of the bridge.
          type: string
        BridgeArn:
          description: The Amazon Resource Number (ARN) of the bridge.
          type: string
        PlacementArn:
          description: The placement Amazon Resource Number (ARN) of the bridge.
          type: string
        BridgeState:
          $ref: '#/components/schemas/BridgeStateEnum'
        SourceFailoverConfig:
          $ref: '#/components/schemas/FailoverConfig'
        Outputs:
          description: The outputs on this bridge.
          type: array
          minItems: 0
          maxItems: 2
          items:
            $ref: '#/components/schemas/BridgeOutput'
          x-insertionOrder: true
        Sources:
          description: The sources on this bridge.
          type: array
          minItems: 0
          maxItems: 2
          items:
            $ref: '#/components/schemas/BridgeSource'
          x-insertionOrder: true
        IngressGatewayBridge:
          type: object
          $ref: '#/components/schemas/IngressGatewayBridge'
        EgressGatewayBridge:
          type: object
          $ref: '#/components/schemas/EgressGatewayBridge'
      required:
        - Name
        - PlacementArn
        - Sources
      x-stackql-resource-name: bridge
      description: Resource schema for AWS::MediaConnect::Bridge
      x-type-name: AWS::MediaConnect::Bridge
      x-stackql-primary-identifier:
        - BridgeArn
      x-read-only-properties:
        - BridgeArn
        - BridgeState
      x-required-properties:
        - Name
        - PlacementArn
        - Sources
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - mediaconnect:CreateBridge
          - mediaconnect:DescribeBridge
        read:
          - mediaconnect:DescribeBridge
        update:
          - mediaconnect:DescribeBridge
          - mediaconnect:UpdateBridge
        delete:
          - mediaconnect:DescribeBridge
          - mediaconnect:DeleteBridge
        list:
          - mediaconnect:ListBridges
    Source:
      description: The settings for the source of the flow.
      type: object
      properties:
        SourceArn:
          type: string
          description: The ARN of the source.
        Decryption:
          $ref: '#/components/schemas/Encryption'
          description: The type of decryption that is used on the content ingested from this source.
        Description:
          type: string
          description: A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
        EntitlementArn:
          type: string
          description: The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
        GatewayBridgeSource:
          $ref: '#/components/schemas/GatewayBridgeSource'
          description: The source configuration for cloud flows receiving a stream from a bridge.
        IngestIp:
          type: string
          description: The IP address that the flow will be listening on for incoming content.
        IngestPort:
          type: integer
          description: The port that the flow will be listening on for incoming content.
        MaxBitrate:
          type: integer
          description: The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
        MaxLatency:
          type: integer
          description: The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
          default: 2000
        MinLatency:
          type: integer
          description: The minimum latency in milliseconds.
          default: 2000
        Name:
          type: string
          description: The name of the source.
        Protocol:
          type: string
          enum:
            - zixi-push
            - rtp-fec
            - rtp
            - rist
            - fujitsu-qos
            - srt-listener
            - srt-caller
          description: The protocol that is used by the source.
        SenderIpAddress:
          type: string
          description: The IP address that the flow communicates with to initiate connection with the sender for fujitsu-qos protocol.
        SenderControlPort:
          type: integer
          description: The port that the flow uses to send outbound requests to initiate connection with the sender for fujitsu-qos protocol.
        StreamId:
          type: string
          description: The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        SourceIngestPort:
          type: string
          description: The port that the flow will be listening on for incoming content.(ReadOnly)
        SourceListenerAddress:
          type: string
          description: Source IP or domain name for SRT-caller protocol.
        SourceListenerPort:
          type: integer
          description: Source port for SRT-caller protocol.
        VpcInterfaceName:
          type: string
          description: The name of the VPC Interface this Source is configured with.
        WhitelistCidr:
          type: string
          description: The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
      additionalProperties: false
    Encryption:
      type: object
      description: Information about the encryption of the flow.
      properties:
        Algorithm:
          type: string
          enum:
            - aes128
            - aes192
            - aes256
          description: The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
        ConstantInitializationVector:
          type: string
          description: A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
        DeviceId:
          type: string
          description: The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
        KeyType:
          type: string
          enum:
            - speke
            - static-key
            - srt-password
          description: The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
          default: static-key
        Region:
          type: string
          description: The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
        ResourceId:
          type: string
          description: An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
        RoleArn:
          type: string
          description: The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
        SecretArn:
          type: string
          description: ' The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.'
        Url:
          type: string
          description: The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
      additionalProperties: false
      required:
        - RoleArn
    GatewayBridgeSource:
      type: object
      description: The source configuration for cloud flows receiving a stream from a bridge.
      properties:
        BridgeArn:
          type: string
          description: The ARN of the bridge feeding this flow.
        VpcInterfaceAttachment:
          $ref: '#/components/schemas/VpcInterfaceAttachment'
          description: The name of the VPC interface attachment to use for this bridge source.
      additionalProperties: false
      required:
        - BridgeArn
    Flow:
      type: object
      properties:
        FlowArn:
          description: The Amazon Resource Name (ARN), a unique identifier for any AWS resource, of the flow.
          type: string
        Name:
          description: The name of the flow.
          type: string
        AvailabilityZone:
          description: The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.
          type: string
        FlowAvailabilityZone:
          description: The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.(ReadOnly)
          type: string
        Source:
          description: The source of the flow.
          $ref: '#/components/schemas/Source'
        SourceFailoverConfig:
          description: The source failover config of the flow.
          $ref: '#/components/schemas/FailoverConfig'
      required:
        - Name
        - Source
      x-stackql-resource-name: flow
      description: Resource schema for AWS::MediaConnect::Flow
      x-type-name: AWS::MediaConnect::Flow
      x-stackql-primary-identifier:
        - FlowArn
      x-create-only-properties:
        - Name
        - AvailabilityZone
        - Source/Name
      x-read-only-properties:
        - FlowArn
        - FlowAvailabilityZone
        - Source/SourceArn
        - Source/IngestIp
        - Source/SourceIngestPort
      x-required-properties:
        - Name
        - Source
      x-required-permissions:
        create:
          - mediaconnect:CreateFlow
          - iam:PassRole
        read:
          - mediaconnect:DescribeFlow
        update:
          - mediaconnect:DescribeFlow
          - mediaconnect:UpdateFlow
          - mediaconnect:UpdateFlowSource
        delete:
          - mediaconnect:DescribeFlow
          - mediaconnect:DeleteFlow
        list:
          - mediaconnect:ListFlows
    FlowEntitlement:
      type: object
      properties:
        FlowArn:
          type: string
          description: The ARN of the flow.
        EntitlementArn:
          type: string
          description: The ARN of the entitlement.
        DataTransferSubscriberFeePercent:
          type: integer
          default: 0
          description: Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
        Description:
          type: string
          description: A description of the entitlement.
        Encryption:
          $ref: '#/components/schemas/Encryption'
          description: The type of encryption that will be used on the output that is associated with this entitlement.
        EntitlementStatus:
          type: string
          description: ' An indication of whether the entitlement is enabled.'
          enum:
            - ENABLED
            - DISABLED
        Name:
          type: string
          description: The name of the entitlement.
        Subscribers:
          type: array
          description: The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
          items:
            type: string
      required:
        - FlowArn
        - Name
        - Subscribers
        - Description
      x-stackql-resource-name: flow_entitlement
      description: Resource schema for AWS::MediaConnect::FlowEntitlement
      x-type-name: AWS::MediaConnect::FlowEntitlement
      x-stackql-primary-identifier:
        - EntitlementArn
      x-create-only-properties:
        - DataTransferSubscriberFeePercent
        - Name
      x-read-only-properties:
        - EntitlementArn
      x-required-properties:
        - FlowArn
        - Name
        - Subscribers
        - Description
      x-required-permissions:
        create:
          - iam:PassRole
          - mediaconnect:GrantFlowEntitlements
        read:
          - mediaconnect:DescribeFlow
        update:
          - mediaconnect:DescribeFlow
          - mediaconnect:UpdateFlowEntitlement
        delete:
          - mediaconnect:DescribeFlow
          - mediaconnect:RevokeFlowEntitlement
        list:
          - mediaconnect:DescribeFlow
    FlowOutput:
      type: object
      properties:
        FlowArn:
          description: The Amazon Resource Name (ARN), a unique identifier for any AWS resource, of the flow.
          type: string
        OutputArn:
          description: The ARN of the output.
          type: string
        CidrAllowList:
          type: array
          description: The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
          items:
            type: string
        Encryption:
          $ref: '#/components/schemas/Encryption'
          description: The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
        Description:
          type: string
          description: A description of the output.
        Destination:
          type: string
          description: The address where you want to send the output.
        MaxLatency:
          type: integer
          description: The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
        MinLatency:
          type: integer
          description: The minimum latency in milliseconds.
        Name:
          type: string
          description: The name of the output. This value must be unique within the current flow.
        Port:
          type: integer
          description: The port to use when content is distributed to this output.
        Protocol:
          type: string
          enum:
            - zixi-push
            - rtp-fec
            - rtp
            - zixi-pull
            - rist
            - fujitsu-qos
            - srt-listener
            - srt-caller
          description: The protocol that is used by the source or output.
        RemoteId:
          type: string
          description: The remote ID for the Zixi-pull stream.
        SmoothingLatency:
          type: integer
          description: The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
        StreamId:
          type: string
          description: The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        VpcInterfaceAttachment:
          $ref: '#/components/schemas/VpcInterfaceAttachment'
          description: The name of the VPC interface attachment to use for this output.
      required:
        - FlowArn
        - Protocol
      x-stackql-resource-name: flow_output
      description: Resource schema for AWS::MediaConnect::FlowOutput
      x-type-name: AWS::MediaConnect::FlowOutput
      x-stackql-primary-identifier:
        - OutputArn
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - OutputArn
      x-required-properties:
        - FlowArn
        - Protocol
      x-required-permissions:
        create:
          - iam:PassRole
          - mediaconnect:AddFlowOutputs
        read:
          - mediaconnect:DescribeFlow
        update:
          - mediaconnect:DescribeFlow
          - mediaconnect:UpdateFlowOutput
        delete:
          - mediaconnect:DescribeFlow
          - mediaconnect:RemoveFlowOutput
        list:
          - mediaconnect:DescribeFlow
    FlowSource:
      type: object
      properties:
        FlowArn:
          type: string
          description: The ARN of the flow.
        SourceArn:
          type: string
          description: The ARN of the source.
        Decryption:
          $ref: '#/components/schemas/Encryption'
          description: The type of encryption that is used on the content ingested from this source.
        Description:
          type: string
          description: A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
        EntitlementArn:
          type: string
          description: The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
        GatewayBridgeSource:
          $ref: '#/components/schemas/GatewayBridgeSource'
          description: The source configuration for cloud flows receiving a stream from a bridge.
        IngestIp:
          type: string
          description: The IP address that the flow will be listening on for incoming content.
        IngestPort:
          type: integer
          description: The port that the flow will be listening on for incoming content.
        MaxBitrate:
          type: integer
          description: The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
        MaxLatency:
          type: integer
          description: The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
          default: 2000
        MinLatency:
          type: integer
          description: The minimum latency in milliseconds.
          default: 2000
        Name:
          type: string
          description: The name of the source.
        Protocol:
          type: string
          enum:
            - zixi-push
            - rtp-fec
            - rtp
            - rist
            - srt-listener
            - srt-caller
          description: The protocol that is used by the source.
        SenderIpAddress:
          type: string
          description: The IP address that the flow communicates with to initiate connection with the sender for fujitsu-qos protocol.
        SenderControlPort:
          type: integer
          description: The port that the flow uses to send outbound requests to initiate connection with the sender for fujitsu-qos protocol.
        StreamId:
          type: string
          description: The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        SourceIngestPort:
          type: string
          description: The port that the flow will be listening on for incoming content.(ReadOnly)
        SourceListenerAddress:
          type: string
          description: Source IP or domain name for SRT-caller protocol.
        SourceListenerPort:
          type: integer
          description: Source port for SRT-caller protocol.
        VpcInterfaceName:
          type: string
          description: The name of the VPC Interface this Source is configured with.
        WhitelistCidr:
          type: string
          description: The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
      required:
        - Name
        - Description
      x-stackql-resource-name: flow_source
      description: Resource schema for AWS::MediaConnect::FlowSource
      x-type-name: AWS::MediaConnect::FlowSource
      x-stackql-primary-identifier:
        - SourceArn
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - IngestIp
        - SourceArn
        - SourceIngestPort
      x-required-properties:
        - Name
        - Description
      x-required-permissions:
        create:
          - mediaconnect:CreateFlow
          - mediaconnect:DescribeFlow
          - mediaconnect:AddFlowSources
          - iam:PassRole
        read:
          - mediaconnect:DescribeFlow
        update:
          - mediaconnect:DescribeFlow
          - mediaconnect:UpdateFlowSource
        delete:
          - mediaconnect:DescribeFlow
          - mediaconnect:RemoveFlowSource
        list:
          - mediaconnect:DescribeFlow
    FlowVpcInterface:
      type: object
      properties:
        FlowArn:
          type: string
          description: The Amazon Resource Name (ARN), a unique identifier for any AWS resource, of the flow.
        Name:
          type: string
          description: Immutable and has to be a unique against other VpcInterfaces in this Flow.
        RoleArn:
          type: string
          description: Role Arn MediaConnect can assumes to create ENIs in customer's account.
        SecurityGroupIds:
          type: array
          description: Security Group IDs to be used on ENI.
          items:
            type: string
        SubnetId:
          type: string
          description: Subnet must be in the AZ of the Flow
        NetworkInterfaceIds:
          type: array
          description: IDs of the network interfaces created in customer's account by MediaConnect.
          items:
            type: string
      required:
        - FlowArn
        - Name
        - RoleArn
        - SubnetId
        - SecurityGroupIds
      x-stackql-resource-name: flow_vpc_interface
      description: Resource schema for AWS::MediaConnect::FlowVpcInterface
      x-type-name: AWS::MediaConnect::FlowVpcInterface
      x-stackql-primary-identifier:
        - FlowArn
        - Name
      x-create-only-properties:
        - FlowArn
        - Name
      x-read-only-properties:
        - NetworkInterfaceIds
      x-required-properties:
        - FlowArn
        - Name
        - RoleArn
        - SubnetId
        - SecurityGroupIds
      x-required-permissions:
        create:
          - iam:PassRole
          - mediaconnect:DescribeFlow
          - mediaconnect:AddFlowVpcInterfaces
        read:
          - mediaconnect:DescribeFlow
        update:
          - mediaconnect:DescribeFlow
          - mediaconnect:AddFlowVpcInterfaces
          - mediaconnect:RemoveFlowVpcInterface
        delete:
          - mediaconnect:DescribeFlow
          - mediaconnect:RemoveFlowVpcInterface
        list:
          - mediaconnect:DescribeFlow
    GatewayNetwork:
      description: The network settings for a gateway.
      type: object
      properties:
        Name:
          type: string
          description: The name of the network. This name is used to reference the network and must be unique among networks in this gateway.
        CidrBlock:
          type: string
          description: A unique IP address range to use for this network. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
      additionalProperties: false
      required:
        - Name
        - CidrBlock
    Gateway:
      type: object
      properties:
        Name:
          description: The name of the gateway. This name can not be modified after the gateway is created.
          type: string
        GatewayArn:
          description: The Amazon Resource Name (ARN) of the gateway.
          type: string
        GatewayState:
          description: The current status of the gateway.
          type: string
          enum:
            - CREATING
            - ACTIVE
            - UPDATING
            - ERROR
            - DELETING
            - DELETED
        EgressCidrBlocks:
          description: The range of IP addresses that contribute content or initiate output requests for flows communicating with this gateway. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
          type: array
          items:
            type: string
          x-insertionOrder: true
        Networks:
          type: array
          description: The list of networks in the gateway.
          minItems: 1
          maxItems: 4
          items:
            $ref: '#/components/schemas/GatewayNetwork'
          x-insertionOrder: true
      required:
        - Name
        - EgressCidrBlocks
        - Networks
      x-stackql-resource-name: gateway
      description: Resource schema for AWS::MediaConnect::Gateway
      x-type-name: AWS::MediaConnect::Gateway
      x-stackql-primary-identifier:
        - GatewayArn
      x-create-only-properties:
        - Name
        - EgressCidrBlocks
        - Networks
        - Networks/*/Name
        - Networks/*/CidrBlock
      x-read-only-properties:
        - GatewayArn
        - GatewayState
      x-required-properties:
        - Name
        - EgressCidrBlocks
        - Networks
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - mediaconnect:CreateGateway
          - mediaconnect:DescribeGateway
        read:
          - mediaconnect:DescribeGateway
        delete:
          - iam:CreateServiceLinkedRole
          - mediaconnect:DescribeGateway
          - mediaconnect:DeleteGateway
        list:
          - mediaconnect:ListGateways
  x-stackQL-resources:
    bridge_output:
      name: bridge_output
      id: aws.mediaconnect.bridge_output
      x-cfn-schema-name: BridgeOutput
      x-type: get
      x-identifiers:
        - BridgeArn
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.BridgeArn') as bridge_arn,
              JSON_EXTRACT(Properties, '$.NetworkOutput') as network_output,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::BridgeOutput'
              AND data__Identifier = '<BridgeArn>|<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'BridgeArn') as bridge_arn,
                json_extract_path_text(Properties, 'NetworkOutput') as network_output,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::BridgeOutput'
                AND data__Identifier = '<BridgeArn>|<Name>'
                AND region = 'us-east-1'
    bridge_source:
      name: bridge_source
      id: aws.mediaconnect.bridge_source
      x-cfn-schema-name: BridgeSource
      x-type: get
      x-identifiers:
        - BridgeArn
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.BridgeArn') as bridge_arn,
              JSON_EXTRACT(Properties, '$.FlowSource') as flow_source,
              JSON_EXTRACT(Properties, '$.NetworkSource') as network_source
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::BridgeSource'
              AND data__Identifier = '<BridgeArn>|<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'BridgeArn') as bridge_arn,
                json_extract_path_text(Properties, 'FlowSource') as flow_source,
                json_extract_path_text(Properties, 'NetworkSource') as network_source
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::BridgeSource'
                AND data__Identifier = '<BridgeArn>|<Name>'
                AND region = 'us-east-1'
    bridges:
      name: bridges
      id: aws.mediaconnect.bridges
      x-cfn-schema-name: Bridge
      x-type: list
      x-identifiers:
        - BridgeArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BridgeArn') as bridge_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::Bridge'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'BridgeArn') as bridge_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::Bridge'
                AND region = 'us-east-1'
    bridge:
      name: bridge
      id: aws.mediaconnect.bridge
      x-cfn-schema-name: Bridge
      x-type: get
      x-identifiers:
        - BridgeArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.BridgeArn') as bridge_arn,
              JSON_EXTRACT(Properties, '$.PlacementArn') as placement_arn,
              JSON_EXTRACT(Properties, '$.BridgeState') as bridge_state,
              JSON_EXTRACT(Properties, '$.SourceFailoverConfig') as source_failover_config,
              JSON_EXTRACT(Properties, '$.Outputs') as outputs,
              JSON_EXTRACT(Properties, '$.Sources') as sources,
              JSON_EXTRACT(Properties, '$.IngressGatewayBridge') as ingress_gateway_bridge,
              JSON_EXTRACT(Properties, '$.EgressGatewayBridge') as egress_gateway_bridge
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::Bridge'
              AND data__Identifier = '<BridgeArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'BridgeArn') as bridge_arn,
                json_extract_path_text(Properties, 'PlacementArn') as placement_arn,
                json_extract_path_text(Properties, 'BridgeState') as bridge_state,
                json_extract_path_text(Properties, 'SourceFailoverConfig') as source_failover_config,
                json_extract_path_text(Properties, 'Outputs') as outputs,
                json_extract_path_text(Properties, 'Sources') as sources,
                json_extract_path_text(Properties, 'IngressGatewayBridge') as ingress_gateway_bridge,
                json_extract_path_text(Properties, 'EgressGatewayBridge') as egress_gateway_bridge
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::Bridge'
                AND data__Identifier = '<BridgeArn>'
                AND region = 'us-east-1'
    flows:
      name: flows
      id: aws.mediaconnect.flows
      x-cfn-schema-name: Flow
      x-type: list
      x-identifiers:
        - FlowArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FlowArn') as flow_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::Flow'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FlowArn') as flow_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::Flow'
                AND region = 'us-east-1'
    flow:
      name: flow
      id: aws.mediaconnect.flow
      x-cfn-schema-name: Flow
      x-type: get
      x-identifiers:
        - FlowArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FlowArn') as flow_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.FlowAvailabilityZone') as flow_availability_zone,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.SourceFailoverConfig') as source_failover_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::Flow'
              AND data__Identifier = '<FlowArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FlowArn') as flow_arn,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(Properties, 'FlowAvailabilityZone') as flow_availability_zone,
                json_extract_path_text(Properties, 'Source') as source,
                json_extract_path_text(Properties, 'SourceFailoverConfig') as source_failover_config
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::Flow'
                AND data__Identifier = '<FlowArn>'
                AND region = 'us-east-1'
    flow_entitlements:
      name: flow_entitlements
      id: aws.mediaconnect.flow_entitlements
      x-cfn-schema-name: FlowEntitlement
      x-type: list
      x-identifiers:
        - EntitlementArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EntitlementArn') as entitlement_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::FlowEntitlement'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EntitlementArn') as entitlement_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::FlowEntitlement'
                AND region = 'us-east-1'
    flow_entitlement:
      name: flow_entitlement
      id: aws.mediaconnect.flow_entitlement
      x-cfn-schema-name: FlowEntitlement
      x-type: get
      x-identifiers:
        - EntitlementArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FlowArn') as flow_arn,
              JSON_EXTRACT(Properties, '$.EntitlementArn') as entitlement_arn,
              JSON_EXTRACT(Properties, '$.DataTransferSubscriberFeePercent') as data_transfer_subscriber_fee_percent,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Encryption') as encryption,
              JSON_EXTRACT(Properties, '$.EntitlementStatus') as entitlement_status,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Subscribers') as subscribers
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::FlowEntitlement'
              AND data__Identifier = '<EntitlementArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FlowArn') as flow_arn,
                json_extract_path_text(Properties, 'EntitlementArn') as entitlement_arn,
                json_extract_path_text(Properties, 'DataTransferSubscriberFeePercent') as data_transfer_subscriber_fee_percent,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Encryption') as encryption,
                json_extract_path_text(Properties, 'EntitlementStatus') as entitlement_status,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Subscribers') as subscribers
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::FlowEntitlement'
                AND data__Identifier = '<EntitlementArn>'
                AND region = 'us-east-1'
    flow_outputs:
      name: flow_outputs
      id: aws.mediaconnect.flow_outputs
      x-cfn-schema-name: FlowOutput
      x-type: list
      x-identifiers:
        - OutputArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OutputArn') as output_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::FlowOutput'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'OutputArn') as output_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::FlowOutput'
                AND region = 'us-east-1'
    flow_output:
      name: flow_output
      id: aws.mediaconnect.flow_output
      x-cfn-schema-name: FlowOutput
      x-type: get
      x-identifiers:
        - OutputArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FlowArn') as flow_arn,
              JSON_EXTRACT(Properties, '$.OutputArn') as output_arn,
              JSON_EXTRACT(Properties, '$.CidrAllowList') as cidr_allow_list,
              JSON_EXTRACT(Properties, '$.Encryption') as encryption,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Destination') as destination,
              JSON_EXTRACT(Properties, '$.MaxLatency') as max_latency,
              JSON_EXTRACT(Properties, '$.MinLatency') as min_latency,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.RemoteId') as remote_id,
              JSON_EXTRACT(Properties, '$.SmoothingLatency') as smoothing_latency,
              JSON_EXTRACT(Properties, '$.StreamId') as stream_id,
              JSON_EXTRACT(Properties, '$.VpcInterfaceAttachment') as vpc_interface_attachment
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::FlowOutput'
              AND data__Identifier = '<OutputArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FlowArn') as flow_arn,
                json_extract_path_text(Properties, 'OutputArn') as output_arn,
                json_extract_path_text(Properties, 'CidrAllowList') as cidr_allow_list,
                json_extract_path_text(Properties, 'Encryption') as encryption,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Destination') as destination,
                json_extract_path_text(Properties, 'MaxLatency') as max_latency,
                json_extract_path_text(Properties, 'MinLatency') as min_latency,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Port') as port,
                json_extract_path_text(Properties, 'Protocol') as protocol,
                json_extract_path_text(Properties, 'RemoteId') as remote_id,
                json_extract_path_text(Properties, 'SmoothingLatency') as smoothing_latency,
                json_extract_path_text(Properties, 'StreamId') as stream_id,
                json_extract_path_text(Properties, 'VpcInterfaceAttachment') as vpc_interface_attachment
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::FlowOutput'
                AND data__Identifier = '<OutputArn>'
                AND region = 'us-east-1'
    flow_sources:
      name: flow_sources
      id: aws.mediaconnect.flow_sources
      x-cfn-schema-name: FlowSource
      x-type: list
      x-identifiers:
        - SourceArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SourceArn') as source_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::FlowSource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SourceArn') as source_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::FlowSource'
                AND region = 'us-east-1'
    flow_source:
      name: flow_source
      id: aws.mediaconnect.flow_source
      x-cfn-schema-name: FlowSource
      x-type: get
      x-identifiers:
        - SourceArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FlowArn') as flow_arn,
              JSON_EXTRACT(Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(Properties, '$.Decryption') as decryption,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EntitlementArn') as entitlement_arn,
              JSON_EXTRACT(Properties, '$.GatewayBridgeSource') as gateway_bridge_source,
              JSON_EXTRACT(Properties, '$.IngestIp') as ingest_ip,
              JSON_EXTRACT(Properties, '$.IngestPort') as ingest_port,
              JSON_EXTRACT(Properties, '$.MaxBitrate') as max_bitrate,
              JSON_EXTRACT(Properties, '$.MaxLatency') as max_latency,
              JSON_EXTRACT(Properties, '$.MinLatency') as min_latency,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.SenderIpAddress') as sender_ip_address,
              JSON_EXTRACT(Properties, '$.SenderControlPort') as sender_control_port,
              JSON_EXTRACT(Properties, '$.StreamId') as stream_id,
              JSON_EXTRACT(Properties, '$.SourceIngestPort') as source_ingest_port,
              JSON_EXTRACT(Properties, '$.SourceListenerAddress') as source_listener_address,
              JSON_EXTRACT(Properties, '$.SourceListenerPort') as source_listener_port,
              JSON_EXTRACT(Properties, '$.VpcInterfaceName') as vpc_interface_name,
              JSON_EXTRACT(Properties, '$.WhitelistCidr') as whitelist_cidr
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::FlowSource'
              AND data__Identifier = '<SourceArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FlowArn') as flow_arn,
                json_extract_path_text(Properties, 'SourceArn') as source_arn,
                json_extract_path_text(Properties, 'Decryption') as decryption,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'EntitlementArn') as entitlement_arn,
                json_extract_path_text(Properties, 'GatewayBridgeSource') as gateway_bridge_source,
                json_extract_path_text(Properties, 'IngestIp') as ingest_ip,
                json_extract_path_text(Properties, 'IngestPort') as ingest_port,
                json_extract_path_text(Properties, 'MaxBitrate') as max_bitrate,
                json_extract_path_text(Properties, 'MaxLatency') as max_latency,
                json_extract_path_text(Properties, 'MinLatency') as min_latency,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Protocol') as protocol,
                json_extract_path_text(Properties, 'SenderIpAddress') as sender_ip_address,
                json_extract_path_text(Properties, 'SenderControlPort') as sender_control_port,
                json_extract_path_text(Properties, 'StreamId') as stream_id,
                json_extract_path_text(Properties, 'SourceIngestPort') as source_ingest_port,
                json_extract_path_text(Properties, 'SourceListenerAddress') as source_listener_address,
                json_extract_path_text(Properties, 'SourceListenerPort') as source_listener_port,
                json_extract_path_text(Properties, 'VpcInterfaceName') as vpc_interface_name,
                json_extract_path_text(Properties, 'WhitelistCidr') as whitelist_cidr
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::FlowSource'
                AND data__Identifier = '<SourceArn>'
                AND region = 'us-east-1'
    flow_vpc_interfaces:
      name: flow_vpc_interfaces
      id: aws.mediaconnect.flow_vpc_interfaces
      x-cfn-schema-name: FlowVpcInterface
      x-type: list
      x-identifiers:
        - FlowArn
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FlowArn') as flow_arn,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::FlowVpcInterface'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FlowArn') as flow_arn,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::FlowVpcInterface'
                AND region = 'us-east-1'
    flow_vpc_interface:
      name: flow_vpc_interface
      id: aws.mediaconnect.flow_vpc_interface
      x-cfn-schema-name: FlowVpcInterface
      x-type: get
      x-identifiers:
        - FlowArn
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FlowArn') as flow_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceIds') as network_interface_ids
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::FlowVpcInterface'
              AND data__Identifier = '<FlowArn>|<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FlowArn') as flow_arn,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(Properties, 'NetworkInterfaceIds') as network_interface_ids
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::FlowVpcInterface'
                AND data__Identifier = '<FlowArn>|<Name>'
                AND region = 'us-east-1'
    gateways:
      name: gateways
      id: aws.mediaconnect.gateways
      x-cfn-schema-name: Gateway
      x-type: list
      x-identifiers:
        - GatewayArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GatewayArn') as gateway_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::Gateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GatewayArn') as gateway_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaConnect::Gateway'
                AND region = 'us-east-1'
    gateway:
      name: gateway
      id: aws.mediaconnect.gateway
      x-cfn-schema-name: Gateway
      x-type: get
      x-identifiers:
        - GatewayArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.GatewayArn') as gateway_arn,
              JSON_EXTRACT(Properties, '$.GatewayState') as gateway_state,
              JSON_EXTRACT(Properties, '$.EgressCidrBlocks') as egress_cidr_blocks,
              JSON_EXTRACT(Properties, '$.Networks') as networks
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::Gateway'
              AND data__Identifier = '<GatewayArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'GatewayArn') as gateway_arn,
                json_extract_path_text(Properties, 'GatewayState') as gateway_state,
                json_extract_path_text(Properties, 'EgressCidrBlocks') as egress_cidr_blocks,
                json_extract_path_text(Properties, 'Networks') as networks
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaConnect::Gateway'
                AND data__Identifier = '<GatewayArn>'
                AND region = 'us-east-1'
