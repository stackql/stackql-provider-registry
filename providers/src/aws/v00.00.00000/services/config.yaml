openapi: 3.0.0
info:
  title: Config
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 0
          maxLength: 256
      additionalProperties: false
      required:
        - Value
        - Key
    AggregationAuthorization:
      type: object
      properties:
        AuthorizedAccountId:
          description: The 12-digit account ID of the account authorized to aggregate data.
          type: string
          pattern: ^\d{12}$
        AuthorizedAwsRegion:
          description: The region authorized to collect aggregated data.
          type: string
          minLength: 1
          maxLength: 64
        AggregationAuthorizationArn:
          description: The ARN of the AggregationAuthorization.
          type: string
        Tags:
          description: The tags for the AggregationAuthorization.
          type: array
          maxItems: 50
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      x-stackql-resource-name: aggregation_authorization
      x-stackql-primaryIdentifier:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
    Scope:
      type: object
      additionalProperties: false
      properties:
        TagKey:
          type: string
        ComplianceResourceTypes:
          type: array
          uniqueItems: true
          items:
            type: string
        TagValue:
          type: string
        ComplianceResourceId:
          type: string
    CustomPolicyDetails:
      type: object
      additionalProperties: false
      properties:
        EnableDebugLogDelivery:
          type: boolean
        PolicyText:
          type: string
        PolicyRuntime:
          type: string
    SourceDetail:
      type: object
      additionalProperties: false
      properties:
        EventSource:
          type: string
        MaximumExecutionFrequency:
          type: string
        MessageType:
          type: string
      required:
        - EventSource
        - MessageType
    Source:
      type: object
      additionalProperties: false
      properties:
        CustomPolicyDetails:
          $ref: '#/components/schemas/CustomPolicyDetails'
        SourceIdentifier:
          type: string
        Owner:
          type: string
        SourceDetails:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SourceDetail'
      required:
        - Owner
    ConfigRule:
      type: object
      properties:
        ConfigRuleId:
          type: string
        Description:
          type: string
        Scope:
          $ref: '#/components/schemas/Scope'
        ComplianceType:
          type: string
        ConfigRuleName:
          type: string
        Arn:
          type: string
        MaximumExecutionFrequency:
          type: string
        Source:
          $ref: '#/components/schemas/Source'
        InputParameters:
          type: object
      required:
        - Source
      x-stackql-resource-name: config_rule
      x-stackql-primaryIdentifier:
        - ConfigRuleId
    AccountAggregationSource:
      type: object
      additionalProperties: false
      properties:
        AllAwsRegions:
          type: boolean
        AwsRegions:
          type: array
          uniqueItems: false
          items:
            type: string
        AccountIds:
          type: array
          uniqueItems: false
          items:
            type: string
      required:
        - AccountIds
    OrganizationAggregationSource:
      type: object
      additionalProperties: false
      properties:
        AllAwsRegions:
          type: boolean
        AwsRegions:
          type: array
          uniqueItems: false
          items:
            type: string
        RoleArn:
          type: string
      required:
        - RoleArn
    ConfigurationAggregator:
      type: object
      properties:
        AccountAggregationSources:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/AccountAggregationSource'
        ConfigurationAggregatorName:
          description: The name of the aggregator.
          type: string
          pattern: '[\w\-]+'
          minLength: 1
          maxLength: 256
        ConfigurationAggregatorArn:
          description: The Amazon Resource Name (ARN) of the aggregator.
          type: string
        OrganizationAggregationSource:
          $ref: '#/components/schemas/OrganizationAggregationSource'
        Tags:
          description: The tags for the configuration aggregator.
          type: array
          maxItems: 50
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: configuration_aggregator
      x-stackql-primaryIdentifier:
        - ConfigurationAggregatorName
    RecordingGroup:
      type: object
      additionalProperties: false
      properties:
        IncludeGlobalResourceTypes:
          type: boolean
        ResourceTypes:
          type: array
          uniqueItems: true
          items:
            type: string
        AllSupported:
          type: boolean
    ConfigurationRecorder:
      type: object
      properties:
        Id:
          type: string
        RecordingGroup:
          $ref: '#/components/schemas/RecordingGroup'
        RoleARN:
          type: string
        Name:
          type: string
      required:
        - RoleARN
      x-stackql-resource-name: configuration_recorder
      x-stackql-primaryIdentifier:
        - Id
    ParameterName:
      type: string
      minLength: 0
      maxLength: 255
    ParameterValue:
      type: string
      minLength: 0
      maxLength: 4096
    ConformancePackInputParameter:
      description: Input parameters in the form of key-value pairs for the conformance pack.
      type: object
      properties:
        ParameterName:
          $ref: '#/components/schemas/ParameterName'
        ParameterValue:
          $ref: '#/components/schemas/ParameterValue'
      required:
        - ParameterName
        - ParameterValue
    ConformancePack:
      type: object
      properties:
        ConformancePackName:
          description: Name of the conformance pack which will be assigned as the unique identifier.
          type: string
          pattern: '[a-zA-Z][-a-zA-Z0-9]*'
          minLength: 1
          maxLength: 256
        DeliveryS3Bucket:
          description: AWS Config stores intermediate files while processing conformance pack template.
          type: string
          minLength: 0
          maxLength: 63
        DeliveryS3KeyPrefix:
          description: The prefix for delivery S3 bucket.
          type: string
          minLength: 0
          maxLength: 1024
        TemplateBody:
          description: A string containing full conformance pack template body. You can only specify one of the template body or template S3Uri fields.
          type: string
          minLength: 1
          maxLength: 51200
        TemplateS3Uri:
          description: Location of file containing the template body which points to the conformance pack template that is located in an Amazon S3 bucket. You can only specify one of the template body or template S3Uri fields.
          type: string
          pattern: s3://.*
          minLength: 1
          maxLength: 1024
        TemplateSSMDocumentDetails:
          description: The TemplateSSMDocumentDetails object contains the name of the SSM document and the version of the SSM document.
          type: object
          additionalProperties: false
          properties:
            DocumentName:
              type: string
              minLength: 3
              maxLength: 128
            DocumentVersion:
              type: string
              minLength: 1
              maxLength: 128
        ConformancePackInputParameters:
          description: A list of ConformancePackInputParameter objects.
          type: array
          items:
            $ref: '#/components/schemas/ConformancePackInputParameter'
          minItems: 0
          maxItems: 60
      required:
        - ConformancePackName
      x-stackql-resource-name: conformance_pack
      x-stackql-primaryIdentifier:
        - ConformancePackName
    ConfigSnapshotDeliveryProperties:
      type: object
      additionalProperties: false
      properties:
        DeliveryFrequency:
          type: string
    DeliveryChannel:
      type: object
      properties:
        S3KeyPrefix:
          type: string
        ConfigSnapshotDeliveryProperties:
          $ref: '#/components/schemas/ConfigSnapshotDeliveryProperties'
        S3BucketName:
          type: string
        SnsTopicARN:
          type: string
        Id:
          type: string
        S3KmsKeyArn:
          type: string
        Name:
          type: string
      required:
        - S3BucketName
      x-stackql-resource-name: delivery_channel
      x-stackql-primaryIdentifier:
        - Id
    OrganizationManagedRuleMetadata:
      type: object
      additionalProperties: false
      properties:
        TagKeyScope:
          type: string
        TagValueScope:
          type: string
        Description:
          type: string
        ResourceIdScope:
          type: string
        RuleIdentifier:
          type: string
        ResourceTypesScope:
          type: array
          uniqueItems: false
          items:
            type: string
        MaximumExecutionFrequency:
          type: string
        InputParameters:
          type: string
      required:
        - RuleIdentifier
    OrganizationCustomRuleMetadata:
      type: object
      additionalProperties: false
      properties:
        TagKeyScope:
          type: string
        TagValueScope:
          type: string
        Description:
          type: string
        ResourceIdScope:
          type: string
        LambdaFunctionArn:
          type: string
        OrganizationConfigRuleTriggerTypes:
          type: array
          uniqueItems: false
          items:
            type: string
        ResourceTypesScope:
          type: array
          uniqueItems: false
          items:
            type: string
        MaximumExecutionFrequency:
          type: string
        InputParameters:
          type: string
      required:
        - LambdaFunctionArn
        - OrganizationConfigRuleTriggerTypes
    OrganizationCustomPolicyRuleMetadata:
      type: object
      additionalProperties: false
      properties:
        TagKeyScope:
          type: string
        TagValueScope:
          type: string
        Runtime:
          type: string
        PolicyText:
          type: string
        Description:
          type: string
        ResourceIdScope:
          type: string
        OrganizationConfigRuleTriggerTypes:
          type: array
          uniqueItems: false
          items:
            type: string
        DebugLogDeliveryAccounts:
          type: array
          uniqueItems: false
          items:
            type: string
        ResourceTypesScope:
          type: array
          uniqueItems: false
          items:
            type: string
        MaximumExecutionFrequency:
          type: string
        InputParameters:
          type: string
      required:
        - Runtime
        - PolicyText
    OrganizationConfigRule:
      type: object
      properties:
        OrganizationCustomRuleMetadata:
          $ref: '#/components/schemas/OrganizationCustomRuleMetadata'
        OrganizationManagedRuleMetadata:
          $ref: '#/components/schemas/OrganizationManagedRuleMetadata'
        ExcludedAccounts:
          type: array
          uniqueItems: false
          items:
            type: string
        OrganizationConfigRuleName:
          type: string
        Id:
          type: string
        OrganizationCustomPolicyRuleMetadata:
          $ref: '#/components/schemas/OrganizationCustomPolicyRuleMetadata'
      required:
        - OrganizationConfigRuleName
      x-stackql-resource-name: organization_config_rule
      x-stackql-primaryIdentifier:
        - Id
    AccountId:
      type: string
    OrganizationConformancePack:
      type: object
      properties:
        OrganizationConformancePackName:
          description: The name of the organization conformance pack.
          type: string
          pattern: '[a-zA-Z][-a-zA-Z0-9]*'
          minLength: 1
          maxLength: 128
        TemplateS3Uri:
          description: Location of file containing the template body.
          type: string
          pattern: s3://.*
          minLength: 1
          maxLength: 1024
        TemplateBody:
          description: A string containing full conformance pack template body.
          type: string
          minLength: 1
          maxLength: 51200
        DeliveryS3Bucket:
          description: AWS Config stores intermediate files while processing conformance pack template.
          type: string
          minLength: 0
          maxLength: 63
        DeliveryS3KeyPrefix:
          description: The prefix for the delivery S3 bucket.
          type: string
          minLength: 0
          maxLength: 1024
        ConformancePackInputParameters:
          description: A list of ConformancePackInputParameter objects.
          type: array
          items:
            $ref: '#/components/schemas/ConformancePackInputParameter'
          minItems: 0
          maxItems: 60
        ExcludedAccounts:
          description: A list of AWS accounts to be excluded from an organization conformance pack while deploying a conformance pack.
          type: array
          items:
            $ref: '#/components/schemas/AccountId'
          minItems: 0
          maxItems: 1000
      required:
        - OrganizationConformancePackName
      x-stackql-resource-name: organization_conformance_pack
      x-stackql-primaryIdentifier:
        - OrganizationConformancePackName
    ExecutionControls:
      type: object
      additionalProperties: false
      properties:
        SsmControls:
          $ref: '#/components/schemas/SsmControls'
    SsmControls:
      type: object
      additionalProperties: false
      properties:
        ErrorPercentage:
          type: integer
        ConcurrentExecutionRatePercentage:
          type: integer
    RemediationConfiguration:
      type: object
      properties:
        TargetVersion:
          type: string
        ExecutionControls:
          $ref: '#/components/schemas/ExecutionControls'
        Parameters:
          type: object
        TargetType:
          type: string
        ConfigRuleName:
          type: string
        ResourceType:
          type: string
        RetryAttemptSeconds:
          type: integer
        MaximumAutomaticAttempts:
          type: integer
        Id:
          type: string
        TargetId:
          type: string
        Automatic:
          type: boolean
      required:
        - TargetType
        - ConfigRuleName
        - TargetId
      x-stackql-resource-name: remediation_configuration
      x-stackql-primaryIdentifier:
        - Id
    StoredQuery:
      type: object
      properties:
        QueryArn:
          type: string
          minLength: 1
          maxLength: 500
        QueryId:
          type: string
          minLength: 1
          maxLength: 36
          pattern: ^\S+$
        QueryName:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-zA-Z0-9-_]+$
        QueryDescription:
          type: string
          minLength: 0
          maxLength: 256
          pattern: '[\s\S]*'
        QueryExpression:
          type: string
          minLength: 1
          maxLength: 4096
          pattern: '[\s\S]*'
        Tags:
          description: The tags for the stored query.
          type: array
          maxItems: 50
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - QueryName
        - QueryExpression
      x-stackql-resource-name: stored_query
      x-stackql-primaryIdentifier:
        - QueryName
  x-stackQL-resources:
    aggregation_authorizations:
      name: aggregation_authorizations
      id: aws.config.aggregation_authorizations
      x-cfn-schema-name: AggregationAuthorization
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AuthorizedAccountId') as authorized_account_id,
              JSON_EXTRACT(Properties, '$.AuthorizedAwsRegion') as authorized_aws_region
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::AggregationAuthorization'
    aggregation_authorization:
      name: aggregation_authorization
      id: aws.config.aggregation_authorization
      x-cfn-schema-name: AggregationAuthorization
      x-type: get
      x-identifiers:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AuthorizedAccountId') as authorized_account_id,
              JSON_EXTRACT(Properties, '$.AuthorizedAwsRegion') as authorized_aws_region,
              JSON_EXTRACT(Properties, '$.AggregationAuthorizationArn') as aggregation_authorization_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::AggregationAuthorization'
    config_rules:
      name: config_rules
      id: aws.config.config_rules
      x-cfn-schema-name: ConfigRule
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConfigRuleId') as config_rule_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConfigRule'
    config_rule:
      name: config_rule
      id: aws.config.config_rule
      x-cfn-schema-name: ConfigRule
      x-type: get
      x-identifiers:
        - ConfigRuleId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConfigRuleId') as config_rule_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Scope.TagKey') as scope_tag_key,
              JSON_EXTRACT(Properties, '$.Scope.ComplianceResourceTypes') as scope_compliance_resource_types,
              JSON_EXTRACT(Properties, '$.Scope.TagValue') as scope_tag_value,
              JSON_EXTRACT(Properties, '$.Scope.ComplianceResourceId') as scope_compliance_resource_id,
              JSON_EXTRACT(Properties, '$.ComplianceType') as compliance_type,
              JSON_EXTRACT(Properties, '$.ConfigRuleName') as config_rule_name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.MaximumExecutionFrequency') as maximum_execution_frequency,
              JSON_EXTRACT(Properties, '$.Source.CustomPolicyDetails') as source_custom_policy_details,
              JSON_EXTRACT(Properties, '$.Source.SourceIdentifier') as source_source_identifier,
              JSON_EXTRACT(Properties, '$.Source.Owner') as source_owner,
              JSON_EXTRACT(Properties, '$.Source.SourceDetails') as source_source_details,
              JSON_EXTRACT(Properties, '$.InputParameters') as input_parameters
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConfigRule'
    configuration_aggregators:
      name: configuration_aggregators
      id: aws.config.configuration_aggregators
      x-cfn-schema-name: ConfigurationAggregator
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConfigurationAggregatorName') as configuration_aggregator_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConfigurationAggregator'
    configuration_aggregator:
      name: configuration_aggregator
      id: aws.config.configuration_aggregator
      x-cfn-schema-name: ConfigurationAggregator
      x-type: get
      x-identifiers:
        - ConfigurationAggregatorName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccountAggregationSources') as account_aggregation_sources,
              JSON_EXTRACT(Properties, '$.ConfigurationAggregatorName') as configuration_aggregator_name,
              JSON_EXTRACT(Properties, '$.ConfigurationAggregatorArn') as configuration_aggregator_arn,
              JSON_EXTRACT(Properties, '$.OrganizationAggregationSource.AllAwsRegions') as organization_aggregation_source_all_aws_regions,
              JSON_EXTRACT(Properties, '$.OrganizationAggregationSource.AwsRegions') as organization_aggregation_source_aws_regions,
              JSON_EXTRACT(Properties, '$.OrganizationAggregationSource.RoleArn') as organization_aggregation_source_role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConfigurationAggregator'
    configuration_recorders:
      name: configuration_recorders
      id: aws.config.configuration_recorders
      x-cfn-schema-name: ConfigurationRecorder
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConfigurationRecorder'
    configuration_recorder:
      name: configuration_recorder
      id: aws.config.configuration_recorder
      x-cfn-schema-name: ConfigurationRecorder
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RecordingGroup.IncludeGlobalResourceTypes') as recording_group_include_global_resource_types,
              JSON_EXTRACT(Properties, '$.RecordingGroup.ResourceTypes') as recording_group_resource_types,
              JSON_EXTRACT(Properties, '$.RecordingGroup.AllSupported') as recording_group_all_supported,
              JSON_EXTRACT(Properties, '$.RoleARN') as role_ar_n,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConfigurationRecorder'
    conformance_packs:
      name: conformance_packs
      id: aws.config.conformance_packs
      x-cfn-schema-name: ConformancePack
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConformancePackName') as conformance_pack_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConformancePack'
    conformance_pack:
      name: conformance_pack
      id: aws.config.conformance_pack
      x-cfn-schema-name: ConformancePack
      x-type: get
      x-identifiers:
        - ConformancePackName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConformancePackName') as conformance_pack_name,
              JSON_EXTRACT(Properties, '$.DeliveryS3Bucket') as delivery_s3_bucket,
              JSON_EXTRACT(Properties, '$.DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
              JSON_EXTRACT(Properties, '$.TemplateBody') as template_body,
              JSON_EXTRACT(Properties, '$.TemplateS3Uri') as template_s3_uri,
              JSON_EXTRACT(Properties, '$.TemplateSSMDocumentDetails') as template_ss_mdocument_details,
              JSON_EXTRACT(Properties, '$.ConformancePackInputParameters') as conformance_pack_input_parameters
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConformancePack'
    delivery_channels:
      name: delivery_channels
      id: aws.config.delivery_channels
      x-cfn-schema-name: DeliveryChannel
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::DeliveryChannel'
    delivery_channel:
      name: delivery_channel
      id: aws.config.delivery_channel
      x-cfn-schema-name: DeliveryChannel
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.S3KeyPrefix') as s3_key_prefix,
              JSON_EXTRACT(Properties, '$.ConfigSnapshotDeliveryProperties.DeliveryFrequency') as config_snapshot_delivery_properties_delivery_frequency,
              JSON_EXTRACT(Properties, '$.S3BucketName') as s3_bucket_name,
              JSON_EXTRACT(Properties, '$.SnsTopicARN') as sns_topic_ar_n,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.S3KmsKeyArn') as s3_kms_key_arn,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::DeliveryChannel'
    organization_config_rules:
      name: organization_config_rules
      id: aws.config.organization_config_rules
      x-cfn-schema-name: OrganizationConfigRule
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::OrganizationConfigRule'
    organization_config_rule:
      name: organization_config_rule
      id: aws.config.organization_config_rule
      x-cfn-schema-name: OrganizationConfigRule
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OrganizationCustomRuleMetadata.TagKeyScope') as organization_custom_rule_metadata_tag_key_scope,
              JSON_EXTRACT(Properties, '$.OrganizationCustomRuleMetadata.TagValueScope') as organization_custom_rule_metadata_tag_value_scope,
              JSON_EXTRACT(Properties, '$.OrganizationCustomRuleMetadata.Description') as organization_custom_rule_metadata_description,
              JSON_EXTRACT(Properties, '$.OrganizationCustomRuleMetadata.ResourceIdScope') as organization_custom_rule_metadata_resource_id_scope,
              JSON_EXTRACT(Properties, '$.OrganizationCustomRuleMetadata.LambdaFunctionArn') as organization_custom_rule_metadata_lambda_function_arn,
              JSON_EXTRACT(Properties, '$.OrganizationCustomRuleMetadata.OrganizationConfigRuleTriggerTypes') as organization_custom_rule_metadata_organization_config_rule_trigger_types,
              JSON_EXTRACT(Properties, '$.OrganizationCustomRuleMetadata.ResourceTypesScope') as organization_custom_rule_metadata_resource_types_scope,
              JSON_EXTRACT(Properties, '$.OrganizationCustomRuleMetadata.MaximumExecutionFrequency') as organization_custom_rule_metadata_maximum_execution_frequency,
              JSON_EXTRACT(Properties, '$.OrganizationCustomRuleMetadata.InputParameters') as organization_custom_rule_metadata_input_parameters,
              JSON_EXTRACT(Properties, '$.OrganizationManagedRuleMetadata.TagKeyScope') as organization_managed_rule_metadata_tag_key_scope,
              JSON_EXTRACT(Properties, '$.OrganizationManagedRuleMetadata.TagValueScope') as organization_managed_rule_metadata_tag_value_scope,
              JSON_EXTRACT(Properties, '$.OrganizationManagedRuleMetadata.Description') as organization_managed_rule_metadata_description,
              JSON_EXTRACT(Properties, '$.OrganizationManagedRuleMetadata.ResourceIdScope') as organization_managed_rule_metadata_resource_id_scope,
              JSON_EXTRACT(Properties, '$.OrganizationManagedRuleMetadata.RuleIdentifier') as organization_managed_rule_metadata_rule_identifier,
              JSON_EXTRACT(Properties, '$.OrganizationManagedRuleMetadata.ResourceTypesScope') as organization_managed_rule_metadata_resource_types_scope,
              JSON_EXTRACT(Properties, '$.OrganizationManagedRuleMetadata.MaximumExecutionFrequency') as organization_managed_rule_metadata_maximum_execution_frequency,
              JSON_EXTRACT(Properties, '$.OrganizationManagedRuleMetadata.InputParameters') as organization_managed_rule_metadata_input_parameters,
              JSON_EXTRACT(Properties, '$.ExcludedAccounts') as excluded_accounts,
              JSON_EXTRACT(Properties, '$.OrganizationConfigRuleName') as organization_config_rule_name,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata.TagKeyScope') as organization_custom_policy_rule_metadata_tag_key_scope,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata.TagValueScope') as organization_custom_policy_rule_metadata_tag_value_scope,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata.Runtime') as organization_custom_policy_rule_metadata_runtime,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata.PolicyText') as organization_custom_policy_rule_metadata_policy_text,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata.Description') as organization_custom_policy_rule_metadata_description,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata.ResourceIdScope') as organization_custom_policy_rule_metadata_resource_id_scope,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata.OrganizationConfigRuleTriggerTypes') as organization_custom_policy_rule_metadata_organization_config_rule_trigger_types,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata.DebugLogDeliveryAccounts') as organization_custom_policy_rule_metadata_debug_log_delivery_accounts,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata.ResourceTypesScope') as organization_custom_policy_rule_metadata_resource_types_scope,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata.MaximumExecutionFrequency') as organization_custom_policy_rule_metadata_maximum_execution_frequency,
              JSON_EXTRACT(Properties, '$.OrganizationCustomPolicyRuleMetadata.InputParameters') as organization_custom_policy_rule_metadata_input_parameters
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::OrganizationConfigRule'
    organization_conformance_packs:
      name: organization_conformance_packs
      id: aws.config.organization_conformance_packs
      x-cfn-schema-name: OrganizationConformancePack
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OrganizationConformancePackName') as organization_conformance_pack_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::OrganizationConformancePack'
    organization_conformance_pack:
      name: organization_conformance_pack
      id: aws.config.organization_conformance_pack
      x-cfn-schema-name: OrganizationConformancePack
      x-type: get
      x-identifiers:
        - OrganizationConformancePackName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OrganizationConformancePackName') as organization_conformance_pack_name,
              JSON_EXTRACT(Properties, '$.TemplateS3Uri') as template_s3_uri,
              JSON_EXTRACT(Properties, '$.TemplateBody') as template_body,
              JSON_EXTRACT(Properties, '$.DeliveryS3Bucket') as delivery_s3_bucket,
              JSON_EXTRACT(Properties, '$.DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
              JSON_EXTRACT(Properties, '$.ConformancePackInputParameters') as conformance_pack_input_parameters,
              JSON_EXTRACT(Properties, '$.ExcludedAccounts') as excluded_accounts
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::OrganizationConformancePack'
    remediation_configurations:
      name: remediation_configurations
      id: aws.config.remediation_configurations
      x-cfn-schema-name: RemediationConfiguration
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::RemediationConfiguration'
    remediation_configuration:
      name: remediation_configuration
      id: aws.config.remediation_configuration
      x-cfn-schema-name: RemediationConfiguration
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TargetVersion') as target_version,
              JSON_EXTRACT(Properties, '$.ExecutionControls.SsmControls') as execution_controls_ssm_controls,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.TargetType') as target_type,
              JSON_EXTRACT(Properties, '$.ConfigRuleName') as config_rule_name,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.RetryAttemptSeconds') as retry_attempt_seconds,
              JSON_EXTRACT(Properties, '$.MaximumAutomaticAttempts') as maximum_automatic_attempts,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.TargetId') as target_id,
              JSON_EXTRACT(Properties, '$.Automatic') as automatic
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::RemediationConfiguration'
    stored_queries:
      name: stored_queries
      id: aws.config.stored_queries
      x-cfn-schema-name: StoredQuery
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.QueryName') as query_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::StoredQuery'
    stored_query:
      name: stored_query
      id: aws.config.stored_query
      x-cfn-schema-name: StoredQuery
      x-type: get
      x-identifiers:
        - QueryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.QueryArn') as query_arn,
              JSON_EXTRACT(Properties, '$.QueryId') as query_id,
              JSON_EXTRACT(Properties, '$.QueryName') as query_name,
              JSON_EXTRACT(Properties, '$.QueryDescription') as query_description,
              JSON_EXTRACT(Properties, '$.QueryExpression') as query_expression,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::StoredQuery'
