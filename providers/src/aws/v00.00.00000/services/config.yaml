openapi: 3.0.0
info:
  title: Config
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 0
          maxLength: 256
      additionalProperties: false
      required:
        - Value
        - Key
    AggregationAuthorization:
      type: object
      properties:
        AuthorizedAccountId:
          description: The 12-digit account ID of the account authorized to aggregate data.
          type: string
          pattern: ^\d{12}$
        AuthorizedAwsRegion:
          description: The region authorized to collect aggregated data.
          type: string
          minLength: 1
          maxLength: 64
        AggregationAuthorizationArn:
          description: The ARN of the AggregationAuthorization.
          type: string
        Tags:
          description: The tags for the AggregationAuthorization.
          type: array
          maxItems: 50
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      x-stackql-resource-name: aggregation_authorization
      description: Resource Type definition for AWS::Config::AggregationAuthorization
      x-type-name: AWS::Config::AggregationAuthorization
      x-stackql-primary-identifier:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      x-create-only-properties:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      x-read-only-properties:
        - AggregationAuthorizationArn
      x-required-properties:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - config:TagResource
          - config:UntagResource
          - config:ListTagsForResource
      x-required-permissions:
        create:
          - config:DescribeAggregationAuthorizations
          - config:PutAggregationAuthorization
          - config:TagResource
        update:
          - config:DescribeAggregationAuthorizations
          - config:TagResource
          - config:UntagResource
          - config:ListTagsForResource
        read:
          - config:DescribeAggregationAuthorizations
          - config:ListTagsForResource
        delete:
          - config:DescribeAggregationAuthorizations
          - config:DeleteAggregationAuthorization
          - config:UntagResource
        list:
          - config:DescribeAggregationAuthorizations
    Scope:
      type: object
      description: Defines which resources trigger an evaluation for an CC rule. The scope can include one or more resource types, a combination of a tag key and value, or a combination of one resource type and one resource ID. Specify a scope to constrain which resources trigger an evaluation for a rule. Otherwise, evaluations for the rule are triggered when any resource in your recording group changes in configuration.
      additionalProperties: false
      properties:
        TagKey:
          type: string
          description: The tag key that is applied to only those AWS resources that you want to trigger an evaluation for the rule.
        ComplianceResourceTypes:
          type: array
          description: The resource types of only those AWS resources that you want to trigger an evaluation for the rule. You can only specify one type if you also specify a resource ID for ``ComplianceResourceId``.
          uniqueItems: true
          items:
            type: string
        TagValue:
          type: string
          description: The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule. If you specify a value for ``TagValue``, you must also specify a value for ``TagKey``.
        ComplianceResourceId:
          type: string
          description: The ID of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for ``ComplianceResourceTypes``.
    CustomPolicyDetails:
      type: object
      description: Provides the CustomPolicyDetails, the rule owner (```` for managed rules, ``CUSTOM_POLICY`` for Custom Policy rules, and ``CUSTOM_LAMBDA`` for Custom Lambda rules), the rule identifier, and the events that cause the evaluation of your AWS resources.
      additionalProperties: false
      properties:
        EnableDebugLogDelivery:
          type: boolean
          description: The boolean expression for enabling debug logging for your CC Custom Policy rule. The default value is ``false``.
        PolicyText:
          type: string
          description: The policy definition containing the logic for your CC Custom Policy rule.
        PolicyRuntime:
          type: string
          description: The runtime system for your CC Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by CC Custom Policy rules. For more information about Guard, see the [Guard GitHub Repository](https://docs.aws.amazon.com/https://github.com/aws-cloudformation/cloudformation-guard).
    SourceDetail:
      type: object
      description: Provides the source and the message types that trigger CC to evaluate your AWS resources against a rule. It also provides the frequency with which you want CC to run evaluations for the rule if the trigger type is periodic. You can specify the parameter values for ``SourceDetail`` only for custom rules.
      additionalProperties: false
      properties:
        EventSource:
          type: string
          description: The source of the event, such as an AWS service, that triggers CC to evaluate your AWS resources.
        MaximumExecutionFrequency:
          type: string
          description: |-
            The frequency at which you want CC to run evaluations for a custom rule with a periodic trigger. If you specify a value for ``MaximumExecutionFrequency``, then ``MessageType`` must use the ``ScheduledNotification`` value.
              By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid value for the ``MaximumExecutionFrequency`` parameter.
             Based on the valid value you choose, CC runs evaluations once for each valid value. For example, if you choose ``Three_Hours``, CC runs evaluations once every three hours. In this case, ``Three_Hours`` is the frequency of this rule.
        MessageType:
          type: string
          description: |-
            The type of notification that triggers CC to run an evaluation for a rule. You can specify the following notification types:
              +   ``ConfigurationItemChangeNotification`` - Triggers an evaluation when CC delivers a configuration item as a result of a resource change.
              +   ``OversizedConfigurationItemChangeNotification`` - Triggers an evaluation when CC delivers an oversized configuration item. CC may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.
              +   ``ScheduledNotification`` - Triggers a periodic evaluation at the frequency specified for ``MaximumExecutionFrequency``.
              +   ``ConfigurationSnapshotDeliveryCompleted`` - Triggers a periodic evaluation when CC delivers a configuration snapshot.
              
             If you want your custom rule to be triggered by configuration changes, specify two SourceDetail objects, one for ``ConfigurationItemChangeNotification`` and one for ``OversizedConfigurationItemChangeNotification``.
      required:
        - EventSource
        - MessageType
    Source:
      type: object
      description: Provides the CustomPolicyDetails, the rule owner (```` for managed rules, ``CUSTOM_POLICY`` for Custom Policy rules, and ``CUSTOM_LAMBDA`` for Custom Lambda rules), the rule identifier, and the events that cause the evaluation of your AWS resources.
      additionalProperties: false
      properties:
        CustomPolicyDetails:
          description: Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to ``CUSTOM_POLICY``.
          $ref: '#/components/schemas/CustomPolicyDetails'
        SourceIdentifier:
          type: string
          description: |-
            For CC Managed rules, a predefined identifier from a list. For example, ``IAM_PASSWORD_POLICY`` is a managed rule. To reference a managed rule, see [List of Managed Rules](https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html).
             For CC Custom Lambda rules, the identifier is the Amazon Resource Name (ARN) of the rule's LAMlong function, such as ``arn:aws:lambda:us-east-2:123456789012:function:custom_rule_name``.
             For CC Custom Policy rules, this field will be ignored.
        Owner:
          type: string
          description: |-
            Indicates whether AWS or the customer owns and manages the CC rule.
              CC Managed Rules are predefined rules owned by AWS. For more information, see [Managed Rules](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html) in the *developer guide*.
              CC Custom Rules are rules that you can develop either with Guard (``CUSTOM_POLICY``) or LAMlong (``CUSTOM_LAMBDA``). For more information, see [Custom Rules](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html) in the *developer guide*.
        SourceDetails:
          type: array
          description: |-
            Provides the source and the message types that cause CC to evaluate your AWS resources against a rule. It also provides the frequency with which you want CC to run evaluations for the rule if the trigger type is periodic.
             If the owner is set to ``CUSTOM_POLICY``, the only acceptable values for the CC rule trigger message type are ``ConfigurationItemChangeNotification`` and ``OversizedConfigurationItemChangeNotification``.
          uniqueItems: true
          items:
            description: Source and message type that can trigger the rule
            $ref: '#/components/schemas/SourceDetail'
      required:
        - Owner
    EvaluationModeConfiguration:
      type: object
      description: The configuration object for CC rule evaluation mode. The supported valid values are Detective or Proactive.
      additionalProperties: false
      properties:
        Mode:
          type: string
          description: The mode of an evaluation. The valid values are Detective or Proactive.
    ConfigRule:
      type: object
      properties:
        ConfigRuleId:
          type: string
          description: ''
        Description:
          type: string
          description: The description that you provide for the CC rule.
        Scope:
          description: |-
            Defines which resources can trigger an evaluation for the rule. The scope can include one or more resource types, a combination of one resource type and one resource ID, or a combination of a tag key and value. Specify a scope to constrain the resources that can trigger an evaluation for the rule. If you do not specify a scope, evaluations are triggered when any resource in the recording group changes.
              The scope can be empty.
          $ref: '#/components/schemas/Scope'
        ConfigRuleName:
          type: string
          description: A name for the CC rule. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the rule name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
        Arn:
          type: string
          description: ''
        Compliance:
          type: object
          description: Indicates whether an AWS resource or CC rule is compliant and provides the number of contributors that affect the compliance.
          additionalProperties: false
          properties:
            Type:
              type: string
              description: Compliance type determined by the Config rule
        MaximumExecutionFrequency:
          type: string
          description: |-
            The maximum frequency with which CC runs evaluations for a rule. You can specify a value for ``MaximumExecutionFrequency`` when:
              +  You are using an AWS managed rule that is triggered at a periodic frequency.
              +  Your custom rule is triggered when CC delivers the configuration snapshot. For more information, see [ConfigSnapshotDeliveryProperties](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html).
              
              By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid value for the ``MaximumExecutionFrequency`` parameter.
        Source:
          description: Provides the rule owner (```` for managed rules, ``CUSTOM_POLICY`` for Custom Policy rules, and ``CUSTOM_LAMBDA`` for Custom Lambda rules), the rule identifier, and the notifications that cause the function to evaluate your AWS resources.
          $ref: '#/components/schemas/Source'
        InputParameters:
          type: object
          description: A string, in JSON format, that is passed to the CC rule Lambda function.
        EvaluationModes:
          type: array
          description: The modes the CC rule can be evaluated in. The valid values are distinct objects. By default, the value is Detective evaluation mode only.
          uniqueItems: false
          items:
            description: Mode of evaluation of AWS Config rule
            $ref: '#/components/schemas/EvaluationModeConfiguration'
      required:
        - Source
      x-stackql-resource-name: config_rule
      description: |-
        You must first create and start the CC configuration recorder in order to create CC managed rules with CFNlong. For more information, see [Managing the Configuration Recorder](https://docs.aws.amazon.com/config/latest/developerguide/stop-start-recorder.html).
         Adds or updates an CC rule to evaluate if your AWS resources comply with your desired configurations. For information on how many CC rules you can have per account, see [Service Limits](https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html) in the *Developer Guide*.
         There are two types of rules: *Managed Rules* and *Custom Rules*. You can use the ``ConfigRule`` resource to create both CC Managed Rules and CC Custom Rules.
         CC Managed Rules are predefined, customizable rules created by CC. For a list of managed rules, see [List of Managed Rules](https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html). If you are adding an CC managed rule, you must specify the rule's identifier for the ``SourceIdentifier`` key.
         CC Custom Rules are rules that you create from scratch. There are two ways to create CC custom rules: with Lambda functions ([Developer Guide](https://docs.aws.amazon.com/config/latest/developerguide/gettingstarted-concepts.html#gettingstarted-concepts-function)) and with CFNGUARDshort ([Guard GitHub Repository](https://docs.aws.amazon.com/https://github.com/aws-cloudformation/cloudformation-guard)), a policy-as-code language. CC custom rules created with LAMlong are called *Custom Lambda Rules* and CC custom rules created with CFNGUARDshort are called *Custom Policy Rules*.
         If you are adding a new CC Custom LAM rule, you first need to create an LAMlong function that the rule invokes to evaluate your resources. When you use the ``ConfigRule`` resource to add a Custom LAM rule to CC, you must specify the Amazon Resource Name (ARN) that LAMlong assigns to the function. You specify the ARN in the ``SourceIdentifier`` key. This key is part of the ``Source`` object, which is part of the ``ConfigRule`` object. 
         For any new CC rule that you add, specify the ``ConfigRuleName`` in the ``ConfigRule`` object. Do not specify the ``ConfigRuleArn`` or the ``ConfigRuleId``. These values are generated by CC for new rules.
         If you are updating a rule that you added previously, you can specify the rule by ``ConfigRuleName``, ``ConfigRuleId``, or ``ConfigRuleArn`` in the ``ConfigRule`` data type that you use in this request.
         For more information about developing and using CC rules, see [Evaluating Resources with Rules](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html) in the *Developer Guide*.
      x-type-name: AWS::Config::ConfigRule
      x-stackql-primary-identifier:
        - ConfigRuleName
      x-create-only-properties:
        - ConfigRuleName
      x-write-only-properties:
        - Source/CustomPolicyDetails/PolicyText
      x-read-only-properties:
        - ConfigRuleId
        - Compliance/Type
        - Arn
      x-required-properties:
        - Source
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - config:PutConfigRule
          - config:DescribeConfigRules
        read:
          - config:DescribeConfigRules
          - config:DescribeComplianceByConfigRule
        delete:
          - config:DeleteConfigRule
          - config:DescribeConfigRules
        list:
          - config:DescribeConfigRules
        update:
          - config:PutConfigRule
          - config:DescribeConfigRules
    AccountAggregationSource:
      type: object
      additionalProperties: false
      properties:
        AllAwsRegions:
          type: boolean
        AwsRegions:
          type: array
          uniqueItems: false
          items:
            type: string
        AccountIds:
          type: array
          uniqueItems: false
          items:
            type: string
      required:
        - AccountIds
    OrganizationAggregationSource:
      type: object
      additionalProperties: false
      properties:
        AllAwsRegions:
          type: boolean
        AwsRegions:
          type: array
          uniqueItems: false
          items:
            type: string
        RoleArn:
          type: string
      required:
        - RoleArn
    ConfigurationAggregator:
      type: object
      properties:
        AccountAggregationSources:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/AccountAggregationSource'
        ConfigurationAggregatorName:
          description: The name of the aggregator.
          type: string
          pattern: '[\w\-]+'
          minLength: 1
          maxLength: 256
        ConfigurationAggregatorArn:
          description: The Amazon Resource Name (ARN) of the aggregator.
          type: string
        OrganizationAggregationSource:
          $ref: '#/components/schemas/OrganizationAggregationSource'
        Tags:
          description: The tags for the configuration aggregator.
          type: array
          maxItems: 50
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: configuration_aggregator
      description: Resource Type definition for AWS::Config::ConfigurationAggregator
      x-type-name: AWS::Config::ConfigurationAggregator
      x-stackql-primary-identifier:
        - ConfigurationAggregatorName
      x-create-only-properties:
        - ConfigurationAggregatorName
      x-read-only-properties:
        - ConfigurationAggregatorArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - config:TagResource
          - config:UntagResource
          - config:ListTagsForResource
      x-required-permissions:
        create:
          - config:PutConfigurationAggregator
          - config:DescribeConfigurationAggregators
          - config:TagResource
          - iam:PassRole
          - organizations:EnableAWSServiceAccess
          - organizations:ListDelegatedAdministrators
        read:
          - config:DescribeConfigurationAggregators
          - config:ListTagsForResource
        update:
          - config:PutConfigurationAggregator
          - config:DescribeConfigurationAggregators
          - config:TagResource
          - config:UntagResource
          - config:ListTagsForResource
          - iam:PassRole
          - organizations:EnableAWSServiceAccess
          - organizations:ListDelegatedAdministrators
        delete:
          - config:DeleteConfigurationAggregator
          - config:UntagResource
        list:
          - config:DescribeConfigurationAggregators
    ParameterName:
      type: string
      minLength: 0
      maxLength: 255
    ParameterValue:
      type: string
      minLength: 0
      maxLength: 4096
    ConformancePackInputParameter:
      description: Input parameters in the form of key-value pairs for the conformance pack.
      type: object
      properties:
        ParameterName:
          $ref: '#/components/schemas/ParameterName'
        ParameterValue:
          $ref: '#/components/schemas/ParameterValue'
      required:
        - ParameterName
        - ParameterValue
    ConformancePack:
      type: object
      properties:
        ConformancePackName:
          description: Name of the conformance pack which will be assigned as the unique identifier.
          type: string
          pattern: '[a-zA-Z][-a-zA-Z0-9]*'
          minLength: 1
          maxLength: 256
        DeliveryS3Bucket:
          description: AWS Config stores intermediate files while processing conformance pack template.
          type: string
          minLength: 0
          maxLength: 63
        DeliveryS3KeyPrefix:
          description: The prefix for delivery S3 bucket.
          type: string
          minLength: 0
          maxLength: 1024
        TemplateBody:
          description: A string containing full conformance pack template body. You can only specify one of the template body or template S3Uri fields.
          type: string
          minLength: 1
          maxLength: 51200
        TemplateS3Uri:
          description: Location of file containing the template body which points to the conformance pack template that is located in an Amazon S3 bucket. You can only specify one of the template body or template S3Uri fields.
          type: string
          pattern: s3://.*
          minLength: 1
          maxLength: 1024
        TemplateSSMDocumentDetails:
          description: The TemplateSSMDocumentDetails object contains the name of the SSM document and the version of the SSM document.
          type: object
          additionalProperties: false
          properties:
            DocumentName:
              type: string
              minLength: 3
              maxLength: 128
            DocumentVersion:
              type: string
              minLength: 1
              maxLength: 128
        ConformancePackInputParameters:
          description: A list of ConformancePackInputParameter objects.
          type: array
          items:
            $ref: '#/components/schemas/ConformancePackInputParameter'
          minItems: 0
          maxItems: 60
      required:
        - ConformancePackName
      x-stackql-resource-name: conformance_pack
      description: A conformance pack is a collection of AWS Config rules and remediation actions that can be easily deployed as a single entity in an account and a region or across an entire AWS Organization.
      x-type-name: AWS::Config::ConformancePack
      x-documentation-url: https://docs.aws.amazon.com/config/latest/developerguide/conformance-packs.html
      x-stackql-primary-identifier:
        - ConformancePackName
      x-create-only-properties:
        - ConformancePackName
      x-write-only-properties:
        - TemplateBody
        - TemplateS3Uri
        - TemplateSSMDocumentDetails
      x-required-properties:
        - ConformancePackName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - config:PutConformancePack
          - config:DescribeConformancePackStatus
          - config:DescribeConformancePacks
          - s3:GetObject
          - s3:GetBucketAcl
          - iam:CreateServiceLinkedRole
          - iam:PassRole
        read:
          - config:DescribeConformancePacks
        update:
          - config:PutConformancePack
          - config:DescribeConformancePackStatus
          - s3:GetObject
          - s3:GetBucketAcl
          - iam:CreateServiceLinkedRole
          - iam:PassRole
        delete:
          - config:DeleteConformancePack
          - config:DescribeConformancePackStatus
        list:
          - config:DescribeConformancePacks
    AccountId:
      type: string
    OrganizationConformancePack:
      type: object
      properties:
        OrganizationConformancePackName:
          description: The name of the organization conformance pack.
          type: string
          pattern: '[a-zA-Z][-a-zA-Z0-9]*'
          minLength: 1
          maxLength: 128
        TemplateS3Uri:
          description: Location of file containing the template body.
          type: string
          pattern: s3://.*
          minLength: 1
          maxLength: 1024
        TemplateBody:
          description: A string containing full conformance pack template body.
          type: string
          minLength: 1
          maxLength: 51200
        DeliveryS3Bucket:
          description: AWS Config stores intermediate files while processing conformance pack template.
          type: string
          minLength: 0
          maxLength: 63
        DeliveryS3KeyPrefix:
          description: The prefix for the delivery S3 bucket.
          type: string
          minLength: 0
          maxLength: 1024
        ConformancePackInputParameters:
          description: A list of ConformancePackInputParameter objects.
          type: array
          items:
            $ref: '#/components/schemas/ConformancePackInputParameter'
          minItems: 0
          maxItems: 60
        ExcludedAccounts:
          description: A list of AWS accounts to be excluded from an organization conformance pack while deploying a conformance pack.
          type: array
          items:
            $ref: '#/components/schemas/AccountId'
          minItems: 0
          maxItems: 1000
      required:
        - OrganizationConformancePackName
      x-stackql-resource-name: organization_conformance_pack
      description: Resource schema for AWS::Config::OrganizationConformancePack.
      x-type-name: AWS::Config::OrganizationConformancePack
      x-documentation-url: https://docs.aws.amazon.com/config/latest/developerguide/conformance-pack-organization-apis.html
      x-stackql-primary-identifier:
        - OrganizationConformancePackName
      x-create-only-properties:
        - OrganizationConformancePackName
      x-write-only-properties:
        - TemplateBody
        - TemplateS3Uri
      x-required-properties:
        - OrganizationConformancePackName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - config:PutOrganizationConformancePack
          - config:DescribeOrganizationConformancePackStatuses
          - config:GetOrganizationConformancePackDetailedStatus
          - config:DescribeOrganizationConformancePacks
          - s3:GetObject
          - s3:GetBucketAcl
          - iam:CreateServiceLinkedRole
          - iam:PassRole
          - organizations:ListDelegatedAdministrators
          - organizations:EnableAWSServiceAccess
        read:
          - config:DescribeOrganizationConformancePacks
        delete:
          - config:DeleteOrganizationConformancePack
          - config:DescribeOrganizationConformancePackStatuses
          - config:GetOrganizationConformancePackDetailedStatus
          - organizations:ListDelegatedAdministrators
        update:
          - config:PutOrganizationConformancePack
          - config:DescribeOrganizationConformancePackStatuses
          - config:GetOrganizationConformancePackDetailedStatus
          - s3:GetObject
          - s3:GetBucketAcl
          - iam:CreateServiceLinkedRole
          - iam:PassRole
          - organizations:ListDelegatedAdministrators
          - organizations:EnableAWSServiceAccess
        list:
          - config:DescribeOrganizationConformancePacks
    StoredQuery:
      type: object
      properties:
        QueryArn:
          type: string
          minLength: 1
          maxLength: 500
        QueryId:
          type: string
          minLength: 1
          maxLength: 36
          pattern: ^\S+$
        QueryName:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-zA-Z0-9-_]+$
        QueryDescription:
          type: string
          minLength: 0
          maxLength: 256
          pattern: '[\s\S]*'
        QueryExpression:
          type: string
          minLength: 1
          maxLength: 4096
          pattern: '[\s\S]*'
        Tags:
          description: The tags for the stored query.
          type: array
          maxItems: 50
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - QueryName
        - QueryExpression
      x-stackql-resource-name: stored_query
      description: Resource Type definition for AWS::Config::StoredQuery
      x-type-name: AWS::Config::StoredQuery
      x-stackql-primary-identifier:
        - QueryName
      x-create-only-properties:
        - QueryName
      x-read-only-properties:
        - QueryId
        - QueryArn
      x-required-properties:
        - QueryName
        - QueryExpression
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - config:TagResource
          - config:UntagResource
          - config:ListTagsForResource
      x-required-permissions:
        create:
          - config:PutStoredQuery
          - config:GetStoredQuery
          - config:TagResource
        read:
          - config:GetStoredQuery
          - config:ListTagsForResource
        update:
          - config:PutStoredQuery
          - config:GetStoredQuery
          - config:TagResource
          - config:UntagResource
          - config:ListTagsForResource
        delete:
          - config:DeleteStoredQuery
          - config:UntagResource
        list:
          - config:ListStoredQueries
    CreateAggregationAuthorizationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AuthorizedAccountId:
              description: The 12-digit account ID of the account authorized to aggregate data.
              type: string
              pattern: ^\d{12}$
            AuthorizedAwsRegion:
              description: The region authorized to collect aggregated data.
              type: string
              minLength: 1
              maxLength: 64
            AggregationAuthorizationArn:
              description: The ARN of the AggregationAuthorization.
              type: string
            Tags:
              description: The tags for the AggregationAuthorization.
              type: array
              maxItems: 50
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateAggregationAuthorizationRequest
      type: object
      required: []
    CreateConfigRuleRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ConfigRuleId:
              type: string
              description: ''
            Description:
              type: string
              description: The description that you provide for the CC rule.
            Scope:
              description: |-
                Defines which resources can trigger an evaluation for the rule. The scope can include one or more resource types, a combination of one resource type and one resource ID, or a combination of a tag key and value. Specify a scope to constrain the resources that can trigger an evaluation for the rule. If you do not specify a scope, evaluations are triggered when any resource in the recording group changes.
                  The scope can be empty.
              $ref: '#/components/schemas/Scope'
            ConfigRuleName:
              type: string
              description: A name for the CC rule. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the rule name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
            Arn:
              type: string
              description: ''
            Compliance:
              type: object
              description: Indicates whether an AWS resource or CC rule is compliant and provides the number of contributors that affect the compliance.
              additionalProperties: false
              properties:
                Type:
                  type: string
                  description: Compliance type determined by the Config rule
            MaximumExecutionFrequency:
              type: string
              description: |-
                The maximum frequency with which CC runs evaluations for a rule. You can specify a value for ``MaximumExecutionFrequency`` when:
                  +  You are using an AWS managed rule that is triggered at a periodic frequency.
                  +  Your custom rule is triggered when CC delivers the configuration snapshot. For more information, see [ConfigSnapshotDeliveryProperties](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html).
                  
                  By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid value for the ``MaximumExecutionFrequency`` parameter.
            Source:
              description: Provides the rule owner (```` for managed rules, ``CUSTOM_POLICY`` for Custom Policy rules, and ``CUSTOM_LAMBDA`` for Custom Lambda rules), the rule identifier, and the notifications that cause the function to evaluate your AWS resources.
              $ref: '#/components/schemas/Source'
            InputParameters:
              type: object
              description: A string, in JSON format, that is passed to the CC rule Lambda function.
            EvaluationModes:
              type: array
              description: The modes the CC rule can be evaluated in. The valid values are distinct objects. By default, the value is Detective evaluation mode only.
              uniqueItems: false
              items:
                description: Mode of evaluation of AWS Config rule
                $ref: '#/components/schemas/EvaluationModeConfiguration'
          x-stackQL-stringOnly: true
      x-title: CreateConfigRuleRequest
      type: object
      required: []
    CreateConfigurationAggregatorRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccountAggregationSources:
              type: array
              uniqueItems: false
              items:
                $ref: '#/components/schemas/AccountAggregationSource'
            ConfigurationAggregatorName:
              description: The name of the aggregator.
              type: string
              pattern: '[\w\-]+'
              minLength: 1
              maxLength: 256
            ConfigurationAggregatorArn:
              description: The Amazon Resource Name (ARN) of the aggregator.
              type: string
            OrganizationAggregationSource:
              $ref: '#/components/schemas/OrganizationAggregationSource'
            Tags:
              description: The tags for the configuration aggregator.
              type: array
              maxItems: 50
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateConfigurationAggregatorRequest
      type: object
      required: []
    CreateConformancePackRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ConformancePackName:
              description: Name of the conformance pack which will be assigned as the unique identifier.
              type: string
              pattern: '[a-zA-Z][-a-zA-Z0-9]*'
              minLength: 1
              maxLength: 256
            DeliveryS3Bucket:
              description: AWS Config stores intermediate files while processing conformance pack template.
              type: string
              minLength: 0
              maxLength: 63
            DeliveryS3KeyPrefix:
              description: The prefix for delivery S3 bucket.
              type: string
              minLength: 0
              maxLength: 1024
            TemplateBody:
              description: A string containing full conformance pack template body. You can only specify one of the template body or template S3Uri fields.
              type: string
              minLength: 1
              maxLength: 51200
            TemplateS3Uri:
              description: Location of file containing the template body which points to the conformance pack template that is located in an Amazon S3 bucket. You can only specify one of the template body or template S3Uri fields.
              type: string
              pattern: s3://.*
              minLength: 1
              maxLength: 1024
            TemplateSSMDocumentDetails:
              description: The TemplateSSMDocumentDetails object contains the name of the SSM document and the version of the SSM document.
              type: object
              additionalProperties: false
              properties:
                DocumentName:
                  type: string
                  minLength: 3
                  maxLength: 128
                DocumentVersion:
                  type: string
                  minLength: 1
                  maxLength: 128
            ConformancePackInputParameters:
              description: A list of ConformancePackInputParameter objects.
              type: array
              items:
                $ref: '#/components/schemas/ConformancePackInputParameter'
              minItems: 0
              maxItems: 60
          x-stackQL-stringOnly: true
      x-title: CreateConformancePackRequest
      type: object
      required: []
    CreateOrganizationConformancePackRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            OrganizationConformancePackName:
              description: The name of the organization conformance pack.
              type: string
              pattern: '[a-zA-Z][-a-zA-Z0-9]*'
              minLength: 1
              maxLength: 128
            TemplateS3Uri:
              description: Location of file containing the template body.
              type: string
              pattern: s3://.*
              minLength: 1
              maxLength: 1024
            TemplateBody:
              description: A string containing full conformance pack template body.
              type: string
              minLength: 1
              maxLength: 51200
            DeliveryS3Bucket:
              description: AWS Config stores intermediate files while processing conformance pack template.
              type: string
              minLength: 0
              maxLength: 63
            DeliveryS3KeyPrefix:
              description: The prefix for the delivery S3 bucket.
              type: string
              minLength: 0
              maxLength: 1024
            ConformancePackInputParameters:
              description: A list of ConformancePackInputParameter objects.
              type: array
              items:
                $ref: '#/components/schemas/ConformancePackInputParameter'
              minItems: 0
              maxItems: 60
            ExcludedAccounts:
              description: A list of AWS accounts to be excluded from an organization conformance pack while deploying a conformance pack.
              type: array
              items:
                $ref: '#/components/schemas/AccountId'
              minItems: 0
              maxItems: 1000
          x-stackQL-stringOnly: true
      x-title: CreateOrganizationConformancePackRequest
      type: object
      required: []
    CreateStoredQueryRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            QueryArn:
              type: string
              minLength: 1
              maxLength: 500
            QueryId:
              type: string
              minLength: 1
              maxLength: 36
              pattern: ^\S+$
            QueryName:
              type: string
              minLength: 1
              maxLength: 64
              pattern: ^[a-zA-Z0-9-_]+$
            QueryDescription:
              type: string
              minLength: 0
              maxLength: 256
              pattern: '[\s\S]*'
            QueryExpression:
              type: string
              minLength: 1
              maxLength: 4096
              pattern: '[\s\S]*'
            Tags:
              description: The tags for the stored query.
              type: array
              maxItems: 50
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateStoredQueryRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    aggregation_authorizations:
      name: aggregation_authorizations
      id: aws.config.aggregation_authorizations
      x-cfn-schema-name: AggregationAuthorization
      x-cfn-type-name: AWS::Config::AggregationAuthorization
      x-identifiers:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AggregationAuthorization&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::AggregationAuthorization"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::AggregationAuthorization"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::AggregationAuthorization"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/aggregation_authorizations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/aggregation_authorizations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/aggregation_authorizations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AuthorizedAccountId') as authorized_account_id,
              JSON_EXTRACT(Properties, '$.AuthorizedAwsRegion') as authorized_aws_region,
              JSON_EXTRACT(Properties, '$.AggregationAuthorizationArn') as aggregation_authorization_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::AggregationAuthorization'
              AND data__Identifier = '<AuthorizedAccountId>|<AuthorizedAwsRegion>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AuthorizedAccountId') as authorized_account_id,
                JSON_EXTRACT(detail.Properties, '$.AuthorizedAwsRegion') as authorized_aws_region,
                JSON_EXTRACT(detail.Properties, '$.AggregationAuthorizationArn') as aggregation_authorization_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Config::AggregationAuthorization'
                AND detail.data__TypeName = 'AWS::Config::AggregationAuthorization'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AuthorizedAccountId') as authorized_account_id,
                  json_extract_path_text(Properties, 'AuthorizedAwsRegion') as authorized_aws_region,
                  json_extract_path_text(Properties, 'AggregationAuthorizationArn') as aggregation_authorization_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::AggregationAuthorization'
                  AND data__Identifier = '<AuthorizedAccountId>|<AuthorizedAwsRegion>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AuthorizedAccountId') as authorized_account_id,
                    json_extract_path_text(detail.Properties, 'AuthorizedAwsRegion') as authorized_aws_region,
                    json_extract_path_text(detail.Properties, 'AggregationAuthorizationArn') as aggregation_authorization_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Config::AggregationAuthorization'
                    AND detail.data__TypeName = 'AWS::Config::AggregationAuthorization'
                    AND listing.region = 'us-east-1'
    aggregation_authorizations_list_only:
      name: aggregation_authorizations_list_only
      id: aws.config.aggregation_authorizations_list_only
      x-cfn-schema-name: AggregationAuthorization
      x-cfn-type-name: AWS::Config::AggregationAuthorization
      x-identifiers:
        - AuthorizedAccountId
        - AuthorizedAwsRegion
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AuthorizedAccountId') as authorized_account_id,
              JSON_EXTRACT(Properties, '$.AuthorizedAwsRegion') as authorized_aws_region
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::AggregationAuthorization'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AuthorizedAccountId') as authorized_account_id,
                json_extract_path_text(Properties, 'AuthorizedAwsRegion') as authorized_aws_region
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::AggregationAuthorization'
                AND region = 'us-east-1'
    aggregation_authorization_tags:
      name: aggregation_authorization_tags
      id: aws.config.aggregation_authorization_tags
      x-cfn-schema-name: AggregationAuthorization
      x-cfn-type-name: AWS::Config::AggregationAuthorization
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AuthorizedAccountId') as authorized_account_id,
              JSON_EXTRACT(detail.Properties, '$.AuthorizedAwsRegion') as authorized_aws_region,
              JSON_EXTRACT(detail.Properties, '$.AggregationAuthorizationArn') as aggregation_authorization_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Config::AggregationAuthorization'
              AND detail.data__TypeName = 'AWS::Config::AggregationAuthorization'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AuthorizedAccountId') as authorized_account_id,
                json_extract_path_text(detail.Properties, 'AuthorizedAwsRegion') as authorized_aws_region,
                json_extract_path_text(detail.Properties, 'AggregationAuthorizationArn') as aggregation_authorization_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Config::AggregationAuthorization'
                AND detail.data__TypeName = 'AWS::Config::AggregationAuthorization'
                AND listing.region = 'us-east-1'
    config_rules:
      name: config_rules
      id: aws.config.config_rules
      x-cfn-schema-name: ConfigRule
      x-cfn-type-name: AWS::Config::ConfigRule
      x-identifiers:
        - ConfigRuleName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ConfigRule&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::ConfigRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::ConfigRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::ConfigRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/config_rules/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/config_rules/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/config_rules/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ConfigRuleId') as config_rule_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Scope') as scope,
              JSON_EXTRACT(Properties, '$.ConfigRuleName') as config_rule_name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Compliance') as compliance,
              JSON_EXTRACT(Properties, '$.MaximumExecutionFrequency') as maximum_execution_frequency,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.InputParameters') as input_parameters,
              JSON_EXTRACT(Properties, '$.EvaluationModes') as evaluation_modes
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConfigRule'
              AND data__Identifier = '<ConfigRuleName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ConfigRuleId') as config_rule_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Scope') as scope,
                JSON_EXTRACT(detail.Properties, '$.ConfigRuleName') as config_rule_name,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Compliance') as compliance,
                JSON_EXTRACT(detail.Properties, '$.MaximumExecutionFrequency') as maximum_execution_frequency,
                JSON_EXTRACT(detail.Properties, '$.Source') as source,
                JSON_EXTRACT(detail.Properties, '$.InputParameters') as input_parameters,
                JSON_EXTRACT(detail.Properties, '$.EvaluationModes') as evaluation_modes
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Config::ConfigRule'
                AND detail.data__TypeName = 'AWS::Config::ConfigRule'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ConfigRuleId') as config_rule_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Scope') as scope,
                  json_extract_path_text(Properties, 'ConfigRuleName') as config_rule_name,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Compliance') as compliance,
                  json_extract_path_text(Properties, 'MaximumExecutionFrequency') as maximum_execution_frequency,
                  json_extract_path_text(Properties, 'Source') as source,
                  json_extract_path_text(Properties, 'InputParameters') as input_parameters,
                  json_extract_path_text(Properties, 'EvaluationModes') as evaluation_modes
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConfigRule'
                  AND data__Identifier = '<ConfigRuleName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ConfigRuleId') as config_rule_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Scope') as scope,
                    json_extract_path_text(detail.Properties, 'ConfigRuleName') as config_rule_name,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Compliance') as compliance,
                    json_extract_path_text(detail.Properties, 'MaximumExecutionFrequency') as maximum_execution_frequency,
                    json_extract_path_text(detail.Properties, 'Source') as source,
                    json_extract_path_text(detail.Properties, 'InputParameters') as input_parameters,
                    json_extract_path_text(detail.Properties, 'EvaluationModes') as evaluation_modes
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Config::ConfigRule'
                    AND detail.data__TypeName = 'AWS::Config::ConfigRule'
                    AND listing.region = 'us-east-1'
    config_rules_list_only:
      name: config_rules_list_only
      id: aws.config.config_rules_list_only
      x-cfn-schema-name: ConfigRule
      x-cfn-type-name: AWS::Config::ConfigRule
      x-identifiers:
        - ConfigRuleName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConfigRuleName') as config_rule_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConfigRule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ConfigRuleName') as config_rule_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConfigRule'
                AND region = 'us-east-1'
    configuration_aggregators:
      name: configuration_aggregators
      id: aws.config.configuration_aggregators
      x-cfn-schema-name: ConfigurationAggregator
      x-cfn-type-name: AWS::Config::ConfigurationAggregator
      x-identifiers:
        - ConfigurationAggregatorName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ConfigurationAggregator&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::ConfigurationAggregator"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::ConfigurationAggregator"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::ConfigurationAggregator"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/configuration_aggregators/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/configuration_aggregators/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/configuration_aggregators/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccountAggregationSources') as account_aggregation_sources,
              JSON_EXTRACT(Properties, '$.ConfigurationAggregatorName') as configuration_aggregator_name,
              JSON_EXTRACT(Properties, '$.ConfigurationAggregatorArn') as configuration_aggregator_arn,
              JSON_EXTRACT(Properties, '$.OrganizationAggregationSource') as organization_aggregation_source,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConfigurationAggregator'
              AND data__Identifier = '<ConfigurationAggregatorName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccountAggregationSources') as account_aggregation_sources,
                JSON_EXTRACT(detail.Properties, '$.ConfigurationAggregatorName') as configuration_aggregator_name,
                JSON_EXTRACT(detail.Properties, '$.ConfigurationAggregatorArn') as configuration_aggregator_arn,
                JSON_EXTRACT(detail.Properties, '$.OrganizationAggregationSource') as organization_aggregation_source,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Config::ConfigurationAggregator'
                AND detail.data__TypeName = 'AWS::Config::ConfigurationAggregator'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccountAggregationSources') as account_aggregation_sources,
                  json_extract_path_text(Properties, 'ConfigurationAggregatorName') as configuration_aggregator_name,
                  json_extract_path_text(Properties, 'ConfigurationAggregatorArn') as configuration_aggregator_arn,
                  json_extract_path_text(Properties, 'OrganizationAggregationSource') as organization_aggregation_source,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConfigurationAggregator'
                  AND data__Identifier = '<ConfigurationAggregatorName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccountAggregationSources') as account_aggregation_sources,
                    json_extract_path_text(detail.Properties, 'ConfigurationAggregatorName') as configuration_aggregator_name,
                    json_extract_path_text(detail.Properties, 'ConfigurationAggregatorArn') as configuration_aggregator_arn,
                    json_extract_path_text(detail.Properties, 'OrganizationAggregationSource') as organization_aggregation_source,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Config::ConfigurationAggregator'
                    AND detail.data__TypeName = 'AWS::Config::ConfigurationAggregator'
                    AND listing.region = 'us-east-1'
    configuration_aggregators_list_only:
      name: configuration_aggregators_list_only
      id: aws.config.configuration_aggregators_list_only
      x-cfn-schema-name: ConfigurationAggregator
      x-cfn-type-name: AWS::Config::ConfigurationAggregator
      x-identifiers:
        - ConfigurationAggregatorName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConfigurationAggregatorName') as configuration_aggregator_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConfigurationAggregator'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ConfigurationAggregatorName') as configuration_aggregator_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConfigurationAggregator'
                AND region = 'us-east-1'
    configuration_aggregator_tags:
      name: configuration_aggregator_tags
      id: aws.config.configuration_aggregator_tags
      x-cfn-schema-name: ConfigurationAggregator
      x-cfn-type-name: AWS::Config::ConfigurationAggregator
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AccountAggregationSources') as account_aggregation_sources,
              JSON_EXTRACT(detail.Properties, '$.ConfigurationAggregatorName') as configuration_aggregator_name,
              JSON_EXTRACT(detail.Properties, '$.ConfigurationAggregatorArn') as configuration_aggregator_arn,
              JSON_EXTRACT(detail.Properties, '$.OrganizationAggregationSource') as organization_aggregation_source
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Config::ConfigurationAggregator'
              AND detail.data__TypeName = 'AWS::Config::ConfigurationAggregator'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AccountAggregationSources') as account_aggregation_sources,
                json_extract_path_text(detail.Properties, 'ConfigurationAggregatorName') as configuration_aggregator_name,
                json_extract_path_text(detail.Properties, 'ConfigurationAggregatorArn') as configuration_aggregator_arn,
                json_extract_path_text(detail.Properties, 'OrganizationAggregationSource') as organization_aggregation_source
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Config::ConfigurationAggregator'
                AND detail.data__TypeName = 'AWS::Config::ConfigurationAggregator'
                AND listing.region = 'us-east-1'
    conformance_packs:
      name: conformance_packs
      id: aws.config.conformance_packs
      x-cfn-schema-name: ConformancePack
      x-cfn-type-name: AWS::Config::ConformancePack
      x-identifiers:
        - ConformancePackName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ConformancePack&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::ConformancePack"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::ConformancePack"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::ConformancePack"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/conformance_packs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/conformance_packs/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/conformance_packs/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ConformancePackName') as conformance_pack_name,
              JSON_EXTRACT(Properties, '$.DeliveryS3Bucket') as delivery_s3_bucket,
              JSON_EXTRACT(Properties, '$.DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
              JSON_EXTRACT(Properties, '$.TemplateBody') as template_body,
              JSON_EXTRACT(Properties, '$.TemplateS3Uri') as template_s3_uri,
              JSON_EXTRACT(Properties, '$.TemplateSSMDocumentDetails') as template_ssm_document_details,
              JSON_EXTRACT(Properties, '$.ConformancePackInputParameters') as conformance_pack_input_parameters
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConformancePack'
              AND data__Identifier = '<ConformancePackName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ConformancePackName') as conformance_pack_name,
                JSON_EXTRACT(detail.Properties, '$.DeliveryS3Bucket') as delivery_s3_bucket,
                JSON_EXTRACT(detail.Properties, '$.DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
                JSON_EXTRACT(detail.Properties, '$.TemplateBody') as template_body,
                JSON_EXTRACT(detail.Properties, '$.TemplateS3Uri') as template_s3_uri,
                JSON_EXTRACT(detail.Properties, '$.TemplateSSMDocumentDetails') as template_ssm_document_details,
                JSON_EXTRACT(detail.Properties, '$.ConformancePackInputParameters') as conformance_pack_input_parameters
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Config::ConformancePack'
                AND detail.data__TypeName = 'AWS::Config::ConformancePack'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ConformancePackName') as conformance_pack_name,
                  json_extract_path_text(Properties, 'DeliveryS3Bucket') as delivery_s3_bucket,
                  json_extract_path_text(Properties, 'DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
                  json_extract_path_text(Properties, 'TemplateBody') as template_body,
                  json_extract_path_text(Properties, 'TemplateS3Uri') as template_s3_uri,
                  json_extract_path_text(Properties, 'TemplateSSMDocumentDetails') as template_ssm_document_details,
                  json_extract_path_text(Properties, 'ConformancePackInputParameters') as conformance_pack_input_parameters
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::ConformancePack'
                  AND data__Identifier = '<ConformancePackName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ConformancePackName') as conformance_pack_name,
                    json_extract_path_text(detail.Properties, 'DeliveryS3Bucket') as delivery_s3_bucket,
                    json_extract_path_text(detail.Properties, 'DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
                    json_extract_path_text(detail.Properties, 'TemplateBody') as template_body,
                    json_extract_path_text(detail.Properties, 'TemplateS3Uri') as template_s3_uri,
                    json_extract_path_text(detail.Properties, 'TemplateSSMDocumentDetails') as template_ssm_document_details,
                    json_extract_path_text(detail.Properties, 'ConformancePackInputParameters') as conformance_pack_input_parameters
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Config::ConformancePack'
                    AND detail.data__TypeName = 'AWS::Config::ConformancePack'
                    AND listing.region = 'us-east-1'
    conformance_packs_list_only:
      name: conformance_packs_list_only
      id: aws.config.conformance_packs_list_only
      x-cfn-schema-name: ConformancePack
      x-cfn-type-name: AWS::Config::ConformancePack
      x-identifiers:
        - ConformancePackName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConformancePackName') as conformance_pack_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConformancePack'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ConformancePackName') as conformance_pack_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::ConformancePack'
                AND region = 'us-east-1'
    organization_conformance_packs:
      name: organization_conformance_packs
      id: aws.config.organization_conformance_packs
      x-cfn-schema-name: OrganizationConformancePack
      x-cfn-type-name: AWS::Config::OrganizationConformancePack
      x-identifiers:
        - OrganizationConformancePackName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__OrganizationConformancePack&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::OrganizationConformancePack"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::OrganizationConformancePack"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::OrganizationConformancePack"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/organization_conformance_packs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/organization_conformance_packs/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/organization_conformance_packs/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.OrganizationConformancePackName') as organization_conformance_pack_name,
              JSON_EXTRACT(Properties, '$.TemplateS3Uri') as template_s3_uri,
              JSON_EXTRACT(Properties, '$.TemplateBody') as template_body,
              JSON_EXTRACT(Properties, '$.DeliveryS3Bucket') as delivery_s3_bucket,
              JSON_EXTRACT(Properties, '$.DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
              JSON_EXTRACT(Properties, '$.ConformancePackInputParameters') as conformance_pack_input_parameters,
              JSON_EXTRACT(Properties, '$.ExcludedAccounts') as excluded_accounts
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::OrganizationConformancePack'
              AND data__Identifier = '<OrganizationConformancePackName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.OrganizationConformancePackName') as organization_conformance_pack_name,
                JSON_EXTRACT(detail.Properties, '$.TemplateS3Uri') as template_s3_uri,
                JSON_EXTRACT(detail.Properties, '$.TemplateBody') as template_body,
                JSON_EXTRACT(detail.Properties, '$.DeliveryS3Bucket') as delivery_s3_bucket,
                JSON_EXTRACT(detail.Properties, '$.DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
                JSON_EXTRACT(detail.Properties, '$.ConformancePackInputParameters') as conformance_pack_input_parameters,
                JSON_EXTRACT(detail.Properties, '$.ExcludedAccounts') as excluded_accounts
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Config::OrganizationConformancePack'
                AND detail.data__TypeName = 'AWS::Config::OrganizationConformancePack'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'OrganizationConformancePackName') as organization_conformance_pack_name,
                  json_extract_path_text(Properties, 'TemplateS3Uri') as template_s3_uri,
                  json_extract_path_text(Properties, 'TemplateBody') as template_body,
                  json_extract_path_text(Properties, 'DeliveryS3Bucket') as delivery_s3_bucket,
                  json_extract_path_text(Properties, 'DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
                  json_extract_path_text(Properties, 'ConformancePackInputParameters') as conformance_pack_input_parameters,
                  json_extract_path_text(Properties, 'ExcludedAccounts') as excluded_accounts
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::OrganizationConformancePack'
                  AND data__Identifier = '<OrganizationConformancePackName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'OrganizationConformancePackName') as organization_conformance_pack_name,
                    json_extract_path_text(detail.Properties, 'TemplateS3Uri') as template_s3_uri,
                    json_extract_path_text(detail.Properties, 'TemplateBody') as template_body,
                    json_extract_path_text(detail.Properties, 'DeliveryS3Bucket') as delivery_s3_bucket,
                    json_extract_path_text(detail.Properties, 'DeliveryS3KeyPrefix') as delivery_s3_key_prefix,
                    json_extract_path_text(detail.Properties, 'ConformancePackInputParameters') as conformance_pack_input_parameters,
                    json_extract_path_text(detail.Properties, 'ExcludedAccounts') as excluded_accounts
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Config::OrganizationConformancePack'
                    AND detail.data__TypeName = 'AWS::Config::OrganizationConformancePack'
                    AND listing.region = 'us-east-1'
    organization_conformance_packs_list_only:
      name: organization_conformance_packs_list_only
      id: aws.config.organization_conformance_packs_list_only
      x-cfn-schema-name: OrganizationConformancePack
      x-cfn-type-name: AWS::Config::OrganizationConformancePack
      x-identifiers:
        - OrganizationConformancePackName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OrganizationConformancePackName') as organization_conformance_pack_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::OrganizationConformancePack'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'OrganizationConformancePackName') as organization_conformance_pack_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::OrganizationConformancePack'
                AND region = 'us-east-1'
    stored_queries:
      name: stored_queries
      id: aws.config.stored_queries
      x-cfn-schema-name: StoredQuery
      x-cfn-type-name: AWS::Config::StoredQuery
      x-identifiers:
        - QueryName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__StoredQuery&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::StoredQuery"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::StoredQuery"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Config::StoredQuery"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/stored_queries/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/stored_queries/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/stored_queries/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.QueryArn') as query_arn,
              JSON_EXTRACT(Properties, '$.QueryId') as query_id,
              JSON_EXTRACT(Properties, '$.QueryName') as query_name,
              JSON_EXTRACT(Properties, '$.QueryDescription') as query_description,
              JSON_EXTRACT(Properties, '$.QueryExpression') as query_expression,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::StoredQuery'
              AND data__Identifier = '<QueryName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.QueryArn') as query_arn,
                JSON_EXTRACT(detail.Properties, '$.QueryId') as query_id,
                JSON_EXTRACT(detail.Properties, '$.QueryName') as query_name,
                JSON_EXTRACT(detail.Properties, '$.QueryDescription') as query_description,
                JSON_EXTRACT(detail.Properties, '$.QueryExpression') as query_expression,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Config::StoredQuery'
                AND detail.data__TypeName = 'AWS::Config::StoredQuery'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'QueryArn') as query_arn,
                  json_extract_path_text(Properties, 'QueryId') as query_id,
                  json_extract_path_text(Properties, 'QueryName') as query_name,
                  json_extract_path_text(Properties, 'QueryDescription') as query_description,
                  json_extract_path_text(Properties, 'QueryExpression') as query_expression,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Config::StoredQuery'
                  AND data__Identifier = '<QueryName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'QueryArn') as query_arn,
                    json_extract_path_text(detail.Properties, 'QueryId') as query_id,
                    json_extract_path_text(detail.Properties, 'QueryName') as query_name,
                    json_extract_path_text(detail.Properties, 'QueryDescription') as query_description,
                    json_extract_path_text(detail.Properties, 'QueryExpression') as query_expression,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Config::StoredQuery'
                    AND detail.data__TypeName = 'AWS::Config::StoredQuery'
                    AND listing.region = 'us-east-1'
    stored_queries_list_only:
      name: stored_queries_list_only
      id: aws.config.stored_queries_list_only
      x-cfn-schema-name: StoredQuery
      x-cfn-type-name: AWS::Config::StoredQuery
      x-identifiers:
        - QueryName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.QueryName') as query_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::StoredQuery'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'QueryName') as query_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Config::StoredQuery'
                AND region = 'us-east-1'
    stored_query_tags:
      name: stored_query_tags
      id: aws.config.stored_query_tags
      x-cfn-schema-name: StoredQuery
      x-cfn-type-name: AWS::Config::StoredQuery
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.QueryArn') as query_arn,
              JSON_EXTRACT(detail.Properties, '$.QueryId') as query_id,
              JSON_EXTRACT(detail.Properties, '$.QueryName') as query_name,
              JSON_EXTRACT(detail.Properties, '$.QueryDescription') as query_description,
              JSON_EXTRACT(detail.Properties, '$.QueryExpression') as query_expression
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Config::StoredQuery'
              AND detail.data__TypeName = 'AWS::Config::StoredQuery'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'QueryArn') as query_arn,
                json_extract_path_text(detail.Properties, 'QueryId') as query_id,
                json_extract_path_text(detail.Properties, 'QueryName') as query_name,
                json_extract_path_text(detail.Properties, 'QueryDescription') as query_description,
                json_extract_path_text(detail.Properties, 'QueryExpression') as query_expression
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Config::StoredQuery'
                AND detail.data__TypeName = 'AWS::Config::StoredQuery'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AggregationAuthorization&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAggregationAuthorization
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAggregationAuthorizationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ConfigRule&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateConfigRule
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateConfigRuleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ConfigurationAggregator&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateConfigurationAggregator
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateConfigurationAggregatorRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ConformancePack&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateConformancePack
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateConformancePackRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__OrganizationConformancePack&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateOrganizationConformancePack
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateOrganizationConformancePackRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__StoredQuery&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateStoredQuery
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateStoredQueryRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
