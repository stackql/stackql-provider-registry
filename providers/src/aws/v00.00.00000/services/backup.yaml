openapi: 3.0.0
info:
  title: Backup
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    BackupPlanResourceType:
      type: object
      additionalProperties: false
      properties:
        BackupPlanName:
          type: string
        AdvancedBackupSettings:
          type: array
          x-insertionOrder: true
          uniqueItems: false
          items:
            $ref: '#/components/schemas/AdvancedBackupSettingResourceType'
        BackupPlanRule:
          type: array
          x-insertionOrder: true
          uniqueItems: false
          items:
            $ref: '#/components/schemas/BackupRuleResourceType'
      required:
        - BackupPlanName
        - BackupPlanRule
    BackupRuleResourceType:
      type: object
      additionalProperties: false
      properties:
        RuleName:
          type: string
        TargetBackupVault:
          type: string
        StartWindowMinutes:
          type: number
        CompletionWindowMinutes:
          type: number
        ScheduleExpression:
          type: string
        ScheduleExpressionTimezone:
          type: string
        RecoveryPointTags:
          type: object
          additionalProperties: false
          x-patternProperties:
            ^.{1,128}$:
              type: string
        CopyActions:
          type: array
          x-insertionOrder: true
          uniqueItems: false
          items:
            $ref: '#/components/schemas/CopyActionResourceType'
        Lifecycle:
          $ref: '#/components/schemas/LifecycleResourceType'
        EnableContinuousBackup:
          type: boolean
      required:
        - TargetBackupVault
        - RuleName
    AdvancedBackupSettingResourceType:
      type: object
      additionalProperties: false
      properties:
        BackupOptions:
          type: object
        ResourceType:
          type: string
      required:
        - BackupOptions
        - ResourceType
    CopyActionResourceType:
      type: object
      additionalProperties: false
      properties:
        Lifecycle:
          $ref: '#/components/schemas/LifecycleResourceType'
        DestinationBackupVaultArn:
          type: string
      required:
        - DestinationBackupVaultArn
    LifecycleResourceType:
      type: object
      additionalProperties: false
      properties:
        MoveToColdStorageAfterDays:
          type: number
        DeleteAfterDays:
          type: number
        OptInToArchiveForSupportedResources:
          type: boolean
    BackupPlan:
      type: object
      properties:
        BackupPlan:
          $ref: '#/components/schemas/BackupPlanResourceType'
        BackupPlanTags:
          type: object
          additionalProperties: false
          x-patternProperties:
            ^.{1,128}$:
              type: string
        BackupPlanArn:
          type: string
        BackupPlanId:
          type: string
        VersionId:
          type: string
      required:
        - BackupPlan
      x-stackql-resource-name: backup_plan
      description: Resource Type definition for AWS::Backup::BackupPlan
      x-type-name: AWS::Backup::BackupPlan
      x-stackql-primary-identifier:
        - BackupPlanId
      x-read-only-properties:
        - BackupPlanId
        - VersionId
        - BackupPlanArn
      x-required-properties:
        - BackupPlan
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/BackupPlanTags
        permissions:
          - backup:TagResource
          - backup:UntagResource
          - backup:ListTags
      x-required-permissions:
        read:
          - backup:GetBackupPlan
          - backup:ListTags
        create:
          - backup:GetBackupPlan
          - backup:TagResource
          - backup:CreateBackupPlan
        delete:
          - backup:GetBackupPlan
          - backup:DeleteBackupPlan
        update:
          - backup:UpdateBackupPlan
          - backup:ListTags
          - backup:TagResource
          - backup:UntagResource
        list:
          - backup:ListBackupPlans
    BackupSelectionResourceType:
      type: object
      additionalProperties: false
      properties:
        IamRoleArn:
          type: string
        ListOfTags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ConditionResourceType'
        Resources:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        SelectionName:
          type: string
        NotResources:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Conditions:
          type: object
          additionalProperties: false
          properties:
            StringEquals:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ConditionParameter'
            StringNotEquals:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ConditionParameter'
            StringLike:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ConditionParameter'
            StringNotLike:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ConditionParameter'
      required:
        - SelectionName
        - IamRoleArn
    ConditionParameter:
      type: object
      additionalProperties: false
      properties:
        ConditionKey:
          type: string
        ConditionValue:
          type: string
    ConditionResourceType:
      type: object
      additionalProperties: false
      properties:
        ConditionKey:
          type: string
        ConditionValue:
          type: string
        ConditionType:
          type: string
      required:
        - ConditionValue
        - ConditionKey
        - ConditionType
    BackupSelection:
      type: object
      properties:
        Id:
          type: string
        BackupPlanId:
          type: string
        BackupSelection:
          $ref: '#/components/schemas/BackupSelectionResourceType'
        SelectionId:
          type: string
      required:
        - BackupSelection
        - BackupPlanId
      x-stackql-resource-name: backup_selection
      description: Resource Type definition for AWS::Backup::BackupSelection
      x-type-name: AWS::Backup::BackupSelection
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - BackupSelection
        - BackupPlanId
      x-read-only-properties:
        - SelectionId
        - Id
      x-required-properties:
        - BackupSelection
        - BackupPlanId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        delete:
          - backup:GetBackupSelection
          - backup:DeleteBackupSelection
        read:
          - backup:GetBackupSelection
        create:
          - backup:CreateBackupSelection
          - iam:GetRole
          - iam:PassRole
          - iam:CreateServiceLinkedRole
        list:
          - backup:ListBackupSelections
          - backup:ListBackupPlans
    NotificationObjectType:
      type: object
      additionalProperties: false
      properties:
        BackupVaultEvents:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            type: string
        SNSTopicArn:
          type: string
      required:
        - SNSTopicArn
        - BackupVaultEvents
    LockConfigurationType:
      type: object
      additionalProperties: false
      properties:
        MinRetentionDays:
          type: integer
        MaxRetentionDays:
          type: integer
        ChangeableForDays:
          type: integer
      required:
        - MinRetentionDays
    BackupVaultNamePattern:
      type: string
      pattern: ^[a-zA-Z0-9\-\_]{2,50}$
    BackupVault:
      type: object
      properties:
        AccessPolicy:
          type: object
        BackupVaultName:
          $ref: '#/components/schemas/BackupVaultNamePattern'
        BackupVaultTags:
          type: object
          additionalProperties: false
          x-patternProperties:
            ^.{1,128}$:
              type: string
        EncryptionKeyArn:
          type: string
        Notifications:
          $ref: '#/components/schemas/NotificationObjectType'
        LockConfiguration:
          $ref: '#/components/schemas/LockConfigurationType'
        BackupVaultArn:
          type: string
      required:
        - BackupVaultName
      x-stackql-resource-name: backup_vault
      description: Resource Type definition for AWS::Backup::BackupVault
      x-type-name: AWS::Backup::BackupVault
      x-stackql-primary-identifier:
        - BackupVaultName
      x-create-only-properties:
        - BackupVaultName
        - EncryptionKeyArn
      x-write-only-properties:
        - LockConfiguration/ChangeableForDays
      x-read-only-properties:
        - BackupVaultArn
      x-required-properties:
        - BackupVaultName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/BackupVaultTags
        permissions:
          - backup:TagResource
          - backup:UntagResource
          - backup:ListTags
      x-required-permissions:
        create:
          - backup:TagResource
          - backup:CreateBackupVault
          - backup:PutBackupVaultAccessPolicy
          - backup:PutBackupVaultNotifications
          - backup:PutBackupVaultLockConfiguration
          - backup-storage:Mount
          - backup-storage:MountCapsule
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
          - kms:RetireGrant
          - kms:DescribeKey
        read:
          - backup:DescribeBackupVault
          - backup:GetBackupVaultNotifications
          - backup:GetBackupVaultAccessPolicy
          - backup:ListTags
        update:
          - backup:DescribeBackupVault
          - backup:DeleteBackupVaultAccessPolicy
          - backup:DeleteBackupVaultNotifications
          - backup:DeleteBackupVaultLockConfiguration
          - backup:ListTags
          - backup:TagResource
          - backup:UntagResource
          - backup:PutBackupVaultAccessPolicy
          - backup:PutBackupVaultNotifications
          - backup:PutBackupVaultLockConfiguration
        delete:
          - backup:DeleteBackupVault
        list:
          - backup:ListBackupVaults
    FrameworkControl:
      type: object
      additionalProperties: false
      properties:
        ControlName:
          description: The name of a control. This name is between 1 and 256 characters.
          type: string
        ControlInputParameters:
          type: array
          description: A list of ParameterName and ParameterValue pairs.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ControlInputParameter'
        ControlScope:
          type: object
          description: 'The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.'
          additionalProperties: false
          properties:
            ComplianceResourceIds:
              description: The ID of the only AWS resource that you want your control scope to contain.
              type: array
              x-insertionOrder: false
              items:
                type: string
            ComplianceResourceTypes:
              type: array
              description: Describes whether the control scope includes one or more types of resources, such as `EFS` or `RDS`.
              x-insertionOrder: false
              items:
                type: string
            Tags:
              type: array
              description: Describes whether the control scope includes resources with one or more tags. Each tag is a key-value pair.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
      required:
        - ControlName
    ControlInputParameter:
      type: object
      additionalProperties: false
      properties:
        ParameterName:
          type: string
        ParameterValue:
          type: string
      required:
        - ParameterName
        - ParameterValue
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
    Framework:
      type: object
      properties:
        FrameworkName:
          description: The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
          type: string
          pattern: '[a-zA-Z][_a-zA-Z0-9]*'
          minLength: 1
          maxLength: 256
        FrameworkDescription:
          description: An optional description of the framework with a maximum 1,024 characters.
          type: string
          minLength: 0
          maxLength: 1024
        FrameworkArn:
          description: An Amazon Resource Name (ARN) that uniquely identifies Framework as a resource
          type: string
        DeploymentStatus:
          description: 'The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED | FAILED`'
          type: string
        CreationTime:
          description: The date and time that a framework is created, in ISO 8601 representation. The value of CreationTime is accurate to milliseconds. For example, 2020-07-10T15:00:00.000-08:00 represents the 10th of July 2020 at 3:00 PM 8 hours behind UTC.
          type: string
        FrameworkControls:
          description: Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/FrameworkControl'
        FrameworkStatus:
          type: string
          description: |-
            A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. The statuses are:

            `ACTIVE` when recording is turned on for all resources governed by the framework.

            `PARTIALLY_ACTIVE` when recording is turned off for at least one resource governed by the framework.

            `INACTIVE` when recording is turned off for all resources governed by the framework.

            `UNAVAILABLE` when AWS Backup is unable to validate recording status at this time.
        FrameworkTags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
      required:
        - FrameworkControls
      x-stackql-resource-name: framework
      description: Contains detailed information about a framework. Frameworks contain controls, which evaluate and report on your backup events and resources. Frameworks generate daily compliance results.
      x-type-name: AWS::Backup::Framework
      x-stackql-primary-identifier:
        - FrameworkArn
      x-create-only-properties:
        - FrameworkName
      x-read-only-properties:
        - FrameworkArn
        - CreationTime
        - FrameworkStatus
        - DeploymentStatus
      x-required-properties:
        - FrameworkControls
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/FrameworkTags
        permissions:
          - backup:TagResource
          - backup:UntagResource
          - backup:ListTags
      x-required-permissions:
        create:
          - backup:CreateFramework
          - backup:DescribeFramework
          - backup:ListTags
          - backup:TagResource
          - iam:CreateServiceLinkedRole
        read:
          - backup:DescribeFramework
          - backup:ListTags
        update:
          - backup:DescribeFramework
          - backup:UpdateFramework
          - backup:ListTags
          - backup:TagResource
          - backup:UntagResource
        delete:
          - backup:DeleteFramework
          - backup:DescribeFramework
        list:
          - backup:ListFrameworks
    LogicallyAirGappedBackupVault:
      type: object
      properties:
        AccessPolicy:
          type: object
        BackupVaultName:
          $ref: '#/components/schemas/BackupVaultNamePattern'
        MinRetentionDays:
          type: integer
        MaxRetentionDays:
          type: integer
        BackupVaultTags:
          type: object
          additionalProperties: false
          x-patternProperties:
            ^.{1,128}$:
              type: string
        Notifications:
          $ref: '#/components/schemas/NotificationObjectType'
        EncryptionKeyArn:
          type: string
        BackupVaultArn:
          type: string
        VaultState:
          type: string
        VaultType:
          type: string
      required:
        - BackupVaultName
        - MinRetentionDays
        - MaxRetentionDays
      x-stackql-resource-name: logically_air_gapped_backup_vault
      description: Resource Type definition for AWS::Backup::LogicallyAirGappedBackupVault
      x-type-name: AWS::Backup::LogicallyAirGappedBackupVault
      x-stackql-primary-identifier:
        - BackupVaultName
      x-create-only-properties:
        - BackupVaultName
        - MinRetentionDays
        - MaxRetentionDays
      x-read-only-properties:
        - BackupVaultArn
        - EncryptionKeyArn
        - VaultState
        - VaultType
      x-required-properties:
        - BackupVaultName
        - MinRetentionDays
        - MaxRetentionDays
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/BackupVaultTags
        permissions:
          - backup:TagResource
          - backup:UntagResource
          - backup:ListTags
      x-required-permissions:
        create:
          - backup:TagResource
          - backup:CreateLogicallyAirGappedBackupVault
          - backup:PutBackupVaultAccessPolicy
          - backup:PutBackupVaultNotifications
          - backup-storage:Mount
          - backup-storage:MountCapsule
          - backup:DescribeBackupVault
        read:
          - backup:DescribeBackupVault
          - backup:GetBackupVaultNotifications
          - backup:GetBackupVaultAccessPolicy
          - backup:ListTags
        update:
          - backup:DescribeBackupVault
          - backup:DeleteBackupVaultAccessPolicy
          - backup:DeleteBackupVaultNotifications
          - backup:DeleteBackupVaultLockConfiguration
          - backup:GetBackupVaultAccessPolicy
          - backup:ListTags
          - backup:TagResource
          - backup:UntagResource
          - backup:PutBackupVaultAccessPolicy
          - backup:PutBackupVaultNotifications
          - backup:PutBackupVaultLockConfiguration
        delete:
          - backup:DeleteBackupVault
        list:
          - backup:ListBackupVaults
    ReportPlan:
      type: object
      properties:
        ReportPlanName:
          type: string
          description: The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
          minLength: 1
          maxLength: 256
          pattern: '[a-zA-Z][_a-zA-Z0-9]*'
        ReportPlanArn:
          type: string
          description: An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.
        ReportPlanDescription:
          type: string
          description: An optional description of the report plan with a maximum of 1,024 characters.
          minLength: 0
          maxLength: 1024
          pattern: .*\S.*
        ReportPlanTags:
          description: Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        ReportDeliveryChannel:
          type: object
          description: A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
          properties:
            Formats:
              type: array
              description: 'A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.'
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            S3BucketName:
              type: string
              description: The unique name of the S3 bucket that receives your reports.
            S3KeyPrefix:
              type: string
              description: 'The prefix for where AWS Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.'
          additionalProperties: false
          required:
            - S3BucketName
        ReportSetting:
          type: object
          description: Identifies the report template for the report. Reports are built using a report template.
          properties:
            ReportTemplate:
              type: string
              description: 'Identifies the report template for the report. Reports are built using a report template. The report templates are: `BACKUP_JOB_REPORT | COPY_JOB_REPORT | RESTORE_JOB_REPORT`'
            FrameworkArns:
              type: array
              description: The Amazon Resource Names (ARNs) of the frameworks a report covers.
              x-insertionOrder: false
              uniqueItems: true
              items:
                type: string
            Accounts:
              type: array
              description: The list of AWS accounts that a report covers.
              x-insertionOrder: false
              uniqueItems: true
              items:
                type: string
            OrganizationUnits:
              type: array
              description: The list of AWS organization units that a report covers.
              x-insertionOrder: false
              uniqueItems: true
              items:
                type: string
            Regions:
              type: array
              description: The list of AWS regions that a report covers.
              x-insertionOrder: false
              uniqueItems: true
              items:
                type: string
          additionalProperties: false
          required:
            - ReportTemplate
      required:
        - ReportDeliveryChannel
        - ReportSetting
      x-stackql-resource-name: report_plan
      description: Contains detailed information about a report plan in AWS Backup Audit Manager.
      x-type-name: AWS::Backup::ReportPlan
      x-stackql-primary-identifier:
        - ReportPlanArn
      x-create-only-properties:
        - ReportPlanName
      x-read-only-properties:
        - ReportPlanArn
      x-required-properties:
        - ReportDeliveryChannel
        - ReportSetting
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/ReportPlanTags
        permissions:
          - backup:TagResource
          - backup:UntagResource
          - backup:ListTags
      x-required-permissions:
        create:
          - backup:CreateReportPlan
          - backup:DescribeReportPlan
          - backup:ListTags
          - backup:TagResource
          - iam:CreateServiceLinkedRole
        read:
          - backup:DescribeReportPlan
          - backup:ListTags
        update:
          - backup:DescribeReportPlan
          - backup:UpdateReportPlan
          - backup:ListTags
          - backup:UntagResource
          - backup:TagResource
        delete:
          - backup:DeleteReportPlan
          - backup:DescribeReportPlan
        list:
          - backup:ListReportPlans
    RestoreTestingRecoveryPointSelection:
      type: object
      additionalProperties: false
      properties:
        Algorithm:
          $ref: '#/components/schemas/RestoreTestingRecoveryPointSelectionAlgorithm'
        SelectionWindowDays:
          type: integer
        RecoveryPointTypes:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/RestoreTestingRecoveryPointType'
        IncludeVaults:
          type: array
          x-insertionOrder: false
          items:
            type: string
        ExcludeVaults:
          type: array
          x-insertionOrder: false
          items:
            type: string
      required:
        - Algorithm
        - RecoveryPointTypes
        - IncludeVaults
    RestoreTestingRecoveryPointSelectionAlgorithm:
      type: string
      enum:
        - LATEST_WITHIN_WINDOW
        - RANDOM_WITHIN_WINDOW
    RestoreTestingRecoveryPointType:
      type: string
      enum:
        - SNAPSHOT
        - CONTINUOUS
    RestoreTestingScheduleStatus:
      type: string
      enum:
        - ACTIVE
        - SUSPENDED
    RestoreTestingPlan:
      type: object
      properties:
        RecoveryPointSelection:
          $ref: '#/components/schemas/RestoreTestingRecoveryPointSelection'
        RestoreTestingPlanArn:
          type: string
        RestoreTestingPlanName:
          type: string
        ScheduleExpression:
          type: string
        ScheduleExpressionTimezone:
          type: string
        ScheduleStatus:
          $ref: '#/components/schemas/RestoreTestingScheduleStatus'
        StartWindowHours:
          type: integer
        Tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
          x-insertionOrder: false
          uniqueItems: true
      required:
        - RecoveryPointSelection
        - ScheduleExpression
        - RestoreTestingPlanName
      x-stackql-resource-name: restore_testing_plan
      description: Definition of AWS::Backup::RestoreTestingPlan Resource Type
      x-type-name: AWS::Backup::RestoreTestingPlan
      x-stackql-primary-identifier:
        - RestoreTestingPlanName
      x-create-only-properties:
        - RestoreTestingPlanName
      x-read-only-properties:
        - RestoreTestingPlanArn
      x-required-properties:
        - RecoveryPointSelection
        - ScheduleExpression
        - RestoreTestingPlanName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - backup:TagResource
          - backup:UntagResource
          - backup:ListTags
      x-required-permissions:
        create:
          - backup:CreateRestoreTestingPlan
          - backup:UpdateRestoreTestingPlanScheduleStatus
          - backup:TagResource
          - backup:GetRestoreTestingPlan
          - backup:ListTags
        read:
          - backup:GetRestoreTestingPlan
          - backup:ListTags
        update:
          - backup:UpdateRestoreTestingPlan
          - backup:UpdateRestoreTestingPlanScheduleStatus
          - backup:TagResource
          - backup:UntagResource
          - backup:GetRestoreTestingPlan
          - backup:ListTags
        delete:
          - backup:DeleteRestoreTestingPlan
          - backup:GetRestoreTestingPlan
        list:
          - backup:ListRestoreTestingPlans
    KeyValue:
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
      required:
        - Key
        - Value
      type: object
    ProtectedResourceConditions:
      additionalProperties: false
      properties:
        StringEquals:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/KeyValue'
        StringNotEquals:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/KeyValue'
      type: object
    SensitiveStringMap:
      additionalProperties: false
      x-patternProperties:
        .+:
          type: string
      type: object
    RestoreTestingSelection:
      type: object
      properties:
        IamRoleArn:
          type: string
        ProtectedResourceArns:
          type: array
          x-insertionOrder: false
          items:
            type: string
        ProtectedResourceConditions:
          $ref: '#/components/schemas/ProtectedResourceConditions'
        ProtectedResourceType:
          type: string
        RestoreMetadataOverrides:
          $ref: '#/components/schemas/SensitiveStringMap'
        RestoreTestingPlanName:
          type: string
        RestoreTestingSelectionName:
          type: string
        ValidationWindowHours:
          type: integer
      required:
        - IamRoleArn
        - ProtectedResourceType
        - RestoreTestingPlanName
        - RestoreTestingSelectionName
      x-stackql-resource-name: restore_testing_selection
      description: Resource Type definition for AWS::Backup::RestoreTestingSelection
      x-type-name: AWS::Backup::RestoreTestingSelection
      x-stackql-primary-identifier:
        - RestoreTestingPlanName
        - RestoreTestingSelectionName
      x-create-only-properties:
        - ProtectedResourceType
        - RestoreTestingPlanName
        - RestoreTestingSelectionName
      x-required-properties:
        - IamRoleArn
        - ProtectedResourceType
        - RestoreTestingPlanName
        - RestoreTestingSelectionName
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - backup:CreateRestoreTestingSelection
          - backup:GetRestoreTestingSelection
          - iam:PassRole
        read:
          - backup:GetRestoreTestingSelection
        update:
          - backup:UpdateRestoreTestingSelection
          - backup:GetRestoreTestingSelection
          - iam:PassRole
        delete:
          - backup:DeleteRestoreTestingSelection
          - backup:GetRestoreTestingSelection
        list:
          - backup:ListRestoreTestingSelections
          - backup:ListRestoreTestingPlans
    CreateBackupPlanRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            BackupPlan:
              $ref: '#/components/schemas/BackupPlanResourceType'
            BackupPlanTags:
              type: object
              additionalProperties: false
              x-patternProperties:
                ^.{1,128}$:
                  type: string
            BackupPlanArn:
              type: string
            BackupPlanId:
              type: string
            VersionId:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateBackupPlanRequest
      type: object
      required: []
    CreateBackupSelectionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              type: string
            BackupPlanId:
              type: string
            BackupSelection:
              $ref: '#/components/schemas/BackupSelectionResourceType'
            SelectionId:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateBackupSelectionRequest
      type: object
      required: []
    CreateBackupVaultRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccessPolicy:
              type: object
            BackupVaultName:
              $ref: '#/components/schemas/BackupVaultNamePattern'
            BackupVaultTags:
              type: object
              additionalProperties: false
              x-patternProperties:
                ^.{1,128}$:
                  type: string
            EncryptionKeyArn:
              type: string
            Notifications:
              $ref: '#/components/schemas/NotificationObjectType'
            LockConfiguration:
              $ref: '#/components/schemas/LockConfigurationType'
            BackupVaultArn:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateBackupVaultRequest
      type: object
      required: []
    CreateFrameworkRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            FrameworkName:
              description: The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
              type: string
              pattern: '[a-zA-Z][_a-zA-Z0-9]*'
              minLength: 1
              maxLength: 256
            FrameworkDescription:
              description: An optional description of the framework with a maximum 1,024 characters.
              type: string
              minLength: 0
              maxLength: 1024
            FrameworkArn:
              description: An Amazon Resource Name (ARN) that uniquely identifies Framework as a resource
              type: string
            DeploymentStatus:
              description: 'The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED | FAILED`'
              type: string
            CreationTime:
              description: The date and time that a framework is created, in ISO 8601 representation. The value of CreationTime is accurate to milliseconds. For example, 2020-07-10T15:00:00.000-08:00 represents the 10th of July 2020 at 3:00 PM 8 hours behind UTC.
              type: string
            FrameworkControls:
              description: Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/FrameworkControl'
            FrameworkStatus:
              type: string
              description: |-
                A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. The statuses are:

                `ACTIVE` when recording is turned on for all resources governed by the framework.

                `PARTIALLY_ACTIVE` when recording is turned off for at least one resource governed by the framework.

                `INACTIVE` when recording is turned off for all resources governed by the framework.

                `UNAVAILABLE` when AWS Backup is unable to validate recording status at this time.
            FrameworkTags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
              description: Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
          x-stackQL-stringOnly: true
      x-title: CreateFrameworkRequest
      type: object
      required: []
    CreateLogicallyAirGappedBackupVaultRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccessPolicy:
              type: object
            BackupVaultName:
              $ref: '#/components/schemas/BackupVaultNamePattern'
            MinRetentionDays:
              type: integer
            MaxRetentionDays:
              type: integer
            BackupVaultTags:
              type: object
              additionalProperties: false
              x-patternProperties:
                ^.{1,128}$:
                  type: string
            Notifications:
              $ref: '#/components/schemas/NotificationObjectType'
            EncryptionKeyArn:
              type: string
            BackupVaultArn:
              type: string
            VaultState:
              type: string
            VaultType:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateLogicallyAirGappedBackupVaultRequest
      type: object
      required: []
    CreateReportPlanRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ReportPlanName:
              type: string
              description: The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
              minLength: 1
              maxLength: 256
              pattern: '[a-zA-Z][_a-zA-Z0-9]*'
            ReportPlanArn:
              type: string
              description: An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.
            ReportPlanDescription:
              type: string
              description: An optional description of the report plan with a maximum of 1,024 characters.
              minLength: 0
              maxLength: 1024
              pattern: .*\S.*
            ReportPlanTags:
              description: Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            ReportDeliveryChannel:
              type: object
              description: A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
              properties:
                Formats:
                  type: array
                  description: 'A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.'
                  uniqueItems: true
                  x-insertionOrder: false
                  items:
                    type: string
                S3BucketName:
                  type: string
                  description: The unique name of the S3 bucket that receives your reports.
                S3KeyPrefix:
                  type: string
                  description: 'The prefix for where AWS Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.'
              additionalProperties: false
              required:
                - S3BucketName
            ReportSetting:
              type: object
              description: Identifies the report template for the report. Reports are built using a report template.
              properties:
                ReportTemplate:
                  type: string
                  description: 'Identifies the report template for the report. Reports are built using a report template. The report templates are: `BACKUP_JOB_REPORT | COPY_JOB_REPORT | RESTORE_JOB_REPORT`'
                FrameworkArns:
                  type: array
                  description: The Amazon Resource Names (ARNs) of the frameworks a report covers.
                  x-insertionOrder: false
                  uniqueItems: true
                  items:
                    type: string
                Accounts:
                  type: array
                  description: The list of AWS accounts that a report covers.
                  x-insertionOrder: false
                  uniqueItems: true
                  items:
                    type: string
                OrganizationUnits:
                  type: array
                  description: The list of AWS organization units that a report covers.
                  x-insertionOrder: false
                  uniqueItems: true
                  items:
                    type: string
                Regions:
                  type: array
                  description: The list of AWS regions that a report covers.
                  x-insertionOrder: false
                  uniqueItems: true
                  items:
                    type: string
              additionalProperties: false
              required:
                - ReportTemplate
          x-stackQL-stringOnly: true
      x-title: CreateReportPlanRequest
      type: object
      required: []
    CreateRestoreTestingPlanRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RecoveryPointSelection:
              $ref: '#/components/schemas/RestoreTestingRecoveryPointSelection'
            RestoreTestingPlanArn:
              type: string
            RestoreTestingPlanName:
              type: string
            ScheduleExpression:
              type: string
            ScheduleExpressionTimezone:
              type: string
            ScheduleStatus:
              $ref: '#/components/schemas/RestoreTestingScheduleStatus'
            StartWindowHours:
              type: integer
            Tags:
              items:
                $ref: '#/components/schemas/Tag'
              type: array
              x-insertionOrder: false
              uniqueItems: true
          x-stackQL-stringOnly: true
      x-title: CreateRestoreTestingPlanRequest
      type: object
      required: []
    CreateRestoreTestingSelectionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IamRoleArn:
              type: string
            ProtectedResourceArns:
              type: array
              x-insertionOrder: false
              items:
                type: string
            ProtectedResourceConditions:
              $ref: '#/components/schemas/ProtectedResourceConditions'
            ProtectedResourceType:
              type: string
            RestoreMetadataOverrides:
              $ref: '#/components/schemas/SensitiveStringMap'
            RestoreTestingPlanName:
              type: string
            RestoreTestingSelectionName:
              type: string
            ValidationWindowHours:
              type: integer
          x-stackQL-stringOnly: true
      x-title: CreateRestoreTestingSelectionRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    backup_plans:
      name: backup_plans
      id: aws.backup.backup_plans
      x-cfn-schema-name: BackupPlan
      x-cfn-type-name: AWS::Backup::BackupPlan
      x-identifiers:
        - BackupPlanId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__BackupPlan&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::BackupPlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::BackupPlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::BackupPlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/backup_plans/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/backup_plans/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/backup_plans/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.BackupPlan') as backup_plan,
              JSON_EXTRACT(Properties, '$.BackupPlanTags') as backup_plan_tags,
              JSON_EXTRACT(Properties, '$.BackupPlanArn') as backup_plan_arn,
              JSON_EXTRACT(Properties, '$.BackupPlanId') as backup_plan_id,
              JSON_EXTRACT(Properties, '$.VersionId') as version_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::BackupPlan'
              AND data__Identifier = '<BackupPlanId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.BackupPlan') as backup_plan,
                JSON_EXTRACT(detail.Properties, '$.BackupPlanTags') as backup_plan_tags,
                JSON_EXTRACT(detail.Properties, '$.BackupPlanArn') as backup_plan_arn,
                JSON_EXTRACT(detail.Properties, '$.BackupPlanId') as backup_plan_id,
                JSON_EXTRACT(detail.Properties, '$.VersionId') as version_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Backup::BackupPlan'
                AND detail.data__TypeName = 'AWS::Backup::BackupPlan'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'BackupPlan') as backup_plan,
                  json_extract_path_text(Properties, 'BackupPlanTags') as backup_plan_tags,
                  json_extract_path_text(Properties, 'BackupPlanArn') as backup_plan_arn,
                  json_extract_path_text(Properties, 'BackupPlanId') as backup_plan_id,
                  json_extract_path_text(Properties, 'VersionId') as version_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::BackupPlan'
                  AND data__Identifier = '<BackupPlanId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'BackupPlan') as backup_plan,
                    json_extract_path_text(detail.Properties, 'BackupPlanTags') as backup_plan_tags,
                    json_extract_path_text(detail.Properties, 'BackupPlanArn') as backup_plan_arn,
                    json_extract_path_text(detail.Properties, 'BackupPlanId') as backup_plan_id,
                    json_extract_path_text(detail.Properties, 'VersionId') as version_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Backup::BackupPlan'
                    AND detail.data__TypeName = 'AWS::Backup::BackupPlan'
                    AND listing.region = 'us-east-1'
    backup_plans_list_only:
      name: backup_plans_list_only
      id: aws.backup.backup_plans_list_only
      x-cfn-schema-name: BackupPlan
      x-cfn-type-name: AWS::Backup::BackupPlan
      x-identifiers:
        - BackupPlanId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BackupPlanId') as backup_plan_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::BackupPlan'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'BackupPlanId') as backup_plan_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::BackupPlan'
                AND region = 'us-east-1'
    backup_selections:
      name: backup_selections
      id: aws.backup.backup_selections
      x-cfn-schema-name: BackupSelection
      x-cfn-type-name: AWS::Backup::BackupSelection
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__BackupSelection&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::BackupSelection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::BackupSelection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/backup_selections/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/backup_selections/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.BackupPlanId') as backup_plan_id,
              JSON_EXTRACT(Properties, '$.BackupSelection') as backup_selection,
              JSON_EXTRACT(Properties, '$.SelectionId') as selection_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::BackupSelection'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.BackupPlanId') as backup_plan_id,
                JSON_EXTRACT(detail.Properties, '$.BackupSelection') as backup_selection,
                JSON_EXTRACT(detail.Properties, '$.SelectionId') as selection_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Backup::BackupSelection'
                AND detail.data__TypeName = 'AWS::Backup::BackupSelection'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'BackupPlanId') as backup_plan_id,
                  json_extract_path_text(Properties, 'BackupSelection') as backup_selection,
                  json_extract_path_text(Properties, 'SelectionId') as selection_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::BackupSelection'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'BackupPlanId') as backup_plan_id,
                    json_extract_path_text(detail.Properties, 'BackupSelection') as backup_selection,
                    json_extract_path_text(detail.Properties, 'SelectionId') as selection_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Backup::BackupSelection'
                    AND detail.data__TypeName = 'AWS::Backup::BackupSelection'
                    AND listing.region = 'us-east-1'
    backup_selections_list_only:
      name: backup_selections_list_only
      id: aws.backup.backup_selections_list_only
      x-cfn-schema-name: BackupSelection
      x-cfn-type-name: AWS::Backup::BackupSelection
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::BackupSelection'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::BackupSelection'
                AND region = 'us-east-1'
    backup_vaults:
      name: backup_vaults
      id: aws.backup.backup_vaults
      x-cfn-schema-name: BackupVault
      x-cfn-type-name: AWS::Backup::BackupVault
      x-identifiers:
        - BackupVaultName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__BackupVault&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::BackupVault"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::BackupVault"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::BackupVault"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/backup_vaults/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/backup_vaults/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/backup_vaults/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessPolicy') as access_policy,
              JSON_EXTRACT(Properties, '$.BackupVaultName') as backup_vault_name,
              JSON_EXTRACT(Properties, '$.BackupVaultTags') as backup_vault_tags,
              JSON_EXTRACT(Properties, '$.EncryptionKeyArn') as encryption_key_arn,
              JSON_EXTRACT(Properties, '$.Notifications') as notifications,
              JSON_EXTRACT(Properties, '$.LockConfiguration') as lock_configuration,
              JSON_EXTRACT(Properties, '$.BackupVaultArn') as backup_vault_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::BackupVault'
              AND data__Identifier = '<BackupVaultName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccessPolicy') as access_policy,
                JSON_EXTRACT(detail.Properties, '$.BackupVaultName') as backup_vault_name,
                JSON_EXTRACT(detail.Properties, '$.BackupVaultTags') as backup_vault_tags,
                JSON_EXTRACT(detail.Properties, '$.EncryptionKeyArn') as encryption_key_arn,
                JSON_EXTRACT(detail.Properties, '$.Notifications') as notifications,
                JSON_EXTRACT(detail.Properties, '$.LockConfiguration') as lock_configuration,
                JSON_EXTRACT(detail.Properties, '$.BackupVaultArn') as backup_vault_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Backup::BackupVault'
                AND detail.data__TypeName = 'AWS::Backup::BackupVault'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccessPolicy') as access_policy,
                  json_extract_path_text(Properties, 'BackupVaultName') as backup_vault_name,
                  json_extract_path_text(Properties, 'BackupVaultTags') as backup_vault_tags,
                  json_extract_path_text(Properties, 'EncryptionKeyArn') as encryption_key_arn,
                  json_extract_path_text(Properties, 'Notifications') as notifications,
                  json_extract_path_text(Properties, 'LockConfiguration') as lock_configuration,
                  json_extract_path_text(Properties, 'BackupVaultArn') as backup_vault_arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::BackupVault'
                  AND data__Identifier = '<BackupVaultName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccessPolicy') as access_policy,
                    json_extract_path_text(detail.Properties, 'BackupVaultName') as backup_vault_name,
                    json_extract_path_text(detail.Properties, 'BackupVaultTags') as backup_vault_tags,
                    json_extract_path_text(detail.Properties, 'EncryptionKeyArn') as encryption_key_arn,
                    json_extract_path_text(detail.Properties, 'Notifications') as notifications,
                    json_extract_path_text(detail.Properties, 'LockConfiguration') as lock_configuration,
                    json_extract_path_text(detail.Properties, 'BackupVaultArn') as backup_vault_arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Backup::BackupVault'
                    AND detail.data__TypeName = 'AWS::Backup::BackupVault'
                    AND listing.region = 'us-east-1'
    backup_vaults_list_only:
      name: backup_vaults_list_only
      id: aws.backup.backup_vaults_list_only
      x-cfn-schema-name: BackupVault
      x-cfn-type-name: AWS::Backup::BackupVault
      x-identifiers:
        - BackupVaultName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BackupVaultName') as backup_vault_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::BackupVault'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'BackupVaultName') as backup_vault_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::BackupVault'
                AND region = 'us-east-1'
    frameworks:
      name: frameworks
      id: aws.backup.frameworks
      x-cfn-schema-name: Framework
      x-cfn-type-name: AWS::Backup::Framework
      x-identifiers:
        - FrameworkArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Framework&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::Framework"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::Framework"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::Framework"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/frameworks/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/frameworks/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/frameworks/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FrameworkName') as framework_name,
              JSON_EXTRACT(Properties, '$.FrameworkDescription') as framework_description,
              JSON_EXTRACT(Properties, '$.FrameworkArn') as framework_arn,
              JSON_EXTRACT(Properties, '$.DeploymentStatus') as deployment_status,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.FrameworkControls') as framework_controls,
              JSON_EXTRACT(Properties, '$.FrameworkStatus') as framework_status,
              JSON_EXTRACT(Properties, '$.FrameworkTags') as framework_tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::Framework'
              AND data__Identifier = '<FrameworkArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.FrameworkName') as framework_name,
                JSON_EXTRACT(detail.Properties, '$.FrameworkDescription') as framework_description,
                JSON_EXTRACT(detail.Properties, '$.FrameworkArn') as framework_arn,
                JSON_EXTRACT(detail.Properties, '$.DeploymentStatus') as deployment_status,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.FrameworkControls') as framework_controls,
                JSON_EXTRACT(detail.Properties, '$.FrameworkStatus') as framework_status,
                JSON_EXTRACT(detail.Properties, '$.FrameworkTags') as framework_tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Backup::Framework'
                AND detail.data__TypeName = 'AWS::Backup::Framework'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'FrameworkName') as framework_name,
                  json_extract_path_text(Properties, 'FrameworkDescription') as framework_description,
                  json_extract_path_text(Properties, 'FrameworkArn') as framework_arn,
                  json_extract_path_text(Properties, 'DeploymentStatus') as deployment_status,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'FrameworkControls') as framework_controls,
                  json_extract_path_text(Properties, 'FrameworkStatus') as framework_status,
                  json_extract_path_text(Properties, 'FrameworkTags') as framework_tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::Framework'
                  AND data__Identifier = '<FrameworkArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'FrameworkName') as framework_name,
                    json_extract_path_text(detail.Properties, 'FrameworkDescription') as framework_description,
                    json_extract_path_text(detail.Properties, 'FrameworkArn') as framework_arn,
                    json_extract_path_text(detail.Properties, 'DeploymentStatus') as deployment_status,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'FrameworkControls') as framework_controls,
                    json_extract_path_text(detail.Properties, 'FrameworkStatus') as framework_status,
                    json_extract_path_text(detail.Properties, 'FrameworkTags') as framework_tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Backup::Framework'
                    AND detail.data__TypeName = 'AWS::Backup::Framework'
                    AND listing.region = 'us-east-1'
    frameworks_list_only:
      name: frameworks_list_only
      id: aws.backup.frameworks_list_only
      x-cfn-schema-name: Framework
      x-cfn-type-name: AWS::Backup::Framework
      x-identifiers:
        - FrameworkArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FrameworkArn') as framework_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::Framework'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FrameworkArn') as framework_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::Framework'
                AND region = 'us-east-1'
    logically_air_gapped_backup_vaults:
      name: logically_air_gapped_backup_vaults
      id: aws.backup.logically_air_gapped_backup_vaults
      x-cfn-schema-name: LogicallyAirGappedBackupVault
      x-cfn-type-name: AWS::Backup::LogicallyAirGappedBackupVault
      x-identifiers:
        - BackupVaultName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LogicallyAirGappedBackupVault&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::LogicallyAirGappedBackupVault"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::LogicallyAirGappedBackupVault"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::LogicallyAirGappedBackupVault"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/logically_air_gapped_backup_vaults/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/logically_air_gapped_backup_vaults/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/logically_air_gapped_backup_vaults/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessPolicy') as access_policy,
              JSON_EXTRACT(Properties, '$.BackupVaultName') as backup_vault_name,
              JSON_EXTRACT(Properties, '$.MinRetentionDays') as min_retention_days,
              JSON_EXTRACT(Properties, '$.MaxRetentionDays') as max_retention_days,
              JSON_EXTRACT(Properties, '$.BackupVaultTags') as backup_vault_tags,
              JSON_EXTRACT(Properties, '$.Notifications') as notifications,
              JSON_EXTRACT(Properties, '$.EncryptionKeyArn') as encryption_key_arn,
              JSON_EXTRACT(Properties, '$.BackupVaultArn') as backup_vault_arn,
              JSON_EXTRACT(Properties, '$.VaultState') as vault_state,
              JSON_EXTRACT(Properties, '$.VaultType') as vault_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::LogicallyAirGappedBackupVault'
              AND data__Identifier = '<BackupVaultName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccessPolicy') as access_policy,
                JSON_EXTRACT(detail.Properties, '$.BackupVaultName') as backup_vault_name,
                JSON_EXTRACT(detail.Properties, '$.MinRetentionDays') as min_retention_days,
                JSON_EXTRACT(detail.Properties, '$.MaxRetentionDays') as max_retention_days,
                JSON_EXTRACT(detail.Properties, '$.BackupVaultTags') as backup_vault_tags,
                JSON_EXTRACT(detail.Properties, '$.Notifications') as notifications,
                JSON_EXTRACT(detail.Properties, '$.EncryptionKeyArn') as encryption_key_arn,
                JSON_EXTRACT(detail.Properties, '$.BackupVaultArn') as backup_vault_arn,
                JSON_EXTRACT(detail.Properties, '$.VaultState') as vault_state,
                JSON_EXTRACT(detail.Properties, '$.VaultType') as vault_type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Backup::LogicallyAirGappedBackupVault'
                AND detail.data__TypeName = 'AWS::Backup::LogicallyAirGappedBackupVault'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccessPolicy') as access_policy,
                  json_extract_path_text(Properties, 'BackupVaultName') as backup_vault_name,
                  json_extract_path_text(Properties, 'MinRetentionDays') as min_retention_days,
                  json_extract_path_text(Properties, 'MaxRetentionDays') as max_retention_days,
                  json_extract_path_text(Properties, 'BackupVaultTags') as backup_vault_tags,
                  json_extract_path_text(Properties, 'Notifications') as notifications,
                  json_extract_path_text(Properties, 'EncryptionKeyArn') as encryption_key_arn,
                  json_extract_path_text(Properties, 'BackupVaultArn') as backup_vault_arn,
                  json_extract_path_text(Properties, 'VaultState') as vault_state,
                  json_extract_path_text(Properties, 'VaultType') as vault_type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::LogicallyAirGappedBackupVault'
                  AND data__Identifier = '<BackupVaultName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccessPolicy') as access_policy,
                    json_extract_path_text(detail.Properties, 'BackupVaultName') as backup_vault_name,
                    json_extract_path_text(detail.Properties, 'MinRetentionDays') as min_retention_days,
                    json_extract_path_text(detail.Properties, 'MaxRetentionDays') as max_retention_days,
                    json_extract_path_text(detail.Properties, 'BackupVaultTags') as backup_vault_tags,
                    json_extract_path_text(detail.Properties, 'Notifications') as notifications,
                    json_extract_path_text(detail.Properties, 'EncryptionKeyArn') as encryption_key_arn,
                    json_extract_path_text(detail.Properties, 'BackupVaultArn') as backup_vault_arn,
                    json_extract_path_text(detail.Properties, 'VaultState') as vault_state,
                    json_extract_path_text(detail.Properties, 'VaultType') as vault_type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Backup::LogicallyAirGappedBackupVault'
                    AND detail.data__TypeName = 'AWS::Backup::LogicallyAirGappedBackupVault'
                    AND listing.region = 'us-east-1'
    logically_air_gapped_backup_vaults_list_only:
      name: logically_air_gapped_backup_vaults_list_only
      id: aws.backup.logically_air_gapped_backup_vaults_list_only
      x-cfn-schema-name: LogicallyAirGappedBackupVault
      x-cfn-type-name: AWS::Backup::LogicallyAirGappedBackupVault
      x-identifiers:
        - BackupVaultName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BackupVaultName') as backup_vault_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::LogicallyAirGappedBackupVault'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'BackupVaultName') as backup_vault_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::LogicallyAirGappedBackupVault'
                AND region = 'us-east-1'
    report_plans:
      name: report_plans
      id: aws.backup.report_plans
      x-cfn-schema-name: ReportPlan
      x-cfn-type-name: AWS::Backup::ReportPlan
      x-identifiers:
        - ReportPlanArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ReportPlan&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::ReportPlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::ReportPlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::ReportPlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/report_plans/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/report_plans/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/report_plans/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ReportPlanName') as report_plan_name,
              JSON_EXTRACT(Properties, '$.ReportPlanArn') as report_plan_arn,
              JSON_EXTRACT(Properties, '$.ReportPlanDescription') as report_plan_description,
              JSON_EXTRACT(Properties, '$.ReportPlanTags') as report_plan_tags,
              JSON_EXTRACT(Properties, '$.ReportDeliveryChannel') as report_delivery_channel,
              JSON_EXTRACT(Properties, '$.ReportSetting') as report_setting
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::ReportPlan'
              AND data__Identifier = '<ReportPlanArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ReportPlanName') as report_plan_name,
                JSON_EXTRACT(detail.Properties, '$.ReportPlanArn') as report_plan_arn,
                JSON_EXTRACT(detail.Properties, '$.ReportPlanDescription') as report_plan_description,
                JSON_EXTRACT(detail.Properties, '$.ReportPlanTags') as report_plan_tags,
                JSON_EXTRACT(detail.Properties, '$.ReportDeliveryChannel') as report_delivery_channel,
                JSON_EXTRACT(detail.Properties, '$.ReportSetting') as report_setting
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Backup::ReportPlan'
                AND detail.data__TypeName = 'AWS::Backup::ReportPlan'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ReportPlanName') as report_plan_name,
                  json_extract_path_text(Properties, 'ReportPlanArn') as report_plan_arn,
                  json_extract_path_text(Properties, 'ReportPlanDescription') as report_plan_description,
                  json_extract_path_text(Properties, 'ReportPlanTags') as report_plan_tags,
                  json_extract_path_text(Properties, 'ReportDeliveryChannel') as report_delivery_channel,
                  json_extract_path_text(Properties, 'ReportSetting') as report_setting
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::ReportPlan'
                  AND data__Identifier = '<ReportPlanArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ReportPlanName') as report_plan_name,
                    json_extract_path_text(detail.Properties, 'ReportPlanArn') as report_plan_arn,
                    json_extract_path_text(detail.Properties, 'ReportPlanDescription') as report_plan_description,
                    json_extract_path_text(detail.Properties, 'ReportPlanTags') as report_plan_tags,
                    json_extract_path_text(detail.Properties, 'ReportDeliveryChannel') as report_delivery_channel,
                    json_extract_path_text(detail.Properties, 'ReportSetting') as report_setting
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Backup::ReportPlan'
                    AND detail.data__TypeName = 'AWS::Backup::ReportPlan'
                    AND listing.region = 'us-east-1'
    report_plans_list_only:
      name: report_plans_list_only
      id: aws.backup.report_plans_list_only
      x-cfn-schema-name: ReportPlan
      x-cfn-type-name: AWS::Backup::ReportPlan
      x-identifiers:
        - ReportPlanArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ReportPlanArn') as report_plan_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::ReportPlan'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ReportPlanArn') as report_plan_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::ReportPlan'
                AND region = 'us-east-1'
    restore_testing_plans:
      name: restore_testing_plans
      id: aws.backup.restore_testing_plans
      x-cfn-schema-name: RestoreTestingPlan
      x-cfn-type-name: AWS::Backup::RestoreTestingPlan
      x-identifiers:
        - RestoreTestingPlanName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RestoreTestingPlan&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::RestoreTestingPlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::RestoreTestingPlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::RestoreTestingPlan"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/restore_testing_plans/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/restore_testing_plans/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/restore_testing_plans/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RecoveryPointSelection') as recovery_point_selection,
              JSON_EXTRACT(Properties, '$.RestoreTestingPlanArn') as restore_testing_plan_arn,
              JSON_EXTRACT(Properties, '$.RestoreTestingPlanName') as restore_testing_plan_name,
              JSON_EXTRACT(Properties, '$.ScheduleExpression') as schedule_expression,
              JSON_EXTRACT(Properties, '$.ScheduleExpressionTimezone') as schedule_expression_timezone,
              JSON_EXTRACT(Properties, '$.ScheduleStatus') as schedule_status,
              JSON_EXTRACT(Properties, '$.StartWindowHours') as start_window_hours,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::RestoreTestingPlan'
              AND data__Identifier = '<RestoreTestingPlanName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RecoveryPointSelection') as recovery_point_selection,
                JSON_EXTRACT(detail.Properties, '$.RestoreTestingPlanArn') as restore_testing_plan_arn,
                JSON_EXTRACT(detail.Properties, '$.RestoreTestingPlanName') as restore_testing_plan_name,
                JSON_EXTRACT(detail.Properties, '$.ScheduleExpression') as schedule_expression,
                JSON_EXTRACT(detail.Properties, '$.ScheduleExpressionTimezone') as schedule_expression_timezone,
                JSON_EXTRACT(detail.Properties, '$.ScheduleStatus') as schedule_status,
                JSON_EXTRACT(detail.Properties, '$.StartWindowHours') as start_window_hours,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Backup::RestoreTestingPlan'
                AND detail.data__TypeName = 'AWS::Backup::RestoreTestingPlan'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RecoveryPointSelection') as recovery_point_selection,
                  json_extract_path_text(Properties, 'RestoreTestingPlanArn') as restore_testing_plan_arn,
                  json_extract_path_text(Properties, 'RestoreTestingPlanName') as restore_testing_plan_name,
                  json_extract_path_text(Properties, 'ScheduleExpression') as schedule_expression,
                  json_extract_path_text(Properties, 'ScheduleExpressionTimezone') as schedule_expression_timezone,
                  json_extract_path_text(Properties, 'ScheduleStatus') as schedule_status,
                  json_extract_path_text(Properties, 'StartWindowHours') as start_window_hours,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::RestoreTestingPlan'
                  AND data__Identifier = '<RestoreTestingPlanName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RecoveryPointSelection') as recovery_point_selection,
                    json_extract_path_text(detail.Properties, 'RestoreTestingPlanArn') as restore_testing_plan_arn,
                    json_extract_path_text(detail.Properties, 'RestoreTestingPlanName') as restore_testing_plan_name,
                    json_extract_path_text(detail.Properties, 'ScheduleExpression') as schedule_expression,
                    json_extract_path_text(detail.Properties, 'ScheduleExpressionTimezone') as schedule_expression_timezone,
                    json_extract_path_text(detail.Properties, 'ScheduleStatus') as schedule_status,
                    json_extract_path_text(detail.Properties, 'StartWindowHours') as start_window_hours,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Backup::RestoreTestingPlan'
                    AND detail.data__TypeName = 'AWS::Backup::RestoreTestingPlan'
                    AND listing.region = 'us-east-1'
    restore_testing_plans_list_only:
      name: restore_testing_plans_list_only
      id: aws.backup.restore_testing_plans_list_only
      x-cfn-schema-name: RestoreTestingPlan
      x-cfn-type-name: AWS::Backup::RestoreTestingPlan
      x-identifiers:
        - RestoreTestingPlanName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestoreTestingPlanName') as restore_testing_plan_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::RestoreTestingPlan'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestoreTestingPlanName') as restore_testing_plan_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::RestoreTestingPlan'
                AND region = 'us-east-1'
    restore_testing_plan_tags:
      name: restore_testing_plan_tags
      id: aws.backup.restore_testing_plan_tags
      x-cfn-schema-name: RestoreTestingPlan
      x-cfn-type-name: AWS::Backup::RestoreTestingPlan
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.RecoveryPointSelection') as recovery_point_selection,
              JSON_EXTRACT(detail.Properties, '$.RestoreTestingPlanArn') as restore_testing_plan_arn,
              JSON_EXTRACT(detail.Properties, '$.RestoreTestingPlanName') as restore_testing_plan_name,
              JSON_EXTRACT(detail.Properties, '$.ScheduleExpression') as schedule_expression,
              JSON_EXTRACT(detail.Properties, '$.ScheduleExpressionTimezone') as schedule_expression_timezone,
              JSON_EXTRACT(detail.Properties, '$.ScheduleStatus') as schedule_status,
              JSON_EXTRACT(detail.Properties, '$.StartWindowHours') as start_window_hours
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Backup::RestoreTestingPlan'
              AND detail.data__TypeName = 'AWS::Backup::RestoreTestingPlan'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'RecoveryPointSelection') as recovery_point_selection,
                json_extract_path_text(detail.Properties, 'RestoreTestingPlanArn') as restore_testing_plan_arn,
                json_extract_path_text(detail.Properties, 'RestoreTestingPlanName') as restore_testing_plan_name,
                json_extract_path_text(detail.Properties, 'ScheduleExpression') as schedule_expression,
                json_extract_path_text(detail.Properties, 'ScheduleExpressionTimezone') as schedule_expression_timezone,
                json_extract_path_text(detail.Properties, 'ScheduleStatus') as schedule_status,
                json_extract_path_text(detail.Properties, 'StartWindowHours') as start_window_hours
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Backup::RestoreTestingPlan'
                AND detail.data__TypeName = 'AWS::Backup::RestoreTestingPlan'
                AND listing.region = 'us-east-1'
    restore_testing_selections:
      name: restore_testing_selections
      id: aws.backup.restore_testing_selections
      x-cfn-schema-name: RestoreTestingSelection
      x-cfn-type-name: AWS::Backup::RestoreTestingSelection
      x-identifiers:
        - RestoreTestingPlanName
        - RestoreTestingSelectionName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RestoreTestingSelection&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::RestoreTestingSelection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::RestoreTestingSelection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Backup::RestoreTestingSelection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/restore_testing_selections/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/restore_testing_selections/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/restore_testing_selections/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IamRoleArn') as iam_role_arn,
              JSON_EXTRACT(Properties, '$.ProtectedResourceArns') as protected_resource_arns,
              JSON_EXTRACT(Properties, '$.ProtectedResourceConditions') as protected_resource_conditions,
              JSON_EXTRACT(Properties, '$.ProtectedResourceType') as protected_resource_type,
              JSON_EXTRACT(Properties, '$.RestoreMetadataOverrides') as restore_metadata_overrides,
              JSON_EXTRACT(Properties, '$.RestoreTestingPlanName') as restore_testing_plan_name,
              JSON_EXTRACT(Properties, '$.RestoreTestingSelectionName') as restore_testing_selection_name,
              JSON_EXTRACT(Properties, '$.ValidationWindowHours') as validation_window_hours
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::RestoreTestingSelection'
              AND data__Identifier = '<RestoreTestingPlanName>|<RestoreTestingSelectionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IamRoleArn') as iam_role_arn,
                JSON_EXTRACT(detail.Properties, '$.ProtectedResourceArns') as protected_resource_arns,
                JSON_EXTRACT(detail.Properties, '$.ProtectedResourceConditions') as protected_resource_conditions,
                JSON_EXTRACT(detail.Properties, '$.ProtectedResourceType') as protected_resource_type,
                JSON_EXTRACT(detail.Properties, '$.RestoreMetadataOverrides') as restore_metadata_overrides,
                JSON_EXTRACT(detail.Properties, '$.RestoreTestingPlanName') as restore_testing_plan_name,
                JSON_EXTRACT(detail.Properties, '$.RestoreTestingSelectionName') as restore_testing_selection_name,
                JSON_EXTRACT(detail.Properties, '$.ValidationWindowHours') as validation_window_hours
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Backup::RestoreTestingSelection'
                AND detail.data__TypeName = 'AWS::Backup::RestoreTestingSelection'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IamRoleArn') as iam_role_arn,
                  json_extract_path_text(Properties, 'ProtectedResourceArns') as protected_resource_arns,
                  json_extract_path_text(Properties, 'ProtectedResourceConditions') as protected_resource_conditions,
                  json_extract_path_text(Properties, 'ProtectedResourceType') as protected_resource_type,
                  json_extract_path_text(Properties, 'RestoreMetadataOverrides') as restore_metadata_overrides,
                  json_extract_path_text(Properties, 'RestoreTestingPlanName') as restore_testing_plan_name,
                  json_extract_path_text(Properties, 'RestoreTestingSelectionName') as restore_testing_selection_name,
                  json_extract_path_text(Properties, 'ValidationWindowHours') as validation_window_hours
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::RestoreTestingSelection'
                  AND data__Identifier = '<RestoreTestingPlanName>|<RestoreTestingSelectionName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IamRoleArn') as iam_role_arn,
                    json_extract_path_text(detail.Properties, 'ProtectedResourceArns') as protected_resource_arns,
                    json_extract_path_text(detail.Properties, 'ProtectedResourceConditions') as protected_resource_conditions,
                    json_extract_path_text(detail.Properties, 'ProtectedResourceType') as protected_resource_type,
                    json_extract_path_text(detail.Properties, 'RestoreMetadataOverrides') as restore_metadata_overrides,
                    json_extract_path_text(detail.Properties, 'RestoreTestingPlanName') as restore_testing_plan_name,
                    json_extract_path_text(detail.Properties, 'RestoreTestingSelectionName') as restore_testing_selection_name,
                    json_extract_path_text(detail.Properties, 'ValidationWindowHours') as validation_window_hours
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Backup::RestoreTestingSelection'
                    AND detail.data__TypeName = 'AWS::Backup::RestoreTestingSelection'
                    AND listing.region = 'us-east-1'
    restore_testing_selections_list_only:
      name: restore_testing_selections_list_only
      id: aws.backup.restore_testing_selections_list_only
      x-cfn-schema-name: RestoreTestingSelection
      x-cfn-type-name: AWS::Backup::RestoreTestingSelection
      x-identifiers:
        - RestoreTestingPlanName
        - RestoreTestingSelectionName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestoreTestingPlanName') as restore_testing_plan_name,
              JSON_EXTRACT(Properties, '$.RestoreTestingSelectionName') as restore_testing_selection_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::RestoreTestingSelection'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestoreTestingPlanName') as restore_testing_plan_name,
                json_extract_path_text(Properties, 'RestoreTestingSelectionName') as restore_testing_selection_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::RestoreTestingSelection'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__BackupPlan&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateBackupPlan
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateBackupPlanRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__BackupSelection&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateBackupSelection
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateBackupSelectionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__BackupVault&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateBackupVault
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateBackupVaultRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Framework&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateFramework
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateFrameworkRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LogicallyAirGappedBackupVault&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLogicallyAirGappedBackupVault
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLogicallyAirGappedBackupVaultRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ReportPlan&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateReportPlan
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateReportPlanRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RestoreTestingPlan&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRestoreTestingPlan
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRestoreTestingPlanRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RestoreTestingSelection&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRestoreTestingSelection
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRestoreTestingSelectionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
