openapi: 3.0.0
info:
  title: Backup
  version: 1.0.0
paths: {}
components:
  schemas:
    BackupPlanResourceType:
      type: object
      additionalProperties: false
      properties:
        BackupPlanName:
          type: string
        AdvancedBackupSettings:
          type: array
          x-insertionOrder: true
          uniqueItems: false
          items:
            $ref: '#/components/schemas/AdvancedBackupSettingResourceType'
        BackupPlanRule:
          type: array
          x-insertionOrder: true
          uniqueItems: false
          items:
            $ref: '#/components/schemas/BackupRuleResourceType'
      required:
        - BackupPlanName
        - BackupPlanRule
    BackupRuleResourceType:
      type: object
      additionalProperties: false
      properties:
        RuleName:
          type: string
        TargetBackupVault:
          type: string
        StartWindowMinutes:
          type: number
        CompletionWindowMinutes:
          type: number
        ScheduleExpression:
          type: string
        RecoveryPointTags:
          type: object
          additionalProperties: false
          x-patternProperties:
            ^.{1,128}$:
              type: string
        CopyActions:
          type: array
          x-insertionOrder: true
          uniqueItems: false
          items:
            $ref: '#/components/schemas/CopyActionResourceType'
        Lifecycle:
          $ref: '#/components/schemas/LifecycleResourceType'
        EnableContinuousBackup:
          type: boolean
      required:
        - TargetBackupVault
        - RuleName
    AdvancedBackupSettingResourceType:
      type: object
      additionalProperties: false
      properties:
        BackupOptions:
          type: object
        ResourceType:
          type: string
      required:
        - BackupOptions
        - ResourceType
    CopyActionResourceType:
      type: object
      additionalProperties: false
      properties:
        Lifecycle:
          $ref: '#/components/schemas/LifecycleResourceType'
        DestinationBackupVaultArn:
          type: string
      required:
        - DestinationBackupVaultArn
    LifecycleResourceType:
      type: object
      additionalProperties: false
      properties:
        MoveToColdStorageAfterDays:
          type: number
        DeleteAfterDays:
          type: number
    BackupPlan:
      type: object
      properties:
        BackupPlan:
          $ref: '#/components/schemas/BackupPlanResourceType'
        BackupPlanTags:
          type: object
          additionalProperties: false
          x-patternProperties:
            ^.{1,128}$:
              type: string
        BackupPlanArn:
          type: string
        BackupPlanId:
          type: string
        VersionId:
          type: string
      required:
        - BackupPlan
      x-stackql-resource-name: backup_plan
      x-stackql-primaryIdentifier:
        - BackupPlanId
    BackupSelectionResourceType:
      type: object
      additionalProperties: false
      properties:
        IamRoleArn:
          type: string
        ListOfTags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ConditionResourceType'
        Resources:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        SelectionName:
          type: string
        NotResources:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Conditions:
          type: object
          additionalProperties: false
          properties:
            StringEquals:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ConditionParameter'
            StringNotEquals:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ConditionParameter'
            StringLike:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ConditionParameter'
            StringNotLike:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ConditionParameter'
      required:
        - SelectionName
        - IamRoleArn
    ConditionParameter:
      type: object
      additionalProperties: false
      properties:
        ConditionKey:
          type: string
        ConditionValue:
          type: string
    ConditionResourceType:
      type: object
      additionalProperties: false
      properties:
        ConditionKey:
          type: string
        ConditionValue:
          type: string
        ConditionType:
          type: string
      required:
        - ConditionValue
        - ConditionKey
        - ConditionType
    BackupSelection:
      type: object
      properties:
        Id:
          type: string
        BackupPlanId:
          type: string
        BackupSelection:
          $ref: '#/components/schemas/BackupSelectionResourceType'
        SelectionId:
          type: string
      required:
        - BackupSelection
        - BackupPlanId
      x-stackql-resource-name: backup_selection
      x-stackql-primaryIdentifier:
        - Id
    NotificationObjectType:
      type: object
      additionalProperties: false
      properties:
        BackupVaultEvents:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            type: string
        SNSTopicArn:
          type: string
      required:
        - SNSTopicArn
        - BackupVaultEvents
    LockConfigurationType:
      type: object
      additionalProperties: false
      properties:
        MinRetentionDays:
          type: integer
        MaxRetentionDays:
          type: integer
        ChangeableForDays:
          type: integer
      required:
        - MinRetentionDays
    BackupVaultNamePattern:
      type: string
      pattern: ^[a-zA-Z0-9\-\_]{2,50}$
    BackupVault:
      type: object
      properties:
        AccessPolicy:
          type: string
        BackupVaultName:
          $ref: '#/components/schemas/BackupVaultNamePattern'
        BackupVaultTags:
          type: object
          additionalProperties: false
          x-patternProperties:
            ^.{1,128}$:
              type: string
        EncryptionKeyArn:
          type: string
        Notifications:
          $ref: '#/components/schemas/NotificationObjectType'
        LockConfiguration:
          $ref: '#/components/schemas/LockConfigurationType'
        BackupVaultArn:
          type: string
      required:
        - BackupVaultName
      x-stackql-resource-name: backup_vault
      x-stackql-primaryIdentifier:
        - BackupVaultName
    FrameworkControl:
      type: object
      additionalProperties: false
      properties:
        ControlName:
          description: The name of a control. This name is between 1 and 256 characters.
          type: string
        ControlInputParameters:
          type: array
          description: A list of ParameterName and ParameterValue pairs.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ControlInputParameter'
        ControlScope:
          type: object
          description: 'The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.'
          additionalProperties: false
          properties:
            ComplianceResourceIds:
              description: The ID of the only AWS resource that you want your control scope to contain.
              type: array
              x-insertionOrder: false
              items:
                type: string
            ComplianceResourceTypes:
              type: array
              description: Describes whether the control scope includes one or more types of resources, such as `EFS` or `RDS`.
              x-insertionOrder: false
              items:
                type: string
            Tags:
              type: array
              description: Describes whether the control scope includes resources with one or more tags. Each tag is a key-value pair.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
      required:
        - ControlName
    ControlInputParameter:
      type: object
      additionalProperties: false
      properties:
        ParameterName:
          type: string
        ParameterValue:
          type: string
      required:
        - ParameterName
        - ParameterValue
    Tag:
      type: object
      description: A key-value pair to associate with a resource.
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      additionalProperties: false
    Framework:
      type: object
      properties:
        FrameworkName:
          description: The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
          type: string
          pattern: '[a-zA-Z][_a-zA-Z0-9]*'
          minLength: 1
          maxLength: 256
        FrameworkDescription:
          description: An optional description of the framework with a maximum 1,024 characters.
          type: string
          minLength: 0
          maxLength: 1024
        FrameworkArn:
          description: An Amazon Resource Name (ARN) that uniquely identifies Framework as a resource
          type: string
        DeploymentStatus:
          description: 'The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED | FAILED`'
          type: string
        CreationTime:
          description: The date and time that a framework is created, in ISO 8601 representation. The value of CreationTime is accurate to milliseconds. For example, 2020-07-10T15:00:00.000-08:00 represents the 10th of July 2020 at 3:00 PM 8 hours behind UTC.
          type: string
        FrameworkControls:
          description: Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/FrameworkControl'
        FrameworkStatus:
          type: string
          description: |-
            A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. The statuses are:

            `ACTIVE` when recording is turned on for all resources governed by the framework.

            `PARTIALLY_ACTIVE` when recording is turned off for at least one resource governed by the framework.

            `INACTIVE` when recording is turned off for all resources governed by the framework.

            `UNAVAILABLE` when AWS Backup is unable to validate recording status at this time.
        FrameworkTags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
      required:
        - FrameworkControls
      x-stackql-resource-name: framework
      x-stackql-primaryIdentifier:
        - FrameworkArn
    ReportPlan:
      type: object
      properties:
        ReportPlanName:
          type: string
          description: The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
          minLength: 1
          maxLength: 256
          pattern: '[a-zA-Z][_a-zA-Z0-9]*'
        ReportPlanArn:
          type: string
          description: An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.
        ReportPlanDescription:
          type: string
          description: An optional description of the report plan with a maximum of 1,024 characters.
          minLength: 0
          maxLength: 1024
          pattern: .*\S.*
        ReportPlanTags:
          description: Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        ReportDeliveryChannel:
          type: object
          description: A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
          properties:
            Formats:
              type: array
              description: 'A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.'
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            S3BucketName:
              type: string
              description: The unique name of the S3 bucket that receives your reports.
            S3KeyPrefix:
              type: string
              description: 'The prefix for where AWS Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.'
          additionalProperties: false
          required:
            - S3BucketName
        ReportSetting:
          type: object
          description: Identifies the report template for the report. Reports are built using a report template.
          properties:
            ReportTemplate:
              type: string
              description: 'Identifies the report template for the report. Reports are built using a report template. The report templates are: `BACKUP_JOB_REPORT | COPY_JOB_REPORT | RESTORE_JOB_REPORT`'
            FrameworkArns:
              type: array
              description: The Amazon Resource Names (ARNs) of the frameworks a report covers.
              x-insertionOrder: false
              uniqueItems: true
              items:
                type: string
            Accounts:
              type: array
              description: The list of AWS accounts that a report covers.
              x-insertionOrder: false
              uniqueItems: true
              items:
                type: string
            OrganizationUnits:
              type: array
              description: The list of AWS organization units that a report covers.
              x-insertionOrder: false
              uniqueItems: true
              items:
                type: string
            Regions:
              type: array
              description: The list of AWS regions that a report covers.
              x-insertionOrder: false
              uniqueItems: true
              items:
                type: string
          additionalProperties: false
          required:
            - ReportTemplate
      required:
        - ReportDeliveryChannel
        - ReportSetting
      x-stackql-resource-name: report_plan
      x-stackql-primaryIdentifier:
        - ReportPlanArn
  x-stackQL-resources:
    backup_plans:
      name: backup_plans
      id: aws.backup.backup_plans
      x-cfn-schema-name: BackupPlan
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BackupPlanId') as backup_plan_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::BackupPlan'
    backup_plan:
      name: backup_plan
      id: aws.backup.backup_plan
      x-cfn-schema-name: BackupPlan
      x-type: get
      x-identifiers:
        - BackupPlanId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BackupPlan.BackupPlanName') as backup_plan_backup_plan_name,
              JSON_EXTRACT(Properties, '$.BackupPlan.AdvancedBackupSettings') as backup_plan_advanced_backup_settings,
              JSON_EXTRACT(Properties, '$.BackupPlan.BackupPlanRule') as backup_plan_backup_plan_rule,
              JSON_EXTRACT(Properties, '$.BackupPlanTags') as backup_plan_tags,
              JSON_EXTRACT(Properties, '$.BackupPlanArn') as backup_plan_arn,
              JSON_EXTRACT(Properties, '$.BackupPlanId') as backup_plan_id,
              JSON_EXTRACT(Properties, '$.VersionId') as version_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::BackupPlan'
    backup_selections:
      name: backup_selections
      id: aws.backup.backup_selections
      x-cfn-schema-name: BackupSelection
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::BackupSelection'
    backup_selection:
      name: backup_selection
      id: aws.backup.backup_selection
      x-cfn-schema-name: BackupSelection
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.BackupPlanId') as backup_plan_id,
              JSON_EXTRACT(Properties, '$.BackupSelection.IamRoleArn') as backup_selection_iam_role_arn,
              JSON_EXTRACT(Properties, '$.BackupSelection.ListOfTags') as backup_selection_list_of_tags,
              JSON_EXTRACT(Properties, '$.BackupSelection.Resources') as backup_selection_resources,
              JSON_EXTRACT(Properties, '$.BackupSelection.SelectionName') as backup_selection_selection_name,
              JSON_EXTRACT(Properties, '$.BackupSelection.NotResources') as backup_selection_not_resources,
              JSON_EXTRACT(Properties, '$.BackupSelection.Conditions') as backup_selection_conditions,
              JSON_EXTRACT(Properties, '$.SelectionId') as selection_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::BackupSelection'
    backup_vaults:
      name: backup_vaults
      id: aws.backup.backup_vaults
      x-cfn-schema-name: BackupVault
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BackupVaultName') as backup_vault_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::BackupVault'
    backup_vault:
      name: backup_vault
      id: aws.backup.backup_vault
      x-cfn-schema-name: BackupVault
      x-type: get
      x-identifiers:
        - BackupVaultName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccessPolicy') as access_policy,
              JSON_EXTRACT(Properties, '$.BackupVaultTags') as backup_vault_tags,
              JSON_EXTRACT(Properties, '$.EncryptionKeyArn') as encryption_key_arn,
              JSON_EXTRACT(Properties, '$.Notifications.BackupVaultEvents') as notifications_backup_vault_events,
              JSON_EXTRACT(Properties, '$.Notifications.SNSTopicArn') as notifications_sn_stopic_arn,
              JSON_EXTRACT(Properties, '$.LockConfiguration.MinRetentionDays') as lock_configuration_min_retention_days,
              JSON_EXTRACT(Properties, '$.LockConfiguration.MaxRetentionDays') as lock_configuration_max_retention_days,
              JSON_EXTRACT(Properties, '$.LockConfiguration.ChangeableForDays') as lock_configuration_changeable_for_days,
              JSON_EXTRACT(Properties, '$.BackupVaultArn') as backup_vault_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::BackupVault'
    frameworks:
      name: frameworks
      id: aws.backup.frameworks
      x-cfn-schema-name: Framework
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FrameworkArn') as framework_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::Framework'
    framework:
      name: framework
      id: aws.backup.framework
      x-cfn-schema-name: Framework
      x-type: get
      x-identifiers:
        - FrameworkArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FrameworkName') as framework_name,
              JSON_EXTRACT(Properties, '$.FrameworkDescription') as framework_description,
              JSON_EXTRACT(Properties, '$.FrameworkArn') as framework_arn,
              JSON_EXTRACT(Properties, '$.DeploymentStatus') as deployment_status,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.FrameworkControls') as framework_controls,
              JSON_EXTRACT(Properties, '$.FrameworkStatus') as framework_status,
              JSON_EXTRACT(Properties, '$.FrameworkTags') as framework_tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::Framework'
    report_plans:
      name: report_plans
      id: aws.backup.report_plans
      x-cfn-schema-name: ReportPlan
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ReportPlanArn') as report_plan_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Backup::ReportPlan'
    report_plan:
      name: report_plan
      id: aws.backup.report_plan
      x-cfn-schema-name: ReportPlan
      x-type: get
      x-identifiers:
        - ReportPlanArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ReportPlanName') as report_plan_name,
              JSON_EXTRACT(Properties, '$.ReportPlanArn') as report_plan_arn,
              JSON_EXTRACT(Properties, '$.ReportPlanDescription') as report_plan_description,
              JSON_EXTRACT(Properties, '$.ReportPlanTags') as report_plan_tags,
              JSON_EXTRACT(Properties, '$.ReportDeliveryChannel') as report_delivery_channel,
              JSON_EXTRACT(Properties, '$.ReportSetting') as report_setting
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Backup::ReportPlan'
