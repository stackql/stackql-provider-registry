openapi: 3.0.0
info:
  title: SSM
  version: 1.0.0
paths: {}
components:
  schemas:
    Target:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: false
          items:
            type: string
        Key:
          type: string
      required:
        - Values
        - Key
    ParameterValues:
      type: array
      items:
        type: string
    S3Region:
      type: string
      minLength: 3
      maxLength: 20
    S3BucketName:
      type: string
      minLength: 3
      maxLength: 63
    S3KeyPrefix:
      type: string
      maxLength: 1024
    S3OutputLocation:
      type: object
      properties:
        OutputS3Region:
          $ref: '#/components/schemas/S3Region'
        OutputS3BucketName:
          $ref: '#/components/schemas/S3BucketName'
        OutputS3KeyPrefix:
          $ref: '#/components/schemas/S3KeyPrefix'
      additionalProperties: false
    InstanceAssociationOutputLocation:
      type: object
      properties:
        S3Location:
          $ref: '#/components/schemas/S3OutputLocation'
      additionalProperties: false
    Association:
      type: object
      properties:
        AssociationId:
          description: Unique identifier of the association.
          type: string
          pattern: '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
          x-examples:
            - 88df7b09-95e8-48c4-a3cb-08c2c20d5110
            - 203dd0ec-0055-4bf0-a872-707f72ef06aa
        AssociationName:
          description: The name of the association.
          type: string
          pattern: ^[a-zA-Z0-9_\-.]{3,128}$
        DocumentVersion:
          description: The version of the SSM document to associate with the target.
          type: string
          pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
        InstanceId:
          description: The ID of the instance that the SSM document is associated with.
          type: string
          pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
          x-examples:
            - i-0e60836d21cf313c4
            - mi-0532c22e49636ee13
        Name:
          description: The name of the SSM document.
          type: string
          pattern: ^[a-zA-Z0-9_\-.:/]{3,200}$
          x-examples:
            - AWS-GatherSoftwareInventory
            - MyCustomSSMDocument
        Parameters:
          description: Parameter values that the SSM document uses at runtime.
          type: object
          x-patternProperties:
            .*{1,255}:
              $ref: '#/components/schemas/ParameterValues'
          additionalProperties: false
        ScheduleExpression:
          description: A Cron or Rate expression that specifies when the association is applied to the target.
          type: string
          minLength: 1
          maxLength: 256
          x-examples:
            - cron(0 0 */1 * * ? *)
            - cron(0 16 ? * TUE *)
            - rate(30 minutes)
            - rate(7 days)
        Targets:
          description: The targets that the SSM document sends commands to.
          type: array
          items:
            $ref: '#/components/schemas/Target'
          minItems: 0
          maxItems: 5
        OutputLocation:
          $ref: '#/components/schemas/InstanceAssociationOutputLocation'
        AutomationTargetParameterName:
          type: string
          minLength: 1
          maxLength: 50
        MaxErrors:
          type: string
          pattern: ^([1-9][0-9]{0,6}|[0]|[1-9][0-9]%|[0-9]%|100%)$
          x-examples:
            - 1%
            - 10%
            - 50%
            - '1'
        MaxConcurrency:
          type: string
          pattern: ^([1-9][0-9]{0,6}|[1-9][0-9]%|[1-9]%|100%)$
          x-examples:
            - 1%
            - 10%
            - 50%
            - '1'
        ComplianceSeverity:
          type: string
          enum:
            - CRITICAL
            - HIGH
            - MEDIUM
            - LOW
            - UNSPECIFIED
        SyncCompliance:
          type: string
          enum:
            - AUTO
            - MANUAL
        WaitForSuccessTimeoutSeconds:
          type: integer
          minimum: 15
          maximum: 172800
        ApplyOnlyAtCronInterval:
          type: boolean
        CalendarNames:
          type: array
          items:
            type: string
          x-examples:
            - - calendar1
              - calendar2
            - - calendar3
        ScheduleOffset:
          type: integer
          minimum: 1
          maximum: 6
      required:
        - Name
      x-stackql-resource-name: association
      x-stackql-primaryIdentifier:
        - AssociationId
    AttachmentsSource:
      type: object
      properties:
        Key:
          description: The key of a key-value pair that identifies the location of an attachment to a document.
          type: string
          enum:
            - SourceUrl
            - S3FileUrl
            - AttachmentReference
        Values:
          description: The value of a key-value pair that identifies the location of an attachment to a document. The format for Value depends on the type of key you specify.
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 100000
          minItems: 1
          maxItems: 1
          x-insertionOrder: false
        Name:
          description: The name of the document attachment file.
          type: string
          pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
          minLength: 1
          maxLength: 128
      additionalProperties: false
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    DocumentRequires:
      type: object
      properties:
        Name:
          description: The name of the required SSM document. The name can be an Amazon Resource Name (ARN).
          type: string
          pattern: ^[a-zA-Z0-9_\-.:/]{3,200}$
          maxLength: 200
        Version:
          description: The document version required by the current document.
          type: string
          pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
          maxLength: 8
      additionalProperties: false
    Document:
      type: object
      properties:
        Content:
          type: string
        Attachments:
          description: A list of key and value pairs that describe attachments to a version of a document.
          type: array
          items:
            $ref: '#/components/schemas/AttachmentsSource'
          minItems: 0
          maxItems: 20
          x-insertionOrder: false
        Name:
          description: A name for the Systems Manager document.
          type: string
          pattern: ^[a-zA-Z0-9_\-.]{3,128}$
        VersionName:
          description: An optional field specifying the version of the artifact you are creating with the document. This value is unique across all versions of a document, and cannot be changed.
          type: string
          pattern: ^[a-zA-Z0-9_\-.]{1,128}$
        DocumentType:
          description: The type of document to create.
          type: string
          enum:
            - ApplicationConfiguration
            - ApplicationConfigurationSchema
            - Automation
            - Automation.ChangeTemplate
            - ChangeCalendar
            - CloudFormation
            - Command
            - DeploymentStrategy
            - Package
            - Policy
            - ProblemAnalysis
            - ProblemAnalysisTemplate
            - Session
        DocumentFormat:
          description: Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
          type: string
          enum:
            - YAML
            - JSON
            - TEXT
          default: JSON
        TargetType:
          description: Specify a target type to define the kinds of resources the document can run on.
          type: string
          pattern: ^\/[\w\.\-\:\/]*$
        Tags:
          description: Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 1000
          x-insertionOrder: false
        Requires:
          description: A list of SSM documents required by a document. For example, an ApplicationConfiguration document requires an ApplicationConfigurationSchema document.
          type: array
          items:
            $ref: '#/components/schemas/DocumentRequires'
          minItems: 1
          x-insertionOrder: false
        UpdateMethod:
          description: Update method - when set to 'Replace', the update will replace the existing document; when set to 'NewVersion', the update will create a new version.
          type: string
          enum:
            - Replace
            - NewVersion
          default: Replace
      required:
        - Content
      x-stackql-resource-name: document
      x-stackql-primaryIdentifier:
        - Name
    MaintenanceWindow:
      type: object
      properties:
        StartDate:
          type: string
        Description:
          type: string
        AllowUnassociatedTargets:
          type: boolean
        Cutoff:
          type: integer
        Schedule:
          type: string
        Duration:
          type: integer
        ScheduleOffset:
          type: integer
        Id:
          type: string
        EndDate:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
        ScheduleTimezone:
          type: string
      required:
        - AllowUnassociatedTargets
        - Cutoff
        - Schedule
        - Duration
        - Name
      x-stackql-resource-name: maintenance_window
      x-stackql-primaryIdentifier:
        - Id
    Targets:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: false
          items:
            type: string
        Key:
          type: string
      required:
        - Values
        - Key
    MaintenanceWindowTarget:
      type: object
      properties:
        OwnerInformation:
          type: string
        Description:
          type: string
        WindowId:
          type: string
        ResourceType:
          type: string
        Targets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Targets'
        Id:
          type: string
        Name:
          type: string
      required:
        - WindowId
        - ResourceType
        - Targets
      x-stackql-resource-name: maintenance_window_target
      x-stackql-primaryIdentifier:
        - Id
    TaskInvocationParameters:
      type: object
      additionalProperties: false
      properties:
        MaintenanceWindowStepFunctionsParameters:
          $ref: '#/components/schemas/MaintenanceWindowStepFunctionsParameters'
        MaintenanceWindowRunCommandParameters:
          $ref: '#/components/schemas/MaintenanceWindowRunCommandParameters'
        MaintenanceWindowLambdaParameters:
          $ref: '#/components/schemas/MaintenanceWindowLambdaParameters'
        MaintenanceWindowAutomationParameters:
          $ref: '#/components/schemas/MaintenanceWindowAutomationParameters'
    CloudWatchOutputConfig:
      type: object
      additionalProperties: false
      properties:
        CloudWatchOutputEnabled:
          type: boolean
        CloudWatchLogGroupName:
          type: string
    MaintenanceWindowRunCommandParameters:
      type: object
      additionalProperties: false
      properties:
        TimeoutSeconds:
          type: integer
        Comment:
          type: string
        OutputS3KeyPrefix:
          type: string
        Parameters:
          type: object
        CloudWatchOutputConfig:
          $ref: '#/components/schemas/CloudWatchOutputConfig'
        DocumentHashType:
          type: string
        ServiceRoleArn:
          type: string
        NotificationConfig:
          $ref: '#/components/schemas/NotificationConfig'
        DocumentVersion:
          type: string
        OutputS3BucketName:
          type: string
        DocumentHash:
          type: string
    MaintenanceWindowAutomationParameters:
      type: object
      additionalProperties: false
      properties:
        Parameters:
          type: object
        DocumentVersion:
          type: string
    NotificationConfig:
      type: object
      additionalProperties: false
      properties:
        NotificationEvents:
          type: array
          uniqueItems: false
          items:
            type: string
        NotificationArn:
          type: string
        NotificationType:
          type: string
      required:
        - NotificationArn
    MaintenanceWindowStepFunctionsParameters:
      type: object
      additionalProperties: false
      properties:
        Input:
          type: string
        Name:
          type: string
    LoggingInfo:
      type: object
      additionalProperties: false
      properties:
        Region:
          type: string
        S3Prefix:
          type: string
        S3Bucket:
          type: string
      required:
        - S3Bucket
        - Region
    MaintenanceWindowLambdaParameters:
      type: object
      additionalProperties: false
      properties:
        Qualifier:
          type: string
        Payload:
          type: string
        ClientContext:
          type: string
    MaintenanceWindowTask:
      type: object
      properties:
        MaxErrors:
          type: string
        Description:
          type: string
        ServiceRoleArn:
          type: string
        Priority:
          type: integer
        MaxConcurrency:
          type: string
        Targets:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Target'
        Name:
          type: string
        TaskArn:
          type: string
        TaskInvocationParameters:
          $ref: '#/components/schemas/TaskInvocationParameters'
        WindowId:
          type: string
        TaskParameters:
          type: object
        TaskType:
          type: string
        CutoffBehavior:
          type: string
        Id:
          type: string
        LoggingInfo:
          $ref: '#/components/schemas/LoggingInfo'
      required:
        - WindowId
        - Priority
        - TaskType
        - TaskArn
      x-stackql-resource-name: maintenance_window_task
      x-stackql-primaryIdentifier:
        - Id
    Parameter:
      type: object
      properties:
        Type:
          type: string
        Description:
          type: string
        Policies:
          type: string
        AllowedPattern:
          type: string
        Tier:
          type: string
        Value:
          type: string
        DataType:
          type: string
        Id:
          type: string
        Tags:
          type: object
        Name:
          type: string
      required:
        - Type
        - Value
      x-stackql-resource-name: parameter
      x-stackql-primaryIdentifier:
        - Id
    PatchFilterGroup:
      type: object
      additionalProperties: false
      properties:
        PatchFilters:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/PatchFilter'
    PatchFilter:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: false
          items:
            type: string
        Key:
          type: string
    Rule:
      type: object
      additionalProperties: false
      properties:
        ApproveUntilDate:
          $ref: '#/components/schemas/PatchStringDate'
        ApproveAfterDays:
          type: integer
        EnableNonSecurity:
          type: boolean
        ComplianceLevel:
          type: string
        PatchFilterGroup:
          $ref: '#/components/schemas/PatchFilterGroup'
    PatchStringDate:
      type: object
      additionalProperties: false
    PatchSource:
      type: object
      additionalProperties: false
      properties:
        Products:
          type: array
          uniqueItems: false
          items:
            type: string
        Configuration:
          type: string
        Name:
          type: string
    RuleGroup:
      type: object
      additionalProperties: false
      properties:
        PatchRules:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Rule'
    PatchBaseline:
      type: object
      properties:
        OperatingSystem:
          type: string
        Description:
          type: string
        ApprovalRules:
          $ref: '#/components/schemas/RuleGroup'
        Sources:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/PatchSource'
        Name:
          type: string
        RejectedPatches:
          type: array
          uniqueItems: false
          items:
            type: string
        ApprovedPatches:
          type: array
          uniqueItems: false
          items:
            type: string
        RejectedPatchesAction:
          type: string
        PatchGroups:
          type: array
          uniqueItems: false
          items:
            type: string
        ApprovedPatchesComplianceLevel:
          type: string
        ApprovedPatchesEnableNonSecurity:
          type: boolean
        Id:
          type: string
        GlobalFilters:
          $ref: '#/components/schemas/PatchFilterGroup'
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
      x-stackql-resource-name: patch_baseline
      x-stackql-primaryIdentifier:
        - Id
    S3Destination:
      type: object
      additionalProperties: false
      properties:
        KMSKeyArn:
          type: string
          minLength: 1
          maxLength: 512
        BucketPrefix:
          type: string
          minLength: 1
          maxLength: 256
        BucketName:
          type: string
          minLength: 1
          maxLength: 2048
        BucketRegion:
          type: string
          minLength: 1
          maxLength: 64
        SyncFormat:
          type: string
          minLength: 1
          maxLength: 1024
      required:
        - BucketName
        - BucketRegion
        - SyncFormat
    SyncSource:
      type: object
      additionalProperties: false
      properties:
        IncludeFutureRegions:
          type: boolean
        SourceRegions:
          type: array
          uniqueItems: false
          items:
            type: string
        SourceType:
          type: string
          minLength: 1
          maxLength: 64
        AwsOrganizationsSource:
          $ref: '#/components/schemas/AwsOrganizationsSource'
      required:
        - SourceType
        - SourceRegions
    AwsOrganizationsSource:
      type: object
      additionalProperties: false
      properties:
        OrganizationalUnits:
          type: array
          uniqueItems: false
          items:
            type: string
        OrganizationSourceType:
          type: string
          minLength: 1
          maxLength: 64
      required:
        - OrganizationSourceType
    ResourceDataSync:
      type: object
      properties:
        S3Destination:
          $ref: '#/components/schemas/S3Destination'
        KMSKeyArn:
          type: string
          minLength: 0
          maxLength: 512
        SyncSource:
          $ref: '#/components/schemas/SyncSource'
        BucketName:
          type: string
          minLength: 1
          maxLength: 2048
        BucketRegion:
          type: string
          minLength: 1
          maxLength: 64
        SyncFormat:
          type: string
          minLength: 0
          maxLength: 1024
        SyncName:
          type: string
          minLength: 1
          maxLength: 64
        SyncType:
          type: string
          minLength: 1
          maxLength: 64
        BucketPrefix:
          type: string
          minLength: 0
          maxLength: 64
      required:
        - SyncName
      x-stackql-resource-name: resource_data_sync
      x-stackql-primaryIdentifier:
        - SyncName
    ResourcePolicy:
      type: object
      properties:
        ResourceArn:
          type: string
          description: Arn of OpsItemGroup etc.
        Policy:
          type: string
        PolicyId:
          type: string
          description: 'An unique identifier within the policies of a resource. '
        PolicyHash:
          type: string
          description: A snapshot identifier for the policy over time.
      required:
        - ResourceArn
        - Policy
      x-stackql-resource-name: resource_policy
      x-stackql-primaryIdentifier:
        - PolicyId
        - ResourceArn
  x-stackQL-resources:
    associations:
      name: associations
      id: aws.ssm.associations
      x-cfn-schema-name: Association
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SSM::Association'
    association:
      name: association
      id: aws.ssm.association
      x-cfn-schema-name: Association
      x-type: get
      x-identifiers:
        - AssociationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id,
              JSON_EXTRACT(Properties, '$.AssociationName') as association_name,
              JSON_EXTRACT(Properties, '$.DocumentVersion') as document_version,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.ScheduleExpression') as schedule_expression,
              JSON_EXTRACT(Properties, '$.Targets') as targets,
              JSON_EXTRACT(Properties, '$.OutputLocation.S3Location') as output_location_s3_location,
              JSON_EXTRACT(Properties, '$.AutomationTargetParameterName') as automation_target_parameter_name,
              JSON_EXTRACT(Properties, '$.MaxErrors') as max_errors,
              JSON_EXTRACT(Properties, '$.MaxConcurrency') as max_concurrency,
              JSON_EXTRACT(Properties, '$.ComplianceSeverity') as compliance_severity,
              JSON_EXTRACT(Properties, '$.SyncCompliance') as sync_compliance,
              JSON_EXTRACT(Properties, '$.WaitForSuccessTimeoutSeconds') as wait_for_success_timeout_seconds,
              JSON_EXTRACT(Properties, '$.ApplyOnlyAtCronInterval') as apply_only_at_cron_interval,
              JSON_EXTRACT(Properties, '$.CalendarNames') as calendar_names,
              JSON_EXTRACT(Properties, '$.ScheduleOffset') as schedule_offset
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SSM::Association'
    documents:
      name: documents
      id: aws.ssm.documents
      x-cfn-schema-name: Document
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SSM::Document'
    document:
      name: document
      id: aws.ssm.document
      x-cfn-schema-name: Document
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Content') as content,
              JSON_EXTRACT(Properties, '$.Attachments') as attachments,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.VersionName') as version_name,
              JSON_EXTRACT(Properties, '$.DocumentType') as document_type,
              JSON_EXTRACT(Properties, '$.DocumentFormat') as document_format,
              JSON_EXTRACT(Properties, '$.TargetType') as target_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Requires') as requires,
              JSON_EXTRACT(Properties, '$.UpdateMethod') as update_method
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SSM::Document'
    maintenance_windows:
      name: maintenance_windows
      id: aws.ssm.maintenance_windows
      x-cfn-schema-name: MaintenanceWindow
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SSM::MaintenanceWindow'
    maintenance_window:
      name: maintenance_window
      id: aws.ssm.maintenance_window
      x-cfn-schema-name: MaintenanceWindow
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StartDate') as start_date,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AllowUnassociatedTargets') as allow_unassociated_targets,
              JSON_EXTRACT(Properties, '$.Cutoff') as cutoff,
              JSON_EXTRACT(Properties, '$.Schedule') as schedule,
              JSON_EXTRACT(Properties, '$.Duration') as duration,
              JSON_EXTRACT(Properties, '$.ScheduleOffset') as schedule_offset,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.EndDate') as end_date,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ScheduleTimezone') as schedule_timezone
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SSM::MaintenanceWindow'
    maintenance_window_targets:
      name: maintenance_window_targets
      id: aws.ssm.maintenance_window_targets
      x-cfn-schema-name: MaintenanceWindowTarget
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SSM::MaintenanceWindowTarget'
    maintenance_window_target:
      name: maintenance_window_target
      id: aws.ssm.maintenance_window_target
      x-cfn-schema-name: MaintenanceWindowTarget
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OwnerInformation') as owner_information,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.WindowId') as window_id,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.Targets') as targets,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SSM::MaintenanceWindowTarget'
    maintenance_window_tasks:
      name: maintenance_window_tasks
      id: aws.ssm.maintenance_window_tasks
      x-cfn-schema-name: MaintenanceWindowTask
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SSM::MaintenanceWindowTask'
    maintenance_window_task:
      name: maintenance_window_task
      id: aws.ssm.maintenance_window_task
      x-cfn-schema-name: MaintenanceWindowTask
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MaxErrors') as max_errors,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ServiceRoleArn') as service_role_arn,
              JSON_EXTRACT(Properties, '$.Priority') as priority,
              JSON_EXTRACT(Properties, '$.MaxConcurrency') as max_concurrency,
              JSON_EXTRACT(Properties, '$.Targets') as targets,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.TaskArn') as task_arn,
              JSON_EXTRACT(Properties, '$.TaskInvocationParameters.MaintenanceWindowStepFunctionsParameters') as task_invocation_parameters_maintenance_window_step_functions_parameters,
              JSON_EXTRACT(Properties, '$.TaskInvocationParameters.MaintenanceWindowRunCommandParameters') as task_invocation_parameters_maintenance_window_run_command_parameters,
              JSON_EXTRACT(Properties, '$.TaskInvocationParameters.MaintenanceWindowLambdaParameters') as task_invocation_parameters_maintenance_window_lambda_parameters,
              JSON_EXTRACT(Properties, '$.TaskInvocationParameters.MaintenanceWindowAutomationParameters') as task_invocation_parameters_maintenance_window_automation_parameters,
              JSON_EXTRACT(Properties, '$.WindowId') as window_id,
              JSON_EXTRACT(Properties, '$.TaskParameters') as task_parameters,
              JSON_EXTRACT(Properties, '$.TaskType') as task_type,
              JSON_EXTRACT(Properties, '$.CutoffBehavior') as cutoff_behavior,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LoggingInfo.Region') as logging_info_region,
              JSON_EXTRACT(Properties, '$.LoggingInfo.S3Prefix') as logging_info_s3_prefix,
              JSON_EXTRACT(Properties, '$.LoggingInfo.S3Bucket') as logging_info_s3_bucket
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SSM::MaintenanceWindowTask'
    parameters:
      name: parameters
      id: aws.ssm.parameters
      x-cfn-schema-name: Parameter
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SSM::Parameter'
    parameter:
      name: parameter
      id: aws.ssm.parameter
      x-cfn-schema-name: Parameter
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Policies') as policies,
              JSON_EXTRACT(Properties, '$.AllowedPattern') as allowed_pattern,
              JSON_EXTRACT(Properties, '$.Tier') as tier,
              JSON_EXTRACT(Properties, '$.Value') as value,
              JSON_EXTRACT(Properties, '$.DataType') as data_type,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SSM::Parameter'
    patch_baselines:
      name: patch_baselines
      id: aws.ssm.patch_baselines
      x-cfn-schema-name: PatchBaseline
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SSM::PatchBaseline'
    patch_baseline:
      name: patch_baseline
      id: aws.ssm.patch_baseline
      x-cfn-schema-name: PatchBaseline
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OperatingSystem') as operating_system,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ApprovalRules.PatchRules') as approval_rules_patch_rules,
              JSON_EXTRACT(Properties, '$.Sources') as sources,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RejectedPatches') as rejected_patches,
              JSON_EXTRACT(Properties, '$.ApprovedPatches') as approved_patches,
              JSON_EXTRACT(Properties, '$.RejectedPatchesAction') as rejected_patches_action,
              JSON_EXTRACT(Properties, '$.PatchGroups') as patch_groups,
              JSON_EXTRACT(Properties, '$.ApprovedPatchesComplianceLevel') as approved_patches_compliance_level,
              JSON_EXTRACT(Properties, '$.ApprovedPatchesEnableNonSecurity') as approved_patches_enable_non_security,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.GlobalFilters.PatchFilters') as global_filters_patch_filters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SSM::PatchBaseline'
    resource_data_syncs:
      name: resource_data_syncs
      id: aws.ssm.resource_data_syncs
      x-cfn-schema-name: ResourceDataSync
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SyncName') as sync_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SSM::ResourceDataSync'
    resource_data_sync:
      name: resource_data_sync
      id: aws.ssm.resource_data_sync
      x-cfn-schema-name: ResourceDataSync
      x-type: get
      x-identifiers:
        - SyncName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.S3Destination.KMSKeyArn') as s3_destination_km_skey_arn,
              JSON_EXTRACT(Properties, '$.S3Destination.BucketPrefix') as s3_destination_bucket_prefix,
              JSON_EXTRACT(Properties, '$.S3Destination.BucketName') as s3_destination_bucket_name,
              JSON_EXTRACT(Properties, '$.S3Destination.BucketRegion') as s3_destination_bucket_region,
              JSON_EXTRACT(Properties, '$.S3Destination.SyncFormat') as s3_destination_sync_format,
              JSON_EXTRACT(Properties, '$.KMSKeyArn') as k_ms_key_arn,
              JSON_EXTRACT(Properties, '$.SyncSource.IncludeFutureRegions') as sync_source_include_future_regions,
              JSON_EXTRACT(Properties, '$.SyncSource.SourceRegions') as sync_source_source_regions,
              JSON_EXTRACT(Properties, '$.SyncSource.SourceType') as sync_source_source_type,
              JSON_EXTRACT(Properties, '$.SyncSource.AwsOrganizationsSource') as sync_source_aws_organizations_source,
              JSON_EXTRACT(Properties, '$.BucketName') as bucket_name,
              JSON_EXTRACT(Properties, '$.BucketRegion') as bucket_region,
              JSON_EXTRACT(Properties, '$.SyncFormat') as sync_format,
              JSON_EXTRACT(Properties, '$.SyncName') as sync_name,
              JSON_EXTRACT(Properties, '$.SyncType') as sync_type,
              JSON_EXTRACT(Properties, '$.BucketPrefix') as bucket_prefix
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SSM::ResourceDataSync'
    resource_policies:
      name: resource_policies
      id: aws.ssm.resource_policies
      x-cfn-schema-name: ResourcePolicy
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyId') as policy_id,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SSM::ResourcePolicy'
    resource_policy:
      name: resource_policy
      id: aws.ssm.resource_policy
      x-cfn-schema-name: ResourcePolicy
      x-type: get
      x-identifiers:
        - PolicyId
        - ResourceArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.PolicyId') as policy_id,
              JSON_EXTRACT(Properties, '$.PolicyHash') as policy_hash
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SSM::ResourcePolicy'
