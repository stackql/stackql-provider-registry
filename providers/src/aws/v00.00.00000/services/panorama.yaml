openapi: 3.0.0
info:
  title: Panorama
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    DefaultRuntimeContextDevice:
      minLength: 1
      pattern: ^[a-zA-Z0-9\-\_]+$
      type: string
      maxLength: 255
    Description:
      minLength: 0
      pattern: ^.*$
      type: string
      maxLength: 255
    DeviceId:
      minLength: 1
      pattern: ^[a-zA-Z0-9\-\_]+$
      type: string
      maxLength: 255
    ApplicationInstanceStatus:
      type: string
      enum:
        - DEPLOYMENT_PENDING
        - DEPLOYMENT_REQUESTED
        - DEPLOYMENT_IN_PROGRESS
        - DEPLOYMENT_ERROR
        - DEPLOYMENT_SUCCEEDED
        - REMOVAL_PENDING
        - REMOVAL_REQUESTED
        - REMOVAL_IN_PROGRESS
        - REMOVAL_FAILED
        - REMOVAL_SUCCEEDED
    ManifestOverridesPayload:
      description: Parameter overrides for an application instance. This is a JSON document that has a single key (``PayloadData``) where the value is an escaped string representation of the overrides document.
      additionalProperties: false
      type: object
      properties:
        PayloadData:
          description: The overrides document.
          $ref: '#/components/schemas/ManifestOverridesPayloadData'
    RuntimeRoleArn:
      minLength: 1
      pattern: ^arn:[a-z0-9][-.a-z0-9]{0,62}:iam::[0-9]{12}:role/.+$
      type: string
      maxLength: 255
    Timestamp:
      type: integer
    Name:
      minLength: 1
      pattern: ^[a-zA-Z0-9\-\_]+$
      type: string
      maxLength: 255
    ApplicationInstanceId:
      minLength: 1
      pattern: ^[a-zA-Z0-9\-\_]+$
      type: string
      maxLength: 255
    ManifestPayloadData:
      minLength: 1
      pattern: ^.+$
      type: string
      maxLength: 51200
    ApplicationInstanceHealthStatus:
      type: string
      enum:
        - RUNNING
        - ERROR
        - NOT_AVAILABLE
    StatusFilter:
      type: string
      enum:
        - DEPLOYMENT_SUCCEEDED
        - DEPLOYMENT_ERROR
        - REMOVAL_SUCCEEDED
        - REMOVAL_FAILED
        - PROCESSING_DEPLOYMENT
        - PROCESSING_REMOVAL
    TagList:
      type: array
      uniqueItems: true
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/Tag'
    ManifestPayload:
      description: A application verion's manifest file. This is a JSON document that has a single key (``PayloadData``) where the value is an escaped string representation of the application manifest (``graph.json``). This file is located in the ``graphs`` folder in your application source.
      additionalProperties: false
      type: object
      properties:
        PayloadData:
          description: The application manifest.
          $ref: '#/components/schemas/ManifestPayloadData'
    ApplicationInstanceArn:
      minLength: 1
      type: string
      maxLength: 255
    ManifestOverridesPayloadData:
      minLength: 0
      pattern: ^.+$
      type: string
      maxLength: 51200
    ApplicationInstanceStatusDescription:
      minLength: 1
      type: string
      maxLength: 255
    Tag:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
          pattern: ^.+$
          description: ''
        Value:
          type: string
          minLength: 0
          maxLength: 256
          pattern: ^.+$
          description: ''
      required:
        - Key
        - Value
      additionalProperties: false
      description: ''
    DeviceName:
      minLength: 1
      pattern: ^[a-zA-Z0-9\-\_]+$
      type: string
      maxLength: 255
    ApplicationInstance:
      type: object
      properties:
        DefaultRuntimeContextDeviceName:
          description: ''
          $ref: '#/components/schemas/DeviceName'
        Status:
          description: ''
          $ref: '#/components/schemas/ApplicationInstanceStatus'
        DefaultRuntimeContextDevice:
          description: The device's ID.
          $ref: '#/components/schemas/DefaultRuntimeContextDevice'
        Description:
          description: A description for the application instance.
          $ref: '#/components/schemas/Description'
        ApplicationInstanceIdToReplace:
          description: The ID of an application instance to replace with the new instance.
          $ref: '#/components/schemas/ApplicationInstanceId'
        CreatedTime:
          description: ''
          $ref: '#/components/schemas/Timestamp'
        HealthStatus:
          description: ''
          $ref: '#/components/schemas/ApplicationInstanceHealthStatus'
        ManifestOverridesPayload:
          description: Setting overrides for the application manifest.
          $ref: '#/components/schemas/ManifestOverridesPayload'
        LastUpdatedTime:
          description: ''
          $ref: '#/components/schemas/Timestamp'
        RuntimeRoleArn:
          description: The ARN of a runtime role for the application instance.
          $ref: '#/components/schemas/RuntimeRoleArn'
        Name:
          description: A name for the application instance.
          $ref: '#/components/schemas/Name'
        ApplicationInstanceId:
          description: ''
          $ref: '#/components/schemas/ApplicationInstanceId'
        StatusDescription:
          description: ''
          $ref: '#/components/schemas/ApplicationInstanceStatusDescription'
        ManifestPayload:
          description: The application's manifest document.
          $ref: '#/components/schemas/ManifestPayload'
        Arn:
          description: ''
          $ref: '#/components/schemas/ApplicationInstanceArn'
        Tags:
          description: Tags for the application instance.
          $ref: '#/components/schemas/TagList'
      required:
        - ManifestPayload
        - DefaultRuntimeContextDevice
      x-stackql-resource-name: application_instance
      description: Creates an application instance and deploys it to a device.
      x-type-name: AWS::Panorama::ApplicationInstance
      x-stackql-primary-identifier:
        - ApplicationInstanceId
      x-create-only-properties:
        - Name
        - Description
        - ManifestPayload
        - ManifestOverridesPayload
        - RuntimeRoleArn
        - DefaultRuntimeContextDevice
        - ApplicationInstanceIdToReplace
      x-write-only-properties:
        - ApplicationInstanceIdToReplace
      x-read-only-properties:
        - ApplicationInstanceId
        - Arn
        - Status
        - HealthStatus
        - StatusDescription
        - DefaultRuntimeContextDeviceName
        - CreatedTime
        - LastUpdatedTime
      x-required-properties:
        - ManifestPayload
        - DefaultRuntimeContextDevice
      x-taggable: true
      x-required-permissions:
        read:
          - panorama:DescribeApplicationInstance
          - panorama:DescribeApplicationInstanceDetails
          - panorama:ListTagsForResource
          - s3:ListObjects
          - s3:GetObject
          - s3:GetObjectVersion
        create:
          - panorama:CreateApplicationInstance
          - panorama:ListTagsForResource
          - panorama:TagResource
          - panorama:DescribeApplicationInstance
          - panorama:DescribeApplicationInstanceDetails
          - iam:PassRole
          - s3:ListBucket
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
        update:
          - panorama:ListTagsForResource
          - panorama:TagResource
          - panorama:UntagResource
          - panorama:DescribeApplicationInstance
          - panorama:DescribeApplicationInstanceDetails
          - s3:ListObjects
          - s3:GetObject
          - s3:GetObjectVersion
        list:
          - panorama:ListApplicationInstances
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
        delete:
          - panorama:RemoveApplicationInstance
          - panorama:DescribeApplicationInstance
          - panorama:DescribeApplicationInstanceDetails
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:DeleteObjectVersionTagging
          - s3:ListObjects
          - s3:GetObject
          - s3:GetObjectVersion
    NodePackageName:
      type: string
      minLength: 1
      maxLength: 128
      pattern: ^[a-zA-Z0-9\-\_]+$
    NodePackageId:
      type: string
      minLength: 1
      maxLength: 255
      pattern: ^[a-zA-Z0-9\-\_\/]+$
    NodePackageArn:
      type: string
      minLength: 1
      maxLength: 255
    StorageLocation:
      type: object
      properties:
        Bucket:
          type: string
          description: The location's bucket.
        RepoPrefixLocation:
          type: string
          description: The location's repo prefix.
        GeneratedPrefixLocation:
          type: string
          description: The location's generated prefix.
        BinaryPrefixLocation:
          type: string
          description: The location's binary prefix.
        ManifestPrefixLocation:
          type: string
          description: The location's manifest prefix.
      additionalProperties: false
      description: A storage location.
    Package:
      type: object
      properties:
        PackageName:
          $ref: '#/components/schemas/NodePackageName'
          description: A name for the package.
        PackageId:
          $ref: '#/components/schemas/NodePackageId'
          description: ''
        Arn:
          $ref: '#/components/schemas/NodePackageArn'
          description: ''
        StorageLocation:
          $ref: '#/components/schemas/StorageLocation'
          description: A storage location.
        CreatedTime:
          $ref: '#/components/schemas/Timestamp'
          description: ''
        Tags:
          $ref: '#/components/schemas/TagList'
          description: Tags for the package.
      required:
        - PackageName
      x-stackql-resource-name: package
      description: Creates a package and storage location in an Amazon S3 access point.
      x-type-name: AWS::Panorama::Package
      x-stackql-primary-identifier:
        - PackageId
      x-create-only-properties:
        - PackageName
      x-read-only-properties:
        - PackageId
        - Arn
        - CreatedTime
        - StorageLocation/Bucket
        - StorageLocation/RepoPrefixLocation
        - StorageLocation/GeneratedPrefixLocation
        - StorageLocation/BinaryPrefixLocation
        - StorageLocation/ManifestPrefixLocation
      x-required-properties:
        - PackageName
      x-taggable: true
      x-required-permissions:
        create:
          - panorama:CreatePackage
          - panorama:ListTagsForResource
          - panorama:TagResource
          - panorama:DescribePackage
          - s3:ListBucket
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
        read:
          - panorama:DescribePackage
          - panorama:ListTagsForResource
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
        update:
          - panorama:DescribePackage
          - panorama:ListTagsForResource
          - panorama:TagResource
          - panorama:UntagResource
          - s3:PutObject
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
        list:
          - panorama:ListPackages
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
        delete:
          - panorama:DeletePackage
          - panorama:DescribePackage
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:DeleteObjectVersionTagging
          - s3:ListObjects
          - s3:ListObjectsV2
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
    PackageOwnerAccount:
      type: string
      minLength: 1
      maxLength: 12
      pattern: ^[0-9a-z\_]+$
    NodePackageVersion:
      type: string
      minLength: 1
      maxLength: 255
      pattern: ^([0-9]+)\.([0-9]+)$
    NodePackagePatchVersion:
      type: string
      minLength: 1
      maxLength: 255
      pattern: ^[a-z0-9]+$
    PackageVersionStatus:
      type: string
      enum:
        - REGISTER_PENDING
        - REGISTER_COMPLETED
        - FAILED
        - DELETING
    PackageVersionStatusDescription:
      type: string
      minLength: 1
      maxLength: 255
    TimeStamp:
      type: integer
    PackageVersion:
      type: object
      properties:
        OwnerAccount:
          $ref: '#/components/schemas/PackageOwnerAccount'
          description: An owner account.
        PackageId:
          $ref: '#/components/schemas/NodePackageId'
          description: A package ID.
        PackageArn:
          $ref: '#/components/schemas/NodePackageArn'
          description: ''
        PackageVersion:
          $ref: '#/components/schemas/NodePackageVersion'
          description: A package version.
        PatchVersion:
          $ref: '#/components/schemas/NodePackagePatchVersion'
          description: A patch version.
        MarkLatest:
          type: boolean
          description: Whether to mark the new version as the latest version.
        IsLatestPatch:
          type: boolean
          description: ''
        PackageName:
          $ref: '#/components/schemas/NodePackageName'
          description: ''
        Status:
          $ref: '#/components/schemas/PackageVersionStatus'
          description: ''
        StatusDescription:
          $ref: '#/components/schemas/PackageVersionStatusDescription'
          description: ''
        RegisteredTime:
          $ref: '#/components/schemas/TimeStamp'
          description: ''
        UpdatedLatestPatchVersion:
          $ref: '#/components/schemas/NodePackagePatchVersion'
          description: If the version was marked latest, the new version to maker as latest.
      required:
        - PackageId
        - PackageVersion
        - PatchVersion
      x-stackql-resource-name: package_version
      description: Registers a package version.
      x-type-name: AWS::Panorama::PackageVersion
      x-stackql-primary-identifier:
        - PackageId
        - PackageVersion
        - PatchVersion
      x-create-only-properties:
        - OwnerAccount
        - PackageId
        - PackageVersion
        - PatchVersion
      x-write-only-properties:
        - UpdatedLatestPatchVersion
      x-read-only-properties:
        - PackageName
        - PackageArn
        - Status
        - StatusDescription
        - IsLatestPatch
        - RegisteredTime
      x-required-properties:
        - PackageId
        - PackageVersion
        - PatchVersion
      x-required-permissions:
        create:
          - panorama:RegisterPackageVersion
          - panorama:DescribePackageVersion
          - s3:ListBucket
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
        read:
          - panorama:DescribePackageVersion
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
        update:
          - panorama:DescribePackageVersion
          - panorama:RegisterPackageVersion
          - s3:ListBucket
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
        delete:
          - panorama:DeregisterPackageVersion
          - panorama:DescribePackageVersion
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:DeleteObjectVersionTagging
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
    CreateApplicationInstanceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DefaultRuntimeContextDeviceName:
              description: ''
              $ref: '#/components/schemas/DeviceName'
            Status:
              description: ''
              $ref: '#/components/schemas/ApplicationInstanceStatus'
            DefaultRuntimeContextDevice:
              description: The device's ID.
              $ref: '#/components/schemas/DefaultRuntimeContextDevice'
            Description:
              description: A description for the application instance.
              $ref: '#/components/schemas/Description'
            ApplicationInstanceIdToReplace:
              description: The ID of an application instance to replace with the new instance.
              $ref: '#/components/schemas/ApplicationInstanceId'
            CreatedTime:
              description: ''
              $ref: '#/components/schemas/Timestamp'
            HealthStatus:
              description: ''
              $ref: '#/components/schemas/ApplicationInstanceHealthStatus'
            ManifestOverridesPayload:
              description: Setting overrides for the application manifest.
              $ref: '#/components/schemas/ManifestOverridesPayload'
            LastUpdatedTime:
              description: ''
              $ref: '#/components/schemas/Timestamp'
            RuntimeRoleArn:
              description: The ARN of a runtime role for the application instance.
              $ref: '#/components/schemas/RuntimeRoleArn'
            Name:
              description: A name for the application instance.
              $ref: '#/components/schemas/Name'
            ApplicationInstanceId:
              description: ''
              $ref: '#/components/schemas/ApplicationInstanceId'
            StatusDescription:
              description: ''
              $ref: '#/components/schemas/ApplicationInstanceStatusDescription'
            ManifestPayload:
              description: The application's manifest document.
              $ref: '#/components/schemas/ManifestPayload'
            Arn:
              description: ''
              $ref: '#/components/schemas/ApplicationInstanceArn'
            Tags:
              description: Tags for the application instance.
              $ref: '#/components/schemas/TagList'
          x-stackQL-stringOnly: true
      x-title: CreateApplicationInstanceRequest
      type: object
      required: []
    CreatePackageRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PackageName:
              $ref: '#/components/schemas/NodePackageName'
              description: A name for the package.
            PackageId:
              $ref: '#/components/schemas/NodePackageId'
              description: ''
            Arn:
              $ref: '#/components/schemas/NodePackageArn'
              description: ''
            StorageLocation:
              $ref: '#/components/schemas/StorageLocation'
              description: A storage location.
            CreatedTime:
              $ref: '#/components/schemas/Timestamp'
              description: ''
            Tags:
              $ref: '#/components/schemas/TagList'
              description: Tags for the package.
          x-stackQL-stringOnly: true
      x-title: CreatePackageRequest
      type: object
      required: []
    CreatePackageVersionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            OwnerAccount:
              $ref: '#/components/schemas/PackageOwnerAccount'
              description: An owner account.
            PackageId:
              $ref: '#/components/schemas/NodePackageId'
              description: A package ID.
            PackageArn:
              $ref: '#/components/schemas/NodePackageArn'
              description: ''
            PackageVersion:
              $ref: '#/components/schemas/NodePackageVersion'
              description: A package version.
            PatchVersion:
              $ref: '#/components/schemas/NodePackagePatchVersion'
              description: A patch version.
            MarkLatest:
              type: boolean
              description: Whether to mark the new version as the latest version.
            IsLatestPatch:
              type: boolean
              description: ''
            PackageName:
              $ref: '#/components/schemas/NodePackageName'
              description: ''
            Status:
              $ref: '#/components/schemas/PackageVersionStatus'
              description: ''
            StatusDescription:
              $ref: '#/components/schemas/PackageVersionStatusDescription'
              description: ''
            RegisteredTime:
              $ref: '#/components/schemas/TimeStamp'
              description: ''
            UpdatedLatestPatchVersion:
              $ref: '#/components/schemas/NodePackagePatchVersion'
              description: If the version was marked latest, the new version to maker as latest.
          x-stackQL-stringOnly: true
      x-title: CreatePackageVersionRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    application_instances:
      name: application_instances
      id: aws.panorama.application_instances
      x-cfn-schema-name: ApplicationInstance
      x-cfn-type-name: AWS::Panorama::ApplicationInstance
      x-identifiers:
        - ApplicationInstanceId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ApplicationInstance&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Panorama::ApplicationInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Panorama::ApplicationInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Panorama::ApplicationInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/application_instances/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/application_instances/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/application_instances/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DefaultRuntimeContextDeviceName') as default_runtime_context_device_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.DefaultRuntimeContextDevice') as default_runtime_context_device,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ApplicationInstanceIdToReplace') as application_instance_id_to_replace,
              JSON_EXTRACT(Properties, '$.CreatedTime') as created_time,
              JSON_EXTRACT(Properties, '$.HealthStatus') as health_status,
              JSON_EXTRACT(Properties, '$.ManifestOverridesPayload') as manifest_overrides_payload,
              JSON_EXTRACT(Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(Properties, '$.RuntimeRoleArn') as runtime_role_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ApplicationInstanceId') as application_instance_id,
              JSON_EXTRACT(Properties, '$.StatusDescription') as status_description,
              JSON_EXTRACT(Properties, '$.ManifestPayload') as manifest_payload,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::ApplicationInstance'
              AND data__Identifier = '<ApplicationInstanceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DefaultRuntimeContextDeviceName') as default_runtime_context_device_name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.DefaultRuntimeContextDevice') as default_runtime_context_device,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ApplicationInstanceIdToReplace') as application_instance_id_to_replace,
                JSON_EXTRACT(detail.Properties, '$.CreatedTime') as created_time,
                JSON_EXTRACT(detail.Properties, '$.HealthStatus') as health_status,
                JSON_EXTRACT(detail.Properties, '$.ManifestOverridesPayload') as manifest_overrides_payload,
                JSON_EXTRACT(detail.Properties, '$.LastUpdatedTime') as last_updated_time,
                JSON_EXTRACT(detail.Properties, '$.RuntimeRoleArn') as runtime_role_arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.ApplicationInstanceId') as application_instance_id,
                JSON_EXTRACT(detail.Properties, '$.StatusDescription') as status_description,
                JSON_EXTRACT(detail.Properties, '$.ManifestPayload') as manifest_payload,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Panorama::ApplicationInstance'
                AND detail.data__TypeName = 'AWS::Panorama::ApplicationInstance'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DefaultRuntimeContextDeviceName') as default_runtime_context_device_name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'DefaultRuntimeContextDevice') as default_runtime_context_device,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ApplicationInstanceIdToReplace') as application_instance_id_to_replace,
                  json_extract_path_text(Properties, 'CreatedTime') as created_time,
                  json_extract_path_text(Properties, 'HealthStatus') as health_status,
                  json_extract_path_text(Properties, 'ManifestOverridesPayload') as manifest_overrides_payload,
                  json_extract_path_text(Properties, 'LastUpdatedTime') as last_updated_time,
                  json_extract_path_text(Properties, 'RuntimeRoleArn') as runtime_role_arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'ApplicationInstanceId') as application_instance_id,
                  json_extract_path_text(Properties, 'StatusDescription') as status_description,
                  json_extract_path_text(Properties, 'ManifestPayload') as manifest_payload,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::ApplicationInstance'
                  AND data__Identifier = '<ApplicationInstanceId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DefaultRuntimeContextDeviceName') as default_runtime_context_device_name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'DefaultRuntimeContextDevice') as default_runtime_context_device,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ApplicationInstanceIdToReplace') as application_instance_id_to_replace,
                    json_extract_path_text(detail.Properties, 'CreatedTime') as created_time,
                    json_extract_path_text(detail.Properties, 'HealthStatus') as health_status,
                    json_extract_path_text(detail.Properties, 'ManifestOverridesPayload') as manifest_overrides_payload,
                    json_extract_path_text(detail.Properties, 'LastUpdatedTime') as last_updated_time,
                    json_extract_path_text(detail.Properties, 'RuntimeRoleArn') as runtime_role_arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'ApplicationInstanceId') as application_instance_id,
                    json_extract_path_text(detail.Properties, 'StatusDescription') as status_description,
                    json_extract_path_text(detail.Properties, 'ManifestPayload') as manifest_payload,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Panorama::ApplicationInstance'
                    AND detail.data__TypeName = 'AWS::Panorama::ApplicationInstance'
                    AND listing.region = 'us-east-1'
    application_instances_list_only:
      name: application_instances_list_only
      id: aws.panorama.application_instances_list_only
      x-cfn-schema-name: ApplicationInstance
      x-cfn-type-name: AWS::Panorama::ApplicationInstance
      x-identifiers:
        - ApplicationInstanceId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationInstanceId') as application_instance_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Panorama::ApplicationInstance'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationInstanceId') as application_instance_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Panorama::ApplicationInstance'
                AND region = 'us-east-1'
    application_instance_tags:
      name: application_instance_tags
      id: aws.panorama.application_instance_tags
      x-cfn-schema-name: ApplicationInstance
      x-cfn-type-name: AWS::Panorama::ApplicationInstance
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DefaultRuntimeContextDeviceName') as default_runtime_context_device_name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.DefaultRuntimeContextDevice') as default_runtime_context_device,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.ApplicationInstanceIdToReplace') as application_instance_id_to_replace,
              JSON_EXTRACT(detail.Properties, '$.CreatedTime') as created_time,
              JSON_EXTRACT(detail.Properties, '$.HealthStatus') as health_status,
              JSON_EXTRACT(detail.Properties, '$.ManifestOverridesPayload') as manifest_overrides_payload,
              JSON_EXTRACT(detail.Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(detail.Properties, '$.RuntimeRoleArn') as runtime_role_arn,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.ApplicationInstanceId') as application_instance_id,
              JSON_EXTRACT(detail.Properties, '$.StatusDescription') as status_description,
              JSON_EXTRACT(detail.Properties, '$.ManifestPayload') as manifest_payload,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Panorama::ApplicationInstance'
              AND detail.data__TypeName = 'AWS::Panorama::ApplicationInstance'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DefaultRuntimeContextDeviceName') as default_runtime_context_device_name,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'DefaultRuntimeContextDevice') as default_runtime_context_device,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'ApplicationInstanceIdToReplace') as application_instance_id_to_replace,
                json_extract_path_text(detail.Properties, 'CreatedTime') as created_time,
                json_extract_path_text(detail.Properties, 'HealthStatus') as health_status,
                json_extract_path_text(detail.Properties, 'ManifestOverridesPayload') as manifest_overrides_payload,
                json_extract_path_text(detail.Properties, 'LastUpdatedTime') as last_updated_time,
                json_extract_path_text(detail.Properties, 'RuntimeRoleArn') as runtime_role_arn,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'ApplicationInstanceId') as application_instance_id,
                json_extract_path_text(detail.Properties, 'StatusDescription') as status_description,
                json_extract_path_text(detail.Properties, 'ManifestPayload') as manifest_payload,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Panorama::ApplicationInstance'
                AND detail.data__TypeName = 'AWS::Panorama::ApplicationInstance'
                AND listing.region = 'us-east-1'
    packages:
      name: packages
      id: aws.panorama.packages
      x-cfn-schema-name: Package
      x-cfn-type-name: AWS::Panorama::Package
      x-identifiers:
        - PackageId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Package&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Panorama::Package"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Panorama::Package"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Panorama::Package"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/packages/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/packages/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/packages/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PackageName') as package_name,
              JSON_EXTRACT(Properties, '$.PackageId') as package_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.StorageLocation') as storage_location,
              JSON_EXTRACT(Properties, '$.CreatedTime') as created_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::Package'
              AND data__Identifier = '<PackageId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PackageName') as package_name,
                JSON_EXTRACT(detail.Properties, '$.PackageId') as package_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.StorageLocation') as storage_location,
                JSON_EXTRACT(detail.Properties, '$.CreatedTime') as created_time,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Panorama::Package'
                AND detail.data__TypeName = 'AWS::Panorama::Package'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PackageName') as package_name,
                  json_extract_path_text(Properties, 'PackageId') as package_id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'StorageLocation') as storage_location,
                  json_extract_path_text(Properties, 'CreatedTime') as created_time,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::Package'
                  AND data__Identifier = '<PackageId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PackageName') as package_name,
                    json_extract_path_text(detail.Properties, 'PackageId') as package_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'StorageLocation') as storage_location,
                    json_extract_path_text(detail.Properties, 'CreatedTime') as created_time,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Panorama::Package'
                    AND detail.data__TypeName = 'AWS::Panorama::Package'
                    AND listing.region = 'us-east-1'
    packages_list_only:
      name: packages_list_only
      id: aws.panorama.packages_list_only
      x-cfn-schema-name: Package
      x-cfn-type-name: AWS::Panorama::Package
      x-identifiers:
        - PackageId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PackageId') as package_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Panorama::Package'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PackageId') as package_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Panorama::Package'
                AND region = 'us-east-1'
    package_tags:
      name: package_tags
      id: aws.panorama.package_tags
      x-cfn-schema-name: Package
      x-cfn-type-name: AWS::Panorama::Package
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.PackageName') as package_name,
              JSON_EXTRACT(detail.Properties, '$.PackageId') as package_id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.StorageLocation') as storage_location,
              JSON_EXTRACT(detail.Properties, '$.CreatedTime') as created_time
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Panorama::Package'
              AND detail.data__TypeName = 'AWS::Panorama::Package'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'PackageName') as package_name,
                json_extract_path_text(detail.Properties, 'PackageId') as package_id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'StorageLocation') as storage_location,
                json_extract_path_text(detail.Properties, 'CreatedTime') as created_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Panorama::Package'
                AND detail.data__TypeName = 'AWS::Panorama::Package'
                AND listing.region = 'us-east-1'
    package_versions:
      name: package_versions
      id: aws.panorama.package_versions
      x-cfn-schema-name: PackageVersion
      x-cfn-type-name: AWS::Panorama::PackageVersion
      x-identifiers:
        - PackageId
        - PackageVersion
        - PatchVersion
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PackageVersion&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Panorama::PackageVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Panorama::PackageVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Panorama::PackageVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/package_versions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/package_versions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/package_versions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.OwnerAccount') as owner_account,
              JSON_EXTRACT(Properties, '$.PackageId') as package_id,
              JSON_EXTRACT(Properties, '$.PackageArn') as package_arn,
              JSON_EXTRACT(Properties, '$.PackageVersion') as package_version,
              JSON_EXTRACT(Properties, '$.PatchVersion') as patch_version,
              JSON_EXTRACT(Properties, '$.MarkLatest') as mark_latest,
              JSON_EXTRACT(Properties, '$.IsLatestPatch') as is_latest_patch,
              JSON_EXTRACT(Properties, '$.PackageName') as package_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusDescription') as status_description,
              JSON_EXTRACT(Properties, '$.RegisteredTime') as registered_time,
              JSON_EXTRACT(Properties, '$.UpdatedLatestPatchVersion') as updated_latest_patch_version
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::PackageVersion'
              AND data__Identifier = '<PackageId>|<PackageVersion>|<PatchVersion>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'OwnerAccount') as owner_account,
                json_extract_path_text(Properties, 'PackageId') as package_id,
                json_extract_path_text(Properties, 'PackageArn') as package_arn,
                json_extract_path_text(Properties, 'PackageVersion') as package_version,
                json_extract_path_text(Properties, 'PatchVersion') as patch_version,
                json_extract_path_text(Properties, 'MarkLatest') as mark_latest,
                json_extract_path_text(Properties, 'IsLatestPatch') as is_latest_patch,
                json_extract_path_text(Properties, 'PackageName') as package_name,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'StatusDescription') as status_description,
                json_extract_path_text(Properties, 'RegisteredTime') as registered_time,
                json_extract_path_text(Properties, 'UpdatedLatestPatchVersion') as updated_latest_patch_version
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::PackageVersion'
                AND data__Identifier = '<PackageId>|<PackageVersion>|<PatchVersion>'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ApplicationInstance&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateApplicationInstance
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateApplicationInstanceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Package&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePackage
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePackageRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PackageVersion&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePackageVersion
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePackageVersionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
