openapi: 3.0.0
info:
  title: IAM
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    AttachGroupPolicyRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: '<p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
      required:
        - GroupName
        - PolicyArn
      title: AttachGroupPolicyRequest
      type: object
    AttachRolePolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: '<p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - RoleName
        - PolicyArn
      title: AttachRolePolicyRequest
      type: object
    AttachUserPolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
        UserName:
          allOf:
            - $ref: '#/components/schemas/userNameType'
            - description: '<p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - UserName
        - PolicyArn
      title: AttachUserPolicyRequest
      type: object
    ConcurrentModificationException: {}
    CreatePolicyRequest:
      properties:
        Description:
          allOf:
            - $ref: '#/components/schemas/policyDescriptionType'
            - description: <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
        Path:
          allOf:
            - $ref: '#/components/schemas/policyPathType'
            - description: >-
                <p>The path for the policy.</p> <p>For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that
                must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p>You cannot use an asterisk (*) in the path name.</p> </note>
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: >-
                <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum
                character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p> <p>To learn more about JSON policy grammar, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html">Grammar of the IAM JSON policy language</a> in the <i>IAM User Guide</i>. </p> <p>The <a
                href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab
                (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
        Tags:
          allOf:
            - $ref: '#/components/schemas/tagListType'
            - description: <p>A list of tags that you want to attach to the new IAM customer managed policy. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.</p> </note>
      required:
        - PolicyName
        - PolicyDocument
      title: CreatePolicyRequest
      type: object
    CreatePolicyResponse:
      description: 'Contains the response to a successful <a>CreatePolicy</a> request. '
      properties:
        Policy:
          allOf:
            - $ref: '#/components/schemas/Policy'
            - description: A structure containing details about the new policy.
      type: object
    DeleteConflictException: {}
    DeleteGroupPolicyRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: '<p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: '<p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - GroupName
        - PolicyName
      title: DeleteGroupPolicyRequest
      type: object
    DeletePolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to delete.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
      required:
        - PolicyArn
      title: DeletePolicyRequest
      type: object
    DeleteRolePolicyRequest:
      properties:
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: '<p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: '<p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - RoleName
        - PolicyName
      title: DeleteRolePolicyRequest
      type: object
    DeleteUserPolicyRequest:
      properties:
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: '<p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        UserName:
          allOf:
            - $ref: '#/components/schemas/existingUserNameType'
            - description: '<p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - UserName
        - PolicyName
      title: DeleteUserPolicyRequest
      type: object
    DetachGroupPolicyRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: '<p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
      required:
        - GroupName
        - PolicyArn
      title: DetachGroupPolicyRequest
      type: object
    DetachRolePolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: '<p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - RoleName
        - PolicyArn
      title: DetachRolePolicyRequest
      type: object
    DetachUserPolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
        UserName:
          allOf:
            - $ref: '#/components/schemas/userNameType'
            - description: '<p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - UserName
        - PolicyArn
      title: DetachUserPolicyRequest
      type: object
    EntityAlreadyExistsException: {}
    GetGroupPolicyRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: '<p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: '<p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - GroupName
        - PolicyName
      title: GetGroupPolicyRequest
      type: object
    GetGroupPolicyResponse:
      description: 'Contains the response to a successful <a>GetGroupPolicy</a> request. '
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: The group the policy is associated with.
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: <p>The policy document.</p> <p>IAM stores policies in JSON format. However, resources that were created using CloudFormation templates can be formatted in YAML. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: The name of the policy.
      required:
        - GroupName
        - PolicyName
        - PolicyDocument
      type: object
    GetPolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: <p>The Amazon Resource Name (ARN) of the managed policy that you want information about.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
      required:
        - PolicyArn
      title: GetPolicyRequest
      type: object
    GetPolicyResponse:
      description: 'Contains the response to a successful <a>GetPolicy</a> request. '
      properties:
        Policy:
          allOf:
            - $ref: '#/components/schemas/Policy'
            - description: A structure containing details about the policy.
      type: object
    GetRolePolicyRequest:
      properties:
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: '<p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: '<p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - RoleName
        - PolicyName
      title: GetRolePolicyRequest
      type: object
    GetRolePolicyResponse:
      description: 'Contains the response to a successful <a>GetRolePolicy</a> request. '
      properties:
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: <p>The policy document.</p> <p>IAM stores policies in JSON format. However, resources that were created using CloudFormation templates can be formatted in YAML. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: The name of the policy.
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: The role the policy is associated with.
      required:
        - RoleName
        - PolicyName
        - PolicyDocument
      type: object
    GetUserPolicyRequest:
      properties:
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: '<p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        UserName:
          allOf:
            - $ref: '#/components/schemas/existingUserNameType'
            - description: '<p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - UserName
        - PolicyName
      title: GetUserPolicyRequest
      type: object
    GetUserPolicyResponse:
      description: 'Contains the response to a successful <a>GetUserPolicy</a> request. '
      properties:
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: <p>The policy document.</p> <p>IAM stores policies in JSON format. However, resources that were created using CloudFormation templates can be formatted in YAML. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: The name of the policy.
        UserName:
          allOf:
            - $ref: '#/components/schemas/existingUserNameType'
            - description: The user the policy is associated with.
      required:
        - UserName
        - PolicyName
        - PolicyDocument
      type: object
    InvalidInputException: {}
    LimitExceededException: {}
    ListGroupPoliciesRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: '<p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        Marker:
          allOf:
            - $ref: '#/components/schemas/markerType'
            - description: Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
        MaxItems:
          allOf:
            - $ref: '#/components/schemas/maxItemsType'
            - description: >-
                <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns
                <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
      required:
        - GroupName
      title: ListGroupPoliciesRequest
      type: object
    ListGroupPoliciesResponse:
      description: 'Contains the response to a successful <a>ListGroupPolicies</a> request. '
      example:
        PolicyNames:
          - AdminRoot
          - KeyPolicy
      properties:
        IsTruncated:
          allOf:
            - $ref: '#/components/schemas/booleanType'
            - description: A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all your results.
        Marker:
          allOf:
            - $ref: '#/components/schemas/responseMarkerType'
            - description: When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.
        PolicyNames:
          allOf:
            - $ref: '#/components/schemas/policyNameListType'
            - description: '<p>A list of policy names.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - PolicyNames
      type: object
    ListPoliciesRequest:
      properties:
        Marker:
          allOf:
            - $ref: '#/components/schemas/markerType'
            - description: Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
        MaxItems:
          allOf:
            - $ref: '#/components/schemas/maxItemsType'
            - description: >-
                <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns
                <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
        OnlyAttached:
          allOf:
            - $ref: '#/components/schemas/booleanType'
            - description: <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
        PathPrefix:
          allOf:
            - $ref: '#/components/schemas/policyPathType'
            - description: >-
                The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character
                (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
        PolicyUsageFilter:
          allOf:
            - $ref: '#/components/schemas/PolicyUsageType'
            - description: "<p>The policy usage method to use for filtering the results.</p> <p>To list only permissions policies, set\_<code>PolicyUsageFilter</code>\_to\_<code>PermissionsPolicy</code>. To list only the policies used to set permissions boundaries, set\_the value to\_<code>PermissionsBoundary</code>.</p> <p>This parameter is optional. If it is not included, all policies are returned. </p>"
        Scope:
          allOf:
            - $ref: '#/components/schemas/policyScopeType'
            - description: <p>The scope to use for filtering the results.</p> <p>To list only Amazon Web Services managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your Amazon Web Services account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
      title: ListPoliciesRequest
      type: object
    ListPoliciesResponse:
      description: 'Contains the response to a successful <a>ListPolicies</a> request. '
      properties:
        IsTruncated:
          allOf:
            - $ref: '#/components/schemas/booleanType'
            - description: A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all your results.
        Marker:
          allOf:
            - $ref: '#/components/schemas/responseMarkerType'
            - description: When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.
        Policies:
          allOf:
            - $ref: '#/components/schemas/policyListType'
            - description: A list of policies.
      type: object
    ListRolePoliciesRequest:
      properties:
        Marker:
          allOf:
            - $ref: '#/components/schemas/markerType'
            - description: Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
        MaxItems:
          allOf:
            - $ref: '#/components/schemas/maxItemsType'
            - description: >-
                <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns
                <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: '<p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - RoleName
      title: ListRolePoliciesRequest
      type: object
    ListRolePoliciesResponse:
      description: 'Contains the response to a successful <a>ListRolePolicies</a> request. '
      properties:
        IsTruncated:
          allOf:
            - $ref: '#/components/schemas/booleanType'
            - description: A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all your results.
        Marker:
          allOf:
            - $ref: '#/components/schemas/responseMarkerType'
            - description: When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.
        PolicyNames:
          allOf:
            - $ref: '#/components/schemas/policyNameListType'
            - description: A list of policy names.
      required:
        - PolicyNames
      type: object
    ListUserPoliciesRequest:
      properties:
        Marker:
          allOf:
            - $ref: '#/components/schemas/markerType'
            - description: Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
        MaxItems:
          allOf:
            - $ref: '#/components/schemas/maxItemsType'
            - description: >-
                <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns
                <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
        UserName:
          allOf:
            - $ref: '#/components/schemas/existingUserNameType'
            - description: '<p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - UserName
      title: ListUserPoliciesRequest
      type: object
    ListUserPoliciesResponse:
      description: 'Contains the response to a successful <a>ListUserPolicies</a> request. '
      properties:
        IsTruncated:
          allOf:
            - $ref: '#/components/schemas/booleanType'
            - description: A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all your results.
        Marker:
          allOf:
            - $ref: '#/components/schemas/responseMarkerType'
            - description: When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.
        PolicyNames:
          allOf:
            - $ref: '#/components/schemas/policyNameListType'
            - description: A list of policy names.
      required:
        - PolicyNames
      type: object
    MalformedPolicyDocumentException: {}
    NoSuchEntityException: {}
    Policy:
      description: |-
        Contains information about an attached policy.
         An attached policy is a managed policy that has been attached to a user, group, or role.
         For more information about managed policies, refer to [Managed Policies and Inline Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *User Guide*.
      type: object
      additionalProperties: false
      properties:
        PolicyDocument:
          description: The entire contents of the policy that defines permissions. For more information, see [Overview of JSON policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json).
          type: object
        PolicyName:
          description: The friendly name (not ARN) identifying the policy.
          type: string
      required:
        - PolicyName
        - PolicyDocument
    PolicyNotAttachableException: {}
    PolicyUsageType:
      description: <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM identities </a> in the <i>IAM User Guide</i>.</p>
      enum:
        - PermissionsPolicy
        - PermissionsBoundary
      type: string
    PutGroupPolicyRequest:
      properties:
        GroupName:
          allOf:
            - $ref: '#/components/schemas/groupNameType'
            - description: '<p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>'
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: >-
                <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to = IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character
                ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: '<p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - GroupName
        - PolicyName
        - PolicyDocument
      title: PutGroupPolicyRequest
      type: object
    PutRolePolicyRequest:
      properties:
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: >-
                <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character
                ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: '<p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        RoleName:
          allOf:
            - $ref: '#/components/schemas/roleNameType'
            - description: '<p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - RoleName
        - PolicyName
        - PolicyDocument
      title: PutRolePolicyRequest
      type: object
    PutUserPolicyRequest:
      properties:
        PolicyDocument:
          allOf:
            - $ref: '#/components/schemas/policyDocumentType'
            - description: >-
                <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character
                ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
        PolicyName:
          allOf:
            - $ref: '#/components/schemas/policyNameType'
            - description: '<p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        UserName:
          allOf:
            - $ref: '#/components/schemas/existingUserNameType'
            - description: '<p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
      required:
        - UserName
        - PolicyName
        - PolicyDocument
      title: PutUserPolicyRequest
      type: object
    ServiceFailureException: {}
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Value:
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          minLength: 1
          maxLength: 256
        Key:
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          minLength: 1
          maxLength: 128
      required:
        - Value
        - Key
    TagPolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: '<p>The ARN of the IAM customer managed policy to which you want to add tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        Tags:
          allOf:
            - $ref: '#/components/schemas/tagListType'
            - description: The list of tags that you want to attach to the IAM customer managed policy. Each tag consists of a key name and an associated value.
      required:
        - PolicyArn
        - Tags
      title: TagPolicyRequest
      type: object
    UnmodifiableEntityException: {}
    UntagPolicyRequest:
      properties:
        PolicyArn:
          allOf:
            - $ref: '#/components/schemas/arnType'
            - description: '<p>The ARN of the IAM customer managed policy from which you want to remove tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
        TagKeys:
          allOf:
            - $ref: '#/components/schemas/tagKeyListType'
            - description: A list of key names as a simple array of strings. The tags with matching keys are removed from the specified policy.
      required:
        - PolicyArn
        - TagKeys
      title: UntagPolicyRequest
      type: object
    arnType:
      description: <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
      maxLength: 2048
      minLength: 20
      type: string
    attachmentCountType:
      type: integer
    booleanType:
      type: boolean
    dateType:
      format: date-time
      type: string
    existingUserNameType:
      maxLength: 128
      minLength: 1
      pattern: '[\w+=,.@-]+'
      type: string
    groupNameType:
      maxLength: 128
      minLength: 1
      pattern: '[\w+=,.@-]+'
      type: string
    idType:
      maxLength: 128
      minLength: 16
      pattern: '[\w]+'
      type: string
    markerType:
      maxLength: 320
      minLength: 1
      pattern: '[\u0020-\u00FF]+'
      type: string
    maxItemsType:
      maximum: 1000
      minimum: 1
      type: integer
    policyDescriptionType:
      maxLength: 1000
      type: string
    policyDocumentType:
      maxLength: 131072
      minLength: 1
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      type: string
    policyListType:
      items:
        allOf:
          - $ref: '#/components/schemas/Policy'
          - xml:
              name: member
      type: array
    policyNameListType:
      description: <p>Contains a list of policy names.</p> <p>This data type is used as a response element in the <a>ListPolicies</a> operation.</p>
      items:
        allOf:
          - $ref: '#/components/schemas/policyNameType'
          - xml:
              name: member
      type: array
    policyNameType:
      maxLength: 128
      minLength: 1
      pattern: '[\w+=,.@-]+'
      type: string
    policyPathType:
      maxLength: 512
      minLength: 1
      pattern: ((/[A-Za-z0-9\.,\+@=_-]+)*)/
      type: string
    policyScopeType:
      enum:
        - All
        - AWS
        - Local
      type: string
    policyVersionIdType:
      pattern: v[1-9][0-9]*(\.[A-Za-z0-9-]*)?
      type: string
    responseMarkerType:
      type: string
    roleNameType:
      maxLength: 64
      minLength: 1
      pattern: '[\w+=,.@-]+'
      type: string
    tagKeyListType:
      items:
        allOf:
          - $ref: '#/components/schemas/tagKeyType'
          - xml:
              name: member
      maxItems: 50
      type: array
    tagKeyType:
      maxLength: 128
      minLength: 1
      pattern: '[\p{L}\p{Z}\p{N}_.:/=+\-@]+'
      type: string
    tagListType:
      items:
        allOf:
          - $ref: '#/components/schemas/Tag'
          - xml:
              name: member
      maxItems: 50
      type: array
    tagValueType:
      maxLength: 256
      minLength: 0
      pattern: '[\p{L}\p{Z}\p{N}_.:/=+\-@]*'
      type: string
    userNameType:
      maxLength: 64
      minLength: 1
      pattern: '[\w+=,.@-]+'
      type: string
    Group:
      type: object
      properties:
        Arn:
          description: ''
          type: string
        GroupName:
          description: |-
            The name of the group to create. Do not include the path in this value.
             The group name must be unique within the account. Group names are not distinguished by case. For example, you cannot create groups named both "ADMINS" and "admins". If you don't specify a name, CFN generates a unique physical ID and uses that ID for the group name.
              If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
              If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).
              Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple Regions. To prevent this, we recommend using ``Fn::Join`` and ``AWS::Region`` to create a Region-specific name, as in the following example: ``{"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "MyResourceName"}]]}``.
          type: string
        ManagedPolicyArns:
          description: |-
            The Amazon Resource Name (ARN) of the IAM policy you want to attach.
             For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Path:
          description: |-
            The path to the group. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
             This parameter is optional. If it is not included, it defaults to a slash (/).
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
          type: string
        Policies:
          description: |-
            Adds or updates an inline policy document that is embedded in the specified IAM group. To view AWS::IAM::Group snippets, see [Declaring an Group Resource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html#scenario-iam-group).
              The name of each inline policy for a role, user, or group must be unique. If you don't choose unique names, updates to the IAM identity will fail. 
              For information about limits on the number of inline policies that you can embed in a group, see [Limitations on Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Policy'
      x-stackql-resource-name: group
      description: |-
        Creates a new group.
          For information about the number of groups you can create, see [Limitations on Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
      x-type-name: AWS::IAM::Group
      x-stackql-primary-identifier:
        - GroupName
      x-create-only-properties:
        - GroupName
      x-read-only-properties:
        - Arn
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - iam:CreateGroup
          - iam:PutGroupPolicy
          - iam:AttachGroupPolicy
          - iam:GetGroupPolicy
          - iam:GetGroup
        read:
          - iam:GetGroup
          - iam:ListGroupPolicies
          - iam:GetGroupPolicy
          - iam:ListAttachedGroupPolicies
        update:
          - iam:GetGroup
          - iam:UpdateGroup
          - iam:DetachGroupPolicy
          - iam:AttachGroupPolicy
          - iam:DeleteGroupPolicy
          - iam:PutGroupPolicy
          - iam:GetGroupPolicy
        delete:
          - iam:GetGroup
          - iam:DeleteGroup
          - iam:ListAttachedGroupPolicies
          - iam:ListGroupPolicies
          - iam:DetachGroupPolicy
          - iam:DeleteGroupPolicy
          - iam:GetGroupPolicy
        list:
          - iam:ListGroups
    GroupPolicy:
      type: object
      properties:
        PolicyDocument:
          description: |-
            The policy document.
             You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
             The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
              +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
              +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
              +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
          type: object
        PolicyName:
          description: |-
            The name of the policy document.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
          type: string
        GroupName:
          description: |-
            The name of the group to associate the policy with.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.
          type: string
      required:
        - PolicyName
        - GroupName
      x-stackql-resource-name: group_policy
      description: |-
        Adds or updates an inline policy document that is embedded in the specified IAM group.
         A group can also have managed policies attached to it. To attach a managed policy to a group, use [AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html). To create a new managed policy, use [AWS::IAM::ManagedPolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html). For information about policies, see [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *IAM User Guide*.
         For information about the maximum number of inline policies that you can embed in a group, see [IAM and quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html) in the *IAM User Guide*.
      x-type-name: AWS::IAM::GroupPolicy
      x-stackql-primary-identifier:
        - PolicyName
        - GroupName
      x-create-only-properties:
        - PolicyName
        - GroupName
      x-required-properties:
        - PolicyName
        - GroupName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - iam:PutGroupPolicy
          - iam:GetGroupPolicy
        read:
          - iam:GetGroupPolicy
        update:
          - iam:PutGroupPolicy
          - iam:GetGroupPolicy
        delete:
          - iam:DeleteGroupPolicy
          - iam:GetGroupPolicy
    InstanceProfile:
      type: object
      properties:
        Path:
          type: string
          description: |-
            The path to the instance profile. For more information about paths, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
             This parameter is optional. If it is not included, it defaults to a slash (/).
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
        Roles:
          type: array
          description: The name of the role to associate with the instance profile. Only one role can be assigned to an EC2 instance at a time, and all applications on the instance share the same role and permissions.
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        InstanceProfileName:
          type: string
          description: |-
            The name of the instance profile to create.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
        Arn:
          type: string
          description: ''
      required:
        - Roles
      x-stackql-resource-name: instance_profile
      description: |-
        Creates a new instance profile. For information about instance profiles, see [Using instance profiles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html).
          For information about the number of instance profiles you can create, see [object quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html) in the *User Guide*.
      x-type-name: AWS::IAM::InstanceProfile
      x-stackql-primary-identifier:
        - InstanceProfileName
      x-create-only-properties:
        - InstanceProfileName
        - Path
      x-read-only-properties:
        - Arn
      x-required-properties:
        - Roles
      x-required-permissions:
        create:
          - iam:CreateInstanceProfile
          - iam:PassRole
          - iam:AddRoleToInstanceProfile
          - iam:GetInstanceProfile
        read:
          - iam:GetInstanceProfile
        update:
          - iam:PassRole
          - iam:RemoveRoleFromInstanceProfile
          - iam:AddRoleToInstanceProfile
          - iam:GetInstanceProfile
        delete:
          - iam:GetInstanceProfile
          - iam:RemoveRoleFromInstanceProfile
          - iam:DeleteInstanceProfile
        list:
          - iam:ListInstanceProfiles
    ManagedPolicy:
      type: object
      properties:
        Description:
          type: string
          description: |-
            A friendly description of the policy.
             Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."
             The policy description is immutable. After a value is assigned, it cannot be changed.
        Groups:
          x-insertionOrder: false
          type: array
          description: |-
            The name (friendly name, not ARN) of the group to attach the policy to.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
          uniqueItems: true
          items:
            type: string
        ManagedPolicyName:
          type: string
          description: |-
            The friendly name of the policy.
              If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
              If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).
              Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple Regions. To prevent this, we recommend using ``Fn::Join`` and ``AWS::Region`` to create a Region-specific name, as in the following example: ``{"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "MyResourceName"}]]}``.
        Path:
          type: string
          default: /
          description: |-
            The path for the policy.
             For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
             This parameter is optional. If it is not included, it defaults to a slash (/).
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
              You cannot use an asterisk (*) in the path name.
        PolicyDocument:
          type: object
          description: |-
            The JSON policy document that you want to use as the content for the new policy.
             You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
             The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see [IAM and character quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length).
             To learn more about JSON policy grammar, see [Grammar of the IAM JSON policy language](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html) in the *IAM User Guide*. 
             The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
              +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
              +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
              +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
        Roles:
          x-insertionOrder: false
          type: array
          description: |-
            The name (friendly name, not ARN) of the role to attach the policy to.
             This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
              If an external policy (such as ``AWS::IAM::Policy`` or ``AWS::IAM::ManagedPolicy``) has a ``Ref`` to a role and if a resource (such as ``AWS::ECS::Service``) also has a ``Ref`` to the same role, add a ``DependsOn`` attribute to the resource to make the resource depend on the external policy. This dependency ensures that the role's policy is available throughout the resource's lifecycle. For example, when you delete a stack with an ``AWS::ECS::Service`` resource, the ``DependsOn`` attribute ensures that CFN deletes the ``AWS::ECS::Service`` resource before deleting its role's policy.
          uniqueItems: true
          items:
            type: string
        Users:
          x-insertionOrder: false
          type: array
          description: |-
            The name (friendly name, not ARN) of the IAM user to attach the policy to.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
          uniqueItems: true
          items:
            type: string
        PolicyArn:
          type: string
          description: ''
        AttachmentCount:
          type: integer
          description: ''
        CreateDate:
          type: string
          description: ''
        UpdateDate:
          type: string
          description: ''
        DefaultVersionId:
          type: string
          description: ''
        IsAttachable:
          type: boolean
          description: ''
        PermissionsBoundaryUsageCount:
          type: integer
          description: ''
        PolicyId:
          type: string
          description: ''
      required:
        - PolicyDocument
      x-stackql-resource-name: managed_policy
      description: |-
        Creates a new managed policy for your AWS-account.
         This operation creates a policy version with a version identifier of ``v1`` and sets v1 as the policy's default version. For more information about policy versions, see [Versioning for managed policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html) in the *IAM User Guide*.
         As a best practice, you can validate your IAM policies. To learn more, see [Validating IAM policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html) in the *IAM User Guide*.
         For more information about managed policies in general, see [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *IAM User Guide*.
      x-type-name: AWS::IAM::ManagedPolicy
      x-stackql-primary-identifier:
        - PolicyArn
      x-create-only-properties:
        - ManagedPolicyName
        - Description
        - Path
      x-read-only-properties:
        - PolicyArn
        - AttachmentCount
        - CreateDate
        - DefaultVersionId
        - IsAttachable
        - PermissionsBoundaryUsageCount
        - PolicyId
        - UpdateDate
      x-required-properties:
        - PolicyDocument
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - iam:CreatePolicy
          - iam:AttachGroupPolicy
          - iam:AttachUserPolicy
          - iam:AttachRolePolicy
        read:
          - iam:GetPolicy
          - iam:ListEntitiesForPolicy
          - iam:GetPolicyVersion
        update:
          - iam:DetachRolePolicy
          - iam:GetPolicy
          - iam:ListPolicyVersions
          - iam:DetachGroupPolicy
          - iam:DetachUserPolicy
          - iam:CreatePolicyVersion
          - iam:DeletePolicyVersion
          - iam:AttachGroupPolicy
          - iam:AttachUserPolicy
          - iam:AttachRolePolicy
        delete:
          - iam:DetachRolePolicy
          - iam:GetPolicy
          - iam:ListPolicyVersions
          - iam:DetachGroupPolicy
          - iam:DetachUserPolicy
          - iam:DeletePolicyVersion
          - iam:DeletePolicy
          - iam:ListEntitiesForPolicy
        list:
          - iam:ListPolicies
    OIDCProvider:
      type: object
      properties:
        ClientIdList:
          type: array
          x-insertionOrder: false
          items:
            minLength: 1
            maxLength: 255
            type: string
        Url:
          minLength: 1
          maxLength: 255
          type: string
        ThumbprintList:
          type: array
          x-insertionOrder: false
          items:
            minLength: 40
            maxLength: 40
            pattern: '[0-9A-Fa-f]{40}'
            type: string
          maxItems: 5
        Arn:
          description: Amazon Resource Name (ARN) of the OIDC provider
          minLength: 20
          maxLength: 2048
          type: string
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ThumbprintList
      x-stackql-resource-name: oidc_provider
      description: Resource Type definition for AWS::IAM::OIDCProvider
      x-type-name: AWS::IAM::OIDCProvider
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - Url
      x-read-only-properties:
        - Arn
      x-required-properties:
        - ThumbprintList
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - iam:CreateOpenIDConnectProvider
          - iam:TagOpenIDConnectProvider
          - iam:GetOpenIDConnectProvider
        read:
          - iam:GetOpenIDConnectProvider
        update:
          - iam:UpdateOpenIDConnectProviderThumbprint
          - iam:RemoveClientIDFromOpenIDConnectProvider
          - iam:AddClientIDToOpenIDConnectProvider
          - iam:GetOpenIDConnectProvider
          - iam:TagOpenIDConnectProvider
          - iam:UntagOpenIDConnectProvider
          - iam:ListOpenIDConnectProviderTags
        delete:
          - iam:DeleteOpenIDConnectProvider
        list:
          - iam:ListOpenIDConnectProvider
          - iam:GetOpenIDConnectProvider
    Role:
      type: object
      properties:
        Arn:
          description: ''
          type: string
        AssumeRolePolicyDocument:
          description: >-
            The trust policy that is associated with this role. Trust policies define which entities can assume the role. You can associate only one trust policy with a role. For an example of a policy that can be used to assume a role, see [Template Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role--examples). For more information about the elements that you can use in an IAM policy, see [Policy Elements
            Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html) in the *User Guide*.
          type: object
        Description:
          description: A description of the role that you provide.
          type: string
        ManagedPolicyArns:
          description: |-
            A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
             For more information about ARNs, see [Amazon Resource Names (ARNs) and Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        MaxSessionDuration:
          description: |-
            The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default value of one hour is applied. This setting can have a value from 1 hour to 12 hours.
             Anyone who assumes the role from the CLI or API can use the ``DurationSeconds`` API parameter or the ``duration-seconds`` CLI parameter to request a longer session. The ``MaxSessionDuration`` setting determines the maximum duration that can be requested using the ``DurationSeconds`` parameter. If users don't specify a value for the ``DurationSeconds`` parameter, their security credentials are valid for one hour by default. This applies when you use the ``AssumeRole*`` API operations or the ``assume-role*`` CLI operations but does not apply when you use those operations to create a console URL. For more information, see [Using IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) in the *IAM User Guide*.
          type: integer
        Path:
          description: |-
            The path to the role. For more information about paths, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
             This parameter is optional. If it is not included, it defaults to a slash (/).
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
          default: /
          type: string
        PermissionsBoundary:
          description: |-
            The ARN of the policy used to set the permissions boundary for the role.
             For more information about permissions boundaries, see [Permissions boundaries for IAM identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User Guide*.
          type: string
        Policies:
          description: |-
            Adds or updates an inline policy document that is embedded in the specified IAM role.
             When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role. You can update a role's trust policy later. For more information about IAM roles, go to [Using Roles to Delegate Permissions and Federate Identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html).
             A role can also have an attached managed policy. For information about policies, see [Managed Policies and Inline Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *User Guide*.
             For information about limits on the number of inline policies that you can embed with a role, see [Limitations on Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
              If an external policy (such as ``AWS::IAM::Policy`` or
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Policy'
        RoleId:
          description: ''
          type: string
        RoleName:
          description: |-
            A name for the IAM role, up to 64 characters in length. For valid values, see the ``RoleName`` parameter for the [CreateRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html) action in the *User Guide*.
             This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. The role name must be unique within the account. Role names are not distinguished by case. For example, you cannot create roles named both "Role1" and "role1".
             If you don't specify a name, CFN generates a unique physical ID and uses that ID for the role name.
             If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/Use
          type: string
        Tags:
          description: A list of tags that are attached to the role. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide*.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AssumeRolePolicyDocument
      x-stackql-resource-name: role
      description: |-
        Creates a new role for your AWS-account.
          For more information about roles, see [IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*. For information about quotas for role names and the number of roles you can create, see [IAM and quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html) in the *IAM User Guide*.
      x-type-name: AWS::IAM::Role
      x-stackql-primary-identifier:
        - RoleName
      x-create-only-properties:
        - Path
        - RoleName
      x-read-only-properties:
        - Arn
        - RoleId
      x-required-properties:
        - AssumeRolePolicyDocument
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - iam:CreateRole
          - iam:PutRolePolicy
          - iam:AttachRolePolicy
          - iam:GetRolePolicy
          - iam:TagRole
          - iam:UntagRole
          - iam:GetRole
        read:
          - iam:GetRole
          - iam:ListAttachedRolePolicies
          - iam:ListRolePolicies
          - iam:GetRolePolicy
        update:
          - iam:UpdateRole
          - iam:UpdateRoleDescription
          - iam:UpdateAssumeRolePolicy
          - iam:DetachRolePolicy
          - iam:AttachRolePolicy
          - iam:DeleteRolePermissionsBoundary
          - iam:PutRolePermissionsBoundary
          - iam:DeleteRolePolicy
          - iam:PutRolePolicy
          - iam:TagRole
          - iam:UntagRole
        delete:
          - iam:DeleteRole
          - iam:DetachRolePolicy
          - iam:DeleteRolePolicy
          - iam:GetRole
          - iam:ListAttachedRolePolicies
          - iam:ListRolePolicies
          - iam:TagRole
          - iam:UntagRole
        list:
          - iam:ListRoles
    RolePolicy:
      type: object
      properties:
        PolicyDocument:
          description: |-
            The policy document.
             You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
             The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
              +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
              +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
              +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
          type: object
        PolicyName:
          description: |-
            The name of the policy document.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
          type: string
        RoleName:
          description: |-
            The name of the role to associate the policy with.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
          type: string
      required:
        - PolicyName
        - RoleName
      x-stackql-resource-name: role_policy
      description: |-
        Adds or updates an inline policy document that is embedded in the specified IAM role.
         When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using [CreateRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html). You can update a role's trust policy using [UpdateAssumeRolePolicy](https://docs.aws.amazon.com/IAM/latest/APIReference/API_UpdateAssumeRolePolicy.html). For information about roles, see [roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html) in the *IAM User Guide*.
         A role can also have a managed policy attached to it. To attach a managed policy to a role, use [AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html). To create a new managed policy, use [AWS::IAM::ManagedPolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html). For information about policies, see [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *IAM User Guide*.
         For information about the maximum number of inline policies that you can embed with a role, see [IAM and quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html) in the *IAM User Guide*.
      x-type-name: AWS::IAM::RolePolicy
      x-stackql-primary-identifier:
        - PolicyName
        - RoleName
      x-create-only-properties:
        - PolicyName
        - RoleName
      x-required-properties:
        - PolicyName
        - RoleName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - iam:PutRolePolicy
          - iam:GetRolePolicy
        read:
          - iam:GetRolePolicy
        update:
          - iam:PutRolePolicy
          - iam:GetRolePolicy
        delete:
          - iam:DeleteRolePolicy
          - iam:GetRolePolicy
    SAMLProvider:
      type: object
      properties:
        Name:
          minLength: 1
          maxLength: 128
          pattern: '[\w._-]+'
          type: string
        SamlMetadataDocument:
          minLength: 1000
          maxLength: 10000000
          type: string
        Arn:
          description: Amazon Resource Name (ARN) of the SAML provider
          minLength: 1
          maxLength: 1600
          type: string
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - SamlMetadataDocument
      x-stackql-resource-name: saml_provider
      description: Resource Type definition for AWS::IAM::SAMLProvider
      x-type-name: AWS::IAM::SAMLProvider
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Arn
      x-required-properties:
        - SamlMetadataDocument
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - iam:CreateSAMLProvider
          - iam:GetSAMLProvider
          - iam:TagSAMLProvider
        read:
          - iam:GetSAMLProvider
        update:
          - iam:UpdateSAMLProvider
          - iam:GetSAMLProvider
          - iam:TagSAMLProvider
          - iam:ListSAMLProviderTags
          - iam:UntagSAMLProvider
        delete:
          - iam:DeleteSAMLProvider
        list:
          - iam:ListSAMLProviders
          - iam:GetSAMLProvider
    ServerCertificate:
      type: object
      properties:
        CertificateBody:
          minLength: 1
          maxLength: 16384
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          type: string
        CertificateChain:
          minLength: 1
          maxLength: 2097152
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          type: string
        ServerCertificateName:
          minLength: 1
          maxLength: 128
          pattern: '[\w+=,.@-]+'
          type: string
        Path:
          minLength: 1
          maxLength: 512
          pattern: (\u002F)|(\u002F[\u0021-\u007F]+\u002F)
          type: string
        PrivateKey:
          minLength: 1
          maxLength: 16384
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          type: string
        Arn:
          description: Amazon Resource Name (ARN) of the server certificate
          minLength: 1
          maxLength: 1600
          type: string
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: server_certificate
      description: Resource Type definition for AWS::IAM::ServerCertificate
      x-type-name: AWS::IAM::ServerCertificate
      x-stackql-primary-identifier:
        - ServerCertificateName
      x-create-only-properties:
        - ServerCertificateName
        - PrivateKey
        - CertificateBody
        - CertificateChain
      x-write-only-properties:
        - PrivateKey
        - CertificateBody
        - CertificateChain
      x-read-only-properties:
        - Arn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - iam:UploadServerCertificate
          - iam:TagServerCertificate
          - iam:GetServerCertificate
        read:
          - iam:GetServerCertificate
        update:
          - iam:TagServerCertificate
          - iam:UntagServerCertificate
          - iam:ListServerCertificateTags
          - iam:GetServerCertificate
        delete:
          - iam:DeleteServerCertificate
        list:
          - iam:ListServerCertificates
          - iam:GetServerCertificate
    ServiceLinkedRole:
      type: object
      properties:
        RoleName:
          description: The name of the role.
          type: string
        CustomSuffix:
          description: A string that you provide, which is combined with the service-provided prefix to form the complete role name.
          type: string
        Description:
          description: The description of the role.
          type: string
        AWSServiceName:
          description: The service principal for the AWS service to which this role is attached.
          type: string
      required: []
      x-stackql-resource-name: service_linked_role
      description: Resource Type definition for AWS::IAM::ServiceLinkedRole
      x-type-name: AWS::IAM::ServiceLinkedRole
      x-stackql-primary-identifier:
        - RoleName
      x-create-only-properties:
        - CustomSuffix
        - AWSServiceName
      x-write-only-properties:
        - CustomSuffix
        - AWSServiceName
      x-read-only-properties:
        - RoleName
      x-required-properties: []
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - iam:GetRole
        read:
          - iam:GetRole
        update:
          - iam:UpdateRole
          - iam:GetRole
        delete:
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
          - iam:GetRole
    LoginProfile:
      description: Creates a password for the specified user, giving the user the ability to access AWS services through the console. For more information about managing passwords, see [Managing Passwords](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html) in the *User Guide*.
      type: object
      additionalProperties: false
      properties:
        PasswordResetRequired:
          description: Specifies whether the user is required to set a new password on next sign-in.
          type: boolean
        Password:
          description: The user's password.
          type: string
      required:
        - Password
    User:
      type: object
      properties:
        Path:
          description: |-
            The path for the user name. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
             This parameter is optional. If it is not included, it defaults to a slash (/).
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
          type: string
        ManagedPolicyArns:
          description: |-
            A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the user.
             For more information about ARNs, see [Amazon Resource Names (ARNs) and Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Policies:
          description: |-
            Adds or updates an inline policy document that is embedded in the specified IAM user. To view AWS::IAM::User snippets, see [Declaring an User Resource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html#scenario-iam-user).
              The name of each policy for a role, user, or group must be unique. If you don't choose unique names, updates to the IAM identity will fail. 
              For information about limits on the number of inline policies that you can embed in a user, see [Limitations on Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Policy'
        UserName:
          description: |-
            The name of the user to create. Do not include the path in this value.
             This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. The user name must be unique within the account. User names are not distinguished by case. For example, you cannot create users named both "John" and "john".
             If you don't specify a name, CFN generates a unique physical ID and uses that ID for the user name.
             If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).
              Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple Regions. To prevent this, we recommend using ``Fn::Join`` and ``AWS::Region`` to create a Region-specific name, as in the following example: ``{"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "MyResourceName"}]]}``.
          type: string
        Groups:
          description: A list of group names to which you want to add the user.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Arn:
          description: ''
          type: string
        LoginProfile:
          description: |-
            Creates a password for the specified IAM user. A password allows an IAM user to access AWS services through the console.
             You can use the CLI, the AWS API, or the *Users* page in the IAM console to create a password for any IAM user. Use [ChangePassword](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ChangePassword.html) to update your own existing password in the *My Security Credentials* page in the console.
             For more information about managing passwords, see [Managing passwords](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html) in the *User Guide*.
          $ref: '#/components/schemas/LoginProfile'
        Tags:
          description: |-
            A list of tags that you want to attach to the new user. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide*.
              If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        PermissionsBoundary:
          description: |-
            The ARN of the managed policy that is used to set the permissions boundary for the user.
             A permissions boundary policy defines the maximum permissions that identity-based policies can grant to an entity, but does not grant permissions. Permissions boundaries do not define the maximum permissions that a resource-based policy can grant to an entity. To learn more, see [Permissions boundaries for IAM entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User Guide*.
             For more information about policy types, see [Policy types](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policy-types) in the *IAM User Guide*.
          type: string
      x-stackql-resource-name: user
      description: |-
        Creates a new IAM user for your AWS-account.
          For information about quotas for the number of IAM users you can create, see [IAM and quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html) in the *IAM User Guide*.
      x-type-name: AWS::IAM::User
      x-stackql-primary-identifier:
        - UserName
      x-create-only-properties:
        - UserName
      x-write-only-properties:
        - LoginProfile/Password
      x-read-only-properties:
        - Arn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - iam:CreateLoginProfile
          - iam:AddUserToGroup
          - iam:PutUserPolicy
          - iam:AttachUserPolicy
          - iam:CreateUser
          - iam:GetUser
          - iam:TagUser
        read:
          - iam:GetUserPolicy
          - iam:ListGroupsForUser
          - iam:ListAttachedUserPolicies
          - iam:ListUserPolicies
          - iam:GetUser
          - iam:GetLoginProfile
        update:
          - iam:UpdateLoginProfile
          - iam:UpdateUser
          - iam:PutUserPermissionsBoundary
          - iam:AttachUserPolicy
          - iam:DeleteUserPolicy
          - iam:DeleteUserPermissionsBoundary
          - iam:TagUser
          - iam:UntagUser
          - iam:CreateLoginProfile
          - iam:RemoveUserFromGroup
          - iam:AddUserToGroup
          - iam:PutUserPolicy
          - iam:DetachUserPolicy
          - iam:GetLoginProfile
          - iam:DeleteLoginProfile
          - iam:GetUser
          - iam:ListUserTags
        delete:
          - iam:DeleteAccessKey
          - iam:RemoveUserFromGroup
          - iam:DeleteUserPolicy
          - iam:DeleteUser
          - iam:DetachUserPolicy
          - iam:DeleteLoginProfile
          - iam:ListAccessKeys
          - iam:GetUserPolicy
          - iam:ListGroupsForUser
          - iam:ListAttachedUserPolicies
          - iam:ListUserPolicies
          - iam:GetUser
          - iam:GetLoginProfile
        list:
          - iam:listUsers
    UserPolicy:
      type: object
      properties:
        PolicyDocument:
          description: |-
            The policy document.
             You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
             The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
              +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
              +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
              +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
          type: object
        PolicyName:
          description: |-
            The name of the policy document.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
          type: string
        UserName:
          description: |-
            The name of the user to associate the policy with.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
          type: string
      required:
        - PolicyName
        - UserName
      x-stackql-resource-name: user_policy
      description: |-
        Adds or updates an inline policy document that is embedded in the specified IAM user.
         An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use [AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html). To create a new managed policy, use [AWS::IAM::ManagedPolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html). For information about policies, see [Managed policies and inline policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *IAM User Guide*.
         For information about the maximum number of inline policies that you can embed in a user, see [IAM and quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html) in the *IAM User Guide*.
      x-type-name: AWS::IAM::UserPolicy
      x-stackql-primary-identifier:
        - PolicyName
        - UserName
      x-create-only-properties:
        - PolicyName
        - UserName
      x-required-properties:
        - PolicyName
        - UserName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - iam:PutUserPolicy
          - iam:GetUserPolicy
        read:
          - iam:GetUserPolicy
        update:
          - iam:PutUserPolicy
          - iam:GetUserPolicy
        delete:
          - iam:DeleteUserPolicy
          - iam:GetUserPolicy
    VirtualMFADevice:
      type: object
      properties:
        VirtualMfaDeviceName:
          minLength: 1
          maxLength: 226
          pattern: '[\w+=,.@-]+'
          type: string
        Path:
          minLength: 1
          maxLength: 512
          pattern: (\u002F)|(\u002F[\u0021-\u007F]+\u002F)
          type: string
        SerialNumber:
          minLength: 9
          maxLength: 256
          pattern: '[\w+=/:,.@-]+'
          type: string
        Users:
          type: array
          uniqueItems: false
          items:
            type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Users
      x-stackql-resource-name: virtualmfa_device
      description: Resource Type definition for AWS::IAM::VirtualMFADevice
      x-type-name: AWS::IAM::VirtualMFADevice
      x-stackql-primary-identifier:
        - SerialNumber
      x-create-only-properties:
        - VirtualMfaDeviceName
        - Base32StringSeed
        - Path
      x-read-only-properties:
        - SerialNumber
      x-required-properties:
        - Users
      x-required-permissions:
        create:
          - iam:CreateVirtualMFADevice
          - iam:EnableMFADevice
          - iam:ListVirtualMFADevices
        read:
          - iam:ListVirtualMFADevices
        update:
          - iam:TagMFADevice
          - iam:UntagMFADevice
        delete:
          - iam:DeleteVirtualMFADevice
          - iam:DeactivateMFADevice
        list:
          - iam:ListVirtualMFADevices
    CreateGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              description: ''
              type: string
            GroupName:
              description: |-
                The name of the group to create. Do not include the path in this value.
                 The group name must be unique within the account. Group names are not distinguished by case. For example, you cannot create groups named both "ADMINS" and "admins". If you don't specify a name, CFN generates a unique physical ID and uses that ID for the group name.
                  If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
                  If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).
                  Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple Regions. To prevent this, we recommend using ``Fn::Join`` and ``AWS::Region`` to create a Region-specific name, as in the following example: ``{"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "MyResourceName"}]]}``.
              type: string
            ManagedPolicyArns:
              description: |-
                The Amazon Resource Name (ARN) of the IAM policy you want to attach.
                 For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            Path:
              description: |-
                The path to the group. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
                 This parameter is optional. If it is not included, it defaults to a slash (/).
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
              type: string
            Policies:
              description: |-
                Adds or updates an inline policy document that is embedded in the specified IAM group. To view AWS::IAM::Group snippets, see [Declaring an Group Resource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html#scenario-iam-group).
                  The name of each inline policy for a role, user, or group must be unique. If you don't choose unique names, updates to the IAM identity will fail. 
                  For information about limits on the number of inline policies that you can embed in a group, see [Limitations on Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Policy'
          x-stackQL-stringOnly: true
      x-title: CreateGroupRequest
      type: object
      required: []
    CreateGroupPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PolicyDocument:
              description: |-
                The policy document.
                 You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
                 The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
                  +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
                  +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
                  +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
              type: object
            PolicyName:
              description: |-
                The name of the policy document.
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
              type: string
            GroupName:
              description: |-
                The name of the group to associate the policy with.
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateGroupPolicyRequest
      type: object
      required: []
    CreateInstanceProfileRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Path:
              type: string
              description: |-
                The path to the instance profile. For more information about paths, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
                 This parameter is optional. If it is not included, it defaults to a slash (/).
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
            Roles:
              type: array
              description: The name of the role to associate with the instance profile. Only one role can be assigned to an EC2 instance at a time, and all applications on the instance share the same role and permissions.
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            InstanceProfileName:
              type: string
              description: |-
                The name of the instance profile to create.
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
            Arn:
              type: string
              description: ''
          x-stackQL-stringOnly: true
      x-title: CreateInstanceProfileRequest
      type: object
      required: []
    CreateManagedPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              type: string
              description: |-
                A friendly description of the policy.
                 Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."
                 The policy description is immutable. After a value is assigned, it cannot be changed.
            Groups:
              x-insertionOrder: false
              type: array
              description: |-
                The name (friendly name, not ARN) of the group to attach the policy to.
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
              uniqueItems: true
              items:
                type: string
            ManagedPolicyName:
              type: string
              description: |-
                The friendly name of the policy.
                  If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
                  If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).
                  Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple Regions. To prevent this, we recommend using ``Fn::Join`` and ``AWS::Region`` to create a Region-specific name, as in the following example: ``{"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "MyResourceName"}]]}``.
            Path:
              type: string
              default: /
              description: |-
                The path for the policy.
                 For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
                 This parameter is optional. If it is not included, it defaults to a slash (/).
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
                  You cannot use an asterisk (*) in the path name.
            PolicyDocument:
              type: object
              description: |-
                The JSON policy document that you want to use as the content for the new policy.
                 You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
                 The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see [IAM and character quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length).
                 To learn more about JSON policy grammar, see [Grammar of the IAM JSON policy language](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html) in the *IAM User Guide*. 
                 The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
                  +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
                  +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
                  +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
            Roles:
              x-insertionOrder: false
              type: array
              description: |-
                The name (friendly name, not ARN) of the role to attach the policy to.
                 This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
                  If an external policy (such as ``AWS::IAM::Policy`` or ``AWS::IAM::ManagedPolicy``) has a ``Ref`` to a role and if a resource (such as ``AWS::ECS::Service``) also has a ``Ref`` to the same role, add a ``DependsOn`` attribute to the resource to make the resource depend on the external policy. This dependency ensures that the role's policy is available throughout the resource's lifecycle. For example, when you delete a stack with an ``AWS::ECS::Service`` resource, the ``DependsOn`` attribute ensures that CFN deletes the ``AWS::ECS::Service`` resource before deleting its role's policy.
              uniqueItems: true
              items:
                type: string
            Users:
              x-insertionOrder: false
              type: array
              description: |-
                The name (friendly name, not ARN) of the IAM user to attach the policy to.
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
              uniqueItems: true
              items:
                type: string
            PolicyArn:
              type: string
              description: ''
            AttachmentCount:
              type: integer
              description: ''
            CreateDate:
              type: string
              description: ''
            UpdateDate:
              type: string
              description: ''
            DefaultVersionId:
              type: string
              description: ''
            IsAttachable:
              type: boolean
              description: ''
            PermissionsBoundaryUsageCount:
              type: integer
              description: ''
            PolicyId:
              type: string
              description: ''
          x-stackQL-stringOnly: true
      x-title: CreateManagedPolicyRequest
      type: object
      required: []
    CreateOIDCProviderRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ClientIdList:
              type: array
              x-insertionOrder: false
              items:
                minLength: 1
                maxLength: 255
                type: string
            Url:
              minLength: 1
              maxLength: 255
              type: string
            ThumbprintList:
              type: array
              x-insertionOrder: false
              items:
                minLength: 40
                maxLength: 40
                pattern: '[0-9A-Fa-f]{40}'
                type: string
              maxItems: 5
            Arn:
              description: Amazon Resource Name (ARN) of the OIDC provider
              minLength: 20
              maxLength: 2048
              type: string
            Tags:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateOIDCProviderRequest
      type: object
      required: []
    CreateRoleRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              description: ''
              type: string
            AssumeRolePolicyDocument:
              description: >-
                The trust policy that is associated with this role. Trust policies define which entities can assume the role. You can associate only one trust policy with a role. For an example of a policy that can be used to assume a role, see [Template Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role--examples). For more information about the elements that you can use in an IAM policy, see [Policy Elements
                Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html) in the *User Guide*.
              type: object
            Description:
              description: A description of the role that you provide.
              type: string
            ManagedPolicyArns:
              description: |-
                A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
                 For more information about ARNs, see [Amazon Resource Names (ARNs) and Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            MaxSessionDuration:
              description: |-
                The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default value of one hour is applied. This setting can have a value from 1 hour to 12 hours.
                 Anyone who assumes the role from the CLI or API can use the ``DurationSeconds`` API parameter or the ``duration-seconds`` CLI parameter to request a longer session. The ``MaxSessionDuration`` setting determines the maximum duration that can be requested using the ``DurationSeconds`` parameter. If users don't specify a value for the ``DurationSeconds`` parameter, their security credentials are valid for one hour by default. This applies when you use the ``AssumeRole*`` API operations or the ``assume-role*`` CLI operations but does not apply when you use those operations to create a console URL. For more information, see [Using IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) in the *IAM User Guide*.
              type: integer
            Path:
              description: |-
                The path to the role. For more information about paths, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
                 This parameter is optional. If it is not included, it defaults to a slash (/).
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
              default: /
              type: string
            PermissionsBoundary:
              description: |-
                The ARN of the policy used to set the permissions boundary for the role.
                 For more information about permissions boundaries, see [Permissions boundaries for IAM identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User Guide*.
              type: string
            Policies:
              description: |-
                Adds or updates an inline policy document that is embedded in the specified IAM role.
                 When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role. You can update a role's trust policy later. For more information about IAM roles, go to [Using Roles to Delegate Permissions and Federate Identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html).
                 A role can also have an attached managed policy. For information about policies, see [Managed Policies and Inline Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *User Guide*.
                 For information about limits on the number of inline policies that you can embed with a role, see [Limitations on Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
                  If an external policy (such as ``AWS::IAM::Policy`` or
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Policy'
            RoleId:
              description: ''
              type: string
            RoleName:
              description: |-
                A name for the IAM role, up to 64 characters in length. For valid values, see the ``RoleName`` parameter for the [CreateRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html) action in the *User Guide*.
                 This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. The role name must be unique within the account. Role names are not distinguished by case. For example, you cannot create roles named both "Role1" and "role1".
                 If you don't specify a name, CFN generates a unique physical ID and uses that ID for the role name.
                 If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/Use
              type: string
            Tags:
              description: A list of tags that are attached to the role. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide*.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateRoleRequest
      type: object
      required: []
    CreateRolePolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PolicyDocument:
              description: |-
                The policy document.
                 You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
                 The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
                  +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
                  +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
                  +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
              type: object
            PolicyName:
              description: |-
                The name of the policy document.
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
              type: string
            RoleName:
              description: |-
                The name of the role to associate the policy with.
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateRolePolicyRequest
      type: object
      required: []
    CreateSAMLProviderRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              minLength: 1
              maxLength: 128
              pattern: '[\w._-]+'
              type: string
            SamlMetadataDocument:
              minLength: 1000
              maxLength: 10000000
              type: string
            Arn:
              description: Amazon Resource Name (ARN) of the SAML provider
              minLength: 1
              maxLength: 1600
              type: string
            Tags:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateSAMLProviderRequest
      type: object
      required: []
    CreateServerCertificateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CertificateBody:
              minLength: 1
              maxLength: 16384
              pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
              type: string
            CertificateChain:
              minLength: 1
              maxLength: 2097152
              pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
              type: string
            ServerCertificateName:
              minLength: 1
              maxLength: 128
              pattern: '[\w+=,.@-]+'
              type: string
            Path:
              minLength: 1
              maxLength: 512
              pattern: (\u002F)|(\u002F[\u0021-\u007F]+\u002F)
              type: string
            PrivateKey:
              minLength: 1
              maxLength: 16384
              pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
              type: string
            Arn:
              description: Amazon Resource Name (ARN) of the server certificate
              minLength: 1
              maxLength: 1600
              type: string
            Tags:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateServerCertificateRequest
      type: object
      required: []
    CreateServiceLinkedRoleRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RoleName:
              description: The name of the role.
              type: string
            CustomSuffix:
              description: A string that you provide, which is combined with the service-provided prefix to form the complete role name.
              type: string
            Description:
              description: The description of the role.
              type: string
            AWSServiceName:
              description: The service principal for the AWS service to which this role is attached.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateServiceLinkedRoleRequest
      type: object
      required: []
    CreateUserRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Path:
              description: |-
                The path for the user name. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
                 This parameter is optional. If it is not included, it defaults to a slash (/).
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
              type: string
            ManagedPolicyArns:
              description: |-
                A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the user.
                 For more information about ARNs, see [Amazon Resource Names (ARNs) and Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            Policies:
              description: |-
                Adds or updates an inline policy document that is embedded in the specified IAM user. To view AWS::IAM::User snippets, see [Declaring an User Resource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html#scenario-iam-user).
                  The name of each policy for a role, user, or group must be unique. If you don't choose unique names, updates to the IAM identity will fail. 
                  For information about limits on the number of inline policies that you can embed in a user, see [Limitations on Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Policy'
            UserName:
              description: |-
                The name of the user to create. Do not include the path in this value.
                 This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. The user name must be unique within the account. User names are not distinguished by case. For example, you cannot create users named both "John" and "john".
                 If you don't specify a name, CFN generates a unique physical ID and uses that ID for the user name.
                 If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).
                  Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple Regions. To prevent this, we recommend using ``Fn::Join`` and ``AWS::Region`` to create a Region-specific name, as in the following example: ``{"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "MyResourceName"}]]}``.
              type: string
            Groups:
              description: A list of group names to which you want to add the user.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                type: string
            Arn:
              description: ''
              type: string
            LoginProfile:
              description: |-
                Creates a password for the specified IAM user. A password allows an IAM user to access AWS services through the console.
                 You can use the CLI, the AWS API, or the *Users* page in the IAM console to create a password for any IAM user. Use [ChangePassword](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ChangePassword.html) to update your own existing password in the *My Security Credentials* page in the console.
                 For more information about managing passwords, see [Managing passwords](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html) in the *User Guide*.
              $ref: '#/components/schemas/LoginProfile'
            Tags:
              description: |-
                A list of tags that you want to attach to the new user. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide*.
                  If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            PermissionsBoundary:
              description: |-
                The ARN of the managed policy that is used to set the permissions boundary for the user.
                 A permissions boundary policy defines the maximum permissions that identity-based policies can grant to an entity, but does not grant permissions. Permissions boundaries do not define the maximum permissions that a resource-based policy can grant to an entity. To learn more, see [Permissions boundaries for IAM entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User Guide*.
                 For more information about policy types, see [Policy types](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policy-types) in the *IAM User Guide*.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateUserRequest
      type: object
      required: []
    CreateUserPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PolicyDocument:
              description: |-
                The policy document.
                 You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
                 The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
                  +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
                  +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
                  +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
              type: object
            PolicyName:
              description: |-
                The name of the policy document.
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
              type: string
            UserName:
              description: |-
                The name of the user to associate the policy with.
                 This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateUserPolicyRequest
      type: object
      required: []
    CreateVirtualMFADeviceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            VirtualMfaDeviceName:
              minLength: 1
              maxLength: 226
              pattern: '[\w+=,.@-]+'
              type: string
            Path:
              minLength: 1
              maxLength: 512
              pattern: (\u002F)|(\u002F[\u0021-\u007F]+\u002F)
              type: string
            SerialNumber:
              minLength: 9
              maxLength: 256
              pattern: '[\w+=/:,.@-]+'
              type: string
            Users:
              type: array
              uniqueItems: false
              items:
                type: string
            Tags:
              type: array
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateVirtualMFADeviceRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    user_policies:
      id: aws.iam.user_policies
      x-cfn-schema-name: UserPolicy
      x-example-where-clause: WHERE region = 'us-east-1' /* always 'us-east-1' for iam */ AND UserName = '<UserName>' AND PolicyName = '<PolicyName>'
      x-type: cloud_control
      methods:
        attach:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=AttachUserPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        delete:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=DeleteUserPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        detach:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=DetachUserPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        get:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=GetUserPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            objectKey: /*/GetUserPolicyResult
            openAPIDocKey: '200'
        list:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=ListUserPolicies&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            objectKey: /*/ListUserPoliciesResult/PolicyNames/member
            openAPIDocKey: '200'
        put:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=PutUserPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__UserPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::UserPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::UserPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::UserPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      name: user_policies
      sqlVerbs:
        delete:
          - $ref: '#/components/x-stackQL-resources/user_policies/methods/delete_resource'
        insert:
          - $ref: '#/components/x-stackQL-resources/user_policies/methods/create_resource'
        select:
          - $ref: '#/components/x-stackQL-resources/user_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/user_policies/methods/list'
        update:
          - $ref: '#/components/x-stackQL-resources/user_policies/methods/update_resource'
      title: user_policies
      x-cfn-type-name: AWS::IAM::UserPolicy
      x-identifiers:
        - PolicyName
        - UserName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.UserName') as user_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::UserPolicy'
              AND data__Identifier = '<PolicyName>|<UserName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'UserName') as user_name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::UserPolicy'
                AND data__Identifier = '<PolicyName>|<UserName>'
                AND region = 'us-east-1'
    group_policies:
      id: aws.iam.group_policies
      x-cfn-schema-name: GroupPolicy
      x-example-where-clause: WHERE region = 'us-east-1' /* always 'us-east-1' for iam */ AND GroupName = '<GroupName>' AND PolicyName = '<PolicyName>'
      x-type: cloud_control
      methods:
        attach:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=AttachGroupPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        delete:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=DeleteGroupPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        detach:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=DetachGroupPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        get:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=GetGroupPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            objectKey: /*/GetGroupPolicyResult
            openAPIDocKey: '200'
        list:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=ListGroupPolicies&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            objectKey: /*/ListGroupPoliciesResult/PolicyNames/member
            openAPIDocKey: '200'
        put:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=PutGroupPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__GroupPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::GroupPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::GroupPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::GroupPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      name: group_policies
      sqlVerbs:
        delete:
          - $ref: '#/components/x-stackQL-resources/group_policies/methods/delete_resource'
        insert:
          - $ref: '#/components/x-stackQL-resources/group_policies/methods/create_resource'
        select:
          - $ref: '#/components/x-stackQL-resources/group_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/group_policies/methods/list'
        update:
          - $ref: '#/components/x-stackQL-resources/group_policies/methods/update_resource'
      title: group_policies
      x-cfn-type-name: AWS::IAM::GroupPolicy
      x-identifiers:
        - PolicyName
        - GroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::GroupPolicy'
              AND data__Identifier = '<PolicyName>|<GroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'GroupName') as group_name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::GroupPolicy'
                AND data__Identifier = '<PolicyName>|<GroupName>'
                AND region = 'us-east-1'
    policies:
      id: aws.iam.policies
      x-cfn-schema-name: GetPolicyResponse
      x-example-where-clause: WHERE region = 'us-east-1' /* always 'us-east-1' for iam */ AND PolicyArn = '<PolicyArn>'
      x-type: native
      methods:
        create:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=CreatePolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            openAPIDocKey: '200'
        delete:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=DeletePolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        get:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=GetPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            objectKey: /*/GetPolicyResult
            openAPIDocKey: '200'
        list:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=ListPolicies&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            objectKey: /*/ListPoliciesResult/Policies/member
            openAPIDocKey: '200'
        tag:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=TagPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        untag:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=UntagPolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
      name: policies
      sqlVerbs:
        delete:
          - $ref: '#/components/x-stackQL-resources/policies/methods/delete'
        insert:
          - $ref: '#/components/x-stackQL-resources/policies/methods/create'
        select:
          - $ref: '#/components/x-stackQL-resources/policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/policies/methods/list'
        update: []
      title: policies
    role_policies:
      id: aws.iam.role_policies
      x-cfn-schema-name: RolePolicy
      x-example-where-clause: WHERE region = 'us-east-1' /* always 'us-east-1' for iam */ AND RoleName = '<RoleName>' AND PolicyName = '<PolicyName>'
      x-type: cloud_control
      methods:
        attach:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=AttachRolePolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        delete:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=DeleteRolePolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        detach:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=DetachRolePolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        get:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=GetRolePolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            objectKey: /*/GetRolePolicyResult
            openAPIDocKey: '200'
        list:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=ListRolePolicies&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            objectKey: /*/ListRolePoliciesResult/PolicyNames/member
            openAPIDocKey: '200'
        put:
          serviceName: iam
          operation:
            $ref: '#/paths/~1?Action=PutRolePolicy&Version=2010-05-08&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RolePolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::RolePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::RolePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::RolePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      name: role_policies
      sqlVerbs:
        delete:
          - $ref: '#/components/x-stackQL-resources/role_policies/methods/delete_resource'
        insert:
          - $ref: '#/components/x-stackQL-resources/role_policies/methods/create_resource'
        select:
          - $ref: '#/components/x-stackQL-resources/role_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/role_policies/methods/list'
        update:
          - $ref: '#/components/x-stackQL-resources/role_policies/methods/update_resource'
      title: role_policies
      x-cfn-type-name: AWS::IAM::RolePolicy
      x-identifiers:
        - PolicyName
        - RoleName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::RolePolicy'
              AND data__Identifier = '<PolicyName>|<RoleName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'RoleName') as role_name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::RolePolicy'
                AND data__Identifier = '<PolicyName>|<RoleName>'
                AND region = 'us-east-1'
    groups:
      name: groups
      id: aws.iam.groups
      x-cfn-schema-name: Group
      x-cfn-type-name: AWS::IAM::Group
      x-identifiers:
        - GroupName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Group&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::Group"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::Group"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::Group"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(Properties, '$.ManagedPolicyArns') as managed_policy_arns,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.Policies') as policies
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::Group'
              AND data__Identifier = '<GroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.GroupName') as group_name,
                JSON_EXTRACT(detail.Properties, '$.ManagedPolicyArns') as managed_policy_arns,
                JSON_EXTRACT(detail.Properties, '$.Path') as path,
                JSON_EXTRACT(detail.Properties, '$.Policies') as policies
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IAM::Group'
                AND detail.data__TypeName = 'AWS::IAM::Group'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'GroupName') as group_name,
                  json_extract_path_text(Properties, 'ManagedPolicyArns') as managed_policy_arns,
                  json_extract_path_text(Properties, 'Path') as path,
                  json_extract_path_text(Properties, 'Policies') as policies
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::Group'
                  AND data__Identifier = '<GroupName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'GroupName') as group_name,
                    json_extract_path_text(detail.Properties, 'ManagedPolicyArns') as managed_policy_arns,
                    json_extract_path_text(detail.Properties, 'Path') as path,
                    json_extract_path_text(detail.Properties, 'Policies') as policies
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IAM::Group'
                    AND detail.data__TypeName = 'AWS::IAM::Group'
                    AND listing.region = 'us-east-1'
    groups_list_only:
      name: groups_list_only
      id: aws.iam.groups_list_only
      x-cfn-schema-name: Group
      x-cfn-type-name: AWS::IAM::Group
      x-identifiers:
        - GroupName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::Group'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GroupName') as group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::Group'
                AND region = 'us-east-1'
    instance_profiles:
      name: instance_profiles
      id: aws.iam.instance_profiles
      x-cfn-schema-name: InstanceProfile
      x-cfn-type-name: AWS::IAM::InstanceProfile
      x-identifiers:
        - InstanceProfileName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__InstanceProfile&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::InstanceProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::InstanceProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::InstanceProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/instance_profiles/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/instance_profiles/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/instance_profiles/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.Roles') as roles,
              JSON_EXTRACT(Properties, '$.InstanceProfileName') as instance_profile_name,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::InstanceProfile'
              AND data__Identifier = '<InstanceProfileName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Path') as path,
                JSON_EXTRACT(detail.Properties, '$.Roles') as roles,
                JSON_EXTRACT(detail.Properties, '$.InstanceProfileName') as instance_profile_name,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IAM::InstanceProfile'
                AND detail.data__TypeName = 'AWS::IAM::InstanceProfile'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Path') as path,
                  json_extract_path_text(Properties, 'Roles') as roles,
                  json_extract_path_text(Properties, 'InstanceProfileName') as instance_profile_name,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::InstanceProfile'
                  AND data__Identifier = '<InstanceProfileName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Path') as path,
                    json_extract_path_text(detail.Properties, 'Roles') as roles,
                    json_extract_path_text(detail.Properties, 'InstanceProfileName') as instance_profile_name,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IAM::InstanceProfile'
                    AND detail.data__TypeName = 'AWS::IAM::InstanceProfile'
                    AND listing.region = 'us-east-1'
    instance_profiles_list_only:
      name: instance_profiles_list_only
      id: aws.iam.instance_profiles_list_only
      x-cfn-schema-name: InstanceProfile
      x-cfn-type-name: AWS::IAM::InstanceProfile
      x-identifiers:
        - InstanceProfileName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.InstanceProfileName') as instance_profile_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::InstanceProfile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'InstanceProfileName') as instance_profile_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::InstanceProfile'
                AND region = 'us-east-1'
    managed_policies:
      name: managed_policies
      id: aws.iam.managed_policies
      x-cfn-schema-name: ManagedPolicy
      x-cfn-type-name: AWS::IAM::ManagedPolicy
      x-identifiers:
        - PolicyArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ManagedPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::ManagedPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::ManagedPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::ManagedPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/managed_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Groups') as groups,
              JSON_EXTRACT(Properties, '$.ManagedPolicyName') as managed_policy_name,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.Roles') as roles,
              JSON_EXTRACT(Properties, '$.Users') as users,
              JSON_EXTRACT(Properties, '$.PolicyArn') as policy_arn,
              JSON_EXTRACT(Properties, '$.AttachmentCount') as attachment_count,
              JSON_EXTRACT(Properties, '$.CreateDate') as create_date,
              JSON_EXTRACT(Properties, '$.UpdateDate') as update_date,
              JSON_EXTRACT(Properties, '$.DefaultVersionId') as default_version_id,
              JSON_EXTRACT(Properties, '$.IsAttachable') as is_attachable,
              JSON_EXTRACT(Properties, '$.PermissionsBoundaryUsageCount') as permissions_boundary_usage_count,
              JSON_EXTRACT(Properties, '$.PolicyId') as policy_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ManagedPolicy'
              AND data__Identifier = '<PolicyArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Groups') as groups,
                JSON_EXTRACT(detail.Properties, '$.ManagedPolicyName') as managed_policy_name,
                JSON_EXTRACT(detail.Properties, '$.Path') as path,
                JSON_EXTRACT(detail.Properties, '$.PolicyDocument') as policy_document,
                JSON_EXTRACT(detail.Properties, '$.Roles') as roles,
                JSON_EXTRACT(detail.Properties, '$.Users') as users,
                JSON_EXTRACT(detail.Properties, '$.PolicyArn') as policy_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentCount') as attachment_count,
                JSON_EXTRACT(detail.Properties, '$.CreateDate') as create_date,
                JSON_EXTRACT(detail.Properties, '$.UpdateDate') as update_date,
                JSON_EXTRACT(detail.Properties, '$.DefaultVersionId') as default_version_id,
                JSON_EXTRACT(detail.Properties, '$.IsAttachable') as is_attachable,
                JSON_EXTRACT(detail.Properties, '$.PermissionsBoundaryUsageCount') as permissions_boundary_usage_count,
                JSON_EXTRACT(detail.Properties, '$.PolicyId') as policy_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IAM::ManagedPolicy'
                AND detail.data__TypeName = 'AWS::IAM::ManagedPolicy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Groups') as groups,
                  json_extract_path_text(Properties, 'ManagedPolicyName') as managed_policy_name,
                  json_extract_path_text(Properties, 'Path') as path,
                  json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                  json_extract_path_text(Properties, 'Roles') as roles,
                  json_extract_path_text(Properties, 'Users') as users,
                  json_extract_path_text(Properties, 'PolicyArn') as policy_arn,
                  json_extract_path_text(Properties, 'AttachmentCount') as attachment_count,
                  json_extract_path_text(Properties, 'CreateDate') as create_date,
                  json_extract_path_text(Properties, 'UpdateDate') as update_date,
                  json_extract_path_text(Properties, 'DefaultVersionId') as default_version_id,
                  json_extract_path_text(Properties, 'IsAttachable') as is_attachable,
                  json_extract_path_text(Properties, 'PermissionsBoundaryUsageCount') as permissions_boundary_usage_count,
                  json_extract_path_text(Properties, 'PolicyId') as policy_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ManagedPolicy'
                  AND data__Identifier = '<PolicyArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Groups') as groups,
                    json_extract_path_text(detail.Properties, 'ManagedPolicyName') as managed_policy_name,
                    json_extract_path_text(detail.Properties, 'Path') as path,
                    json_extract_path_text(detail.Properties, 'PolicyDocument') as policy_document,
                    json_extract_path_text(detail.Properties, 'Roles') as roles,
                    json_extract_path_text(detail.Properties, 'Users') as users,
                    json_extract_path_text(detail.Properties, 'PolicyArn') as policy_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentCount') as attachment_count,
                    json_extract_path_text(detail.Properties, 'CreateDate') as create_date,
                    json_extract_path_text(detail.Properties, 'UpdateDate') as update_date,
                    json_extract_path_text(detail.Properties, 'DefaultVersionId') as default_version_id,
                    json_extract_path_text(detail.Properties, 'IsAttachable') as is_attachable,
                    json_extract_path_text(detail.Properties, 'PermissionsBoundaryUsageCount') as permissions_boundary_usage_count,
                    json_extract_path_text(detail.Properties, 'PolicyId') as policy_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IAM::ManagedPolicy'
                    AND detail.data__TypeName = 'AWS::IAM::ManagedPolicy'
                    AND listing.region = 'us-east-1'
    managed_policies_list_only:
      name: managed_policies_list_only
      id: aws.iam.managed_policies_list_only
      x-cfn-schema-name: ManagedPolicy
      x-cfn-type-name: AWS::IAM::ManagedPolicy
      x-identifiers:
        - PolicyArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyArn') as policy_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::ManagedPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyArn') as policy_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::ManagedPolicy'
                AND region = 'us-east-1'
    oidc_providers:
      name: oidc_providers
      id: aws.iam.oidc_providers
      x-cfn-schema-name: OIDCProvider
      x-cfn-type-name: AWS::IAM::OIDCProvider
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__OIDCProvider&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::OIDCProvider"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::OIDCProvider"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::OIDCProvider"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/oidc_providers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/oidc_providers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/oidc_providers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ClientIdList') as client_id_list,
              JSON_EXTRACT(Properties, '$.Url') as url,
              JSON_EXTRACT(Properties, '$.ThumbprintList') as thumbprint_list,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::OIDCProvider'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ClientIdList') as client_id_list,
                JSON_EXTRACT(detail.Properties, '$.Url') as url,
                JSON_EXTRACT(detail.Properties, '$.ThumbprintList') as thumbprint_list,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IAM::OIDCProvider'
                AND detail.data__TypeName = 'AWS::IAM::OIDCProvider'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ClientIdList') as client_id_list,
                  json_extract_path_text(Properties, 'Url') as url,
                  json_extract_path_text(Properties, 'ThumbprintList') as thumbprint_list,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::OIDCProvider'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ClientIdList') as client_id_list,
                    json_extract_path_text(detail.Properties, 'Url') as url,
                    json_extract_path_text(detail.Properties, 'ThumbprintList') as thumbprint_list,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IAM::OIDCProvider'
                    AND detail.data__TypeName = 'AWS::IAM::OIDCProvider'
                    AND listing.region = 'us-east-1'
    oidc_providers_list_only:
      name: oidc_providers_list_only
      id: aws.iam.oidc_providers_list_only
      x-cfn-schema-name: OIDCProvider
      x-cfn-type-name: AWS::IAM::OIDCProvider
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::OIDCProvider'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::OIDCProvider'
                AND region = 'us-east-1'
    oidc_provider_tags:
      name: oidc_provider_tags
      id: aws.iam.oidc_provider_tags
      x-cfn-schema-name: OIDCProvider
      x-cfn-type-name: AWS::IAM::OIDCProvider
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ClientIdList') as client_id_list,
              JSON_EXTRACT(detail.Properties, '$.Url') as url,
              JSON_EXTRACT(detail.Properties, '$.ThumbprintList') as thumbprint_list,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IAM::OIDCProvider'
              AND detail.data__TypeName = 'AWS::IAM::OIDCProvider'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ClientIdList') as client_id_list,
                json_extract_path_text(detail.Properties, 'Url') as url,
                json_extract_path_text(detail.Properties, 'ThumbprintList') as thumbprint_list,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IAM::OIDCProvider'
                AND detail.data__TypeName = 'AWS::IAM::OIDCProvider'
                AND listing.region = 'us-east-1'
    roles:
      name: roles
      id: aws.iam.roles
      x-cfn-schema-name: Role
      x-cfn-type-name: AWS::IAM::Role
      x-identifiers:
        - RoleName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Role&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::Role"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::Role"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::Role"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/roles/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/roles/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/roles/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AssumeRolePolicyDocument') as assume_role_policy_document,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ManagedPolicyArns') as managed_policy_arns,
              JSON_EXTRACT(Properties, '$.MaxSessionDuration') as max_session_duration,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.PermissionsBoundary') as permissions_boundary,
              JSON_EXTRACT(Properties, '$.Policies') as policies,
              JSON_EXTRACT(Properties, '$.RoleId') as role_id,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::Role'
              AND data__Identifier = '<RoleName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.AssumeRolePolicyDocument') as assume_role_policy_document,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ManagedPolicyArns') as managed_policy_arns,
                JSON_EXTRACT(detail.Properties, '$.MaxSessionDuration') as max_session_duration,
                JSON_EXTRACT(detail.Properties, '$.Path') as path,
                JSON_EXTRACT(detail.Properties, '$.PermissionsBoundary') as permissions_boundary,
                JSON_EXTRACT(detail.Properties, '$.Policies') as policies,
                JSON_EXTRACT(detail.Properties, '$.RoleId') as role_id,
                JSON_EXTRACT(detail.Properties, '$.RoleName') as role_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IAM::Role'
                AND detail.data__TypeName = 'AWS::IAM::Role'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'AssumeRolePolicyDocument') as assume_role_policy_document,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ManagedPolicyArns') as managed_policy_arns,
                  json_extract_path_text(Properties, 'MaxSessionDuration') as max_session_duration,
                  json_extract_path_text(Properties, 'Path') as path,
                  json_extract_path_text(Properties, 'PermissionsBoundary') as permissions_boundary,
                  json_extract_path_text(Properties, 'Policies') as policies,
                  json_extract_path_text(Properties, 'RoleId') as role_id,
                  json_extract_path_text(Properties, 'RoleName') as role_name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::Role'
                  AND data__Identifier = '<RoleName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'AssumeRolePolicyDocument') as assume_role_policy_document,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ManagedPolicyArns') as managed_policy_arns,
                    json_extract_path_text(detail.Properties, 'MaxSessionDuration') as max_session_duration,
                    json_extract_path_text(detail.Properties, 'Path') as path,
                    json_extract_path_text(detail.Properties, 'PermissionsBoundary') as permissions_boundary,
                    json_extract_path_text(detail.Properties, 'Policies') as policies,
                    json_extract_path_text(detail.Properties, 'RoleId') as role_id,
                    json_extract_path_text(detail.Properties, 'RoleName') as role_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IAM::Role'
                    AND detail.data__TypeName = 'AWS::IAM::Role'
                    AND listing.region = 'us-east-1'
    roles_list_only:
      name: roles_list_only
      id: aws.iam.roles_list_only
      x-cfn-schema-name: Role
      x-cfn-type-name: AWS::IAM::Role
      x-identifiers:
        - RoleName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::Role'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RoleName') as role_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::Role'
                AND region = 'us-east-1'
    role_tags:
      name: role_tags
      id: aws.iam.role_tags
      x-cfn-schema-name: Role
      x-cfn-type-name: AWS::IAM::Role
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.AssumeRolePolicyDocument') as assume_role_policy_document,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.ManagedPolicyArns') as managed_policy_arns,
              JSON_EXTRACT(detail.Properties, '$.MaxSessionDuration') as max_session_duration,
              JSON_EXTRACT(detail.Properties, '$.Path') as path,
              JSON_EXTRACT(detail.Properties, '$.PermissionsBoundary') as permissions_boundary,
              JSON_EXTRACT(detail.Properties, '$.Policies') as policies,
              JSON_EXTRACT(detail.Properties, '$.RoleId') as role_id,
              JSON_EXTRACT(detail.Properties, '$.RoleName') as role_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IAM::Role'
              AND detail.data__TypeName = 'AWS::IAM::Role'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'AssumeRolePolicyDocument') as assume_role_policy_document,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'ManagedPolicyArns') as managed_policy_arns,
                json_extract_path_text(detail.Properties, 'MaxSessionDuration') as max_session_duration,
                json_extract_path_text(detail.Properties, 'Path') as path,
                json_extract_path_text(detail.Properties, 'PermissionsBoundary') as permissions_boundary,
                json_extract_path_text(detail.Properties, 'Policies') as policies,
                json_extract_path_text(detail.Properties, 'RoleId') as role_id,
                json_extract_path_text(detail.Properties, 'RoleName') as role_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IAM::Role'
                AND detail.data__TypeName = 'AWS::IAM::Role'
                AND listing.region = 'us-east-1'
    saml_providers:
      name: saml_providers
      id: aws.iam.saml_providers
      x-cfn-schema-name: SAMLProvider
      x-cfn-type-name: AWS::IAM::SAMLProvider
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SAMLProvider&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::SAMLProvider"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::SAMLProvider"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::SAMLProvider"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/saml_providers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/saml_providers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/saml_providers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SamlMetadataDocument') as saml_metadata_document,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::SAMLProvider'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.SamlMetadataDocument') as saml_metadata_document,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IAM::SAMLProvider'
                AND detail.data__TypeName = 'AWS::IAM::SAMLProvider'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'SamlMetadataDocument') as saml_metadata_document,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::SAMLProvider'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'SamlMetadataDocument') as saml_metadata_document,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IAM::SAMLProvider'
                    AND detail.data__TypeName = 'AWS::IAM::SAMLProvider'
                    AND listing.region = 'us-east-1'
    saml_providers_list_only:
      name: saml_providers_list_only
      id: aws.iam.saml_providers_list_only
      x-cfn-schema-name: SAMLProvider
      x-cfn-type-name: AWS::IAM::SAMLProvider
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::SAMLProvider'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::SAMLProvider'
                AND region = 'us-east-1'
    saml_provider_tags:
      name: saml_provider_tags
      id: aws.iam.saml_provider_tags
      x-cfn-schema-name: SAMLProvider
      x-cfn-type-name: AWS::IAM::SAMLProvider
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.SamlMetadataDocument') as saml_metadata_document,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IAM::SAMLProvider'
              AND detail.data__TypeName = 'AWS::IAM::SAMLProvider'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'SamlMetadataDocument') as saml_metadata_document,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IAM::SAMLProvider'
                AND detail.data__TypeName = 'AWS::IAM::SAMLProvider'
                AND listing.region = 'us-east-1'
    server_certificates:
      name: server_certificates
      id: aws.iam.server_certificates
      x-cfn-schema-name: ServerCertificate
      x-cfn-type-name: AWS::IAM::ServerCertificate
      x-identifiers:
        - ServerCertificateName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ServerCertificate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::ServerCertificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::ServerCertificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::ServerCertificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/server_certificates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/server_certificates/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/server_certificates/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CertificateBody') as certificate_body,
              JSON_EXTRACT(Properties, '$.CertificateChain') as certificate_chain,
              JSON_EXTRACT(Properties, '$.ServerCertificateName') as server_certificate_name,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.PrivateKey') as private_key,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ServerCertificate'
              AND data__Identifier = '<ServerCertificateName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CertificateBody') as certificate_body,
                JSON_EXTRACT(detail.Properties, '$.CertificateChain') as certificate_chain,
                JSON_EXTRACT(detail.Properties, '$.ServerCertificateName') as server_certificate_name,
                JSON_EXTRACT(detail.Properties, '$.Path') as path,
                JSON_EXTRACT(detail.Properties, '$.PrivateKey') as private_key,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IAM::ServerCertificate'
                AND detail.data__TypeName = 'AWS::IAM::ServerCertificate'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CertificateBody') as certificate_body,
                  json_extract_path_text(Properties, 'CertificateChain') as certificate_chain,
                  json_extract_path_text(Properties, 'ServerCertificateName') as server_certificate_name,
                  json_extract_path_text(Properties, 'Path') as path,
                  json_extract_path_text(Properties, 'PrivateKey') as private_key,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ServerCertificate'
                  AND data__Identifier = '<ServerCertificateName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CertificateBody') as certificate_body,
                    json_extract_path_text(detail.Properties, 'CertificateChain') as certificate_chain,
                    json_extract_path_text(detail.Properties, 'ServerCertificateName') as server_certificate_name,
                    json_extract_path_text(detail.Properties, 'Path') as path,
                    json_extract_path_text(detail.Properties, 'PrivateKey') as private_key,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IAM::ServerCertificate'
                    AND detail.data__TypeName = 'AWS::IAM::ServerCertificate'
                    AND listing.region = 'us-east-1'
    server_certificates_list_only:
      name: server_certificates_list_only
      id: aws.iam.server_certificates_list_only
      x-cfn-schema-name: ServerCertificate
      x-cfn-type-name: AWS::IAM::ServerCertificate
      x-identifiers:
        - ServerCertificateName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServerCertificateName') as server_certificate_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::ServerCertificate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ServerCertificateName') as server_certificate_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::ServerCertificate'
                AND region = 'us-east-1'
    server_certificate_tags:
      name: server_certificate_tags
      id: aws.iam.server_certificate_tags
      x-cfn-schema-name: ServerCertificate
      x-cfn-type-name: AWS::IAM::ServerCertificate
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CertificateBody') as certificate_body,
              JSON_EXTRACT(detail.Properties, '$.CertificateChain') as certificate_chain,
              JSON_EXTRACT(detail.Properties, '$.ServerCertificateName') as server_certificate_name,
              JSON_EXTRACT(detail.Properties, '$.Path') as path,
              JSON_EXTRACT(detail.Properties, '$.PrivateKey') as private_key,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IAM::ServerCertificate'
              AND detail.data__TypeName = 'AWS::IAM::ServerCertificate'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CertificateBody') as certificate_body,
                json_extract_path_text(detail.Properties, 'CertificateChain') as certificate_chain,
                json_extract_path_text(detail.Properties, 'ServerCertificateName') as server_certificate_name,
                json_extract_path_text(detail.Properties, 'Path') as path,
                json_extract_path_text(detail.Properties, 'PrivateKey') as private_key,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IAM::ServerCertificate'
                AND detail.data__TypeName = 'AWS::IAM::ServerCertificate'
                AND listing.region = 'us-east-1'
    service_linked_roles:
      name: service_linked_roles
      id: aws.iam.service_linked_roles
      x-cfn-schema-name: ServiceLinkedRole
      x-cfn-type-name: AWS::IAM::ServiceLinkedRole
      x-identifiers:
        - RoleName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ServiceLinkedRole&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::ServiceLinkedRole"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::ServiceLinkedRole"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::ServiceLinkedRole"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/service_linked_roles/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/service_linked_roles/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/service_linked_roles/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name,
              JSON_EXTRACT(Properties, '$.CustomSuffix') as custom_suffix,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AWSServiceName') as aws_service_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ServiceLinkedRole'
              AND data__Identifier = '<RoleName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'RoleName') as role_name,
                json_extract_path_text(Properties, 'CustomSuffix') as custom_suffix,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'AWSServiceName') as aws_service_name
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ServiceLinkedRole'
                AND data__Identifier = '<RoleName>'
                AND region = 'us-east-1'
    users:
      name: users
      id: aws.iam.users
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::IAM::User
      x-identifiers:
        - UserName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__User&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/users/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/users/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/users/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.ManagedPolicyArns') as managed_policy_arns,
              JSON_EXTRACT(Properties, '$.Policies') as policies,
              JSON_EXTRACT(Properties, '$.UserName') as user_name,
              JSON_EXTRACT(Properties, '$.Groups') as groups,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.LoginProfile') as login_profile,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.PermissionsBoundary') as permissions_boundary
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::User'
              AND data__Identifier = '<UserName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Path') as path,
                JSON_EXTRACT(detail.Properties, '$.ManagedPolicyArns') as managed_policy_arns,
                JSON_EXTRACT(detail.Properties, '$.Policies') as policies,
                JSON_EXTRACT(detail.Properties, '$.UserName') as user_name,
                JSON_EXTRACT(detail.Properties, '$.Groups') as groups,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.LoginProfile') as login_profile,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.PermissionsBoundary') as permissions_boundary
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IAM::User'
                AND detail.data__TypeName = 'AWS::IAM::User'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Path') as path,
                  json_extract_path_text(Properties, 'ManagedPolicyArns') as managed_policy_arns,
                  json_extract_path_text(Properties, 'Policies') as policies,
                  json_extract_path_text(Properties, 'UserName') as user_name,
                  json_extract_path_text(Properties, 'Groups') as groups,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'LoginProfile') as login_profile,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'PermissionsBoundary') as permissions_boundary
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::User'
                  AND data__Identifier = '<UserName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Path') as path,
                    json_extract_path_text(detail.Properties, 'ManagedPolicyArns') as managed_policy_arns,
                    json_extract_path_text(detail.Properties, 'Policies') as policies,
                    json_extract_path_text(detail.Properties, 'UserName') as user_name,
                    json_extract_path_text(detail.Properties, 'Groups') as groups,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'LoginProfile') as login_profile,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'PermissionsBoundary') as permissions_boundary
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IAM::User'
                    AND detail.data__TypeName = 'AWS::IAM::User'
                    AND listing.region = 'us-east-1'
    users_list_only:
      name: users_list_only
      id: aws.iam.users_list_only
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::IAM::User
      x-identifiers:
        - UserName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserName') as user_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::User'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserName') as user_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::User'
                AND region = 'us-east-1'
    user_tags:
      name: user_tags
      id: aws.iam.user_tags
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::IAM::User
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Path') as path,
              JSON_EXTRACT(detail.Properties, '$.ManagedPolicyArns') as managed_policy_arns,
              JSON_EXTRACT(detail.Properties, '$.Policies') as policies,
              JSON_EXTRACT(detail.Properties, '$.UserName') as user_name,
              JSON_EXTRACT(detail.Properties, '$.Groups') as groups,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.LoginProfile') as login_profile,
              JSON_EXTRACT(detail.Properties, '$.PermissionsBoundary') as permissions_boundary
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IAM::User'
              AND detail.data__TypeName = 'AWS::IAM::User'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Path') as path,
                json_extract_path_text(detail.Properties, 'ManagedPolicyArns') as managed_policy_arns,
                json_extract_path_text(detail.Properties, 'Policies') as policies,
                json_extract_path_text(detail.Properties, 'UserName') as user_name,
                json_extract_path_text(detail.Properties, 'Groups') as groups,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'LoginProfile') as login_profile,
                json_extract_path_text(detail.Properties, 'PermissionsBoundary') as permissions_boundary
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IAM::User'
                AND detail.data__TypeName = 'AWS::IAM::User'
                AND listing.region = 'us-east-1'
    virtualmfa_devices:
      name: virtualmfa_devices
      id: aws.iam.virtualmfa_devices
      x-cfn-schema-name: VirtualMFADevice
      x-cfn-type-name: AWS::IAM::VirtualMFADevice
      x-identifiers:
        - SerialNumber
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VirtualMFADevice&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::VirtualMFADevice"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::VirtualMFADevice"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IAM::VirtualMFADevice"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/virtualmfa_devices/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/virtualmfa_devices/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/virtualmfa_devices/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VirtualMfaDeviceName') as virtual_mfa_device_name,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.SerialNumber') as serial_number,
              JSON_EXTRACT(Properties, '$.Users') as users,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::VirtualMFADevice'
              AND data__Identifier = '<SerialNumber>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.VirtualMfaDeviceName') as virtual_mfa_device_name,
                JSON_EXTRACT(detail.Properties, '$.Path') as path,
                JSON_EXTRACT(detail.Properties, '$.SerialNumber') as serial_number,
                JSON_EXTRACT(detail.Properties, '$.Users') as users,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IAM::VirtualMFADevice'
                AND detail.data__TypeName = 'AWS::IAM::VirtualMFADevice'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'VirtualMfaDeviceName') as virtual_mfa_device_name,
                  json_extract_path_text(Properties, 'Path') as path,
                  json_extract_path_text(Properties, 'SerialNumber') as serial_number,
                  json_extract_path_text(Properties, 'Users') as users,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::VirtualMFADevice'
                  AND data__Identifier = '<SerialNumber>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'VirtualMfaDeviceName') as virtual_mfa_device_name,
                    json_extract_path_text(detail.Properties, 'Path') as path,
                    json_extract_path_text(detail.Properties, 'SerialNumber') as serial_number,
                    json_extract_path_text(detail.Properties, 'Users') as users,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IAM::VirtualMFADevice'
                    AND detail.data__TypeName = 'AWS::IAM::VirtualMFADevice'
                    AND listing.region = 'us-east-1'
    virtualmfa_devices_list_only:
      name: virtualmfa_devices_list_only
      id: aws.iam.virtualmfa_devices_list_only
      x-cfn-schema-name: VirtualMFADevice
      x-cfn-type-name: AWS::IAM::VirtualMFADevice
      x-identifiers:
        - SerialNumber
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SerialNumber') as serial_number
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::VirtualMFADevice'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SerialNumber') as serial_number
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::VirtualMFADevice'
                AND region = 'us-east-1'
    virtualmfa_device_tags:
      name: virtualmfa_device_tags
      id: aws.iam.virtualmfa_device_tags
      x-cfn-schema-name: VirtualMFADevice
      x-cfn-type-name: AWS::IAM::VirtualMFADevice
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.VirtualMfaDeviceName') as virtual_mfa_device_name,
              JSON_EXTRACT(detail.Properties, '$.Path') as path,
              JSON_EXTRACT(detail.Properties, '$.SerialNumber') as serial_number,
              JSON_EXTRACT(detail.Properties, '$.Users') as users
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IAM::VirtualMFADevice'
              AND detail.data__TypeName = 'AWS::IAM::VirtualMFADevice'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'VirtualMfaDeviceName') as virtual_mfa_device_name,
                json_extract_path_text(detail.Properties, 'Path') as path,
                json_extract_path_text(detail.Properties, 'SerialNumber') as serial_number,
                json_extract_path_text(detail.Properties, 'Users') as users
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IAM::VirtualMFADevice'
                AND detail.data__TypeName = 'AWS::IAM::VirtualMFADevice'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Group&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__GroupPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateGroupPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateGroupPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__InstanceProfile&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateInstanceProfile
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateInstanceProfileRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ManagedPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateManagedPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateManagedPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__OIDCProvider&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateOIDCProvider
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateOIDCProviderRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Role&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRole
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RolePolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRolePolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRolePolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SAMLProvider&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSAMLProvider
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSAMLProviderRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ServerCertificate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateServerCertificate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateServerCertificateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ServiceLinkedRole&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateServiceLinkedRole
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateServiceLinkedRoleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__User&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateUser
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__UserPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateUserPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateUserPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VirtualMFADevice&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVirtualMFADevice
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVirtualMFADeviceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=AttachGroupPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this operation to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about policies, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: GET_AttachGroupPolicy
      parameters:
        - description: '<p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: GroupName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
          in: query
          name: PolicyArn
          required: true
          schema:
            description: <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
            maxLength: 2048
            minLength: 20
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/PolicyNotAttachableException'
          description: PolicyNotAttachableException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: AttachGroupPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this operation to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about policies, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: POST_AttachGroupPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/AttachGroupPolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/PolicyNotAttachableException'
          description: PolicyNotAttachableException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: AttachGroupPolicy
  /?Action=AttachRolePolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this operation to attach a <i>managed</i> policy
        to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the
        <i>IAM User Guide</i>.</p>
      operationId: GET_AttachRolePolicy
      parameters:
        - description: '<p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: RoleName
          required: true
          schema:
            maxLength: 64
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
          in: query
          name: PolicyArn
          required: true
          schema:
            description: <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
            maxLength: 2048
            minLength: 20
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
          description: UnmodifiableEntityException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/PolicyNotAttachableException'
          description: PolicyNotAttachableException
        '485':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: AttachRolePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this operation to attach a <i>managed</i> policy
        to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the
        <i>IAM User Guide</i>.</p>
      operationId: POST_AttachRolePolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/AttachRolePolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
          description: UnmodifiableEntityException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/PolicyNotAttachableException'
          description: PolicyNotAttachableException
        '485':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: AttachRolePolicy
  /?Action=AttachUserPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Attaches the specified managed policy to the specified user.</p> <p>You use this operation to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about policies, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: GET_AttachUserPolicy
      parameters:
        - description: '<p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: UserName
          required: true
          schema:
            maxLength: 64
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
          in: query
          name: PolicyArn
          required: true
          schema:
            description: <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
            maxLength: 2048
            minLength: 20
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/PolicyNotAttachableException'
          description: PolicyNotAttachableException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: AttachUserPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Attaches the specified managed policy to the specified user.</p> <p>You use this operation to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about policies, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: POST_AttachUserPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/AttachUserPolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/PolicyNotAttachableException'
          description: PolicyNotAttachableException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: AttachUserPolicy
  /?Action=CreatePolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Creates a new managed policy for your Amazon Web Services account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed policies</a> in the <i>IAM User Guide</i>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see
        <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: GET_CreatePolicy
      parameters:
        - description: <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
          in: query
          name: PolicyName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: >-
            <p>The path for the policy.</p> <p>For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that
            must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p>You cannot use an asterisk (*) in the path name.</p> </note>
          in: query
          name: Path
          required: false
          schema:
            maxLength: 512
            minLength: 1
            pattern: ((/[A-Za-z0-9\.,\+@=_-]+)*)/
            type: string
        - description: >-
            <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum
            character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p> <p>To learn more about JSON policy grammar, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html">Grammar of the IAM JSON policy language</a> in the <i>IAM User Guide</i>. </p> <p>The <a
            href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>),
            line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
          in: query
          name: PolicyDocument
          required: true
          schema:
            maxLength: 131072
            minLength: 1
            pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
            type: string
        - description: <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
          in: query
          name: Description
          required: false
          schema:
            maxLength: 1000
            type: string
        - description: <p>A list of tags that you want to attach to the new IAM customer managed policy. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.</p> </note>
          in: query
          name: Tags
          required: false
          schema:
            items:
              allOf:
                - $ref: '#/components/schemas/Tag'
                - xml:
                    name: member
            maxItems: 50
            type: array
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  CreatePolicyResult:
                    $ref: '#/components/schemas/CreatePolicyResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
          description: EntityAlreadyExistsException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
          description: MalformedPolicyDocumentException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
          description: ConcurrentModificationException
        '485':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: CreatePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Creates a new managed policy for your Amazon Web Services account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed policies</a> in the <i>IAM User Guide</i>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see
        <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: POST_CreatePolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/CreatePolicyRequest'
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  CreatePolicyResult:
                    $ref: '#/components/schemas/CreatePolicyResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
          description: EntityAlreadyExistsException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
          description: MalformedPolicyDocumentException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
          description: ConcurrentModificationException
        '485':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: CreatePolicy
  /?Action=DeleteGroupPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: GET_DeleteGroupPolicy
      parameters:
        - description: '<p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: GroupName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: '<p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: PolicyName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DeleteGroupPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: POST_DeleteGroupPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/DeleteGroupPolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DeleteGroupPolicy
  /?Action=DeletePolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a>.
        To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes
        the policy's default version) using this operation.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: GET_DeletePolicy
      parameters:
        - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to delete.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
          in: query
          name: PolicyArn
          required: true
          schema:
            description: <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
            maxLength: 2048
            minLength: 20
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/DeleteConflictException'
          description: DeleteConflictException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DeletePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a>.
        To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes
        the policy's default version) using this operation.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: POST_DeletePolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/DeletePolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/DeleteConflictException'
          description: DeleteConflictException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DeletePolicy
  /?Action=DeleteRolePolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: GET_DeleteRolePolicy
      parameters:
        - description: '<p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: RoleName
          required: true
          schema:
            maxLength: 64
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: '<p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: PolicyName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
          description: UnmodifiableEntityException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DeleteRolePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: POST_DeleteRolePolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/DeleteRolePolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
          description: UnmodifiableEntityException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DeleteRolePolicy
  /?Action=DeleteUserPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: GET_DeleteUserPolicy
      parameters:
        - description: '<p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: UserName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: '<p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: PolicyName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DeleteUserPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: POST_DeleteUserPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/DeleteUserPolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DeleteUserPolicy
  /?Action=DetachGroupPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use <a>DeleteGroupPolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: GET_DetachGroupPolicy
      parameters:
        - description: '<p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: GroupName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
          in: query
          name: PolicyArn
          required: true
          schema:
            description: <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
            maxLength: 2048
            minLength: 20
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DetachGroupPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use <a>DeleteGroupPolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: POST_DetachGroupPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/DetachGroupPolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DetachGroupPolicy
  /?Action=DetachRolePolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use <a>DeleteRolePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: GET_DetachRolePolicy
      parameters:
        - description: '<p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: RoleName
          required: true
          schema:
            maxLength: 64
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
          in: query
          name: PolicyArn
          required: true
          schema:
            description: <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
            maxLength: 2048
            minLength: 20
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
          description: UnmodifiableEntityException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DetachRolePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use <a>DeleteRolePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: POST_DetachRolePolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/DetachRolePolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
          description: UnmodifiableEntityException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DetachRolePolicy
  /?Action=DetachUserPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use <a>DeleteUserPolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: GET_DetachUserPolicy
      parameters:
        - description: '<p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: UserName
          required: true
          schema:
            maxLength: 64
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: <p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
          in: query
          name: PolicyArn
          required: true
          schema:
            description: <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
            maxLength: 2048
            minLength: 20
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DetachUserPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use <a>DeleteUserPolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: POST_DetachUserPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/DetachUserPolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: DetachUserPolicy
  /?Action=GetGroupPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs
        provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the
        <i>IAM User Guide</i>.</p>
      operationId: GET_GetGroupPolicy
      parameters:
        - description: '<p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: GroupName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: '<p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: PolicyName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  GetGroupPolicyResult:
                    $ref: '#/components/schemas/GetGroupPolicyResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: GetGroupPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs
        provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the
        <i>IAM User Guide</i>.</p>
      operationId: POST_GetGroupPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/GetGroupPolicyRequest'
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  GetGroupPolicyResult:
                    $ref: '#/components/schemas/GetGroupPolicyResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: GetGroupPolicy
  /?Action=GetPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use <a>ListEntitiesForPolicy</a>. This operation returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This operation
        retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: GET_GetPolicy
      parameters:
        - description: <p>The Amazon Resource Name (ARN) of the managed policy that you want information about.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
          in: query
          name: PolicyArn
          required: true
          schema:
            description: <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
            maxLength: 2048
            minLength: 20
            type: string
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  GetPolicyResult:
                    $ref: '#/components/schemas/GetPolicyResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: GetPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use <a>ListEntitiesForPolicy</a>. This operation returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This operation
        retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
      operationId: POST_GetPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/GetPolicyRequest'
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  GetPolicyResult:
                    $ref: '#/components/schemas/GetPolicyResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: GetPolicy
  /?Action=GetRolePolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs
        provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the
        <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using roles to delegate permissions and federate identities</a>.</p>
      operationId: GET_GetRolePolicy
      parameters:
        - description: '<p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: RoleName
          required: true
          schema:
            maxLength: 64
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: '<p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: PolicyName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  GetRolePolicyResult:
                    $ref: '#/components/schemas/GetRolePolicyResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: GetRolePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs
        provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the
        <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using roles to delegate permissions and federate identities</a>.</p>
      operationId: POST_GetRolePolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/GetRolePolicyRequest'
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  GetRolePolicyResult:
                    $ref: '#/components/schemas/GetRolePolicyResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: GetRolePolicy
  /?Action=GetUserPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide
        similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User
        Guide</i>.</p>
      operationId: GET_GetUserPolicy
      parameters:
        - description: '<p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: UserName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: '<p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: PolicyName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  GetUserPolicyResult:
                    $ref: '#/components/schemas/GetUserPolicyResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: GetUserPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide
        similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User
        Guide</i>.</p>
      operationId: POST_GetUserPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/GetUserPolicyRequest'
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  GetUserPolicyResult:
                    $ref: '#/components/schemas/GetUserPolicyResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: GetUserPolicy
  /?Action=ListGroupPolicies&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results
        using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
      operationId: GET_ListGroupPolicies
      parameters:
        - description: '<p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: GroupName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
          in: query
          name: Marker
          required: false
          schema:
            maxLength: 320
            minLength: 1
            pattern: '[\u0020-\u00FF]+'
            type: string
        - description: >-
            <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>,
            and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
          in: query
          name: MaxItems
          required: false
          schema:
            maximum: 1000
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  ListGroupPoliciesResult:
                    $ref: '#/components/schemas/ListGroupPoliciesResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: ListGroupPolicies
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results
        using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
      operationId: POST_ListGroupPolicies
      parameters:
        - description: Pagination limit
          in: query
          name: MaxItems
          required: false
          schema:
            type: string
        - description: Pagination token
          in: query
          name: Marker
          required: false
          schema:
            type: string
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/ListGroupPoliciesRequest'
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  ListGroupPoliciesResult:
                    $ref: '#/components/schemas/ListGroupPoliciesResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: ListGroupPolicies
  /?Action=ListPolicies&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Lists all the managed policies that are available in your Amazon Web Services account, including your own customer-defined managed policies and all Amazon Web Services managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your Amazon Web Services account, set <code>Scope</code> to
        <code>Local</code>. To list only Amazon Web Services managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <note> <p>IAM resource-listing operations return a
        subset of the available attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a customer manged policy, see <a>GetPolicy</a>.</p> </note>
      operationId: GET_ListPolicies
      parameters:
        - description: <p>The scope to use for filtering the results.</p> <p>To list only Amazon Web Services managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your Amazon Web Services account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
          in: query
          name: Scope
          required: false
          schema:
            enum:
              - All
              - AWS
              - Local
            type: string
        - description: <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
          in: query
          name: OnlyAttached
          required: false
          schema:
            type: boolean
        - description: >-
            The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character
            (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
          in: query
          name: PathPrefix
          required: false
          schema:
            maxLength: 512
            minLength: 1
            pattern: ((/[A-Za-z0-9\.,\+@=_-]+)*)/
            type: string
        - description: "<p>The policy usage method to use for filtering the results.</p> <p>To list only permissions policies, set\_<code>PolicyUsageFilter</code>\_to\_<code>PermissionsPolicy</code>. To list only the policies used to set permissions boundaries, set\_the value to\_<code>PermissionsBoundary</code>.</p> <p>This parameter is optional. If it is not included, all policies are returned. </p>"
          in: query
          name: PolicyUsageFilter
          required: false
          schema:
            description: <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM identities </a> in the <i>IAM User Guide</i>.</p>
            enum:
              - PermissionsPolicy
              - PermissionsBoundary
            type: string
        - description: Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
          in: query
          name: Marker
          required: false
          schema:
            maxLength: 320
            minLength: 1
            pattern: '[\u0020-\u00FF]+'
            type: string
        - description: >-
            <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>,
            and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
          in: query
          name: MaxItems
          required: false
          schema:
            maximum: 1000
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  ListPoliciesResult:
                    $ref: '#/components/schemas/ListPoliciesResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: ListPolicies
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Lists all the managed policies that are available in your Amazon Web Services account, including your own customer-defined managed policies and all Amazon Web Services managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your Amazon Web Services account, set <code>Scope</code> to
        <code>Local</code>. To list only Amazon Web Services managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <note> <p>IAM resource-listing operations return a
        subset of the available attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a customer manged policy, see <a>GetPolicy</a>.</p> </note>
      operationId: POST_ListPolicies
      parameters:
        - description: Pagination limit
          in: query
          name: MaxItems
          required: false
          schema:
            type: string
        - description: Pagination token
          in: query
          name: Marker
          required: false
          schema:
            type: string
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/ListPoliciesRequest'
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  ListPoliciesResult:
                    $ref: '#/components/schemas/ListPoliciesResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: ListPolicies
  /?Action=ListRolePolicies&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using
        the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
      operationId: GET_ListRolePolicies
      parameters:
        - description: '<p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: RoleName
          required: true
          schema:
            maxLength: 64
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
          in: query
          name: Marker
          required: false
          schema:
            maxLength: 320
            minLength: 1
            pattern: '[\u0020-\u00FF]+'
            type: string
        - description: >-
            <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>,
            and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
          in: query
          name: MaxItems
          required: false
          schema:
            maximum: 1000
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  ListRolePoliciesResult:
                    $ref: '#/components/schemas/ListRolePoliciesResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: ListRolePolicies
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using
        the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
      operationId: POST_ListRolePolicies
      parameters:
        - description: Pagination limit
          in: query
          name: MaxItems
          required: false
          schema:
            type: string
        - description: Pagination token
          in: query
          name: Marker
          required: false
          schema:
            type: string
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/ListRolePoliciesRequest'
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  ListRolePoliciesResult:
                    $ref: '#/components/schemas/ListRolePoliciesResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: ListRolePolicies
  /?Action=ListUserPolicies&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the
        <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
      operationId: GET_ListUserPolicies
      parameters:
        - description: '<p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: UserName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
          in: query
          name: Marker
          required: false
          schema:
            maxLength: 320
            minLength: 1
            pattern: '[\u0020-\u00FF]+'
            type: string
        - description: >-
            <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>,
            and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
          in: query
          name: MaxItems
          required: false
          schema:
            maximum: 1000
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  ListUserPoliciesResult:
                    $ref: '#/components/schemas/ListUserPoliciesResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: ListUserPolicies
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the
        <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
      operationId: POST_ListUserPolicies
      parameters:
        - description: Pagination limit
          in: query
          name: MaxItems
          required: false
          schema:
            type: string
        - description: Pagination token
          in: query
          name: Marker
          required: false
          schema:
            type: string
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/ListUserPoliciesRequest'
      responses:
        '200':
          content:
            text/xml:
              schema:
                properties:
                  ListUserPoliciesResult:
                    $ref: '#/components/schemas/ListUserPoliciesResponse'
                type: object
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: ListUserPolicies
  /?Action=PutGroupPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>For
        information about the maximum number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the <i>IAM User Guide</i>.</p> </note>
      operationId: GET_PutGroupPolicy
      parameters:
        - description: '<p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>'
          in: query
          name: GroupName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: '<p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: PolicyName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: >-
            <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to = IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character
            ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
          in: query
          name: PolicyDocument
          required: true
          schema:
            maxLength: 131072
            minLength: 1
            pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
          description: MalformedPolicyDocumentException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: PutGroupPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>For
        information about the maximum number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the <i>IAM User Guide</i>.</p> </note>
      operationId: POST_PutGroupPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/PutGroupPolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
          description: MalformedPolicyDocumentException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: PutGroupPolicy
  /?Action=PutRolePolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using roles to delegate permissions and federate identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about the maximum number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the <i>IAM User Guide</i>.</p> </note>
      operationId: GET_PutRolePolicy
      parameters:
        - description: '<p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: RoleName
          required: true
          schema:
            maxLength: 64
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: '<p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: PolicyName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: >-
            <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character
            ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
          in: query
          name: PolicyDocument
          required: true
          schema:
            maxLength: 131072
            minLength: 1
            pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
          description: MalformedPolicyDocumentException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
          description: UnmodifiableEntityException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: PutRolePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using roles to delegate permissions and federate identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about the maximum number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the <i>IAM User Guide</i>.</p> </note>
      operationId: POST_PutRolePolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/PutRolePolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
          description: MalformedPolicyDocumentException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
          description: UnmodifiableEntityException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: PutRolePolicy
  /?Action=PutUserPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>For
        information about the maximum number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the <i>IAM User Guide</i>.</p> </note>
      operationId: GET_PutUserPolicy
      parameters:
        - description: '<p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: UserName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: '<p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: PolicyName
          required: true
          schema:
            maxLength: 128
            minLength: 1
            pattern: '[\w+=,.@-]+'
            type: string
        - description: >-
            <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character
            ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
          in: query
          name: PolicyDocument
          required: true
          schema:
            maxLength: 131072
            minLength: 1
            pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
            type: string
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
          description: MalformedPolicyDocumentException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: PutUserPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>For
        information about the maximum number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the <i>IAM User Guide</i>.</p> </note>
      operationId: POST_PutUserPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/PutUserPolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
          description: MalformedPolicyDocumentException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: PutUserPolicy
  /?Action=UntagPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: Removes the specified tags from the customer managed policy. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
      operationId: GET_UntagPolicy
      parameters:
        - description: '<p>The ARN of the IAM customer managed policy from which you want to remove tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: PolicyArn
          required: true
          schema:
            description: <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
            maxLength: 2048
            minLength: 20
            type: string
        - description: A list of key names as a simple array of strings. The tags with matching keys are removed from the specified policy.
          in: query
          name: TagKeys
          required: true
          schema:
            items:
              allOf:
                - $ref: '#/components/schemas/tagKeyType'
                - xml:
                    name: member
            maxItems: 50
            type: array
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
          description: ConcurrentModificationException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: UntagPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: Removes the specified tags from the customer managed policy. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
      operationId: POST_UntagPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/UntagPolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
          description: ConcurrentModificationException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: UntagPolicy
  /?Action=TagPolicy&Version=2010-05-08&__nativeEndpoint=true:
    servers:
      - description: The general IAM multi-region endpoint
        url: https://iam.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
    get:
      description: >-
        <p>Adds one or more tags to an IAM customer managed policy. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and
        the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Include tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM customer managed policy that has a specified tag attached. For examples of policies that show how to use tags to control access, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the <i>IAM User Guide</i>.</p> </li> </ul> <note> <ul> <li> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User
        Guide</i>.</p> </li> <li> <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note>
      operationId: GET_TagPolicy
      parameters:
        - description: '<p>The ARN of the IAM customer managed policy to which you want to add tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>'
          in: query
          name: PolicyArn
          required: true
          schema:
            description: <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
            maxLength: 2048
            minLength: 20
            type: string
        - description: The list of tags that you want to attach to the IAM customer managed policy. Each tag consists of a key name and an associated value.
          in: query
          name: Tags
          required: true
          schema:
            items:
              allOf:
                - $ref: '#/components/schemas/Tag'
                - xml:
                    name: member
            maxItems: 50
            type: array
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
          description: ConcurrentModificationException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: TagPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      description: >-
        <p>Adds one or more tags to an IAM customer managed policy. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and
        the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Include tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM customer managed policy that has a specified tag attached. For examples of policies that show how to use tags to control access, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the <i>IAM User Guide</i>.</p> </li> </ul> <note> <ul> <li> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User
        Guide</i>.</p> </li> <li> <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note>
      operationId: POST_TagPolicy
      parameters: []
      requestBody:
        content:
          text/xml:
            schema:
              $ref: '#/components/schemas/TagPolicyRequest'
      responses:
        '200':
          description: Success
        '480':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
          description: NoSuchEntityException
        '481':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        '482':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
          description: InvalidInputException
        '483':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
          description: ConcurrentModificationException
        '484':
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-aws-operation-name: TagPolicy
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
  queryParamTranspose:
    algorithm: AWSCanonical
