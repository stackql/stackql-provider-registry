openapi: 3.0.0
info:
  title: EKS
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    AccessPolicy:
      description: An access policy to associate with the current access entry.
      type: object
      additionalProperties: false
      properties:
        PolicyArn:
          type: string
          description: The ARN of the access policy to add to the access entry.
        AccessScope:
          $ref: '#/components/schemas/AccessScope'
      required:
        - PolicyArn
        - AccessScope
    AccessScope:
      description: The access scope of the access policy.
      type: object
      additionalProperties: false
      properties:
        Type:
          description: The type of the access scope.
          type: string
          enum:
            - namespace
            - cluster
        Namespaces:
          description: The namespaces to associate with the access scope. Only specify if Type is set to 'namespace'.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
      required:
        - Type
    AccessEntry:
      type: object
      properties:
        ClusterName:
          description: The cluster that the access entry is created for.
          type: string
          minLength: 1
        PrincipalArn:
          description: The principal ARN that the access entry is created for.
          type: string
          minLength: 1
        Username:
          description: The Kubernetes user that the access entry is associated with.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        AccessEntryArn:
          description: The ARN of the access entry.
          type: string
        KubernetesGroups:
          description: The Kubernetes groups that the access entry is associated with.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        AccessPolicies:
          description: An array of access policies that are associated with the access entry.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AccessPolicy'
          maxItems: 20
        Type:
          description: The node type to associate with the access entry.
          type: string
      required:
        - PrincipalArn
        - ClusterName
      x-stackql-resource-name: access_entry
      description: An object representing an Amazon EKS AccessEntry.
      x-type-name: AWS::EKS::AccessEntry
      x-stackql-primary-identifier:
        - PrincipalArn
        - ClusterName
      x-create-only-properties:
        - PrincipalArn
        - ClusterName
        - Type
      x-read-only-properties:
        - AccessEntryArn
      x-required-properties:
        - PrincipalArn
        - ClusterName
      x-replacement-strategy: create_then_delete
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - eks:CreateAccessEntry
          - eks:DescribeAccessEntry
          - eks:AssociateAccessPolicy
          - eks:TagResource
          - eks:ListAssociatedAccessPolicies
        read:
          - eks:DescribeAccessEntry
          - eks:ListAssociatedAccessPolicies
        update:
          - eks:DescribeAccessEntry
          - eks:ListAssociatedAccessPolicies
          - eks:UpdateAccessEntry
          - eks:AssociateAccessPolicy
          - eks:DisassociateAccessPolicy
          - eks:TagResource
          - eks:UntagResource
        delete:
          - eks:DeleteAccessEntry
          - eks:DescribeAccessEntry
        list:
          - eks:ListAccessEntries
    Addon:
      type: object
      properties:
        ClusterName:
          description: Name of Cluster
          type: string
          minLength: 1
        AddonName:
          description: Name of Addon
          type: string
          minLength: 1
        AddonVersion:
          description: Version of Addon
          type: string
          minLength: 1
        PreserveOnDelete:
          description: PreserveOnDelete parameter value
          type: boolean
        ResolveConflicts:
          description: Resolve parameter value conflicts
          type: string
          minLength: 1
          enum:
            - NONE
            - OVERWRITE
            - PRESERVE
        ServiceAccountRoleArn:
          description: IAM role to bind to the add-on's service account
          type: string
          minLength: 1
        ConfigurationValues:
          description: The configuration values to use with the add-on
          type: string
          minLength: 1
        Arn:
          description: Amazon Resource Name (ARN) of the add-on
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ClusterName
        - AddonName
      x-stackql-resource-name: addon
      description: Resource Schema for AWS::EKS::Addon
      x-type-name: AWS::EKS::Addon
      x-stackql-primary-identifier:
        - ClusterName
        - AddonName
      x-create-only-properties:
        - ClusterName
        - AddonName
      x-write-only-properties:
        - ResolveConflicts
        - PreserveOnDelete
      x-read-only-properties:
        - Arn
      x-required-properties:
        - ClusterName
        - AddonName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - eks:CreateAddon
          - eks:DescribeAddon
          - eks:TagResource
          - iam:PassRole
        read:
          - eks:DescribeAddon
        delete:
          - eks:DeleteAddon
          - eks:DescribeAddon
        list:
          - eks:ListAddons
        update:
          - iam:PassRole
          - eks:UpdateAddon
          - eks:DescribeAddon
          - eks:DescribeUpdate
          - eks:ListTagsForResource
          - eks:TagResource
          - eks:UntagResource
    Provider:
      type: object
      additionalProperties: false
      properties:
        KeyArn:
          description: Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric, created in the same region as the cluster, and if the KMS key was created in a different account, the user must have access to the KMS key.
          type: string
    EncryptionConfig:
      description: The encryption configuration for the cluster
      type: object
      properties:
        Provider:
          description: The encryption provider for the cluster.
          $ref: '#/components/schemas/Provider'
        Resources:
          description: Specifies the resources to be encrypted. The only supported value is "secrets".
          type: array
          x-insertionOrder: false
          items:
            type: string
      additionalProperties: false
    ResourcesVpcConfig:
      description: An object representing the VPC configuration to use for an Amazon EKS cluster.
      type: object
      additionalProperties: false
      properties:
        EndpointPrivateAccess:
          description: >-
            Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false, which disables private access for your Kubernetes API server. If you disable private access and you have nodes or AWS Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for
            communication with the nodes or Fargate pods.
          type: boolean
        EndpointPublicAccess:
          description: Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true, which enables public access for your Kubernetes API server.
          type: boolean
        PublicAccessCidrs:
          description: The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access and you have nodes or AWS Fargate pods in the cluster, then ensure that you specify the necessary CIDR blocks.
          type: array
          x-insertionOrder: false
          items:
            type: string
            minItems: 1
        SecurityGroupIds:
          description: Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane. If you don't specify a security group, the default security group for your VPC is used.
          type: array
          x-insertionOrder: false
          items:
            type: string
            minItems: 1
        SubnetIds:
          description: Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your nodes and the Kubernetes control plane.
          type: array
          x-insertionOrder: false
          items:
            type: string
            minItems: 1
      required:
        - SubnetIds
    LoggingTypeConfig:
      description: Enabled Logging Type
      type: object
      properties:
        Type:
          description: name of the log type
          type: string
          enum:
            - api
            - audit
            - authenticator
            - controllerManager
            - scheduler
      additionalProperties: false
    EnabledTypes:
      description: Enable control plane logs for your cluster, all log types will be disabled if the array is empty
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/LoggingTypeConfig'
    ClusterLogging:
      description: 'The cluster control plane logging configuration for your cluster. '
      type: object
      additionalProperties: false
      properties:
        EnabledTypes:
          $ref: '#/components/schemas/EnabledTypes'
    Logging:
      description: Enable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs based on log types. By default, cluster control plane logs aren't exported to CloudWatch Logs.
      type: object
      additionalProperties: false
      properties:
        ClusterLogging:
          description: 'The cluster control plane logging configuration for your cluster. '
          $ref: '#/components/schemas/ClusterLogging'
    KubernetesNetworkConfig:
      description: The Kubernetes network configuration for the cluster.
      additionalProperties: false
      type: object
      properties:
        ServiceIpv4Cidr:
          description: 'The CIDR block to assign Kubernetes service IP addresses from. If you don''t specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. '
          type: string
        ServiceIpv6Cidr:
          description: The CIDR block to assign Kubernetes service IP addresses from.
          type: string
        IpFamily:
          description: Ipv4 or Ipv6. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on
          type: string
          enum:
            - ipv4
            - ipv6
    ControlPlanePlacement:
      description: Specify the placement group of the control plane machines for your cluster.
      type: object
      additionalProperties: false
      properties:
        GroupName:
          description: Specify the placement group name of the control place machines for your cluster.
          type: string
    OutpostConfig:
      description: An object representing the Outpost configuration to use for AWS EKS outpost cluster.
      additionalProperties: false
      type: object
      properties:
        OutpostArns:
          description: Specify one or more Arn(s) of Outpost(s) on which you would like to create your cluster.
          type: array
          x-insertionOrder: false
          items:
            type: string
            minItems: 1
        ControlPlaneInstanceType:
          description: Specify the Instance type of the machines that should be used to create your cluster.
          type: string
        ControlPlanePlacement:
          description: Specify the placement group of the control plane machines for your cluster.
          $ref: '#/components/schemas/ControlPlanePlacement'
      required:
        - OutpostArns
        - ControlPlaneInstanceType
    AccessConfig:
      description: An object representing the Access Config to use for the cluster.
      additionalProperties: false
      type: object
      properties:
        BootstrapClusterCreatorAdminPermissions:
          description: Set this value to false to avoid creating a default cluster admin Access Entry using the IAM principal used to create the cluster.
          type: boolean
        AuthenticationMode:
          description: Specify the authentication mode that should be used to create your cluster.
          type: string
          enum:
            - CONFIG_MAP
            - API_AND_CONFIG_MAP
            - API
    Cluster:
      type: object
      properties:
        EncryptionConfig:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/EncryptionConfig'
            maxItems: 1
        KubernetesNetworkConfig:
          $ref: '#/components/schemas/KubernetesNetworkConfig'
        Logging:
          $ref: '#/components/schemas/Logging'
        Name:
          description: The unique name to give to your cluster.
          type: string
          pattern: ^[0-9A-Za-z][A-Za-z0-9\-_]*
          minLength: 1
          maxLength: 100
        Id:
          description: The unique ID given to your cluster.
          type: string
        ResourcesVpcConfig:
          $ref: '#/components/schemas/ResourcesVpcConfig'
        OutpostConfig:
          $ref: '#/components/schemas/OutpostConfig'
        AccessConfig:
          $ref: '#/components/schemas/AccessConfig'
        RoleArn:
          description: The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf.
          type: string
        Version:
          description: The desired Kubernetes version for your cluster. If you don't specify a value here, the latest version available in Amazon EKS is used.
          type: string
          pattern: 1\.\d\d
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          description: The ARN of the cluster, such as arn:aws:eks:us-west-2:666666666666:cluster/prod.
          type: string
        Endpoint:
          description: The endpoint for your Kubernetes API server, such as https://5E1D0CEXAMPLEA591B746AFC5AB30262.yl4.us-west-2.eks.amazonaws.com.
          type: string
        CertificateAuthorityData:
          description: The certificate-authority-data for your cluster.
          type: string
        ClusterSecurityGroupId:
          description: The cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control plane to data plane communication.
          type: string
        EncryptionConfigKeyArn:
          description: Amazon Resource Name (ARN) or alias of the customer master key (CMK).
          type: string
        OpenIdConnectIssuerUrl:
          description: The issuer URL for the cluster's OIDC identity provider, such as https://oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E. If you need to remove https:// from this output value, you can include the following code in your template.
          type: string
      required:
        - RoleArn
        - ResourcesVpcConfig
      x-stackql-resource-name: cluster
      description: An object representing an Amazon EKS cluster.
      x-type-name: AWS::EKS::Cluster
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - OutpostConfig
        - EncryptionConfig
        - KubernetesNetworkConfig
        - AccessConfig/BootstrapClusterCreatorAdminPermissions
        - Name
        - RoleArn
      x-write-only-properties:
        - AccessConfig/BootstrapClusterCreatorAdminPermissions
      x-read-only-properties:
        - Id
        - Arn
        - Endpoint
        - CertificateAuthorityData
        - ClusterSecurityGroupId
        - EncryptionConfigKeyArn
        - OpenIdConnectIssuerUrl
        - KubernetesNetworkConfig/ServiceIpv6Cidr
      x-required-properties:
        - RoleArn
        - ResourcesVpcConfig
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - eks:CreateCluster
          - eks:DescribeCluster
          - eks:TagResource
          - iam:PassRole
          - iam:GetRole
          - iam:ListAttachedRolePolicies
          - iam:CreateServiceLinkedRole
          - iam:CreateInstanceProfile
          - iam:TagInstanceProfile
          - iam:AddRoleToInstanceProfile
          - iam:GetInstanceProfile
          - iam:DeleteInstanceProfile
          - iam:RemoveRoleFromInstanceProfile
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - kms:DescribeKey
          - kms:CreateGrant
        read:
          - eks:DescribeCluster
        update:
          - iam:PassRole
          - eks:UpdateClusterConfig
          - eks:UpdateClusterVersion
          - eks:DescribeCluster
          - eks:DescribeUpdate
          - eks:TagResource
          - eks:UntagResource
        delete:
          - eks:DeleteCluster
          - eks:DescribeCluster
        list:
          - eks:ListClusters
    Selector:
      type: object
      additionalProperties: false
      properties:
        Namespace:
          type: string
          minLength: 1
        Labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
      required:
        - Namespace
    Label:
      description: A key-value pair to associate with a pod.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: The key name of the label.
          minLength: 1
          maxLength: 127
        Value:
          type: string
          description: 'The value for the label. '
          minLength: 1
          maxLength: 255
      required:
        - Key
        - Value
    FargateProfile:
      type: object
      properties:
        ClusterName:
          description: Name of the Cluster
          type: string
          minLength: 1
        FargateProfileName:
          description: Name of FargateProfile
          type: string
          minLength: 1
        PodExecutionRoleArn:
          description: The IAM policy arn for pods
          type: string
          minLength: 1
        Arn:
          type: string
        Subnets:
          type: array
          items:
            type: string
        Selectors:
          type: array
          items:
            $ref: '#/components/schemas/Selector'
          minItems: 1
        Tags:
          type: array
          uniqueItems: true
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ClusterName
        - PodExecutionRoleArn
        - Selectors
      x-stackql-resource-name: fargate_profile
      description: Resource Schema for AWS::EKS::FargateProfile
      x-type-name: AWS::EKS::FargateProfile
      x-stackql-primary-identifier:
        - ClusterName
        - FargateProfileName
      x-create-only-properties:
        - ClusterName
        - FargateProfileName
        - PodExecutionRoleArn
        - Subnets
        - Selectors
      x-read-only-properties:
        - Arn
      x-required-properties:
        - ClusterName
        - PodExecutionRoleArn
        - Selectors
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - eks:CreateFargateProfile
          - eks:DescribeFargateProfile
          - iam:GetRole
          - iam:PassRole
          - iam:CreateServiceLinkedRole
          - eks:TagResource
        read:
          - eks:DescribeFargateProfile
        delete:
          - eks:DeleteFargateProfile
          - eks:DescribeFargateProfile
        list:
          - eks:ListFargateProfiles
        update:
          - eks:DescribeFargateProfile
          - eks:ListTagsForResource
          - eks:TagResource
          - eks:UntagResource
    RequiredClaim:
      description: The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: The key of the requiredClaims.
          minLength: 1
          maxLength: 63
        Value:
          type: string
          description: The value for the requiredClaims.
          minLength: 1
          maxLength: 253
      required:
        - Key
        - Value
    OidcIdentityProviderConfig:
      description: An object representing an OpenID Connect (OIDC) configuration.
      type: object
      additionalProperties: false
      properties:
        ClientId:
          description: This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
          type: string
        GroupsClaim:
          description: The JWT claim that the provider uses to return your groups.
          type: string
        GroupsPrefix:
          description: 'The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).'
          type: string
        IssuerUrl:
          description: The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
          type: string
        RequiredClaims:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/RequiredClaim'
        UsernameClaim:
          description: The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
          type: string
        UsernamePrefix:
          description: The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
          type: string
      required:
        - ClientId
        - IssuerUrl
    IdentityProviderConfig:
      type: object
      properties:
        ClusterName:
          description: The name of the identity provider configuration.
          type: string
        Type:
          description: The type of the identity provider configuration.
          type: string
          enum:
            - oidc
        IdentityProviderConfigName:
          description: The name of the OIDC provider configuration.
          type: string
        Oidc:
          $ref: '#/components/schemas/OidcIdentityProviderConfig'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        IdentityProviderConfigArn:
          description: The ARN of the configuration.
          type: string
      required:
        - Type
        - ClusterName
      x-stackql-resource-name: identity_provider_config
      description: An object representing an Amazon EKS IdentityProviderConfig.
      x-type-name: AWS::EKS::IdentityProviderConfig
      x-stackql-primary-identifier:
        - IdentityProviderConfigName
        - ClusterName
        - Type
      x-create-only-properties:
        - Oidc
        - Type
        - IdentityProviderConfigName
        - ClusterName
      x-read-only-properties:
        - IdentityProviderConfigArn
      x-required-properties:
        - Type
        - ClusterName
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - eks:DescribeUpdate
          - eks:AssociateIdentityProviderConfig
          - eks:DescribeIdentityProviderConfig
          - eks:TagResource
        read:
          - eks:DescribeIdentityProviderConfig
        update:
          - eks:DescribeIdentityProviderConfig
          - eks:TagResource
          - eks:UntagResource
        delete:
          - eks:DisassociateIdentityProviderConfig
          - eks:DescribeIdentityProviderConfig
        list:
          - eks:ListIdentityProviderConfigs
    LaunchTemplateSpecification:
      description: An object representing a launch template specification for AWS EKS Nodegroup.
      type: object
      additionalProperties: false
      properties:
        Id:
          type: string
          minLength: 1
        Version:
          type: string
          minLength: 1
        Name:
          type: string
          minLength: 1
    Taint:
      description: An object representing a Taint specification for AWS EKS Nodegroup.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          minLength: 1
        Value:
          type: string
          minLength: 0
        Effect:
          type: string
          minLength: 1
    ScalingConfig:
      description: An object representing a auto scaling group specification for AWS EKS Nodegroup.
      type: object
      additionalProperties: false
      properties:
        MinSize:
          type: integer
          minimum: 0
        DesiredSize:
          type: integer
          minimum: 0
        MaxSize:
          type: integer
          minimum: 1
    RemoteAccess:
      description: An object representing a remote access configuration specification for AWS EKS Nodegroup.
      type: object
      additionalProperties: false
      properties:
        SourceSecurityGroups:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Ec2SshKey:
          type: string
      required:
        - Ec2SshKey
    UpdateConfig:
      description: The node group update configuration.
      type: object
      additionalProperties: false
      properties:
        MaxUnavailable:
          description: 'The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum number is 100. '
          type: number
          minimum: 1
        MaxUnavailablePercentage:
          description: The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or maxUnavailable is required to have a value.
          type: number
          minimum: 1
          maximum: 100
    Nodegroup:
      type: object
      properties:
        AmiType:
          description: The AMI type for your node group.
          type: string
        CapacityType:
          description: The capacity type of your managed node group.
          type: string
        ClusterName:
          description: Name of the cluster to create the node group in.
          type: string
          minLength: 1
        DiskSize:
          description: The root device disk size (in GiB) for your node group instances.
          type: integer
        ForceUpdateEnabled:
          description: Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue.
          type: boolean
          default: false
        InstanceTypes:
          description: Specify the instance types for a node group.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Labels:
          description: The Kubernetes labels to be applied to the nodes in the node group when they are created.
          type: object
          x-patternProperties:
            ^.+$:
              type: string
          additionalProperties: false
        LaunchTemplate:
          description: An object representing a node group's launch template specification.
          $ref: '#/components/schemas/LaunchTemplateSpecification'
        NodegroupName:
          description: The unique name to give your node group.
          type: string
          minLength: 1
        NodeRole:
          description: The Amazon Resource Name (ARN) of the IAM role to associate with your node group.
          type: string
        ReleaseVersion:
          description: The AMI version of the Amazon EKS-optimized AMI to use with your node group.
          type: string
        RemoteAccess:
          description: The remote access (SSH) configuration to use with your node group.
          $ref: '#/components/schemas/RemoteAccess'
        ScalingConfig:
          description: The scaling configuration details for the Auto Scaling group that is created for your node group.
          $ref: '#/components/schemas/ScalingConfig'
        Subnets:
          description: The subnets to use for the Auto Scaling group that is created for your node group.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Tags:
          description: The metadata, as key-value pairs, to apply to the node group to assist with categorization and organization. Follows same schema as Labels for consistency.
          type: object
          x-patternProperties:
            ^.+$:
              type: string
          additionalProperties: false
        Taints:
          description: The Kubernetes taints to be applied to the nodes in the node group when they are created.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Taint'
        UpdateConfig:
          description: The node group update configuration.
          $ref: '#/components/schemas/UpdateConfig'
        Version:
          description: The Kubernetes version to use for your managed nodes.
          type: string
        Id:
          type: string
        Arn:
          type: string
      required:
        - ClusterName
        - NodeRole
        - Subnets
      x-stackql-resource-name: nodegroup
      description: Resource schema for AWS::EKS::Nodegroup
      x-type-name: AWS::EKS::Nodegroup
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - CapacityType
        - NodegroupName
        - RemoteAccess
        - NodeRole
        - ClusterName
        - InstanceTypes
        - DiskSize
        - AmiType
        - Subnets
      x-write-only-properties:
        - ForceUpdateEnabled
      x-read-only-properties:
        - Id
        - Arn
      x-required-properties:
        - ClusterName
        - NodeRole
        - Subnets
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - eks:CreateNodegroup
          - eks:DescribeNodegroup
          - eks:TagResource
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - ec2:DescribeSecurityGroups
          - ec2:DescribeKeyPairs
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeRouteTables
          - ec2:DescribeLaunchTemplates
          - ec2:DescribeLaunchTemplateVersions
          - ec2:RunInstances
          - iam:CreateServiceLinkedRole
          - iam:GetRole
          - iam:PassRole
          - iam:ListAttachedRolePolicies
        read:
          - eks:DescribeNodegroup
        delete:
          - eks:DeleteNodegroup
          - eks:DescribeNodegroup
        list:
          - eks:ListNodegroups
        update:
          - iam:GetRole
          - iam:PassRole
          - eks:DescribeNodegroup
          - eks:DescribeUpdate
          - eks:ListUpdates
          - eks:TagResource
          - eks:UntagResource
          - eks:UpdateNodegroupConfig
          - eks:UpdateNodegroupVersion
    PodIdentityAssociation:
      type: object
      properties:
        ClusterName:
          description: The cluster that the pod identity association is created for.
          type: string
          minLength: 1
        RoleArn:
          description: The IAM role ARN that the pod identity association is created for.
          type: string
        Namespace:
          description: The Kubernetes namespace that the pod identity association is created for.
          type: string
        ServiceAccount:
          description: The Kubernetes service account that the pod identity association is created for.
          type: string
        AssociationArn:
          description: The ARN of the pod identity association.
          type: string
        AssociationId:
          description: The ID of the pod identity association.
          type: string
          minLength: 1
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ClusterName
        - RoleArn
        - Namespace
        - ServiceAccount
      x-stackql-resource-name: pod_identity_association
      description: An object representing an Amazon EKS PodIdentityAssociation.
      x-type-name: AWS::EKS::PodIdentityAssociation
      x-stackql-primary-identifier:
        - AssociationArn
      x-create-only-properties:
        - ClusterName
        - Namespace
        - ServiceAccount
      x-read-only-properties:
        - AssociationArn
        - AssociationId
      x-required-properties:
        - ClusterName
        - RoleArn
        - Namespace
        - ServiceAccount
      x-replacement-strategy: create_then_delete
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - eks:CreatePodIdentityAssociation
          - eks:DescribePodIdentityAssociation
          - eks:TagResource
          - iam:PassRole
          - iam:GetRole
        read:
          - eks:DescribePodIdentityAssociation
        update:
          - eks:DescribePodIdentityAssociation
          - eks:UpdatePodIdentityAssociation
          - eks:TagResource
          - eks:UntagResource
          - iam:PassRole
          - iam:GetRole
        delete:
          - eks:DeletePodIdentityAssociation
          - eks:DescribePodIdentityAssociation
        list:
          - eks:ListPodIdentityAssociations
  x-stackQL-resources:
    access_entries:
      name: access_entries
      id: aws.eks.access_entries
      x-cfn-schema-name: AccessEntry
      x-type: list
      x-identifiers:
        - PrincipalArn
        - ClusterName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PrincipalArn') as principal_arn,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::AccessEntry'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PrincipalArn') as principal_arn,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::AccessEntry'
                AND region = 'us-east-1'
    access_entry:
      name: access_entry
      id: aws.eks.access_entry
      x-cfn-schema-name: AccessEntry
      x-type: get
      x-identifiers:
        - PrincipalArn
        - ClusterName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(Properties, '$.PrincipalArn') as principal_arn,
              JSON_EXTRACT(Properties, '$.Username') as username,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AccessEntryArn') as access_entry_arn,
              JSON_EXTRACT(Properties, '$.KubernetesGroups') as kubernetes_groups,
              JSON_EXTRACT(Properties, '$.AccessPolicies') as access_policies,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::AccessEntry'
              AND data__Identifier = '<PrincipalArn>|<ClusterName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name,
                json_extract_path_text(Properties, 'PrincipalArn') as principal_arn,
                json_extract_path_text(Properties, 'Username') as username,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'AccessEntryArn') as access_entry_arn,
                json_extract_path_text(Properties, 'KubernetesGroups') as kubernetes_groups,
                json_extract_path_text(Properties, 'AccessPolicies') as access_policies,
                json_extract_path_text(Properties, 'Type') as type
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::AccessEntry'
                AND data__Identifier = '<PrincipalArn>|<ClusterName>'
                AND region = 'us-east-1'
    addons:
      name: addons
      id: aws.eks.addons
      x-cfn-schema-name: Addon
      x-type: list
      x-identifiers:
        - ClusterName
        - AddonName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(Properties, '$.AddonName') as addon_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::Addon'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name,
                json_extract_path_text(Properties, 'AddonName') as addon_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::Addon'
                AND region = 'us-east-1'
    addon:
      name: addon
      id: aws.eks.addon
      x-cfn-schema-name: Addon
      x-type: get
      x-identifiers:
        - ClusterName
        - AddonName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(Properties, '$.AddonName') as addon_name,
              JSON_EXTRACT(Properties, '$.AddonVersion') as addon_version,
              JSON_EXTRACT(Properties, '$.PreserveOnDelete') as preserve_on_delete,
              JSON_EXTRACT(Properties, '$.ResolveConflicts') as resolve_conflicts,
              JSON_EXTRACT(Properties, '$.ServiceAccountRoleArn') as service_account_role_arn,
              JSON_EXTRACT(Properties, '$.ConfigurationValues') as configuration_values,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::Addon'
              AND data__Identifier = '<ClusterName>|<AddonName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name,
                json_extract_path_text(Properties, 'AddonName') as addon_name,
                json_extract_path_text(Properties, 'AddonVersion') as addon_version,
                json_extract_path_text(Properties, 'PreserveOnDelete') as preserve_on_delete,
                json_extract_path_text(Properties, 'ResolveConflicts') as resolve_conflicts,
                json_extract_path_text(Properties, 'ServiceAccountRoleArn') as service_account_role_arn,
                json_extract_path_text(Properties, 'ConfigurationValues') as configuration_values,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::Addon'
                AND data__Identifier = '<ClusterName>|<AddonName>'
                AND region = 'us-east-1'
    clusters:
      name: clusters
      id: aws.eks.clusters
      x-cfn-schema-name: Cluster
      x-type: list
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::Cluster'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::Cluster'
                AND region = 'us-east-1'
    cluster:
      name: cluster
      id: aws.eks.cluster
      x-cfn-schema-name: Cluster
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.EncryptionConfig') as encryption_config,
              JSON_EXTRACT(Properties, '$.KubernetesNetworkConfig') as kubernetes_network_config,
              JSON_EXTRACT(Properties, '$.Logging') as logging,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ResourcesVpcConfig') as resources_vpc_config,
              JSON_EXTRACT(Properties, '$.OutpostConfig') as outpost_config,
              JSON_EXTRACT(Properties, '$.AccessConfig') as access_config,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.CertificateAuthorityData') as certificate_authority_data,
              JSON_EXTRACT(Properties, '$.ClusterSecurityGroupId') as cluster_security_group_id,
              JSON_EXTRACT(Properties, '$.EncryptionConfigKeyArn') as encryption_config_key_arn,
              JSON_EXTRACT(Properties, '$.OpenIdConnectIssuerUrl') as open_id_connect_issuer_url
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::Cluster'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'EncryptionConfig') as encryption_config,
                json_extract_path_text(Properties, 'KubernetesNetworkConfig') as kubernetes_network_config,
                json_extract_path_text(Properties, 'Logging') as logging,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'ResourcesVpcConfig') as resources_vpc_config,
                json_extract_path_text(Properties, 'OutpostConfig') as outpost_config,
                json_extract_path_text(Properties, 'AccessConfig') as access_config,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Version') as version,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Endpoint') as endpoint,
                json_extract_path_text(Properties, 'CertificateAuthorityData') as certificate_authority_data,
                json_extract_path_text(Properties, 'ClusterSecurityGroupId') as cluster_security_group_id,
                json_extract_path_text(Properties, 'EncryptionConfigKeyArn') as encryption_config_key_arn,
                json_extract_path_text(Properties, 'OpenIdConnectIssuerUrl') as open_id_connect_issuer_url
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::Cluster'
                AND data__Identifier = '<Name>'
                AND region = 'us-east-1'
    fargate_profiles:
      name: fargate_profiles
      id: aws.eks.fargate_profiles
      x-cfn-schema-name: FargateProfile
      x-type: list
      x-identifiers:
        - ClusterName
        - FargateProfileName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(Properties, '$.FargateProfileName') as fargate_profile_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::FargateProfile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name,
                json_extract_path_text(Properties, 'FargateProfileName') as fargate_profile_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::FargateProfile'
                AND region = 'us-east-1'
    fargate_profile:
      name: fargate_profile
      id: aws.eks.fargate_profile
      x-cfn-schema-name: FargateProfile
      x-type: get
      x-identifiers:
        - ClusterName
        - FargateProfileName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(Properties, '$.FargateProfileName') as fargate_profile_name,
              JSON_EXTRACT(Properties, '$.PodExecutionRoleArn') as pod_execution_role_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Subnets') as subnets,
              JSON_EXTRACT(Properties, '$.Selectors') as selectors,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::FargateProfile'
              AND data__Identifier = '<ClusterName>|<FargateProfileName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name,
                json_extract_path_text(Properties, 'FargateProfileName') as fargate_profile_name,
                json_extract_path_text(Properties, 'PodExecutionRoleArn') as pod_execution_role_arn,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Subnets') as subnets,
                json_extract_path_text(Properties, 'Selectors') as selectors,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::FargateProfile'
                AND data__Identifier = '<ClusterName>|<FargateProfileName>'
                AND region = 'us-east-1'
    identity_provider_configs:
      name: identity_provider_configs
      id: aws.eks.identity_provider_configs
      x-cfn-schema-name: IdentityProviderConfig
      x-type: list
      x-identifiers:
        - IdentityProviderConfigName
        - ClusterName
        - Type
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IdentityProviderConfigName') as identity_provider_config_name,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::IdentityProviderConfig'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IdentityProviderConfigName') as identity_provider_config_name,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name,
                json_extract_path_text(Properties, 'Type') as type
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::IdentityProviderConfig'
                AND region = 'us-east-1'
    identity_provider_config:
      name: identity_provider_config
      id: aws.eks.identity_provider_config
      x-cfn-schema-name: IdentityProviderConfig
      x-type: get
      x-identifiers:
        - IdentityProviderConfigName
        - ClusterName
        - Type
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.IdentityProviderConfigName') as identity_provider_config_name,
              JSON_EXTRACT(Properties, '$.Oidc') as oidc,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.IdentityProviderConfigArn') as identity_provider_config_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::IdentityProviderConfig'
              AND data__Identifier = '<IdentityProviderConfigName>|<ClusterName>|<Type>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'IdentityProviderConfigName') as identity_provider_config_name,
                json_extract_path_text(Properties, 'Oidc') as oidc,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'IdentityProviderConfigArn') as identity_provider_config_arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::IdentityProviderConfig'
                AND data__Identifier = '<IdentityProviderConfigName>|<ClusterName>|<Type>'
                AND region = 'us-east-1'
    nodegroups:
      name: nodegroups
      id: aws.eks.nodegroups
      x-cfn-schema-name: Nodegroup
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::Nodegroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::Nodegroup'
                AND region = 'us-east-1'
    nodegroup:
      name: nodegroup
      id: aws.eks.nodegroup
      x-cfn-schema-name: Nodegroup
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AmiType') as ami_type,
              JSON_EXTRACT(Properties, '$.CapacityType') as capacity_type,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(Properties, '$.DiskSize') as disk_size,
              JSON_EXTRACT(Properties, '$.ForceUpdateEnabled') as force_update_enabled,
              JSON_EXTRACT(Properties, '$.InstanceTypes') as instance_types,
              JSON_EXTRACT(Properties, '$.Labels') as labels,
              JSON_EXTRACT(Properties, '$.LaunchTemplate') as launch_template,
              JSON_EXTRACT(Properties, '$.NodegroupName') as nodegroup_name,
              JSON_EXTRACT(Properties, '$.NodeRole') as node_role,
              JSON_EXTRACT(Properties, '$.ReleaseVersion') as release_version,
              JSON_EXTRACT(Properties, '$.RemoteAccess') as remote_access,
              JSON_EXTRACT(Properties, '$.ScalingConfig') as scaling_config,
              JSON_EXTRACT(Properties, '$.Subnets') as subnets,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Taints') as taints,
              JSON_EXTRACT(Properties, '$.UpdateConfig') as update_config,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::Nodegroup'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AmiType') as ami_type,
                json_extract_path_text(Properties, 'CapacityType') as capacity_type,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name,
                json_extract_path_text(Properties, 'DiskSize') as disk_size,
                json_extract_path_text(Properties, 'ForceUpdateEnabled') as force_update_enabled,
                json_extract_path_text(Properties, 'InstanceTypes') as instance_types,
                json_extract_path_text(Properties, 'Labels') as labels,
                json_extract_path_text(Properties, 'LaunchTemplate') as launch_template,
                json_extract_path_text(Properties, 'NodegroupName') as nodegroup_name,
                json_extract_path_text(Properties, 'NodeRole') as node_role,
                json_extract_path_text(Properties, 'ReleaseVersion') as release_version,
                json_extract_path_text(Properties, 'RemoteAccess') as remote_access,
                json_extract_path_text(Properties, 'ScalingConfig') as scaling_config,
                json_extract_path_text(Properties, 'Subnets') as subnets,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Taints') as taints,
                json_extract_path_text(Properties, 'UpdateConfig') as update_config,
                json_extract_path_text(Properties, 'Version') as version,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::Nodegroup'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    pod_identity_associations:
      name: pod_identity_associations
      id: aws.eks.pod_identity_associations
      x-cfn-schema-name: PodIdentityAssociation
      x-type: list
      x-identifiers:
        - AssociationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssociationArn') as association_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::PodIdentityAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AssociationArn') as association_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EKS::PodIdentityAssociation'
                AND region = 'us-east-1'
    pod_identity_association:
      name: pod_identity_association
      id: aws.eks.pod_identity_association
      x-cfn-schema-name: PodIdentityAssociation
      x-type: get
      x-identifiers:
        - AssociationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Namespace') as namespace,
              JSON_EXTRACT(Properties, '$.ServiceAccount') as service_account,
              JSON_EXTRACT(Properties, '$.AssociationArn') as association_arn,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::PodIdentityAssociation'
              AND data__Identifier = '<AssociationArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Namespace') as namespace,
                json_extract_path_text(Properties, 'ServiceAccount') as service_account,
                json_extract_path_text(Properties, 'AssociationArn') as association_arn,
                json_extract_path_text(Properties, 'AssociationId') as association_id,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EKS::PodIdentityAssociation'
                AND data__Identifier = '<AssociationArn>'
                AND region = 'us-east-1'
