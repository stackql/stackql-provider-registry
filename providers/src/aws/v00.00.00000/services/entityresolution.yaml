openapi: 3.0.0
info:
  title: EntityResolution
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    IdMappingWorkflowOutputSource:
      additionalProperties: false
      type: object
      properties:
        KMSArn:
          $ref: '#/components/schemas/KMSArn'
        OutputS3Path:
          pattern: ^s3://([^/]+)/?(.*?([^/]+)/?)$
          description: The S3 path to which Entity Resolution will write the output table
          type: string
      required:
        - OutputS3Path
    Description:
      type: string
      minLength: 0
      maxLength: 255
    IdMappingWorkflowInputSource:
      additionalProperties: false
      type: object
      properties:
        Type:
          type: string
          enum:
            - SOURCE
            - TARGET
        InputSourceARN:
          pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(idnamespace/[a-zA-Z_0-9-]{1,255})$|^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(matchingworkflow/[a-zA-Z_0-9-]{1,255})$|^arn:(aws|aws-us-gov|aws-cn):glue:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(table/[a-zA-Z_0-9-]{1,255}/[a-zA-Z_0-9-]{1,255})$
          description: An Glue table ARN for the input source table, MatchingWorkflow arn or IdNamespace ARN
          type: string
        SchemaArn:
          type: string
          $ref: '#/components/schemas/SchemaMappingArn'
      required:
        - InputSourceARN
    EntityName:
      type: string
      pattern: ^[a-zA-Z_0-9-]*$
      minLength: 0
      maxLength: 255
    IdMappingTechniques:
      additionalProperties: false
      type: object
      properties:
        RuleBasedProperties:
          $ref: '#/components/schemas/IdMappingRuleBasedProperties'
        ProviderProperties:
          $ref: '#/components/schemas/ProviderProperties'
        IdMappingType:
          type: string
          enum:
            - PROVIDER
            - RULE_BASED
    CreatedAt:
      description: The time of this SchemaMapping got created
      type: string
    IdMappingWorkflowArn:
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:.*:[0-9]+:(idmappingworkflow/.*)$
      description: The default IdMappingWorkflow arn
      type: string
    UpdatedAt:
      description: The time of this SchemaMapping got last updated at
      type: string
    IdMappingRuleBasedProperties:
      additionalProperties: false
      type: object
      properties:
        AttributeMatchingModel:
          type: string
          enum:
            - ONE_TO_ONE
            - MANY_TO_MANY
        RuleDefinitionType:
          type: string
          enum:
            - SOURCE
            - TARGET
        Rules:
          minItems: 1
          maxItems: 25
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Rule'
        RecordMatchingModel:
          type: string
          enum:
            - ONE_SOURCE_TO_ONE_TARGET
            - MANY_SOURCE_TO_ONE_TARGET
      required:
        - AttributeMatchingModel
        - RecordMatchingModel
    KMSArn:
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):kms:.*:[0-9]+:.*$
    ProviderProperties:
      type: object
      properties:
        ProviderServiceArn:
          type: string
          description: Arn of the Provider service being used.
        ProviderConfiguration:
          type: object
          additionalProperties: false
          x-patternProperties:
            ^.+$:
              type: string
          description: Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
        IntermediateSourceConfiguration:
          $ref: '#/components/schemas/IntermediateSourceConfiguration'
      required:
        - ProviderServiceArn
      additionalProperties: false
    IntermediateSourceConfiguration:
      type: object
      properties:
        IntermediateS3Path:
          type: string
          description: The s3 path that would be used to stage the intermediate data being generated during workflow execution.
      required:
        - IntermediateS3Path
      additionalProperties: false
    SchemaMappingArn:
      description: The SchemaMapping arn associated with the Schema
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:.*:[0-9]+:(schemamapping/.*)$
    AttributeName:
      type: string
      pattern: ^[a-zA-Z_0-9- \t]*$
      minLength: 0
      maxLength: 255
    Rule:
      type: object
      properties:
        RuleName:
          type: string
          pattern: ^[a-zA-Z_0-9- \t]*$
          minLength: 0
          maxLength: 255
        MatchingKeys:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 15
          items:
            $ref: '#/components/schemas/AttributeName'
      required:
        - RuleName
        - MatchingKeys
      additionalProperties: false
    Tag:
      description: A key-value pair to associate with a resource
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    IdMappingWorkflow:
      type: object
      properties:
        Description:
          description: The description of the IdMappingWorkflow
          $ref: '#/components/schemas/Description'
        InputSourceConfig:
          minItems: 1
          maxItems: 20
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/IdMappingWorkflowInputSource'
        IdMappingTechniques:
          $ref: '#/components/schemas/IdMappingTechniques'
        WorkflowName:
          description: The name of the IdMappingWorkflow
          $ref: '#/components/schemas/EntityName'
        CreatedAt:
          $ref: '#/components/schemas/CreatedAt'
        OutputSourceConfig:
          minItems: 1
          maxItems: 1
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/IdMappingWorkflowOutputSource'
        WorkflowArn:
          $ref: '#/components/schemas/IdMappingWorkflowArn'
        UpdatedAt:
          $ref: '#/components/schemas/UpdatedAt'
        RoleArn:
          pattern: ^arn:(aws|aws-us-gov|aws-cn):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
          type: string
        Tags:
          minItems: 0
          maxItems: 200
          uniqueItems: true
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - WorkflowName
        - InputSourceConfig
        - IdMappingTechniques
        - RoleArn
      x-stackql-resource-name: id_mapping_workflow
      description: IdMappingWorkflow defined in AWS Entity Resolution service
      x-type-name: AWS::EntityResolution::IdMappingWorkflow
      x-stackql-primary-identifier:
        - WorkflowName
      x-create-only-properties:
        - WorkflowName
      x-write-only-properties:
        - IdMappingTechniques/NormalizationVersion
      x-read-only-properties:
        - WorkflowArn
        - UpdatedAt
        - CreatedAt
      x-required-properties:
        - WorkflowName
        - InputSourceConfig
        - IdMappingTechniques
        - RoleArn
      x-tagging:
        permissions:
          - entityresolution:TagResource
          - entityresolution:UntagResource
          - entityresolution:ListTagsForResource
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - entityresolution:GetIdMappingWorkflow
          - entityresolution:ListTagsForResource
        create:
          - entityresolution:CreateIdMappingWorkflow
          - entityresolution:GetIdMappingWorkflow
          - entityresolution:TagResource
          - kms:CreateGrant
          - kms:DescribeKey
          - iam:PassRole
        update:
          - entityresolution:GetIdMappingWorkflow
          - entityresolution:UpdateIdMappingWorkflow
          - entityresolution:ListTagsForResource
          - entityresolution:TagResource
          - entityresolution:UntagResource
          - iam:PassRole
          - kms:CreateGrant
          - kms:DescribeKey
        list:
          - entityresolution:ListIdMappingWorkflows
        delete:
          - entityresolution:DeleteIdMappingWorkflow
          - entityresolution:GetIdMappingWorkflow
          - entityresolution:UntagResource
    IdNamespaceInputSource:
      type: object
      properties:
        InputSourceARN:
          type: string
          pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(idnamespace/[a-zA-Z_0-9-]{1,255})$|^arn:(aws|aws-us-gov|aws-cn):glue:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(table/[a-zA-Z_0-9-]{1,255}/[a-zA-Z_0-9-]{1,255})$
        SchemaName:
          $ref: '#/components/schemas/EntityName'
      required:
        - InputSourceARN
      additionalProperties: false
    IdNamespaceIdMappingWorkflowProperties:
      type: object
      properties:
        IdMappingType:
          type: string
          enum:
            - PROVIDER
            - RULE_BASED
        RuleBasedProperties:
          $ref: '#/components/schemas/NamespaceRuleBasedProperties'
        ProviderProperties:
          $ref: '#/components/schemas/NamespaceProviderProperties'
      required:
        - IdMappingType
      additionalProperties: false
    NamespaceRuleBasedProperties:
      type: object
      properties:
        Rules:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 25
          items:
            $ref: '#/components/schemas/Rule'
        RuleDefinitionTypes:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/RuleDefinitionType'
        AttributeMatchingModel:
          type: string
          enum:
            - ONE_TO_ONE
            - MANY_TO_MANY
        RecordMatchingModels:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/RecordMatchingModel'
      additionalProperties: false
    RecordMatchingModel:
      type: string
      enum:
        - ONE_SOURCE_TO_ONE_TARGET
        - MANY_SOURCE_TO_ONE_TARGET
    RuleDefinitionType:
      type: string
      enum:
        - SOURCE
        - TARGET
    NamespaceProviderProperties:
      type: object
      properties:
        ProviderServiceArn:
          $ref: '#/components/schemas/ProviderServiceArn'
        ProviderConfiguration:
          type: object
          description: Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format.
          x-patternProperties:
            ^.+$:
              type: string
          additionalProperties: false
      required:
        - ProviderServiceArn
      additionalProperties: false
    ProviderServiceArn:
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):(entityresolution):([a-z]{2}-[a-z]{1,10}-[0-9])::providerservice/([a-zA-Z0-9_-]{1,255})/([a-zA-Z0-9_-]{1,255})$
      minLength: 20
      maxLength: 255
    IdNamespace:
      type: object
      properties:
        IdNamespaceName:
          $ref: '#/components/schemas/EntityName'
        Description:
          type: string
          minLength: 0
          maxLength: 255
        InputSourceConfig:
          type: array
          x-insertionOrder: false
          minItems: 0
          maxItems: 20
          items:
            $ref: '#/components/schemas/IdNamespaceInputSource'
        IdMappingWorkflowProperties:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowProperties'
        Type:
          type: string
          enum:
            - SOURCE
            - TARGET
        RoleArn:
          type: string
          pattern: ^arn:(aws|aws-us-gov|aws-cn):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
          minLength: 32
          maxLength: 512
        IdNamespaceArn:
          description: The arn associated with the IdNamespace
          type: string
          pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(idnamespace/[a-zA-Z_0-9-]{1,255})$
        CreatedAt:
          description: The date and time when the IdNamespace was created
          type: string
        UpdatedAt:
          description: The date and time when the IdNamespace was updated
          type: string
        Tags:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - IdNamespaceName
        - Type
      x-stackql-resource-name: id_namespace
      description: IdNamespace defined in AWS Entity Resolution service
      x-type-name: AWS::EntityResolution::IdNamespace
      x-stackql-primary-identifier:
        - IdNamespaceName
      x-create-only-properties:
        - IdNamespaceName
      x-read-only-properties:
        - IdNamespaceArn
        - CreatedAt
        - UpdatedAt
      x-required-properties:
        - IdNamespaceName
        - Type
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - entityresolution:TagResource
          - entityresolution:UntagResource
          - entityresolution:ListTagsForResource
      x-required-permissions:
        create:
          - entityresolution:CreateIdNamespace
          - entityresolution:TagResource
          - iam:PassRole
        read:
          - entityresolution:GetIdNamespace
          - entityresolution:ListTagsForResource
        update:
          - entityresolution:UpdateIdNamespace
          - entityresolution:ListTagsForResource
          - entityresolution:TagResource
          - entityresolution:UntagResource
          - iam:PassRole
        delete:
          - entityresolution:DeleteIdNamespace
          - entityresolution:GetIdNamespace
          - entityresolution:UntagResource
        list:
          - entityresolution:ListIdNamespaces
    MatchingWorkflowArn:
      description: The default MatchingWorkflow arn
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:.*:[0-9]+:(matchingworkflow/.*)$
    InputSource:
      type: object
      properties:
        InputSourceARN:
          description: An Glue table ARN for the input source table
          type: string
          pattern: arn:(aws|aws-us-gov|aws-cn):.*:.*:[0-9]+:.*$
        SchemaArn:
          type: string
          $ref: '#/components/schemas/SchemaMappingArn'
        ApplyNormalization:
          type: boolean
      required:
        - InputSourceARN
        - SchemaArn
      additionalProperties: false
    OutputSource:
      type: object
      properties:
        OutputS3Path:
          description: The S3 path to which Entity Resolution will write the output table
          type: string
          pattern: ^s3://([^/]+)/?(.*?([^/]+)/?)$
        Output:
          type: array
          x-insertionOrder: false
          minItems: 0
          maxItems: 750
          items:
            $ref: '#/components/schemas/OutputAttribute'
        KMSArn:
          $ref: '#/components/schemas/KMSArn'
        ApplyNormalization:
          type: boolean
      required:
        - Output
        - OutputS3Path
      additionalProperties: false
    OutputAttribute:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/AttributeName'
        Hashed:
          type: boolean
      required:
        - Name
      additionalProperties: false
    ResolutionType:
      type: string
      enum:
        - RULE_MATCHING
        - ML_MATCHING
        - PROVIDER
    ResolutionTechniques:
      type: object
      properties:
        ResolutionType:
          $ref: '#/components/schemas/ResolutionType'
        RuleBasedProperties:
          $ref: '#/components/schemas/RuleBasedProperties'
        ProviderProperties:
          $ref: '#/components/schemas/ProviderProperties'
      additionalProperties: false
    IncrementalRunConfig:
      type: object
      properties:
        IncrementalRunType:
          type: string
          enum:
            - IMMEDIATE
      required:
        - IncrementalRunType
      additionalProperties: false
    RuleBasedProperties:
      type: object
      properties:
        Rules:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 15
          items:
            $ref: '#/components/schemas/Rule'
        AttributeMatchingModel:
          type: string
          enum:
            - ONE_TO_ONE
            - MANY_TO_MANY
        MatchPurpose:
          type: string
          enum:
            - IDENTIFIER_GENERATION
            - INDEXING
      required:
        - AttributeMatchingModel
        - Rules
      additionalProperties: false
    MatchingWorkflow:
      type: object
      properties:
        WorkflowName:
          description: The name of the MatchingWorkflow
          $ref: '#/components/schemas/EntityName'
        Description:
          description: The description of the MatchingWorkflow
          $ref: '#/components/schemas/Description'
        InputSourceConfig:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 20
          items:
            $ref: '#/components/schemas/InputSource'
        OutputSourceConfig:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/OutputSource'
        ResolutionTechniques:
          $ref: '#/components/schemas/ResolutionTechniques'
        RoleArn:
          type: string
          pattern: ^arn:(aws|aws-us-gov|aws-cn):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
        Tags:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        WorkflowArn:
          $ref: '#/components/schemas/MatchingWorkflowArn'
        CreatedAt:
          $ref: '#/components/schemas/CreatedAt'
        UpdatedAt:
          $ref: '#/components/schemas/UpdatedAt'
        IncrementalRunConfig:
          $ref: '#/components/schemas/IncrementalRunConfig'
      required:
        - WorkflowName
        - InputSourceConfig
        - OutputSourceConfig
        - ResolutionTechniques
        - RoleArn
      x-stackql-resource-name: matching_workflow
      description: MatchingWorkflow defined in AWS Entity Resolution service
      x-type-name: AWS::EntityResolution::MatchingWorkflow
      x-stackql-primary-identifier:
        - WorkflowName
      x-create-only-properties:
        - WorkflowName
      x-read-only-properties:
        - WorkflowArn
        - UpdatedAt
        - CreatedAt
      x-required-properties:
        - WorkflowName
        - InputSourceConfig
        - OutputSourceConfig
        - ResolutionTechniques
        - RoleArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - entityresolution:TagResource
          - entityresolution:UntagResource
          - entityresolution:ListTagsForResource
      x-required-permissions:
        create:
          - entityresolution:CreateMatchingWorkflow
          - entityresolution:GetMatchingWorkflow
          - entityresolution:TagResource
          - kms:CreateGrant
          - kms:DescribeKey
          - iam:PassRole
          - events:PutRule
          - events:DeleteRule
          - events:PutTargets
          - events:ListTargetsByRule
        read:
          - entityresolution:GetMatchingWorkflow
          - entityresolution:ListTagsForResource
        delete:
          - entityresolution:DeleteMatchingWorkflow
          - entityresolution:GetMatchingWorkflow
          - entityresolution:UntagResource
          - events:PutRule
          - events:DeleteRule
          - events:PutTargets
          - events:RemoveTargets
          - events:ListTargetsByRule
        list:
          - entityresolution:ListMatchingWorkflows
        update:
          - entityresolution:GetMatchingWorkflow
          - entityresolution:UpdateMatchingWorkflow
          - entityresolution:ListTagsForResource
          - entityresolution:TagResource
          - entityresolution:UntagResource
          - iam:PassRole
          - kms:CreateGrant
          - kms:DescribeKey
          - events:PutRule
          - events:DeleteRule
          - events:PutTargets
          - events:RemoveTargets
          - events:ListTargetsByRule
    VeniceGlobalArn:
      description: Arn of the resource to which the policy statement is being attached.
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:((schemamapping|matchingworkflow|idmappingworkflow|idnamespace)/[a-zA-Z_0-9-]{1,255})$
    StatementId:
      description: The Statement Id of the policy statement that is being attached.
      type: string
      pattern: ^[0-9A-Za-z]+$
      minLength: 1
      maxLength: 64
    StatementEffect:
      type: string
      enum:
        - Allow
        - Deny
    StatementAction:
      type: string
      pattern: ^(entityresolution:[a-zA-Z0-9]+)$
      minLength: 3
      maxLength: 64
    StatementActionList:
      type: array
      items:
        $ref: '#/components/schemas/StatementAction'
    StatementPrincipal:
      type: string
      pattern: ^(\\d{12})|([a-z0-9\\.]+)$
      minLength: 12
      maxLength: 64
    StatementPrincipalList:
      type: array
      items:
        $ref: '#/components/schemas/StatementPrincipal'
    StatementCondition:
      type: string
      minLength: 1
      maxLength: 40960
    PolicyStatement:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/VeniceGlobalArn'
        StatementId:
          $ref: '#/components/schemas/StatementId'
        Effect:
          $ref: '#/components/schemas/StatementEffect'
        Action:
          $ref: '#/components/schemas/StatementActionList'
        Principal:
          $ref: '#/components/schemas/StatementPrincipalList'
        Condition:
          $ref: '#/components/schemas/StatementCondition'
      required:
        - Arn
        - StatementId
      x-stackql-resource-name: policy_statement
      description: Policy Statement defined in AWS Entity Resolution Service
      x-type-name: AWS::EntityResolution::PolicyStatement
      x-stackql-primary-identifier:
        - Arn
        - StatementId
      x-create-only-properties:
        - StatementId
        - Arn
      x-required-properties:
        - Arn
        - StatementId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - entityresolution:AddPolicyStatement
        read:
          - entityresolution:GetPolicy
        update:
          - entityresolution:AddPolicyStatement
          - entityresolution:DeletePolicyStatement
        delete:
          - entityresolution:DeletePolicyStatement
          - entityresolution:GetPolicy
        list:
          - entityresolution:GetPolicy
    SchemaAttributeType:
      type: string
      enum:
        - NAME
        - NAME_FIRST
        - NAME_MIDDLE
        - NAME_LAST
        - ADDRESS
        - ADDRESS_STREET1
        - ADDRESS_STREET2
        - ADDRESS_STREET3
        - ADDRESS_CITY
        - ADDRESS_STATE
        - ADDRESS_COUNTRY
        - ADDRESS_POSTALCODE
        - PHONE
        - PHONE_NUMBER
        - PHONE_COUNTRYCODE
        - EMAIL_ADDRESS
        - UNIQUE_ID
        - DATE
        - STRING
        - PROVIDER_ID
    MappedInputFields:
      type: array
      items:
        $ref: '#/components/schemas/SchemaInputAttribute'
      minItems: 2
      maxItems: 35
      x-insertionOrder: false
    Hashed:
      type: boolean
    SchemaInputAttribute:
      type: object
      properties:
        FieldName:
          $ref: '#/components/schemas/AttributeName'
        Type:
          $ref: '#/components/schemas/SchemaAttributeType'
        SubType:
          type: string
          description: The subtype of the Attribute. Would be required only when type is PROVIDER_ID
        GroupName:
          $ref: '#/components/schemas/AttributeName'
        MatchKey:
          $ref: '#/components/schemas/AttributeName'
        Hashed:
          $ref: '#/components/schemas/Hashed'
      required:
        - FieldName
        - Type
      additionalProperties: false
    HasWorkflows:
      description: The boolean value that indicates whether or not a SchemaMapping has MatchingWorkflows that are associated with
      type: boolean
    SchemaMapping:
      type: object
      properties:
        SchemaName:
          description: The name of the SchemaMapping
          $ref: '#/components/schemas/EntityName'
        Description:
          description: The description of the SchemaMapping
          $ref: '#/components/schemas/Description'
        MappedInputFields:
          description: The SchemaMapping attributes input
          $ref: '#/components/schemas/MappedInputFields'
        Tags:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        SchemaArn:
          $ref: '#/components/schemas/SchemaMappingArn'
        CreatedAt:
          $ref: '#/components/schemas/CreatedAt'
        UpdatedAt:
          $ref: '#/components/schemas/UpdatedAt'
        HasWorkflows:
          $ref: '#/components/schemas/HasWorkflows'
      required:
        - SchemaName
        - MappedInputFields
      x-stackql-resource-name: schema_mapping
      description: SchemaMapping defined in AWS Entity Resolution service
      x-type-name: AWS::EntityResolution::SchemaMapping
      x-stackql-primary-identifier:
        - SchemaName
      x-create-only-properties:
        - SchemaName
      x-read-only-properties:
        - SchemaArn
        - CreatedAt
        - UpdatedAt
        - HasWorkflows
      x-required-properties:
        - SchemaName
        - MappedInputFields
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - entityresolution:TagResource
          - entityresolution:UntagResource
          - entityresolution:ListTagsForResource
      x-required-permissions:
        create:
          - entityresolution:CreateSchemaMapping
          - entityresolution:GetSchemaMapping
          - entityresolution:TagResource
        read:
          - entityresolution:GetSchemaMapping
          - entityresolution:ListTagsForResource
        delete:
          - entityresolution:DeleteSchemaMapping
          - entityresolution:GetSchemaMapping
        update:
          - entityresolution:GetSchemaMapping
          - entityresolution:UpdateSchemaMapping
          - entityresolution:ListTagsForResource
          - entityresolution:TagResource
          - entityresolution:UntagResource
        list:
          - entityresolution:ListSchemaMappings
    CreateIdMappingWorkflowRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              description: The description of the IdMappingWorkflow
              $ref: '#/components/schemas/Description'
            InputSourceConfig:
              minItems: 1
              maxItems: 20
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/IdMappingWorkflowInputSource'
            IdMappingTechniques:
              $ref: '#/components/schemas/IdMappingTechniques'
            WorkflowName:
              description: The name of the IdMappingWorkflow
              $ref: '#/components/schemas/EntityName'
            CreatedAt:
              $ref: '#/components/schemas/CreatedAt'
            OutputSourceConfig:
              minItems: 1
              maxItems: 1
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/IdMappingWorkflowOutputSource'
            WorkflowArn:
              $ref: '#/components/schemas/IdMappingWorkflowArn'
            UpdatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            RoleArn:
              pattern: ^arn:(aws|aws-us-gov|aws-cn):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
              type: string
            Tags:
              minItems: 0
              maxItems: 200
              uniqueItems: true
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateIdMappingWorkflowRequest
      type: object
      required: []
    CreateIdNamespaceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IdNamespaceName:
              $ref: '#/components/schemas/EntityName'
            Description:
              type: string
              minLength: 0
              maxLength: 255
            InputSourceConfig:
              type: array
              x-insertionOrder: false
              minItems: 0
              maxItems: 20
              items:
                $ref: '#/components/schemas/IdNamespaceInputSource'
            IdMappingWorkflowProperties:
              type: array
              x-insertionOrder: false
              minItems: 1
              maxItems: 1
              items:
                $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowProperties'
            Type:
              type: string
              enum:
                - SOURCE
                - TARGET
            RoleArn:
              type: string
              pattern: ^arn:(aws|aws-us-gov|aws-cn):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
              minLength: 32
              maxLength: 512
            IdNamespaceArn:
              description: The arn associated with the IdNamespace
              type: string
              pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(idnamespace/[a-zA-Z_0-9-]{1,255})$
            CreatedAt:
              description: The date and time when the IdNamespace was created
              type: string
            UpdatedAt:
              description: The date and time when the IdNamespace was updated
              type: string
            Tags:
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateIdNamespaceRequest
      type: object
      required: []
    CreateMatchingWorkflowRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            WorkflowName:
              description: The name of the MatchingWorkflow
              $ref: '#/components/schemas/EntityName'
            Description:
              description: The description of the MatchingWorkflow
              $ref: '#/components/schemas/Description'
            InputSourceConfig:
              type: array
              x-insertionOrder: false
              minItems: 1
              maxItems: 20
              items:
                $ref: '#/components/schemas/InputSource'
            OutputSourceConfig:
              type: array
              x-insertionOrder: false
              minItems: 1
              maxItems: 1
              items:
                $ref: '#/components/schemas/OutputSource'
            ResolutionTechniques:
              $ref: '#/components/schemas/ResolutionTechniques'
            RoleArn:
              type: string
              pattern: ^arn:(aws|aws-us-gov|aws-cn):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
            Tags:
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
            WorkflowArn:
              $ref: '#/components/schemas/MatchingWorkflowArn'
            CreatedAt:
              $ref: '#/components/schemas/CreatedAt'
            UpdatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            IncrementalRunConfig:
              $ref: '#/components/schemas/IncrementalRunConfig'
          x-stackQL-stringOnly: true
      x-title: CreateMatchingWorkflowRequest
      type: object
      required: []
    CreatePolicyStatementRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              $ref: '#/components/schemas/VeniceGlobalArn'
            StatementId:
              $ref: '#/components/schemas/StatementId'
            Effect:
              $ref: '#/components/schemas/StatementEffect'
            Action:
              $ref: '#/components/schemas/StatementActionList'
            Principal:
              $ref: '#/components/schemas/StatementPrincipalList'
            Condition:
              $ref: '#/components/schemas/StatementCondition'
          x-stackQL-stringOnly: true
      x-title: CreatePolicyStatementRequest
      type: object
      required: []
    CreateSchemaMappingRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            SchemaName:
              description: The name of the SchemaMapping
              $ref: '#/components/schemas/EntityName'
            Description:
              description: The description of the SchemaMapping
              $ref: '#/components/schemas/Description'
            MappedInputFields:
              description: The SchemaMapping attributes input
              $ref: '#/components/schemas/MappedInputFields'
            Tags:
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
            SchemaArn:
              $ref: '#/components/schemas/SchemaMappingArn'
            CreatedAt:
              $ref: '#/components/schemas/CreatedAt'
            UpdatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            HasWorkflows:
              $ref: '#/components/schemas/HasWorkflows'
          x-stackQL-stringOnly: true
      x-title: CreateSchemaMappingRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    id_mapping_workflows:
      name: id_mapping_workflows
      id: aws.entityresolution.id_mapping_workflows
      x-cfn-schema-name: IdMappingWorkflow
      x-cfn-type-name: AWS::EntityResolution::IdMappingWorkflow
      x-identifiers:
        - WorkflowName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__IdMappingWorkflow&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::IdMappingWorkflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::IdMappingWorkflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::IdMappingWorkflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/id_mapping_workflows/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/id_mapping_workflows/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/id_mapping_workflows/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.InputSourceConfig') as input_source_config,
              JSON_EXTRACT(Properties, '$.IdMappingTechniques') as id_mapping_techniques,
              JSON_EXTRACT(Properties, '$.WorkflowName') as workflow_name,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.OutputSourceConfig') as output_source_config,
              JSON_EXTRACT(Properties, '$.WorkflowArn') as workflow_arn,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
              AND data__Identifier = '<WorkflowName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.InputSourceConfig') as input_source_config,
                JSON_EXTRACT(detail.Properties, '$.IdMappingTechniques') as id_mapping_techniques,
                JSON_EXTRACT(detail.Properties, '$.WorkflowName') as workflow_name,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.OutputSourceConfig') as output_source_config,
                JSON_EXTRACT(detail.Properties, '$.WorkflowArn') as workflow_arn,
                JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
                AND detail.data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'InputSourceConfig') as input_source_config,
                  json_extract_path_text(Properties, 'IdMappingTechniques') as id_mapping_techniques,
                  json_extract_path_text(Properties, 'WorkflowName') as workflow_name,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'OutputSourceConfig') as output_source_config,
                  json_extract_path_text(Properties, 'WorkflowArn') as workflow_arn,
                  json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
                  AND data__Identifier = '<WorkflowName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'InputSourceConfig') as input_source_config,
                    json_extract_path_text(detail.Properties, 'IdMappingTechniques') as id_mapping_techniques,
                    json_extract_path_text(detail.Properties, 'WorkflowName') as workflow_name,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'OutputSourceConfig') as output_source_config,
                    json_extract_path_text(detail.Properties, 'WorkflowArn') as workflow_arn,
                    json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
                    AND detail.data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
                    AND listing.region = 'us-east-1'
    id_mapping_workflows_list_only:
      name: id_mapping_workflows_list_only
      id: aws.entityresolution.id_mapping_workflows_list_only
      x-cfn-schema-name: IdMappingWorkflow
      x-cfn-type-name: AWS::EntityResolution::IdMappingWorkflow
      x-identifiers:
        - WorkflowName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkflowName') as workflow_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'WorkflowName') as workflow_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
                AND region = 'us-east-1'
    id_mapping_workflow_tags:
      name: id_mapping_workflow_tags
      id: aws.entityresolution.id_mapping_workflow_tags
      x-cfn-schema-name: IdMappingWorkflow
      x-cfn-type-name: AWS::EntityResolution::IdMappingWorkflow
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.InputSourceConfig') as input_source_config,
              JSON_EXTRACT(detail.Properties, '$.IdMappingTechniques') as id_mapping_techniques,
              JSON_EXTRACT(detail.Properties, '$.WorkflowName') as workflow_name,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.OutputSourceConfig') as output_source_config,
              JSON_EXTRACT(detail.Properties, '$.WorkflowArn') as workflow_arn,
              JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
              AND detail.data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'InputSourceConfig') as input_source_config,
                json_extract_path_text(detail.Properties, 'IdMappingTechniques') as id_mapping_techniques,
                json_extract_path_text(detail.Properties, 'WorkflowName') as workflow_name,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'OutputSourceConfig') as output_source_config,
                json_extract_path_text(detail.Properties, 'WorkflowArn') as workflow_arn,
                json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(detail.Properties, 'RoleArn') as role_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
                AND detail.data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
                AND listing.region = 'us-east-1'
    id_namespaces:
      name: id_namespaces
      id: aws.entityresolution.id_namespaces
      x-cfn-schema-name: IdNamespace
      x-cfn-type-name: AWS::EntityResolution::IdNamespace
      x-identifiers:
        - IdNamespaceName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__IdNamespace&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::IdNamespace"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::IdNamespace"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::IdNamespace"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/id_namespaces/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/id_namespaces/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/id_namespaces/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IdNamespaceName') as id_namespace_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.InputSourceConfig') as input_source_config,
              JSON_EXTRACT(Properties, '$.IdMappingWorkflowProperties') as id_mapping_workflow_properties,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.IdNamespaceArn') as id_namespace_arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::IdNamespace'
              AND data__Identifier = '<IdNamespaceName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IdNamespaceName') as id_namespace_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.InputSourceConfig') as input_source_config,
                JSON_EXTRACT(detail.Properties, '$.IdMappingWorkflowProperties') as id_mapping_workflow_properties,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.IdNamespaceArn') as id_namespace_arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EntityResolution::IdNamespace'
                AND detail.data__TypeName = 'AWS::EntityResolution::IdNamespace'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IdNamespaceName') as id_namespace_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'InputSourceConfig') as input_source_config,
                  json_extract_path_text(Properties, 'IdMappingWorkflowProperties') as id_mapping_workflow_properties,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'IdNamespaceArn') as id_namespace_arn,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::IdNamespace'
                  AND data__Identifier = '<IdNamespaceName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IdNamespaceName') as id_namespace_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'InputSourceConfig') as input_source_config,
                    json_extract_path_text(detail.Properties, 'IdMappingWorkflowProperties') as id_mapping_workflow_properties,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'IdNamespaceArn') as id_namespace_arn,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EntityResolution::IdNamespace'
                    AND detail.data__TypeName = 'AWS::EntityResolution::IdNamespace'
                    AND listing.region = 'us-east-1'
    id_namespaces_list_only:
      name: id_namespaces_list_only
      id: aws.entityresolution.id_namespaces_list_only
      x-cfn-schema-name: IdNamespace
      x-cfn-type-name: AWS::EntityResolution::IdNamespace
      x-identifiers:
        - IdNamespaceName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IdNamespaceName') as id_namespace_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::IdNamespace'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IdNamespaceName') as id_namespace_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::IdNamespace'
                AND region = 'us-east-1'
    id_namespace_tags:
      name: id_namespace_tags
      id: aws.entityresolution.id_namespace_tags
      x-cfn-schema-name: IdNamespace
      x-cfn-type-name: AWS::EntityResolution::IdNamespace
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.IdNamespaceName') as id_namespace_name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.InputSourceConfig') as input_source_config,
              JSON_EXTRACT(detail.Properties, '$.IdMappingWorkflowProperties') as id_mapping_workflow_properties,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(detail.Properties, '$.IdNamespaceArn') as id_namespace_arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EntityResolution::IdNamespace'
              AND detail.data__TypeName = 'AWS::EntityResolution::IdNamespace'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'IdNamespaceName') as id_namespace_name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'InputSourceConfig') as input_source_config,
                json_extract_path_text(detail.Properties, 'IdMappingWorkflowProperties') as id_mapping_workflow_properties,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                json_extract_path_text(detail.Properties, 'IdNamespaceArn') as id_namespace_arn,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EntityResolution::IdNamespace'
                AND detail.data__TypeName = 'AWS::EntityResolution::IdNamespace'
                AND listing.region = 'us-east-1'
    matching_workflows:
      name: matching_workflows
      id: aws.entityresolution.matching_workflows
      x-cfn-schema-name: MatchingWorkflow
      x-cfn-type-name: AWS::EntityResolution::MatchingWorkflow
      x-identifiers:
        - WorkflowName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__MatchingWorkflow&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::MatchingWorkflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::MatchingWorkflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::MatchingWorkflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/matching_workflows/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/matching_workflows/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/matching_workflows/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.WorkflowName') as workflow_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.InputSourceConfig') as input_source_config,
              JSON_EXTRACT(Properties, '$.OutputSourceConfig') as output_source_config,
              JSON_EXTRACT(Properties, '$.ResolutionTechniques') as resolution_techniques,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.WorkflowArn') as workflow_arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.IncrementalRunConfig') as incremental_run_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
              AND data__Identifier = '<WorkflowName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.WorkflowName') as workflow_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.InputSourceConfig') as input_source_config,
                JSON_EXTRACT(detail.Properties, '$.OutputSourceConfig') as output_source_config,
                JSON_EXTRACT(detail.Properties, '$.ResolutionTechniques') as resolution_techniques,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.WorkflowArn') as workflow_arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
                JSON_EXTRACT(detail.Properties, '$.IncrementalRunConfig') as incremental_run_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
                AND detail.data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'WorkflowName') as workflow_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'InputSourceConfig') as input_source_config,
                  json_extract_path_text(Properties, 'OutputSourceConfig') as output_source_config,
                  json_extract_path_text(Properties, 'ResolutionTechniques') as resolution_techniques,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'WorkflowArn') as workflow_arn,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                  json_extract_path_text(Properties, 'IncrementalRunConfig') as incremental_run_config
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
                  AND data__Identifier = '<WorkflowName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'WorkflowName') as workflow_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'InputSourceConfig') as input_source_config,
                    json_extract_path_text(detail.Properties, 'OutputSourceConfig') as output_source_config,
                    json_extract_path_text(detail.Properties, 'ResolutionTechniques') as resolution_techniques,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'WorkflowArn') as workflow_arn,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                    json_extract_path_text(detail.Properties, 'IncrementalRunConfig') as incremental_run_config
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
                    AND detail.data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
                    AND listing.region = 'us-east-1'
    matching_workflows_list_only:
      name: matching_workflows_list_only
      id: aws.entityresolution.matching_workflows_list_only
      x-cfn-schema-name: MatchingWorkflow
      x-cfn-type-name: AWS::EntityResolution::MatchingWorkflow
      x-identifiers:
        - WorkflowName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkflowName') as workflow_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'WorkflowName') as workflow_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
                AND region = 'us-east-1'
    matching_workflow_tags:
      name: matching_workflow_tags
      id: aws.entityresolution.matching_workflow_tags
      x-cfn-schema-name: MatchingWorkflow
      x-cfn-type-name: AWS::EntityResolution::MatchingWorkflow
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.WorkflowName') as workflow_name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.InputSourceConfig') as input_source_config,
              JSON_EXTRACT(detail.Properties, '$.OutputSourceConfig') as output_source_config,
              JSON_EXTRACT(detail.Properties, '$.ResolutionTechniques') as resolution_techniques,
              JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(detail.Properties, '$.WorkflowArn') as workflow_arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(detail.Properties, '$.IncrementalRunConfig') as incremental_run_config
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
              AND detail.data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'WorkflowName') as workflow_name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'InputSourceConfig') as input_source_config,
                json_extract_path_text(detail.Properties, 'OutputSourceConfig') as output_source_config,
                json_extract_path_text(detail.Properties, 'ResolutionTechniques') as resolution_techniques,
                json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                json_extract_path_text(detail.Properties, 'WorkflowArn') as workflow_arn,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(detail.Properties, 'IncrementalRunConfig') as incremental_run_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
                AND detail.data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
                AND listing.region = 'us-east-1'
    policy_statements:
      name: policy_statements
      id: aws.entityresolution.policy_statements
      x-cfn-schema-name: PolicyStatement
      x-cfn-type-name: AWS::EntityResolution::PolicyStatement
      x-identifiers:
        - Arn
        - StatementId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PolicyStatement&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::PolicyStatement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::PolicyStatement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::PolicyStatement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/policy_statements/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/policy_statements/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/policy_statements/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.StatementId') as statement_id,
              JSON_EXTRACT(Properties, '$.Effect') as effect,
              JSON_EXTRACT(Properties, '$.Action') as action,
              JSON_EXTRACT(Properties, '$.Principal') as principal,
              JSON_EXTRACT(Properties, '$.Condition') as condition
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::PolicyStatement'
              AND data__Identifier = '<Arn>|<StatementId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.StatementId') as statement_id,
                JSON_EXTRACT(detail.Properties, '$.Effect') as effect,
                JSON_EXTRACT(detail.Properties, '$.Action') as action,
                JSON_EXTRACT(detail.Properties, '$.Principal') as principal,
                JSON_EXTRACT(detail.Properties, '$.Condition') as condition
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EntityResolution::PolicyStatement'
                AND detail.data__TypeName = 'AWS::EntityResolution::PolicyStatement'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'StatementId') as statement_id,
                  json_extract_path_text(Properties, 'Effect') as effect,
                  json_extract_path_text(Properties, 'Action') as action,
                  json_extract_path_text(Properties, 'Principal') as principal,
                  json_extract_path_text(Properties, 'Condition') as condition
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::PolicyStatement'
                  AND data__Identifier = '<Arn>|<StatementId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'StatementId') as statement_id,
                    json_extract_path_text(detail.Properties, 'Effect') as effect,
                    json_extract_path_text(detail.Properties, 'Action') as action,
                    json_extract_path_text(detail.Properties, 'Principal') as principal,
                    json_extract_path_text(detail.Properties, 'Condition') as condition
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EntityResolution::PolicyStatement'
                    AND detail.data__TypeName = 'AWS::EntityResolution::PolicyStatement'
                    AND listing.region = 'us-east-1'
    policy_statements_list_only:
      name: policy_statements_list_only
      id: aws.entityresolution.policy_statements_list_only
      x-cfn-schema-name: PolicyStatement
      x-cfn-type-name: AWS::EntityResolution::PolicyStatement
      x-identifiers:
        - Arn
        - StatementId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.StatementId') as statement_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::PolicyStatement'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'StatementId') as statement_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::PolicyStatement'
                AND region = 'us-east-1'
    schema_mappings:
      name: schema_mappings
      id: aws.entityresolution.schema_mappings
      x-cfn-schema-name: SchemaMapping
      x-cfn-type-name: AWS::EntityResolution::SchemaMapping
      x-identifiers:
        - SchemaName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SchemaMapping&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::SchemaMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::SchemaMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EntityResolution::SchemaMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/schema_mappings/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/schema_mappings/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/schema_mappings/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SchemaName') as schema_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.MappedInputFields') as mapped_input_fields,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SchemaArn') as schema_arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.HasWorkflows') as has_workflows
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::SchemaMapping'
              AND data__Identifier = '<SchemaName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.SchemaName') as schema_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.MappedInputFields') as mapped_input_fields,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.SchemaArn') as schema_arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
                JSON_EXTRACT(detail.Properties, '$.HasWorkflows') as has_workflows
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EntityResolution::SchemaMapping'
                AND detail.data__TypeName = 'AWS::EntityResolution::SchemaMapping'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'SchemaName') as schema_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'MappedInputFields') as mapped_input_fields,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'SchemaArn') as schema_arn,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                  json_extract_path_text(Properties, 'HasWorkflows') as has_workflows
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::SchemaMapping'
                  AND data__Identifier = '<SchemaName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'SchemaName') as schema_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'MappedInputFields') as mapped_input_fields,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'SchemaArn') as schema_arn,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                    json_extract_path_text(detail.Properties, 'HasWorkflows') as has_workflows
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EntityResolution::SchemaMapping'
                    AND detail.data__TypeName = 'AWS::EntityResolution::SchemaMapping'
                    AND listing.region = 'us-east-1'
    schema_mappings_list_only:
      name: schema_mappings_list_only
      id: aws.entityresolution.schema_mappings_list_only
      x-cfn-schema-name: SchemaMapping
      x-cfn-type-name: AWS::EntityResolution::SchemaMapping
      x-identifiers:
        - SchemaName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SchemaName') as schema_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::SchemaMapping'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SchemaName') as schema_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::SchemaMapping'
                AND region = 'us-east-1'
    schema_mapping_tags:
      name: schema_mapping_tags
      id: aws.entityresolution.schema_mapping_tags
      x-cfn-schema-name: SchemaMapping
      x-cfn-type-name: AWS::EntityResolution::SchemaMapping
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.SchemaName') as schema_name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.MappedInputFields') as mapped_input_fields,
              JSON_EXTRACT(detail.Properties, '$.SchemaArn') as schema_arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(detail.Properties, '$.HasWorkflows') as has_workflows
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EntityResolution::SchemaMapping'
              AND detail.data__TypeName = 'AWS::EntityResolution::SchemaMapping'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'SchemaName') as schema_name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'MappedInputFields') as mapped_input_fields,
                json_extract_path_text(detail.Properties, 'SchemaArn') as schema_arn,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(detail.Properties, 'HasWorkflows') as has_workflows
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EntityResolution::SchemaMapping'
                AND detail.data__TypeName = 'AWS::EntityResolution::SchemaMapping'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__IdMappingWorkflow&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIdMappingWorkflow
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIdMappingWorkflowRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__IdNamespace&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIdNamespace
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIdNamespaceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__MatchingWorkflow&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateMatchingWorkflow
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateMatchingWorkflowRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PolicyStatement&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePolicyStatement
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePolicyStatementRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SchemaMapping&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSchemaMapping
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSchemaMappingRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
