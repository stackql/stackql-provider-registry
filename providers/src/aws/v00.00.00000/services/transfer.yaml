openapi: 3.0.0
info:
  title: Transfer
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    DeleteSshPublicKeyRequest:
      type: object
      required:
        - ServerId
        - SshPublicKeyId
        - UserName
      title: DeleteSshPublicKeyRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        SshPublicKeyId:
          $ref: '#/components/schemas/SshPublicKeyId'
        UserName:
          $ref: '#/components/schemas/UserName'
    ImportSshPublicKeyRequest:
      type: object
      required:
        - ServerId
        - SshPublicKeyBody
        - UserName
      title: ImportSshPublicKeyRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        SshPublicKeyBody:
          $ref: '#/components/schemas/SshPublicKeyBody'
        UserName:
          $ref: '#/components/schemas/UserName'
    ImportSshPublicKeyResponse:
      type: object
      required:
        - ServerId
        - SshPublicKeyId
        - UserName
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        SshPublicKeyId:
          $ref: '#/components/schemas/SshPublicKeyId'
        UserName:
          $ref: '#/components/schemas/UserName'
      description: Identifies the user, the server they belong to, and the identifier of the SSH public key associated with that user. A user can have more than one key on each server that they are associated with.
    InternalServiceError: {}
    InvalidRequestException: {}
    ResourceExistsException: {}
    ResourceNotFoundException: {}
    ServerId:
      type: string
      pattern: ^s-([0-9a-f]{17})$
      minLength: 19
      maxLength: 19
    ServiceUnavailableException: {}
    SshPublicKeyBody:
      type: string
      maxLength: 2048
    SshPublicKeyId:
      type: string
      pattern: ^key-[0-9a-f]{17}$
      minLength: 21
      maxLength: 21
    StartServerRequest:
      type: object
      required:
        - ServerId
      title: StartServerRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
    StopServerRequest:
      type: object
      title: StopServerRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
    ThrottlingException: {}
    UserName:
      type: string
      pattern: ^[\w][\w@.-]{2,99}$
      minLength: 3
      maxLength: 100
    Tag:
      description: Creates a key-value pair for a specific resource.
      type: object
      properties:
        Key:
          type: string
          description: The name assigned to the tag that you create.
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: Contains one or more values that you assigned to the key name you create.
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Agreement:
      type: object
      properties:
        Description:
          description: A textual description for the agreement.
          type: string
          pattern: ^[\u0021-\u007E]+$
          minLength: 1
          maxLength: 200
        ServerId:
          description: A unique identifier for the server.
          type: string
          pattern: ^s-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        LocalProfileId:
          description: A unique identifier for the local profile.
          type: string
          pattern: ^p-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        PartnerProfileId:
          description: A unique identifier for the partner profile.
          type: string
          pattern: ^p-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        BaseDirectory:
          description: Specifies the base directory for the agreement.
          type: string
          pattern: ^(|/.*)$
          maxLength: 1024
        AccessRole:
          description: Specifies the access role for the agreement.
          type: string
          pattern: arn:.*role/.*
          minLength: 20
          maxLength: 2048
        Status:
          description: Specifies the status of the agreement.
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        Tags:
          description: Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        AgreementId:
          description: A unique identifier for the agreement.
          type: string
          pattern: ^a-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the agreement.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
      required:
        - ServerId
        - LocalProfileId
        - PartnerProfileId
        - BaseDirectory
        - AccessRole
      x-stackql-resource-name: agreement
      description: Resource Type definition for AWS::Transfer::Agreement
      x-type-name: AWS::Transfer::Agreement
      x-stackql-primary-identifier:
        - AgreementId
        - ServerId
      x-create-only-properties:
        - ServerId
      x-read-only-properties:
        - AgreementId
        - Arn
      x-required-properties:
        - ServerId
        - LocalProfileId
        - PartnerProfileId
        - BaseDirectory
        - AccessRole
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - transfer:CreateAgreement
          - transfer:TagResource
          - iam:PassRole
        read:
          - transfer:DescribeAgreement
        update:
          - transfer:UpdateAgreement
          - transfer:UnTagResource
          - transfer:TagResource
          - iam:PassRole
        delete:
          - transfer:DeleteAgreement
        list:
          - transfer:ListAgreements
    Certificate:
      type: object
      properties:
        Usage:
          description: Specifies the usage type for the certificate.
          type: string
          enum:
            - SIGNING
            - ENCRYPTION
            - TLS
        Certificate:
          description: Specifies the certificate body to be imported.
          type: string
          pattern: ^[\t\n\r\u0020-\u00FF]+$
          minLength: 1
          maxLength: 16384
        CertificateChain:
          description: Specifies the certificate chain to be imported.
          type: string
          pattern: ^[\t\n\r\u0020-\u00FF]+$
          minLength: 1
          maxLength: 2097152
        PrivateKey:
          description: Specifies the private key for the certificate.
          type: string
          pattern: ^[\t\n\r\u0020-\u00FF]+$
          minLength: 1
          maxLength: 16384
        ActiveDate:
          description: Specifies the active date for the certificate.
          type: string
        InactiveDate:
          description: Specifies the inactive date for the certificate.
          type: string
        Description:
          description: A textual description for the certificate.
          type: string
          pattern: ^[\u0021-\u007E]+$
          minLength: 1
          maxLength: 200
        Tags:
          description: Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the agreement.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
        CertificateId:
          description: A unique identifier for the certificate.
          type: string
          pattern: ^cert-([0-9a-f]{17})$
          minLength: 22
          maxLength: 22
        Status:
          description: A status description for the certificate.
          type: string
          enum:
            - ACTIVE
            - PENDING
            - INACTIVE
        Type:
          description: Describing the type of certificate. With or without a private key.
          type: string
          enum:
            - CERTIFICATE
            - CERTIFICATE_WITH_PRIVATE_KEY
        Serial:
          description: Specifies Certificate's serial.
          type: string
          pattern: ^[0-9a-fA-F{}:?]*$
          minLength: 0
          maxLength: 48
        NotBeforeDate:
          description: Specifies the not before date for the certificate.
          type: string
        NotAfterDate:
          description: Specifies the not after date for the certificate.
          type: string
      required:
        - Certificate
        - Usage
      x-stackql-resource-name: certificate
      description: Resource Type definition for AWS::Transfer::Certificate
      x-type-name: AWS::Transfer::Certificate
      x-stackql-primary-identifier:
        - CertificateId
      x-create-only-properties:
        - Certificate
        - CertificateChain
        - PrivateKey
      x-write-only-properties:
        - PrivateKey
      x-read-only-properties:
        - Arn
        - CertificateId
        - Status
        - Type
        - Serial
        - NotAfterDate
        - NotBeforeDate
      x-required-properties:
        - Certificate
        - Usage
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - transfer:ImportCertificate
          - transfer:TagResource
        read:
          - transfer:DescribeCertificate
        update:
          - transfer:UpdateCertificate
          - transfer:UnTagResource
          - transfer:TagResource
        delete:
          - transfer:DeleteCertificate
        list:
          - transfer:ListCertificates
    SftpConnectorTrustedHostKey:
      description: The public host key for the external server to which you are connecting.
      type: string
      minLength: 1
      maxLength: 2048
    Connector:
      type: object
      properties:
        AccessRole:
          description: Specifies the access role for the connector.
          type: string
          pattern: arn:.*role/.*
          minLength: 20
          maxLength: 2048
        As2Config:
          description: Configuration for an AS2 connector.
          type: object
          properties:
            LocalProfileId:
              type: string
              description: A unique identifier for the local profile.
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            PartnerProfileId:
              type: string
              description: A unique identifier for the partner profile.
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            MessageSubject:
              type: string
              description: The message subject for this AS2 connector configuration.
              pattern: ^[\u0020-\u007E\t]+$
              minLength: 1
              maxLength: 1024
            Compression:
              type: string
              description: Compression setting for this AS2 connector configuration.
              enum:
                - ZLIB
                - DISABLED
            EncryptionAlgorithm:
              type: string
              description: Encryption algorithm for this AS2 connector configuration.
              enum:
                - AES128_CBC
                - AES192_CBC
                - AES256_CBC
                - NONE
                - DES_EDE3_CBC
            SigningAlgorithm:
              type: string
              description: Signing algorithm for this AS2 connector configuration.
              enum:
                - SHA256
                - SHA384
                - SHA512
                - SHA1
                - NONE
            MdnSigningAlgorithm:
              type: string
              description: MDN Signing algorithm for this AS2 connector configuration.
              enum:
                - SHA256
                - SHA384
                - SHA512
                - SHA1
                - NONE
                - DEFAULT
            MdnResponse:
              type: string
              description: MDN Response setting for this AS2 connector configuration.
              enum:
                - SYNC
                - NONE
            BasicAuthSecretId:
              type: string
              description: ARN or name of the secret in AWS Secrets Manager which contains the credentials for Basic authentication. If empty, Basic authentication is disabled for the AS2 connector
              minLength: 0
              maxLength: 2048
          additionalProperties: false
        SftpConfig:
          description: Configuration for an SFTP connector.
          type: object
          properties:
            UserSecretId:
              type: string
              description: ARN or name of the secret in AWS Secrets Manager which contains the SFTP user's private keys or passwords.
              minLength: 1
              maxLength: 2048
            TrustedHostKeys:
              description: List of public host keys, for the external server to which you are connecting.
              type: array
              maxItems: 10
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SftpConnectorTrustedHostKey'
          additionalProperties: false
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the connector.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
        ConnectorId:
          description: A unique identifier for the connector.
          type: string
          pattern: ^c-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        LoggingRole:
          description: Specifies the logging role for the connector.
          type: string
          pattern: arn:.*role/.*
          minLength: 20
          maxLength: 2048
        ServiceManagedEgressIpAddresses:
          description: The list of egress IP addresses of this connector. These IP addresses are assigned automatically when you create the connector.
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$
        Tags:
          description: Key-value pairs that can be used to group and search for connectors. Tags are metadata attached to connectors for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Url:
          description: URL for Connector
          type: string
          maxLength: 255
        SecurityPolicyName:
          description: Security policy for SFTP Connector
          type: string
          pattern: TransferSFTPConnectorSecurityPolicy-[A-Za-z0-9-]+
          maxLength: 50
      required:
        - AccessRole
        - Url
      x-stackql-resource-name: connector
      description: Resource Type definition for AWS::Transfer::Connector
      x-type-name: AWS::Transfer::Connector
      x-stackql-primary-identifier:
        - ConnectorId
      x-read-only-properties:
        - Arn
        - ConnectorId
        - ServiceManagedEgressIpAddresses
      x-required-properties:
        - AccessRole
        - Url
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - transfer:CreateConnector
          - transfer:TagResource
          - iam:PassRole
        read:
          - transfer:DescribeConnector
        update:
          - transfer:UpdateConnector
          - transfer:UnTagResource
          - transfer:TagResource
          - iam:PassRole
        delete:
          - transfer:DeleteConnector
        list:
          - transfer:ListConnectors
    CertificateId:
      description: A unique identifier for the certificate.
      type: string
      pattern: ^cert-([0-9a-f]{17})$
      minLength: 22
      maxLength: 22
    Profile:
      type: object
      properties:
        As2Id:
          description: AS2 identifier agreed with a trading partner.
          type: string
          pattern: ^[\u0020-\u007E\s]*$
          minLength: 1
          maxLength: 128
        ProfileType:
          description: Enum specifying whether the profile is local or associated with a trading partner.
          type: string
          enum:
            - LOCAL
            - PARTNER
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          maxItems: 50
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        CertificateIds:
          description: List of the certificate IDs associated with this profile to be used for encryption and signing of AS2 messages.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/CertificateId'
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the profile.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
        ProfileId:
          description: A unique identifier for the profile
          type: string
          pattern: ^p-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
      required:
        - As2Id
        - ProfileType
      x-stackql-resource-name: profile
      description: Resource Type definition for AWS::Transfer::Profile
      x-type-name: AWS::Transfer::Profile
      x-stackql-primary-identifier:
        - ProfileId
      x-create-only-properties:
        - ProfileType
      x-read-only-properties:
        - Arn
        - ProfileId
      x-required-properties:
        - As2Id
        - ProfileType
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - transfer:CreateProfile
          - transfer:TagResource
        read:
          - transfer:DescribeProfile
        update:
          - transfer:UpdateProfile
          - transfer:UnTagResource
          - transfer:TagResource
        delete:
          - transfer:DeleteProfile
        list:
          - transfer:ListProfiles
    As2Transport:
      type: string
      enum:
        - HTTP
    DirectoryListingOptimization:
      type: string
      description: Indicates whether optimization to directory listing on S3 servers is used. Disabled by default for compatibility.
      enum:
        - ENABLED
        - DISABLED
    Domain:
      type: string
      enum:
        - S3
        - EFS
    EndpointDetails:
      type: object
      properties:
        AddressAllocationIds:
          type: array
          x-insertionOrder: true
          items:
            type: string
        SubnetIds:
          type: array
          x-insertionOrder: true
          items:
            type: string
        VpcEndpointId:
          type: string
          maxLength: 22
          minLength: 22
          pattern: ^vpce-[0-9a-f]{17}$
        VpcId:
          type: string
        SecurityGroupIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 20
            minLength: 11
            pattern: ^sg-[0-9a-f]{8,17}$
      additionalProperties: false
    EndpointType:
      type: string
      enum:
        - PUBLIC
        - VPC
        - VPC_ENDPOINT
    IdentityProviderDetails:
      type: object
      properties:
        Url:
          type: string
          maxLength: 255
          minLength: 0
        InvocationRole:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:.*role/\S+$
        DirectoryId:
          type: string
          maxLength: 12
          minLength: 12
          pattern: ^d-[0-9a-f]{10}$
        Function:
          type: string
          maxLength: 170
          minLength: 1
          pattern: ^arn:[a-z-]+:lambda:.*$
        SftpAuthenticationMethods:
          $ref: '#/components/schemas/SftpAuthenticationMethods'
      additionalProperties: false
    IdentityProviderType:
      type: string
      enum:
        - SERVICE_MANAGED
        - API_GATEWAY
        - AWS_DIRECTORY_SERVICE
        - AWS_LAMBDA
    Protocol:
      type: string
      enum:
        - SFTP
        - FTP
        - FTPS
        - AS2
    ProtocolDetails:
      type: object
      properties:
        PassiveIp:
          type: string
          maxLength: 15
          minLength: 0
        TlsSessionResumptionMode:
          $ref: '#/components/schemas/TlsSessionResumptionMode'
        SetStatOption:
          $ref: '#/components/schemas/SetStatOption'
        As2Transports:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/As2Transport'
          maxItems: 1
          minItems: 1
      additionalProperties: false
    S3StorageOptions:
      type: object
      properties:
        DirectoryListingOptimization:
          $ref: '#/components/schemas/DirectoryListingOptimization'
      additionalProperties: false
    SetStatOption:
      type: string
      enum:
        - DEFAULT
        - ENABLE_NO_OP
    SftpAuthenticationMethods:
      type: string
      enum:
        - PASSWORD
        - PUBLIC_KEY
        - PUBLIC_KEY_OR_PASSWORD
        - PUBLIC_KEY_AND_PASSWORD
    State:
      type: string
      enum:
        - OFFLINE
        - ONLINE
        - STARTING
        - STOPPING
        - START_FAILED
        - STOP_FAILED
    TlsSessionResumptionMode:
      type: string
      enum:
        - DISABLED
        - ENABLED
        - ENFORCED
    WorkflowDetail:
      type: object
      properties:
        WorkflowId:
          type: string
          maxLength: 19
          minLength: 19
          pattern: ^w-([a-z0-9]{17})$
        ExecutionRole:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:.*role/\S+$
      required:
        - ExecutionRole
        - WorkflowId
      additionalProperties: false
    WorkflowDetails:
      type: object
      properties:
        OnUpload:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/WorkflowDetail'
          maxItems: 1
          minItems: 0
        OnPartialUpload:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/WorkflowDetail'
          maxItems: 1
          minItems: 0
      additionalProperties: false
    Server:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 1600
          minLength: 20
          pattern: ^arn:\S+$
        As2ServiceManagedEgressIpAddresses:
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$
          description: The list of egress IP addresses of this server. These IP addresses are only relevant for servers that use the AS2 protocol. They are used for sending asynchronous MDNs. These IP addresses are assigned automatically when you create an AS2 server. Additionally, if you update an existing server and add the AS2 protocol, static IP addresses are assigned as well.
        Certificate:
          type: string
          maxLength: 1600
          minLength: 0
        Domain:
          $ref: '#/components/schemas/Domain'
        EndpointDetails:
          $ref: '#/components/schemas/EndpointDetails'
        EndpointType:
          $ref: '#/components/schemas/EndpointType'
        IdentityProviderDetails:
          $ref: '#/components/schemas/IdentityProviderDetails'
        IdentityProviderType:
          $ref: '#/components/schemas/IdentityProviderType'
        LoggingRole:
          type: string
          maxLength: 2048
          minLength: 0
          pattern: ^(|arn:.*role/\S+)$
        PostAuthenticationLoginBanner:
          type: string
          maxLength: 4096
          minLength: 0
          pattern: ^[\x09-\x0D\x20-\x7E]*$
        PreAuthenticationLoginBanner:
          type: string
          maxLength: 4096
          minLength: 0
          pattern: ^[\x09-\x0D\x20-\x7E]*$
        ProtocolDetails:
          $ref: '#/components/schemas/ProtocolDetails'
        Protocols:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Protocol'
          maxItems: 4
          minItems: 1
        S3StorageOptions:
          $ref: '#/components/schemas/S3StorageOptions'
        SecurityPolicyName:
          type: string
          maxLength: 100
          minLength: 0
          pattern: ^TransferSecurityPolicy-.+$
        ServerId:
          type: string
          maxLength: 19
          minLength: 19
          pattern: ^s-([0-9a-f]{17})$
        State:
          $ref: '#/components/schemas/State'
        StructuredLogDestinations:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 1600
            minLength: 20
            pattern: ^arn:\S+$
          maxItems: 1
          minItems: 0
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 50
          minItems: 1
        WorkflowDetails:
          $ref: '#/components/schemas/WorkflowDetails'
      x-stackql-resource-name: server
      description: Definition of AWS::Transfer::Server Resource Type
      x-type-name: AWS::Transfer::Server
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - ServerId
      x-create-only-properties:
        - Domain
        - IdentityProviderType
      x-conditional-create-only-properties:
        - EndpointDetails
        - EndpointDetails/AddressAllocationIds
      x-write-only-properties:
        - IdentityProviderType
      x-read-only-properties:
        - Arn
        - As2ServiceManagedEgressIpAddresses
        - ServerId
        - State
      x-tagging:
        cloudFormationSystemTags: true
        permissions:
          - transfer:TagResource
          - transfer:UnTagResource
          - transfer:ListTagsForResource
        tagOnCreate: true
        tagProperty: /properties/Tags
        tagUpdatable: true
        taggable: true
      x-required-permissions:
        create:
          - apigateway:GET
          - ds:AuthorizeApplication
          - ds:DescribeDirectories
          - ec2:AssociateAddress
          - ec2:CreateVpcEndpoint
          - ec2:DescribeAddresses
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeVpcEndpoints
          - iam:PassRole
          - logs:CreateLogDelivery
          - logs:DeleteLogDelivery
          - logs:DescribeLogGroups
          - logs:DescribeResourcePolicies
          - logs:GetLogDelivery
          - logs:ListLogDeliveries
          - logs:PutResourcePolicy
          - logs:UpdateLogDelivery
          - transfer:CreateServer
          - transfer:DescribeServer
          - transfer:StartServer
          - transfer:StopServer
          - transfer:TagResource
          - transfer:UpdateServer
        read:
          - ec2:DescribeVpcEndpoints
          - transfer:DescribeServer
        update:
          - apigateway:GET
          - ec2:AssociateAddress
          - ec2:CreateVpcEndpoint
          - ec2:DeleteVpcEndpoints
          - ec2:DescribeAddresses
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeVpcEndpoints
          - ec2:DisassociateAddress
          - ec2:ModifyVpcEndpoint
          - iam:PassRole
          - logs:CreateLogDelivery
          - logs:DeleteLogDelivery
          - logs:DescribeLogGroups
          - logs:DescribeResourcePolicies
          - logs:GetLogDelivery
          - logs:ListLogDeliveries
          - logs:PutResourcePolicy
          - logs:UpdateLogDelivery
          - transfer:DescribeServer
          - transfer:StartServer
          - transfer:StopServer
          - transfer:TagResource
          - transfer:UnTagResource
          - transfer:UpdateServer
        delete:
          - ds:DescribeDirectories
          - ds:UnauthorizeApplication
          - ec2:DeleteVpcEndpoints
          - ec2:DescribeAddresses
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeVpcEndpoints
          - ec2:DisassociateAddress
          - logs:DeleteLogDelivery
          - logs:GetLogDelivery
          - logs:ListLogDeliveries
          - transfer:DeleteServer
        list:
          - transfer:ListServers
    HomeDirectoryMapEntry:
      type: object
      properties:
        Entry:
          type: string
          maxLength: 1024
          minLength: 0
          pattern: ^/.*$
        Target:
          type: string
          maxLength: 1024
          minLength: 0
          pattern: ^/.*$
        Type:
          $ref: '#/components/schemas/MapType'
      required:
        - Entry
        - Target
      additionalProperties: false
    HomeDirectoryType:
      type: string
      enum:
        - PATH
        - LOGICAL
    MapType:
      type: string
      enum:
        - FILE
        - DIRECTORY
    PosixProfile:
      type: object
      properties:
        Uid:
          type: number
          maximum: 4294967295
          minimum: 0
        Gid:
          type: number
          maximum: 4294967295
          minimum: 0
        SecondaryGids:
          type: array
          x-insertionOrder: false
          items:
            type: number
            maximum: 4294967295
            minimum: 0
          maxItems: 16
          minItems: 0
      required:
        - Gid
        - Uid
      additionalProperties: false
    User:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 1600
          minLength: 20
          pattern: ^arn:\S+$
        HomeDirectory:
          type: string
          maxLength: 1024
          minLength: 0
          pattern: ^(|/.*)$
        HomeDirectoryMappings:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/HomeDirectoryMapEntry'
          maxItems: 50000
          minItems: 1
        HomeDirectoryType:
          $ref: '#/components/schemas/HomeDirectoryType'
        Policy:
          type: string
          maxLength: 2048
          minLength: 0
        PosixProfile:
          $ref: '#/components/schemas/PosixProfile'
        Role:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:.*role/\S+$
        ServerId:
          type: string
          maxLength: 19
          minLength: 19
          pattern: ^s-([0-9a-f]{17})$
        SshPublicKeys:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 2048
            minLength: 0
            pattern: ^\s*(ssh|ecdsa)-[a-z0-9-]+[ \t]+(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{1,3})?(={0,3})?)(\s*|[ \t]+[\S \t]*\s*)$
          description: This represents the SSH User Public Keys for CloudFormation resource
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 50
          minItems: 1
        UserName:
          type: string
          maxLength: 100
          minLength: 3
          pattern: ^[\w][\w@.-]{2,99}$
      required:
        - Role
        - ServerId
        - UserName
      x-stackql-resource-name: user
      description: Definition of AWS::Transfer::User Resource Type
      x-type-name: AWS::Transfer::User
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - ServerId
          - UserName
      x-create-only-properties:
        - ServerId
        - UserName
      x-read-only-properties:
        - Arn
      x-required-properties:
        - Role
        - ServerId
        - UserName
      x-tagging:
        cloudFormationSystemTags: true
        permissions:
          - transfer:TagResource
          - transfer:UnTagResource
          - transfer:ListTagsForResource
        tagOnCreate: true
        tagProperty: /properties/Tags
        tagUpdatable: true
        taggable: true
      x-required-permissions:
        create:
          - iam:PassRole
          - transfer:CreateUser
          - transfer:DescribeUser
          - transfer:ImportSshPublicKey
          - transfer:TagResource
        read:
          - transfer:DescribeUser
        update:
          - iam:PassRole
          - transfer:DeleteSshPublicKey
          - transfer:DescribeUser
          - transfer:ImportSshPublicKey
          - transfer:TagResource
          - transfer:UnTagResource
          - transfer:UpdateUser
        delete:
          - transfer:DeleteUser
        list:
          - transfer:ListUsers
    S3Tag:
      description: Specifies the key-value pair that are assigned to a file during the execution of a Tagging step.
      type: object
      properties:
        Key:
          description: The name assigned to the tag that you create.
          type: string
          minLength: 1
          maxLength: 128
        Value:
          description: The value that corresponds to the key.
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    EfsInputFileLocation:
      description: Specifies the details for an EFS file.
      type: object
      properties:
        FileSystemId:
          description: Specifies the EFS filesystem that contains the file.
          type: string
          pattern: ^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:(access-point/fsap|file-system/fs)-[0-9a-f]{8,40}|fs(ap)?-[0-9a-f]{8,40})$
          minLength: 0
          maxLength: 128
        Path:
          description: The name assigned to the file when it was created in EFS. You use the object path to retrieve the object.
          type: string
          pattern: ^[^\x00]+$
          minLength: 1
          maxLength: 65536
      additionalProperties: false
    S3InputFileLocation:
      description: Specifies the details for a S3 file.
      type: object
      properties:
        Bucket:
          description: Specifies the S3 bucket that contains the file.
          type: string
          pattern: ^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$
          minLength: 3
          maxLength: 63
        Key:
          description: The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
          type: string
          pattern: .*
          minLength: 0
          maxLength: 1024
      additionalProperties: false
    InputFileLocation:
      description: Specifies the location for the file being decrypted. Only applicable for the Decrypt type of workflow steps.
      type: object
      properties:
        S3FileLocation:
          $ref: '#/components/schemas/S3InputFileLocation'
        EfsFileLocation:
          $ref: '#/components/schemas/EfsInputFileLocation'
      additionalProperties: false
    S3FileLocation:
      description: Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.
      type: object
      properties:
        S3FileLocation:
          $ref: '#/components/schemas/S3InputFileLocation'
      additionalProperties: false
    WorkflowStep:
      description: The basic building block of a workflow.
      type: object
      properties:
        CopyStepDetails:
          description: Details for a step that performs a file copy.
          type: object
          properties:
            DestinationFileLocation:
              $ref: '#/components/schemas/S3FileLocation'
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            OverwriteExisting:
              description: A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
              type: string
              enum:
                - 'TRUE'
                - 'FALSE'
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        CustomStepDetails:
          description: Details for a step that invokes a lambda function.
          type: object
          properties:
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            Target:
              description: The ARN for the lambda function that is being called.
              type: string
              pattern: arn:[a-z-]+:lambda:.*$
              minLength: 0
              maxLength: 170
            TimeoutSeconds:
              description: Timeout, in seconds, for the step.
              type: integer
              minimum: 1
              maximum: 1800
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        DecryptStepDetails:
          description: Details for a step that performs a file decryption.
          type: object
          properties:
            DestinationFileLocation:
              $ref: '#/components/schemas/InputFileLocation'
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            Type:
              description: Specifies which encryption method to use.
              type: string
              enum:
                - PGP
            OverwriteExisting:
              description: A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
              type: string
              enum:
                - 'TRUE'
                - 'FALSE'
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          required:
            - DestinationFileLocation
            - Type
          additionalProperties: false
        DeleteStepDetails:
          description: Details for a step that deletes the file.
          type: object
          properties:
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        TagStepDetails:
          description: Details for a step that creates one or more tags.
          type: object
          properties:
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            Tags:
              description: Array that contains from 1 to 10 key/value pairs.
              type: array
              maxItems: 10
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/S3Tag'
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        Type:
          type: string
          enum:
            - COPY
            - CUSTOM
            - DECRYPT
            - DELETE
            - TAG
      additionalProperties: false
    Workflow:
      type: object
      properties:
        OnExceptionSteps:
          description: Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.
          type: array
          maxItems: 8
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/WorkflowStep'
        Steps:
          description: Specifies the details for the steps that are in the specified workflow.
          type: array
          maxItems: 8
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/WorkflowStep'
        Tags:
          description: Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Description:
          description: A textual description for the workflow.
          type: string
          pattern: ^[\w\- ]*$
          minLength: 0
          maxLength: 256
        WorkflowId:
          description: A unique identifier for the workflow.
          type: string
          pattern: ^w-([a-z0-9]{17})$
          minLength: 19
          maxLength: 19
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the workflow.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
      required:
        - Steps
      x-stackql-resource-name: workflow
      description: Resource Type definition for AWS::Transfer::Workflow
      x-type-name: AWS::Transfer::Workflow
      x-stackql-primary-identifier:
        - WorkflowId
      x-create-only-properties:
        - Steps
        - OnExceptionSteps
        - Description
      x-read-only-properties:
        - WorkflowId
        - Arn
      x-required-properties:
        - Steps
      x-tagging:
        cloudFormationSystemTags: true
        tagOnCreate: true
        tagProperty: /properties/Tags
        tagUpdatable: true
        taggable: true
      x-required-permissions:
        create:
          - transfer:CreateWorkflow
          - transfer:TagResource
        read:
          - transfer:DescribeWorkflow
        delete:
          - transfer:DeleteWorkflow
        list:
          - transfer:ListWorkflows
        update:
          - transfer:UnTagResource
          - transfer:TagResource
    CreateAgreementRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              description: A textual description for the agreement.
              type: string
              pattern: ^[\u0021-\u007E]+$
              minLength: 1
              maxLength: 200
            ServerId:
              description: A unique identifier for the server.
              type: string
              pattern: ^s-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            LocalProfileId:
              description: A unique identifier for the local profile.
              type: string
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            PartnerProfileId:
              description: A unique identifier for the partner profile.
              type: string
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            BaseDirectory:
              description: Specifies the base directory for the agreement.
              type: string
              pattern: ^(|/.*)$
              maxLength: 1024
            AccessRole:
              description: Specifies the access role for the agreement.
              type: string
              pattern: arn:.*role/.*
              minLength: 20
              maxLength: 2048
            Status:
              description: Specifies the status of the agreement.
              type: string
              enum:
                - ACTIVE
                - INACTIVE
            Tags:
              description: Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            AgreementId:
              description: A unique identifier for the agreement.
              type: string
              pattern: ^a-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            Arn:
              description: Specifies the unique Amazon Resource Name (ARN) for the agreement.
              type: string
              pattern: arn:.*
              minLength: 20
              maxLength: 1600
          x-stackQL-stringOnly: true
      x-title: CreateAgreementRequest
      type: object
      required: []
    CreateCertificateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Usage:
              description: Specifies the usage type for the certificate.
              type: string
              enum:
                - SIGNING
                - ENCRYPTION
                - TLS
            Certificate:
              description: Specifies the certificate body to be imported.
              type: string
              pattern: ^[\t\n\r\u0020-\u00FF]+$
              minLength: 1
              maxLength: 16384
            CertificateChain:
              description: Specifies the certificate chain to be imported.
              type: string
              pattern: ^[\t\n\r\u0020-\u00FF]+$
              minLength: 1
              maxLength: 2097152
            PrivateKey:
              description: Specifies the private key for the certificate.
              type: string
              pattern: ^[\t\n\r\u0020-\u00FF]+$
              minLength: 1
              maxLength: 16384
            ActiveDate:
              description: Specifies the active date for the certificate.
              type: string
            InactiveDate:
              description: Specifies the inactive date for the certificate.
              type: string
            Description:
              description: A textual description for the certificate.
              type: string
              pattern: ^[\u0021-\u007E]+$
              minLength: 1
              maxLength: 200
            Tags:
              description: Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Arn:
              description: Specifies the unique Amazon Resource Name (ARN) for the agreement.
              type: string
              pattern: arn:.*
              minLength: 20
              maxLength: 1600
            CertificateId:
              description: A unique identifier for the certificate.
              type: string
              pattern: ^cert-([0-9a-f]{17})$
              minLength: 22
              maxLength: 22
            Status:
              description: A status description for the certificate.
              type: string
              enum:
                - ACTIVE
                - PENDING
                - INACTIVE
            Type:
              description: Describing the type of certificate. With or without a private key.
              type: string
              enum:
                - CERTIFICATE
                - CERTIFICATE_WITH_PRIVATE_KEY
            Serial:
              description: Specifies Certificate's serial.
              type: string
              pattern: ^[0-9a-fA-F{}:?]*$
              minLength: 0
              maxLength: 48
            NotBeforeDate:
              description: Specifies the not before date for the certificate.
              type: string
            NotAfterDate:
              description: Specifies the not after date for the certificate.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateCertificateRequest
      type: object
      required: []
    CreateConnectorRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccessRole:
              description: Specifies the access role for the connector.
              type: string
              pattern: arn:.*role/.*
              minLength: 20
              maxLength: 2048
            As2Config:
              description: Configuration for an AS2 connector.
              type: object
              properties:
                LocalProfileId:
                  type: string
                  description: A unique identifier for the local profile.
                  pattern: ^p-([0-9a-f]{17})$
                  minLength: 19
                  maxLength: 19
                PartnerProfileId:
                  type: string
                  description: A unique identifier for the partner profile.
                  pattern: ^p-([0-9a-f]{17})$
                  minLength: 19
                  maxLength: 19
                MessageSubject:
                  type: string
                  description: The message subject for this AS2 connector configuration.
                  pattern: ^[\u0020-\u007E\t]+$
                  minLength: 1
                  maxLength: 1024
                Compression:
                  type: string
                  description: Compression setting for this AS2 connector configuration.
                  enum:
                    - ZLIB
                    - DISABLED
                EncryptionAlgorithm:
                  type: string
                  description: Encryption algorithm for this AS2 connector configuration.
                  enum:
                    - AES128_CBC
                    - AES192_CBC
                    - AES256_CBC
                    - NONE
                    - DES_EDE3_CBC
                SigningAlgorithm:
                  type: string
                  description: Signing algorithm for this AS2 connector configuration.
                  enum:
                    - SHA256
                    - SHA384
                    - SHA512
                    - SHA1
                    - NONE
                MdnSigningAlgorithm:
                  type: string
                  description: MDN Signing algorithm for this AS2 connector configuration.
                  enum:
                    - SHA256
                    - SHA384
                    - SHA512
                    - SHA1
                    - NONE
                    - DEFAULT
                MdnResponse:
                  type: string
                  description: MDN Response setting for this AS2 connector configuration.
                  enum:
                    - SYNC
                    - NONE
                BasicAuthSecretId:
                  type: string
                  description: ARN or name of the secret in AWS Secrets Manager which contains the credentials for Basic authentication. If empty, Basic authentication is disabled for the AS2 connector
                  minLength: 0
                  maxLength: 2048
              additionalProperties: false
            SftpConfig:
              description: Configuration for an SFTP connector.
              type: object
              properties:
                UserSecretId:
                  type: string
                  description: ARN or name of the secret in AWS Secrets Manager which contains the SFTP user's private keys or passwords.
                  minLength: 1
                  maxLength: 2048
                TrustedHostKeys:
                  description: List of public host keys, for the external server to which you are connecting.
                  type: array
                  maxItems: 10
                  uniqueItems: false
                  x-insertionOrder: false
                  items:
                    $ref: '#/components/schemas/SftpConnectorTrustedHostKey'
              additionalProperties: false
            Arn:
              description: Specifies the unique Amazon Resource Name (ARN) for the connector.
              type: string
              pattern: arn:.*
              minLength: 20
              maxLength: 1600
            ConnectorId:
              description: A unique identifier for the connector.
              type: string
              pattern: ^c-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            LoggingRole:
              description: Specifies the logging role for the connector.
              type: string
              pattern: arn:.*role/.*
              minLength: 20
              maxLength: 2048
            ServiceManagedEgressIpAddresses:
              description: The list of egress IP addresses of this connector. These IP addresses are assigned automatically when you create the connector.
              type: array
              x-insertionOrder: false
              items:
                type: string
                pattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$
            Tags:
              description: Key-value pairs that can be used to group and search for connectors. Tags are metadata attached to connectors for any purpose.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Url:
              description: URL for Connector
              type: string
              maxLength: 255
            SecurityPolicyName:
              description: Security policy for SFTP Connector
              type: string
              pattern: TransferSFTPConnectorSecurityPolicy-[A-Za-z0-9-]+
              maxLength: 50
          x-stackQL-stringOnly: true
      x-title: CreateConnectorRequest
      type: object
      required: []
    CreateProfileRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            As2Id:
              description: AS2 identifier agreed with a trading partner.
              type: string
              pattern: ^[\u0020-\u007E\s]*$
              minLength: 1
              maxLength: 128
            ProfileType:
              description: Enum specifying whether the profile is local or associated with a trading partner.
              type: string
              enum:
                - LOCAL
                - PARTNER
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              maxItems: 50
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            CertificateIds:
              description: List of the certificate IDs associated with this profile to be used for encryption and signing of AS2 messages.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/CertificateId'
            Arn:
              description: Specifies the unique Amazon Resource Name (ARN) for the profile.
              type: string
              pattern: arn:.*
              minLength: 20
              maxLength: 1600
            ProfileId:
              description: A unique identifier for the profile
              type: string
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
          x-stackQL-stringOnly: true
      x-title: CreateProfileRequest
      type: object
      required: []
    CreateServerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 1600
              minLength: 20
              pattern: ^arn:\S+$
            As2ServiceManagedEgressIpAddresses:
              type: array
              x-insertionOrder: false
              items:
                type: string
                pattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$
              description: The list of egress IP addresses of this server. These IP addresses are only relevant for servers that use the AS2 protocol. They are used for sending asynchronous MDNs. These IP addresses are assigned automatically when you create an AS2 server. Additionally, if you update an existing server and add the AS2 protocol, static IP addresses are assigned as well.
            Certificate:
              type: string
              maxLength: 1600
              minLength: 0
            Domain:
              $ref: '#/components/schemas/Domain'
            EndpointDetails:
              $ref: '#/components/schemas/EndpointDetails'
            EndpointType:
              $ref: '#/components/schemas/EndpointType'
            IdentityProviderDetails:
              $ref: '#/components/schemas/IdentityProviderDetails'
            IdentityProviderType:
              $ref: '#/components/schemas/IdentityProviderType'
            LoggingRole:
              type: string
              maxLength: 2048
              minLength: 0
              pattern: ^(|arn:.*role/\S+)$
            PostAuthenticationLoginBanner:
              type: string
              maxLength: 4096
              minLength: 0
              pattern: ^[\x09-\x0D\x20-\x7E]*$
            PreAuthenticationLoginBanner:
              type: string
              maxLength: 4096
              minLength: 0
              pattern: ^[\x09-\x0D\x20-\x7E]*$
            ProtocolDetails:
              $ref: '#/components/schemas/ProtocolDetails'
            Protocols:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Protocol'
              maxItems: 4
              minItems: 1
            S3StorageOptions:
              $ref: '#/components/schemas/S3StorageOptions'
            SecurityPolicyName:
              type: string
              maxLength: 100
              minLength: 0
              pattern: ^TransferSecurityPolicy-.+$
            ServerId:
              type: string
              maxLength: 19
              minLength: 19
              pattern: ^s-([0-9a-f]{17})$
            State:
              $ref: '#/components/schemas/State'
            StructuredLogDestinations:
              type: array
              x-insertionOrder: false
              items:
                type: string
                maxLength: 1600
                minLength: 20
                pattern: ^arn:\S+$
              maxItems: 1
              minItems: 0
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
              maxItems: 50
              minItems: 1
            WorkflowDetails:
              $ref: '#/components/schemas/WorkflowDetails'
          x-stackQL-stringOnly: true
      x-title: CreateServerRequest
      type: object
      required: []
    CreateUserRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 1600
              minLength: 20
              pattern: ^arn:\S+$
            HomeDirectory:
              type: string
              maxLength: 1024
              minLength: 0
              pattern: ^(|/.*)$
            HomeDirectoryMappings:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/HomeDirectoryMapEntry'
              maxItems: 50000
              minItems: 1
            HomeDirectoryType:
              $ref: '#/components/schemas/HomeDirectoryType'
            Policy:
              type: string
              maxLength: 2048
              minLength: 0
            PosixProfile:
              $ref: '#/components/schemas/PosixProfile'
            Role:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:.*role/\S+$
            ServerId:
              type: string
              maxLength: 19
              minLength: 19
              pattern: ^s-([0-9a-f]{17})$
            SshPublicKeys:
              type: array
              x-insertionOrder: false
              items:
                type: string
                maxLength: 2048
                minLength: 0
                pattern: ^\s*(ssh|ecdsa)-[a-z0-9-]+[ \t]+(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{1,3})?(={0,3})?)(\s*|[ \t]+[\S \t]*\s*)$
              description: This represents the SSH User Public Keys for CloudFormation resource
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
              maxItems: 50
              minItems: 1
            UserName:
              type: string
              maxLength: 100
              minLength: 3
              pattern: ^[\w][\w@.-]{2,99}$
          x-stackQL-stringOnly: true
      x-title: CreateUserRequest
      type: object
      required: []
    CreateWorkflowRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            OnExceptionSteps:
              description: Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.
              type: array
              maxItems: 8
              uniqueItems: true
              x-insertionOrder: true
              items:
                $ref: '#/components/schemas/WorkflowStep'
            Steps:
              description: Specifies the details for the steps that are in the specified workflow.
              type: array
              maxItems: 8
              uniqueItems: true
              x-insertionOrder: true
              items:
                $ref: '#/components/schemas/WorkflowStep'
            Tags:
              description: Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Description:
              description: A textual description for the workflow.
              type: string
              pattern: ^[\w\- ]*$
              minLength: 0
              maxLength: 256
            WorkflowId:
              description: A unique identifier for the workflow.
              type: string
              pattern: ^w-([a-z0-9]{17})$
              minLength: 19
              maxLength: 19
            Arn:
              description: Specifies the unique Amazon Resource Name (ARN) for the workflow.
              type: string
              pattern: arn:.*
              minLength: 20
              maxLength: 1600
          x-stackQL-stringOnly: true
      x-title: CreateWorkflowRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    servers:
      name: servers
      x-cfn-schema-name: Server
      x-example-where-clause: WHERE region = 'us-east-1' AND ServerId = '<ServerId>'
      x-type: cloud_control
      methods:
        start_server:
          serviceName: transfer
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.StartServer?__nativeEndpoint=true/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            openAPIDocKey: '200'
        stop_server:
          serviceName: transfer
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.StopServer?__nativeEndpoint=true/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            openAPIDocKey: '200'
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Server&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Server"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Server"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Server"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      id: aws.transfer.servers
      sqlVerbs:
        delete:
          - $ref: '#/components/x-stackQL-resources/servers/methods/delete_resource'
        insert:
          - $ref: '#/components/x-stackQL-resources/servers/methods/create_resource'
        select: []
        update:
          - $ref: '#/components/x-stackQL-resources/servers/methods/update_resource'
      title: servers
      x-cfn-type-name: AWS::Transfer::Server
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.As2ServiceManagedEgressIpAddresses') as as2_service_managed_egress_ip_addresses,
              JSON_EXTRACT(Properties, '$.Certificate') as certificate,
              JSON_EXTRACT(Properties, '$.Domain') as domain,
              JSON_EXTRACT(Properties, '$.EndpointDetails') as endpoint_details,
              JSON_EXTRACT(Properties, '$.EndpointType') as endpoint_type,
              JSON_EXTRACT(Properties, '$.IdentityProviderDetails') as identity_provider_details,
              JSON_EXTRACT(Properties, '$.IdentityProviderType') as identity_provider_type,
              JSON_EXTRACT(Properties, '$.LoggingRole') as logging_role,
              JSON_EXTRACT(Properties, '$.PostAuthenticationLoginBanner') as post_authentication_login_banner,
              JSON_EXTRACT(Properties, '$.PreAuthenticationLoginBanner') as pre_authentication_login_banner,
              JSON_EXTRACT(Properties, '$.ProtocolDetails') as protocol_details,
              JSON_EXTRACT(Properties, '$.Protocols') as protocols,
              JSON_EXTRACT(Properties, '$.S3StorageOptions') as s3_storage_options,
              JSON_EXTRACT(Properties, '$.SecurityPolicyName') as security_policy_name,
              JSON_EXTRACT(Properties, '$.ServerId') as server_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.StructuredLogDestinations') as structured_log_destinations,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.WorkflowDetails') as workflow_details
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Server'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.As2ServiceManagedEgressIpAddresses') as as2_service_managed_egress_ip_addresses,
                JSON_EXTRACT(detail.Properties, '$.Certificate') as certificate,
                JSON_EXTRACT(detail.Properties, '$.Domain') as domain,
                JSON_EXTRACT(detail.Properties, '$.EndpointDetails') as endpoint_details,
                JSON_EXTRACT(detail.Properties, '$.EndpointType') as endpoint_type,
                JSON_EXTRACT(detail.Properties, '$.IdentityProviderDetails') as identity_provider_details,
                JSON_EXTRACT(detail.Properties, '$.IdentityProviderType') as identity_provider_type,
                JSON_EXTRACT(detail.Properties, '$.LoggingRole') as logging_role,
                JSON_EXTRACT(detail.Properties, '$.PostAuthenticationLoginBanner') as post_authentication_login_banner,
                JSON_EXTRACT(detail.Properties, '$.PreAuthenticationLoginBanner') as pre_authentication_login_banner,
                JSON_EXTRACT(detail.Properties, '$.ProtocolDetails') as protocol_details,
                JSON_EXTRACT(detail.Properties, '$.Protocols') as protocols,
                JSON_EXTRACT(detail.Properties, '$.S3StorageOptions') as s3_storage_options,
                JSON_EXTRACT(detail.Properties, '$.SecurityPolicyName') as security_policy_name,
                JSON_EXTRACT(detail.Properties, '$.ServerId') as server_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.StructuredLogDestinations') as structured_log_destinations,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.WorkflowDetails') as workflow_details
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Transfer::Server'
                AND detail.data__TypeName = 'AWS::Transfer::Server'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'As2ServiceManagedEgressIpAddresses') as as2_service_managed_egress_ip_addresses,
                  json_extract_path_text(Properties, 'Certificate') as certificate,
                  json_extract_path_text(Properties, 'Domain') as domain,
                  json_extract_path_text(Properties, 'EndpointDetails') as endpoint_details,
                  json_extract_path_text(Properties, 'EndpointType') as endpoint_type,
                  json_extract_path_text(Properties, 'IdentityProviderDetails') as identity_provider_details,
                  json_extract_path_text(Properties, 'IdentityProviderType') as identity_provider_type,
                  json_extract_path_text(Properties, 'LoggingRole') as logging_role,
                  json_extract_path_text(Properties, 'PostAuthenticationLoginBanner') as post_authentication_login_banner,
                  json_extract_path_text(Properties, 'PreAuthenticationLoginBanner') as pre_authentication_login_banner,
                  json_extract_path_text(Properties, 'ProtocolDetails') as protocol_details,
                  json_extract_path_text(Properties, 'Protocols') as protocols,
                  json_extract_path_text(Properties, 'S3StorageOptions') as s3_storage_options,
                  json_extract_path_text(Properties, 'SecurityPolicyName') as security_policy_name,
                  json_extract_path_text(Properties, 'ServerId') as server_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'StructuredLogDestinations') as structured_log_destinations,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'WorkflowDetails') as workflow_details
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Server'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'As2ServiceManagedEgressIpAddresses') as as2_service_managed_egress_ip_addresses,
                    json_extract_path_text(detail.Properties, 'Certificate') as certificate,
                    json_extract_path_text(detail.Properties, 'Domain') as domain,
                    json_extract_path_text(detail.Properties, 'EndpointDetails') as endpoint_details,
                    json_extract_path_text(detail.Properties, 'EndpointType') as endpoint_type,
                    json_extract_path_text(detail.Properties, 'IdentityProviderDetails') as identity_provider_details,
                    json_extract_path_text(detail.Properties, 'IdentityProviderType') as identity_provider_type,
                    json_extract_path_text(detail.Properties, 'LoggingRole') as logging_role,
                    json_extract_path_text(detail.Properties, 'PostAuthenticationLoginBanner') as post_authentication_login_banner,
                    json_extract_path_text(detail.Properties, 'PreAuthenticationLoginBanner') as pre_authentication_login_banner,
                    json_extract_path_text(detail.Properties, 'ProtocolDetails') as protocol_details,
                    json_extract_path_text(detail.Properties, 'Protocols') as protocols,
                    json_extract_path_text(detail.Properties, 'S3StorageOptions') as s3_storage_options,
                    json_extract_path_text(detail.Properties, 'SecurityPolicyName') as security_policy_name,
                    json_extract_path_text(detail.Properties, 'ServerId') as server_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'StructuredLogDestinations') as structured_log_destinations,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'WorkflowDetails') as workflow_details
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Transfer::Server'
                    AND detail.data__TypeName = 'AWS::Transfer::Server'
                    AND listing.region = 'us-east-1'
    public_keys:
      name: public_keys
      x-description: Imports or deletes a public key for a user
      x-type: native
      methods:
        import_public_key:
          serviceName: transfer
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.ImportSshPublicKey?__nativeEndpoint=true/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_public_key:
          serviceName: transfer
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.DeleteSshPublicKey?__nativeEndpoint=true/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            openAPIDocKey: '200'
      id: aws.transfer.public_keys
      sqlVerbs:
        delete:
          - $ref: '#/components/x-stackQL-resources/public_keys/methods/delete_public_key'
        insert:
          - $ref: '#/components/x-stackQL-resources/public_keys/methods/import_public_key'
        select: []
        update: []
      title: public_keys
    agreements:
      name: agreements
      id: aws.transfer.agreements
      x-cfn-schema-name: Agreement
      x-cfn-type-name: AWS::Transfer::Agreement
      x-identifiers:
        - AgreementId
        - ServerId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Agreement&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Agreement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Agreement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Agreement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/agreements/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/agreements/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/agreements/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ServerId') as server_id,
              JSON_EXTRACT(Properties, '$.LocalProfileId') as local_profile_id,
              JSON_EXTRACT(Properties, '$.PartnerProfileId') as partner_profile_id,
              JSON_EXTRACT(Properties, '$.BaseDirectory') as base_directory,
              JSON_EXTRACT(Properties, '$.AccessRole') as access_role,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AgreementId') as agreement_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Agreement'
              AND data__Identifier = '<AgreementId>|<ServerId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ServerId') as server_id,
                JSON_EXTRACT(detail.Properties, '$.LocalProfileId') as local_profile_id,
                JSON_EXTRACT(detail.Properties, '$.PartnerProfileId') as partner_profile_id,
                JSON_EXTRACT(detail.Properties, '$.BaseDirectory') as base_directory,
                JSON_EXTRACT(detail.Properties, '$.AccessRole') as access_role,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.AgreementId') as agreement_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Transfer::Agreement'
                AND detail.data__TypeName = 'AWS::Transfer::Agreement'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ServerId') as server_id,
                  json_extract_path_text(Properties, 'LocalProfileId') as local_profile_id,
                  json_extract_path_text(Properties, 'PartnerProfileId') as partner_profile_id,
                  json_extract_path_text(Properties, 'BaseDirectory') as base_directory,
                  json_extract_path_text(Properties, 'AccessRole') as access_role,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'AgreementId') as agreement_id,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Agreement'
                  AND data__Identifier = '<AgreementId>|<ServerId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ServerId') as server_id,
                    json_extract_path_text(detail.Properties, 'LocalProfileId') as local_profile_id,
                    json_extract_path_text(detail.Properties, 'PartnerProfileId') as partner_profile_id,
                    json_extract_path_text(detail.Properties, 'BaseDirectory') as base_directory,
                    json_extract_path_text(detail.Properties, 'AccessRole') as access_role,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'AgreementId') as agreement_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Transfer::Agreement'
                    AND detail.data__TypeName = 'AWS::Transfer::Agreement'
                    AND listing.region = 'us-east-1'
    agreements_list_only:
      name: agreements_list_only
      id: aws.transfer.agreements_list_only
      x-cfn-schema-name: Agreement
      x-cfn-type-name: AWS::Transfer::Agreement
      x-identifiers:
        - AgreementId
        - ServerId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AgreementId') as agreement_id,
              JSON_EXTRACT(Properties, '$.ServerId') as server_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Agreement'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AgreementId') as agreement_id,
                json_extract_path_text(Properties, 'ServerId') as server_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Agreement'
                AND region = 'us-east-1'
    agreement_tags:
      name: agreement_tags
      id: aws.transfer.agreement_tags
      x-cfn-schema-name: Agreement
      x-cfn-type-name: AWS::Transfer::Agreement
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.ServerId') as server_id,
              JSON_EXTRACT(detail.Properties, '$.LocalProfileId') as local_profile_id,
              JSON_EXTRACT(detail.Properties, '$.PartnerProfileId') as partner_profile_id,
              JSON_EXTRACT(detail.Properties, '$.BaseDirectory') as base_directory,
              JSON_EXTRACT(detail.Properties, '$.AccessRole') as access_role,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.AgreementId') as agreement_id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Transfer::Agreement'
              AND detail.data__TypeName = 'AWS::Transfer::Agreement'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'ServerId') as server_id,
                json_extract_path_text(detail.Properties, 'LocalProfileId') as local_profile_id,
                json_extract_path_text(detail.Properties, 'PartnerProfileId') as partner_profile_id,
                json_extract_path_text(detail.Properties, 'BaseDirectory') as base_directory,
                json_extract_path_text(detail.Properties, 'AccessRole') as access_role,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'AgreementId') as agreement_id,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Transfer::Agreement'
                AND detail.data__TypeName = 'AWS::Transfer::Agreement'
                AND listing.region = 'us-east-1'
    certificates:
      name: certificates
      id: aws.transfer.certificates
      x-cfn-schema-name: Certificate
      x-cfn-type-name: AWS::Transfer::Certificate
      x-identifiers:
        - CertificateId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Certificate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Certificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Certificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Certificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/certificates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/certificates/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/certificates/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Usage') as usage,
              JSON_EXTRACT(Properties, '$.Certificate') as certificate,
              JSON_EXTRACT(Properties, '$.CertificateChain') as certificate_chain,
              JSON_EXTRACT(Properties, '$.PrivateKey') as private_key,
              JSON_EXTRACT(Properties, '$.ActiveDate') as active_date,
              JSON_EXTRACT(Properties, '$.InactiveDate') as inactive_date,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CertificateId') as certificate_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Serial') as serial,
              JSON_EXTRACT(Properties, '$.NotBeforeDate') as not_before_date,
              JSON_EXTRACT(Properties, '$.NotAfterDate') as not_after_date
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Certificate'
              AND data__Identifier = '<CertificateId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Usage') as usage,
                JSON_EXTRACT(detail.Properties, '$.Certificate') as certificate,
                JSON_EXTRACT(detail.Properties, '$.CertificateChain') as certificate_chain,
                JSON_EXTRACT(detail.Properties, '$.PrivateKey') as private_key,
                JSON_EXTRACT(detail.Properties, '$.ActiveDate') as active_date,
                JSON_EXTRACT(detail.Properties, '$.InactiveDate') as inactive_date,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CertificateId') as certificate_id,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.Serial') as serial,
                JSON_EXTRACT(detail.Properties, '$.NotBeforeDate') as not_before_date,
                JSON_EXTRACT(detail.Properties, '$.NotAfterDate') as not_after_date
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Transfer::Certificate'
                AND detail.data__TypeName = 'AWS::Transfer::Certificate'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Usage') as usage,
                  json_extract_path_text(Properties, 'Certificate') as certificate,
                  json_extract_path_text(Properties, 'CertificateChain') as certificate_chain,
                  json_extract_path_text(Properties, 'PrivateKey') as private_key,
                  json_extract_path_text(Properties, 'ActiveDate') as active_date,
                  json_extract_path_text(Properties, 'InactiveDate') as inactive_date,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CertificateId') as certificate_id,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'Serial') as serial,
                  json_extract_path_text(Properties, 'NotBeforeDate') as not_before_date,
                  json_extract_path_text(Properties, 'NotAfterDate') as not_after_date
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Certificate'
                  AND data__Identifier = '<CertificateId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Usage') as usage,
                    json_extract_path_text(detail.Properties, 'Certificate') as certificate,
                    json_extract_path_text(detail.Properties, 'CertificateChain') as certificate_chain,
                    json_extract_path_text(detail.Properties, 'PrivateKey') as private_key,
                    json_extract_path_text(detail.Properties, 'ActiveDate') as active_date,
                    json_extract_path_text(detail.Properties, 'InactiveDate') as inactive_date,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CertificateId') as certificate_id,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'Serial') as serial,
                    json_extract_path_text(detail.Properties, 'NotBeforeDate') as not_before_date,
                    json_extract_path_text(detail.Properties, 'NotAfterDate') as not_after_date
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Transfer::Certificate'
                    AND detail.data__TypeName = 'AWS::Transfer::Certificate'
                    AND listing.region = 'us-east-1'
    certificates_list_only:
      name: certificates_list_only
      id: aws.transfer.certificates_list_only
      x-cfn-schema-name: Certificate
      x-cfn-type-name: AWS::Transfer::Certificate
      x-identifiers:
        - CertificateId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CertificateId') as certificate_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Certificate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CertificateId') as certificate_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Certificate'
                AND region = 'us-east-1'
    certificate_tags:
      name: certificate_tags
      id: aws.transfer.certificate_tags
      x-cfn-schema-name: Certificate
      x-cfn-type-name: AWS::Transfer::Certificate
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Usage') as usage,
              JSON_EXTRACT(detail.Properties, '$.Certificate') as certificate,
              JSON_EXTRACT(detail.Properties, '$.CertificateChain') as certificate_chain,
              JSON_EXTRACT(detail.Properties, '$.PrivateKey') as private_key,
              JSON_EXTRACT(detail.Properties, '$.ActiveDate') as active_date,
              JSON_EXTRACT(detail.Properties, '$.InactiveDate') as inactive_date,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CertificateId') as certificate_id,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.Serial') as serial,
              JSON_EXTRACT(detail.Properties, '$.NotBeforeDate') as not_before_date,
              JSON_EXTRACT(detail.Properties, '$.NotAfterDate') as not_after_date
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Transfer::Certificate'
              AND detail.data__TypeName = 'AWS::Transfer::Certificate'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Usage') as usage,
                json_extract_path_text(detail.Properties, 'Certificate') as certificate,
                json_extract_path_text(detail.Properties, 'CertificateChain') as certificate_chain,
                json_extract_path_text(detail.Properties, 'PrivateKey') as private_key,
                json_extract_path_text(detail.Properties, 'ActiveDate') as active_date,
                json_extract_path_text(detail.Properties, 'InactiveDate') as inactive_date,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CertificateId') as certificate_id,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'Serial') as serial,
                json_extract_path_text(detail.Properties, 'NotBeforeDate') as not_before_date,
                json_extract_path_text(detail.Properties, 'NotAfterDate') as not_after_date
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Transfer::Certificate'
                AND detail.data__TypeName = 'AWS::Transfer::Certificate'
                AND listing.region = 'us-east-1'
    connectors:
      name: connectors
      id: aws.transfer.connectors
      x-cfn-schema-name: Connector
      x-cfn-type-name: AWS::Transfer::Connector
      x-identifiers:
        - ConnectorId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Connector&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Connector"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Connector"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Connector"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessRole') as access_role,
              JSON_EXTRACT(Properties, '$.As2Config') as as2_config,
              JSON_EXTRACT(Properties, '$.SftpConfig') as sftp_config,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ConnectorId') as connector_id,
              JSON_EXTRACT(Properties, '$.LoggingRole') as logging_role,
              JSON_EXTRACT(Properties, '$.ServiceManagedEgressIpAddresses') as service_managed_egress_ip_addresses,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Url') as url,
              JSON_EXTRACT(Properties, '$.SecurityPolicyName') as security_policy_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Connector'
              AND data__Identifier = '<ConnectorId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccessRole') as access_role,
                JSON_EXTRACT(detail.Properties, '$.As2Config') as as2_config,
                JSON_EXTRACT(detail.Properties, '$.SftpConfig') as sftp_config,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ConnectorId') as connector_id,
                JSON_EXTRACT(detail.Properties, '$.LoggingRole') as logging_role,
                JSON_EXTRACT(detail.Properties, '$.ServiceManagedEgressIpAddresses') as service_managed_egress_ip_addresses,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Url') as url,
                JSON_EXTRACT(detail.Properties, '$.SecurityPolicyName') as security_policy_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Transfer::Connector'
                AND detail.data__TypeName = 'AWS::Transfer::Connector'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccessRole') as access_role,
                  json_extract_path_text(Properties, 'As2Config') as as2_config,
                  json_extract_path_text(Properties, 'SftpConfig') as sftp_config,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ConnectorId') as connector_id,
                  json_extract_path_text(Properties, 'LoggingRole') as logging_role,
                  json_extract_path_text(Properties, 'ServiceManagedEgressIpAddresses') as service_managed_egress_ip_addresses,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Url') as url,
                  json_extract_path_text(Properties, 'SecurityPolicyName') as security_policy_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Connector'
                  AND data__Identifier = '<ConnectorId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccessRole') as access_role,
                    json_extract_path_text(detail.Properties, 'As2Config') as as2_config,
                    json_extract_path_text(detail.Properties, 'SftpConfig') as sftp_config,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ConnectorId') as connector_id,
                    json_extract_path_text(detail.Properties, 'LoggingRole') as logging_role,
                    json_extract_path_text(detail.Properties, 'ServiceManagedEgressIpAddresses') as service_managed_egress_ip_addresses,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Url') as url,
                    json_extract_path_text(detail.Properties, 'SecurityPolicyName') as security_policy_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Transfer::Connector'
                    AND detail.data__TypeName = 'AWS::Transfer::Connector'
                    AND listing.region = 'us-east-1'
    connectors_list_only:
      name: connectors_list_only
      id: aws.transfer.connectors_list_only
      x-cfn-schema-name: Connector
      x-cfn-type-name: AWS::Transfer::Connector
      x-identifiers:
        - ConnectorId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConnectorId') as connector_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Connector'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ConnectorId') as connector_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Connector'
                AND region = 'us-east-1'
    connector_tags:
      name: connector_tags
      id: aws.transfer.connector_tags
      x-cfn-schema-name: Connector
      x-cfn-type-name: AWS::Transfer::Connector
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AccessRole') as access_role,
              JSON_EXTRACT(detail.Properties, '$.As2Config') as as2_config,
              JSON_EXTRACT(detail.Properties, '$.SftpConfig') as sftp_config,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ConnectorId') as connector_id,
              JSON_EXTRACT(detail.Properties, '$.LoggingRole') as logging_role,
              JSON_EXTRACT(detail.Properties, '$.ServiceManagedEgressIpAddresses') as service_managed_egress_ip_addresses,
              JSON_EXTRACT(detail.Properties, '$.Url') as url,
              JSON_EXTRACT(detail.Properties, '$.SecurityPolicyName') as security_policy_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Transfer::Connector'
              AND detail.data__TypeName = 'AWS::Transfer::Connector'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AccessRole') as access_role,
                json_extract_path_text(detail.Properties, 'As2Config') as as2_config,
                json_extract_path_text(detail.Properties, 'SftpConfig') as sftp_config,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ConnectorId') as connector_id,
                json_extract_path_text(detail.Properties, 'LoggingRole') as logging_role,
                json_extract_path_text(detail.Properties, 'ServiceManagedEgressIpAddresses') as service_managed_egress_ip_addresses,
                json_extract_path_text(detail.Properties, 'Url') as url,
                json_extract_path_text(detail.Properties, 'SecurityPolicyName') as security_policy_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Transfer::Connector'
                AND detail.data__TypeName = 'AWS::Transfer::Connector'
                AND listing.region = 'us-east-1'
    profiles:
      name: profiles
      id: aws.transfer.profiles
      x-cfn-schema-name: Profile
      x-cfn-type-name: AWS::Transfer::Profile
      x-identifiers:
        - ProfileId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Profile&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Profile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Profile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Profile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/profiles/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/profiles/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/profiles/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.As2Id') as as2_id,
              JSON_EXTRACT(Properties, '$.ProfileType') as profile_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CertificateIds') as certificate_ids,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ProfileId') as profile_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Profile'
              AND data__Identifier = '<ProfileId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.As2Id') as as2_id,
                JSON_EXTRACT(detail.Properties, '$.ProfileType') as profile_type,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.CertificateIds') as certificate_ids,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ProfileId') as profile_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Transfer::Profile'
                AND detail.data__TypeName = 'AWS::Transfer::Profile'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'As2Id') as as2_id,
                  json_extract_path_text(Properties, 'ProfileType') as profile_type,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'CertificateIds') as certificate_ids,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ProfileId') as profile_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Profile'
                  AND data__Identifier = '<ProfileId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'As2Id') as as2_id,
                    json_extract_path_text(detail.Properties, 'ProfileType') as profile_type,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'CertificateIds') as certificate_ids,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ProfileId') as profile_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Transfer::Profile'
                    AND detail.data__TypeName = 'AWS::Transfer::Profile'
                    AND listing.region = 'us-east-1'
    profiles_list_only:
      name: profiles_list_only
      id: aws.transfer.profiles_list_only
      x-cfn-schema-name: Profile
      x-cfn-type-name: AWS::Transfer::Profile
      x-identifiers:
        - ProfileId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProfileId') as profile_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Profile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ProfileId') as profile_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Profile'
                AND region = 'us-east-1'
    profile_tags:
      name: profile_tags
      id: aws.transfer.profile_tags
      x-cfn-schema-name: Profile
      x-cfn-type-name: AWS::Transfer::Profile
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.As2Id') as as2_id,
              JSON_EXTRACT(detail.Properties, '$.ProfileType') as profile_type,
              JSON_EXTRACT(detail.Properties, '$.CertificateIds') as certificate_ids,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ProfileId') as profile_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Transfer::Profile'
              AND detail.data__TypeName = 'AWS::Transfer::Profile'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'As2Id') as as2_id,
                json_extract_path_text(detail.Properties, 'ProfileType') as profile_type,
                json_extract_path_text(detail.Properties, 'CertificateIds') as certificate_ids,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ProfileId') as profile_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Transfer::Profile'
                AND detail.data__TypeName = 'AWS::Transfer::Profile'
                AND listing.region = 'us-east-1'
    servers_list_only:
      name: servers_list_only
      id: aws.transfer.servers_list_only
      x-cfn-schema-name: Server
      x-cfn-type-name: AWS::Transfer::Server
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Server'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Server'
                AND region = 'us-east-1'
    server_tags:
      name: server_tags
      id: aws.transfer.server_tags
      x-cfn-schema-name: Server
      x-cfn-type-name: AWS::Transfer::Server
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.As2ServiceManagedEgressIpAddresses') as as2_service_managed_egress_ip_addresses,
              JSON_EXTRACT(detail.Properties, '$.Certificate') as certificate,
              JSON_EXTRACT(detail.Properties, '$.Domain') as domain,
              JSON_EXTRACT(detail.Properties, '$.EndpointDetails') as endpoint_details,
              JSON_EXTRACT(detail.Properties, '$.EndpointType') as endpoint_type,
              JSON_EXTRACT(detail.Properties, '$.IdentityProviderDetails') as identity_provider_details,
              JSON_EXTRACT(detail.Properties, '$.IdentityProviderType') as identity_provider_type,
              JSON_EXTRACT(detail.Properties, '$.LoggingRole') as logging_role,
              JSON_EXTRACT(detail.Properties, '$.PostAuthenticationLoginBanner') as post_authentication_login_banner,
              JSON_EXTRACT(detail.Properties, '$.PreAuthenticationLoginBanner') as pre_authentication_login_banner,
              JSON_EXTRACT(detail.Properties, '$.ProtocolDetails') as protocol_details,
              JSON_EXTRACT(detail.Properties, '$.Protocols') as protocols,
              JSON_EXTRACT(detail.Properties, '$.S3StorageOptions') as s3_storage_options,
              JSON_EXTRACT(detail.Properties, '$.SecurityPolicyName') as security_policy_name,
              JSON_EXTRACT(detail.Properties, '$.ServerId') as server_id,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.StructuredLogDestinations') as structured_log_destinations,
              JSON_EXTRACT(detail.Properties, '$.WorkflowDetails') as workflow_details
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Transfer::Server'
              AND detail.data__TypeName = 'AWS::Transfer::Server'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'As2ServiceManagedEgressIpAddresses') as as2_service_managed_egress_ip_addresses,
                json_extract_path_text(detail.Properties, 'Certificate') as certificate,
                json_extract_path_text(detail.Properties, 'Domain') as domain,
                json_extract_path_text(detail.Properties, 'EndpointDetails') as endpoint_details,
                json_extract_path_text(detail.Properties, 'EndpointType') as endpoint_type,
                json_extract_path_text(detail.Properties, 'IdentityProviderDetails') as identity_provider_details,
                json_extract_path_text(detail.Properties, 'IdentityProviderType') as identity_provider_type,
                json_extract_path_text(detail.Properties, 'LoggingRole') as logging_role,
                json_extract_path_text(detail.Properties, 'PostAuthenticationLoginBanner') as post_authentication_login_banner,
                json_extract_path_text(detail.Properties, 'PreAuthenticationLoginBanner') as pre_authentication_login_banner,
                json_extract_path_text(detail.Properties, 'ProtocolDetails') as protocol_details,
                json_extract_path_text(detail.Properties, 'Protocols') as protocols,
                json_extract_path_text(detail.Properties, 'S3StorageOptions') as s3_storage_options,
                json_extract_path_text(detail.Properties, 'SecurityPolicyName') as security_policy_name,
                json_extract_path_text(detail.Properties, 'ServerId') as server_id,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'StructuredLogDestinations') as structured_log_destinations,
                json_extract_path_text(detail.Properties, 'WorkflowDetails') as workflow_details
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Transfer::Server'
                AND detail.data__TypeName = 'AWS::Transfer::Server'
                AND listing.region = 'us-east-1'
    users:
      name: users
      id: aws.transfer.users
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::Transfer::User
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__User&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::User"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/users/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/users/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/users/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.HomeDirectory') as home_directory,
              JSON_EXTRACT(Properties, '$.HomeDirectoryMappings') as home_directory_mappings,
              JSON_EXTRACT(Properties, '$.HomeDirectoryType') as home_directory_type,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.PosixProfile') as posix_profile,
              JSON_EXTRACT(Properties, '$.Role') as role,
              JSON_EXTRACT(Properties, '$.ServerId') as server_id,
              JSON_EXTRACT(Properties, '$.SshPublicKeys') as ssh_public_keys,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UserName') as user_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::User'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.HomeDirectory') as home_directory,
                JSON_EXTRACT(detail.Properties, '$.HomeDirectoryMappings') as home_directory_mappings,
                JSON_EXTRACT(detail.Properties, '$.HomeDirectoryType') as home_directory_type,
                JSON_EXTRACT(detail.Properties, '$.Policy') as policy,
                JSON_EXTRACT(detail.Properties, '$.PosixProfile') as posix_profile,
                JSON_EXTRACT(detail.Properties, '$.Role') as role,
                JSON_EXTRACT(detail.Properties, '$.ServerId') as server_id,
                JSON_EXTRACT(detail.Properties, '$.SshPublicKeys') as ssh_public_keys,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.UserName') as user_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Transfer::User'
                AND detail.data__TypeName = 'AWS::Transfer::User'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'HomeDirectory') as home_directory,
                  json_extract_path_text(Properties, 'HomeDirectoryMappings') as home_directory_mappings,
                  json_extract_path_text(Properties, 'HomeDirectoryType') as home_directory_type,
                  json_extract_path_text(Properties, 'Policy') as policy,
                  json_extract_path_text(Properties, 'PosixProfile') as posix_profile,
                  json_extract_path_text(Properties, 'Role') as role,
                  json_extract_path_text(Properties, 'ServerId') as server_id,
                  json_extract_path_text(Properties, 'SshPublicKeys') as ssh_public_keys,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'UserName') as user_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::User'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'HomeDirectory') as home_directory,
                    json_extract_path_text(detail.Properties, 'HomeDirectoryMappings') as home_directory_mappings,
                    json_extract_path_text(detail.Properties, 'HomeDirectoryType') as home_directory_type,
                    json_extract_path_text(detail.Properties, 'Policy') as policy,
                    json_extract_path_text(detail.Properties, 'PosixProfile') as posix_profile,
                    json_extract_path_text(detail.Properties, 'Role') as role,
                    json_extract_path_text(detail.Properties, 'ServerId') as server_id,
                    json_extract_path_text(detail.Properties, 'SshPublicKeys') as ssh_public_keys,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'UserName') as user_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Transfer::User'
                    AND detail.data__TypeName = 'AWS::Transfer::User'
                    AND listing.region = 'us-east-1'
    users_list_only:
      name: users_list_only
      id: aws.transfer.users_list_only
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::Transfer::User
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::User'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::User'
                AND region = 'us-east-1'
    user_tags:
      name: user_tags
      id: aws.transfer.user_tags
      x-cfn-schema-name: User
      x-cfn-type-name: AWS::Transfer::User
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.HomeDirectory') as home_directory,
              JSON_EXTRACT(detail.Properties, '$.HomeDirectoryMappings') as home_directory_mappings,
              JSON_EXTRACT(detail.Properties, '$.HomeDirectoryType') as home_directory_type,
              JSON_EXTRACT(detail.Properties, '$.Policy') as policy,
              JSON_EXTRACT(detail.Properties, '$.PosixProfile') as posix_profile,
              JSON_EXTRACT(detail.Properties, '$.Role') as role,
              JSON_EXTRACT(detail.Properties, '$.ServerId') as server_id,
              JSON_EXTRACT(detail.Properties, '$.SshPublicKeys') as ssh_public_keys,
              JSON_EXTRACT(detail.Properties, '$.UserName') as user_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Transfer::User'
              AND detail.data__TypeName = 'AWS::Transfer::User'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'HomeDirectory') as home_directory,
                json_extract_path_text(detail.Properties, 'HomeDirectoryMappings') as home_directory_mappings,
                json_extract_path_text(detail.Properties, 'HomeDirectoryType') as home_directory_type,
                json_extract_path_text(detail.Properties, 'Policy') as policy,
                json_extract_path_text(detail.Properties, 'PosixProfile') as posix_profile,
                json_extract_path_text(detail.Properties, 'Role') as role,
                json_extract_path_text(detail.Properties, 'ServerId') as server_id,
                json_extract_path_text(detail.Properties, 'SshPublicKeys') as ssh_public_keys,
                json_extract_path_text(detail.Properties, 'UserName') as user_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Transfer::User'
                AND detail.data__TypeName = 'AWS::Transfer::User'
                AND listing.region = 'us-east-1'
    workflows:
      name: workflows
      id: aws.transfer.workflows
      x-cfn-schema-name: Workflow
      x-cfn-type-name: AWS::Transfer::Workflow
      x-identifiers:
        - WorkflowId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Workflow&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Workflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Workflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Workflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.OnExceptionSteps') as on_exception_steps,
              JSON_EXTRACT(Properties, '$.Steps') as steps,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.WorkflowId') as workflow_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Workflow'
              AND data__Identifier = '<WorkflowId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.OnExceptionSteps') as on_exception_steps,
                JSON_EXTRACT(detail.Properties, '$.Steps') as steps,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.WorkflowId') as workflow_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Transfer::Workflow'
                AND detail.data__TypeName = 'AWS::Transfer::Workflow'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'OnExceptionSteps') as on_exception_steps,
                  json_extract_path_text(Properties, 'Steps') as steps,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'WorkflowId') as workflow_id,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Workflow'
                  AND data__Identifier = '<WorkflowId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'OnExceptionSteps') as on_exception_steps,
                    json_extract_path_text(detail.Properties, 'Steps') as steps,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'WorkflowId') as workflow_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Transfer::Workflow'
                    AND detail.data__TypeName = 'AWS::Transfer::Workflow'
                    AND listing.region = 'us-east-1'
    workflows_list_only:
      name: workflows_list_only
      id: aws.transfer.workflows_list_only
      x-cfn-schema-name: Workflow
      x-cfn-type-name: AWS::Transfer::Workflow
      x-identifiers:
        - WorkflowId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkflowId') as workflow_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Workflow'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'WorkflowId') as workflow_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Workflow'
                AND region = 'us-east-1'
    workflow_tags:
      name: workflow_tags
      id: aws.transfer.workflow_tags
      x-cfn-schema-name: Workflow
      x-cfn-type-name: AWS::Transfer::Workflow
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.OnExceptionSteps') as on_exception_steps,
              JSON_EXTRACT(detail.Properties, '$.Steps') as steps,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.WorkflowId') as workflow_id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Transfer::Workflow'
              AND detail.data__TypeName = 'AWS::Transfer::Workflow'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'OnExceptionSteps') as on_exception_steps,
                json_extract_path_text(detail.Properties, 'Steps') as steps,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'WorkflowId') as workflow_id,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Transfer::Workflow'
                AND detail.data__TypeName = 'AWS::Transfer::Workflow'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Agreement&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAgreement
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAgreementRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Certificate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCertificate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCertificateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Connector&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateConnector
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateConnectorRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Profile&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateProfile
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Server&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateServer
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateServerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__User&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateUser
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Workflow&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateWorkflow
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?__X-Amz-Target=TransferService.DeleteSshPublicKey?__nativeEndpoint=true:
    post:
      operationId: DeleteSshPublicKey
      description: Deletes a user's Secure Shell (SSH) public key.
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DeleteSshPublicKeyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DeleteSshPublicKey
            enum:
              - TransferService.DeleteSshPublicKey
    servers:
      - url: https://transfer.{region}.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
        description: The AWS Transfer multi-region endpoint
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ImportSshPublicKey?__nativeEndpoint=true:
    post:
      operationId: ImportSshPublicKey
      description: <p>Adds a Secure Shell (SSH) public key to a Transfer Family user identified by a <code>UserName</code> value assigned to the specific file transfer protocol-enabled server, identified by <code>ServerId</code>.</p> <p>The response returns the <code>UserName</code> value, the <code>ServerId</code> value, and the name of the <code>SshPublicKeyId</code>.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportSshPublicKeyResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ImportSshPublicKeyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ImportSshPublicKey
            enum:
              - TransferService.ImportSshPublicKey
    servers:
      - url: https://transfer.{region}.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
        description: The AWS Transfer multi-region endpoint
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.StartServer?__nativeEndpoint=true:
    post:
      operationId: StartServer
      description: >-
        <p>Changes the state of a file transfer protocol-enabled server from <code>OFFLINE</code> to <code>ONLINE</code>. It has no impact on a server that is already <code>ONLINE</code>. An <code>ONLINE</code> server can accept and process file transfer jobs.</p> <p>The state of <code>STARTING</code> indicates that the server is in an intermediate state, either not fully able to respond, or not fully online. The values of <code>START_FAILED</code> can indicate an error condition.</p> <p>No
        response is returned from this call.</p>
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/StartServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.StartServer
            enum:
              - TransferService.StartServer
    servers:
      - url: https://transfer.{region}.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
        description: The AWS Transfer multi-region endpoint
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.StopServer?__nativeEndpoint=true:
    post:
      operationId: StopServer
      description: >-
        <p>Changes the state of a file transfer protocol-enabled server from <code>ONLINE</code> to <code>OFFLINE</code>. An <code>OFFLINE</code> server cannot accept and process file transfer jobs. Information tied to your server, such as server and user properties, are not affected by stopping your server.</p> <note> <p>Stopping the server does not reduce or impact your file transfer protocol endpoint billing; you must delete the server to stop being billed.</p> </note> <p>The state of
        <code>STOPPING</code> indicates that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of <code>STOP_FAILED</code> can indicate an error condition.</p> <p>No response is returned from this call.</p>
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/StopServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.StopServer
            enum:
              - TransferService.StopServer
    servers:
      - url: https://transfer.{region}.amazonaws.com
        variables:
          region:
            description: The AWS region
            enum:
              - us-east-1
              - us-east-2
              - us-west-1
              - us-west-2
              - us-gov-west-1
              - us-gov-east-1
              - ca-central-1
              - eu-north-1
              - eu-west-1
              - eu-west-2
              - eu-west-3
              - eu-central-1
              - eu-south-1
              - af-south-1
              - ap-northeast-1
              - ap-northeast-2
              - ap-northeast-3
              - ap-southeast-1
              - ap-southeast-2
              - ap-east-1
              - ap-south-1
              - sa-east-1
              - me-south-1
            default: us-east-1
        description: The AWS Transfer multi-region endpoint
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
  queryParamTranspose:
    algorithm: AWSCanonical
