openapi: 3.0.0
info:
  title: Transfer
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Tag:
      description: Creates a key-value pair for a specific resource.
      type: object
      properties:
        Key:
          type: string
          description: The name assigned to the tag that you create.
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: Contains one or more values that you assigned to the key name you create.
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Agreement:
      type: object
      properties:
        Description:
          description: A textual description for the agreement.
          type: string
          pattern: ^[\w\- ]*$
          minLength: 1
          maxLength: 200
        ServerId:
          description: A unique identifier for the server.
          type: string
          pattern: ^s-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        LocalProfileId:
          description: A unique identifier for the local profile.
          type: string
          pattern: ^p-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        PartnerProfileId:
          description: A unique identifier for the partner profile.
          type: string
          pattern: ^p-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        BaseDirectory:
          description: Specifies the base directory for the agreement.
          type: string
          pattern: ^$|/.*
          maxLength: 1024
        AccessRole:
          description: Specifies the access role for the agreement.
          type: string
          pattern: arn:.*role/.*
          minLength: 20
          maxLength: 2048
        Status:
          description: Specifies the status of the agreement.
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        Tags:
          description: Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        AgreementId:
          description: A unique identifier for the agreement.
          type: string
          pattern: ^a-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the agreement.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
      required:
        - ServerId
        - LocalProfileId
        - PartnerProfileId
        - BaseDirectory
        - AccessRole
      x-stackql-resource-name: agreement
      description: Resource Type definition for AWS::Transfer::Agreement
      x-type-name: AWS::Transfer::Agreement
      x-stackql-primary-identifier:
        - AgreementId
        - ServerId
      x-create-only-properties:
        - ServerId
      x-read-only-properties:
        - AgreementId
        - Arn
      x-required-properties:
        - ServerId
        - LocalProfileId
        - PartnerProfileId
        - BaseDirectory
        - AccessRole
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - transfer:CreateAgreement
          - transfer:TagResource
          - iam:PassRole
        read:
          - transfer:DescribeAgreement
        update:
          - transfer:UpdateAgreement
          - transfer:UnTagResource
          - transfer:TagResource
          - iam:PassRole
        delete:
          - transfer:DeleteAgreement
        list:
          - transfer:ListAgreements
    Certificate:
      type: object
      properties:
        Usage:
          description: Specifies the usage type for the certificate.
          type: string
          enum:
            - SIGNING
            - ENCRYPTION
        Certificate:
          description: Specifies the certificate body to be imported.
          type: string
          pattern: "^[\t\n\r -ÿ]*"
          minLength: 1
          maxLength: 16384
        CertificateChain:
          description: Specifies the certificate chain to be imported.
          type: string
          pattern: "^[\t\n\r -ÿ]*"
          minLength: 1
          maxLength: 2097152
        PrivateKey:
          description: Specifies the private key for the certificate.
          type: string
          pattern: "^[\t\n\r -ÿ]*"
          minLength: 1
          maxLength: 16384
        ActiveDate:
          description: Specifies the active date for the certificate.
          type: string
        InactiveDate:
          description: Specifies the inactive date for the certificate.
          type: string
        Description:
          description: A textual description for the certificate.
          type: string
          pattern: ^[\w\- ]*$
          minLength: 1
          maxLength: 200
        Tags:
          description: Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the agreement.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
        CertificateId:
          description: A unique identifier for the certificate.
          type: string
          pattern: ^cert-([0-9a-f]{17})$
          minLength: 22
          maxLength: 22
        Status:
          description: A status description for the certificate.
          type: string
          enum:
            - ACTIVE
            - PENDING
            - INACTIVE
        Type:
          description: Describing the type of certificate. With or without a private key.
          type: string
          enum:
            - CERTIFICATE
            - CERTIFICATE_WITH_PRIVATE_KEY
        Serial:
          description: Specifies Certificate's serial.
          type: string
          pattern: ^[\p{XDigit}{2}:?]*
          minLength: 0
          maxLength: 48
        NotBeforeDate:
          description: Specifies the not before date for the certificate.
          type: string
        NotAfterDate:
          description: Specifies the not after date for the certificate.
          type: string
      required:
        - Certificate
        - Usage
      x-stackql-resource-name: certificate
      description: Resource Type definition for AWS::Transfer::Certificate
      x-type-name: AWS::Transfer::Certificate
      x-stackql-primary-identifier:
        - CertificateId
      x-create-only-properties:
        - Certificate
        - CertificateChain
        - PrivateKey
      x-write-only-properties:
        - PrivateKey
      x-read-only-properties:
        - Arn
        - CertificateId
        - Status
        - Type
        - Serial
        - NotAfterDate
        - NotBeforeDate
      x-required-properties:
        - Certificate
        - Usage
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - transfer:ImportCertificate
          - transfer:TagResource
        read:
          - transfer:DescribeCertificate
        update:
          - transfer:UpdateCertificate
          - transfer:UnTagResource
          - transfer:TagResource
        delete:
          - transfer:DeleteCertificate
        list:
          - transfer:ListCertificates
    SftpConnectorTrustedHostKey:
      description: The public host key for the external server to which you are connecting.
      type: string
      minLength: 1
      maxLength: 2048
    Connector:
      type: object
      properties:
        AccessRole:
          description: Specifies the access role for the connector.
          type: string
          pattern: arn:.*role/.*
          minLength: 20
          maxLength: 2048
        As2Config:
          description: Configuration for an AS2 connector.
          type: object
          properties:
            LocalProfileId:
              type: string
              description: A unique identifier for the local profile.
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            PartnerProfileId:
              type: string
              description: A unique identifier for the partner profile.
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            MessageSubject:
              type: string
              description: The message subject for this AS2 connector configuration.
              pattern: ^[\p{Print}\p{Blank}]+
              minLength: 1
              maxLength: 1024
            Compression:
              type: string
              description: Compression setting for this AS2 connector configuration.
              enum:
                - ZLIB
                - DISABLED
            EncryptionAlgorithm:
              type: string
              description: Encryption algorithm for this AS2 connector configuration.
              enum:
                - AES128_CBC
                - AES192_CBC
                - AES256_CBC
                - NONE
            SigningAlgorithm:
              type: string
              description: Signing algorithm for this AS2 connector configuration.
              enum:
                - SHA256
                - SHA384
                - SHA512
                - SHA1
                - NONE
            MdnSigningAlgorithm:
              type: string
              description: MDN Signing algorithm for this AS2 connector configuration.
              enum:
                - SHA256
                - SHA384
                - SHA512
                - SHA1
                - NONE
                - DEFAULT
            MdnResponse:
              type: string
              description: MDN Response setting for this AS2 connector configuration.
              enum:
                - SYNC
                - NONE
            BasicAuthSecretId:
              type: string
              description: ARN or name of the secret in AWS Secrets Manager which contains the credentials for Basic authentication. If empty, Basic authentication is disabled for the AS2 connector
              minLength: 0
              maxLength: 2048
          additionalProperties: false
        SftpConfig:
          description: Configuration for an SFTP connector.
          type: object
          properties:
            UserSecretId:
              type: string
              description: ARN or name of the secret in AWS Secrets Manager which contains the SFTP user's private keys or passwords.
              minLength: 1
              maxLength: 2048
            TrustedHostKeys:
              description: List of public host keys, for the external server to which you are connecting.
              type: array
              maxItems: 10
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SftpConnectorTrustedHostKey'
          additionalProperties: false
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the connector.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
        ConnectorId:
          description: A unique identifier for the connector.
          type: string
          pattern: ^c-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
        LoggingRole:
          description: Specifies the logging role for the connector.
          type: string
          pattern: arn:.*role/.*
          minLength: 20
          maxLength: 2048
        Tags:
          description: Key-value pairs that can be used to group and search for connectors. Tags are metadata attached to connectors for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Url:
          description: URL for Connector
          type: string
          maxLength: 255
      required:
        - AccessRole
        - Url
      x-stackql-resource-name: connector
      description: Resource Type definition for AWS::Transfer::Connector
      x-type-name: AWS::Transfer::Connector
      x-stackql-primary-identifier:
        - ConnectorId
      x-read-only-properties:
        - Arn
        - ConnectorId
      x-required-properties:
        - AccessRole
        - Url
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - transfer:CreateConnector
          - transfer:TagResource
          - iam:PassRole
        read:
          - transfer:DescribeConnector
        update:
          - transfer:UpdateConnector
          - transfer:UnTagResource
          - transfer:TagResource
          - iam:PassRole
        delete:
          - transfer:DeleteConnector
        list:
          - transfer:ListConnectors
    CertificateId:
      description: A unique identifier for the certificate.
      type: string
      pattern: ^cert-([0-9a-f]{17})$
      minLength: 22
      maxLength: 22
    Profile:
      type: object
      properties:
        As2Id:
          description: AS2 identifier agreed with a trading partner.
          type: string
          minLength: 1
          maxLength: 128
        ProfileType:
          description: Enum specifying whether the profile is local or associated with a trading partner.
          type: string
          enum:
            - LOCAL
            - PARTNER
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          maxItems: 50
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        CertificateIds:
          description: List of the certificate IDs associated with this profile to be used for encryption and signing of AS2 messages.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/CertificateId'
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the profile.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
        ProfileId:
          description: A unique identifier for the profile
          type: string
          pattern: ^p-([0-9a-f]{17})$
          minLength: 19
          maxLength: 19
      required:
        - As2Id
        - ProfileType
      x-stackql-resource-name: profile
      description: Resource Type definition for AWS::Transfer::Profile
      x-type-name: AWS::Transfer::Profile
      x-stackql-primary-identifier:
        - ProfileId
      x-create-only-properties:
        - ProfileType
      x-read-only-properties:
        - Arn
        - ProfileId
      x-required-properties:
        - As2Id
        - ProfileType
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - transfer:CreateProfile
          - transfer:TagResource
        read:
          - transfer:DescribeProfile
        update:
          - transfer:UpdateProfile
          - transfer:UnTagResource
          - transfer:TagResource
        delete:
          - transfer:DeleteProfile
        list:
          - transfer:ListProfiles
    S3Tag:
      description: Specifies the key-value pair that are assigned to a file during the execution of a Tagging step.
      type: object
      properties:
        Key:
          description: The name assigned to the tag that you create.
          type: string
          minLength: 1
          maxLength: 128
        Value:
          description: The value that corresponds to the key.
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    EfsInputFileLocation:
      description: Specifies the details for an EFS file.
      type: object
      properties:
        FileSystemId:
          description: Specifies the EFS filesystem that contains the file.
          type: string
          pattern: ^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:(access-point/fsap|file-system/fs)-[0-9a-f]{8,40}|fs(ap)?-[0-9a-f]{8,40})$
          minLength: 0
          maxLength: 128
        Path:
          description: The name assigned to the file when it was created in EFS. You use the object path to retrieve the object.
          type: string
          pattern: ^[^\x00]+$
          minLength: 1
          maxLength: 65536
      additionalProperties: false
    S3InputFileLocation:
      description: Specifies the details for a S3 file.
      type: object
      properties:
        Bucket:
          description: Specifies the S3 bucket that contains the file.
          type: string
          pattern: ^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$
          minLength: 3
          maxLength: 63
        Key:
          description: The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
          type: string
          pattern: .*
          minLength: 0
          maxLength: 1024
      additionalProperties: false
    InputFileLocation:
      description: Specifies the location for the file being decrypted. Only applicable for the Decrypt type of workflow steps.
      type: object
      properties:
        S3FileLocation:
          $ref: '#/components/schemas/S3InputFileLocation'
        EfsFileLocation:
          $ref: '#/components/schemas/EfsInputFileLocation'
      additionalProperties: false
    S3FileLocation:
      description: Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.
      type: object
      properties:
        S3FileLocation:
          $ref: '#/components/schemas/S3InputFileLocation'
      additionalProperties: false
    WorkflowStep:
      description: The basic building block of a workflow.
      type: object
      properties:
        CopyStepDetails:
          description: Details for a step that performs a file copy.
          type: object
          properties:
            DestinationFileLocation:
              $ref: '#/components/schemas/S3FileLocation'
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            OverwriteExisting:
              description: A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
              type: string
              enum:
                - 'TRUE'
                - 'FALSE'
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        CustomStepDetails:
          description: Details for a step that invokes a lambda function.
          type: object
          properties:
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            Target:
              description: The ARN for the lambda function that is being called.
              type: string
              pattern: arn:[a-z-]+:lambda:.*$
              minLength: 0
              maxLength: 170
            TimeoutSeconds:
              description: Timeout, in seconds, for the step.
              type: integer
              minimum: 1
              maximum: 1800
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        DecryptStepDetails:
          description: Details for a step that performs a file decryption.
          type: object
          properties:
            DestinationFileLocation:
              $ref: '#/components/schemas/InputFileLocation'
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            Type:
              description: Specifies which encryption method to use.
              type: string
              enum:
                - PGP
            OverwriteExisting:
              description: A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
              type: string
              enum:
                - 'TRUE'
                - 'FALSE'
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        DeleteStepDetails:
          description: Details for a step that deletes the file.
          type: object
          properties:
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        TagStepDetails:
          description: Details for a step that creates one or more tags.
          type: object
          properties:
            Name:
              description: The name of the step, used as an identifier.
              type: string
              pattern: ^[\w-]*$
              minLength: 0
              maxLength: 30
            Tags:
              description: Array that contains from 1 to 10 key/value pairs.
              type: array
              maxItems: 10
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/S3Tag'
            SourceFileLocation:
              description: Specifies which file to use as input to the workflow step.
              type: string
              pattern: ^\$\{(\w+.)+\w+\}$
              minLength: 0
              maxLength: 256
          additionalProperties: false
        Type:
          type: string
          enum:
            - COPY
            - CUSTOM
            - DECRYPT
            - DELETE
            - TAG
      additionalProperties: false
    Workflow:
      type: object
      properties:
        OnExceptionSteps:
          description: Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.
          type: array
          maxItems: 8
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/WorkflowStep'
        Steps:
          description: Specifies the details for the steps that are in the specified workflow.
          type: array
          maxItems: 8
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/WorkflowStep'
        Tags:
          description: Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Description:
          description: A textual description for the workflow.
          type: string
          pattern: ^[\w\- ]*$
          minLength: 0
          maxLength: 256
        WorkflowId:
          description: A unique identifier for the workflow.
          type: string
          pattern: ^w-([a-z0-9]{17})$
          minLength: 19
          maxLength: 19
        Arn:
          description: Specifies the unique Amazon Resource Name (ARN) for the workflow.
          type: string
          pattern: arn:.*
          minLength: 20
          maxLength: 1600
      required:
        - Steps
      x-stackql-resource-name: workflow
      description: Resource Type definition for AWS::Transfer::Workflow
      x-type-name: AWS::Transfer::Workflow
      x-stackql-primary-identifier:
        - WorkflowId
      x-create-only-properties:
        - Steps
        - OnExceptionSteps
        - Description
      x-read-only-properties:
        - WorkflowId
        - Arn
      x-required-properties:
        - Steps
      x-taggable: true
      x-required-permissions:
        create:
          - transfer:CreateWorkflow
          - transfer:TagResource
        read:
          - transfer:DescribeWorkflow
        delete:
          - transfer:DeleteWorkflow
        list:
          - transfer:ListWorkflows
        update:
          - transfer:UnTagResource
          - transfer:TagResource
    CreateAgreementRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              description: A textual description for the agreement.
              type: string
              pattern: ^[\w\- ]*$
              minLength: 1
              maxLength: 200
            ServerId:
              description: A unique identifier for the server.
              type: string
              pattern: ^s-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            LocalProfileId:
              description: A unique identifier for the local profile.
              type: string
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            PartnerProfileId:
              description: A unique identifier for the partner profile.
              type: string
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            BaseDirectory:
              description: Specifies the base directory for the agreement.
              type: string
              pattern: ^$|/.*
              maxLength: 1024
            AccessRole:
              description: Specifies the access role for the agreement.
              type: string
              pattern: arn:.*role/.*
              minLength: 20
              maxLength: 2048
            Status:
              description: Specifies the status of the agreement.
              type: string
              enum:
                - ACTIVE
                - INACTIVE
            Tags:
              description: Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            AgreementId:
              description: A unique identifier for the agreement.
              type: string
              pattern: ^a-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            Arn:
              description: Specifies the unique Amazon Resource Name (ARN) for the agreement.
              type: string
              pattern: arn:.*
              minLength: 20
              maxLength: 1600
          x-stackQL-stringOnly: true
      x-title: CreateAgreementRequest
      type: object
      required: []
    CreateCertificateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Usage:
              description: Specifies the usage type for the certificate.
              type: string
              enum:
                - SIGNING
                - ENCRYPTION
            Certificate:
              description: Specifies the certificate body to be imported.
              type: string
              pattern: "^[\t\n\r -ÿ]*"
              minLength: 1
              maxLength: 16384
            CertificateChain:
              description: Specifies the certificate chain to be imported.
              type: string
              pattern: "^[\t\n\r -ÿ]*"
              minLength: 1
              maxLength: 2097152
            PrivateKey:
              description: Specifies the private key for the certificate.
              type: string
              pattern: "^[\t\n\r -ÿ]*"
              minLength: 1
              maxLength: 16384
            ActiveDate:
              description: Specifies the active date for the certificate.
              type: string
            InactiveDate:
              description: Specifies the inactive date for the certificate.
              type: string
            Description:
              description: A textual description for the certificate.
              type: string
              pattern: ^[\w\- ]*$
              minLength: 1
              maxLength: 200
            Tags:
              description: Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Arn:
              description: Specifies the unique Amazon Resource Name (ARN) for the agreement.
              type: string
              pattern: arn:.*
              minLength: 20
              maxLength: 1600
            CertificateId:
              description: A unique identifier for the certificate.
              type: string
              pattern: ^cert-([0-9a-f]{17})$
              minLength: 22
              maxLength: 22
            Status:
              description: A status description for the certificate.
              type: string
              enum:
                - ACTIVE
                - PENDING
                - INACTIVE
            Type:
              description: Describing the type of certificate. With or without a private key.
              type: string
              enum:
                - CERTIFICATE
                - CERTIFICATE_WITH_PRIVATE_KEY
            Serial:
              description: Specifies Certificate's serial.
              type: string
              pattern: ^[\p{XDigit}{2}:?]*
              minLength: 0
              maxLength: 48
            NotBeforeDate:
              description: Specifies the not before date for the certificate.
              type: string
            NotAfterDate:
              description: Specifies the not after date for the certificate.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateCertificateRequest
      type: object
      required: []
    CreateConnectorRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccessRole:
              description: Specifies the access role for the connector.
              type: string
              pattern: arn:.*role/.*
              minLength: 20
              maxLength: 2048
            As2Config:
              description: Configuration for an AS2 connector.
              type: object
              properties:
                LocalProfileId:
                  type: string
                  description: A unique identifier for the local profile.
                  pattern: ^p-([0-9a-f]{17})$
                  minLength: 19
                  maxLength: 19
                PartnerProfileId:
                  type: string
                  description: A unique identifier for the partner profile.
                  pattern: ^p-([0-9a-f]{17})$
                  minLength: 19
                  maxLength: 19
                MessageSubject:
                  type: string
                  description: The message subject for this AS2 connector configuration.
                  pattern: ^[\p{Print}\p{Blank}]+
                  minLength: 1
                  maxLength: 1024
                Compression:
                  type: string
                  description: Compression setting for this AS2 connector configuration.
                  enum:
                    - ZLIB
                    - DISABLED
                EncryptionAlgorithm:
                  type: string
                  description: Encryption algorithm for this AS2 connector configuration.
                  enum:
                    - AES128_CBC
                    - AES192_CBC
                    - AES256_CBC
                    - NONE
                SigningAlgorithm:
                  type: string
                  description: Signing algorithm for this AS2 connector configuration.
                  enum:
                    - SHA256
                    - SHA384
                    - SHA512
                    - SHA1
                    - NONE
                MdnSigningAlgorithm:
                  type: string
                  description: MDN Signing algorithm for this AS2 connector configuration.
                  enum:
                    - SHA256
                    - SHA384
                    - SHA512
                    - SHA1
                    - NONE
                    - DEFAULT
                MdnResponse:
                  type: string
                  description: MDN Response setting for this AS2 connector configuration.
                  enum:
                    - SYNC
                    - NONE
                BasicAuthSecretId:
                  type: string
                  description: ARN or name of the secret in AWS Secrets Manager which contains the credentials for Basic authentication. If empty, Basic authentication is disabled for the AS2 connector
                  minLength: 0
                  maxLength: 2048
              additionalProperties: false
            SftpConfig:
              description: Configuration for an SFTP connector.
              type: object
              properties:
                UserSecretId:
                  type: string
                  description: ARN or name of the secret in AWS Secrets Manager which contains the SFTP user's private keys or passwords.
                  minLength: 1
                  maxLength: 2048
                TrustedHostKeys:
                  description: List of public host keys, for the external server to which you are connecting.
                  type: array
                  maxItems: 10
                  uniqueItems: false
                  x-insertionOrder: false
                  items:
                    $ref: '#/components/schemas/SftpConnectorTrustedHostKey'
              additionalProperties: false
            Arn:
              description: Specifies the unique Amazon Resource Name (ARN) for the connector.
              type: string
              pattern: arn:.*
              minLength: 20
              maxLength: 1600
            ConnectorId:
              description: A unique identifier for the connector.
              type: string
              pattern: ^c-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
            LoggingRole:
              description: Specifies the logging role for the connector.
              type: string
              pattern: arn:.*role/.*
              minLength: 20
              maxLength: 2048
            Tags:
              description: Key-value pairs that can be used to group and search for connectors. Tags are metadata attached to connectors for any purpose.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Url:
              description: URL for Connector
              type: string
              maxLength: 255
          x-stackQL-stringOnly: true
      x-title: CreateConnectorRequest
      type: object
      required: []
    CreateProfileRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            As2Id:
              description: AS2 identifier agreed with a trading partner.
              type: string
              minLength: 1
              maxLength: 128
            ProfileType:
              description: Enum specifying whether the profile is local or associated with a trading partner.
              type: string
              enum:
                - LOCAL
                - PARTNER
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              maxItems: 50
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            CertificateIds:
              description: List of the certificate IDs associated with this profile to be used for encryption and signing of AS2 messages.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/CertificateId'
            Arn:
              description: Specifies the unique Amazon Resource Name (ARN) for the profile.
              type: string
              pattern: arn:.*
              minLength: 20
              maxLength: 1600
            ProfileId:
              description: A unique identifier for the profile
              type: string
              pattern: ^p-([0-9a-f]{17})$
              minLength: 19
              maxLength: 19
          x-stackQL-stringOnly: true
      x-title: CreateProfileRequest
      type: object
      required: []
    CreateWorkflowRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            OnExceptionSteps:
              description: Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.
              type: array
              maxItems: 8
              uniqueItems: true
              x-insertionOrder: true
              items:
                $ref: '#/components/schemas/WorkflowStep'
            Steps:
              description: Specifies the details for the steps that are in the specified workflow.
              type: array
              maxItems: 8
              uniqueItems: true
              x-insertionOrder: true
              items:
                $ref: '#/components/schemas/WorkflowStep'
            Tags:
              description: Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Description:
              description: A textual description for the workflow.
              type: string
              pattern: ^[\w\- ]*$
              minLength: 0
              maxLength: 256
            WorkflowId:
              description: A unique identifier for the workflow.
              type: string
              pattern: ^w-([a-z0-9]{17})$
              minLength: 19
              maxLength: 19
            Arn:
              description: Specifies the unique Amazon Resource Name (ARN) for the workflow.
              type: string
              pattern: arn:.*
              minLength: 20
              maxLength: 1600
          x-stackQL-stringOnly: true
      x-title: CreateWorkflowRequest
      type: object
      required: []
    region:
      type: string
      description: The AWS region
    servers:
      description: List of Transfer family servers in a region
      type: object
      additionalProperties: false
      properties:
        arn:
          type: string
          description: Unique Amazon Resource Name (ARN) for the server.
        domain:
          type: string
          description: The domain of the server
        endpoint_type:
          type: string
          description: The endpoint type of the server
        identity_provider_type:
          type: string
          description: The mode of authentication for a server. The default
        logging_role:
          type: string
          description: The logging role of the server
        server_id:
          type: string
          description: The server id
        state:
          type: string
          description: >-
            Describes the condition of a file transfer protocol-enabled server with respect to its ability to perform file operations. There are six possible states: OFFLINE, ONLINE, STARTING, STOPPING, START_FAILED, and STOP_FAILED. OFFLINE indicates that the server exists, but that it is not available for file operations. ONLINE indicates that the server is available to perform file operations. STARTING indicates that the server's was instantiated, but the server is not yet available to
            perform file operations. Under normal conditions, it can take a couple of minutes for the server to be completely operational. Both START_FAILED and STOP_FAILED are error conditions.
        user_count:
          type: integer
          description: The user count of the server
        region:
          $ref: '#/components/schemas/region'
      x-example-where-clause: WHERE region = '<region>'
    server:
      description: Details of a Transfer family server
      type: object
      additionalProperties: false
      properties:
        data__ServerId:
          type: string
          description: The server id
        arn:
          type: string
          description: Unique Amazon Resource Name (ARN) for the server.
        certificate:
          type: string
          description: The certificate of the server
        domain:
          type: string
          description: The domain of the server
        endpoint_details:
          type: object
          description: The virtual private cloud (VPC) endpoint settings that are configured for your file transfer protocol-enabled server. With a VPC endpoint, you can restrict access to your server and resources only within your VPC. To control incoming internet traffic, invoke the UpdateServer API and attach an Elastic IP address to your server's endpoint.
        endpoint_type:
          type: string
          description: The endpoint type of the server
        host_key_fingerprint:
          type: string
          description: The host key fingerprint of the server
        identity_provider_details:
          type: object
          description: Returns information related to the type of user authentication that is in use for a file transfer protocol-enabled server's users. A server can have only one method of authentication.
        identity_provider_type:
          type: string
          description: The mode of authentication for a server. The default
        logging_role:
          type: string
          description: The logging role of the server
        post_authentication_login_banner:
          type: string
          description: The post authentication login banner of the server
        pre_authentication_login_banner:
          type: string
          description: The pre authentication login banner of the server
        protocol_details:
          type: object
          description: The protocol settings that are configured for your server
        protocols:
          type: array
          description: The protocols of the server
        s3_storage_options:
          type: object
          description: The S3 storage options of the server
        security_policy_name:
          type: string
          description: The security policy name of the server
        server_id:
          type: string
          description: The server id
        state:
          type: string
          description: >-
            Describes the condition of a file transfer protocol-enabled server with respect to its ability to perform file operations. There are six possible states: OFFLINE, ONLINE, STARTING, STOPPING, START_FAILED, and STOP_FAILED. OFFLINE indicates that the server exists, but that it is not available for file operations. ONLINE indicates that the server is available to perform file operations. STARTING indicates that the server's was instantiated, but the server is not yet available to
            perform file operations. Under normal conditions, it can take a couple of minutes for the server to be completely operational. Both START_FAILED and STOP_FAILED are error conditions.
        structured_log_destinations:
          type: array
          description: The structured log destinations of the server
        tags:
          type: array
          description: The tags of the server
        user_count:
          type: integer
          description: The user count of the server
        workflow_details:
          type: object
          description: Container for the WorkflowDetail data type. It is used by actions that trigger a workflow to begin execution.
        region:
          $ref: '#/components/schemas/region'
      x-example-where-clause: WHERE region = '<region>' AND data__ServerId = '<s-serverid>'
    server_tags:
      description: Details of a Transfer family server tags
      type: object
      additionalProperties: false
      properties:
        data__ServerId:
          type: string
          description: The server id
        region:
          $ref: '#/components/schemas/region'
        key:
          type: string
          description: The key of the tag
        value:
          type: string
          description: The value of the tag
      x-example-where-clause: WHERE region = '<region>' AND data__ServerId = '<s-serverid>'
    user:
      description: Details for a Transfer family user in a server
      type: object
      additionalProperties: false
      properties:
        data__ServerId:
          type: string
          description: The server id
        data__UserName:
          type: string
          description: The user name
        arn:
          type: string
          description: Unique Amazon Resource Name (ARN) for the user.
        home_directory:
          type: string
          description: The home directory of the user
        home_directory_mappings:
          type: array
          description: >-
            Logical directory mappings that specify what Amazon S3 paths and keys should be visible to your user and how you want to make them visible. You will need to specify the "<bucket-name>/<prefix>" name of the Amazon S3 bucket and the "<prefix>" value for the Amazon S3 key in the <code>HomeDirectory</code> parameter. The following example will map the "<prefix>" value "<bucket-name>/<prefix>" to "<prefix>">. The "<prefix>" value does not need to be specified if it is the same as the
            "<bucket-name>". The mapping will be visible to the user in the "<prefix>" folder of their Amazon S3 storage. This is often referred to as 'logical directory mappings'. In the example, the user will see their Amazon S3 storage as the "<prefix>" folder in the "<bucket-name>" bucket.
        home_directory_type:
          type: string
          description: The type of home directory to provide for the user. If you set it to <code>PATH</code>, the user will see the immediate contents of their Amazon S3 storage location. If you set it to <code>LOGICAL</code>, you will provide mappings in the <code>HomeDirectoryMappings</code> for what they will see at the root of their Amazon S3 storage location.
        policy:
          type: string
          description: The policy of the user
        posix_profile:
          type: object
          description: The full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary group IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. The POSIX permissions that are set on files and directories in your file system determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.
        role:
          type: string
          description: The role of the server
        ssh_public_keys:
          type: array
          description: The SSH public keys of the server
        tags:
          type: array
          description: The tags of the server
        user_name:
          type: string
          description: The user name
        region:
          $ref: '#/components/schemas/region'
      x-example-where-clause: WHERE region = '<region>' AND data__ServerId = '<s-serverid>' AND data__UserName = '<my_user_name>'
    users:
      description: List of Transfer family users in a server
      type: object
      additionalProperties: false
      properties:
        data__ServerId:
          type: string
          description: The server id
        user_name:
          type: string
          description: The user name
        arn:
          type: string
          description: Unique Amazon Resource Name (ARN) for the user.
        home_directory_type:
          type: string
          description: The home directory type for the user
        role:
          type: string
          description: The role of the server
        ssh_public_key_count:
          type: integer
          description: The SSH public key count of the server
        region:
          $ref: '#/components/schemas/region'
      x-example-where-clause: WHERE region = '<region>' AND data__ServerId = '<s-serverid>'
    user_public_keys:
      description: Details of a Transfer family server tags
      type: object
      additionalProperties: false
      properties:
        data__ServerId:
          type: string
          description: The server id
        data__UserName:
          type: string
          description: The user name
        region:
          $ref: '#/components/schemas/region'
        ssh_public_key_body:
          type: string
          description: The SSH public key body
        ssh_public_key_id:
          type: string
          description: The SSH public key id
        date_imported:
          type: string
          description: The date imported
      x-example-where-clause: WHERE region = '<region>' AND data__ServerId = '<s-serverid>' AND data__UserName = '<my_user_name>'
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    agreements:
      name: agreements
      id: aws.transfer.agreements
      x-cfn-schema-name: Agreement
      x-cfn-type-name: AWS::Transfer::Agreement
      x-identifiers:
        - AgreementId
        - ServerId
      x-type: list
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Agreement&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Agreement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Agreement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/agreements/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/agreements/methods/delete_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AgreementId') as agreement_id,
              JSON_EXTRACT(Properties, '$.ServerId') as server_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Agreement'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AgreementId') as agreement_id,
                json_extract_path_text(Properties, 'ServerId') as server_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Agreement'
                AND region = 'us-east-1'
    agreement:
      name: agreement
      id: aws.transfer.agreement
      x-cfn-schema-name: Agreement
      x-cfn-type-name: AWS::Transfer::Agreement
      x-identifiers:
        - AgreementId
        - ServerId
      x-type: get
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Agreement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/agreement/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ServerId') as server_id,
              JSON_EXTRACT(Properties, '$.LocalProfileId') as local_profile_id,
              JSON_EXTRACT(Properties, '$.PartnerProfileId') as partner_profile_id,
              JSON_EXTRACT(Properties, '$.BaseDirectory') as base_directory,
              JSON_EXTRACT(Properties, '$.AccessRole') as access_role,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AgreementId') as agreement_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Agreement'
              AND data__Identifier = '<AgreementId>|<ServerId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ServerId') as server_id,
                json_extract_path_text(Properties, 'LocalProfileId') as local_profile_id,
                json_extract_path_text(Properties, 'PartnerProfileId') as partner_profile_id,
                json_extract_path_text(Properties, 'BaseDirectory') as base_directory,
                json_extract_path_text(Properties, 'AccessRole') as access_role,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'AgreementId') as agreement_id,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Agreement'
                AND data__Identifier = '<AgreementId>|<ServerId>'
                AND region = 'us-east-1'
    certificates:
      name: certificates
      id: aws.transfer.certificates
      x-cfn-schema-name: Certificate
      x-cfn-type-name: AWS::Transfer::Certificate
      x-identifiers:
        - CertificateId
      x-type: list
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Certificate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Certificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Certificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/certificates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/certificates/methods/delete_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CertificateId') as certificate_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Certificate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CertificateId') as certificate_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Certificate'
                AND region = 'us-east-1'
    certificate:
      name: certificate
      id: aws.transfer.certificate
      x-cfn-schema-name: Certificate
      x-cfn-type-name: AWS::Transfer::Certificate
      x-identifiers:
        - CertificateId
      x-type: get
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Certificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/certificate/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Usage') as usage,
              JSON_EXTRACT(Properties, '$.Certificate') as certificate,
              JSON_EXTRACT(Properties, '$.CertificateChain') as certificate_chain,
              JSON_EXTRACT(Properties, '$.PrivateKey') as private_key,
              JSON_EXTRACT(Properties, '$.ActiveDate') as active_date,
              JSON_EXTRACT(Properties, '$.InactiveDate') as inactive_date,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CertificateId') as certificate_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Serial') as serial,
              JSON_EXTRACT(Properties, '$.NotBeforeDate') as not_before_date,
              JSON_EXTRACT(Properties, '$.NotAfterDate') as not_after_date
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Certificate'
              AND data__Identifier = '<CertificateId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Usage') as usage,
                json_extract_path_text(Properties, 'Certificate') as certificate,
                json_extract_path_text(Properties, 'CertificateChain') as certificate_chain,
                json_extract_path_text(Properties, 'PrivateKey') as private_key,
                json_extract_path_text(Properties, 'ActiveDate') as active_date,
                json_extract_path_text(Properties, 'InactiveDate') as inactive_date,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'CertificateId') as certificate_id,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'Serial') as serial,
                json_extract_path_text(Properties, 'NotBeforeDate') as not_before_date,
                json_extract_path_text(Properties, 'NotAfterDate') as not_after_date
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Certificate'
                AND data__Identifier = '<CertificateId>'
                AND region = 'us-east-1'
    connectors:
      name: connectors
      id: aws.transfer.connectors
      x-cfn-schema-name: Connector
      x-cfn-type-name: AWS::Transfer::Connector
      x-identifiers:
        - ConnectorId
      x-type: list
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Connector&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Connector"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Connector"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/delete_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConnectorId') as connector_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Connector'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ConnectorId') as connector_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Connector'
                AND region = 'us-east-1'
    connector:
      name: connector
      id: aws.transfer.connector
      x-cfn-schema-name: Connector
      x-cfn-type-name: AWS::Transfer::Connector
      x-identifiers:
        - ConnectorId
      x-type: get
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Connector"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/connector/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessRole') as access_role,
              JSON_EXTRACT(Properties, '$.As2Config') as as2_config,
              JSON_EXTRACT(Properties, '$.SftpConfig') as sftp_config,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ConnectorId') as connector_id,
              JSON_EXTRACT(Properties, '$.LoggingRole') as logging_role,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Url') as url
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Connector'
              AND data__Identifier = '<ConnectorId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AccessRole') as access_role,
                json_extract_path_text(Properties, 'As2Config') as as2_config,
                json_extract_path_text(Properties, 'SftpConfig') as sftp_config,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ConnectorId') as connector_id,
                json_extract_path_text(Properties, 'LoggingRole') as logging_role,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Url') as url
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Connector'
                AND data__Identifier = '<ConnectorId>'
                AND region = 'us-east-1'
    profiles:
      name: profiles
      id: aws.transfer.profiles
      x-cfn-schema-name: Profile
      x-cfn-type-name: AWS::Transfer::Profile
      x-identifiers:
        - ProfileId
      x-type: list
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Profile&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Profile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Profile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/profiles/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/profiles/methods/delete_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProfileId') as profile_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Profile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ProfileId') as profile_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Profile'
                AND region = 'us-east-1'
    profile:
      name: profile
      id: aws.transfer.profile
      x-cfn-schema-name: Profile
      x-cfn-type-name: AWS::Transfer::Profile
      x-identifiers:
        - ProfileId
      x-type: get
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Profile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/profile/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.As2Id') as as2_id,
              JSON_EXTRACT(Properties, '$.ProfileType') as profile_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CertificateIds') as certificate_ids,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ProfileId') as profile_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Profile'
              AND data__Identifier = '<ProfileId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'As2Id') as as2_id,
                json_extract_path_text(Properties, 'ProfileType') as profile_type,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'CertificateIds') as certificate_ids,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ProfileId') as profile_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Profile'
                AND data__Identifier = '<ProfileId>'
                AND region = 'us-east-1'
    workflows:
      name: workflows
      id: aws.transfer.workflows
      x-cfn-schema-name: Workflow
      x-cfn-type-name: AWS::Transfer::Workflow
      x-identifiers:
        - WorkflowId
      x-type: list
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Workflow&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Workflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Workflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/delete_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkflowId') as workflow_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Workflow'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'WorkflowId') as workflow_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Transfer::Workflow'
                AND region = 'us-east-1'
    workflow:
      name: workflow
      id: aws.transfer.workflow
      x-cfn-schema-name: Workflow
      x-cfn-type-name: AWS::Transfer::Workflow
      x-identifiers:
        - WorkflowId
      x-type: get
      methods:
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Transfer::Workflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        update:
          - $ref: '#/components/x-stackQL-resources/workflow/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.OnExceptionSteps') as on_exception_steps,
              JSON_EXTRACT(Properties, '$.Steps') as steps,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.WorkflowId') as workflow_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Workflow'
              AND data__Identifier = '<WorkflowId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'OnExceptionSteps') as on_exception_steps,
                json_extract_path_text(Properties, 'Steps') as steps,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'WorkflowId') as workflow_id,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Transfer::Workflow'
                AND data__Identifier = '<WorkflowId>'
                AND region = 'us-east-1'
    servers:
      name: servers
      id: aws.transfer.servers
      x-cfn-schema-name: servers
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              Arn as arn,
              Domain as domain,
              EndpointType as endpoint_type,
              IdentityProviderType as identity_provider_type,
              LoggingRole as logging_role,
              ServerId as server_id,
              State as state,
              UserCount as user_count,
              region
              FROM aws.transfer_api.servers
              WHERE region = 'us-east-1'
    server:
      name: server
      id: aws.transfer.server
      x-cfn-schema-name: server
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              data__ServerId,
              Arn as arn,
              Certificate as certificate,
              Domain as domain,
              EndpointDetails as endpoint_details,
              EndpointType as endpoint_type,
              HostKeyFingerprint as host_key_fingerprint,
              IdentityProviderDetails as identity_provider_details,
              IdentityProviderType as identity_provider_type,
              LoggingRole as logging_role,
              PostAuthenticationLoginBanner as post_authentication_login_banner,
              PreAuthenticationLoginBanner as pre_authentication_login_banner,
              ProtocolDetails as protocol_details,
              Protocols as protocols,
              S3StorageOptions as s3_storage_options,
              SecurityPolicyName as security_policy_name,
              ServerId as server_id,
              State as state,
              StructuredLogDestinations as structured_log_destinations,
              Tags as tags,
              UserCount as user_count,
              WorkflowDetails as workflow_details,
              region
              FROM aws.transfer_api.servers
              WHERE region = 'us-east-1'
              AND data__ServerId = 's-ab1234567890123cd'
    server_tags:
      name: server_tags
      id: aws.transfer.server_tags
      x-cfn-schema-name: server_tags
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              data__ServerId,
              region,
              JSON_EXTRACT(json_each.value, '$.Key') as key,
              JSON_EXTRACT(json_each.value, '$.Value') as value
              FROM aws.transfer_api.servers, json_each(Tags)
              WHERE region = 'us-east-1'
              AND data__ServerId = 's-ab1234567890123cd'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                  data__ServerId,
                  region,
                  json_array_elements_text(Tags)::jsonb ->> 'Key' as key,
                  json_array_elements_text(Tags)::jsonb ->> 'Value' as value
                FROM 
                  aws.transfer_api.servers
                WHERE 
                  region = 'us-east-1'
                  AND data__ServerId = 's-ab1234567890123cd'
    user:
      name: user
      id: aws.transfer.user
      x-cfn-schema-name: user
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              data__ServerId,
              data__UserName,
              Arn as arn,
              HomeDirectory as home_directory,
              HomeDirectoryMappings as home_directory_mappings,
              HomeDirectoryType as home_directory_type,
              Policy as policy,
              PosixProfile as posix_profile,
              Role as role,
              SshPublicKeys as ssh_public_keys,
              Tags as tags,
              UserName as user_name,
              region
              FROM aws.transfer_api.users
              WHERE region = 'us-east-1'
              AND data__ServerId = 's-ab1234567890123cd'
              AND data__UserName = 'my_user_name'
    users:
      name: users
      id: aws.transfer.users
      x-cfn-schema-name: users
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              data__ServerId,
              UserName as user_name,
              Arn as arn,
              HomeDirectoryType as home_directory_type,
              Role as role,
              SshPublicKeyCount as ssh_public_key_count,
              region
              FROM aws.transfer_api.users
              WHERE region = 'us-east-1'
              AND data__ServerId = 's-ab1234567890123cd'
    user_public_keys:
      name: user_public_keys
      id: aws.transfer.user_public_keys
      x-cfn-schema-name: user_public_keys
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              data__ServerId,
              data__UserName,
              region,
              JSON_EXTRACT(json_each.value, '$.SshPublicKeyBody') as ssh_public_key_body,
              JSON_EXTRACT(json_each.value, '$.SshPublicKeyId') as ssh_public_key_id,
              JSON_EXTRACT(json_each.value, '$.DateImported') as date_imported
              FROM aws.transfer_api.users, json_each(SshPublicKeys)
              WHERE region = 'us-east-1'
              AND data__ServerId = 's-ab1234567890123cd'
              AND data__UserName = 'my_user_name'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                  data__ServerId,
                  data__UserName,
                  region,
                  json_array_elements_text(SshPublicKeys)::jsonb ->> 'SshPublicKeyBody' as ssh_public_key_body,
                  json_array_elements_text(SshPublicKeys)::jsonb ->> 'SshPublicKeyId' as ssh_public_key_id,
                  json_array_elements_text(SshPublicKeys)::jsonb ->> 'DateImported' as date_imported
                FROM 
                  aws.transfer_api.users
                WHERE 
                  region = 'us-east-1'
                  AND data__ServerId = 's-ab1234567890123cd'
                  AND data__UserName = 'my_user_name'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Agreement&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAgreement
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAgreementRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Certificate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCertificate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCertificateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Connector&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateConnector
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateConnectorRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Profile&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateProfile
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Workflow&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateWorkflow
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
