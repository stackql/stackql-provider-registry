openapi: 3.0.0
info:
  title: Lightsail
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Alarm:
      type: object
      properties:
        AlarmName:
          description: The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
          type: string
          pattern: \w[\w\-]*\w
        MonitoredResourceName:
          description: The name of the Lightsail resource that the alarm monitors.
          type: string
        MetricName:
          description: The name of the metric to associate with the alarm.
          type: string
        ComparisonOperator:
          description: The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
          type: string
        ContactProtocols:
          description: The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        AlarmArn:
          type: string
        DatapointsToAlarm:
          description: The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
          type: integer
        EvaluationPeriods:
          description: The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N.
          type: integer
        NotificationEnabled:
          description: Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
          type: boolean
        NotificationTriggers:
          description: The alarm states that trigger a notification.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Threshold:
          description: The value against which the specified statistic is compared.
          type: number
        TreatMissingData:
          description: Sets how this alarm will handle missing data points.
          type: string
        State:
          description: The current state of the alarm.
          type: string
      required:
        - AlarmName
        - MonitoredResourceName
        - MetricName
        - ComparisonOperator
        - EvaluationPeriods
        - Threshold
      x-stackql-resource-name: alarm
      description: Resource Type definition for AWS::Lightsail::Alarm
      x-type-name: AWS::Lightsail::Alarm
      x-stackql-primary-identifier:
        - AlarmName
      x-create-only-properties:
        - AlarmName
        - MonitoredResourceName
        - MetricName
      x-read-only-properties:
        - AlarmArn
        - State
      x-required-properties:
        - AlarmName
        - MonitoredResourceName
        - MetricName
        - ComparisonOperator
        - EvaluationPeriods
        - Threshold
      x-taggable: true
      x-required-permissions:
        create:
          - lightsail:PutAlarm
          - lightsail:GetAlarms
        read:
          - lightsail:GetAlarms
        update:
          - lightsail:PutAlarm
          - lightsail:GetAlarms
        delete:
          - lightsail:DeleteAlarm
          - lightsail:GetAlarms
        list:
          - lightsail:GetAlarms
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Key
      additionalProperties: false
    AccessRules:
      description: An object that sets the public accessibility of objects in the specified bucket.
      type: object
      properties:
        GetObject:
          type: string
          description: Specifies the anonymous access to all objects in a bucket.
        AllowPublicOverrides:
          type: boolean
          description: A Boolean value that indicates whether the access control list (ACL) permissions that are applied to individual objects override the getObject option that is currently specified.
      additionalProperties: false
    Bucket:
      type: object
      properties:
        BucketName:
          description: The name for the bucket.
          type: string
          pattern: ^[a-z0-9][a-z0-9-]{1,52}[a-z0-9]$
          minLength: 3
          maxLength: 54
        BundleId:
          description: The ID of the bundle to use for the bucket.
          type: string
        BucketArn:
          type: string
        ObjectVersioning:
          description: Specifies whether to enable or disable versioning of objects in the bucket.
          type: boolean
        AccessRules:
          $ref: '#/components/schemas/AccessRules'
        ResourcesReceivingAccess:
          description: The names of the Lightsail resources for which to set bucket access.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        ReadOnlyAccessAccounts:
          description: An array of strings to specify the AWS account IDs that can access the bucket.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Url:
          description: The URL of the bucket.
          type: string
        AbleToUpdateBundle:
          description: Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle. You can update a bucket's bundle only one time within a monthly AWS billing cycle.
          type: boolean
      required:
        - BucketName
        - BundleId
      x-stackql-resource-name: bucket
      description: Resource Type definition for AWS::Lightsail::Bucket
      x-type-name: AWS::Lightsail::Bucket
      x-stackql-primary-identifier:
        - BucketName
      x-create-only-properties:
        - BucketName
      x-read-only-properties:
        - BucketArn
        - Url
        - AbleToUpdateBundle
      x-required-properties:
        - BucketName
        - BundleId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - lightsail:TagResource
          - lightsail:UntagResource
      x-required-permissions:
        create:
          - lightsail:CreateBucket
          - lightsail:GetBuckets
          - lightsail:GetInstance
          - lightsail:UpdateBucket
          - lightsail:UpdateBucketBundle
          - lightsail:SetResourceAccessForBucket
          - lightsail:TagResource
          - lightsail:UntagResource
        read:
          - lightsail:GetBuckets
        delete:
          - lightsail:DeleteBucket
          - lightsail:GetBuckets
        list:
          - lightsail:GetBuckets
        update:
          - lightsail:GetBuckets
          - lightsail:GetInstance
          - lightsail:UpdateBucket
          - lightsail:UpdateBucketBundle
          - lightsail:SetResourceAccessForBucket
          - lightsail:TagResource
          - lightsail:UntagResource
    Certificate:
      type: object
      properties:
        CertificateName:
          description: The name for the certificate.
          type: string
        DomainName:
          description: The domain name (e.g., example.com ) for the certificate.
          type: string
        SubjectAlternativeNames:
          description: An array of strings that specify the alternate domains (e.g., example2.com) and subdomains (e.g., blog.example.com) for the certificate.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        CertificateArn:
          type: string
        Status:
          description: The validation status of the certificate.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - CertificateName
        - DomainName
      x-stackql-resource-name: certificate
      description: Resource Type definition for AWS::Lightsail::Certificate.
      x-type-name: AWS::Lightsail::Certificate
      x-stackql-primary-identifier:
        - CertificateName
      x-create-only-properties:
        - CertificateName
        - DomainName
        - SubjectAlternativeNames
      x-read-only-properties:
        - CertificateArn
        - Status
      x-required-properties:
        - CertificateName
        - DomainName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - lightsail:TagResource
          - lightsail:UntagResource
      x-required-permissions:
        create:
          - lightsail:CreateCertificate
          - lightsail:GetCertificates
          - lightsail:TagResource
          - lightsail:UntagResource
        read:
          - lightsail:GetCertificates
        update:
          - lightsail:GetCertificates
          - lightsail:TagResource
          - lightsail:UntagResource
        delete:
          - lightsail:DeleteCertificate
          - lightsail:GetCertificates
        list:
          - lightsail:GetCertificates
    HealthCheckConfig:
      description: Describes the health check configuration of an Amazon Lightsail container service.
      type: object
      properties:
        HealthyThreshold:
          type: integer
          description: The number of consecutive health checks successes required before moving the container to the Healthy state. The default value is 2.
        IntervalSeconds:
          type: integer
          description: The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is 5.
        Path:
          type: string
          description: The path on the container on which to perform the health check. The default value is /.
        SuccessCodes:
          type: string
          description: The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. You can specify multiple values (for example, 200,202) or a range of values (for example, 200-299).
        TimeoutSeconds:
          type: integer
          description: The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is 2.
        UnhealthyThreshold:
          type: integer
          description: The number of consecutive health check failures required before moving the container to the Unhealthy state. The default value is 2.
      additionalProperties: false
    PublicEndpoint:
      description: Describes the settings of a public endpoint for an Amazon Lightsail container service.
      type: object
      properties:
        ContainerName:
          type: string
          description: The name of the container for the endpoint.
        ContainerPort:
          type: integer
          description: The port of the container to which traffic is forwarded to.
        HealthCheckConfig:
          $ref: '#/components/schemas/HealthCheckConfig'
          description: An object that describes the health check configuration of the container.
      additionalProperties: false
    EnvironmentVariable:
      type: object
      properties:
        Variable:
          type: string
        Value:
          type: string
      additionalProperties: false
    PortInfo:
      type: object
      properties:
        Port:
          type: string
        Protocol:
          type: string
      additionalProperties: false
    Container:
      type: object
      properties:
        ServiceName:
          description: The name for the container service.
          type: string
          pattern: ^[a-z0-9]{1,2}|[a-z0-9][a-z0-9-]+[a-z0-9]$
          minLength: 1
          maxLength: 63
        Power:
          description: The power specification for the container service.
          type: string
        ContainerArn:
          type: string
        Scale:
          description: The scale specification for the container service.
          type: integer
          minimum: 1
          maximum: 20
        PublicDomainNames:
          description: The public domain names to use with the container service, such as example.com and www.example.com.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/PublicDomainName'
        ContainerServiceDeployment:
          $ref: '#/components/schemas/ContainerServiceDeployment'
          description: Describes a container deployment configuration of an Amazon Lightsail container service.
        IsDisabled:
          description: A Boolean value to indicate whether the container service is disabled.
          type: boolean
        PrivateRegistryAccess:
          $ref: '#/components/schemas/PrivateRegistryAccess'
          description: A Boolean value to indicate whether the container service has access to private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.
        Url:
          description: The publicly accessible URL of the container service.
          type: string
        PrincipalArn:
          description: The principal ARN of the container service.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ServiceName
        - Power
        - Scale
      x-stackql-resource-name: container
      description: Resource Type definition for AWS::Lightsail::Container
      x-type-name: AWS::Lightsail::Container
      x-stackql-primary-identifier:
        - ServiceName
      x-create-only-properties:
        - ServiceName
      x-read-only-properties:
        - ContainerArn
        - Url
        - PrincipalArn
        - PrivateRegistryAccess/EcrImagePullerRole/PrincipalArn
      x-required-properties:
        - ServiceName
        - Power
        - Scale
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - lightsail:TagResource
          - lightsail:UntagResource
      x-required-permissions:
        create:
          - lightsail:CreateContainerService
          - lightsail:CreateContainerServiceDeployment
          - lightsail:GetContainerServices
          - lightsail:TagResource
          - lightsail:UntagResource
          - lightsail:UpdateContainerService
        read:
          - lightsail:GetContainerServices
        delete:
          - lightsail:DeleteContainerService
          - lightsail:GetContainerServices
        list:
          - lightsail:GetContainerServices
        update:
          - lightsail:CreateContainerServiceDeployment
          - lightsail:GetContainerServices
          - lightsail:TagResource
          - lightsail:UntagResource
          - lightsail:UpdateContainerService
    ContainerServiceDeployment:
      description: Describes a container deployment configuration of an Amazon Lightsail container service.
      type: object
      properties:
        Containers:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Container'
          description: An object that describes the configuration for the containers of the deployment.
        PublicEndpoint:
          $ref: '#/components/schemas/PublicEndpoint'
          description: An object that describes the endpoint of the deployment.
      additionalProperties: false
    PublicDomainName:
      description: The public domain name to use with the container service, such as example.com and www.example.com.
      type: object
      properties:
        CertificateName:
          type: string
        DomainNames:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
          description: An object that describes the configuration for the containers of the deployment.
      additionalProperties: false
    PrivateRegistryAccess:
      description: An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.
      type: object
      properties:
        EcrImagePullerRole:
          description: An object to describe a request to activate or deactivate the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories.
          type: object
          properties:
            IsActive:
              type: boolean
              description: A Boolean value that indicates whether to activate the role.
            PrincipalArn:
              type: string
              description: The Amazon Resource Name (ARN) of the role, if it is activated.
          additionalProperties: false
      additionalProperties: false
    RelationalDatabaseParameter:
      description: Describes the parameters of the database.
      type: object
      properties:
        AllowedValues:
          type: string
          description: Specifies the valid range of values for the parameter.
        ApplyMethod:
          type: string
          description: Indicates when parameter updates are applied. Can be immediate or pending-reboot.
        ApplyType:
          type: string
          description: Specifies the engine-specific parameter type.
        DataType:
          type: string
          description: Specifies the valid data type for the parameter.
        Description:
          type: string
          description: Provides a description of the parameter.
        IsModifiable:
          type: boolean
          description: A Boolean value indicating whether the parameter can be modified.
        ParameterName:
          type: string
          description: Specifies the name of the parameter.
        ParameterValue:
          type: string
          description: Specifies the value of the parameter.
      additionalProperties: false
    Database:
      type: object
      properties:
        RelationalDatabaseName:
          description: The name to use for your new Lightsail database resource.
          type: string
          pattern: \w[\w\-]*\w
          minLength: 2
          maxLength: 255
        DatabaseArn:
          type: string
        AvailabilityZone:
          description: The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format.
          type: string
          minLength: 1
          maxLength: 255
        RelationalDatabaseBlueprintId:
          description: The blueprint ID for your new database. A blueprint describes the major engine version of a database.
          type: string
          minLength: 1
          maxLength: 255
        RelationalDatabaseBundleId:
          description: The bundle ID for your new database. A bundle describes the performance specifications for your database.
          type: string
          minLength: 1
          maxLength: 255
        MasterDatabaseName:
          description: The name of the database to create when the Lightsail database resource is created. For MySQL, if this parameter isn't specified, no database is created in the database resource. For PostgreSQL, if this parameter isn't specified, a database named postgres is created in the database resource.
          type: string
          minLength: 1
          maxLength: 255
        MasterUsername:
          description: The name for the master user.
          type: string
          minLength: 1
          maxLength: 63
        MasterUserPassword:
          description: The password for the master user. The password can include any printable ASCII character except "/", """, or "@". It cannot contain spaces.
          type: string
          minLength: 1
          maxLength: 63
        PreferredBackupWindow:
          description: The daily time range during which automated backups are created for your new database if automated backups are enabled.
          type: string
        PreferredMaintenanceWindow:
          description: The weekly time range during which system maintenance can occur on your new database.
          type: string
        PubliclyAccessible:
          description: Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
          type: boolean
        CaCertificateIdentifier:
          description: Indicates the certificate that needs to be associated with the database.
          type: string
        BackupRetention:
          description: When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
          type: boolean
        RotateMasterUserPassword:
          description: When true, the master user password is changed to a new strong password generated by Lightsail. Use the get relational database master user password operation to get the new password.
          type: boolean
        RelationalDatabaseParameters:
          description: Update one or more parameters of the relational database.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/RelationalDatabaseParameter'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - RelationalDatabaseName
        - RelationalDatabaseBlueprintId
        - RelationalDatabaseBundleId
        - MasterDatabaseName
        - MasterUsername
      x-stackql-resource-name: database
      description: Resource Type definition for AWS::Lightsail::Database
      x-type-name: AWS::Lightsail::Database
      x-stackql-primary-identifier:
        - RelationalDatabaseName
      x-create-only-properties:
        - RelationalDatabaseName
        - AvailabilityZone
        - RelationalDatabaseBlueprintId
        - RelationalDatabaseBundleId
        - MasterDatabaseName
        - MasterUsername
      x-write-only-properties:
        - MasterUserPassword
        - RelationalDatabaseParameters
        - RotateMasterUserPassword
      x-read-only-properties:
        - DatabaseArn
      x-required-properties:
        - RelationalDatabaseName
        - RelationalDatabaseBlueprintId
        - RelationalDatabaseBundleId
        - MasterDatabaseName
        - MasterUsername
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - lightsail:TagResource
          - lightsail:UntagResource
      x-required-permissions:
        create:
          - lightsail:CreateRelationalDatabase
          - lightsail:GetRelationalDatabase
          - lightsail:GetRelationalDatabases
          - lightsail:GetRegions
          - lightsail:TagResource
          - lightsail:UntagResource
          - lightsail:UpdateRelationalDatabase
          - lightsail:UpdateRelationalDatabaseParameters
        read:
          - lightsail:GetRelationalDatabase
          - lightsail:GetRelationalDatabases
        update:
          - lightsail:GetRelationalDatabase
          - lightsail:GetRelationalDatabases
          - lightsail:TagResource
          - lightsail:UntagResource
          - lightsail:UpdateRelationalDatabase
          - lightsail:UpdateRelationalDatabaseParameters
        delete:
          - lightsail:DeleteRelationalDatabase
          - lightsail:GetRelationalDatabase
          - lightsail:GetRelationalDatabases
        list:
          - lightsail:GetRelationalDatabases
    AutoSnapshotAddOn:
      description: An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
      type: object
      properties:
        SnapshotTimeOfDay:
          type: string
          description: The daily time when an automatic snapshot will be created.
          pattern: ^[0-9]{2}:00$
      additionalProperties: false
    AddOn:
      description: A addon associate with a resource.
      type: object
      properties:
        AddOnType:
          type: string
          description: The add-on type
          minLength: 1
          maxLength: 128
        Status:
          type: string
          description: Status of the Addon
          enum:
            - Enabling
            - Disabling
            - Enabled
            - Terminating
            - Terminated
            - Disabled
            - Failed
        AutoSnapshotAddOnRequest:
          $ref: '#/components/schemas/AutoSnapshotAddOn'
      required:
        - AddOnType
      additionalProperties: false
    Location:
      description: Location of a resource.
      type: object
      properties:
        AvailabilityZone:
          type: string
          description: 'The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.'
        RegionName:
          type: string
          description: The Region Name in which to create your instance.
      additionalProperties: false
    Disk:
      description: Disk associated with the Instance.
      type: object
      properties:
        DiskName:
          description: The names to use for your new Lightsail disk.
          type: string
          pattern: ^[a-zA-Z0-9][\w\-.]*[a-zA-Z0-9]$
          minLength: 1
          maxLength: 254
        SizeInGb:
          type: string
          description: Size of the disk attached to the Instance.
        IsSystemDisk:
          type: boolean
          description: Is the Attached disk is the system disk of the Instance.
        IOPS:
          type: integer
          description: IOPS of disk.
        Path:
          type: string
          description: Path of the disk attached to the instance.
        AttachedTo:
          type: string
          description: Instance attached to the disk.
        AttachmentState:
          type: string
          description: Attachment state of the disk.
      required:
        - DiskName
        - Path
      additionalProperties: false
    CacheBehaviorPerPath:
      description: Describes the per-path cache behavior of an Amazon Lightsail content delivery network (CDN) distribution.
      type: object
      properties:
        Behavior:
          type: string
          description: The cache behavior for the specified path.
        Path:
          type: string
          description: The path to a directory or file to cached, or not cache. Use an asterisk symbol to specify wildcard directories (path/to/assets/*), and file types (*.html, *jpg, *js). Directories and file paths are case-sensitive.
      additionalProperties: false
    CookieObject:
      description: Describes whether an Amazon Lightsail content delivery network (CDN) distribution forwards cookies to the origin and, if so, which ones.
      type: object
      properties:
        CookiesAllowList:
          description: The specific cookies to forward to your distribution's origin.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Option:
          type: string
          description: 'Specifies which cookies to forward to the distribution''s origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.'
      additionalProperties: false
    HeaderObject:
      description: Describes the request headers that a Lightsail distribution bases caching on.
      type: object
      properties:
        HeadersAllowList:
          description: The specific headers to forward to your distribution's origin.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Option:
          type: string
          description: The headers that you want your distribution to forward to your origin and base caching on.
      additionalProperties: false
    QueryStringObject:
      description: Describes the query string parameters that an Amazon Lightsail content delivery network (CDN) distribution to bases caching on.
      type: object
      properties:
        QueryStringsAllowList:
          description: The specific query strings that the distribution forwards to the origin.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Option:
          type: boolean
          description: Indicates whether the distribution forwards and caches based on query strings.
      additionalProperties: false
    CacheSettings:
      description: Describes the cache settings of an Amazon Lightsail content delivery network (CDN) distribution.
      type: object
      properties:
        AllowedHTTPMethods:
          type: string
          description: The HTTP methods that are processed and forwarded to the distribution's origin.
        CachedHTTPMethods:
          type: string
          description: The HTTP method responses that are cached by your distribution.
        DefaultTTL:
          type: integer
          format: int64
          description: The default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated.
        MaximumTTL:
          type: integer
          format: int64
          description: The maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
        MinimumTTL:
          type: integer
          format: int64
          description: The minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
        ForwardedCookies:
          $ref: '#/components/schemas/CookieObject'
          description: An object that describes the cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded.
        ForwardedHeaders:
          $ref: '#/components/schemas/HeaderObject'
          description: An object that describes the headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded.
        ForwardedQueryStrings:
          $ref: '#/components/schemas/QueryStringObject'
          description: An object that describes the query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded.
      additionalProperties: false
    CacheBehavior:
      description: Describes the default cache behavior of an Amazon Lightsail content delivery network (CDN) distribution.
      type: object
      properties:
        Behavior:
          type: string
          description: The cache behavior of the distribution.
      additionalProperties: false
    InputOrigin:
      description: Describes the origin resource of an Amazon Lightsail content delivery network (CDN) distribution.
      type: object
      properties:
        Name:
          type: string
          description: The name of the origin resource.
        ProtocolPolicy:
          type: string
          description: The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
        RegionName:
          type: string
          description: The AWS Region name of the origin resource.
      additionalProperties: false
    Distribution:
      type: object
      properties:
        DistributionName:
          description: The name for the distribution.
          type: string
          pattern: \w[\w\-]*\w
        DistributionArn:
          type: string
        BundleId:
          description: The bundle ID to use for the distribution.
          type: string
        IpAddressType:
          description: The IP address type for the distribution.
          type: string
        CacheBehaviors:
          description: An array of objects that describe the per-path cache behavior for the distribution.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/CacheBehaviorPerPath'
        CacheBehaviorSettings:
          description: An object that describes the cache behavior settings for the distribution.
          $ref: '#/components/schemas/CacheSettings'
        DefaultCacheBehavior:
          description: An object that describes the default cache behavior for the distribution.
          $ref: '#/components/schemas/CacheBehavior'
        Origin:
          description: An object that describes the origin resource for the distribution, such as a Lightsail instance or load balancer.
          $ref: '#/components/schemas/InputOrigin'
        Status:
          description: The status of the distribution.
          type: string
        AbleToUpdateBundle:
          description: Indicates whether the bundle that is currently applied to your distribution, specified using the distributionName parameter, can be changed to another bundle.
          type: boolean
        IsEnabled:
          description: Indicates whether the distribution is enabled.
          type: boolean
        CertificateName:
          description: The certificate attached to the Distribution.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DistributionName
        - BundleId
        - DefaultCacheBehavior
        - Origin
      x-stackql-resource-name: distribution
      description: Resource Type definition for AWS::Lightsail::Distribution
      x-type-name: AWS::Lightsail::Distribution
      x-stackql-primary-identifier:
        - DistributionName
      x-create-only-properties:
        - DistributionName
        - IpAddressType
      x-read-only-properties:
        - DistributionArn
        - Status
        - AbleToUpdateBundle
      x-required-properties:
        - DistributionName
        - BundleId
        - DefaultCacheBehavior
        - Origin
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - lightsail:TagResource
          - lightsail:UntagResource
      x-required-permissions:
        create:
          - lightsail:AttachCertificateToDistribution
          - lightsail:CreateDistribution
          - lightsail:DetachCertificateFromDistribution
          - lightsail:GetCertificates
          - lightsail:GetCertificateDetails
          - lightsail:GetDistributions
          - lightsail:TagResource
          - lightsail:UntagResource
          - lightsail:UpdateDistribution
          - lightsail:UpdateDistributionBundle
        read:
          - lightsail:GetDistributions
        update:
          - lightsail:AttachCertificateToDistribution
          - lightsail:DetachCertificateFromDistribution
          - lightsail:GetCertificates
          - lightsail:GetCertificateDetails
          - lightsail:GetDistributions
          - lightsail:TagResource
          - lightsail:UntagResource
          - lightsail:UpdateDistribution
          - lightsail:UpdateDistributionBundle
        delete:
          - lightsail:DeleteDistribution
          - lightsail:GetDistributions
        list:
          - lightsail:GetDistributions
    ipv6Cidrs:
      description: IPv6 Cidrs
      type: array
      x-insertionOrder: false
      items:
        type: string
    cidrs:
      description: cidrs
      type: array
      x-insertionOrder: false
      items:
        type: string
    cidrListAliases:
      description: cidr List Aliases
      type: array
      x-insertionOrder: false
      items:
        type: string
    Hardware:
      description: Hardware of the Instance.
      type: object
      properties:
        CpuCount:
          type: integer
          description: CPU count of the Instance.
        RamSizeInGb:
          type: integer
          description: RAM Size of the Instance.
        Disks:
          description: Disks attached to the Instance.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Disk'
      additionalProperties: false
    State:
      description: Current State of the Instance.
      type: object
      properties:
        Code:
          type: integer
          description: Status code of the Instance.
        Name:
          type: string
          description: Status code of the Instance.
      additionalProperties: false
    Port:
      description: Port of the Instance.
      type: object
      properties:
        FromPort:
          type: integer
          description: From Port of the Instance.
        ToPort:
          type: integer
          description: To Port of the Instance.
        Protocol:
          type: string
          description: Port Protocol of the Instance.
        AccessFrom:
          type: string
          description: Access From Protocol of the Instance.
        AccessType:
          type: string
          description: Access Type Protocol of the Instance.
        CommonName:
          type: string
          description: CommonName for Protocol of the Instance.
        AccessDirection:
          type: string
          description: Access Direction for Protocol of the Instance(inbound/outbound).
        Ipv6Cidrs:
          $ref: '#/components/schemas/ipv6Cidrs'
        CidrListAliases:
          $ref: '#/components/schemas/cidrListAliases'
        Cidrs:
          $ref: '#/components/schemas/cidrs'
      additionalProperties: false
    MonthlyTransfer:
      description: Monthly Transfer of the Instance.
      type: object
      properties:
        GbPerMonthAllocated:
          type: string
          description: GbPerMonthAllocated of the Instance.
      additionalProperties: false
    Networking:
      description: Networking of the Instance.
      type: object
      properties:
        Ports:
          description: Ports to the Instance.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Port'
        MonthlyTransfer:
          $ref: '#/components/schemas/MonthlyTransfer'
      required:
        - Ports
      additionalProperties: false
    Instance:
      type: object
      properties:
        SupportCode:
          description: Support code to help identify any issues
          type: string
        ResourceType:
          description: Resource type of Lightsail instance.
          type: string
        IsStaticIp:
          description: Is the IP Address of the Instance is the static IP
          type: boolean
        PrivateIpAddress:
          description: Private IP Address of the Instance
          type: string
        PublicIpAddress:
          description: Public IP Address of the Instance
          type: string
        Ipv6Addresses:
          description: IPv6 addresses of the instance
          type: array
          x-insertionOrder: false
          items:
            type: string
        Location:
          $ref: '#/components/schemas/Location'
        Hardware:
          $ref: '#/components/schemas/Hardware'
        State:
          $ref: '#/components/schemas/State'
        Networking:
          $ref: '#/components/schemas/Networking'
        UserName:
          description: Username of the  Lightsail instance.
          type: string
        SshKeyName:
          description: SSH Key Name of the  Lightsail instance.
          type: string
        InstanceName:
          description: The names to use for your new Lightsail instance.
          type: string
          pattern: ^[a-zA-Z0-9][\w\-.]*[a-zA-Z0-9]$
          minLength: 1
          maxLength: 254
        AvailabilityZone:
          description: 'The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.'
          type: string
          minLength: 1
          maxLength: 255
        BundleId:
          description: The bundle of specification information for your virtual private server (or instance ), including the pricing plan (e.g., micro_1_0 ).
          type: string
          minLength: 1
          maxLength: 255
        BlueprintId:
          description: The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0 ). Use the get blueprints operation to return a list of available images (or blueprints ).
          type: string
          minLength: 1
          maxLength: 255
        AddOns:
          description: An array of objects representing the add-ons to enable for the new instance.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AddOn'
        UserData:
          description: A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.
          type: string
        KeyPairName:
          description: The name of your key pair.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        InstanceArn:
          type: string
      required:
        - InstanceName
        - BlueprintId
        - BundleId
      x-stackql-resource-name: instance
      description: Resource Type definition for AWS::Lightsail::Instance
      x-type-name: AWS::Lightsail::Instance
      x-stackql-primary-identifier:
        - InstanceName
      x-create-only-properties:
        - InstanceName
        - BlueprintId
        - BundleId
        - AvailabilityZone
      x-write-only-properties:
        - UserData
      x-read-only-properties:
        - InstanceArn
        - SshKeyName
        - SupportCode
        - ResourceType
        - IsStaticIp
        - PrivateIpAddress
        - PublicIpAddress
        - Ipv6Addresses
        - Location/AvailabilityZone
        - Location/RegionName
        - Hardware/CpuCount
        - Hardware/RamSizeInGb
        - State/Code
        - State/Name
        - UserName
        - Networking/MonthlyTransfer/GbPerMonthAllocated
      x-required-properties:
        - InstanceName
        - BlueprintId
        - BundleId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - lightsail:TagResource
          - lightsail:UntagResource
      x-required-permissions:
        create:
          - lightsail:CreateInstances
          - lightsail:GetInstances
          - lightsail:EnableAddOn
          - lightsail:GetInstance
          - lightsail:DisableAddOn
          - lightsail:PutInstancePublicPorts
          - lightsail:AttachDisk
          - lightsail:DetachDisk
          - lightsail:StartInstance
          - lightsail:StopInstance
          - lightsail:GetDisk
          - lightsail:GetRegions
          - lightsail:TagResource
          - lightsail:UntagResource
        read:
          - lightsail:GetInstances
          - lightsail:GetInstance
        delete:
          - lightsail:GetInstances
          - lightsail:GetInstance
          - lightsail:DeleteInstance
        list:
          - lightsail:GetInstances
        update:
          - lightsail:GetInstances
          - lightsail:GetInstance
          - lightsail:DeleteInstance
          - lightsail:EnableAddOn
          - lightsail:DisableAddOn
          - lightsail:PutInstancePublicPorts
          - lightsail:AttachDisk
          - lightsail:DetachDisk
          - lightsail:StartInstance
          - lightsail:StopInstance
          - lightsail:GetDisk
          - lightsail:TagResource
          - lightsail:UntagResource
    LoadBalancer:
      type: object
      properties:
        LoadBalancerName:
          description: The name of your load balancer.
          type: string
          pattern: \w[\w\-]*\w
        LoadBalancerArn:
          type: string
        InstancePort:
          description: The instance port where you're creating your load balancer.
          type: integer
        IpAddressType:
          description: The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
          type: string
        AttachedInstances:
          description: The names of the instances attached to the load balancer.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        HealthCheckPath:
          description: The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail uses the root path of your website (e.g., "/").
          type: string
        SessionStickinessEnabled:
          description: Configuration option to enable session stickiness.
          type: boolean
        SessionStickinessLBCookieDurationSeconds:
          description: Configuration option to adjust session stickiness cookie duration parameter.
          type: string
        TlsPolicyName:
          description: The name of the TLS policy to apply to the load balancer.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - LoadBalancerName
        - InstancePort
      x-stackql-resource-name: load_balancer
      description: Resource Type definition for AWS::Lightsail::LoadBalancer
      x-type-name: AWS::Lightsail::LoadBalancer
      x-stackql-primary-identifier:
        - LoadBalancerName
      x-create-only-properties:
        - LoadBalancerName
        - InstancePort
        - IpAddressType
      x-read-only-properties:
        - LoadBalancerArn
      x-required-properties:
        - LoadBalancerName
        - InstancePort
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - lightsail:TagResource
          - lightsail:UntagResource
      x-required-permissions:
        create:
          - lightsail:CreateLoadBalancer
          - lightsail:GetLoadBalancer
          - lightsail:GetLoadBalancers
          - lightsail:GetInstance
          - lightsail:AttachInstancesToLoadBalancer
          - lightsail:DetachInstancesFromLoadBalancer
          - lightsail:UpdateLoadBalancerAttribute
          - lightsail:TagResource
          - lightsail:UntagResource
        read:
          - lightsail:GetLoadBalancer
          - lightsail:GetLoadBalancers
        update:
          - lightsail:GetLoadBalancer
          - lightsail:GetLoadBalancers
          - lightsail:GetInstance
          - lightsail:AttachInstancesToLoadBalancer
          - lightsail:DetachInstancesFromLoadBalancer
          - lightsail:UpdateLoadBalancerAttribute
          - lightsail:TagResource
          - lightsail:UntagResource
        delete:
          - lightsail:DeleteLoadBalancer
          - lightsail:GetLoadBalancer
          - lightsail:GetLoadBalancers
        list:
          - lightsail:GetLoadBalancers
    LoadBalancerTlsCertificate:
      type: object
      properties:
        LoadBalancerName:
          description: The name of your load balancer.
          type: string
          pattern: \w[\w\-]*\w
        CertificateName:
          description: The SSL/TLS certificate name.
          type: string
        CertificateDomainName:
          description: The domain name (e.g., example.com ) for your SSL/TLS certificate.
          type: string
        CertificateAlternativeNames:
          description: An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        LoadBalancerTlsCertificateArn:
          type: string
        IsAttached:
          description: When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
          type: boolean
        HttpsRedirectionEnabled:
          description: A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
          type: boolean
        Status:
          description: The validation status of the SSL/TLS certificate.
          type: string
      required:
        - LoadBalancerName
        - CertificateName
        - CertificateDomainName
      x-stackql-resource-name: load_balancer_tls_certificate
      description: Resource Type definition for AWS::Lightsail::LoadBalancerTlsCertificate
      x-type-name: AWS::Lightsail::LoadBalancerTlsCertificate
      x-stackql-primary-identifier:
        - CertificateName
        - LoadBalancerName
      x-create-only-properties:
        - LoadBalancerName
        - CertificateName
        - CertificateDomainName
        - CertificateAlternativeNames
      x-read-only-properties:
        - LoadBalancerTlsCertificateArn
        - Status
      x-required-properties:
        - LoadBalancerName
        - CertificateName
        - CertificateDomainName
      x-taggable: true
      x-required-permissions:
        create:
          - lightsail:CreateLoadBalancerTlsCertificate
          - lightsail:GetLoadBalancerTlsCertificates
          - lightsail:GetLoadBalancer
          - lightsail:AttachLoadBalancerTlsCertificate
          - lightsail:UpdateLoadBalancerAttribute
        read:
          - lightsail:GetLoadBalancerTlsCertificates
          - lightsail:GetLoadBalancer
        update:
          - lightsail:AttachLoadBalancerTlsCertificate
          - lightsail:GetLoadBalancerTlsCertificates
          - lightsail:GetLoadBalancer
          - lightsail:UpdateLoadBalancerAttribute
        delete:
          - lightsail:DeleteLoadBalancerTlsCertificate
          - lightsail:GetLoadBalancerTlsCertificates
          - lightsail:GetLoadBalancer
        list:
          - lightsail:GetLoadBalancerTlsCertificates
          - lightsail:GetLoadBalancer
    StaticIp:
      type: object
      properties:
        StaticIpName:
          description: The name of the static IP address.
          type: string
        AttachedTo:
          description: The instance where the static IP is attached.
          type: string
        IsAttached:
          description: A Boolean value indicating whether the static IP is attached.
          type: boolean
        IpAddress:
          description: The static IP address.
          type: string
        StaticIpArn:
          type: string
      required:
        - StaticIpName
      x-stackql-resource-name: static_ip
      description: Resource Type definition for AWS::Lightsail::StaticIp
      x-type-name: AWS::Lightsail::StaticIp
      x-stackql-primary-identifier:
        - StaticIpName
      x-create-only-properties:
        - StaticIpName
      x-read-only-properties:
        - StaticIpArn
        - IsAttached
        - IpAddress
      x-required-properties:
        - StaticIpName
      x-taggable: true
      x-required-permissions:
        create:
          - lightsail:AllocateStaticIp
          - lightsail:AttachStaticIp
          - lightsail:DetachStaticIp
          - lightsail:GetInstance
          - lightsail:GetStaticIp
          - lightsail:GetStaticIps
        read:
          - lightsail:GetStaticIp
          - lightsail:GetStaticIps
        update:
          - lightsail:AttachStaticIp
          - lightsail:DetachStaticIp
          - lightsail:GetInstance
          - lightsail:GetStaticIp
          - lightsail:GetStaticIps
        delete:
          - lightsail:GetStaticIp
          - lightsail:GetStaticIps
          - lightsail:ReleaseStaticIp
        list:
          - lightsail:GetStaticIps
    CreateAlarmRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AlarmName:
              description: The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
              type: string
              pattern: \w[\w\-]*\w
            MonitoredResourceName:
              description: The name of the Lightsail resource that the alarm monitors.
              type: string
            MetricName:
              description: The name of the metric to associate with the alarm.
              type: string
            ComparisonOperator:
              description: The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
              type: string
            ContactProtocols:
              description: The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            AlarmArn:
              type: string
            DatapointsToAlarm:
              description: The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
              type: integer
            EvaluationPeriods:
              description: The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N.
              type: integer
            NotificationEnabled:
              description: Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
              type: boolean
            NotificationTriggers:
              description: The alarm states that trigger a notification.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            Threshold:
              description: The value against which the specified statistic is compared.
              type: number
            TreatMissingData:
              description: Sets how this alarm will handle missing data points.
              type: string
            State:
              description: The current state of the alarm.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateAlarmRequest
      type: object
      required: []
    CreateBucketRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            BucketName:
              description: The name for the bucket.
              type: string
              pattern: ^[a-z0-9][a-z0-9-]{1,52}[a-z0-9]$
              minLength: 3
              maxLength: 54
            BundleId:
              description: The ID of the bundle to use for the bucket.
              type: string
            BucketArn:
              type: string
            ObjectVersioning:
              description: Specifies whether to enable or disable versioning of objects in the bucket.
              type: boolean
            AccessRules:
              $ref: '#/components/schemas/AccessRules'
            ResourcesReceivingAccess:
              description: The names of the Lightsail resources for which to set bucket access.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            ReadOnlyAccessAccounts:
              description: An array of strings to specify the AWS account IDs that can access the bucket.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Url:
              description: The URL of the bucket.
              type: string
            AbleToUpdateBundle:
              description: Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle. You can update a bucket's bundle only one time within a monthly AWS billing cycle.
              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreateBucketRequest
      type: object
      required: []
    CreateCertificateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CertificateName:
              description: The name for the certificate.
              type: string
            DomainName:
              description: The domain name (e.g., example.com ) for the certificate.
              type: string
            SubjectAlternativeNames:
              description: An array of strings that specify the alternate domains (e.g., example2.com) and subdomains (e.g., blog.example.com) for the certificate.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            CertificateArn:
              type: string
            Status:
              description: The validation status of the certificate.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateCertificateRequest
      type: object
      required: []
    CreateContainerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ServiceName:
              description: The name for the container service.
              type: string
              pattern: ^[a-z0-9]{1,2}|[a-z0-9][a-z0-9-]+[a-z0-9]$
              minLength: 1
              maxLength: 63
            Power:
              description: The power specification for the container service.
              type: string
            ContainerArn:
              type: string
            Scale:
              description: The scale specification for the container service.
              type: integer
              minimum: 1
              maximum: 20
            PublicDomainNames:
              description: The public domain names to use with the container service, such as example.com and www.example.com.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/PublicDomainName'
            ContainerServiceDeployment:
              $ref: '#/components/schemas/ContainerServiceDeployment'
              description: Describes a container deployment configuration of an Amazon Lightsail container service.
            IsDisabled:
              description: A Boolean value to indicate whether the container service is disabled.
              type: boolean
            PrivateRegistryAccess:
              $ref: '#/components/schemas/PrivateRegistryAccess'
              description: A Boolean value to indicate whether the container service has access to private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.
            Url:
              description: The publicly accessible URL of the container service.
              type: string
            PrincipalArn:
              description: The principal ARN of the container service.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateContainerRequest
      type: object
      required: []
    CreateDatabaseRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RelationalDatabaseName:
              description: The name to use for your new Lightsail database resource.
              type: string
              pattern: \w[\w\-]*\w
              minLength: 2
              maxLength: 255
            DatabaseArn:
              type: string
            AvailabilityZone:
              description: The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format.
              type: string
              minLength: 1
              maxLength: 255
            RelationalDatabaseBlueprintId:
              description: The blueprint ID for your new database. A blueprint describes the major engine version of a database.
              type: string
              minLength: 1
              maxLength: 255
            RelationalDatabaseBundleId:
              description: The bundle ID for your new database. A bundle describes the performance specifications for your database.
              type: string
              minLength: 1
              maxLength: 255
            MasterDatabaseName:
              description: The name of the database to create when the Lightsail database resource is created. For MySQL, if this parameter isn't specified, no database is created in the database resource. For PostgreSQL, if this parameter isn't specified, a database named postgres is created in the database resource.
              type: string
              minLength: 1
              maxLength: 255
            MasterUsername:
              description: The name for the master user.
              type: string
              minLength: 1
              maxLength: 63
            MasterUserPassword:
              description: The password for the master user. The password can include any printable ASCII character except "/", """, or "@". It cannot contain spaces.
              type: string
              minLength: 1
              maxLength: 63
            PreferredBackupWindow:
              description: The daily time range during which automated backups are created for your new database if automated backups are enabled.
              type: string
            PreferredMaintenanceWindow:
              description: The weekly time range during which system maintenance can occur on your new database.
              type: string
            PubliclyAccessible:
              description: Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
              type: boolean
            CaCertificateIdentifier:
              description: Indicates the certificate that needs to be associated with the database.
              type: string
            BackupRetention:
              description: When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
              type: boolean
            RotateMasterUserPassword:
              description: When true, the master user password is changed to a new strong password generated by Lightsail. Use the get relational database master user password operation to get the new password.
              type: boolean
            RelationalDatabaseParameters:
              description: Update one or more parameters of the relational database.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/RelationalDatabaseParameter'
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateDatabaseRequest
      type: object
      required: []
    CreateDistributionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DistributionName:
              description: The name for the distribution.
              type: string
              pattern: \w[\w\-]*\w
            DistributionArn:
              type: string
            BundleId:
              description: The bundle ID to use for the distribution.
              type: string
            IpAddressType:
              description: The IP address type for the distribution.
              type: string
            CacheBehaviors:
              description: An array of objects that describe the per-path cache behavior for the distribution.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/CacheBehaviorPerPath'
            CacheBehaviorSettings:
              description: An object that describes the cache behavior settings for the distribution.
              $ref: '#/components/schemas/CacheSettings'
            DefaultCacheBehavior:
              description: An object that describes the default cache behavior for the distribution.
              $ref: '#/components/schemas/CacheBehavior'
            Origin:
              description: An object that describes the origin resource for the distribution, such as a Lightsail instance or load balancer.
              $ref: '#/components/schemas/InputOrigin'
            Status:
              description: The status of the distribution.
              type: string
            AbleToUpdateBundle:
              description: Indicates whether the bundle that is currently applied to your distribution, specified using the distributionName parameter, can be changed to another bundle.
              type: boolean
            IsEnabled:
              description: Indicates whether the distribution is enabled.
              type: boolean
            CertificateName:
              description: The certificate attached to the Distribution.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateDistributionRequest
      type: object
      required: []
    CreateInstanceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            SupportCode:
              description: Support code to help identify any issues
              type: string
            ResourceType:
              description: Resource type of Lightsail instance.
              type: string
            IsStaticIp:
              description: Is the IP Address of the Instance is the static IP
              type: boolean
            PrivateIpAddress:
              description: Private IP Address of the Instance
              type: string
            PublicIpAddress:
              description: Public IP Address of the Instance
              type: string
            Ipv6Addresses:
              description: IPv6 addresses of the instance
              type: array
              x-insertionOrder: false
              items:
                type: string
            Location:
              $ref: '#/components/schemas/Location'
            Hardware:
              $ref: '#/components/schemas/Hardware'
            State:
              $ref: '#/components/schemas/State'
            Networking:
              $ref: '#/components/schemas/Networking'
            UserName:
              description: Username of the  Lightsail instance.
              type: string
            SshKeyName:
              description: SSH Key Name of the  Lightsail instance.
              type: string
            InstanceName:
              description: The names to use for your new Lightsail instance.
              type: string
              pattern: ^[a-zA-Z0-9][\w\-.]*[a-zA-Z0-9]$
              minLength: 1
              maxLength: 254
            AvailabilityZone:
              description: 'The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.'
              type: string
              minLength: 1
              maxLength: 255
            BundleId:
              description: The bundle of specification information for your virtual private server (or instance ), including the pricing plan (e.g., micro_1_0 ).
              type: string
              minLength: 1
              maxLength: 255
            BlueprintId:
              description: The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0 ). Use the get blueprints operation to return a list of available images (or blueprints ).
              type: string
              minLength: 1
              maxLength: 255
            AddOns:
              description: An array of objects representing the add-ons to enable for the new instance.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/AddOn'
            UserData:
              description: A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.
              type: string
            KeyPairName:
              description: The name of your key pair.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            InstanceArn:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateInstanceRequest
      type: object
      required: []
    CreateLoadBalancerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            LoadBalancerName:
              description: The name of your load balancer.
              type: string
              pattern: \w[\w\-]*\w
            LoadBalancerArn:
              type: string
            InstancePort:
              description: The instance port where you're creating your load balancer.
              type: integer
            IpAddressType:
              description: The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
              type: string
            AttachedInstances:
              description: The names of the instances attached to the load balancer.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            HealthCheckPath:
              description: The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail uses the root path of your website (e.g., "/").
              type: string
            SessionStickinessEnabled:
              description: Configuration option to enable session stickiness.
              type: boolean
            SessionStickinessLBCookieDurationSeconds:
              description: Configuration option to adjust session stickiness cookie duration parameter.
              type: string
            TlsPolicyName:
              description: The name of the TLS policy to apply to the load balancer.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateLoadBalancerRequest
      type: object
      required: []
    CreateLoadBalancerTlsCertificateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            LoadBalancerName:
              description: The name of your load balancer.
              type: string
              pattern: \w[\w\-]*\w
            CertificateName:
              description: The SSL/TLS certificate name.
              type: string
            CertificateDomainName:
              description: The domain name (e.g., example.com ) for your SSL/TLS certificate.
              type: string
            CertificateAlternativeNames:
              description: An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                type: string
            LoadBalancerTlsCertificateArn:
              type: string
            IsAttached:
              description: When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
              type: boolean
            HttpsRedirectionEnabled:
              description: A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
              type: boolean
            Status:
              description: The validation status of the SSL/TLS certificate.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateLoadBalancerTlsCertificateRequest
      type: object
      required: []
    CreateStaticIpRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            StaticIpName:
              description: The name of the static IP address.
              type: string
            AttachedTo:
              description: The instance where the static IP is attached.
              type: string
            IsAttached:
              description: A Boolean value indicating whether the static IP is attached.
              type: boolean
            IpAddress:
              description: The static IP address.
              type: string
            StaticIpArn:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateStaticIpRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    alarms:
      name: alarms
      id: aws.lightsail.alarms
      x-cfn-schema-name: Alarm
      x-cfn-type-name: AWS::Lightsail::Alarm
      x-identifiers:
        - AlarmName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Alarm&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Alarm"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Alarm"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Alarm"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/alarms/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/alarms/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/alarms/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AlarmName') as alarm_name,
              JSON_EXTRACT(Properties, '$.MonitoredResourceName') as monitored_resource_name,
              JSON_EXTRACT(Properties, '$.MetricName') as metric_name,
              JSON_EXTRACT(Properties, '$.ComparisonOperator') as comparison_operator,
              JSON_EXTRACT(Properties, '$.ContactProtocols') as contact_protocols,
              JSON_EXTRACT(Properties, '$.AlarmArn') as alarm_arn,
              JSON_EXTRACT(Properties, '$.DatapointsToAlarm') as datapoints_to_alarm,
              JSON_EXTRACT(Properties, '$.EvaluationPeriods') as evaluation_periods,
              JSON_EXTRACT(Properties, '$.NotificationEnabled') as notification_enabled,
              JSON_EXTRACT(Properties, '$.NotificationTriggers') as notification_triggers,
              JSON_EXTRACT(Properties, '$.Threshold') as threshold,
              JSON_EXTRACT(Properties, '$.TreatMissingData') as treat_missing_data,
              JSON_EXTRACT(Properties, '$.State') as state
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Alarm'
              AND data__Identifier = '<AlarmName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AlarmName') as alarm_name,
                JSON_EXTRACT(detail.Properties, '$.MonitoredResourceName') as monitored_resource_name,
                JSON_EXTRACT(detail.Properties, '$.MetricName') as metric_name,
                JSON_EXTRACT(detail.Properties, '$.ComparisonOperator') as comparison_operator,
                JSON_EXTRACT(detail.Properties, '$.ContactProtocols') as contact_protocols,
                JSON_EXTRACT(detail.Properties, '$.AlarmArn') as alarm_arn,
                JSON_EXTRACT(detail.Properties, '$.DatapointsToAlarm') as datapoints_to_alarm,
                JSON_EXTRACT(detail.Properties, '$.EvaluationPeriods') as evaluation_periods,
                JSON_EXTRACT(detail.Properties, '$.NotificationEnabled') as notification_enabled,
                JSON_EXTRACT(detail.Properties, '$.NotificationTriggers') as notification_triggers,
                JSON_EXTRACT(detail.Properties, '$.Threshold') as threshold,
                JSON_EXTRACT(detail.Properties, '$.TreatMissingData') as treat_missing_data,
                JSON_EXTRACT(detail.Properties, '$.State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lightsail::Alarm'
                AND detail.data__TypeName = 'AWS::Lightsail::Alarm'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AlarmName') as alarm_name,
                  json_extract_path_text(Properties, 'MonitoredResourceName') as monitored_resource_name,
                  json_extract_path_text(Properties, 'MetricName') as metric_name,
                  json_extract_path_text(Properties, 'ComparisonOperator') as comparison_operator,
                  json_extract_path_text(Properties, 'ContactProtocols') as contact_protocols,
                  json_extract_path_text(Properties, 'AlarmArn') as alarm_arn,
                  json_extract_path_text(Properties, 'DatapointsToAlarm') as datapoints_to_alarm,
                  json_extract_path_text(Properties, 'EvaluationPeriods') as evaluation_periods,
                  json_extract_path_text(Properties, 'NotificationEnabled') as notification_enabled,
                  json_extract_path_text(Properties, 'NotificationTriggers') as notification_triggers,
                  json_extract_path_text(Properties, 'Threshold') as threshold,
                  json_extract_path_text(Properties, 'TreatMissingData') as treat_missing_data,
                  json_extract_path_text(Properties, 'State') as state
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Alarm'
                  AND data__Identifier = '<AlarmName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AlarmName') as alarm_name,
                    json_extract_path_text(detail.Properties, 'MonitoredResourceName') as monitored_resource_name,
                    json_extract_path_text(detail.Properties, 'MetricName') as metric_name,
                    json_extract_path_text(detail.Properties, 'ComparisonOperator') as comparison_operator,
                    json_extract_path_text(detail.Properties, 'ContactProtocols') as contact_protocols,
                    json_extract_path_text(detail.Properties, 'AlarmArn') as alarm_arn,
                    json_extract_path_text(detail.Properties, 'DatapointsToAlarm') as datapoints_to_alarm,
                    json_extract_path_text(detail.Properties, 'EvaluationPeriods') as evaluation_periods,
                    json_extract_path_text(detail.Properties, 'NotificationEnabled') as notification_enabled,
                    json_extract_path_text(detail.Properties, 'NotificationTriggers') as notification_triggers,
                    json_extract_path_text(detail.Properties, 'Threshold') as threshold,
                    json_extract_path_text(detail.Properties, 'TreatMissingData') as treat_missing_data,
                    json_extract_path_text(detail.Properties, 'State') as state
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lightsail::Alarm'
                    AND detail.data__TypeName = 'AWS::Lightsail::Alarm'
                    AND listing.region = 'us-east-1'
    alarms_list_only:
      name: alarms_list_only
      id: aws.lightsail.alarms_list_only
      x-cfn-schema-name: Alarm
      x-cfn-type-name: AWS::Lightsail::Alarm
      x-identifiers:
        - AlarmName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AlarmName') as alarm_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Alarm'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AlarmName') as alarm_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Alarm'
                AND region = 'us-east-1'
    buckets:
      name: buckets
      id: aws.lightsail.buckets
      x-cfn-schema-name: Bucket
      x-cfn-type-name: AWS::Lightsail::Bucket
      x-identifiers:
        - BucketName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Bucket&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Bucket"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Bucket"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Bucket"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/buckets/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/buckets/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/buckets/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.BucketName') as bucket_name,
              JSON_EXTRACT(Properties, '$.BundleId') as bundle_id,
              JSON_EXTRACT(Properties, '$.BucketArn') as bucket_arn,
              JSON_EXTRACT(Properties, '$.ObjectVersioning') as object_versioning,
              JSON_EXTRACT(Properties, '$.AccessRules') as access_rules,
              JSON_EXTRACT(Properties, '$.ResourcesReceivingAccess') as resources_receiving_access,
              JSON_EXTRACT(Properties, '$.ReadOnlyAccessAccounts') as read_only_access_accounts,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Url') as url,
              JSON_EXTRACT(Properties, '$.AbleToUpdateBundle') as able_to_update_bundle
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Bucket'
              AND data__Identifier = '<BucketName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.BucketName') as bucket_name,
                JSON_EXTRACT(detail.Properties, '$.BundleId') as bundle_id,
                JSON_EXTRACT(detail.Properties, '$.BucketArn') as bucket_arn,
                JSON_EXTRACT(detail.Properties, '$.ObjectVersioning') as object_versioning,
                JSON_EXTRACT(detail.Properties, '$.AccessRules') as access_rules,
                JSON_EXTRACT(detail.Properties, '$.ResourcesReceivingAccess') as resources_receiving_access,
                JSON_EXTRACT(detail.Properties, '$.ReadOnlyAccessAccounts') as read_only_access_accounts,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Url') as url,
                JSON_EXTRACT(detail.Properties, '$.AbleToUpdateBundle') as able_to_update_bundle
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lightsail::Bucket'
                AND detail.data__TypeName = 'AWS::Lightsail::Bucket'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'BucketName') as bucket_name,
                  json_extract_path_text(Properties, 'BundleId') as bundle_id,
                  json_extract_path_text(Properties, 'BucketArn') as bucket_arn,
                  json_extract_path_text(Properties, 'ObjectVersioning') as object_versioning,
                  json_extract_path_text(Properties, 'AccessRules') as access_rules,
                  json_extract_path_text(Properties, 'ResourcesReceivingAccess') as resources_receiving_access,
                  json_extract_path_text(Properties, 'ReadOnlyAccessAccounts') as read_only_access_accounts,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Url') as url,
                  json_extract_path_text(Properties, 'AbleToUpdateBundle') as able_to_update_bundle
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Bucket'
                  AND data__Identifier = '<BucketName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'BucketName') as bucket_name,
                    json_extract_path_text(detail.Properties, 'BundleId') as bundle_id,
                    json_extract_path_text(detail.Properties, 'BucketArn') as bucket_arn,
                    json_extract_path_text(detail.Properties, 'ObjectVersioning') as object_versioning,
                    json_extract_path_text(detail.Properties, 'AccessRules') as access_rules,
                    json_extract_path_text(detail.Properties, 'ResourcesReceivingAccess') as resources_receiving_access,
                    json_extract_path_text(detail.Properties, 'ReadOnlyAccessAccounts') as read_only_access_accounts,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Url') as url,
                    json_extract_path_text(detail.Properties, 'AbleToUpdateBundle') as able_to_update_bundle
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lightsail::Bucket'
                    AND detail.data__TypeName = 'AWS::Lightsail::Bucket'
                    AND listing.region = 'us-east-1'
    buckets_list_only:
      name: buckets_list_only
      id: aws.lightsail.buckets_list_only
      x-cfn-schema-name: Bucket
      x-cfn-type-name: AWS::Lightsail::Bucket
      x-identifiers:
        - BucketName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BucketName') as bucket_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Bucket'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'BucketName') as bucket_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Bucket'
                AND region = 'us-east-1'
    bucket_tags:
      name: bucket_tags
      id: aws.lightsail.bucket_tags
      x-cfn-schema-name: Bucket
      x-cfn-type-name: AWS::Lightsail::Bucket
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.BucketName') as bucket_name,
              JSON_EXTRACT(detail.Properties, '$.BundleId') as bundle_id,
              JSON_EXTRACT(detail.Properties, '$.BucketArn') as bucket_arn,
              JSON_EXTRACT(detail.Properties, '$.ObjectVersioning') as object_versioning,
              JSON_EXTRACT(detail.Properties, '$.AccessRules') as access_rules,
              JSON_EXTRACT(detail.Properties, '$.ResourcesReceivingAccess') as resources_receiving_access,
              JSON_EXTRACT(detail.Properties, '$.ReadOnlyAccessAccounts') as read_only_access_accounts,
              JSON_EXTRACT(detail.Properties, '$.Url') as url,
              JSON_EXTRACT(detail.Properties, '$.AbleToUpdateBundle') as able_to_update_bundle
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Lightsail::Bucket'
              AND detail.data__TypeName = 'AWS::Lightsail::Bucket'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'BucketName') as bucket_name,
                json_extract_path_text(detail.Properties, 'BundleId') as bundle_id,
                json_extract_path_text(detail.Properties, 'BucketArn') as bucket_arn,
                json_extract_path_text(detail.Properties, 'ObjectVersioning') as object_versioning,
                json_extract_path_text(detail.Properties, 'AccessRules') as access_rules,
                json_extract_path_text(detail.Properties, 'ResourcesReceivingAccess') as resources_receiving_access,
                json_extract_path_text(detail.Properties, 'ReadOnlyAccessAccounts') as read_only_access_accounts,
                json_extract_path_text(detail.Properties, 'Url') as url,
                json_extract_path_text(detail.Properties, 'AbleToUpdateBundle') as able_to_update_bundle
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Lightsail::Bucket'
                AND detail.data__TypeName = 'AWS::Lightsail::Bucket'
                AND listing.region = 'us-east-1'
    certificates:
      name: certificates
      id: aws.lightsail.certificates
      x-cfn-schema-name: Certificate
      x-cfn-type-name: AWS::Lightsail::Certificate
      x-identifiers:
        - CertificateName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Certificate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Certificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Certificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Certificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/certificates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/certificates/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/certificates/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CertificateName') as certificate_name,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.SubjectAlternativeNames') as subject_alternative_names,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Certificate'
              AND data__Identifier = '<CertificateName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CertificateName') as certificate_name,
                JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(detail.Properties, '$.SubjectAlternativeNames') as subject_alternative_names,
                JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lightsail::Certificate'
                AND detail.data__TypeName = 'AWS::Lightsail::Certificate'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CertificateName') as certificate_name,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'SubjectAlternativeNames') as subject_alternative_names,
                  json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Certificate'
                  AND data__Identifier = '<CertificateName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CertificateName') as certificate_name,
                    json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                    json_extract_path_text(detail.Properties, 'SubjectAlternativeNames') as subject_alternative_names,
                    json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lightsail::Certificate'
                    AND detail.data__TypeName = 'AWS::Lightsail::Certificate'
                    AND listing.region = 'us-east-1'
    certificates_list_only:
      name: certificates_list_only
      id: aws.lightsail.certificates_list_only
      x-cfn-schema-name: Certificate
      x-cfn-type-name: AWS::Lightsail::Certificate
      x-identifiers:
        - CertificateName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CertificateName') as certificate_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Certificate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CertificateName') as certificate_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Certificate'
                AND region = 'us-east-1'
    certificate_tags:
      name: certificate_tags
      id: aws.lightsail.certificate_tags
      x-cfn-schema-name: Certificate
      x-cfn-type-name: AWS::Lightsail::Certificate
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CertificateName') as certificate_name,
              JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(detail.Properties, '$.SubjectAlternativeNames') as subject_alternative_names,
              JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(detail.Properties, '$.Status') as status
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Lightsail::Certificate'
              AND detail.data__TypeName = 'AWS::Lightsail::Certificate'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CertificateName') as certificate_name,
                json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                json_extract_path_text(detail.Properties, 'SubjectAlternativeNames') as subject_alternative_names,
                json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn,
                json_extract_path_text(detail.Properties, 'Status') as status
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Lightsail::Certificate'
                AND detail.data__TypeName = 'AWS::Lightsail::Certificate'
                AND listing.region = 'us-east-1'
    containers:
      name: containers
      id: aws.lightsail.containers
      x-cfn-schema-name: Container
      x-cfn-type-name: AWS::Lightsail::Container
      x-identifiers:
        - ServiceName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Container&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Container"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Container"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Container"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/containers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/containers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/containers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ServiceName') as service_name,
              JSON_EXTRACT(Properties, '$.Power') as power,
              JSON_EXTRACT(Properties, '$.ContainerArn') as container_arn,
              JSON_EXTRACT(Properties, '$.Scale') as scale,
              JSON_EXTRACT(Properties, '$.PublicDomainNames') as public_domain_names,
              JSON_EXTRACT(Properties, '$.ContainerServiceDeployment') as container_service_deployment,
              JSON_EXTRACT(Properties, '$.IsDisabled') as is_disabled,
              JSON_EXTRACT(Properties, '$.PrivateRegistryAccess') as private_registry_access,
              JSON_EXTRACT(Properties, '$.Url') as url,
              JSON_EXTRACT(Properties, '$.PrincipalArn') as principal_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Container'
              AND data__Identifier = '<ServiceName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ServiceName') as service_name,
                JSON_EXTRACT(detail.Properties, '$.Power') as power,
                JSON_EXTRACT(detail.Properties, '$.ContainerArn') as container_arn,
                JSON_EXTRACT(detail.Properties, '$.Scale') as scale,
                JSON_EXTRACT(detail.Properties, '$.PublicDomainNames') as public_domain_names,
                JSON_EXTRACT(detail.Properties, '$.ContainerServiceDeployment') as container_service_deployment,
                JSON_EXTRACT(detail.Properties, '$.IsDisabled') as is_disabled,
                JSON_EXTRACT(detail.Properties, '$.PrivateRegistryAccess') as private_registry_access,
                JSON_EXTRACT(detail.Properties, '$.Url') as url,
                JSON_EXTRACT(detail.Properties, '$.PrincipalArn') as principal_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lightsail::Container'
                AND detail.data__TypeName = 'AWS::Lightsail::Container'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ServiceName') as service_name,
                  json_extract_path_text(Properties, 'Power') as power,
                  json_extract_path_text(Properties, 'ContainerArn') as container_arn,
                  json_extract_path_text(Properties, 'Scale') as scale,
                  json_extract_path_text(Properties, 'PublicDomainNames') as public_domain_names,
                  json_extract_path_text(Properties, 'ContainerServiceDeployment') as container_service_deployment,
                  json_extract_path_text(Properties, 'IsDisabled') as is_disabled,
                  json_extract_path_text(Properties, 'PrivateRegistryAccess') as private_registry_access,
                  json_extract_path_text(Properties, 'Url') as url,
                  json_extract_path_text(Properties, 'PrincipalArn') as principal_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Container'
                  AND data__Identifier = '<ServiceName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ServiceName') as service_name,
                    json_extract_path_text(detail.Properties, 'Power') as power,
                    json_extract_path_text(detail.Properties, 'ContainerArn') as container_arn,
                    json_extract_path_text(detail.Properties, 'Scale') as scale,
                    json_extract_path_text(detail.Properties, 'PublicDomainNames') as public_domain_names,
                    json_extract_path_text(detail.Properties, 'ContainerServiceDeployment') as container_service_deployment,
                    json_extract_path_text(detail.Properties, 'IsDisabled') as is_disabled,
                    json_extract_path_text(detail.Properties, 'PrivateRegistryAccess') as private_registry_access,
                    json_extract_path_text(detail.Properties, 'Url') as url,
                    json_extract_path_text(detail.Properties, 'PrincipalArn') as principal_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lightsail::Container'
                    AND detail.data__TypeName = 'AWS::Lightsail::Container'
                    AND listing.region = 'us-east-1'
    containers_list_only:
      name: containers_list_only
      id: aws.lightsail.containers_list_only
      x-cfn-schema-name: Container
      x-cfn-type-name: AWS::Lightsail::Container
      x-identifiers:
        - ServiceName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServiceName') as service_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Container'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ServiceName') as service_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Container'
                AND region = 'us-east-1'
    container_tags:
      name: container_tags
      id: aws.lightsail.container_tags
      x-cfn-schema-name: Container
      x-cfn-type-name: AWS::Lightsail::Container
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ServiceName') as service_name,
              JSON_EXTRACT(detail.Properties, '$.Power') as power,
              JSON_EXTRACT(detail.Properties, '$.ContainerArn') as container_arn,
              JSON_EXTRACT(detail.Properties, '$.Scale') as scale,
              JSON_EXTRACT(detail.Properties, '$.PublicDomainNames') as public_domain_names,
              JSON_EXTRACT(detail.Properties, '$.ContainerServiceDeployment') as container_service_deployment,
              JSON_EXTRACT(detail.Properties, '$.IsDisabled') as is_disabled,
              JSON_EXTRACT(detail.Properties, '$.PrivateRegistryAccess') as private_registry_access,
              JSON_EXTRACT(detail.Properties, '$.Url') as url,
              JSON_EXTRACT(detail.Properties, '$.PrincipalArn') as principal_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Lightsail::Container'
              AND detail.data__TypeName = 'AWS::Lightsail::Container'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ServiceName') as service_name,
                json_extract_path_text(detail.Properties, 'Power') as power,
                json_extract_path_text(detail.Properties, 'ContainerArn') as container_arn,
                json_extract_path_text(detail.Properties, 'Scale') as scale,
                json_extract_path_text(detail.Properties, 'PublicDomainNames') as public_domain_names,
                json_extract_path_text(detail.Properties, 'ContainerServiceDeployment') as container_service_deployment,
                json_extract_path_text(detail.Properties, 'IsDisabled') as is_disabled,
                json_extract_path_text(detail.Properties, 'PrivateRegistryAccess') as private_registry_access,
                json_extract_path_text(detail.Properties, 'Url') as url,
                json_extract_path_text(detail.Properties, 'PrincipalArn') as principal_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Lightsail::Container'
                AND detail.data__TypeName = 'AWS::Lightsail::Container'
                AND listing.region = 'us-east-1'
    databases:
      name: databases
      id: aws.lightsail.databases
      x-cfn-schema-name: Database
      x-cfn-type-name: AWS::Lightsail::Database
      x-identifiers:
        - RelationalDatabaseName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Database&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Database"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Database"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Database"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/databases/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/databases/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/databases/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RelationalDatabaseName') as relational_database_name,
              JSON_EXTRACT(Properties, '$.DatabaseArn') as database_arn,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.RelationalDatabaseBlueprintId') as relational_database_blueprint_id,
              JSON_EXTRACT(Properties, '$.RelationalDatabaseBundleId') as relational_database_bundle_id,
              JSON_EXTRACT(Properties, '$.MasterDatabaseName') as master_database_name,
              JSON_EXTRACT(Properties, '$.MasterUsername') as master_username,
              JSON_EXTRACT(Properties, '$.MasterUserPassword') as master_user_password,
              JSON_EXTRACT(Properties, '$.PreferredBackupWindow') as preferred_backup_window,
              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.CaCertificateIdentifier') as ca_certificate_identifier,
              JSON_EXTRACT(Properties, '$.BackupRetention') as backup_retention,
              JSON_EXTRACT(Properties, '$.RotateMasterUserPassword') as rotate_master_user_password,
              JSON_EXTRACT(Properties, '$.RelationalDatabaseParameters') as relational_database_parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Database'
              AND data__Identifier = '<RelationalDatabaseName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RelationalDatabaseName') as relational_database_name,
                JSON_EXTRACT(detail.Properties, '$.DatabaseArn') as database_arn,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
                JSON_EXTRACT(detail.Properties, '$.RelationalDatabaseBlueprintId') as relational_database_blueprint_id,
                JSON_EXTRACT(detail.Properties, '$.RelationalDatabaseBundleId') as relational_database_bundle_id,
                JSON_EXTRACT(detail.Properties, '$.MasterDatabaseName') as master_database_name,
                JSON_EXTRACT(detail.Properties, '$.MasterUsername') as master_username,
                JSON_EXTRACT(detail.Properties, '$.MasterUserPassword') as master_user_password,
                JSON_EXTRACT(detail.Properties, '$.PreferredBackupWindow') as preferred_backup_window,
                JSON_EXTRACT(detail.Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
                JSON_EXTRACT(detail.Properties, '$.PubliclyAccessible') as publicly_accessible,
                JSON_EXTRACT(detail.Properties, '$.CaCertificateIdentifier') as ca_certificate_identifier,
                JSON_EXTRACT(detail.Properties, '$.BackupRetention') as backup_retention,
                JSON_EXTRACT(detail.Properties, '$.RotateMasterUserPassword') as rotate_master_user_password,
                JSON_EXTRACT(detail.Properties, '$.RelationalDatabaseParameters') as relational_database_parameters,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lightsail::Database'
                AND detail.data__TypeName = 'AWS::Lightsail::Database'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RelationalDatabaseName') as relational_database_name,
                  json_extract_path_text(Properties, 'DatabaseArn') as database_arn,
                  json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                  json_extract_path_text(Properties, 'RelationalDatabaseBlueprintId') as relational_database_blueprint_id,
                  json_extract_path_text(Properties, 'RelationalDatabaseBundleId') as relational_database_bundle_id,
                  json_extract_path_text(Properties, 'MasterDatabaseName') as master_database_name,
                  json_extract_path_text(Properties, 'MasterUsername') as master_username,
                  json_extract_path_text(Properties, 'MasterUserPassword') as master_user_password,
                  json_extract_path_text(Properties, 'PreferredBackupWindow') as preferred_backup_window,
                  json_extract_path_text(Properties, 'PreferredMaintenanceWindow') as preferred_maintenance_window,
                  json_extract_path_text(Properties, 'PubliclyAccessible') as publicly_accessible,
                  json_extract_path_text(Properties, 'CaCertificateIdentifier') as ca_certificate_identifier,
                  json_extract_path_text(Properties, 'BackupRetention') as backup_retention,
                  json_extract_path_text(Properties, 'RotateMasterUserPassword') as rotate_master_user_password,
                  json_extract_path_text(Properties, 'RelationalDatabaseParameters') as relational_database_parameters,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Database'
                  AND data__Identifier = '<RelationalDatabaseName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RelationalDatabaseName') as relational_database_name,
                    json_extract_path_text(detail.Properties, 'DatabaseArn') as database_arn,
                    json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                    json_extract_path_text(detail.Properties, 'RelationalDatabaseBlueprintId') as relational_database_blueprint_id,
                    json_extract_path_text(detail.Properties, 'RelationalDatabaseBundleId') as relational_database_bundle_id,
                    json_extract_path_text(detail.Properties, 'MasterDatabaseName') as master_database_name,
                    json_extract_path_text(detail.Properties, 'MasterUsername') as master_username,
                    json_extract_path_text(detail.Properties, 'MasterUserPassword') as master_user_password,
                    json_extract_path_text(detail.Properties, 'PreferredBackupWindow') as preferred_backup_window,
                    json_extract_path_text(detail.Properties, 'PreferredMaintenanceWindow') as preferred_maintenance_window,
                    json_extract_path_text(detail.Properties, 'PubliclyAccessible') as publicly_accessible,
                    json_extract_path_text(detail.Properties, 'CaCertificateIdentifier') as ca_certificate_identifier,
                    json_extract_path_text(detail.Properties, 'BackupRetention') as backup_retention,
                    json_extract_path_text(detail.Properties, 'RotateMasterUserPassword') as rotate_master_user_password,
                    json_extract_path_text(detail.Properties, 'RelationalDatabaseParameters') as relational_database_parameters,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lightsail::Database'
                    AND detail.data__TypeName = 'AWS::Lightsail::Database'
                    AND listing.region = 'us-east-1'
    databases_list_only:
      name: databases_list_only
      id: aws.lightsail.databases_list_only
      x-cfn-schema-name: Database
      x-cfn-type-name: AWS::Lightsail::Database
      x-identifiers:
        - RelationalDatabaseName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RelationalDatabaseName') as relational_database_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Database'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RelationalDatabaseName') as relational_database_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Database'
                AND region = 'us-east-1'
    database_tags:
      name: database_tags
      id: aws.lightsail.database_tags
      x-cfn-schema-name: Database
      x-cfn-type-name: AWS::Lightsail::Database
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.RelationalDatabaseName') as relational_database_name,
              JSON_EXTRACT(detail.Properties, '$.DatabaseArn') as database_arn,
              JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(detail.Properties, '$.RelationalDatabaseBlueprintId') as relational_database_blueprint_id,
              JSON_EXTRACT(detail.Properties, '$.RelationalDatabaseBundleId') as relational_database_bundle_id,
              JSON_EXTRACT(detail.Properties, '$.MasterDatabaseName') as master_database_name,
              JSON_EXTRACT(detail.Properties, '$.MasterUsername') as master_username,
              JSON_EXTRACT(detail.Properties, '$.MasterUserPassword') as master_user_password,
              JSON_EXTRACT(detail.Properties, '$.PreferredBackupWindow') as preferred_backup_window,
              JSON_EXTRACT(detail.Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(detail.Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(detail.Properties, '$.CaCertificateIdentifier') as ca_certificate_identifier,
              JSON_EXTRACT(detail.Properties, '$.BackupRetention') as backup_retention,
              JSON_EXTRACT(detail.Properties, '$.RotateMasterUserPassword') as rotate_master_user_password,
              JSON_EXTRACT(detail.Properties, '$.RelationalDatabaseParameters') as relational_database_parameters
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Lightsail::Database'
              AND detail.data__TypeName = 'AWS::Lightsail::Database'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'RelationalDatabaseName') as relational_database_name,
                json_extract_path_text(detail.Properties, 'DatabaseArn') as database_arn,
                json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(detail.Properties, 'RelationalDatabaseBlueprintId') as relational_database_blueprint_id,
                json_extract_path_text(detail.Properties, 'RelationalDatabaseBundleId') as relational_database_bundle_id,
                json_extract_path_text(detail.Properties, 'MasterDatabaseName') as master_database_name,
                json_extract_path_text(detail.Properties, 'MasterUsername') as master_username,
                json_extract_path_text(detail.Properties, 'MasterUserPassword') as master_user_password,
                json_extract_path_text(detail.Properties, 'PreferredBackupWindow') as preferred_backup_window,
                json_extract_path_text(detail.Properties, 'PreferredMaintenanceWindow') as preferred_maintenance_window,
                json_extract_path_text(detail.Properties, 'PubliclyAccessible') as publicly_accessible,
                json_extract_path_text(detail.Properties, 'CaCertificateIdentifier') as ca_certificate_identifier,
                json_extract_path_text(detail.Properties, 'BackupRetention') as backup_retention,
                json_extract_path_text(detail.Properties, 'RotateMasterUserPassword') as rotate_master_user_password,
                json_extract_path_text(detail.Properties, 'RelationalDatabaseParameters') as relational_database_parameters
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Lightsail::Database'
                AND detail.data__TypeName = 'AWS::Lightsail::Database'
                AND listing.region = 'us-east-1'
    distributions:
      name: distributions
      id: aws.lightsail.distributions
      x-cfn-schema-name: Distribution
      x-cfn-type-name: AWS::Lightsail::Distribution
      x-identifiers:
        - DistributionName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Distribution&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Distribution"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Distribution"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Distribution"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/distributions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/distributions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/distributions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DistributionName') as distribution_name,
              JSON_EXTRACT(Properties, '$.DistributionArn') as distribution_arn,
              JSON_EXTRACT(Properties, '$.BundleId') as bundle_id,
              JSON_EXTRACT(Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(Properties, '$.CacheBehaviors') as cache_behaviors,
              JSON_EXTRACT(Properties, '$.CacheBehaviorSettings') as cache_behavior_settings,
              JSON_EXTRACT(Properties, '$.DefaultCacheBehavior') as default_cache_behavior,
              JSON_EXTRACT(Properties, '$.Origin') as origin,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.AbleToUpdateBundle') as able_to_update_bundle,
              JSON_EXTRACT(Properties, '$.IsEnabled') as is_enabled,
              JSON_EXTRACT(Properties, '$.CertificateName') as certificate_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Distribution'
              AND data__Identifier = '<DistributionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DistributionName') as distribution_name,
                JSON_EXTRACT(detail.Properties, '$.DistributionArn') as distribution_arn,
                JSON_EXTRACT(detail.Properties, '$.BundleId') as bundle_id,
                JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
                JSON_EXTRACT(detail.Properties, '$.CacheBehaviors') as cache_behaviors,
                JSON_EXTRACT(detail.Properties, '$.CacheBehaviorSettings') as cache_behavior_settings,
                JSON_EXTRACT(detail.Properties, '$.DefaultCacheBehavior') as default_cache_behavior,
                JSON_EXTRACT(detail.Properties, '$.Origin') as origin,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.AbleToUpdateBundle') as able_to_update_bundle,
                JSON_EXTRACT(detail.Properties, '$.IsEnabled') as is_enabled,
                JSON_EXTRACT(detail.Properties, '$.CertificateName') as certificate_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lightsail::Distribution'
                AND detail.data__TypeName = 'AWS::Lightsail::Distribution'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DistributionName') as distribution_name,
                  json_extract_path_text(Properties, 'DistributionArn') as distribution_arn,
                  json_extract_path_text(Properties, 'BundleId') as bundle_id,
                  json_extract_path_text(Properties, 'IpAddressType') as ip_address_type,
                  json_extract_path_text(Properties, 'CacheBehaviors') as cache_behaviors,
                  json_extract_path_text(Properties, 'CacheBehaviorSettings') as cache_behavior_settings,
                  json_extract_path_text(Properties, 'DefaultCacheBehavior') as default_cache_behavior,
                  json_extract_path_text(Properties, 'Origin') as origin,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'AbleToUpdateBundle') as able_to_update_bundle,
                  json_extract_path_text(Properties, 'IsEnabled') as is_enabled,
                  json_extract_path_text(Properties, 'CertificateName') as certificate_name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Distribution'
                  AND data__Identifier = '<DistributionName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DistributionName') as distribution_name,
                    json_extract_path_text(detail.Properties, 'DistributionArn') as distribution_arn,
                    json_extract_path_text(detail.Properties, 'BundleId') as bundle_id,
                    json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                    json_extract_path_text(detail.Properties, 'CacheBehaviors') as cache_behaviors,
                    json_extract_path_text(detail.Properties, 'CacheBehaviorSettings') as cache_behavior_settings,
                    json_extract_path_text(detail.Properties, 'DefaultCacheBehavior') as default_cache_behavior,
                    json_extract_path_text(detail.Properties, 'Origin') as origin,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'AbleToUpdateBundle') as able_to_update_bundle,
                    json_extract_path_text(detail.Properties, 'IsEnabled') as is_enabled,
                    json_extract_path_text(detail.Properties, 'CertificateName') as certificate_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lightsail::Distribution'
                    AND detail.data__TypeName = 'AWS::Lightsail::Distribution'
                    AND listing.region = 'us-east-1'
    distributions_list_only:
      name: distributions_list_only
      id: aws.lightsail.distributions_list_only
      x-cfn-schema-name: Distribution
      x-cfn-type-name: AWS::Lightsail::Distribution
      x-identifiers:
        - DistributionName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DistributionName') as distribution_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Distribution'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DistributionName') as distribution_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Distribution'
                AND region = 'us-east-1'
    distribution_tags:
      name: distribution_tags
      id: aws.lightsail.distribution_tags
      x-cfn-schema-name: Distribution
      x-cfn-type-name: AWS::Lightsail::Distribution
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DistributionName') as distribution_name,
              JSON_EXTRACT(detail.Properties, '$.DistributionArn') as distribution_arn,
              JSON_EXTRACT(detail.Properties, '$.BundleId') as bundle_id,
              JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(detail.Properties, '$.CacheBehaviors') as cache_behaviors,
              JSON_EXTRACT(detail.Properties, '$.CacheBehaviorSettings') as cache_behavior_settings,
              JSON_EXTRACT(detail.Properties, '$.DefaultCacheBehavior') as default_cache_behavior,
              JSON_EXTRACT(detail.Properties, '$.Origin') as origin,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.AbleToUpdateBundle') as able_to_update_bundle,
              JSON_EXTRACT(detail.Properties, '$.IsEnabled') as is_enabled,
              JSON_EXTRACT(detail.Properties, '$.CertificateName') as certificate_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Lightsail::Distribution'
              AND detail.data__TypeName = 'AWS::Lightsail::Distribution'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DistributionName') as distribution_name,
                json_extract_path_text(detail.Properties, 'DistributionArn') as distribution_arn,
                json_extract_path_text(detail.Properties, 'BundleId') as bundle_id,
                json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                json_extract_path_text(detail.Properties, 'CacheBehaviors') as cache_behaviors,
                json_extract_path_text(detail.Properties, 'CacheBehaviorSettings') as cache_behavior_settings,
                json_extract_path_text(detail.Properties, 'DefaultCacheBehavior') as default_cache_behavior,
                json_extract_path_text(detail.Properties, 'Origin') as origin,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'AbleToUpdateBundle') as able_to_update_bundle,
                json_extract_path_text(detail.Properties, 'IsEnabled') as is_enabled,
                json_extract_path_text(detail.Properties, 'CertificateName') as certificate_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Lightsail::Distribution'
                AND detail.data__TypeName = 'AWS::Lightsail::Distribution'
                AND listing.region = 'us-east-1'
    instances:
      name: instances
      id: aws.lightsail.instances
      x-cfn-schema-name: Instance
      x-cfn-type-name: AWS::Lightsail::Instance
      x-identifiers:
        - InstanceName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Instance&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Instance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Instance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::Instance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/instances/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/instances/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/instances/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SupportCode') as support_code,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.IsStaticIp') as is_static_ip,
              JSON_EXTRACT(Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(Properties, '$.PublicIpAddress') as public_ip_address,
              JSON_EXTRACT(Properties, '$.Ipv6Addresses') as ipv6_addresses,
              JSON_EXTRACT(Properties, '$.Location') as location,
              JSON_EXTRACT(Properties, '$.Hardware') as hardware,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Networking') as networking,
              JSON_EXTRACT(Properties, '$.UserName') as user_name,
              JSON_EXTRACT(Properties, '$.SshKeyName') as ssh_key_name,
              JSON_EXTRACT(Properties, '$.InstanceName') as instance_name,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.BundleId') as bundle_id,
              JSON_EXTRACT(Properties, '$.BlueprintId') as blueprint_id,
              JSON_EXTRACT(Properties, '$.AddOns') as add_ons,
              JSON_EXTRACT(Properties, '$.UserData') as user_data,
              JSON_EXTRACT(Properties, '$.KeyPairName') as key_pair_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.InstanceArn') as instance_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Instance'
              AND data__Identifier = '<InstanceName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.SupportCode') as support_code,
                JSON_EXTRACT(detail.Properties, '$.ResourceType') as resource_type,
                JSON_EXTRACT(detail.Properties, '$.IsStaticIp') as is_static_ip,
                JSON_EXTRACT(detail.Properties, '$.PrivateIpAddress') as private_ip_address,
                JSON_EXTRACT(detail.Properties, '$.PublicIpAddress') as public_ip_address,
                JSON_EXTRACT(detail.Properties, '$.Ipv6Addresses') as ipv6_addresses,
                JSON_EXTRACT(detail.Properties, '$.Location') as location,
                JSON_EXTRACT(detail.Properties, '$.Hardware') as hardware,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Networking') as networking,
                JSON_EXTRACT(detail.Properties, '$.UserName') as user_name,
                JSON_EXTRACT(detail.Properties, '$.SshKeyName') as ssh_key_name,
                JSON_EXTRACT(detail.Properties, '$.InstanceName') as instance_name,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
                JSON_EXTRACT(detail.Properties, '$.BundleId') as bundle_id,
                JSON_EXTRACT(detail.Properties, '$.BlueprintId') as blueprint_id,
                JSON_EXTRACT(detail.Properties, '$.AddOns') as add_ons,
                JSON_EXTRACT(detail.Properties, '$.UserData') as user_data,
                JSON_EXTRACT(detail.Properties, '$.KeyPairName') as key_pair_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.InstanceArn') as instance_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lightsail::Instance'
                AND detail.data__TypeName = 'AWS::Lightsail::Instance'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'SupportCode') as support_code,
                  json_extract_path_text(Properties, 'ResourceType') as resource_type,
                  json_extract_path_text(Properties, 'IsStaticIp') as is_static_ip,
                  json_extract_path_text(Properties, 'PrivateIpAddress') as private_ip_address,
                  json_extract_path_text(Properties, 'PublicIpAddress') as public_ip_address,
                  json_extract_path_text(Properties, 'Ipv6Addresses') as ipv6_addresses,
                  json_extract_path_text(Properties, 'Location') as location,
                  json_extract_path_text(Properties, 'Hardware') as hardware,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Networking') as networking,
                  json_extract_path_text(Properties, 'UserName') as user_name,
                  json_extract_path_text(Properties, 'SshKeyName') as ssh_key_name,
                  json_extract_path_text(Properties, 'InstanceName') as instance_name,
                  json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                  json_extract_path_text(Properties, 'BundleId') as bundle_id,
                  json_extract_path_text(Properties, 'BlueprintId') as blueprint_id,
                  json_extract_path_text(Properties, 'AddOns') as add_ons,
                  json_extract_path_text(Properties, 'UserData') as user_data,
                  json_extract_path_text(Properties, 'KeyPairName') as key_pair_name,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'InstanceArn') as instance_arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::Instance'
                  AND data__Identifier = '<InstanceName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'SupportCode') as support_code,
                    json_extract_path_text(detail.Properties, 'ResourceType') as resource_type,
                    json_extract_path_text(detail.Properties, 'IsStaticIp') as is_static_ip,
                    json_extract_path_text(detail.Properties, 'PrivateIpAddress') as private_ip_address,
                    json_extract_path_text(detail.Properties, 'PublicIpAddress') as public_ip_address,
                    json_extract_path_text(detail.Properties, 'Ipv6Addresses') as ipv6_addresses,
                    json_extract_path_text(detail.Properties, 'Location') as location,
                    json_extract_path_text(detail.Properties, 'Hardware') as hardware,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Networking') as networking,
                    json_extract_path_text(detail.Properties, 'UserName') as user_name,
                    json_extract_path_text(detail.Properties, 'SshKeyName') as ssh_key_name,
                    json_extract_path_text(detail.Properties, 'InstanceName') as instance_name,
                    json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                    json_extract_path_text(detail.Properties, 'BundleId') as bundle_id,
                    json_extract_path_text(detail.Properties, 'BlueprintId') as blueprint_id,
                    json_extract_path_text(detail.Properties, 'AddOns') as add_ons,
                    json_extract_path_text(detail.Properties, 'UserData') as user_data,
                    json_extract_path_text(detail.Properties, 'KeyPairName') as key_pair_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'InstanceArn') as instance_arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lightsail::Instance'
                    AND detail.data__TypeName = 'AWS::Lightsail::Instance'
                    AND listing.region = 'us-east-1'
    instances_list_only:
      name: instances_list_only
      id: aws.lightsail.instances_list_only
      x-cfn-schema-name: Instance
      x-cfn-type-name: AWS::Lightsail::Instance
      x-identifiers:
        - InstanceName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.InstanceName') as instance_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Instance'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'InstanceName') as instance_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::Instance'
                AND region = 'us-east-1'
    instance_tags:
      name: instance_tags
      id: aws.lightsail.instance_tags
      x-cfn-schema-name: Instance
      x-cfn-type-name: AWS::Lightsail::Instance
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.SupportCode') as support_code,
              JSON_EXTRACT(detail.Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(detail.Properties, '$.IsStaticIp') as is_static_ip,
              JSON_EXTRACT(detail.Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(detail.Properties, '$.PublicIpAddress') as public_ip_address,
              JSON_EXTRACT(detail.Properties, '$.Ipv6Addresses') as ipv6_addresses,
              JSON_EXTRACT(detail.Properties, '$.Location') as location,
              JSON_EXTRACT(detail.Properties, '$.Hardware') as hardware,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.Networking') as networking,
              JSON_EXTRACT(detail.Properties, '$.UserName') as user_name,
              JSON_EXTRACT(detail.Properties, '$.SshKeyName') as ssh_key_name,
              JSON_EXTRACT(detail.Properties, '$.InstanceName') as instance_name,
              JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(detail.Properties, '$.BundleId') as bundle_id,
              JSON_EXTRACT(detail.Properties, '$.BlueprintId') as blueprint_id,
              JSON_EXTRACT(detail.Properties, '$.AddOns') as add_ons,
              JSON_EXTRACT(detail.Properties, '$.UserData') as user_data,
              JSON_EXTRACT(detail.Properties, '$.KeyPairName') as key_pair_name,
              JSON_EXTRACT(detail.Properties, '$.InstanceArn') as instance_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Lightsail::Instance'
              AND detail.data__TypeName = 'AWS::Lightsail::Instance'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'SupportCode') as support_code,
                json_extract_path_text(detail.Properties, 'ResourceType') as resource_type,
                json_extract_path_text(detail.Properties, 'IsStaticIp') as is_static_ip,
                json_extract_path_text(detail.Properties, 'PrivateIpAddress') as private_ip_address,
                json_extract_path_text(detail.Properties, 'PublicIpAddress') as public_ip_address,
                json_extract_path_text(detail.Properties, 'Ipv6Addresses') as ipv6_addresses,
                json_extract_path_text(detail.Properties, 'Location') as location,
                json_extract_path_text(detail.Properties, 'Hardware') as hardware,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'Networking') as networking,
                json_extract_path_text(detail.Properties, 'UserName') as user_name,
                json_extract_path_text(detail.Properties, 'SshKeyName') as ssh_key_name,
                json_extract_path_text(detail.Properties, 'InstanceName') as instance_name,
                json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(detail.Properties, 'BundleId') as bundle_id,
                json_extract_path_text(detail.Properties, 'BlueprintId') as blueprint_id,
                json_extract_path_text(detail.Properties, 'AddOns') as add_ons,
                json_extract_path_text(detail.Properties, 'UserData') as user_data,
                json_extract_path_text(detail.Properties, 'KeyPairName') as key_pair_name,
                json_extract_path_text(detail.Properties, 'InstanceArn') as instance_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Lightsail::Instance'
                AND detail.data__TypeName = 'AWS::Lightsail::Instance'
                AND listing.region = 'us-east-1'
    load_balancers:
      name: load_balancers
      id: aws.lightsail.load_balancers
      x-cfn-schema-name: LoadBalancer
      x-cfn-type-name: AWS::Lightsail::LoadBalancer
      x-identifiers:
        - LoadBalancerName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LoadBalancer&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::LoadBalancer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::LoadBalancer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::LoadBalancer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/load_balancers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/load_balancers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/load_balancers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LoadBalancerName') as load_balancer_name,
              JSON_EXTRACT(Properties, '$.LoadBalancerArn') as load_balancer_arn,
              JSON_EXTRACT(Properties, '$.InstancePort') as instance_port,
              JSON_EXTRACT(Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(Properties, '$.AttachedInstances') as attached_instances,
              JSON_EXTRACT(Properties, '$.HealthCheckPath') as health_check_path,
              JSON_EXTRACT(Properties, '$.SessionStickinessEnabled') as session_stickiness_enabled,
              JSON_EXTRACT(Properties, '$.SessionStickinessLBCookieDurationSeconds') as session_stickiness_lb_cookie_duration_seconds,
              JSON_EXTRACT(Properties, '$.TlsPolicyName') as tls_policy_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::LoadBalancer'
              AND data__Identifier = '<LoadBalancerName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.LoadBalancerName') as load_balancer_name,
                JSON_EXTRACT(detail.Properties, '$.LoadBalancerArn') as load_balancer_arn,
                JSON_EXTRACT(detail.Properties, '$.InstancePort') as instance_port,
                JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
                JSON_EXTRACT(detail.Properties, '$.AttachedInstances') as attached_instances,
                JSON_EXTRACT(detail.Properties, '$.HealthCheckPath') as health_check_path,
                JSON_EXTRACT(detail.Properties, '$.SessionStickinessEnabled') as session_stickiness_enabled,
                JSON_EXTRACT(detail.Properties, '$.SessionStickinessLBCookieDurationSeconds') as session_stickiness_lb_cookie_duration_seconds,
                JSON_EXTRACT(detail.Properties, '$.TlsPolicyName') as tls_policy_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lightsail::LoadBalancer'
                AND detail.data__TypeName = 'AWS::Lightsail::LoadBalancer'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'LoadBalancerName') as load_balancer_name,
                  json_extract_path_text(Properties, 'LoadBalancerArn') as load_balancer_arn,
                  json_extract_path_text(Properties, 'InstancePort') as instance_port,
                  json_extract_path_text(Properties, 'IpAddressType') as ip_address_type,
                  json_extract_path_text(Properties, 'AttachedInstances') as attached_instances,
                  json_extract_path_text(Properties, 'HealthCheckPath') as health_check_path,
                  json_extract_path_text(Properties, 'SessionStickinessEnabled') as session_stickiness_enabled,
                  json_extract_path_text(Properties, 'SessionStickinessLBCookieDurationSeconds') as session_stickiness_lb_cookie_duration_seconds,
                  json_extract_path_text(Properties, 'TlsPolicyName') as tls_policy_name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::LoadBalancer'
                  AND data__Identifier = '<LoadBalancerName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'LoadBalancerName') as load_balancer_name,
                    json_extract_path_text(detail.Properties, 'LoadBalancerArn') as load_balancer_arn,
                    json_extract_path_text(detail.Properties, 'InstancePort') as instance_port,
                    json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                    json_extract_path_text(detail.Properties, 'AttachedInstances') as attached_instances,
                    json_extract_path_text(detail.Properties, 'HealthCheckPath') as health_check_path,
                    json_extract_path_text(detail.Properties, 'SessionStickinessEnabled') as session_stickiness_enabled,
                    json_extract_path_text(detail.Properties, 'SessionStickinessLBCookieDurationSeconds') as session_stickiness_lb_cookie_duration_seconds,
                    json_extract_path_text(detail.Properties, 'TlsPolicyName') as tls_policy_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lightsail::LoadBalancer'
                    AND detail.data__TypeName = 'AWS::Lightsail::LoadBalancer'
                    AND listing.region = 'us-east-1'
    load_balancers_list_only:
      name: load_balancers_list_only
      id: aws.lightsail.load_balancers_list_only
      x-cfn-schema-name: LoadBalancer
      x-cfn-type-name: AWS::Lightsail::LoadBalancer
      x-identifiers:
        - LoadBalancerName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LoadBalancerName') as load_balancer_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::LoadBalancer'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LoadBalancerName') as load_balancer_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::LoadBalancer'
                AND region = 'us-east-1'
    load_balancer_tags:
      name: load_balancer_tags
      id: aws.lightsail.load_balancer_tags
      x-cfn-schema-name: LoadBalancer
      x-cfn-type-name: AWS::Lightsail::LoadBalancer
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.LoadBalancerName') as load_balancer_name,
              JSON_EXTRACT(detail.Properties, '$.LoadBalancerArn') as load_balancer_arn,
              JSON_EXTRACT(detail.Properties, '$.InstancePort') as instance_port,
              JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(detail.Properties, '$.AttachedInstances') as attached_instances,
              JSON_EXTRACT(detail.Properties, '$.HealthCheckPath') as health_check_path,
              JSON_EXTRACT(detail.Properties, '$.SessionStickinessEnabled') as session_stickiness_enabled,
              JSON_EXTRACT(detail.Properties, '$.SessionStickinessLBCookieDurationSeconds') as session_stickiness_lb_cookie_duration_seconds,
              JSON_EXTRACT(detail.Properties, '$.TlsPolicyName') as tls_policy_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Lightsail::LoadBalancer'
              AND detail.data__TypeName = 'AWS::Lightsail::LoadBalancer'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'LoadBalancerName') as load_balancer_name,
                json_extract_path_text(detail.Properties, 'LoadBalancerArn') as load_balancer_arn,
                json_extract_path_text(detail.Properties, 'InstancePort') as instance_port,
                json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                json_extract_path_text(detail.Properties, 'AttachedInstances') as attached_instances,
                json_extract_path_text(detail.Properties, 'HealthCheckPath') as health_check_path,
                json_extract_path_text(detail.Properties, 'SessionStickinessEnabled') as session_stickiness_enabled,
                json_extract_path_text(detail.Properties, 'SessionStickinessLBCookieDurationSeconds') as session_stickiness_lb_cookie_duration_seconds,
                json_extract_path_text(detail.Properties, 'TlsPolicyName') as tls_policy_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Lightsail::LoadBalancer'
                AND detail.data__TypeName = 'AWS::Lightsail::LoadBalancer'
                AND listing.region = 'us-east-1'
    load_balancer_tls_certificates:
      name: load_balancer_tls_certificates
      id: aws.lightsail.load_balancer_tls_certificates
      x-cfn-schema-name: LoadBalancerTlsCertificate
      x-cfn-type-name: AWS::Lightsail::LoadBalancerTlsCertificate
      x-identifiers:
        - CertificateName
        - LoadBalancerName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LoadBalancerTlsCertificate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::LoadBalancerTlsCertificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::LoadBalancerTlsCertificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::LoadBalancerTlsCertificate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/load_balancer_tls_certificates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/load_balancer_tls_certificates/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/load_balancer_tls_certificates/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LoadBalancerName') as load_balancer_name,
              JSON_EXTRACT(Properties, '$.CertificateName') as certificate_name,
              JSON_EXTRACT(Properties, '$.CertificateDomainName') as certificate_domain_name,
              JSON_EXTRACT(Properties, '$.CertificateAlternativeNames') as certificate_alternative_names,
              JSON_EXTRACT(Properties, '$.LoadBalancerTlsCertificateArn') as load_balancer_tls_certificate_arn,
              JSON_EXTRACT(Properties, '$.IsAttached') as is_attached,
              JSON_EXTRACT(Properties, '$.HttpsRedirectionEnabled') as https_redirection_enabled,
              JSON_EXTRACT(Properties, '$.Status') as status
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::LoadBalancerTlsCertificate'
              AND data__Identifier = '<CertificateName>|<LoadBalancerName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.LoadBalancerName') as load_balancer_name,
                JSON_EXTRACT(detail.Properties, '$.CertificateName') as certificate_name,
                JSON_EXTRACT(detail.Properties, '$.CertificateDomainName') as certificate_domain_name,
                JSON_EXTRACT(detail.Properties, '$.CertificateAlternativeNames') as certificate_alternative_names,
                JSON_EXTRACT(detail.Properties, '$.LoadBalancerTlsCertificateArn') as load_balancer_tls_certificate_arn,
                JSON_EXTRACT(detail.Properties, '$.IsAttached') as is_attached,
                JSON_EXTRACT(detail.Properties, '$.HttpsRedirectionEnabled') as https_redirection_enabled,
                JSON_EXTRACT(detail.Properties, '$.Status') as status
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lightsail::LoadBalancerTlsCertificate'
                AND detail.data__TypeName = 'AWS::Lightsail::LoadBalancerTlsCertificate'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'LoadBalancerName') as load_balancer_name,
                  json_extract_path_text(Properties, 'CertificateName') as certificate_name,
                  json_extract_path_text(Properties, 'CertificateDomainName') as certificate_domain_name,
                  json_extract_path_text(Properties, 'CertificateAlternativeNames') as certificate_alternative_names,
                  json_extract_path_text(Properties, 'LoadBalancerTlsCertificateArn') as load_balancer_tls_certificate_arn,
                  json_extract_path_text(Properties, 'IsAttached') as is_attached,
                  json_extract_path_text(Properties, 'HttpsRedirectionEnabled') as https_redirection_enabled,
                  json_extract_path_text(Properties, 'Status') as status
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::LoadBalancerTlsCertificate'
                  AND data__Identifier = '<CertificateName>|<LoadBalancerName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'LoadBalancerName') as load_balancer_name,
                    json_extract_path_text(detail.Properties, 'CertificateName') as certificate_name,
                    json_extract_path_text(detail.Properties, 'CertificateDomainName') as certificate_domain_name,
                    json_extract_path_text(detail.Properties, 'CertificateAlternativeNames') as certificate_alternative_names,
                    json_extract_path_text(detail.Properties, 'LoadBalancerTlsCertificateArn') as load_balancer_tls_certificate_arn,
                    json_extract_path_text(detail.Properties, 'IsAttached') as is_attached,
                    json_extract_path_text(detail.Properties, 'HttpsRedirectionEnabled') as https_redirection_enabled,
                    json_extract_path_text(detail.Properties, 'Status') as status
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lightsail::LoadBalancerTlsCertificate'
                    AND detail.data__TypeName = 'AWS::Lightsail::LoadBalancerTlsCertificate'
                    AND listing.region = 'us-east-1'
    load_balancer_tls_certificates_list_only:
      name: load_balancer_tls_certificates_list_only
      id: aws.lightsail.load_balancer_tls_certificates_list_only
      x-cfn-schema-name: LoadBalancerTlsCertificate
      x-cfn-type-name: AWS::Lightsail::LoadBalancerTlsCertificate
      x-identifiers:
        - CertificateName
        - LoadBalancerName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CertificateName') as certificate_name,
              JSON_EXTRACT(Properties, '$.LoadBalancerName') as load_balancer_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::LoadBalancerTlsCertificate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CertificateName') as certificate_name,
                json_extract_path_text(Properties, 'LoadBalancerName') as load_balancer_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::LoadBalancerTlsCertificate'
                AND region = 'us-east-1'
    static_ips:
      name: static_ips
      id: aws.lightsail.static_ips
      x-cfn-schema-name: StaticIp
      x-cfn-type-name: AWS::Lightsail::StaticIp
      x-identifiers:
        - StaticIpName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__StaticIp&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::StaticIp"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::StaticIp"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lightsail::StaticIp"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/static_ips/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/static_ips/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/static_ips/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.StaticIpName') as static_ip_name,
              JSON_EXTRACT(Properties, '$.AttachedTo') as attached_to,
              JSON_EXTRACT(Properties, '$.IsAttached') as is_attached,
              JSON_EXTRACT(Properties, '$.IpAddress') as ip_address,
              JSON_EXTRACT(Properties, '$.StaticIpArn') as static_ip_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::StaticIp'
              AND data__Identifier = '<StaticIpName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.StaticIpName') as static_ip_name,
                JSON_EXTRACT(detail.Properties, '$.AttachedTo') as attached_to,
                JSON_EXTRACT(detail.Properties, '$.IsAttached') as is_attached,
                JSON_EXTRACT(detail.Properties, '$.IpAddress') as ip_address,
                JSON_EXTRACT(detail.Properties, '$.StaticIpArn') as static_ip_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lightsail::StaticIp'
                AND detail.data__TypeName = 'AWS::Lightsail::StaticIp'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'StaticIpName') as static_ip_name,
                  json_extract_path_text(Properties, 'AttachedTo') as attached_to,
                  json_extract_path_text(Properties, 'IsAttached') as is_attached,
                  json_extract_path_text(Properties, 'IpAddress') as ip_address,
                  json_extract_path_text(Properties, 'StaticIpArn') as static_ip_arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lightsail::StaticIp'
                  AND data__Identifier = '<StaticIpName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'StaticIpName') as static_ip_name,
                    json_extract_path_text(detail.Properties, 'AttachedTo') as attached_to,
                    json_extract_path_text(detail.Properties, 'IsAttached') as is_attached,
                    json_extract_path_text(detail.Properties, 'IpAddress') as ip_address,
                    json_extract_path_text(detail.Properties, 'StaticIpArn') as static_ip_arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lightsail::StaticIp'
                    AND detail.data__TypeName = 'AWS::Lightsail::StaticIp'
                    AND listing.region = 'us-east-1'
    static_ips_list_only:
      name: static_ips_list_only
      id: aws.lightsail.static_ips_list_only
      x-cfn-schema-name: StaticIp
      x-cfn-type-name: AWS::Lightsail::StaticIp
      x-identifiers:
        - StaticIpName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StaticIpName') as static_ip_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::StaticIp'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'StaticIpName') as static_ip_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lightsail::StaticIp'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Alarm&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAlarm
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAlarmRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Bucket&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateBucket
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateBucketRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Certificate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCertificate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCertificateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Container&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateContainer
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateContainerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Database&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDatabase
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDatabaseRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Distribution&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDistribution
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDistributionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Instance&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateInstance
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateInstanceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LoadBalancer&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLoadBalancer
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLoadBalancerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LoadBalancerTlsCertificate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLoadBalancerTlsCertificate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLoadBalancerTlsCertificateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__StaticIp&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateStaticIp
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateStaticIpRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
