openapi: 3.0.0
info:
  title: CodeDeploy
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    Application:
      type: object
      properties:
        ApplicationName:
          description: A name for the application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the application name.
          type: string
        ComputePlatform:
          description: The compute platform that CodeDeploy deploys the application to.
          type: string
        Tags:
          description: 'The metadata that you apply to CodeDeploy applications to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. '
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          x-insertionOrder: false
          uniqueItems: false
      x-stackql-resource-name: application
      x-stackql-primaryIdentifier:
        - ApplicationName
    TimeBasedLinear:
      type: object
      additionalProperties: false
      properties:
        LinearInterval:
          type: integer
        LinearPercentage:
          type: integer
      required:
        - LinearInterval
        - LinearPercentage
    TimeBasedCanary:
      type: object
      additionalProperties: false
      properties:
        CanaryPercentage:
          type: integer
        CanaryInterval:
          type: integer
      required:
        - CanaryPercentage
        - CanaryInterval
    TrafficRoutingConfig:
      type: object
      additionalProperties: false
      properties:
        Type:
          type: string
        TimeBasedLinear:
          $ref: '#/components/schemas/TimeBasedLinear'
        TimeBasedCanary:
          $ref: '#/components/schemas/TimeBasedCanary'
      required:
        - Type
    MinimumHealthyHosts:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: integer
        Type:
          type: string
      required:
        - Type
        - Value
    DeploymentConfig:
      type: object
      properties:
        ComputePlatform:
          description: The destination platform type for the deployment (Lambda, Server, or ECS).
          type: string
        DeploymentConfigName:
          description: A name for the deployment configuration. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the deployment configuration name. For more information, see Name Type.
          type: string
        MinimumHealthyHosts:
          description: 'The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value.'
          $ref: '#/components/schemas/MinimumHealthyHosts'
        TrafficRoutingConfig:
          description: The configuration that specifies how the deployment traffic is routed.
          $ref: '#/components/schemas/TrafficRoutingConfig'
      x-stackql-resource-name: deployment_config
      x-stackql-primaryIdentifier:
        - DeploymentConfigName
    OnPremisesTagSet:
      type: object
      additionalProperties: false
      properties:
        OnPremisesTagSetList:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/OnPremisesTagSetListObject'
    DeploymentStyle:
      type: object
      additionalProperties: false
      properties:
        DeploymentOption:
          type: string
        DeploymentType:
          type: string
    BlueGreenDeploymentConfiguration:
      type: object
      additionalProperties: false
      properties:
        GreenFleetProvisioningOption:
          $ref: '#/components/schemas/GreenFleetProvisioningOption'
        DeploymentReadyOption:
          $ref: '#/components/schemas/DeploymentReadyOption'
        TerminateBlueInstancesOnDeploymentSuccess:
          $ref: '#/components/schemas/BlueInstanceTerminationOption'
    TagFilter:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Type:
          type: string
        Key:
          type: string
    TriggerConfig:
      type: object
      additionalProperties: false
      properties:
        TriggerTargetArn:
          type: string
        TriggerName:
          type: string
        TriggerEvents:
          type: array
          uniqueItems: true
          items:
            type: string
    GitHubLocation:
      type: object
      additionalProperties: false
      properties:
        Repository:
          type: string
        CommitId:
          type: string
      required:
        - Repository
        - CommitId
    Deployment:
      type: object
      additionalProperties: false
      properties:
        Description:
          type: string
        Revision:
          $ref: '#/components/schemas/RevisionLocation'
        IgnoreApplicationStopFailures:
          type: boolean
      required:
        - Revision
    ELBInfo:
      type: object
      additionalProperties: false
      properties:
        Name:
          type: string
    EC2TagSetListObject:
      type: object
      additionalProperties: false
      properties:
        Ec2TagGroup:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/EC2TagFilter'
    S3Location:
      type: object
      additionalProperties: false
      properties:
        BundleType:
          type: string
        Bucket:
          type: string
        ETag:
          type: string
        Version:
          type: string
        Key:
          type: string
      required:
        - Bucket
        - Key
    AutoRollbackConfiguration:
      type: object
      additionalProperties: false
      properties:
        Events:
          type: array
          uniqueItems: true
          items:
            type: string
        Enabled:
          type: boolean
    DeploymentReadyOption:
      type: object
      additionalProperties: false
      properties:
        WaitTimeInMinutes:
          type: integer
        ActionOnTimeout:
          type: string
    EC2TagFilter:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Type:
          type: string
        Key:
          type: string
    RevisionLocation:
      type: object
      additionalProperties: false
      properties:
        S3Location:
          $ref: '#/components/schemas/S3Location'
        GitHubLocation:
          $ref: '#/components/schemas/GitHubLocation'
        RevisionType:
          type: string
    GreenFleetProvisioningOption:
      type: object
      additionalProperties: false
      properties:
        Action:
          type: string
    LoadBalancerInfo:
      type: object
      additionalProperties: false
      properties:
        TargetGroupInfoList:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TargetGroupInfo'
        ElbInfoList:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ELBInfo'
        TargetGroupPairInfoList:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TargetGroupPairInfo'
    AlarmConfiguration:
      type: object
      additionalProperties: false
      properties:
        Alarms:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Alarm'
        IgnorePollAlarmFailure:
          type: boolean
        Enabled:
          type: boolean
    EC2TagSet:
      type: object
      additionalProperties: false
      properties:
        Ec2TagSetList:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/EC2TagSetListObject'
    TrafficRoute:
      type: object
      additionalProperties: false
      properties:
        ListenerArns:
          type: array
          uniqueItems: true
          items:
            type: string
    ECSService:
      type: object
      additionalProperties: false
      properties:
        ServiceName:
          type: string
        ClusterName:
          type: string
      required:
        - ServiceName
        - ClusterName
    TargetGroupPairInfo:
      type: object
      additionalProperties: false
      properties:
        ProdTrafficRoute:
          $ref: '#/components/schemas/TrafficRoute'
        TestTrafficRoute:
          $ref: '#/components/schemas/TrafficRoute'
        TargetGroups:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TargetGroupInfo'
    Alarm:
      type: object
      additionalProperties: false
      properties:
        Name:
          type: string
    TargetGroupInfo:
      type: object
      additionalProperties: false
      properties:
        Name:
          type: string
    OnPremisesTagSetListObject:
      type: object
      additionalProperties: false
      properties:
        OnPremisesTagGroup:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TagFilter'
    BlueInstanceTerminationOption:
      type: object
      additionalProperties: false
      properties:
        TerminationWaitTimeInMinutes:
          type: integer
        Action:
          type: string
    DeploymentGroup:
      type: object
      properties:
        OnPremisesTagSet:
          $ref: '#/components/schemas/OnPremisesTagSet'
        ApplicationName:
          type: string
        DeploymentStyle:
          $ref: '#/components/schemas/DeploymentStyle'
        ServiceRoleArn:
          type: string
        BlueGreenDeploymentConfiguration:
          $ref: '#/components/schemas/BlueGreenDeploymentConfiguration'
        AutoScalingGroups:
          type: array
          uniqueItems: true
          items:
            type: string
        Ec2TagSet:
          $ref: '#/components/schemas/EC2TagSet'
        OutdatedInstancesStrategy:
          type: string
        TriggerConfigurations:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TriggerConfig'
        Deployment:
          $ref: '#/components/schemas/Deployment'
        DeploymentConfigName:
          type: string
        AlarmConfiguration:
          $ref: '#/components/schemas/AlarmConfiguration'
        Ec2TagFilters:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/EC2TagFilter'
        ECSServices:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ECSService'
        AutoRollbackConfiguration:
          $ref: '#/components/schemas/AutoRollbackConfiguration'
        LoadBalancerInfo:
          $ref: '#/components/schemas/LoadBalancerInfo'
        Id:
          type: string
        DeploymentGroupName:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        OnPremisesInstanceTagFilters:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TagFilter'
      required:
        - ApplicationName
        - ServiceRoleArn
      x-stackql-resource-name: deployment_group
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    applications:
      name: applications
      id: aws.codedeploy.applications
      x-cfn-schema-name: Application
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CodeDeploy::Application'
    application:
      name: application
      id: aws.codedeploy.application
      x-cfn-schema-name: Application
      x-type: get
      x-identifiers:
        - ApplicationName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.ComputePlatform') as compute_platform,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CodeDeploy::Application'
    deployment_configs:
      name: deployment_configs
      id: aws.codedeploy.deployment_configs
      x-cfn-schema-name: DeploymentConfig
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DeploymentConfigName') as deployment_config_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CodeDeploy::DeploymentConfig'
    deployment_config:
      name: deployment_config
      id: aws.codedeploy.deployment_config
      x-cfn-schema-name: DeploymentConfig
      x-type: get
      x-identifiers:
        - DeploymentConfigName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ComputePlatform') as compute_platform,
              JSON_EXTRACT(Properties, '$.DeploymentConfigName') as deployment_config_name,
              JSON_EXTRACT(Properties, '$.MinimumHealthyHosts.Value') as minimum_healthy_hosts_value,
              JSON_EXTRACT(Properties, '$.MinimumHealthyHosts.Type') as minimum_healthy_hosts_type,
              JSON_EXTRACT(Properties, '$.TrafficRoutingConfig.Type') as traffic_routing_config_type,
              JSON_EXTRACT(Properties, '$.TrafficRoutingConfig.TimeBasedLinear') as traffic_routing_config_time_based_linear,
              JSON_EXTRACT(Properties, '$.TrafficRoutingConfig.TimeBasedCanary') as traffic_routing_config_time_based_canary
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CodeDeploy::DeploymentConfig'
    deployment_groups:
      name: deployment_groups
      id: aws.codedeploy.deployment_groups
      x-cfn-schema-name: DeploymentGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CodeDeploy::DeploymentGroup'
    deployment_group:
      name: deployment_group
      id: aws.codedeploy.deployment_group
      x-cfn-schema-name: DeploymentGroup
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.OnPremisesTagSet.OnPremisesTagSetList') as on_premises_tag_set_on_premises_tag_set_list,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.DeploymentStyle.DeploymentOption') as deployment_style_deployment_option,
              JSON_EXTRACT(Properties, '$.DeploymentStyle.DeploymentType') as deployment_style_deployment_type,
              JSON_EXTRACT(Properties, '$.ServiceRoleArn') as service_role_arn,
              JSON_EXTRACT(Properties, '$.BlueGreenDeploymentConfiguration.GreenFleetProvisioningOption') as blue_green_deployment_configuration_green_fleet_provisioning_option,
              JSON_EXTRACT(Properties, '$.BlueGreenDeploymentConfiguration.DeploymentReadyOption') as blue_green_deployment_configuration_deployment_ready_option,
              JSON_EXTRACT(Properties, '$.BlueGreenDeploymentConfiguration.TerminateBlueInstancesOnDeploymentSuccess') as blue_green_deployment_configuration_terminate_blue_instances_on_deployment_success,
              JSON_EXTRACT(Properties, '$.AutoScalingGroups') as auto_scaling_groups,
              JSON_EXTRACT(Properties, '$.Ec2TagSet.Ec2TagSetList') as ec2_tag_set_ec2_tag_set_list,
              JSON_EXTRACT(Properties, '$.OutdatedInstancesStrategy') as outdated_instances_strategy,
              JSON_EXTRACT(Properties, '$.TriggerConfigurations') as trigger_configurations,
              JSON_EXTRACT(Properties, '$.Deployment.Description') as deployment_description,
              JSON_EXTRACT(Properties, '$.Deployment.Revision') as deployment_revision,
              JSON_EXTRACT(Properties, '$.Deployment.IgnoreApplicationStopFailures') as deployment_ignore_application_stop_failures,
              JSON_EXTRACT(Properties, '$.DeploymentConfigName') as deployment_config_name,
              JSON_EXTRACT(Properties, '$.AlarmConfiguration.Alarms') as alarm_configuration_alarms,
              JSON_EXTRACT(Properties, '$.AlarmConfiguration.IgnorePollAlarmFailure') as alarm_configuration_ignore_poll_alarm_failure,
              JSON_EXTRACT(Properties, '$.AlarmConfiguration.Enabled') as alarm_configuration_enabled,
              JSON_EXTRACT(Properties, '$.Ec2TagFilters') as ec2_tag_filters,
              JSON_EXTRACT(Properties, '$.ECSServices') as e_cs_services,
              JSON_EXTRACT(Properties, '$.AutoRollbackConfiguration.Events') as auto_rollback_configuration_events,
              JSON_EXTRACT(Properties, '$.AutoRollbackConfiguration.Enabled') as auto_rollback_configuration_enabled,
              JSON_EXTRACT(Properties, '$.LoadBalancerInfo.TargetGroupInfoList') as load_balancer_info_target_group_info_list,
              JSON_EXTRACT(Properties, '$.LoadBalancerInfo.ElbInfoList') as load_balancer_info_elb_info_list,
              JSON_EXTRACT(Properties, '$.LoadBalancerInfo.TargetGroupPairInfoList') as load_balancer_info_target_group_pair_info_list,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.DeploymentGroupName') as deployment_group_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.OnPremisesInstanceTagFilters') as on_premises_instance_tag_filters
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CodeDeploy::DeploymentGroup'
