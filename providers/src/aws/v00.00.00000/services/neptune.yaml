openapi: 3.0.0
info:
  title: Neptune
  version: 1.0.0
paths: {}
components:
  schemas:
    DBClusterRole:
      description: Describes an AWS Identity and Access Management (IAM) role that is associated with a DB cluster.
      type: object
      additionalProperties: false
      properties:
        FeatureName:
          description: The name of the feature associated with the AWS Identity and Access Management (IAM) role. For the list of supported feature names, see DBEngineVersion in the Amazon Neptune API Reference.
          type: string
        RoleArn:
          description: The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
          type: string
      required:
        - RoleArn
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
      required:
        - Value
        - Key
    DBCluster:
      type: object
      properties:
        Endpoint:
          description: 'The connection endpoint for the DB cluster. For example: mystack-mydbcluster-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com'
          type: string
        ReadEndpoint:
          description: 'The reader endpoint for the DB cluster. For example: mystack-mydbcluster-ro-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com'
          type: string
        ClusterResourceId:
          description: 'The resource id for the DB cluster. For example: `cluster-ABCD1234EFGH5678IJKL90MNOP`. The cluster ID uniquely identifies the cluster and is used in things like IAM authentication policies.'
          type: string
        AssociatedRoles:
          description: Provides a list of the AWS Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other AWS services on your behalf.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/DBClusterRole'
        AvailabilityZones:
          description: Provides the list of EC2 Availability Zones that instances in the DB cluster can be created in.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
        BackupRetentionPeriod:
          description: Specifies the number of days for which automatic DB snapshots are retained.
          default: 1
          minimum: 1
          type: integer
        DBClusterIdentifier:
          description: The DB cluster identifier. Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster stored as a lowercase string.
          type: string
          pattern: ^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
          minLength: 1
          maxLength: 63
        DBClusterParameterGroupName:
          description: Provides the name of the DB cluster parameter group.
          type: string
        DBSubnetGroupName:
          description: Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.
          type: string
        DeletionProtection:
          description: Indicates whether or not the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled.
          type: boolean
        EnableCloudwatchLogsExports:
          description: Specifies a list of log types that are enabled for export to CloudWatch Logs.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
        EngineVersion:
          description: Indicates the database engine version.
          type: string
        IamAuthEnabled:
          description: True if mapping of Amazon Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
          type: boolean
        KmsKeyId:
          description: If `StorageEncrypted` is true, the Amazon KMS key identifier for the encrypted DB cluster.
          type: string
        Port:
          description: Specifies the port that the database engine is listening on.
          type: string
        PreferredBackupWindow:
          description: Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod.
          type: string
        PreferredMaintenanceWindow:
          description: Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
          type: string
        RestoreToTime:
          description: |-
            Creates a new DB cluster from a DB snapshot or DB cluster snapshot.

            If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.

            If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.
          type: string
        RestoreType:
          description: |-
            Creates a new DB cluster from a DB snapshot or DB cluster snapshot.

            If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.

            If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.
          type: string
          default: full-copy
        SnapshotIdentifier:
          description: |-
            Specifies the identifier for a DB cluster snapshot. Must match the identifier of an existing snapshot.

            After you restore a DB cluster using a SnapshotIdentifier, you must specify the same SnapshotIdentifier for any future updates to the DB cluster. When you specify this property for an update, the DB cluster is not restored from the snapshot again, and the data in the database is not changed.

            However, if you don't specify the SnapshotIdentifier, an empty DB cluster is created, and the original DB cluster is deleted. If you specify a property that is different from the previous snapshot restore property, the DB cluster is restored from the snapshot specified by the SnapshotIdentifier, and the original DB cluster is deleted.
          type: string
        SourceDBClusterIdentifier:
          description: |-
            Creates a new DB cluster from a DB snapshot or DB cluster snapshot.

            If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.

            If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.
          type: string
        StorageEncrypted:
          description: |-
            Indicates whether the DB cluster is encrypted.

            If you specify the `DBClusterIdentifier`, `DBSnapshotIdentifier`, or `SourceDBInstanceIdentifier` property, don't specify this property. The value is inherited from the cluster, snapshot, or source DB instance. If you specify the KmsKeyId property, you must enable encryption.

            If you specify the KmsKeyId, you must enable encryption by setting StorageEncrypted to true.
          type: boolean
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: The tags assigned to this cluster.
          items:
            $ref: '#/components/schemas/Tag'
        UseLatestRestorableTime:
          description: |-
            Creates a new DB cluster from a DB snapshot or DB cluster snapshot.

            If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.

            If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.
          type: boolean
        VpcSecurityGroupIds:
          description: Provides a list of VPC security groups that the DB cluster belongs to.
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
          type: array
      x-stackql-resource-name: db_cluster
      x-stackql-primaryIdentifier:
        - DBClusterIdentifier
    DBClusterParameterGroup:
      type: object
      properties:
        Id:
          type: string
        Description:
          type: string
        Parameters:
          type: object
        Family:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - Family
        - Description
        - Parameters
      x-stackql-resource-name: db_cluster_parameter_group
      x-stackql-primaryIdentifier:
        - Id
    DBInstance:
      type: object
      properties:
        Id:
          type: string
        Endpoint:
          type: string
        Port:
          type: string
        DBParameterGroupName:
          type: string
        DBInstanceClass:
          type: string
        AllowMajorVersionUpgrade:
          type: boolean
        DBClusterIdentifier:
          type: string
        AvailabilityZone:
          type: string
        PreferredMaintenanceWindow:
          type: string
        AutoMinorVersionUpgrade:
          type: boolean
        DBSubnetGroupName:
          type: string
        DBInstanceIdentifier:
          type: string
        DBSnapshotIdentifier:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DBInstanceClass
      x-stackql-resource-name: db_instance
      x-stackql-primaryIdentifier:
        - Id
    DBParameterGroup:
      type: object
      properties:
        Id:
          type: string
        Description:
          type: string
        Parameters:
          type: object
        Family:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - Family
        - Description
        - Parameters
      x-stackql-resource-name: db_parameter_group
      x-stackql-primaryIdentifier:
        - Id
    DBSubnetGroup:
      type: object
      properties:
        Id:
          type: string
        DBSubnetGroupName:
          type: string
        DBSubnetGroupDescription:
          type: string
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DBSubnetGroupDescription
        - SubnetIds
      x-stackql-resource-name: db_subnet_group
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    db_clusters:
      name: db_clusters
      id: aws.neptune.db_clusters
      x-cfn-schema-name: DBCluster
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DBClusterIdentifier') as d_bcluster_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Neptune::DBCluster'
    db_cluster:
      name: db_cluster
      id: aws.neptune.db_cluster
      x-cfn-schema-name: DBCluster
      x-type: get
      x-identifiers:
        - DBClusterIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.ReadEndpoint') as read_endpoint,
              JSON_EXTRACT(Properties, '$.ClusterResourceId') as cluster_resource_id,
              JSON_EXTRACT(Properties, '$.AssociatedRoles') as associated_roles,
              JSON_EXTRACT(Properties, '$.AvailabilityZones') as availability_zones,
              JSON_EXTRACT(Properties, '$.BackupRetentionPeriod') as backup_retention_period,
              JSON_EXTRACT(Properties, '$.DBClusterIdentifier') as d_bcluster_identifier,
              JSON_EXTRACT(Properties, '$.DBClusterParameterGroupName') as d_bcluster_parameter_group_name,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as d_bsubnet_group_name,
              JSON_EXTRACT(Properties, '$.DeletionProtection') as deletion_protection,
              JSON_EXTRACT(Properties, '$.EnableCloudwatchLogsExports') as enable_cloudwatch_logs_exports,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.IamAuthEnabled') as iam_auth_enabled,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.PreferredBackupWindow') as preferred_backup_window,
              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(Properties, '$.RestoreToTime') as restore_to_time,
              JSON_EXTRACT(Properties, '$.RestoreType') as restore_type,
              JSON_EXTRACT(Properties, '$.SnapshotIdentifier') as snapshot_identifier,
              JSON_EXTRACT(Properties, '$.SourceDBClusterIdentifier') as source_db_cluster_identifier,
              JSON_EXTRACT(Properties, '$.StorageEncrypted') as storage_encrypted,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UseLatestRestorableTime') as use_latest_restorable_time,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Neptune::DBCluster'
    db_cluster_parameter_groups:
      name: db_cluster_parameter_groups
      id: aws.neptune.db_cluster_parameter_groups
      x-cfn-schema-name: DBClusterParameterGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Neptune::DBClusterParameterGroup'
    db_cluster_parameter_group:
      name: db_cluster_parameter_group
      id: aws.neptune.db_cluster_parameter_group
      x-cfn-schema-name: DBClusterParameterGroup
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Family') as family,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Neptune::DBClusterParameterGroup'
    db_instances:
      name: db_instances
      id: aws.neptune.db_instances
      x-cfn-schema-name: DBInstance
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Neptune::DBInstance'
    db_instance:
      name: db_instance
      id: aws.neptune.db_instance
      x-cfn-schema-name: DBInstance
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.DBParameterGroupName') as d_bparameter_group_name,
              JSON_EXTRACT(Properties, '$.DBInstanceClass') as d_binstance_class,
              JSON_EXTRACT(Properties, '$.AllowMajorVersionUpgrade') as allow_major_version_upgrade,
              JSON_EXTRACT(Properties, '$.DBClusterIdentifier') as d_bcluster_identifier,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(Properties, '$.AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as d_bsubnet_group_name,
              JSON_EXTRACT(Properties, '$.DBInstanceIdentifier') as d_binstance_identifier,
              JSON_EXTRACT(Properties, '$.DBSnapshotIdentifier') as d_bsnapshot_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Neptune::DBInstance'
    db_parameter_groups:
      name: db_parameter_groups
      id: aws.neptune.db_parameter_groups
      x-cfn-schema-name: DBParameterGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Neptune::DBParameterGroup'
    db_parameter_group:
      name: db_parameter_group
      id: aws.neptune.db_parameter_group
      x-cfn-schema-name: DBParameterGroup
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Family') as family,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Neptune::DBParameterGroup'
    db_subnet_groups:
      name: db_subnet_groups
      id: aws.neptune.db_subnet_groups
      x-cfn-schema-name: DBSubnetGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Neptune::DBSubnetGroup'
    db_subnet_group:
      name: db_subnet_group
      id: aws.neptune.db_subnet_group
      x-cfn-schema-name: DBSubnetGroup
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupName') as d_bsubnet_group_name,
              JSON_EXTRACT(Properties, '$.DBSubnetGroupDescription') as d_bsubnet_group_description,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Neptune::DBSubnetGroup'
