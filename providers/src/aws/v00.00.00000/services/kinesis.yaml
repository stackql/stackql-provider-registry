openapi: 3.0.0
info:
  title: Kinesis
  version: 1.0.0
paths: {}
components:
  schemas:
    StreamModeDetails:
      description: When specified, enables or updates the mode of stream. Default is PROVISIONED.
      additionalProperties: false
      type: object
      properties:
        StreamMode:
          description: The mode of the stream
          type: string
          enum:
            - ON_DEMAND
            - PROVISIONED
      required:
        - StreamMode
    StreamEncryption:
      description: When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream. Removing this property from your stack template and updating your stack disables encryption.
      additionalProperties: false
      type: object
      properties:
        EncryptionType:
          description: 'The encryption type to use. The only valid value is KMS. '
          type: string
          enum:
            - KMS
        KeyId:
          minLength: 1
          description: The GUID for the customer-managed AWS KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
          type: string
          maxLength: 2048
      required:
        - EncryptionType
        - KeyId
    Tag:
      description: An arbitrary set of tags (key-value pairs) to associate with the Kinesis stream.
      additionalProperties: false
      type: object
      properties:
        Value:
          minLength: 0
          description: 'The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          maxLength: 255
        Key:
          minLength: 1
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          maxLength: 128
      required:
        - Key
        - Value
    Stream:
      type: object
      properties:
        StreamModeDetails:
          default:
            StreamMode: PROVISIONED
          description: The mode in which the stream is running.
          $ref: '#/components/schemas/StreamModeDetails'
        StreamEncryption:
          description: When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream.
          $ref: '#/components/schemas/StreamEncryption'
        Arn:
          description: The Amazon resource name (ARN) of the Kinesis stream
          type: string
        RetentionPeriodHours:
          description: The number of hours for the data records that are stored in shards to remain accessible.
          type: integer
          minimum: 24
        Tags:
          uniqueItems: false
          description: An arbitrary set of tags (keyâ€“value pairs) to associate with the Kinesis stream.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          minLength: 1
          pattern: ^[a-zA-Z0-9_.-]+$
          description: The name of the Kinesis stream.
          type: string
          maxLength: 128
        ShardCount:
          description: The number of shards that the stream uses. Required when StreamMode = PROVISIONED is passed.
          type: integer
          minimum: 1
      x-stackql-resource-name: stream
      x-stackql-primaryIdentifier:
        - Name
    StreamConsumer:
      type: object
      properties:
        Id:
          type: string
        ConsumerCreationTimestamp:
          type: string
        ConsumerName:
          type: string
        ConsumerARN:
          type: string
        ConsumerStatus:
          type: string
        StreamARN:
          type: string
      required:
        - ConsumerName
        - StreamARN
      x-stackql-resource-name: stream_consumer
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    streams:
      name: streams
      id: aws.kinesis.streams
      x-cfn-schema-name: Stream
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Kinesis::Stream'
    stream:
      name: stream
      id: aws.kinesis.stream
      x-cfn-schema-name: Stream
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StreamModeDetails.StreamMode') as stream_mode_details_stream_mode,
              JSON_EXTRACT(Properties, '$.StreamEncryption.EncryptionType') as stream_encryption_encryption_type,
              JSON_EXTRACT(Properties, '$.StreamEncryption.KeyId') as stream_encryption_key_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.RetentionPeriodHours') as retention_period_hours,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ShardCount') as shard_count
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Kinesis::Stream'
    stream_consumers:
      name: stream_consumers
      id: aws.kinesis.stream_consumers
      x-cfn-schema-name: StreamConsumer
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Kinesis::StreamConsumer'
    stream_consumer:
      name: stream_consumer
      id: aws.kinesis.stream_consumer
      x-cfn-schema-name: StreamConsumer
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ConsumerCreationTimestamp') as consumer_creation_timestamp,
              JSON_EXTRACT(Properties, '$.ConsumerName') as consumer_name,
              JSON_EXTRACT(Properties, '$.ConsumerARN') as consumer_ar_n,
              JSON_EXTRACT(Properties, '$.ConsumerStatus') as consumer_status,
              JSON_EXTRACT(Properties, '$.StreamARN') as stream_ar_n
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Kinesis::StreamConsumer'
