openapi: 3.0.0
info:
  title: RefactorSpaces
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    ApiGatewayEndpointType:
      type: string
      enum:
        - REGIONAL
        - PRIVATE
    ApiGatewayProxyInput:
      type: object
      properties:
        StageName:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[-a-zA-Z0-9_]*$
        EndpointType:
          $ref: '#/components/schemas/ApiGatewayEndpointType'
      additionalProperties: false
    ProxyType:
      type: string
      enum:
        - API_GATEWAY
    Tag:
      description: A label for tagging Environment resource
      type: object
      properties:
        Key:
          description: A string used to identify this tag
          type: string
          minLength: 1
          maxLength: 128
          pattern: ^(?!aws:).+
        Value:
          description: A string containing the value for the tag
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Application:
      type: object
      properties:
        ApiGatewayProxy:
          $ref: '#/components/schemas/ApiGatewayProxyInput'
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
        ApiGatewayId:
          type: string
          maxLength: 10
          minLength: 10
          pattern: ^[a-z0-9]{10}$
        VpcLinkId:
          type: string
          maxLength: 10
          minLength: 10
          pattern: ^[a-z0-9]{10}$
        NlbArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:(aws[a-zA-Z-]*)?:elasticloadbalancing:[a-zA-Z0-9\\-]+:\\w{12}:[a-zA-Z_0-9+=,.@\\-_\/]+$
        NlbName:
          type: string
          maxLength: 32
          minLength: 1
          pattern: ^(?!internal-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+.*[^-]$
        ApplicationIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^app-([0-9A-Za-z]{10}$)
        EnvironmentIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^env-([0-9A-Za-z]{10}$)
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!app-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$
        ProxyType:
          $ref: '#/components/schemas/ProxyType'
        VpcId:
          type: string
          maxLength: 21
          minLength: 12
          pattern: ^vpc-[-a-f0-9]{8}([-a-f0-9]{9})?$
        StageName:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[-a-zA-Z0-9_]*$
        ProxyUrl:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^http://[-a-zA-Z0-9+\x38@#/%?=~_|!:,.;]*[-a-zA-Z0-9+\x38@#/%=~_|]$
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
      required:
        - EnvironmentIdentifier
        - VpcId
        - Name
        - ProxyType
      x-stackql-resource-name: application
      description: Definition of AWS::RefactorSpaces::Application Resource Type
      x-type-name: AWS::RefactorSpaces::Application
      x-stackql-primary-identifier:
        - EnvironmentIdentifier
        - ApplicationIdentifier
      x-create-only-properties:
        - ApiGatewayProxy
        - EnvironmentIdentifier
        - Name
        - ProxyType
        - VpcId
      x-write-only-properties:
        - ApiGatewayProxy
      x-read-only-properties:
        - ApplicationIdentifier
        - Arn
        - ApiGatewayId
        - VpcLinkId
        - NlbArn
        - NlbName
        - ProxyUrl
        - StageName
      x-required-properties:
        - EnvironmentIdentifier
        - VpcId
        - Name
        - ProxyType
      x-taggable: true
      x-required-permissions:
        create:
          - refactor-spaces:GetApplication
          - refactor-spaces:CreateApplication
          - refactor-spaces:TagResource
          - ec2:CreateTags
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:DescribeAccountAttributes
          - ec2:DescribeInternetGateways
          - ec2:ModifyVpcEndpointServicePermissions
          - apigateway:DELETE
          - apigateway:GET
          - apigateway:PATCH
          - apigateway:POST
          - apigateway:PUT
          - apigateway:UpdateRestApiPolicy
          - elasticloadbalancing:CreateLoadBalancer
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeTags
          - elasticloadbalancing:AddTags
          - iam:CreateServiceLinkedRole
        read:
          - refactor-spaces:GetApplication
          - refactor-spaces:ListTagsForResource
        delete:
          - refactor-spaces:GetApplication
          - refactor-spaces:DeleteApplication
          - refactor-spaces:UntagResource
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:DeleteRoute
          - ec2:DeleteSecurityGroup
          - ec2:DeleteTransitGateway
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DeleteTags
          - ec2:RevokeSecurityGroupIngress
          - elasticloadbalancing:DeleteLoadBalancer
          - apigateway:DELETE
          - apigateway:GET
          - apigateway:PUT
          - apigateway:UpdateRestApiPolicy
        list:
          - refactor-spaces:ListApplications
          - refactor-spaces:ListTagsForResource
    NetworkFabricType:
      type: string
      enum:
        - TRANSIT_GATEWAY
        - NONE
    Environment:
      type: object
      properties:
        Description:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9-_\s\.\!\*\#\@\']+$
        EnvironmentIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^env-([0-9A-Za-z]{10}$)
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!env-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$
        NetworkFabricType:
          $ref: '#/components/schemas/NetworkFabricType'
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
        TransitGatewayId:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^tgw-[-a-f0-9]{17}$
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
      x-stackql-resource-name: environment
      description: Definition of AWS::RefactorSpaces::Environment Resource Type
      x-type-name: AWS::RefactorSpaces::Environment
      x-stackql-primary-identifier:
        - EnvironmentIdentifier
      x-create-only-properties:
        - Description
        - Name
        - NetworkFabricType
      x-write-only-properties:
        - Description
        - Name
        - NetworkFabricType
      x-read-only-properties:
        - EnvironmentIdentifier
        - Arn
        - TransitGatewayId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - refactor-spaces:TagResource
          - refactor-spaces:ListTagsForResource
          - refactor-spaces:UntagResource
      x-required-permissions:
        create:
          - refactor-spaces:CreateEnvironment
          - refactor-spaces:GetEnvironment
          - refactor-spaces:TagResource
          - ec2:CreateTransitGateway
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CreateSecurityGroup
          - ec2:CreateTags
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeRouteTables
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeTags
          - ec2:DescribeTransitGateways
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePermissions
          - ec2:RevokeSecurityGroupIngress
          - ram:AssociateResourceShare
          - ram:CreateResourceShare
          - ram:GetResourceShareAssociations
          - ram:GetResourceShares
          - ram:TagResource
          - ram:GetResourceShareInvitations
          - ram:AcceptResourceShareInvitation
          - ram:DisassociateResourceShare
          - tag:GetResources
          - iam:CreateServiceLinkedRole
        read:
          - refactor-spaces:GetEnvironment
          - refactor-spaces:ListTagsForResource
        update:
          - refactor-spaces:GetEnvironment
          - refactor-spaces:TagResource
          - refactor-spaces:UntagResource
        delete:
          - refactor-spaces:GetEnvironment
          - refactor-spaces:DeleteEnvironment
          - refactor-spaces:UntagResource
          - ec2:DescribeTransitGateways
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DeleteTransitGateway
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:DeleteTags
          - ram:GetResourceShareAssociations
          - ram:DeleteResourceShare
        list:
          - refactor-spaces:ListEnvironments
          - refactor-spaces:ListTagsForResource
    RouteActivationState:
      type: string
      enum:
        - INACTIVE
        - ACTIVE
    Method:
      type: string
      enum:
        - DELETE
        - GET
        - HEAD
        - OPTIONS
        - PATCH
        - POST
        - PUT
    RouteType:
      type: string
      enum:
        - DEFAULT
        - URI_PATH
    DefaultRouteInput:
      type: object
      properties:
        ActivationState:
          $ref: '#/components/schemas/RouteActivationState'
      required:
        - ActivationState
      additionalProperties: false
    UriPathRouteInput:
      type: object
      properties:
        SourcePath:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^(/([a-zA-Z0-9._:-]+|\{[a-zA-Z0-9._:-]+\}))+$
        ActivationState:
          $ref: '#/components/schemas/RouteActivationState'
        Methods:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Method'
        IncludeChildPaths:
          type: boolean
        AppendSourcePath:
          type: boolean
      required:
        - ActivationState
      additionalProperties: false
    Route:
      type: object
      properties:
        PathResourceToId:
          type: string
        Arn:
          type: string
          minLength: 20
          maxLength: 2048
          pattern: ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
        ApplicationIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^app-([0-9A-Za-z]{10}$)
        EnvironmentIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^env-([0-9A-Za-z]{10}$)
        RouteIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^rte-([0-9A-Za-z]{10}$)
        RouteType:
          $ref: '#/components/schemas/RouteType'
        ServiceIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^svc-([0-9A-Za-z]{10}$)
        DefaultRoute:
          $ref: '#/components/schemas/DefaultRouteInput'
        UriPathRoute:
          $ref: '#/components/schemas/UriPathRouteInput'
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
      required:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - ServiceIdentifier
        - RouteType
      x-stackql-resource-name: route
      description: Definition of AWS::RefactorSpaces::Route Resource Type
      x-type-name: AWS::RefactorSpaces::Route
      x-stackql-primary-identifier:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - RouteIdentifier
      x-create-only-properties:
        - ApplicationIdentifier
        - EnvironmentIdentifier
        - RouteType
        - ServiceIdentifier
        - UriPathRoute/SourcePath
        - UriPathRoute/Methods
        - UriPathRoute/IncludeChildPaths
        - UriPathRoute/AppendSourcePath
      x-write-only-properties:
        - RouteType
        - ServiceIdentifier
        - DefaultRoute
        - UriPathRoute
      x-read-only-properties:
        - RouteIdentifier
        - PathResourceToId
        - Arn
      x-required-properties:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - ServiceIdentifier
        - RouteType
      x-taggable: true
      x-required-permissions:
        create:
          - refactor-spaces:CreateRoute
          - refactor-spaces:GetRoute
          - refactor-spaces:TagResource
          - iam:CreateServiceLinkedRole
          - apigateway:GET
          - apigateway:PATCH
          - apigateway:POST
          - apigateway:PUT
          - apigateway:DELETE
          - apigateway:UpdateRestApiPolicy
          - lambda:GetFunctionConfiguration
          - lambda:AddPermission
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:CreateListener
          - elasticloadbalancing:CreateTargetGroup
          - elasticloadbalancing:DescribeTags
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:DescribeTargetHealth
          - ec2:DescribeSubnets
          - tag:GetResources
        read:
          - refactor-spaces:GetRoute
          - refactor-spaces:ListTagsForResource
        delete:
          - refactor-spaces:DeleteRoute
          - refactor-spaces:GetRoute
          - refactor-spaces:UntagResource
          - apigateway:GET
          - apigateway:PATCH
          - apigateway:POST
          - apigateway:PUT
          - apigateway:DELETE
          - apigateway:UpdateRestApiPolicy
          - lambda:GetFunctionConfiguration
          - lambda:AddPermission
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:CreateListener
          - elasticloadbalancing:CreateTargetGroup
          - elasticloadbalancing:DeleteListener
          - elasticloadbalancing:DeleteTargetGroup
          - elasticloadbalancing:DescribeTags
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:DescribeTargetHealth
          - ec2:DescribeSubnets
          - tag:GetResources
        list:
          - refactor-spaces:ListRoutes
          - refactor-spaces:ListTagsForResource
        update:
          - refactor-spaces:UpdateRoute
          - refactor-spaces:GetRoute
          - refactor-spaces:TagResource
          - iam:CreateServiceLinkedRole
          - apigateway:GET
          - apigateway:PATCH
          - apigateway:POST
          - apigateway:PUT
          - apigateway:DELETE
          - apigateway:UpdateRestApiPolicy
          - lambda:GetFunctionConfiguration
          - lambda:AddPermission
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:CreateListener
          - elasticloadbalancing:CreateTargetGroup
          - elasticloadbalancing:DeleteListener
          - elasticloadbalancing:DeleteTargetGroup
          - elasticloadbalancing:DescribeTags
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:DescribeTargetHealth
          - ec2:DescribeSubnets
          - ec2:DescribeSubnets
          - tag:GetResources
    LambdaEndpointInput:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?$
      required:
        - Arn
      additionalProperties: false
    ServiceEndpointType:
      type: string
      enum:
        - LAMBDA
        - URL
    UrlEndpointInput:
      type: object
      properties:
        HealthUrl:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^https?://[-a-zA-Z0-9+\x38@#/%?=~_|!:,.;]*[-a-zA-Z0-9+\x38@#/%=~_|]$
        Url:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^https?://[-a-zA-Z0-9+\x38@#/%?=~_|!:,.;]*[-a-zA-Z0-9+\x38@#/%=~_|]$
      required:
        - Url
      additionalProperties: false
    Service:
      type: object
      properties:
        Arn:
          type: string
          minLength: 20
          maxLength: 2048
          pattern: ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
        ApplicationIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^app-([0-9A-Za-z]{10}$)
        Description:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9-_\s\.\!\*\#\@\']+$
        EndpointType:
          $ref: '#/components/schemas/ServiceEndpointType'
        EnvironmentIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^env-([0-9A-Za-z]{10}$)
        LambdaEndpoint:
          $ref: '#/components/schemas/LambdaEndpointInput'
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!svc-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$
        ServiceIdentifier:
          type: string
          maxLength: 14
          minLength: 14
          pattern: ^svc-([0-9A-Za-z]{10}$)
        UrlEndpoint:
          $ref: '#/components/schemas/UrlEndpointInput'
        VpcId:
          type: string
          maxLength: 21
          minLength: 12
          pattern: ^vpc-[-a-f0-9]{8}([-a-f0-9]{9})?$
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
      required:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - EndpointType
        - Name
      x-stackql-resource-name: service
      description: Definition of AWS::RefactorSpaces::Service Resource Type
      x-type-name: AWS::RefactorSpaces::Service
      x-stackql-primary-identifier:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - ServiceIdentifier
      x-create-only-properties:
        - Description
        - EndpointType
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - LambdaEndpoint
        - Name
        - UrlEndpoint
        - VpcId
      x-write-only-properties:
        - Description
        - EndpointType
        - LambdaEndpoint
        - Name
        - UrlEndpoint
        - VpcId
      x-read-only-properties:
        - ServiceIdentifier
        - Arn
      x-required-properties:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - EndpointType
        - Name
      x-taggable: true
      x-required-permissions:
        create:
          - refactor-spaces:CreateService
          - refactor-spaces:GetService
          - refactor-spaces:TagResource
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeRouteTables
          - ec2:CreateTags
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateSecurityGroup
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CreateRoute
          - lambda:GetFunctionConfiguration
        read:
          - refactor-spaces:GetService
          - refactor-spaces:ListTagsForResource
        delete:
          - refactor-spaces:DeleteService
          - refactor-spaces:GetService
          - refactor-spaces:UntagResource
          - ram:DisassociateResourceShare
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeRouteTables
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DescribeSecurityGroups
          - ec2:DeleteSecurityGroup
          - ec2:DeleteRoute
          - ec2:RevokeSecurityGroupIngress
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:DeleteTags
        list:
          - refactor-spaces:ListServices
          - refactor-spaces:ListTagsForResource
    CreateApplicationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ApiGatewayProxy:
              $ref: '#/components/schemas/ApiGatewayProxyInput'
            Arn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
            ApiGatewayId:
              type: string
              maxLength: 10
              minLength: 10
              pattern: ^[a-z0-9]{10}$
            VpcLinkId:
              type: string
              maxLength: 10
              minLength: 10
              pattern: ^[a-z0-9]{10}$
            NlbArn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:(aws[a-zA-Z-]*)?:elasticloadbalancing:[a-zA-Z0-9\\-]+:\\w{12}:[a-zA-Z_0-9+=,.@\\-_\/]+$
            NlbName:
              type: string
              maxLength: 32
              minLength: 1
              pattern: ^(?!internal-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+.*[^-]$
            ApplicationIdentifier:
              type: string
              maxLength: 14
              minLength: 14
              pattern: ^app-([0-9A-Za-z]{10}$)
            EnvironmentIdentifier:
              type: string
              maxLength: 14
              minLength: 14
              pattern: ^env-([0-9A-Za-z]{10}$)
            Name:
              type: string
              maxLength: 63
              minLength: 3
              pattern: ^(?!app-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$
            ProxyType:
              $ref: '#/components/schemas/ProxyType'
            VpcId:
              type: string
              maxLength: 21
              minLength: 12
              pattern: ^vpc-[-a-f0-9]{8}([-a-f0-9]{9})?$
            StageName:
              type: string
              maxLength: 128
              minLength: 1
              pattern: ^[-a-zA-Z0-9_]*$
            ProxyUrl:
              type: string
              maxLength: 2048
              minLength: 1
              pattern: ^http://[-a-zA-Z0-9+\x38@#/%?=~_|!:,.;]*[-a-zA-Z0-9+\x38@#/%=~_|]$
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
              description: Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
          x-stackQL-stringOnly: true
      x-title: CreateApplicationRequest
      type: object
      required: []
    CreateEnvironmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9-_\s\.\!\*\#\@\']+$
            EnvironmentIdentifier:
              type: string
              maxLength: 14
              minLength: 14
              pattern: ^env-([0-9A-Za-z]{10}$)
            Name:
              type: string
              maxLength: 63
              minLength: 3
              pattern: ^(?!env-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$
            NetworkFabricType:
              $ref: '#/components/schemas/NetworkFabricType'
            Arn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
            TransitGatewayId:
              type: string
              maxLength: 21
              minLength: 21
              pattern: ^tgw-[-a-f0-9]{17}$
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
              description: Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
          x-stackQL-stringOnly: true
      x-title: CreateEnvironmentRequest
      type: object
      required: []
    CreateRouteRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PathResourceToId:
              type: string
            Arn:
              type: string
              minLength: 20
              maxLength: 2048
              pattern: ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
            ApplicationIdentifier:
              type: string
              maxLength: 14
              minLength: 14
              pattern: ^app-([0-9A-Za-z]{10}$)
            EnvironmentIdentifier:
              type: string
              maxLength: 14
              minLength: 14
              pattern: ^env-([0-9A-Za-z]{10}$)
            RouteIdentifier:
              type: string
              maxLength: 14
              minLength: 14
              pattern: ^rte-([0-9A-Za-z]{10}$)
            RouteType:
              $ref: '#/components/schemas/RouteType'
            ServiceIdentifier:
              type: string
              maxLength: 14
              minLength: 14
              pattern: ^svc-([0-9A-Za-z]{10}$)
            DefaultRoute:
              $ref: '#/components/schemas/DefaultRouteInput'
            UriPathRoute:
              $ref: '#/components/schemas/UriPathRouteInput'
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
              description: Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
          x-stackQL-stringOnly: true
      x-title: CreateRouteRequest
      type: object
      required: []
    CreateServiceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              minLength: 20
              maxLength: 2048
              pattern: ^arn:(aws[a-zA-Z-]*)?:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_/]+$
            ApplicationIdentifier:
              type: string
              maxLength: 14
              minLength: 14
              pattern: ^app-([0-9A-Za-z]{10}$)
            Description:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[a-zA-Z0-9-_\s\.\!\*\#\@\']+$
            EndpointType:
              $ref: '#/components/schemas/ServiceEndpointType'
            EnvironmentIdentifier:
              type: string
              maxLength: 14
              minLength: 14
              pattern: ^env-([0-9A-Za-z]{10}$)
            LambdaEndpoint:
              $ref: '#/components/schemas/LambdaEndpointInput'
            Name:
              type: string
              maxLength: 63
              minLength: 3
              pattern: ^(?!svc-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$
            ServiceIdentifier:
              type: string
              maxLength: 14
              minLength: 14
              pattern: ^svc-([0-9A-Za-z]{10}$)
            UrlEndpoint:
              $ref: '#/components/schemas/UrlEndpointInput'
            VpcId:
              type: string
              maxLength: 21
              minLength: 12
              pattern: ^vpc-[-a-f0-9]{8}([-a-f0-9]{9})?$
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
              description: Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
          x-stackQL-stringOnly: true
      x-title: CreateServiceRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    applications:
      name: applications
      id: aws.refactorspaces.applications
      x-cfn-schema-name: Application
      x-cfn-type-name: AWS::RefactorSpaces::Application
      x-identifiers:
        - EnvironmentIdentifier
        - ApplicationIdentifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Application&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RefactorSpaces::Application"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RefactorSpaces::Application"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/applications/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/applications/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApiGatewayProxy') as api_gateway_proxy,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ApiGatewayId') as api_gateway_id,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id,
              JSON_EXTRACT(Properties, '$.NlbArn') as nlb_arn,
              JSON_EXTRACT(Properties, '$.NlbName') as nlb_name,
              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as application_identifier,
              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ProxyType') as proxy_type,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(Properties, '$.ProxyUrl') as proxy_url,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RefactorSpaces::Application'
              AND data__Identifier = '<EnvironmentIdentifier>|<ApplicationIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ApiGatewayProxy') as api_gateway_proxy,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ApiGatewayId') as api_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.VpcLinkId') as vpc_link_id,
                JSON_EXTRACT(detail.Properties, '$.NlbArn') as nlb_arn,
                JSON_EXTRACT(detail.Properties, '$.NlbName') as nlb_name,
                JSON_EXTRACT(detail.Properties, '$.ApplicationIdentifier') as application_identifier,
                JSON_EXTRACT(detail.Properties, '$.EnvironmentIdentifier') as environment_identifier,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.ProxyType') as proxy_type,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.StageName') as stage_name,
                JSON_EXTRACT(detail.Properties, '$.ProxyUrl') as proxy_url,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Application'
                AND detail.data__TypeName = 'AWS::RefactorSpaces::Application'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ApiGatewayProxy') as api_gateway_proxy,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ApiGatewayId') as api_gateway_id,
                  json_extract_path_text(Properties, 'VpcLinkId') as vpc_link_id,
                  json_extract_path_text(Properties, 'NlbArn') as nlb_arn,
                  json_extract_path_text(Properties, 'NlbName') as nlb_name,
                  json_extract_path_text(Properties, 'ApplicationIdentifier') as application_identifier,
                  json_extract_path_text(Properties, 'EnvironmentIdentifier') as environment_identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'ProxyType') as proxy_type,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'StageName') as stage_name,
                  json_extract_path_text(Properties, 'ProxyUrl') as proxy_url,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RefactorSpaces::Application'
                  AND data__Identifier = '<EnvironmentIdentifier>|<ApplicationIdentifier>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ApiGatewayProxy') as api_gateway_proxy,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ApiGatewayId') as api_gateway_id,
                    json_extract_path_text(detail.Properties, 'VpcLinkId') as vpc_link_id,
                    json_extract_path_text(detail.Properties, 'NlbArn') as nlb_arn,
                    json_extract_path_text(detail.Properties, 'NlbName') as nlb_name,
                    json_extract_path_text(detail.Properties, 'ApplicationIdentifier') as application_identifier,
                    json_extract_path_text(detail.Properties, 'EnvironmentIdentifier') as environment_identifier,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'ProxyType') as proxy_type,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'StageName') as stage_name,
                    json_extract_path_text(detail.Properties, 'ProxyUrl') as proxy_url,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Application'
                    AND detail.data__TypeName = 'AWS::RefactorSpaces::Application'
                    AND listing.region = 'us-east-1'
    applications_list_only:
      name: applications_list_only
      id: aws.refactorspaces.applications_list_only
      x-cfn-schema-name: Application
      x-cfn-type-name: AWS::RefactorSpaces::Application
      x-identifiers:
        - EnvironmentIdentifier
        - ApplicationIdentifier
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as application_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RefactorSpaces::Application'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EnvironmentIdentifier') as environment_identifier,
                json_extract_path_text(Properties, 'ApplicationIdentifier') as application_identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RefactorSpaces::Application'
                AND region = 'us-east-1'
    application_tags:
      name: application_tags
      id: aws.refactorspaces.application_tags
      x-cfn-schema-name: Application
      x-cfn-type-name: AWS::RefactorSpaces::Application
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ApiGatewayProxy') as api_gateway_proxy,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ApiGatewayId') as api_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.VpcLinkId') as vpc_link_id,
              JSON_EXTRACT(detail.Properties, '$.NlbArn') as nlb_arn,
              JSON_EXTRACT(detail.Properties, '$.NlbName') as nlb_name,
              JSON_EXTRACT(detail.Properties, '$.ApplicationIdentifier') as application_identifier,
              JSON_EXTRACT(detail.Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.ProxyType') as proxy_type,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(detail.Properties, '$.ProxyUrl') as proxy_url
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Application'
              AND detail.data__TypeName = 'AWS::RefactorSpaces::Application'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ApiGatewayProxy') as api_gateway_proxy,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ApiGatewayId') as api_gateway_id,
                json_extract_path_text(detail.Properties, 'VpcLinkId') as vpc_link_id,
                json_extract_path_text(detail.Properties, 'NlbArn') as nlb_arn,
                json_extract_path_text(detail.Properties, 'NlbName') as nlb_name,
                json_extract_path_text(detail.Properties, 'ApplicationIdentifier') as application_identifier,
                json_extract_path_text(detail.Properties, 'EnvironmentIdentifier') as environment_identifier,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'ProxyType') as proxy_type,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'StageName') as stage_name,
                json_extract_path_text(detail.Properties, 'ProxyUrl') as proxy_url
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Application'
                AND detail.data__TypeName = 'AWS::RefactorSpaces::Application'
                AND listing.region = 'us-east-1'
    environments:
      name: environments
      id: aws.refactorspaces.environments
      x-cfn-schema-name: Environment
      x-cfn-type-name: AWS::RefactorSpaces::Environment
      x-identifiers:
        - EnvironmentIdentifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Environment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RefactorSpaces::Environment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RefactorSpaces::Environment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RefactorSpaces::Environment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/environments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/environments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/environments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.NetworkFabricType') as network_fabric_type,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RefactorSpaces::Environment'
              AND data__Identifier = '<EnvironmentIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.EnvironmentIdentifier') as environment_identifier,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.NetworkFabricType') as network_fabric_type,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Environment'
                AND detail.data__TypeName = 'AWS::RefactorSpaces::Environment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'EnvironmentIdentifier') as environment_identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'NetworkFabricType') as network_fabric_type,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RefactorSpaces::Environment'
                  AND data__Identifier = '<EnvironmentIdentifier>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'EnvironmentIdentifier') as environment_identifier,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'NetworkFabricType') as network_fabric_type,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Environment'
                    AND detail.data__TypeName = 'AWS::RefactorSpaces::Environment'
                    AND listing.region = 'us-east-1'
    environments_list_only:
      name: environments_list_only
      id: aws.refactorspaces.environments_list_only
      x-cfn-schema-name: Environment
      x-cfn-type-name: AWS::RefactorSpaces::Environment
      x-identifiers:
        - EnvironmentIdentifier
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as environment_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RefactorSpaces::Environment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EnvironmentIdentifier') as environment_identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RefactorSpaces::Environment'
                AND region = 'us-east-1'
    environment_tags:
      name: environment_tags
      id: aws.refactorspaces.environment_tags
      x-cfn-schema-name: Environment
      x-cfn-type-name: AWS::RefactorSpaces::Environment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.NetworkFabricType') as network_fabric_type,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Environment'
              AND detail.data__TypeName = 'AWS::RefactorSpaces::Environment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'EnvironmentIdentifier') as environment_identifier,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'NetworkFabricType') as network_fabric_type,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Environment'
                AND detail.data__TypeName = 'AWS::RefactorSpaces::Environment'
                AND listing.region = 'us-east-1'
    routes:
      name: routes
      id: aws.refactorspaces.routes
      x-cfn-schema-name: Route
      x-cfn-type-name: AWS::RefactorSpaces::Route
      x-identifiers:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - RouteIdentifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Route&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RefactorSpaces::Route"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RefactorSpaces::Route"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RefactorSpaces::Route"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/routes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/routes/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/routes/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PathResourceToId') as path_resource_to_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as application_identifier,
              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(Properties, '$.RouteIdentifier') as route_identifier,
              JSON_EXTRACT(Properties, '$.RouteType') as route_type,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(Properties, '$.DefaultRoute') as default_route,
              JSON_EXTRACT(Properties, '$.UriPathRoute') as uri_path_route,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RefactorSpaces::Route'
              AND data__Identifier = '<EnvironmentIdentifier>|<ApplicationIdentifier>|<RouteIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PathResourceToId') as path_resource_to_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ApplicationIdentifier') as application_identifier,
                JSON_EXTRACT(detail.Properties, '$.EnvironmentIdentifier') as environment_identifier,
                JSON_EXTRACT(detail.Properties, '$.RouteIdentifier') as route_identifier,
                JSON_EXTRACT(detail.Properties, '$.RouteType') as route_type,
                JSON_EXTRACT(detail.Properties, '$.ServiceIdentifier') as service_identifier,
                JSON_EXTRACT(detail.Properties, '$.DefaultRoute') as default_route,
                JSON_EXTRACT(detail.Properties, '$.UriPathRoute') as uri_path_route,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Route'
                AND detail.data__TypeName = 'AWS::RefactorSpaces::Route'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PathResourceToId') as path_resource_to_id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ApplicationIdentifier') as application_identifier,
                  json_extract_path_text(Properties, 'EnvironmentIdentifier') as environment_identifier,
                  json_extract_path_text(Properties, 'RouteIdentifier') as route_identifier,
                  json_extract_path_text(Properties, 'RouteType') as route_type,
                  json_extract_path_text(Properties, 'ServiceIdentifier') as service_identifier,
                  json_extract_path_text(Properties, 'DefaultRoute') as default_route,
                  json_extract_path_text(Properties, 'UriPathRoute') as uri_path_route,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RefactorSpaces::Route'
                  AND data__Identifier = '<EnvironmentIdentifier>|<ApplicationIdentifier>|<RouteIdentifier>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PathResourceToId') as path_resource_to_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ApplicationIdentifier') as application_identifier,
                    json_extract_path_text(detail.Properties, 'EnvironmentIdentifier') as environment_identifier,
                    json_extract_path_text(detail.Properties, 'RouteIdentifier') as route_identifier,
                    json_extract_path_text(detail.Properties, 'RouteType') as route_type,
                    json_extract_path_text(detail.Properties, 'ServiceIdentifier') as service_identifier,
                    json_extract_path_text(detail.Properties, 'DefaultRoute') as default_route,
                    json_extract_path_text(detail.Properties, 'UriPathRoute') as uri_path_route,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Route'
                    AND detail.data__TypeName = 'AWS::RefactorSpaces::Route'
                    AND listing.region = 'us-east-1'
    routes_list_only:
      name: routes_list_only
      id: aws.refactorspaces.routes_list_only
      x-cfn-schema-name: Route
      x-cfn-type-name: AWS::RefactorSpaces::Route
      x-identifiers:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - RouteIdentifier
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as application_identifier,
              JSON_EXTRACT(Properties, '$.RouteIdentifier') as route_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RefactorSpaces::Route'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EnvironmentIdentifier') as environment_identifier,
                json_extract_path_text(Properties, 'ApplicationIdentifier') as application_identifier,
                json_extract_path_text(Properties, 'RouteIdentifier') as route_identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RefactorSpaces::Route'
                AND region = 'us-east-1'
    route_tags:
      name: route_tags
      id: aws.refactorspaces.route_tags
      x-cfn-schema-name: Route
      x-cfn-type-name: AWS::RefactorSpaces::Route
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.PathResourceToId') as path_resource_to_id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ApplicationIdentifier') as application_identifier,
              JSON_EXTRACT(detail.Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(detail.Properties, '$.RouteIdentifier') as route_identifier,
              JSON_EXTRACT(detail.Properties, '$.RouteType') as route_type,
              JSON_EXTRACT(detail.Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(detail.Properties, '$.DefaultRoute') as default_route,
              JSON_EXTRACT(detail.Properties, '$.UriPathRoute') as uri_path_route
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Route'
              AND detail.data__TypeName = 'AWS::RefactorSpaces::Route'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'PathResourceToId') as path_resource_to_id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ApplicationIdentifier') as application_identifier,
                json_extract_path_text(detail.Properties, 'EnvironmentIdentifier') as environment_identifier,
                json_extract_path_text(detail.Properties, 'RouteIdentifier') as route_identifier,
                json_extract_path_text(detail.Properties, 'RouteType') as route_type,
                json_extract_path_text(detail.Properties, 'ServiceIdentifier') as service_identifier,
                json_extract_path_text(detail.Properties, 'DefaultRoute') as default_route,
                json_extract_path_text(detail.Properties, 'UriPathRoute') as uri_path_route
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Route'
                AND detail.data__TypeName = 'AWS::RefactorSpaces::Route'
                AND listing.region = 'us-east-1'
    services:
      name: services
      id: aws.refactorspaces.services
      x-cfn-schema-name: Service
      x-cfn-type-name: AWS::RefactorSpaces::Service
      x-identifiers:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - ServiceIdentifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Service&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RefactorSpaces::Service"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RefactorSpaces::Service"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/services/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/services/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as application_identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EndpointType') as endpoint_type,
              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(Properties, '$.LambdaEndpoint') as lambda_endpoint,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(Properties, '$.UrlEndpoint') as url_endpoint,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RefactorSpaces::Service'
              AND data__Identifier = '<EnvironmentIdentifier>|<ApplicationIdentifier>|<ServiceIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ApplicationIdentifier') as application_identifier,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.EndpointType') as endpoint_type,
                JSON_EXTRACT(detail.Properties, '$.EnvironmentIdentifier') as environment_identifier,
                JSON_EXTRACT(detail.Properties, '$.LambdaEndpoint') as lambda_endpoint,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.ServiceIdentifier') as service_identifier,
                JSON_EXTRACT(detail.Properties, '$.UrlEndpoint') as url_endpoint,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Service'
                AND detail.data__TypeName = 'AWS::RefactorSpaces::Service'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ApplicationIdentifier') as application_identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'EndpointType') as endpoint_type,
                  json_extract_path_text(Properties, 'EnvironmentIdentifier') as environment_identifier,
                  json_extract_path_text(Properties, 'LambdaEndpoint') as lambda_endpoint,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'ServiceIdentifier') as service_identifier,
                  json_extract_path_text(Properties, 'UrlEndpoint') as url_endpoint,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RefactorSpaces::Service'
                  AND data__Identifier = '<EnvironmentIdentifier>|<ApplicationIdentifier>|<ServiceIdentifier>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ApplicationIdentifier') as application_identifier,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'EndpointType') as endpoint_type,
                    json_extract_path_text(detail.Properties, 'EnvironmentIdentifier') as environment_identifier,
                    json_extract_path_text(detail.Properties, 'LambdaEndpoint') as lambda_endpoint,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'ServiceIdentifier') as service_identifier,
                    json_extract_path_text(detail.Properties, 'UrlEndpoint') as url_endpoint,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Service'
                    AND detail.data__TypeName = 'AWS::RefactorSpaces::Service'
                    AND listing.region = 'us-east-1'
    services_list_only:
      name: services_list_only
      id: aws.refactorspaces.services_list_only
      x-cfn-schema-name: Service
      x-cfn-type-name: AWS::RefactorSpaces::Service
      x-identifiers:
        - EnvironmentIdentifier
        - ApplicationIdentifier
        - ServiceIdentifier
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(Properties, '$.ApplicationIdentifier') as application_identifier,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RefactorSpaces::Service'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EnvironmentIdentifier') as environment_identifier,
                json_extract_path_text(Properties, 'ApplicationIdentifier') as application_identifier,
                json_extract_path_text(Properties, 'ServiceIdentifier') as service_identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RefactorSpaces::Service'
                AND region = 'us-east-1'
    service_tags:
      name: service_tags
      id: aws.refactorspaces.service_tags
      x-cfn-schema-name: Service
      x-cfn-type-name: AWS::RefactorSpaces::Service
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ApplicationIdentifier') as application_identifier,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.EndpointType') as endpoint_type,
              JSON_EXTRACT(detail.Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(detail.Properties, '$.LambdaEndpoint') as lambda_endpoint,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(detail.Properties, '$.UrlEndpoint') as url_endpoint,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Service'
              AND detail.data__TypeName = 'AWS::RefactorSpaces::Service'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ApplicationIdentifier') as application_identifier,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'EndpointType') as endpoint_type,
                json_extract_path_text(detail.Properties, 'EnvironmentIdentifier') as environment_identifier,
                json_extract_path_text(detail.Properties, 'LambdaEndpoint') as lambda_endpoint,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'ServiceIdentifier') as service_identifier,
                json_extract_path_text(detail.Properties, 'UrlEndpoint') as url_endpoint,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::RefactorSpaces::Service'
                AND detail.data__TypeName = 'AWS::RefactorSpaces::Service'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Application&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateApplication
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateApplicationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Environment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEnvironment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEnvironmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Route&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRoute
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Service&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateService
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
