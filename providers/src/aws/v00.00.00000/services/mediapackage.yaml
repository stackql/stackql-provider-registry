openapi: 3.0.0
info:
  title: MediaPackage
  version: 1.0.0
paths: {}
components:
  schemas:
    EgressEndpoint:
      description: The endpoint URL used to access an Asset using one PackagingConfiguration.
      type: object
      additionalProperties: false
      properties:
        PackagingConfigurationId:
          description: The ID of the PackagingConfiguration being applied to the Asset.
          type: string
        Url:
          description: The URL of the parent manifest for the repackaged Asset.
          type: string
      required:
        - PackagingConfigurationId
        - Url
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
      required:
        - Value
        - Key
    Asset:
      type: object
      properties:
        Arn:
          description: The ARN of the Asset.
          type: string
        CreatedAt:
          description: The time the Asset was initially submitted for Ingest.
          type: string
        EgressEndpoints:
          description: The list of egress endpoints available for the Asset.
          type: array
          items:
            $ref: '#/components/schemas/EgressEndpoint'
        Id:
          description: The unique identifier for the Asset.
          type: string
        PackagingGroupId:
          description: The ID of the PackagingGroup for the Asset.
          type: string
        ResourceId:
          description: The resource ID to include in SPEKE key requests.
          type: string
        SourceArn:
          description: ARN of the source object in S3.
          type: string
        SourceRoleArn:
          description: The IAM role_arn used to access the source S3 bucket.
          type: string
        Tags:
          description: A collection of tags associated with a resource
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Id
        - PackagingGroupId
        - SourceArn
        - SourceRoleArn
      x-stackql-resource-name: asset
      x-stackql-primaryIdentifier:
        - Id
    HlsIngest:
      description: An HTTP Live Streaming (HLS) ingest resource configuration.
      type: object
      additionalProperties: false
      properties:
        ingestEndpoints:
          description: A list of endpoints to which the source stream should be sent.
          type: array
          items:
            $ref: '#/components/schemas/IngestEndpoint'
    IngestEndpoint:
      description: An endpoint for ingesting source content for a Channel.
      type: object
      additionalProperties: false
      properties:
        Id:
          description: The system generated unique identifier for the IngestEndpoint
          type: string
        Username:
          description: The system generated username for ingest authentication.
          type: string
        Password:
          description: The system generated password for ingest authentication.
          type: string
        Url:
          description: The ingest URL to which the source stream should be sent.
          type: string
      required:
        - Id
        - Username
        - Password
        - Url
    LogConfiguration:
      type: object
      additionalProperties: false
      properties:
        LogGroupName:
          description: 'Sets a custom AWS CloudWatch log group name for egress logs. If a log group name isn''t specified, the default name is used: /aws/MediaPackage/VodEgressAccessLogs.'
          type: string
          pattern: \A\/aws\/MediaPackage\/[0-9a-zA-Z-_\/\.#]+\Z
          minLength: 1
          maxLength: 512
    Channel:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) assigned to the Channel.
          type: string
        Id:
          description: The ID of the Channel.
          type: string
          pattern: \A[0-9a-zA-Z-_]+\Z
          minLength: 1
          maxLength: 256
        Description:
          description: A short text description of the Channel.
          type: string
        HlsIngest:
          description: An HTTP Live Streaming (HLS) ingest resource configuration.
          $ref: '#/components/schemas/HlsIngest'
        Tags:
          description: A collection of tags associated with a resource
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
        EgressAccessLogs:
          description: The configuration parameters for egress access logging.
          $ref: '#/components/schemas/LogConfiguration'
        IngressAccessLogs:
          description: The configuration parameters for egress access logging.
          $ref: '#/components/schemas/LogConfiguration'
      required:
        - Id
      x-stackql-resource-name: channel
      x-stackql-primaryIdentifier:
        - Id
    MssPackage:
      type: object
      description: A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
      additionalProperties: false
      properties:
        Encryption:
          $ref: '#/components/schemas/MssEncryption'
        MssManifests:
          description: A list of MSS manifest configurations.
          type: array
          items:
            $ref: '#/components/schemas/MssManifest'
        SegmentDurationSeconds:
          $ref: '#/components/schemas/SegmentDurationSeconds'
      required:
        - MssManifests
    MssEncryption:
      description: A CMAF encryption configuration.
      type: object
      additionalProperties: false
      properties:
        SpekeKeyProvider:
          $ref: '#/components/schemas/SpekeKeyProvider'
      required:
        - SpekeKeyProvider
    DashPackage:
      type: object
      description: A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
      additionalProperties: false
      properties:
        DashManifests:
          description: A list of DASH manifest configurations.
          type: array
          items:
            $ref: '#/components/schemas/DashManifest'
        Encryption:
          $ref: '#/components/schemas/DashEncryption'
        PeriodTriggers:
          description: A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Asset contains SCTE-35 ad markers.
          type: array
          items:
            type: string
            enum:
              - ADS
        SegmentDurationSeconds:
          $ref: '#/components/schemas/SegmentDurationSeconds'
        SegmentTemplateFormat:
          description: Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
          type: string
          enum:
            - NUMBER_WITH_TIMELINE
            - TIME_WITH_TIMELINE
            - NUMBER_WITH_DURATION
        IncludeEncoderConfigurationInSegments:
          description: When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
          type: boolean
        IncludeIframeOnlyStream:
          description: When enabled, an I-Frame only stream will be included in the output.
          type: boolean
      required:
        - DashManifests
    DashEncryption:
      type: object
      description: A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
      additionalProperties: false
      properties:
        SpekeKeyProvider:
          $ref: '#/components/schemas/SpekeKeyProvider'
      required:
        - SpekeKeyProvider
    Authorization:
      type: object
      additionalProperties: false
      properties:
        CdnIdentifierSecret:
          description: The Amazon Resource Name (ARN) for the secret in AWS Secrets Manager that is used for CDN authorization.
          type: string
        SecretsRoleArn:
          description: The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
          type: string
      required:
        - CdnIdentifierSecret
        - SecretsRoleArn
    HlsPackage:
      description: An HTTP Live Streaming (HLS) packaging configuration.
      type: object
      additionalProperties: false
      properties:
        Encryption:
          $ref: '#/components/schemas/HlsEncryption'
        HlsManifests:
          description: A list of HLS manifest configurations.
          type: array
          items:
            $ref: '#/components/schemas/HlsManifest'
        IncludeDvbSubtitles:
          description: When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
          type: boolean
        SegmentDurationSeconds:
          $ref: '#/components/schemas/SegmentDurationSeconds'
        UseAudioRenditionGroup:
          description: When enabled, audio streams will be placed in rendition groups in the output.
          type: boolean
      required:
        - HlsManifests
    HlsEncryption:
      description: An HTTP Live Streaming (HLS) encryption configuration.
      type: object
      additionalProperties: false
      properties:
        ConstantInitializationVector:
          description: An HTTP Live Streaming (HLS) encryption configuration.
          type: string
        EncryptionMethod:
          description: The encryption method to use.
          type: string
          enum:
            - AES_128
            - SAMPLE_AES
        SpekeKeyProvider:
          $ref: '#/components/schemas/SpekeKeyProvider'
      required:
        - SpekeKeyProvider
    CmafPackage:
      description: A CMAF packaging configuration.
      type: object
      additionalProperties: false
      properties:
        Encryption:
          $ref: '#/components/schemas/CmafEncryption'
        HlsManifests:
          description: A list of HLS manifest configurations.
          type: array
          items:
            $ref: '#/components/schemas/HlsManifest'
        SegmentDurationSeconds:
          $ref: '#/components/schemas/SegmentDurationSeconds'
        IncludeEncoderConfigurationInSegments:
          description: When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
          type: boolean
      required:
        - HlsManifests
    CmafEncryption:
      type: object
      description: A CMAF encryption configuration.
      additionalProperties: false
      properties:
        SpekeKeyProvider:
          $ref: '#/components/schemas/SpekeKeyProvider'
      required:
        - SpekeKeyProvider
    HlsManifest:
      description: An HTTP Live Streaming (HLS) manifest configuration.
      type: object
      additionalProperties: false
      properties:
        AdMarkers:
          description: This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source.
          type: string
          enum:
            - NONE
            - SCTE35_ENHANCED
            - PASSTHROUGH
        IncludeIframeOnlyStream:
          description: When enabled, an I-Frame only stream will be included in the output.
          type: boolean
        ManifestName:
          $ref: '#/components/schemas/ManifestName'
        ProgramDateTimeIntervalSeconds:
          description: >-
            The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP
            Live Streaming (HLS) input, it will be passed through to HLS output.
          type: integer
        RepeatExtXKey:
          description: When enabled, the EXT-X-KEY tag will be repeated in output manifests.
          type: boolean
        StreamSelection:
          $ref: '#/components/schemas/StreamSelection'
    StreamSelection:
      description: A StreamSelection configuration.
      type: object
      additionalProperties: false
      properties:
        MaxVideoBitsPerSecond:
          description: The maximum video bitrate (bps) to include in output.
          type: integer
        MinVideoBitsPerSecond:
          description: The minimum video bitrate (bps) to include in output.
          type: integer
        StreamOrder:
          description: A directive that determines the order of streams in the output.
          type: string
          enum:
            - ORIGINAL
            - VIDEO_BITRATE_ASCENDING
            - VIDEO_BITRATE_DESCENDING
    SpekeKeyProvider:
      description: A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
      type: object
      additionalProperties: false
      properties:
        EncryptionContractConfiguration:
          $ref: '#/components/schemas/EncryptionContractConfiguration'
        RoleArn:
          $ref: '#/components/schemas/RoleArn'
        SystemIds:
          description: The system IDs to include in key requests.
          type: array
          items:
            type: string
        Url:
          description: The URL of the external key provider service.
          type: string
      required:
        - RoleArn
        - SystemIds
        - Url
    EncryptionContractConfiguration:
      description: The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.
      type: object
      additionalProperties: false
      required:
        - PresetSpeke20Audio
        - PresetSpeke20Video
      properties:
        PresetSpeke20Audio:
          description: A collection of audio encryption presets.
          type: string
          enum:
            - PRESET-AUDIO-1
            - PRESET-AUDIO-2
            - PRESET-AUDIO-3
            - SHARED
            - UNENCRYPTED
        PresetSpeke20Video:
          description: A collection of video encryption presets.
          type: string
          enum:
            - PRESET-VIDEO-1
            - PRESET-VIDEO-2
            - PRESET-VIDEO-3
            - PRESET-VIDEO-4
            - PRESET-VIDEO-5
            - PRESET-VIDEO-6
            - PRESET-VIDEO-7
            - PRESET-VIDEO-8
            - SHARED
            - UNENCRYPTED
    AdsOnDeliveryRestrictions:
      description: >-
        This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing
        "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
      type: string
      enum:
        - NONE
        - RESTRICTED
        - UNRESTRICTED
        - BOTH
    OriginEndpoint:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) assigned to the OriginEndpoint.
          type: string
        Url:
          description: The URL of the packaged OriginEndpoint for consumption.
          type: string
        Id:
          description: The ID of the OriginEndpoint.
          type: string
          pattern: \A[0-9a-zA-Z-_]+\Z
          minLength: 1
          maxLength: 256
        ChannelId:
          description: The ID of the Channel the OriginEndpoint is associated with.
          type: string
        Description:
          description: A short text description of the OriginEndpoint.
          type: string
        Whitelist:
          description: A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
          type: array
          items:
            type: string
        StartoverWindowSeconds:
          description: Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
          type: integer
        TimeDelaySeconds:
          description: Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
          type: integer
        ManifestName:
          description: A short string appended to the end of the OriginEndpoint URL.
          type: string
        Origination:
          description: Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
          type: string
          enum:
            - ALLOW
            - DENY
        Authorization:
          $ref: '#/components/schemas/Authorization'
        HlsPackage:
          $ref: '#/components/schemas/HlsPackage'
        DashPackage:
          $ref: '#/components/schemas/DashPackage'
        MssPackage:
          $ref: '#/components/schemas/MssPackage'
        CmafPackage:
          $ref: '#/components/schemas/CmafPackage'
        Tags:
          description: A collection of tags associated with a resource
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Id
        - ChannelId
      x-stackql-resource-name: origin_endpoint
      x-stackql-primaryIdentifier:
        - Id
    RoleArn:
      description: An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
      type: string
    SegmentDurationSeconds:
      description: Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
      type: integer
    ManifestName:
      description: An optional string to include in the name of the manifest.
      type: string
    DashManifest:
      description: A DASH manifest configuration.
      type: object
      additionalProperties: false
      properties:
        ManifestLayout:
          description: Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
          type: string
          enum:
            - FULL
            - COMPACT
        ManifestName:
          $ref: '#/components/schemas/ManifestName'
        MinBufferTimeSeconds:
          description: Minimum duration (in seconds) that a player will buffer media before starting the presentation.
          type: integer
        Profile:
          description: The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
          type: string
          enum:
            - NONE
            - HBBTV_1_5
        ScteMarkersSource:
          description: The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
          type: string
          enum:
            - SEGMENTS
            - MANIFEST
        StreamSelection:
          $ref: '#/components/schemas/StreamSelection'
    MssManifest:
      description: A Microsoft Smooth Streaming (MSS) manifest configuration.
      type: object
      additionalProperties: false
      properties:
        ManifestName:
          $ref: '#/components/schemas/ManifestName'
        StreamSelection:
          $ref: '#/components/schemas/StreamSelection'
    PackagingConfiguration:
      type: object
      properties:
        Id:
          description: The ID of the PackagingConfiguration.
          type: string
        PackagingGroupId:
          description: The ID of a PackagingGroup.
          type: string
        Arn:
          description: The ARN of the PackagingConfiguration.
          type: string
        CmafPackage:
          description: A CMAF packaging configuration.
          $ref: '#/components/schemas/CmafPackage'
        DashPackage:
          description: A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
          $ref: '#/components/schemas/DashPackage'
        HlsPackage:
          description: An HTTP Live Streaming (HLS) packaging configuration.
          $ref: '#/components/schemas/HlsPackage'
        MssPackage:
          description: A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
          $ref: '#/components/schemas/MssPackage'
        Tags:
          description: A collection of tags associated with a resource
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - PackagingGroupId
        - Id
      x-stackql-resource-name: packaging_configuration
      x-stackql-primaryIdentifier:
        - Id
    PackagingGroup:
      type: object
      properties:
        Id:
          description: The ID of the PackagingGroup.
          type: string
          pattern: \A[0-9a-zA-Z-_]+\Z
          minLength: 1
          maxLength: 256
        Arn:
          description: The ARN of the PackagingGroup.
          type: string
        DomainName:
          description: The fully qualified domain name for Assets in the PackagingGroup.
          type: string
        Authorization:
          description: CDN Authorization
          $ref: '#/components/schemas/Authorization'
        Tags:
          description: A collection of tags associated with a resource
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
        EgressAccessLogs:
          description: The configuration parameters for egress access logging.
          $ref: '#/components/schemas/LogConfiguration'
      required:
        - Id
      x-stackql-resource-name: packaging_group
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    assets:
      name: assets
      id: aws.mediapackage.assets
      x-cfn-schema-name: Asset
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::Asset'
    asset:
      name: asset
      id: aws.mediapackage.asset
      x-cfn-schema-name: Asset
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.EgressEndpoints') as egress_endpoints,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.PackagingGroupId') as packaging_group_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(Properties, '$.SourceRoleArn') as source_role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::Asset'
    channels:
      name: channels
      id: aws.mediapackage.channels
      x-cfn-schema-name: Channel
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::Channel'
    channel:
      name: channel
      id: aws.mediapackage.channel
      x-cfn-schema-name: Channel
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.HlsIngest.ingestEndpoints') as hls_ingestingest_endpoints,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.EgressAccessLogs.LogGroupName') as egress_access_logs_log_group_name,
              JSON_EXTRACT(Properties, '$.IngressAccessLogs.LogGroupName') as ingress_access_logs_log_group_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::Channel'
    origin_endpoints:
      name: origin_endpoints
      id: aws.mediapackage.origin_endpoints
      x-cfn-schema-name: OriginEndpoint
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
    origin_endpoint:
      name: origin_endpoint
      id: aws.mediapackage.origin_endpoint
      x-cfn-schema-name: OriginEndpoint
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Url') as url,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ChannelId') as channel_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Whitelist') as whitelist,
              JSON_EXTRACT(Properties, '$.StartoverWindowSeconds') as startover_window_seconds,
              JSON_EXTRACT(Properties, '$.TimeDelaySeconds') as time_delay_seconds,
              JSON_EXTRACT(Properties, '$.ManifestName') as manifest_name,
              JSON_EXTRACT(Properties, '$.Origination') as origination,
              JSON_EXTRACT(Properties, '$.Authorization.CdnIdentifierSecret') as authorization_cdn_identifier_secret,
              JSON_EXTRACT(Properties, '$.Authorization.SecretsRoleArn') as authorization_secrets_role_arn,
              JSON_EXTRACT(Properties, '$.HlsPackage.Encryption') as hls_package_encryption,
              JSON_EXTRACT(Properties, '$.HlsPackage.HlsManifests') as hls_package_hls_manifests,
              JSON_EXTRACT(Properties, '$.HlsPackage.IncludeDvbSubtitles') as hls_package_include_dvb_subtitles,
              JSON_EXTRACT(Properties, '$.HlsPackage.SegmentDurationSeconds') as hls_package_segment_duration_seconds,
              JSON_EXTRACT(Properties, '$.HlsPackage.UseAudioRenditionGroup') as hls_package_use_audio_rendition_group,
              JSON_EXTRACT(Properties, '$.DashPackage.DashManifests') as dash_package_dash_manifests,
              JSON_EXTRACT(Properties, '$.DashPackage.Encryption') as dash_package_encryption,
              JSON_EXTRACT(Properties, '$.DashPackage.PeriodTriggers') as dash_package_period_triggers,
              JSON_EXTRACT(Properties, '$.DashPackage.SegmentDurationSeconds') as dash_package_segment_duration_seconds,
              JSON_EXTRACT(Properties, '$.DashPackage.SegmentTemplateFormat') as dash_package_segment_template_format,
              JSON_EXTRACT(Properties, '$.DashPackage.IncludeEncoderConfigurationInSegments') as dash_package_include_encoder_configuration_in_segments,
              JSON_EXTRACT(Properties, '$.DashPackage.IncludeIframeOnlyStream') as dash_package_include_iframe_only_stream,
              JSON_EXTRACT(Properties, '$.MssPackage.Encryption') as mss_package_encryption,
              JSON_EXTRACT(Properties, '$.MssPackage.MssManifests') as mss_package_mss_manifests,
              JSON_EXTRACT(Properties, '$.MssPackage.SegmentDurationSeconds') as mss_package_segment_duration_seconds,
              JSON_EXTRACT(Properties, '$.CmafPackage.Encryption') as cmaf_package_encryption,
              JSON_EXTRACT(Properties, '$.CmafPackage.HlsManifests') as cmaf_package_hls_manifests,
              JSON_EXTRACT(Properties, '$.CmafPackage.SegmentDurationSeconds') as cmaf_package_segment_duration_seconds,
              JSON_EXTRACT(Properties, '$.CmafPackage.IncludeEncoderConfigurationInSegments') as cmaf_package_include_encoder_configuration_in_segments,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
    packaging_configurations:
      name: packaging_configurations
      id: aws.mediapackage.packaging_configurations
      x-cfn-schema-name: PackagingConfiguration
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
    packaging_configuration:
      name: packaging_configuration
      id: aws.mediapackage.packaging_configuration
      x-cfn-schema-name: PackagingConfiguration
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.PackagingGroupId') as packaging_group_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CmafPackage.Encryption') as cmaf_package_encryption,
              JSON_EXTRACT(Properties, '$.CmafPackage.HlsManifests') as cmaf_package_hls_manifests,
              JSON_EXTRACT(Properties, '$.CmafPackage.SegmentDurationSeconds') as cmaf_package_segment_duration_seconds,
              JSON_EXTRACT(Properties, '$.CmafPackage.IncludeEncoderConfigurationInSegments') as cmaf_package_include_encoder_configuration_in_segments,
              JSON_EXTRACT(Properties, '$.DashPackage.DashManifests') as dash_package_dash_manifests,
              JSON_EXTRACT(Properties, '$.DashPackage.Encryption') as dash_package_encryption,
              JSON_EXTRACT(Properties, '$.DashPackage.PeriodTriggers') as dash_package_period_triggers,
              JSON_EXTRACT(Properties, '$.DashPackage.SegmentDurationSeconds') as dash_package_segment_duration_seconds,
              JSON_EXTRACT(Properties, '$.DashPackage.SegmentTemplateFormat') as dash_package_segment_template_format,
              JSON_EXTRACT(Properties, '$.DashPackage.IncludeEncoderConfigurationInSegments') as dash_package_include_encoder_configuration_in_segments,
              JSON_EXTRACT(Properties, '$.DashPackage.IncludeIframeOnlyStream') as dash_package_include_iframe_only_stream,
              JSON_EXTRACT(Properties, '$.HlsPackage.Encryption') as hls_package_encryption,
              JSON_EXTRACT(Properties, '$.HlsPackage.HlsManifests') as hls_package_hls_manifests,
              JSON_EXTRACT(Properties, '$.HlsPackage.IncludeDvbSubtitles') as hls_package_include_dvb_subtitles,
              JSON_EXTRACT(Properties, '$.HlsPackage.SegmentDurationSeconds') as hls_package_segment_duration_seconds,
              JSON_EXTRACT(Properties, '$.HlsPackage.UseAudioRenditionGroup') as hls_package_use_audio_rendition_group,
              JSON_EXTRACT(Properties, '$.MssPackage.Encryption') as mss_package_encryption,
              JSON_EXTRACT(Properties, '$.MssPackage.MssManifests') as mss_package_mss_manifests,
              JSON_EXTRACT(Properties, '$.MssPackage.SegmentDurationSeconds') as mss_package_segment_duration_seconds,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
    packaging_groups:
      name: packaging_groups
      id: aws.mediapackage.packaging_groups
      x-cfn-schema-name: PackagingGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::PackagingGroup'
    packaging_group:
      name: packaging_group
      id: aws.mediapackage.packaging_group
      x-cfn-schema-name: PackagingGroup
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.Authorization.CdnIdentifierSecret') as authorization_cdn_identifier_secret,
              JSON_EXTRACT(Properties, '$.Authorization.SecretsRoleArn') as authorization_secrets_role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.EgressAccessLogs.LogGroupName') as egress_access_logs_log_group_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::PackagingGroup'
