openapi: 3.0.0
info:
  title: MediaPackage
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    EgressEndpoint:
      description: The endpoint URL used to access an Asset using one PackagingConfiguration.
      type: object
      additionalProperties: false
      properties:
        PackagingConfigurationId:
          description: The ID of the PackagingConfiguration being applied to the Asset.
          type: string
        Url:
          description: The URL of the parent manifest for the repackaged Asset.
          type: string
      required:
        - PackagingConfigurationId
        - Url
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
      required:
        - Value
        - Key
    Asset:
      type: object
      properties:
        Arn:
          description: The ARN of the Asset.
          type: string
        CreatedAt:
          description: The time the Asset was initially submitted for Ingest.
          type: string
        EgressEndpoints:
          description: The list of egress endpoints available for the Asset.
          type: array
          items:
            $ref: '#/components/schemas/EgressEndpoint'
        Id:
          description: The unique identifier for the Asset.
          type: string
        PackagingGroupId:
          description: The ID of the PackagingGroup for the Asset.
          type: string
        ResourceId:
          description: The resource ID to include in SPEKE key requests.
          type: string
        SourceArn:
          description: ARN of the source object in S3.
          type: string
        SourceRoleArn:
          description: The IAM role_arn used to access the source S3 bucket.
          type: string
        Tags:
          description: A collection of tags associated with a resource
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Id
        - PackagingGroupId
        - SourceArn
        - SourceRoleArn
      x-stackql-resource-name: asset
      description: Resource schema for AWS::MediaPackage::Asset
      x-type-name: AWS::MediaPackage::Asset
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Arn
        - CreatedAt
        - EgressEndpoints/*/PackagingConfigurationId
        - EgressEndpoints/*/Url
      x-required-properties:
        - Id
        - PackagingGroupId
        - SourceArn
        - SourceRoleArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - mediapackage-vod:CreateAsset
          - mediapackage-vod:DescribeAsset
          - mediapackage-vod:TagResource
          - iam:PassRole
        read:
          - mediapackage-vod:DescribeAsset
        delete:
          - mediapackage-vod:DescribeAsset
          - mediapackage-vod:DeleteAsset
        list:
          - mediapackage-vod:ListAssets
          - mediapackage-vod:DescribePackagingGroup
    HlsIngest:
      description: An HTTP Live Streaming (HLS) ingest resource configuration.
      type: object
      additionalProperties: false
      properties:
        ingestEndpoints:
          description: A list of endpoints to which the source stream should be sent.
          type: array
          items:
            $ref: '#/components/schemas/IngestEndpoint'
    IngestEndpoint:
      description: An endpoint for ingesting source content for a Channel.
      type: object
      additionalProperties: false
      properties:
        Id:
          description: The system generated unique identifier for the IngestEndpoint
          type: string
        Username:
          description: The system generated username for ingest authentication.
          type: string
        Password:
          description: The system generated password for ingest authentication.
          type: string
        Url:
          description: The ingest URL to which the source stream should be sent.
          type: string
      required:
        - Id
        - Username
        - Password
        - Url
    LogConfiguration:
      type: object
      additionalProperties: false
      properties:
        LogGroupName:
          description: 'Sets a custom AWS CloudWatch log group name for egress logs. If a log group name isn''t specified, the default name is used: /aws/MediaPackage/VodEgressAccessLogs.'
          type: string
          pattern: \A\/aws\/MediaPackage\/[0-9a-zA-Z-_\/\.#]+\Z
          minLength: 1
          maxLength: 512
    Channel:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) assigned to the Channel.
          type: string
        Id:
          description: The ID of the Channel.
          type: string
          pattern: \A[0-9a-zA-Z-_]+\Z
          minLength: 1
          maxLength: 256
        Description:
          description: A short text description of the Channel.
          type: string
        HlsIngest:
          description: An HTTP Live Streaming (HLS) ingest resource configuration.
          $ref: '#/components/schemas/HlsIngest'
        Tags:
          description: A collection of tags associated with a resource
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
        EgressAccessLogs:
          description: The configuration parameters for egress access logging.
          $ref: '#/components/schemas/LogConfiguration'
        IngressAccessLogs:
          description: The configuration parameters for egress access logging.
          $ref: '#/components/schemas/LogConfiguration'
      required:
        - Id
      x-stackql-resource-name: channel
      description: Resource schema for AWS::MediaPackage::Channel
      x-type-name: AWS::MediaPackage::Channel
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Id
        - Tags
      x-read-only-properties:
        - Arn
        - HlsIngest/ingestEndpoints/*/Id
        - HlsIngest/ingestEndpoints/*/Username
        - HlsIngest/ingestEndpoints/*/Password
        - HlsIngest/ingestEndpoints/*/Url
      x-required-properties:
        - Id
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - mediapackage:CreateChannel
          - mediapackage:DescribeChannel
          - mediapackage:UpdateChannel
          - mediapackage:TagResource
          - mediapackage:ConfigureLogs
          - iam:CreateServiceLinkedRole
        read:
          - mediapackage:DescribeChannel
        update:
          - mediapackage:UpdateChannel
          - mediapackage:ConfigureLogs
          - iam:CreateServiceLinkedRole
        delete:
          - mediapackage:DeleteChannel
        list:
          - mediapackage:ListChannels
    MssPackage:
      type: object
      description: A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
      additionalProperties: false
      properties:
        Encryption:
          $ref: '#/components/schemas/MssEncryption'
        MssManifests:
          description: A list of MSS manifest configurations.
          type: array
          items:
            $ref: '#/components/schemas/MssManifest'
        SegmentDurationSeconds:
          $ref: '#/components/schemas/SegmentDurationSeconds'
      required:
        - MssManifests
    MssEncryption:
      description: A CMAF encryption configuration.
      type: object
      additionalProperties: false
      properties:
        SpekeKeyProvider:
          $ref: '#/components/schemas/SpekeKeyProvider'
      required:
        - SpekeKeyProvider
    DashPackage:
      type: object
      description: A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
      additionalProperties: false
      properties:
        DashManifests:
          description: A list of DASH manifest configurations.
          type: array
          items:
            $ref: '#/components/schemas/DashManifest'
        Encryption:
          $ref: '#/components/schemas/DashEncryption'
        PeriodTriggers:
          description: A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Asset contains SCTE-35 ad markers.
          type: array
          items:
            type: string
            enum:
              - ADS
        SegmentDurationSeconds:
          $ref: '#/components/schemas/SegmentDurationSeconds'
        SegmentTemplateFormat:
          description: Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
          type: string
          enum:
            - NUMBER_WITH_TIMELINE
            - TIME_WITH_TIMELINE
            - NUMBER_WITH_DURATION
        IncludeEncoderConfigurationInSegments:
          description: When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
          type: boolean
        IncludeIframeOnlyStream:
          description: When enabled, an I-Frame only stream will be included in the output.
          type: boolean
      required:
        - DashManifests
    DashEncryption:
      type: object
      description: A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
      additionalProperties: false
      properties:
        SpekeKeyProvider:
          $ref: '#/components/schemas/SpekeKeyProvider'
      required:
        - SpekeKeyProvider
    Authorization:
      type: object
      additionalProperties: false
      properties:
        CdnIdentifierSecret:
          description: The Amazon Resource Name (ARN) for the secret in AWS Secrets Manager that is used for CDN authorization.
          type: string
        SecretsRoleArn:
          description: The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
          type: string
      required:
        - CdnIdentifierSecret
        - SecretsRoleArn
    HlsPackage:
      description: An HTTP Live Streaming (HLS) packaging configuration.
      type: object
      additionalProperties: false
      properties:
        Encryption:
          $ref: '#/components/schemas/HlsEncryption'
        HlsManifests:
          description: A list of HLS manifest configurations.
          type: array
          items:
            $ref: '#/components/schemas/HlsManifest'
        IncludeDvbSubtitles:
          description: When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
          type: boolean
        SegmentDurationSeconds:
          $ref: '#/components/schemas/SegmentDurationSeconds'
        UseAudioRenditionGroup:
          description: When enabled, audio streams will be placed in rendition groups in the output.
          type: boolean
      required:
        - HlsManifests
    HlsEncryption:
      description: An HTTP Live Streaming (HLS) encryption configuration.
      type: object
      additionalProperties: false
      properties:
        ConstantInitializationVector:
          description: An HTTP Live Streaming (HLS) encryption configuration.
          type: string
        EncryptionMethod:
          description: The encryption method to use.
          type: string
          enum:
            - AES_128
            - SAMPLE_AES
        SpekeKeyProvider:
          $ref: '#/components/schemas/SpekeKeyProvider'
      required:
        - SpekeKeyProvider
    CmafPackage:
      description: A CMAF packaging configuration.
      type: object
      additionalProperties: false
      properties:
        Encryption:
          $ref: '#/components/schemas/CmafEncryption'
        HlsManifests:
          description: A list of HLS manifest configurations.
          type: array
          items:
            $ref: '#/components/schemas/HlsManifest'
        SegmentDurationSeconds:
          $ref: '#/components/schemas/SegmentDurationSeconds'
        IncludeEncoderConfigurationInSegments:
          description: When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
          type: boolean
      required:
        - HlsManifests
    CmafEncryption:
      type: object
      description: A CMAF encryption configuration.
      additionalProperties: false
      properties:
        SpekeKeyProvider:
          $ref: '#/components/schemas/SpekeKeyProvider'
      required:
        - SpekeKeyProvider
    HlsManifest:
      description: An HTTP Live Streaming (HLS) manifest configuration.
      type: object
      additionalProperties: false
      properties:
        AdMarkers:
          description: This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source.
          type: string
          enum:
            - NONE
            - SCTE35_ENHANCED
            - PASSTHROUGH
        IncludeIframeOnlyStream:
          description: When enabled, an I-Frame only stream will be included in the output.
          type: boolean
        ManifestName:
          $ref: '#/components/schemas/ManifestName'
        ProgramDateTimeIntervalSeconds:
          description: >-
            The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP
            Live Streaming (HLS) input, it will be passed through to HLS output.
          type: integer
        RepeatExtXKey:
          description: When enabled, the EXT-X-KEY tag will be repeated in output manifests.
          type: boolean
        StreamSelection:
          $ref: '#/components/schemas/StreamSelection'
    StreamSelection:
      description: A StreamSelection configuration.
      type: object
      additionalProperties: false
      properties:
        MaxVideoBitsPerSecond:
          description: The maximum video bitrate (bps) to include in output.
          type: integer
        MinVideoBitsPerSecond:
          description: The minimum video bitrate (bps) to include in output.
          type: integer
        StreamOrder:
          description: A directive that determines the order of streams in the output.
          type: string
          enum:
            - ORIGINAL
            - VIDEO_BITRATE_ASCENDING
            - VIDEO_BITRATE_DESCENDING
    SpekeKeyProvider:
      description: A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
      type: object
      additionalProperties: false
      properties:
        EncryptionContractConfiguration:
          $ref: '#/components/schemas/EncryptionContractConfiguration'
        RoleArn:
          $ref: '#/components/schemas/RoleArn'
        SystemIds:
          description: The system IDs to include in key requests.
          type: array
          items:
            type: string
        Url:
          description: The URL of the external key provider service.
          type: string
      required:
        - RoleArn
        - SystemIds
        - Url
    EncryptionContractConfiguration:
      description: The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.
      type: object
      additionalProperties: false
      required:
        - PresetSpeke20Audio
        - PresetSpeke20Video
      properties:
        PresetSpeke20Audio:
          description: A collection of audio encryption presets.
          type: string
          enum:
            - PRESET-AUDIO-1
            - PRESET-AUDIO-2
            - PRESET-AUDIO-3
            - SHARED
            - UNENCRYPTED
        PresetSpeke20Video:
          description: A collection of video encryption presets.
          type: string
          enum:
            - PRESET-VIDEO-1
            - PRESET-VIDEO-2
            - PRESET-VIDEO-3
            - PRESET-VIDEO-4
            - PRESET-VIDEO-5
            - PRESET-VIDEO-6
            - PRESET-VIDEO-7
            - PRESET-VIDEO-8
            - SHARED
            - UNENCRYPTED
    AdsOnDeliveryRestrictions:
      description: >-
        This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing
        "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
      type: string
      enum:
        - NONE
        - RESTRICTED
        - UNRESTRICTED
        - BOTH
    OriginEndpoint:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) assigned to the OriginEndpoint.
          type: string
        Url:
          description: The URL of the packaged OriginEndpoint for consumption.
          type: string
        Id:
          description: The ID of the OriginEndpoint.
          type: string
          pattern: \A[0-9a-zA-Z-_]+\Z
          minLength: 1
          maxLength: 256
        ChannelId:
          description: The ID of the Channel the OriginEndpoint is associated with.
          type: string
        Description:
          description: A short text description of the OriginEndpoint.
          type: string
        Whitelist:
          description: A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
          type: array
          items:
            type: string
        StartoverWindowSeconds:
          description: Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
          type: integer
        TimeDelaySeconds:
          description: Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
          type: integer
        ManifestName:
          description: A short string appended to the end of the OriginEndpoint URL.
          type: string
        Origination:
          description: Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
          type: string
          enum:
            - ALLOW
            - DENY
        Authorization:
          $ref: '#/components/schemas/Authorization'
        HlsPackage:
          $ref: '#/components/schemas/HlsPackage'
        DashPackage:
          $ref: '#/components/schemas/DashPackage'
        MssPackage:
          $ref: '#/components/schemas/MssPackage'
        CmafPackage:
          $ref: '#/components/schemas/CmafPackage'
        Tags:
          description: A collection of tags associated with a resource
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Id
        - ChannelId
      x-stackql-resource-name: origin_endpoint
      description: Resource schema for AWS::MediaPackage::OriginEndpoint
      x-type-name: AWS::MediaPackage::OriginEndpoint
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Id
      x-read-only-properties:
        - Arn
        - Url
      x-required-properties:
        - Id
        - ChannelId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - mediapackage:TagResource
          - mediapackage:UntagResource
      x-required-permissions:
        create:
          - mediapackage:CreateOriginEndpoint
          - mediapackage:DescribeOriginEndpoint
          - mediapackage:DescribeChannel
          - mediapackage:TagResource
          - iam:PassRole
          - acm:DescribeCertificate
        read:
          - mediapackage:DescribeOriginEndpoint
        update:
          - mediapackage:UpdateOriginEndpoint
          - mediapackage:TagResource
          - mediapackage:ListTagsForResource
          - mediapackage:UntagResource
          - mediapackage:DescribeOriginEndpoint
          - iam:PassRole
        delete:
          - mediapackage:DeleteOriginEndpoint
        list:
          - mediapackage:ListOriginEndpoints
    RoleArn:
      description: An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
      type: string
    SegmentDurationSeconds:
      description: Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
      type: integer
    ManifestName:
      description: An optional string to include in the name of the manifest.
      type: string
    DashManifest:
      description: A DASH manifest configuration.
      type: object
      additionalProperties: false
      properties:
        ManifestLayout:
          description: Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
          type: string
          enum:
            - FULL
            - COMPACT
        ManifestName:
          $ref: '#/components/schemas/ManifestName'
        MinBufferTimeSeconds:
          description: Minimum duration (in seconds) that a player will buffer media before starting the presentation.
          type: integer
        Profile:
          description: The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
          type: string
          enum:
            - NONE
            - HBBTV_1_5
        ScteMarkersSource:
          description: The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
          type: string
          enum:
            - SEGMENTS
            - MANIFEST
        StreamSelection:
          $ref: '#/components/schemas/StreamSelection'
    MssManifest:
      description: A Microsoft Smooth Streaming (MSS) manifest configuration.
      type: object
      additionalProperties: false
      properties:
        ManifestName:
          $ref: '#/components/schemas/ManifestName'
        StreamSelection:
          $ref: '#/components/schemas/StreamSelection'
    PackagingConfiguration:
      type: object
      properties:
        Id:
          description: The ID of the PackagingConfiguration.
          type: string
        PackagingGroupId:
          description: The ID of a PackagingGroup.
          type: string
        Arn:
          description: The ARN of the PackagingConfiguration.
          type: string
        CmafPackage:
          description: A CMAF packaging configuration.
          $ref: '#/components/schemas/CmafPackage'
        DashPackage:
          description: A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
          $ref: '#/components/schemas/DashPackage'
        HlsPackage:
          description: An HTTP Live Streaming (HLS) packaging configuration.
          $ref: '#/components/schemas/HlsPackage'
        MssPackage:
          description: A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
          $ref: '#/components/schemas/MssPackage'
        Tags:
          description: A collection of tags associated with a resource
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - PackagingGroupId
        - Id
      x-stackql-resource-name: packaging_configuration
      description: Resource schema for AWS::MediaPackage::PackagingConfiguration
      x-type-name: AWS::MediaPackage::PackagingConfiguration
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Id
      x-read-only-properties:
        - Arn
      x-required-properties:
        - PackagingGroupId
        - Id
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - mediapackage-vod:CreatePackagingConfiguration
          - mediapackage-vod:DescribePackagingConfiguration
          - mediapackage-vod:TagResource
          - iam:PassRole
        read:
          - mediapackage-vod:DescribePackagingConfiguration
        delete:
          - mediapackage-vod:DescribePackagingConfiguration
          - mediapackage-vod:DeletePackagingConfiguration
        list:
          - mediapackage-vod:ListPackagingConfigurations
          - mediapackage-vod:DescribePackagingGroup
    PackagingGroup:
      type: object
      properties:
        Id:
          description: The ID of the PackagingGroup.
          type: string
          pattern: \A[0-9a-zA-Z-_]+\Z
          minLength: 1
          maxLength: 256
        Arn:
          description: The ARN of the PackagingGroup.
          type: string
        DomainName:
          description: The fully qualified domain name for Assets in the PackagingGroup.
          type: string
        Authorization:
          description: CDN Authorization
          $ref: '#/components/schemas/Authorization'
        Tags:
          description: A collection of tags associated with a resource
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
        EgressAccessLogs:
          description: The configuration parameters for egress access logging.
          $ref: '#/components/schemas/LogConfiguration'
      required:
        - Id
      x-stackql-resource-name: packaging_group
      description: Resource schema for AWS::MediaPackage::PackagingGroup
      x-type-name: AWS::MediaPackage::PackagingGroup
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Id
        - Tags
      x-read-only-properties:
        - Arn
        - DomainName
      x-required-properties:
        - Id
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - mediapackage-vod:CreatePackagingGroup
          - mediapackage-vod:DescribePackagingGroup
          - mediapackage-vod:TagResource
          - mediapackage-vod:ConfigureLogs
          - iam:PassRole
          - iam:CreateServiceLinkedRole
        read:
          - mediapackage-vod:DescribePackagingGroup
        update:
          - mediapackage-vod:DescribePackagingGroup
          - mediapackage-vod:UpdatePackagingGroup
          - mediapackage-vod:ConfigureLogs
          - mediapackage-vod:TagResource
          - iam:PassRole
          - iam:CreateServiceLinkedRole
        list:
          - mediapackage-vod:ListPackagingGroups
        delete:
          - mediapackage-vod:DescribePackagingGroup
          - mediapackage-vod:DeletePackagingGroup
    CreateAssetRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              description: The ARN of the Asset.
              type: string
            CreatedAt:
              description: The time the Asset was initially submitted for Ingest.
              type: string
            EgressEndpoints:
              description: The list of egress endpoints available for the Asset.
              type: array
              items:
                $ref: '#/components/schemas/EgressEndpoint'
            Id:
              description: The unique identifier for the Asset.
              type: string
            PackagingGroupId:
              description: The ID of the PackagingGroup for the Asset.
              type: string
            ResourceId:
              description: The resource ID to include in SPEKE key requests.
              type: string
            SourceArn:
              description: ARN of the source object in S3.
              type: string
            SourceRoleArn:
              description: The IAM role_arn used to access the source S3 bucket.
              type: string
            Tags:
              description: A collection of tags associated with a resource
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateAssetRequest
      type: object
      required: []
    CreateChannelRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              description: The Amazon Resource Name (ARN) assigned to the Channel.
              type: string
            Id:
              description: The ID of the Channel.
              type: string
              pattern: \A[0-9a-zA-Z-_]+\Z
              minLength: 1
              maxLength: 256
            Description:
              description: A short text description of the Channel.
              type: string
            HlsIngest:
              description: An HTTP Live Streaming (HLS) ingest resource configuration.
              $ref: '#/components/schemas/HlsIngest'
            Tags:
              description: A collection of tags associated with a resource
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
            EgressAccessLogs:
              description: The configuration parameters for egress access logging.
              $ref: '#/components/schemas/LogConfiguration'
            IngressAccessLogs:
              description: The configuration parameters for egress access logging.
              $ref: '#/components/schemas/LogConfiguration'
          x-stackQL-stringOnly: true
      x-title: CreateChannelRequest
      type: object
      required: []
    CreateOriginEndpointRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              description: The Amazon Resource Name (ARN) assigned to the OriginEndpoint.
              type: string
            Url:
              description: The URL of the packaged OriginEndpoint for consumption.
              type: string
            Id:
              description: The ID of the OriginEndpoint.
              type: string
              pattern: \A[0-9a-zA-Z-_]+\Z
              minLength: 1
              maxLength: 256
            ChannelId:
              description: The ID of the Channel the OriginEndpoint is associated with.
              type: string
            Description:
              description: A short text description of the OriginEndpoint.
              type: string
            Whitelist:
              description: A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
              type: array
              items:
                type: string
            StartoverWindowSeconds:
              description: Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
              type: integer
            TimeDelaySeconds:
              description: Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
              type: integer
            ManifestName:
              description: A short string appended to the end of the OriginEndpoint URL.
              type: string
            Origination:
              description: Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
              type: string
              enum:
                - ALLOW
                - DENY
            Authorization:
              $ref: '#/components/schemas/Authorization'
            HlsPackage:
              $ref: '#/components/schemas/HlsPackage'
            DashPackage:
              $ref: '#/components/schemas/DashPackage'
            MssPackage:
              $ref: '#/components/schemas/MssPackage'
            CmafPackage:
              $ref: '#/components/schemas/CmafPackage'
            Tags:
              description: A collection of tags associated with a resource
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateOriginEndpointRequest
      type: object
      required: []
    CreatePackagingConfigurationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: The ID of the PackagingConfiguration.
              type: string
            PackagingGroupId:
              description: The ID of a PackagingGroup.
              type: string
            Arn:
              description: The ARN of the PackagingConfiguration.
              type: string
            CmafPackage:
              description: A CMAF packaging configuration.
              $ref: '#/components/schemas/CmafPackage'
            DashPackage:
              description: A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
              $ref: '#/components/schemas/DashPackage'
            HlsPackage:
              description: An HTTP Live Streaming (HLS) packaging configuration.
              $ref: '#/components/schemas/HlsPackage'
            MssPackage:
              description: A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
              $ref: '#/components/schemas/MssPackage'
            Tags:
              description: A collection of tags associated with a resource
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreatePackagingConfigurationRequest
      type: object
      required: []
    CreatePackagingGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: The ID of the PackagingGroup.
              type: string
              pattern: \A[0-9a-zA-Z-_]+\Z
              minLength: 1
              maxLength: 256
            Arn:
              description: The ARN of the PackagingGroup.
              type: string
            DomainName:
              description: The fully qualified domain name for Assets in the PackagingGroup.
              type: string
            Authorization:
              description: CDN Authorization
              $ref: '#/components/schemas/Authorization'
            Tags:
              description: A collection of tags associated with a resource
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
            EgressAccessLogs:
              description: The configuration parameters for egress access logging.
              $ref: '#/components/schemas/LogConfiguration'
          x-stackQL-stringOnly: true
      x-title: CreatePackagingGroupRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    assets:
      name: assets
      id: aws.mediapackage.assets
      x-cfn-schema-name: Asset
      x-cfn-type-name: AWS::MediaPackage::Asset
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Asset&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::Asset"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::Asset"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/assets/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/assets/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.EgressEndpoints') as egress_endpoints,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.PackagingGroupId') as packaging_group_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(Properties, '$.SourceRoleArn') as source_role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::Asset'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.EgressEndpoints') as egress_endpoints,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.PackagingGroupId') as packaging_group_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
                JSON_EXTRACT(detail.Properties, '$.SourceArn') as source_arn,
                JSON_EXTRACT(detail.Properties, '$.SourceRoleArn') as source_role_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaPackage::Asset'
                AND detail.data__TypeName = 'AWS::MediaPackage::Asset'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'EgressEndpoints') as egress_endpoints,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'PackagingGroupId') as packaging_group_id,
                  json_extract_path_text(Properties, 'ResourceId') as resource_id,
                  json_extract_path_text(Properties, 'SourceArn') as source_arn,
                  json_extract_path_text(Properties, 'SourceRoleArn') as source_role_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::Asset'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'EgressEndpoints') as egress_endpoints,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'PackagingGroupId') as packaging_group_id,
                    json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                    json_extract_path_text(detail.Properties, 'SourceArn') as source_arn,
                    json_extract_path_text(detail.Properties, 'SourceRoleArn') as source_role_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaPackage::Asset'
                    AND detail.data__TypeName = 'AWS::MediaPackage::Asset'
                    AND listing.region = 'us-east-1'
    assets_list_only:
      name: assets_list_only
      id: aws.mediapackage.assets_list_only
      x-cfn-schema-name: Asset
      x-cfn-type-name: AWS::MediaPackage::Asset
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::Asset'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::Asset'
                AND region = 'us-east-1'
    asset_tags:
      name: asset_tags
      id: aws.mediapackage.asset_tags
      x-cfn-schema-name: Asset
      x-cfn-type-name: AWS::MediaPackage::Asset
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.EgressEndpoints') as egress_endpoints,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.PackagingGroupId') as packaging_group_id,
              JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(detail.Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(detail.Properties, '$.SourceRoleArn') as source_role_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaPackage::Asset'
              AND detail.data__TypeName = 'AWS::MediaPackage::Asset'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'EgressEndpoints') as egress_endpoints,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'PackagingGroupId') as packaging_group_id,
                json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                json_extract_path_text(detail.Properties, 'SourceArn') as source_arn,
                json_extract_path_text(detail.Properties, 'SourceRoleArn') as source_role_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaPackage::Asset'
                AND detail.data__TypeName = 'AWS::MediaPackage::Asset'
                AND listing.region = 'us-east-1'
    channels:
      name: channels
      id: aws.mediapackage.channels
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::MediaPackage::Channel
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Channel&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/channels/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/channels/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/channels/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.HlsIngest') as hls_ingest,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.EgressAccessLogs') as egress_access_logs,
              JSON_EXTRACT(Properties, '$.IngressAccessLogs') as ingress_access_logs
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::Channel'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.HlsIngest') as hls_ingest,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.EgressAccessLogs') as egress_access_logs,
                JSON_EXTRACT(detail.Properties, '$.IngressAccessLogs') as ingress_access_logs
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaPackage::Channel'
                AND detail.data__TypeName = 'AWS::MediaPackage::Channel'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'HlsIngest') as hls_ingest,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'EgressAccessLogs') as egress_access_logs,
                  json_extract_path_text(Properties, 'IngressAccessLogs') as ingress_access_logs
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::Channel'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'HlsIngest') as hls_ingest,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'EgressAccessLogs') as egress_access_logs,
                    json_extract_path_text(detail.Properties, 'IngressAccessLogs') as ingress_access_logs
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaPackage::Channel'
                    AND detail.data__TypeName = 'AWS::MediaPackage::Channel'
                    AND listing.region = 'us-east-1'
    channels_list_only:
      name: channels_list_only
      id: aws.mediapackage.channels_list_only
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::MediaPackage::Channel
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::Channel'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::Channel'
                AND region = 'us-east-1'
    channel_tags:
      name: channel_tags
      id: aws.mediapackage.channel_tags
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::MediaPackage::Channel
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.HlsIngest') as hls_ingest,
              JSON_EXTRACT(detail.Properties, '$.EgressAccessLogs') as egress_access_logs,
              JSON_EXTRACT(detail.Properties, '$.IngressAccessLogs') as ingress_access_logs
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaPackage::Channel'
              AND detail.data__TypeName = 'AWS::MediaPackage::Channel'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'HlsIngest') as hls_ingest,
                json_extract_path_text(detail.Properties, 'EgressAccessLogs') as egress_access_logs,
                json_extract_path_text(detail.Properties, 'IngressAccessLogs') as ingress_access_logs
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaPackage::Channel'
                AND detail.data__TypeName = 'AWS::MediaPackage::Channel'
                AND listing.region = 'us-east-1'
    origin_endpoints:
      name: origin_endpoints
      id: aws.mediapackage.origin_endpoints
      x-cfn-schema-name: OriginEndpoint
      x-cfn-type-name: AWS::MediaPackage::OriginEndpoint
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__OriginEndpoint&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::OriginEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::OriginEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::OriginEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/origin_endpoints/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/origin_endpoints/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/origin_endpoints/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Url') as url,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ChannelId') as channel_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Whitelist') as whitelist,
              JSON_EXTRACT(Properties, '$.StartoverWindowSeconds') as startover_window_seconds,
              JSON_EXTRACT(Properties, '$.TimeDelaySeconds') as time_delay_seconds,
              JSON_EXTRACT(Properties, '$.ManifestName') as manifest_name,
              JSON_EXTRACT(Properties, '$.Origination') as origination,
              JSON_EXTRACT(Properties, '$.Authorization') as authorization,
              JSON_EXTRACT(Properties, '$.HlsPackage') as hls_package,
              JSON_EXTRACT(Properties, '$.DashPackage') as dash_package,
              JSON_EXTRACT(Properties, '$.MssPackage') as mss_package,
              JSON_EXTRACT(Properties, '$.CmafPackage') as cmaf_package,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Url') as url,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.ChannelId') as channel_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Whitelist') as whitelist,
                JSON_EXTRACT(detail.Properties, '$.StartoverWindowSeconds') as startover_window_seconds,
                JSON_EXTRACT(detail.Properties, '$.TimeDelaySeconds') as time_delay_seconds,
                JSON_EXTRACT(detail.Properties, '$.ManifestName') as manifest_name,
                JSON_EXTRACT(detail.Properties, '$.Origination') as origination,
                JSON_EXTRACT(detail.Properties, '$.Authorization') as authorization,
                JSON_EXTRACT(detail.Properties, '$.HlsPackage') as hls_package,
                JSON_EXTRACT(detail.Properties, '$.DashPackage') as dash_package,
                JSON_EXTRACT(detail.Properties, '$.MssPackage') as mss_package,
                JSON_EXTRACT(detail.Properties, '$.CmafPackage') as cmaf_package,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
                AND detail.data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Url') as url,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'ChannelId') as channel_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Whitelist') as whitelist,
                  json_extract_path_text(Properties, 'StartoverWindowSeconds') as startover_window_seconds,
                  json_extract_path_text(Properties, 'TimeDelaySeconds') as time_delay_seconds,
                  json_extract_path_text(Properties, 'ManifestName') as manifest_name,
                  json_extract_path_text(Properties, 'Origination') as origination,
                  json_extract_path_text(Properties, 'Authorization') as authorization,
                  json_extract_path_text(Properties, 'HlsPackage') as hls_package,
                  json_extract_path_text(Properties, 'DashPackage') as dash_package,
                  json_extract_path_text(Properties, 'MssPackage') as mss_package,
                  json_extract_path_text(Properties, 'CmafPackage') as cmaf_package,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Url') as url,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'ChannelId') as channel_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Whitelist') as whitelist,
                    json_extract_path_text(detail.Properties, 'StartoverWindowSeconds') as startover_window_seconds,
                    json_extract_path_text(detail.Properties, 'TimeDelaySeconds') as time_delay_seconds,
                    json_extract_path_text(detail.Properties, 'ManifestName') as manifest_name,
                    json_extract_path_text(detail.Properties, 'Origination') as origination,
                    json_extract_path_text(detail.Properties, 'Authorization') as authorization,
                    json_extract_path_text(detail.Properties, 'HlsPackage') as hls_package,
                    json_extract_path_text(detail.Properties, 'DashPackage') as dash_package,
                    json_extract_path_text(detail.Properties, 'MssPackage') as mss_package,
                    json_extract_path_text(detail.Properties, 'CmafPackage') as cmaf_package,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
                    AND detail.data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
                    AND listing.region = 'us-east-1'
    origin_endpoints_list_only:
      name: origin_endpoints_list_only
      id: aws.mediapackage.origin_endpoints_list_only
      x-cfn-schema-name: OriginEndpoint
      x-cfn-type-name: AWS::MediaPackage::OriginEndpoint
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
                AND region = 'us-east-1'
    origin_endpoint_tags:
      name: origin_endpoint_tags
      id: aws.mediapackage.origin_endpoint_tags
      x-cfn-schema-name: OriginEndpoint
      x-cfn-type-name: AWS::MediaPackage::OriginEndpoint
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Url') as url,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.ChannelId') as channel_id,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Whitelist') as whitelist,
              JSON_EXTRACT(detail.Properties, '$.StartoverWindowSeconds') as startover_window_seconds,
              JSON_EXTRACT(detail.Properties, '$.TimeDelaySeconds') as time_delay_seconds,
              JSON_EXTRACT(detail.Properties, '$.ManifestName') as manifest_name,
              JSON_EXTRACT(detail.Properties, '$.Origination') as origination,
              JSON_EXTRACT(detail.Properties, '$.Authorization') as authorization,
              JSON_EXTRACT(detail.Properties, '$.HlsPackage') as hls_package,
              JSON_EXTRACT(detail.Properties, '$.DashPackage') as dash_package,
              JSON_EXTRACT(detail.Properties, '$.MssPackage') as mss_package,
              JSON_EXTRACT(detail.Properties, '$.CmafPackage') as cmaf_package
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
              AND detail.data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Url') as url,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'ChannelId') as channel_id,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Whitelist') as whitelist,
                json_extract_path_text(detail.Properties, 'StartoverWindowSeconds') as startover_window_seconds,
                json_extract_path_text(detail.Properties, 'TimeDelaySeconds') as time_delay_seconds,
                json_extract_path_text(detail.Properties, 'ManifestName') as manifest_name,
                json_extract_path_text(detail.Properties, 'Origination') as origination,
                json_extract_path_text(detail.Properties, 'Authorization') as authorization,
                json_extract_path_text(detail.Properties, 'HlsPackage') as hls_package,
                json_extract_path_text(detail.Properties, 'DashPackage') as dash_package,
                json_extract_path_text(detail.Properties, 'MssPackage') as mss_package,
                json_extract_path_text(detail.Properties, 'CmafPackage') as cmaf_package
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
                AND detail.data__TypeName = 'AWS::MediaPackage::OriginEndpoint'
                AND listing.region = 'us-east-1'
    packaging_configurations:
      name: packaging_configurations
      id: aws.mediapackage.packaging_configurations
      x-cfn-schema-name: PackagingConfiguration
      x-cfn-type-name: AWS::MediaPackage::PackagingConfiguration
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PackagingConfiguration&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::PackagingConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::PackagingConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/packaging_configurations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/packaging_configurations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.PackagingGroupId') as packaging_group_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CmafPackage') as cmaf_package,
              JSON_EXTRACT(Properties, '$.DashPackage') as dash_package,
              JSON_EXTRACT(Properties, '$.HlsPackage') as hls_package,
              JSON_EXTRACT(Properties, '$.MssPackage') as mss_package,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.PackagingGroupId') as packaging_group_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CmafPackage') as cmaf_package,
                JSON_EXTRACT(detail.Properties, '$.DashPackage') as dash_package,
                JSON_EXTRACT(detail.Properties, '$.HlsPackage') as hls_package,
                JSON_EXTRACT(detail.Properties, '$.MssPackage') as mss_package,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
                AND detail.data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'PackagingGroupId') as packaging_group_id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CmafPackage') as cmaf_package,
                  json_extract_path_text(Properties, 'DashPackage') as dash_package,
                  json_extract_path_text(Properties, 'HlsPackage') as hls_package,
                  json_extract_path_text(Properties, 'MssPackage') as mss_package,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'PackagingGroupId') as packaging_group_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CmafPackage') as cmaf_package,
                    json_extract_path_text(detail.Properties, 'DashPackage') as dash_package,
                    json_extract_path_text(detail.Properties, 'HlsPackage') as hls_package,
                    json_extract_path_text(detail.Properties, 'MssPackage') as mss_package,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
                    AND detail.data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
                    AND listing.region = 'us-east-1'
    packaging_configurations_list_only:
      name: packaging_configurations_list_only
      id: aws.mediapackage.packaging_configurations_list_only
      x-cfn-schema-name: PackagingConfiguration
      x-cfn-type-name: AWS::MediaPackage::PackagingConfiguration
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
                AND region = 'us-east-1'
    packaging_configuration_tags:
      name: packaging_configuration_tags
      id: aws.mediapackage.packaging_configuration_tags
      x-cfn-schema-name: PackagingConfiguration
      x-cfn-type-name: AWS::MediaPackage::PackagingConfiguration
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.PackagingGroupId') as packaging_group_id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CmafPackage') as cmaf_package,
              JSON_EXTRACT(detail.Properties, '$.DashPackage') as dash_package,
              JSON_EXTRACT(detail.Properties, '$.HlsPackage') as hls_package,
              JSON_EXTRACT(detail.Properties, '$.MssPackage') as mss_package
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
              AND detail.data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'PackagingGroupId') as packaging_group_id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CmafPackage') as cmaf_package,
                json_extract_path_text(detail.Properties, 'DashPackage') as dash_package,
                json_extract_path_text(detail.Properties, 'HlsPackage') as hls_package,
                json_extract_path_text(detail.Properties, 'MssPackage') as mss_package
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
                AND detail.data__TypeName = 'AWS::MediaPackage::PackagingConfiguration'
                AND listing.region = 'us-east-1'
    packaging_groups:
      name: packaging_groups
      id: aws.mediapackage.packaging_groups
      x-cfn-schema-name: PackagingGroup
      x-cfn-type-name: AWS::MediaPackage::PackagingGroup
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PackagingGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::PackagingGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::PackagingGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaPackage::PackagingGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/packaging_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/packaging_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/packaging_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.Authorization') as authorization,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.EgressAccessLogs') as egress_access_logs
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::PackagingGroup'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(detail.Properties, '$.Authorization') as authorization,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.EgressAccessLogs') as egress_access_logs
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaPackage::PackagingGroup'
                AND detail.data__TypeName = 'AWS::MediaPackage::PackagingGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'Authorization') as authorization,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'EgressAccessLogs') as egress_access_logs
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackage::PackagingGroup'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                    json_extract_path_text(detail.Properties, 'Authorization') as authorization,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'EgressAccessLogs') as egress_access_logs
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaPackage::PackagingGroup'
                    AND detail.data__TypeName = 'AWS::MediaPackage::PackagingGroup'
                    AND listing.region = 'us-east-1'
    packaging_groups_list_only:
      name: packaging_groups_list_only
      id: aws.mediapackage.packaging_groups_list_only
      x-cfn-schema-name: PackagingGroup
      x-cfn-type-name: AWS::MediaPackage::PackagingGroup
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::PackagingGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackage::PackagingGroup'
                AND region = 'us-east-1'
    packaging_group_tags:
      name: packaging_group_tags
      id: aws.mediapackage.packaging_group_tags
      x-cfn-schema-name: PackagingGroup
      x-cfn-type-name: AWS::MediaPackage::PackagingGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(detail.Properties, '$.Authorization') as authorization,
              JSON_EXTRACT(detail.Properties, '$.EgressAccessLogs') as egress_access_logs
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaPackage::PackagingGroup'
              AND detail.data__TypeName = 'AWS::MediaPackage::PackagingGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                json_extract_path_text(detail.Properties, 'Authorization') as authorization,
                json_extract_path_text(detail.Properties, 'EgressAccessLogs') as egress_access_logs
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaPackage::PackagingGroup'
                AND detail.data__TypeName = 'AWS::MediaPackage::PackagingGroup'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Asset&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAsset
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAssetRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Channel&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateChannel
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__OriginEndpoint&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateOriginEndpoint
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateOriginEndpointRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PackagingConfiguration&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePackagingConfiguration
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePackagingConfigurationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PackagingGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePackagingGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePackagingGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
