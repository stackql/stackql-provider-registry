openapi: 3.0.0
info:
  title: Athena
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Arn:
      description: The Amazon Resource Name (ARN) of the specified capacity reservation
      type: string
    Tag:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    WorkgroupName:
      pattern: '[a-zA-Z0-9._-]{1,128}'
      type: string
    WorkgroupNames:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/WorkgroupName'
    CapacityAssignment:
      type: object
      properties:
        WorkgroupNames:
          $ref: '#/components/schemas/WorkgroupNames'
      required:
        - WorkgroupNames
      additionalProperties: false
    CapacityAssignments:
      description: List of capacity assignments
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/CapacityAssignment'
    CapacityAssignmentConfiguration:
      description: Assignment configuration to assign workgroups to a reservation
      type: object
      properties:
        CapacityAssignments:
          $ref: '#/components/schemas/CapacityAssignments'
      required:
        - CapacityAssignments
      additionalProperties: false
    CapacityReservationStatus:
      type: string
      enum:
        - PENDING
        - ACTIVE
        - CANCELLING
        - CANCELLED
        - FAILED
        - UPDATE_PENDING
    CapacityReservation:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        Name:
          description: The reservation name.
          pattern: '[a-zA-Z0-9._-]{1,128}'
          type: string
        Status:
          description: The status of the reservation.
          $ref: '#/components/schemas/CapacityReservationStatus'
        TargetDpus:
          description: The number of DPUs to request to be allocated to the reservation.
          type: integer
          format: int64
          minimum: 1
        AllocatedDpus:
          description: The number of DPUs Athena has provisioned and allocated for the reservation
          type: integer
          format: int64
          minimum: 0
        CapacityAssignmentConfiguration:
          $ref: '#/components/schemas/CapacityAssignmentConfiguration'
        CreationTime:
          description: The date and time the reservation was created.
          type: string
        LastSuccessfulAllocationTime:
          description: The timestamp when the last successful allocated was made
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
        - TargetDpus
      x-stackql-resource-name: capacity_reservation
      description: Resource schema for AWS::Athena::CapacityReservation
      x-type-name: AWS::Athena::CapacityReservation
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Name
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Arn
        - Status
        - AllocatedDpus
        - CreationTime
        - LastSuccessfulAllocationTime
      x-required-properties:
        - Name
        - TargetDpus
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - athena:CreateCapacityReservation
          - athena:PutCapacityAssignmentConfiguration
          - athena:GetCapacityReservation
          - athena:TagResource
        read:
          - athena:GetCapacityReservation
          - athena:GetCapacityAssignmentConfiguration
          - athena:ListTagsForResource
        update:
          - athena:UpdateCapacityReservation
          - athena:PutCapacityAssignmentConfiguration
          - athena:GetCapacityReservation
          - athena:TagResource
          - athena:UntagResource
        delete:
          - athena:CancelCapacityReservation
          - athena:GetCapacityReservation
          - athena:DeleteCapacityReservation
        list:
          - athena:ListCapacityReservations
          - athena:GetCapacityReservation
    Tags:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/Tag'
    DataCatalog:
      type: object
      properties:
        Name:
          description: 'The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters. '
          type: string
          minLength: 1
          maxLength: 256
        Description:
          description: 'A description of the data catalog to be created. '
          type: string
          minLength: 1
          maxLength: 1024
        Parameters:
          description: 'Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type. '
          type: object
          x-patternProperties:
            .*:
              type: string
              maxLength: 51200
          additionalProperties: false
        Tags:
          description: 'A list of comma separated tags to add to the data catalog that is created. '
          $ref: '#/components/schemas/Tags'
        Type:
          description: 'The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external hive metastore. '
          type: string
          enum:
            - LAMBDA
            - GLUE
            - HIVE
      required:
        - Name
        - Type
      x-stackql-resource-name: data_catalog
      description: Resource schema for AWS::Athena::DataCatalog
      x-type-name: AWS::Athena::DataCatalog
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
      x-required-properties:
        - Name
        - Type
      x-taggable: true
      x-required-permissions:
        create:
          - athena:CreateDataCatalog
          - athena:TagResource
        read:
          - athena:GetDataCatalog
          - athena:ListTagsForResource
        update:
          - athena:UpdateDataCatalog
          - athena:TagResource
          - athena:GetDataCatalog
          - athena:UntagResource
          - athena:ListTagsForResource
        delete:
          - athena:DeleteDataCatalog
        list:
          - athena:ListDataCatalog
    NamedQuery:
      type: object
      properties:
        Name:
          description: The query name.
          type: string
          minLength: 1
          maxLength: 128
        Database:
          description: The database to which the query belongs.
          type: string
          minLength: 1
          maxLength: 255
        Description:
          description: The query description.
          type: string
          minLength: 1
          maxLength: 1024
        QueryString:
          description: The contents of the query with all query statements.
          type: string
          minLength: 1
          maxLength: 262144
        WorkGroup:
          description: The name of the workgroup that contains the named query.
          type: string
          minLength: 1
          maxLength: 128
        NamedQueryId:
          description: The unique ID of the query.
          type: string
      required:
        - Database
        - QueryString
      x-stackql-resource-name: named_query
      description: Resource schema for AWS::Athena::NamedQuery
      x-type-name: AWS::Athena::NamedQuery
      x-stackql-primary-identifier:
        - NamedQueryId
      x-create-only-properties:
        - Name
        - Database
        - Description
        - QueryString
        - WorkGroup
      x-read-only-properties:
        - NamedQueryId
      x-required-properties:
        - Database
        - QueryString
      x-required-permissions:
        create:
          - athena:CreateNamedQuery
        read:
          - athena:GetNamedQuery
        list:
          - athena:ListNamedQueries
        delete:
          - athena:DeleteNamedQuery
    PreparedStatement:
      type: object
      properties:
        StatementName:
          description: The name of the prepared statement.
          type: string
          minLength: 1
          maxLength: 256
        WorkGroup:
          description: The name of the workgroup to which the prepared statement belongs.
          type: string
          minLength: 1
          maxLength: 128
        Description:
          description: The description of the prepared statement.
          type: string
          minLength: 1
          maxLength: 1024
        QueryStatement:
          description: The query string for the prepared statement.
          type: string
          minLength: 1
          maxLength: 262144
      required:
        - StatementName
        - WorkGroup
        - QueryStatement
      x-stackql-resource-name: prepared_statement
      description: Resource schema for AWS::Athena::PreparedStatement
      x-type-name: AWS::Athena::PreparedStatement
      x-stackql-primary-identifier:
        - StatementName
        - WorkGroup
      x-create-only-properties:
        - StatementName
        - WorkGroup
      x-required-properties:
        - StatementName
        - WorkGroup
        - QueryStatement
      x-required-permissions:
        create:
          - athena:CreatePreparedStatement
          - athena:GetPreparedStatement
        read:
          - athena:GetPreparedStatement
        update:
          - athena:UpdatePreparedStatement
        delete:
          - athena:DeletePreparedStatement
          - athena:GetPreparedStatement
        list:
          - athena:ListPreparedStatements
    SelectedEngineVersion:
      description: The engine version requested by the user. Possible values are determined by the output of ListEngineVersions, including Auto. The default is Auto.
      type: string
    EffectiveEngineVersion:
      description: Read only. The engine version on which the query runs. If the user requests a valid engine version other than Auto, the effective engine version is the same as the engine version that the user requested. If the user requests Auto, the effective engine version is chosen by Athena. When a request to update the engine version is made by a CreateWorkGroup or UpdateWorkGroup operation, the EffectiveEngineVersion field is ignored.
      type: string
    EngineVersion:
      description: The Athena engine version for running queries.
      type: object
      properties:
        SelectedEngineVersion:
          $ref: '#/components/schemas/SelectedEngineVersion'
        EffectiveEngineVersion:
          $ref: '#/components/schemas/EffectiveEngineVersion'
      additionalProperties: false
    BytesScannedCutoffPerQuery:
      description: The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.
      type: integer
      format: int64
      minimum: 10000000
    EnforceWorkGroupConfiguration:
      description: If set to "true", the settings for the workgroup override client-side settings. If set to "false", client-side settings are used
      type: boolean
    PublishCloudWatchMetricsEnabled:
      description: Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.
      type: boolean
    RequesterPaysEnabled:
      description: 'If set to true, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. '
      type: boolean
    OutputLocation:
      description: 'The location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using WorkGroupConfiguration'
      type: string
    KmsKey:
      description: 'For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. '
      type: string
    EncryptionOption:
      description: Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE-S3), server-side encryption with KMS-managed keys (SSE-KMS), or client-side encryption with KMS-managed keys (CSE-KMS) is used.
      type: string
      enum:
        - SSE_S3
        - SSE_KMS
        - CSE_KMS
    RemoveBytesScannedCutoffPerQuery:
      description: Indicates that the data usage control limit per query is removed.
      type: boolean
    EncryptionConfiguration:
      description: If query results are encrypted in Amazon S3, indicates the encryption option used (for example, SSE-KMS or CSE-KMS) and key information.
      type: object
      properties:
        EncryptionOption:
          $ref: '#/components/schemas/EncryptionOption'
        KmsKey:
          $ref: '#/components/schemas/KmsKey'
      required:
        - EncryptionOption
      additionalProperties: false
    RemoveEncryptionConfiguration:
      type: boolean
    AdditionalConfiguration:
      description: Additional Configuration that are passed to Athena Spark Calculations running in this workgroup
      type: string
    ExecutionRole:
      description: Execution Role ARN required to run Athena Spark Calculations
      type: string
    RemoveOutputLocation:
      type: boolean
    ExpectedBucketOwner:
      description: The AWS account ID of the owner of S3 bucket where query results are stored
      type: string
    RemoveExpectedBucketOwner:
      type: boolean
    S3AclOption:
      description: The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is BUCKET_OWNER_FULL_CONTROL
      type: string
      enum:
        - BUCKET_OWNER_FULL_CONTROL
    AclConfiguration:
      description: Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results
      type: object
      properties:
        S3AclOption:
          $ref: '#/components/schemas/S3AclOption'
      required:
        - S3AclOption
      additionalProperties: false
    RemoveAclConfiguration:
      type: boolean
    CustomerContentEncryptionConfiguration:
      description: Indicates the KMS key for encrypting notebook content.
      type: object
      properties:
        KmsKey:
          $ref: '#/components/schemas/KmsKey'
      required:
        - KmsKey
      additionalProperties: false
    RemoveCustomerContentEncryptionConfiguration:
      type: boolean
    ResultConfiguration:
      description: |
        The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
      type: object
      properties:
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
        OutputLocation:
          $ref: '#/components/schemas/OutputLocation'
        ExpectedBucketOwner:
          $ref: '#/components/schemas/ExpectedBucketOwner'
        AclConfiguration:
          $ref: '#/components/schemas/AclConfiguration'
      additionalProperties: false
    ResultConfigurationUpdates:
      description: 'The result configuration information about the queries in this workgroup that will be updated. Includes the updated results location and an updated option for encrypting query results. '
      type: object
      properties:
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
        OutputLocation:
          $ref: '#/components/schemas/OutputLocation'
        ExpectedBucketOwner:
          $ref: '#/components/schemas/ExpectedBucketOwner'
        AclConfiguration:
          $ref: '#/components/schemas/AclConfiguration'
        RemoveEncryptionConfiguration:
          $ref: '#/components/schemas/RemoveEncryptionConfiguration'
        RemoveOutputLocation:
          $ref: '#/components/schemas/RemoveOutputLocation'
        RemoveExpectedBucketOwner:
          $ref: '#/components/schemas/RemoveExpectedBucketOwner'
        RemoveAclConfiguration:
          $ref: '#/components/schemas/RemoveAclConfiguration'
      additionalProperties: false
    WorkGroupConfiguration:
      type: object
      properties:
        BytesScannedCutoffPerQuery:
          $ref: '#/components/schemas/BytesScannedCutoffPerQuery'
        EnforceWorkGroupConfiguration:
          $ref: '#/components/schemas/EnforceWorkGroupConfiguration'
        PublishCloudWatchMetricsEnabled:
          $ref: '#/components/schemas/PublishCloudWatchMetricsEnabled'
        RequesterPaysEnabled:
          $ref: '#/components/schemas/RequesterPaysEnabled'
        ResultConfiguration:
          $ref: '#/components/schemas/ResultConfiguration'
        EngineVersion:
          $ref: '#/components/schemas/EngineVersion'
        AdditionalConfiguration:
          $ref: '#/components/schemas/AdditionalConfiguration'
        ExecutionRole:
          $ref: '#/components/schemas/ExecutionRole'
        CustomerContentEncryptionConfiguration:
          $ref: '#/components/schemas/CustomerContentEncryptionConfiguration'
      additionalProperties: false
    WorkGroupConfigurationUpdates:
      type: object
      description: 'The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified. '
      properties:
        BytesScannedCutoffPerQuery:
          $ref: '#/components/schemas/BytesScannedCutoffPerQuery'
        EnforceWorkGroupConfiguration:
          $ref: '#/components/schemas/EnforceWorkGroupConfiguration'
        PublishCloudWatchMetricsEnabled:
          $ref: '#/components/schemas/PublishCloudWatchMetricsEnabled'
        RequesterPaysEnabled:
          $ref: '#/components/schemas/RequesterPaysEnabled'
        ResultConfigurationUpdates:
          $ref: '#/components/schemas/ResultConfigurationUpdates'
        RemoveBytesScannedCutoffPerQuery:
          $ref: '#/components/schemas/RemoveBytesScannedCutoffPerQuery'
        EngineVersion:
          $ref: '#/components/schemas/EngineVersion'
        AdditionalConfiguration:
          $ref: '#/components/schemas/AdditionalConfiguration'
        ExecutionRole:
          $ref: '#/components/schemas/ExecutionRole'
        CustomerContentEncryptionConfiguration:
          $ref: '#/components/schemas/CustomerContentEncryptionConfiguration'
        RemoveCustomerContentEncryptionConfiguration:
          $ref: '#/components/schemas/RemoveCustomerContentEncryptionConfiguration'
      additionalProperties: false
    WorkGroup:
      type: object
      properties:
        Name:
          description: The workGroup name.
          pattern: '[a-zA-Z0-9._-]{1,128}'
          type: string
        Description:
          description: The workgroup description.
          type: string
          minLength: 0
          maxLength: 1024
        Tags:
          description: One or more tags, separated by commas, that you want to attach to the workgroup as you create it
          $ref: '#/components/schemas/Tags'
        WorkGroupConfiguration:
          description: The workgroup configuration
          $ref: '#/components/schemas/WorkGroupConfiguration'
        WorkGroupConfigurationUpdates:
          description: The workgroup configuration update object
          $ref: '#/components/schemas/WorkGroupConfigurationUpdates'
        CreationTime:
          description: The date and time the workgroup was created.
          type: string
        State:
          description: 'The state of the workgroup: ENABLED or DISABLED.'
          type: string
          enum:
            - ENABLED
            - DISABLED
        RecursiveDeleteOption:
          description: The option to delete the workgroup and its contents even if the workgroup contains any named queries.
          type: boolean
      required:
        - Name
      x-stackql-resource-name: work_group
      description: Resource schema for AWS::Athena::WorkGroup
      x-type-name: AWS::Athena::WorkGroup
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
      x-write-only-properties:
        - WorkGroupConfigurationUpdates
        - RecursiveDeleteOption
        - WorkGroupConfiguration/AdditionalConfiguration
      x-read-only-properties:
        - CreationTime
        - WorkGroupConfiguration/EngineVersion/EffectiveEngineVersion
        - WorkGroupConfigurationUpdates/EngineVersion/EffectiveEngineVersion
      x-required-properties:
        - Name
      x-taggable: true
      x-required-permissions:
        create:
          - athena:CreateWorkGroup
          - athena:TagResource
          - iam:PassRole
          - s3:GetBucketLocation
          - s3:GetObject
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:AbortMultipartUpload
          - s3:PutObject
          - s3:ListMultipartUploadParts
          - kms:Decrypt
          - kms:GenerateDataKey
        read:
          - athena:GetWorkGroup
          - athena:ListTagsForResource
        list:
          - athena:ListWorkGroups
        delete:
          - athena:DeleteWorkGroup
          - athena:GetWorkGroup
          - athena:UntagResource
        update:
          - athena:UpdateWorkGroup
          - athena:TagResource
          - athena:UntagResource
          - iam:PassRole
          - s3:GetBucketLocation
          - s3:GetObject
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:AbortMultipartUpload
          - s3:PutObject
          - s3:ListMultipartUploadParts
          - kms:Decrypt
          - kms:GenerateDataKey
    CreateCapacityReservationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              $ref: '#/components/schemas/Arn'
            Name:
              description: The reservation name.
              pattern: '[a-zA-Z0-9._-]{1,128}'
              type: string
            Status:
              description: The status of the reservation.
              $ref: '#/components/schemas/CapacityReservationStatus'
            TargetDpus:
              description: The number of DPUs to request to be allocated to the reservation.
              type: integer
              format: int64
              minimum: 1
            AllocatedDpus:
              description: The number of DPUs Athena has provisioned and allocated for the reservation
              type: integer
              format: int64
              minimum: 0
            CapacityAssignmentConfiguration:
              $ref: '#/components/schemas/CapacityAssignmentConfiguration'
            CreationTime:
              description: The date and time the reservation was created.
              type: string
            LastSuccessfulAllocationTime:
              description: The timestamp when the last successful allocated was made
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateCapacityReservationRequest
      type: object
      required: []
    CreateDataCatalogRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: 'The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters. '
              type: string
              minLength: 1
              maxLength: 256
            Description:
              description: 'A description of the data catalog to be created. '
              type: string
              minLength: 1
              maxLength: 1024
            Parameters:
              description: 'Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type. '
              type: object
              x-patternProperties:
                .*:
                  type: string
                  maxLength: 51200
              additionalProperties: false
            Tags:
              description: 'A list of comma separated tags to add to the data catalog that is created. '
              $ref: '#/components/schemas/Tags'
            Type:
              description: 'The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external hive metastore. '
              type: string
              enum:
                - LAMBDA
                - GLUE
                - HIVE
          x-stackQL-stringOnly: true
      x-title: CreateDataCatalogRequest
      type: object
      required: []
    CreateNamedQueryRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: The query name.
              type: string
              minLength: 1
              maxLength: 128
            Database:
              description: The database to which the query belongs.
              type: string
              minLength: 1
              maxLength: 255
            Description:
              description: The query description.
              type: string
              minLength: 1
              maxLength: 1024
            QueryString:
              description: The contents of the query with all query statements.
              type: string
              minLength: 1
              maxLength: 262144
            WorkGroup:
              description: The name of the workgroup that contains the named query.
              type: string
              minLength: 1
              maxLength: 128
            NamedQueryId:
              description: The unique ID of the query.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateNamedQueryRequest
      type: object
      required: []
    CreatePreparedStatementRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            StatementName:
              description: The name of the prepared statement.
              type: string
              minLength: 1
              maxLength: 256
            WorkGroup:
              description: The name of the workgroup to which the prepared statement belongs.
              type: string
              minLength: 1
              maxLength: 128
            Description:
              description: The description of the prepared statement.
              type: string
              minLength: 1
              maxLength: 1024
            QueryStatement:
              description: The query string for the prepared statement.
              type: string
              minLength: 1
              maxLength: 262144
          x-stackQL-stringOnly: true
      x-title: CreatePreparedStatementRequest
      type: object
      required: []
    CreateWorkGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: The workGroup name.
              pattern: '[a-zA-Z0-9._-]{1,128}'
              type: string
            Description:
              description: The workgroup description.
              type: string
              minLength: 0
              maxLength: 1024
            Tags:
              description: One or more tags, separated by commas, that you want to attach to the workgroup as you create it
              $ref: '#/components/schemas/Tags'
            WorkGroupConfiguration:
              description: The workgroup configuration
              $ref: '#/components/schemas/WorkGroupConfiguration'
            WorkGroupConfigurationUpdates:
              description: The workgroup configuration update object
              $ref: '#/components/schemas/WorkGroupConfigurationUpdates'
            CreationTime:
              description: The date and time the workgroup was created.
              type: string
            State:
              description: 'The state of the workgroup: ENABLED or DISABLED.'
              type: string
              enum:
                - ENABLED
                - DISABLED
            RecursiveDeleteOption:
              description: The option to delete the workgroup and its contents even if the workgroup contains any named queries.
              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreateWorkGroupRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    capacity_reservations:
      name: capacity_reservations
      id: aws.athena.capacity_reservations
      x-cfn-schema-name: CapacityReservation
      x-cfn-type-name: AWS::Athena::CapacityReservation
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__CapacityReservation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::CapacityReservation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::CapacityReservation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::CapacityReservation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/capacity_reservations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/capacity_reservations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/capacity_reservations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.TargetDpus') as target_dpus,
              JSON_EXTRACT(Properties, '$.AllocatedDpus') as allocated_dpus,
              JSON_EXTRACT(Properties, '$.CapacityAssignmentConfiguration') as capacity_assignment_configuration,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.LastSuccessfulAllocationTime') as last_successful_allocation_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::CapacityReservation'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.TargetDpus') as target_dpus,
                JSON_EXTRACT(detail.Properties, '$.AllocatedDpus') as allocated_dpus,
                JSON_EXTRACT(detail.Properties, '$.CapacityAssignmentConfiguration') as capacity_assignment_configuration,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.LastSuccessfulAllocationTime') as last_successful_allocation_time,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Athena::CapacityReservation'
                AND detail.data__TypeName = 'AWS::Athena::CapacityReservation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'TargetDpus') as target_dpus,
                  json_extract_path_text(Properties, 'AllocatedDpus') as allocated_dpus,
                  json_extract_path_text(Properties, 'CapacityAssignmentConfiguration') as capacity_assignment_configuration,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'LastSuccessfulAllocationTime') as last_successful_allocation_time,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::CapacityReservation'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'TargetDpus') as target_dpus,
                    json_extract_path_text(detail.Properties, 'AllocatedDpus') as allocated_dpus,
                    json_extract_path_text(detail.Properties, 'CapacityAssignmentConfiguration') as capacity_assignment_configuration,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'LastSuccessfulAllocationTime') as last_successful_allocation_time,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Athena::CapacityReservation'
                    AND detail.data__TypeName = 'AWS::Athena::CapacityReservation'
                    AND listing.region = 'us-east-1'
    capacity_reservations_list_only:
      name: capacity_reservations_list_only
      id: aws.athena.capacity_reservations_list_only
      x-cfn-schema-name: CapacityReservation
      x-cfn-type-name: AWS::Athena::CapacityReservation
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::CapacityReservation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::CapacityReservation'
                AND region = 'us-east-1'
    capacity_reservation_tags:
      name: capacity_reservation_tags
      id: aws.athena.capacity_reservation_tags
      x-cfn-schema-name: CapacityReservation
      x-cfn-type-name: AWS::Athena::CapacityReservation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.TargetDpus') as target_dpus,
              JSON_EXTRACT(detail.Properties, '$.AllocatedDpus') as allocated_dpus,
              JSON_EXTRACT(detail.Properties, '$.CapacityAssignmentConfiguration') as capacity_assignment_configuration,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.LastSuccessfulAllocationTime') as last_successful_allocation_time
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Athena::CapacityReservation'
              AND detail.data__TypeName = 'AWS::Athena::CapacityReservation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'TargetDpus') as target_dpus,
                json_extract_path_text(detail.Properties, 'AllocatedDpus') as allocated_dpus,
                json_extract_path_text(detail.Properties, 'CapacityAssignmentConfiguration') as capacity_assignment_configuration,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'LastSuccessfulAllocationTime') as last_successful_allocation_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Athena::CapacityReservation'
                AND detail.data__TypeName = 'AWS::Athena::CapacityReservation'
                AND listing.region = 'us-east-1'
    data_catalogs:
      name: data_catalogs
      id: aws.athena.data_catalogs
      x-cfn-schema-name: DataCatalog
      x-cfn-type-name: AWS::Athena::DataCatalog
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DataCatalog&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::DataCatalog"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::DataCatalog"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::DataCatalog"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/data_catalogs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/data_catalogs/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/data_catalogs/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::DataCatalog'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Type') as type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Athena::DataCatalog'
                AND detail.data__TypeName = 'AWS::Athena::DataCatalog'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Parameters') as parameters,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Type') as type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::DataCatalog'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Parameters') as parameters,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Type') as type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Athena::DataCatalog'
                    AND detail.data__TypeName = 'AWS::Athena::DataCatalog'
                    AND listing.region = 'us-east-1'
    data_catalogs_list_only:
      name: data_catalogs_list_only
      id: aws.athena.data_catalogs_list_only
      x-cfn-schema-name: DataCatalog
      x-cfn-type-name: AWS::Athena::DataCatalog
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::DataCatalog'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::DataCatalog'
                AND region = 'us-east-1'
    data_catalog_tags:
      name: data_catalog_tags
      id: aws.athena.data_catalog_tags
      x-cfn-schema-name: DataCatalog
      x-cfn-type-name: AWS::Athena::DataCatalog
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(detail.Properties, '$.Type') as type
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Athena::DataCatalog'
              AND detail.data__TypeName = 'AWS::Athena::DataCatalog'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Parameters') as parameters,
                json_extract_path_text(detail.Properties, 'Type') as type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Athena::DataCatalog'
                AND detail.data__TypeName = 'AWS::Athena::DataCatalog'
                AND listing.region = 'us-east-1'
    named_queries:
      name: named_queries
      id: aws.athena.named_queries
      x-cfn-schema-name: NamedQuery
      x-cfn-type-name: AWS::Athena::NamedQuery
      x-identifiers:
        - NamedQueryId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__NamedQuery&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::NamedQuery"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::NamedQuery"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/named_queries/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/named_queries/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Database') as _database,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.QueryString') as query_string,
              JSON_EXTRACT(Properties, '$.WorkGroup') as work_group,
              JSON_EXTRACT(Properties, '$.NamedQueryId') as named_query_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::NamedQuery'
              AND data__Identifier = '<NamedQueryId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Database') as _database,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.QueryString') as query_string,
                JSON_EXTRACT(detail.Properties, '$.WorkGroup') as work_group,
                JSON_EXTRACT(detail.Properties, '$.NamedQueryId') as named_query_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Athena::NamedQuery'
                AND detail.data__TypeName = 'AWS::Athena::NamedQuery'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Database') as _database,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'QueryString') as query_string,
                  json_extract_path_text(Properties, 'WorkGroup') as work_group,
                  json_extract_path_text(Properties, 'NamedQueryId') as named_query_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::NamedQuery'
                  AND data__Identifier = '<NamedQueryId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Database') as _database,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'QueryString') as query_string,
                    json_extract_path_text(detail.Properties, 'WorkGroup') as work_group,
                    json_extract_path_text(detail.Properties, 'NamedQueryId') as named_query_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Athena::NamedQuery'
                    AND detail.data__TypeName = 'AWS::Athena::NamedQuery'
                    AND listing.region = 'us-east-1'
    named_queries_list_only:
      name: named_queries_list_only
      id: aws.athena.named_queries_list_only
      x-cfn-schema-name: NamedQuery
      x-cfn-type-name: AWS::Athena::NamedQuery
      x-identifiers:
        - NamedQueryId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NamedQueryId') as named_query_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::NamedQuery'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NamedQueryId') as named_query_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::NamedQuery'
                AND region = 'us-east-1'
    prepared_statements:
      name: prepared_statements
      id: aws.athena.prepared_statements
      x-cfn-schema-name: PreparedStatement
      x-cfn-type-name: AWS::Athena::PreparedStatement
      x-identifiers:
        - StatementName
        - WorkGroup
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PreparedStatement&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::PreparedStatement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::PreparedStatement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::PreparedStatement"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/prepared_statements/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/prepared_statements/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/prepared_statements/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.StatementName') as statement_name,
              JSON_EXTRACT(Properties, '$.WorkGroup') as work_group,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.QueryStatement') as query_statement
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::PreparedStatement'
              AND data__Identifier = '<StatementName>|<WorkGroup>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.StatementName') as statement_name,
                JSON_EXTRACT(detail.Properties, '$.WorkGroup') as work_group,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.QueryStatement') as query_statement
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Athena::PreparedStatement'
                AND detail.data__TypeName = 'AWS::Athena::PreparedStatement'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'StatementName') as statement_name,
                  json_extract_path_text(Properties, 'WorkGroup') as work_group,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'QueryStatement') as query_statement
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::PreparedStatement'
                  AND data__Identifier = '<StatementName>|<WorkGroup>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'StatementName') as statement_name,
                    json_extract_path_text(detail.Properties, 'WorkGroup') as work_group,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'QueryStatement') as query_statement
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Athena::PreparedStatement'
                    AND detail.data__TypeName = 'AWS::Athena::PreparedStatement'
                    AND listing.region = 'us-east-1'
    prepared_statements_list_only:
      name: prepared_statements_list_only
      id: aws.athena.prepared_statements_list_only
      x-cfn-schema-name: PreparedStatement
      x-cfn-type-name: AWS::Athena::PreparedStatement
      x-identifiers:
        - StatementName
        - WorkGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StatementName') as statement_name,
              JSON_EXTRACT(Properties, '$.WorkGroup') as work_group
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::PreparedStatement'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'StatementName') as statement_name,
                json_extract_path_text(Properties, 'WorkGroup') as work_group
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::PreparedStatement'
                AND region = 'us-east-1'
    work_groups:
      name: work_groups
      id: aws.athena.work_groups
      x-cfn-schema-name: WorkGroup
      x-cfn-type-name: AWS::Athena::WorkGroup
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__WorkGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::WorkGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::WorkGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Athena::WorkGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/work_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/work_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/work_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.WorkGroupConfiguration') as work_group_configuration,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates') as work_group_configuration_updates,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.RecursiveDeleteOption') as recursive_delete_option
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::WorkGroup'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.WorkGroupConfiguration') as work_group_configuration,
                JSON_EXTRACT(detail.Properties, '$.WorkGroupConfigurationUpdates') as work_group_configuration_updates,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.RecursiveDeleteOption') as recursive_delete_option
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Athena::WorkGroup'
                AND detail.data__TypeName = 'AWS::Athena::WorkGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'WorkGroupConfiguration') as work_group_configuration,
                  json_extract_path_text(Properties, 'WorkGroupConfigurationUpdates') as work_group_configuration_updates,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'RecursiveDeleteOption') as recursive_delete_option
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::WorkGroup'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'WorkGroupConfiguration') as work_group_configuration,
                    json_extract_path_text(detail.Properties, 'WorkGroupConfigurationUpdates') as work_group_configuration_updates,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'RecursiveDeleteOption') as recursive_delete_option
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Athena::WorkGroup'
                    AND detail.data__TypeName = 'AWS::Athena::WorkGroup'
                    AND listing.region = 'us-east-1'
    work_groups_list_only:
      name: work_groups_list_only
      id: aws.athena.work_groups_list_only
      x-cfn-schema-name: WorkGroup
      x-cfn-type-name: AWS::Athena::WorkGroup
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::WorkGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::WorkGroup'
                AND region = 'us-east-1'
    work_group_tags:
      name: work_group_tags
      id: aws.athena.work_group_tags
      x-cfn-schema-name: WorkGroup
      x-cfn-type-name: AWS::Athena::WorkGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.WorkGroupConfiguration') as work_group_configuration,
              JSON_EXTRACT(detail.Properties, '$.WorkGroupConfigurationUpdates') as work_group_configuration_updates,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.RecursiveDeleteOption') as recursive_delete_option
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Athena::WorkGroup'
              AND detail.data__TypeName = 'AWS::Athena::WorkGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'WorkGroupConfiguration') as work_group_configuration,
                json_extract_path_text(detail.Properties, 'WorkGroupConfigurationUpdates') as work_group_configuration_updates,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'RecursiveDeleteOption') as recursive_delete_option
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Athena::WorkGroup'
                AND detail.data__TypeName = 'AWS::Athena::WorkGroup'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__CapacityReservation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCapacityReservation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCapacityReservationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DataCatalog&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDataCatalog
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDataCatalogRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__NamedQuery&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNamedQuery
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNamedQueryRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PreparedStatement&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePreparedStatement
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePreparedStatementRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__WorkGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateWorkGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateWorkGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
