openapi: 3.0.0
info:
  title: Athena
  version: 1.0.0
paths: {}
components:
  schemas:
    Tags:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/Tag'
    Tag:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    DataCatalog:
      type: object
      properties:
        Name:
          description: 'The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters. '
          type: string
          minLength: 1
          maxLength: 256
        Description:
          description: 'A description of the data catalog to be created. '
          type: string
          minLength: 1
          maxLength: 1024
        Parameters:
          description: 'Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type. '
          type: object
          x-patternProperties:
            .*:
              type: string
              maxLength: 51200
          additionalProperties: false
        Tags:
          description: 'A list of comma separated tags to add to the data catalog that is created. '
          $ref: '#/components/schemas/Tags'
        Type:
          description: 'The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external hive metastore. '
          type: string
          enum:
            - LAMBDA
            - GLUE
            - HIVE
      required:
        - Name
        - Type
      x-stackql-resource-name: data_catalog
      x-stackql-primaryIdentifier:
        - Name
    NamedQuery:
      type: object
      properties:
        Name:
          description: The query name.
          type: string
          minLength: 1
          maxLength: 128
        Database:
          description: The database to which the query belongs.
          type: string
          minLength: 1
          maxLength: 255
        Description:
          description: The query description.
          type: string
          minLength: 1
          maxLength: 1024
        QueryString:
          description: The contents of the query with all query statements.
          type: string
          minLength: 1
          maxLength: 262144
        WorkGroup:
          description: The name of the workgroup that contains the named query.
          type: string
          minLength: 1
          maxLength: 128
        NamedQueryId:
          description: The unique ID of the query.
          type: string
      required:
        - Database
        - QueryString
      x-stackql-resource-name: named_query
      x-stackql-primaryIdentifier:
        - NamedQueryId
    PreparedStatement:
      type: object
      properties:
        StatementName:
          description: The name of the prepared statement.
          type: string
          minLength: 1
          maxLength: 256
        WorkGroup:
          description: The name of the workgroup to which the prepared statement belongs.
          type: string
          minLength: 1
          maxLength: 128
        Description:
          description: The description of the prepared statement.
          type: string
          minLength: 1
          maxLength: 1024
        QueryStatement:
          description: The query string for the prepared statement.
          type: string
          minLength: 1
          maxLength: 262144
      required:
        - StatementName
        - WorkGroup
        - QueryStatement
      x-stackql-resource-name: prepared_statement
      x-stackql-primaryIdentifier:
        - StatementName
        - WorkGroup
    SelectedEngineVersion:
      description: The engine version requested by the user. Possible values are determined by the output of ListEngineVersions, including Auto. The default is Auto.
      type: string
    EffectiveEngineVersion:
      description: Read only. The engine version on which the query runs. If the user requests a valid engine version other than Auto, the effective engine version is the same as the engine version that the user requested. If the user requests Auto, the effective engine version is chosen by Athena. When a request to update the engine version is made by a CreateWorkGroup or UpdateWorkGroup operation, the EffectiveEngineVersion field is ignored.
      type: string
    EngineVersion:
      description: The Athena engine version for running queries.
      type: object
      properties:
        SelectedEngineVersion:
          $ref: '#/components/schemas/SelectedEngineVersion'
        EffectiveEngineVersion:
          $ref: '#/components/schemas/EffectiveEngineVersion'
      additionalProperties: false
    BytesScannedCutoffPerQuery:
      description: The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.
      type: integer
      format: int64
      minimum: 10000000
    EnforceWorkGroupConfiguration:
      description: If set to "true", the settings for the workgroup override client-side settings. If set to "false", client-side settings are used
      type: boolean
    PublishCloudWatchMetricsEnabled:
      description: Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.
      type: boolean
    RequesterPaysEnabled:
      description: 'If set to true, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. '
      type: boolean
    OutputLocation:
      description: 'The location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using WorkGroupConfiguration'
      type: string
    KmsKey:
      description: 'For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. '
      type: string
    EncryptionOption:
      description: Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE-S3), server-side encryption with KMS-managed keys (SSE-KMS), or client-side encryption with KMS-managed keys (CSE-KMS) is used.
      type: string
      enum:
        - SSE_S3
        - SSE_KMS
        - CSE_KMS
    RemoveBytesScannedCutoffPerQuery:
      description: Indicates that the data usage control limit per query is removed.
      type: boolean
    EncryptionConfiguration:
      description: If query results are encrypted in Amazon S3, indicates the encryption option used (for example, SSE-KMS or CSE-KMS) and key information.
      type: object
      properties:
        EncryptionOption:
          $ref: '#/components/schemas/EncryptionOption'
        KmsKey:
          $ref: '#/components/schemas/KmsKey'
      required:
        - EncryptionOption
      additionalProperties: false
    RemoveEncryptionConfiguration:
      type: boolean
    AdditionalConfiguration:
      description: Additional Configuration that are passed to Athena Spark Calculations running in this workgroup
      type: string
    ExecutionRole:
      description: Execution Role ARN required to run Athena Spark Calculations
      type: string
    RemoveOutputLocation:
      type: boolean
    ExpectedBucketOwner:
      description: The AWS account ID of the owner of S3 bucket where query results are stored
      type: string
    RemoveExpectedBucketOwner:
      type: boolean
    S3AclOption:
      description: The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is BUCKET_OWNER_FULL_CONTROL
      type: string
      enum:
        - BUCKET_OWNER_FULL_CONTROL
    AclConfiguration:
      description: Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results
      type: object
      properties:
        S3AclOption:
          $ref: '#/components/schemas/S3AclOption'
      required:
        - S3AclOption
      additionalProperties: false
    RemoveAclConfiguration:
      type: boolean
    CustomerContentEncryptionConfiguration:
      description: Indicates the KMS key for encrypting notebook content.
      type: object
      properties:
        KmsKey:
          $ref: '#/components/schemas/KmsKey'
      required:
        - KmsKey
      additionalProperties: false
    RemoveCustomerContentEncryptionConfiguration:
      type: boolean
    ResultConfiguration:
      description: |
        The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
      type: object
      properties:
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
        OutputLocation:
          $ref: '#/components/schemas/OutputLocation'
        ExpectedBucketOwner:
          $ref: '#/components/schemas/ExpectedBucketOwner'
        AclConfiguration:
          $ref: '#/components/schemas/AclConfiguration'
      additionalProperties: false
    ResultConfigurationUpdates:
      description: 'The result configuration information about the queries in this workgroup that will be updated. Includes the updated results location and an updated option for encrypting query results. '
      type: object
      properties:
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
        OutputLocation:
          $ref: '#/components/schemas/OutputLocation'
        ExpectedBucketOwner:
          $ref: '#/components/schemas/ExpectedBucketOwner'
        AclConfiguration:
          $ref: '#/components/schemas/AclConfiguration'
        RemoveEncryptionConfiguration:
          $ref: '#/components/schemas/RemoveEncryptionConfiguration'
        RemoveOutputLocation:
          $ref: '#/components/schemas/RemoveOutputLocation'
        RemoveExpectedBucketOwner:
          $ref: '#/components/schemas/RemoveExpectedBucketOwner'
        RemoveAclConfiguration:
          $ref: '#/components/schemas/RemoveAclConfiguration'
      additionalProperties: false
    WorkGroupConfiguration:
      type: object
      properties:
        BytesScannedCutoffPerQuery:
          $ref: '#/components/schemas/BytesScannedCutoffPerQuery'
        EnforceWorkGroupConfiguration:
          $ref: '#/components/schemas/EnforceWorkGroupConfiguration'
        PublishCloudWatchMetricsEnabled:
          $ref: '#/components/schemas/PublishCloudWatchMetricsEnabled'
        RequesterPaysEnabled:
          $ref: '#/components/schemas/RequesterPaysEnabled'
        ResultConfiguration:
          $ref: '#/components/schemas/ResultConfiguration'
        EngineVersion:
          $ref: '#/components/schemas/EngineVersion'
        AdditionalConfiguration:
          $ref: '#/components/schemas/AdditionalConfiguration'
        ExecutionRole:
          $ref: '#/components/schemas/ExecutionRole'
        CustomerContentEncryptionConfiguration:
          $ref: '#/components/schemas/CustomerContentEncryptionConfiguration'
      additionalProperties: false
    WorkGroupConfigurationUpdates:
      type: object
      description: 'The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified. '
      properties:
        BytesScannedCutoffPerQuery:
          $ref: '#/components/schemas/BytesScannedCutoffPerQuery'
        EnforceWorkGroupConfiguration:
          $ref: '#/components/schemas/EnforceWorkGroupConfiguration'
        PublishCloudWatchMetricsEnabled:
          $ref: '#/components/schemas/PublishCloudWatchMetricsEnabled'
        RequesterPaysEnabled:
          $ref: '#/components/schemas/RequesterPaysEnabled'
        ResultConfigurationUpdates:
          $ref: '#/components/schemas/ResultConfigurationUpdates'
        RemoveBytesScannedCutoffPerQuery:
          $ref: '#/components/schemas/RemoveBytesScannedCutoffPerQuery'
        EngineVersion:
          $ref: '#/components/schemas/EngineVersion'
        AdditionalConfiguration:
          $ref: '#/components/schemas/AdditionalConfiguration'
        ExecutionRole:
          $ref: '#/components/schemas/ExecutionRole'
        CustomerContentEncryptionConfiguration:
          $ref: '#/components/schemas/CustomerContentEncryptionConfiguration'
        RemoveCustomerContentEncryptionConfiguration:
          $ref: '#/components/schemas/RemoveCustomerContentEncryptionConfiguration'
      additionalProperties: false
    WorkGroup:
      type: object
      properties:
        Name:
          description: The workGroup name.
          pattern: '[a-zA-Z0-9._-]{1,128}'
          type: string
        Description:
          description: The workgroup description.
          type: string
          minLength: 0
          maxLength: 1024
        Tags:
          description: One or more tags, separated by commas, that you want to attach to the workgroup as you create it
          $ref: '#/components/schemas/Tags'
        WorkGroupConfiguration:
          description: The workgroup configuration
          $ref: '#/components/schemas/WorkGroupConfiguration'
        WorkGroupConfigurationUpdates:
          description: The workgroup configuration update object
          $ref: '#/components/schemas/WorkGroupConfigurationUpdates'
        CreationTime:
          description: The date and time the workgroup was created.
          type: string
        State:
          description: 'The state of the workgroup: ENABLED or DISABLED.'
          type: string
          enum:
            - ENABLED
            - DISABLED
        RecursiveDeleteOption:
          description: The option to delete the workgroup and its contents even if the workgroup contains any named queries.
          type: boolean
      required:
        - Name
      x-stackql-resource-name: work_group
      x-stackql-primaryIdentifier:
        - Name
  x-stackQL-resources:
    data_catalogs:
      name: data_catalogs
      id: aws.athena.data_catalogs
      x-cfn-schema-name: DataCatalog
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::DataCatalog'
    data_catalog:
      name: data_catalog
      id: aws.athena.data_catalog
      x-cfn-schema-name: DataCatalog
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::DataCatalog'
    named_queries:
      name: named_queries
      id: aws.athena.named_queries
      x-cfn-schema-name: NamedQuery
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NamedQueryId') as named_query_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::NamedQuery'
    named_query:
      name: named_query
      id: aws.athena.named_query
      x-cfn-schema-name: NamedQuery
      x-type: get
      x-identifiers:
        - NamedQueryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Database') as database,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.QueryString') as query_string,
              JSON_EXTRACT(Properties, '$.WorkGroup') as work_group,
              JSON_EXTRACT(Properties, '$.NamedQueryId') as named_query_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::NamedQuery'
    prepared_statements:
      name: prepared_statements
      id: aws.athena.prepared_statements
      x-cfn-schema-name: PreparedStatement
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StatementName') as statement_name,
              JSON_EXTRACT(Properties, '$.WorkGroup') as work_group
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::PreparedStatement'
    prepared_statement:
      name: prepared_statement
      id: aws.athena.prepared_statement
      x-cfn-schema-name: PreparedStatement
      x-type: get
      x-identifiers:
        - StatementName
        - WorkGroup
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StatementName') as statement_name,
              JSON_EXTRACT(Properties, '$.WorkGroup') as work_group,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.QueryStatement') as query_statement
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::PreparedStatement'
    work_groups:
      name: work_groups
      id: aws.athena.work_groups
      x-cfn-schema-name: WorkGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Athena::WorkGroup'
    work_group:
      name: work_group
      id: aws.athena.work_group
      x-cfn-schema-name: WorkGroup
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.WorkGroupConfiguration.BytesScannedCutoffPerQuery') as work_group_configuration_bytes_scanned_cutoff_per_query,
              JSON_EXTRACT(Properties, '$.WorkGroupConfiguration.EnforceWorkGroupConfiguration') as work_group_configuration_enforce_work_group_configuration,
              JSON_EXTRACT(Properties, '$.WorkGroupConfiguration.PublishCloudWatchMetricsEnabled') as work_group_configuration_publish_cloud_watch_metrics_enabled,
              JSON_EXTRACT(Properties, '$.WorkGroupConfiguration.RequesterPaysEnabled') as work_group_configuration_requester_pays_enabled,
              JSON_EXTRACT(Properties, '$.WorkGroupConfiguration.ResultConfiguration') as work_group_configuration_result_configuration,
              JSON_EXTRACT(Properties, '$.WorkGroupConfiguration.EngineVersion') as work_group_configuration_engine_version,
              JSON_EXTRACT(Properties, '$.WorkGroupConfiguration.AdditionalConfiguration') as work_group_configuration_additional_configuration,
              JSON_EXTRACT(Properties, '$.WorkGroupConfiguration.ExecutionRole') as work_group_configuration_execution_role,
              JSON_EXTRACT(Properties, '$.WorkGroupConfiguration.CustomerContentEncryptionConfiguration') as work_group_configuration_customer_content_encryption_configuration,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates.BytesScannedCutoffPerQuery') as work_group_configuration_updates_bytes_scanned_cutoff_per_query,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates.EnforceWorkGroupConfiguration') as work_group_configuration_updates_enforce_work_group_configuration,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates.PublishCloudWatchMetricsEnabled') as work_group_configuration_updates_publish_cloud_watch_metrics_enabled,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates.RequesterPaysEnabled') as work_group_configuration_updates_requester_pays_enabled,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates.ResultConfigurationUpdates') as work_group_configuration_updates_result_configuration_updates,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates.RemoveBytesScannedCutoffPerQuery') as work_group_configuration_updates_remove_bytes_scanned_cutoff_per_query,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates.EngineVersion') as work_group_configuration_updates_engine_version,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates.AdditionalConfiguration') as work_group_configuration_updates_additional_configuration,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates.ExecutionRole') as work_group_configuration_updates_execution_role,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates.CustomerContentEncryptionConfiguration') as work_group_configuration_updates_customer_content_encryption_configuration,
              JSON_EXTRACT(Properties, '$.WorkGroupConfigurationUpdates.RemoveCustomerContentEncryptionConfiguration') as work_group_configuration_updates_remove_customer_content_encryption_configuration,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.RecursiveDeleteOption') as recursive_delete_option
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Athena::WorkGroup'
