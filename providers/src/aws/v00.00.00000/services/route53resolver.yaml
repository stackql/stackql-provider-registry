openapi: 3.0.0
info:
  title: Route53Resolver
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Domains:
      description: An inline list of domains to use for this domain list.
      type: array
      uniqueItems: true
      items:
        description: FirewallDomainName
        type: string
        minLength: 1
        maxLength: 255
    Tag:
      additionalProperties: false
      type: object
      properties:
        Value:
          minLength: 0
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          maxLength: 256
        Key:
          minLength: 1
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          maxLength: 128
      required:
        - Value
        - Key
    FirewallDomainList:
      type: object
      properties:
        Id:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        Arn:
          description: Arn
          type: string
          minLength: 1
          maxLength: 600
        Name:
          description: FirewallDomainListName
          type: string
          pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
          minLength: 1
          maxLength: 64
        DomainCount:
          description: Count
          type: integer
          minimum: 0
        Status:
          description: ResolverFirewallDomainList, possible values are COMPLETE, DELETING, UPDATING, COMPLETE_IMPORT_FAILED, IMPORTING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
          type: string
          enum:
            - COMPLETE
            - DELETING
            - UPDATING
            - COMPLETE_IMPORT_FAILED
            - IMPORTING
            - INACTIVE_OWNER_ACCOUNT_CLOSED
        StatusMessage:
          description: FirewallDomainListAssociationStatus
          type: string
        ManagedOwnerName:
          description: ServicePrincipal
          type: string
          minLength: 1
          maxLength: 512
        CreatorRequestId:
          description: The id of the creator request.
          type: string
          minLength: 1
          maxLength: 255
        CreationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        ModificationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        Domains:
          $ref: '#/components/schemas/Domains'
        DomainFileUrl:
          description: S3 URL to import domains from.
          type: string
          minLength: 1
          maxLength: 1024
        Tags:
          description: Tags
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: firewall_domain_list
      description: Resource schema for AWS::Route53Resolver::FirewallDomainList.
      x-type-name: AWS::Route53Resolver::FirewallDomainList
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Name
      x-write-only-properties:
        - Domains
        - DomainFileUrl
      x-read-only-properties:
        - Id
        - Arn
        - DomainCount
        - Status
        - StatusMessage
        - ManagedOwnerName
        - CreatorRequestId
        - CreationTime
        - ModificationTime
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - route53resolver:TagResource
          - route53resolver:UntagResource
      x-required-permissions:
        create:
          - route53resolver:CreateFirewallDomainList
          - route53resolver:GetFirewallDomainList
          - route53resolver:ImportFirewallDomains
          - route53resolver:UpdateFirewallDomains
          - route53resolver:TagResource
          - route53resolver:ListTagsForResource
        list:
          - route53resolver:ListFirewallDomainLists
          - route53resolver:ListTagsForResource
        read:
          - route53resolver:GetFirewallDomainList
          - route53resolver:ListTagsForResource
        delete:
          - route53resolver:GetFirewallDomainList
          - route53resolver:DeleteFirewallDomainList
          - route53resolver:UntagResource
          - route53resolver:ListTagsForResource
        update:
          - route53resolver:GetFirewallDomainList
          - route53resolver:ImportFirewallDomains
          - route53resolver:UpdateFirewallDomains
          - route53resolver:TagResource
          - route53resolver:UntagResource
          - route53resolver:ListTagsForResource
    FirewallRule:
      description: Firewall Rule associating the Rule Group to a Domain List
      type: object
      properties:
        FirewallDomainListId:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        FirewallThreatProtectionId:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        Priority:
          description: Rule Priority
          type: integer
        Action:
          description: Rule Action
          type: string
          enum:
            - ALLOW
            - BLOCK
            - ALERT
        BlockResponse:
          description: BlockResponse
          type: string
          enum:
            - NODATA
            - NXDOMAIN
            - OVERRIDE
        BlockOverrideDomain:
          description: BlockOverrideDomain
          type: string
          minLength: 1
          maxLength: 255
        BlockOverrideDnsType:
          description: BlockOverrideDnsType
          type: string
          enum:
            - CNAME
        BlockOverrideTtl:
          description: BlockOverrideTtl
          type: integer
          minimum: 0
          maximum: 604800
        Qtype:
          description: Qtype
          type: string
          minLength: 1
          maxLength: 16
        ConfidenceThreshold:
          description: FirewallDomainRedirectionAction
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
        DnsThreatProtection:
          description: FirewallDomainRedirectionAction
          type: string
          enum:
            - DGA
            - DNS_TUNNELING
        FirewallDomainRedirectionAction:
          description: FirewallDomainRedirectionAction
          type: string
          enum:
            - INSPECT_REDIRECTION_DOMAIN
            - TRUST_REDIRECTION_DOMAIN
      required:
        - Priority
        - Action
      additionalProperties: false
    FirewallRuleGroup:
      type: object
      properties:
        Id:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        Arn:
          description: Arn
          type: string
          minLength: 1
          maxLength: 600
        Name:
          description: FirewallRuleGroupName
          type: string
          pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
          minLength: 1
          maxLength: 64
        RuleCount:
          description: Count
          type: integer
        Status:
          description: ResolverFirewallRuleGroupAssociation, possible values are COMPLETE, DELETING, UPDATING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
          type: string
          enum:
            - COMPLETE
            - DELETING
            - UPDATING
            - INACTIVE_OWNER_ACCOUNT_CLOSED
        StatusMessage:
          description: FirewallRuleGroupStatus
          type: string
        OwnerId:
          description: AccountId
          type: string
          minLength: 12
          maxLength: 32
        ShareStatus:
          description: ShareStatus, possible values are NOT_SHARED, SHARED_WITH_ME, SHARED_BY_ME.
          type: string
          enum:
            - NOT_SHARED
            - SHARED_WITH_ME
            - SHARED_BY_ME
        CreatorRequestId:
          description: The id of the creator request.
          type: string
          minLength: 1
          maxLength: 255
        CreationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        ModificationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        FirewallRules:
          description: FirewallRules
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/FirewallRule'
        Tags:
          description: Tags
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: firewall_rule_group
      description: Resource schema for AWS::Route53Resolver::FirewallRuleGroup.
      x-type-name: AWS::Route53Resolver::FirewallRuleGroup
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Id
        - Arn
        - RuleCount
        - Status
        - StatusMessage
        - OwnerId
        - ShareStatus
        - CreatorRequestId
        - CreationTime
        - ModificationTime
        - FirewallRules/*/FirewallThreatProtectionId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - route53resolver:TagResource
          - route53resolver:UntagResource
      x-required-permissions:
        create:
          - route53resolver:CreateFirewallRuleGroup
          - route53resolver:GetFirewallRuleGroup
          - route53resolver:ListFirewallRules
          - route53resolver:CreateFirewallRule
          - route53resolver:DeleteFirewallRule
          - route53resolver:TagResource
          - route53resolver:ListTagsForResource
        read:
          - route53resolver:GetFirewallRuleGroup
          - route53resolver:ListFirewallRules
          - route53resolver:ListTagsForResource
        list:
          - route53resolver:ListFirewallRuleGroups
          - route53resolver:ListTagsForResource
        delete:
          - route53resolver:GetFirewallRuleGroup
          - route53resolver:DeleteFirewallRuleGroup
          - route53resolver:ListFirewallRules
          - route53resolver:DeleteFirewallRule
          - route53resolver:UntagResource
          - route53resolver:ListTagsForResource
        update:
          - route53resolver:GetFirewallRuleGroup
          - route53resolver:ListFirewallRules
          - route53resolver:CreateFirewallRule
          - route53resolver:UpdateFirewallRule
          - route53resolver:DeleteFirewallRule
          - route53resolver:TagResource
          - route53resolver:UntagResource
          - route53resolver:ListTagsForResource
    FirewallRuleGroupAssociation:
      type: object
      properties:
        Id:
          description: Id
          type: string
          minLength: 1
          maxLength: 64
        Arn:
          description: Arn
          type: string
          minLength: 1
          maxLength: 600
        FirewallRuleGroupId:
          description: FirewallRuleGroupId
          type: string
          minLength: 1
          maxLength: 64
        VpcId:
          description: VpcId
          type: string
          minLength: 1
          maxLength: 64
        Name:
          description: FirewallRuleGroupAssociationName
          type: string
          pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
          minLength: 0
          maxLength: 64
        Priority:
          description: Priority
          type: integer
        MutationProtection:
          description: MutationProtectionStatus
          type: string
          enum:
            - ENABLED
            - DISABLED
        ManagedOwnerName:
          description: ServicePrincipal
          type: string
          minLength: 1
          maxLength: 512
        Status:
          description: ResolverFirewallRuleGroupAssociation, possible values are COMPLETE, DELETING, UPDATING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
          type: string
          enum:
            - COMPLETE
            - DELETING
            - UPDATING
            - INACTIVE_OWNER_ACCOUNT_CLOSED
        StatusMessage:
          description: FirewallDomainListAssociationStatus
          type: string
        CreatorRequestId:
          description: The id of the creator request.
          type: string
          minLength: 1
          maxLength: 255
        CreationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        ModificationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
        Tags:
          description: Tags
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - FirewallRuleGroupId
        - VpcId
        - Priority
      x-stackql-resource-name: firewall_rule_group_association
      description: Resource schema for AWS::Route53Resolver::FirewallRuleGroupAssociation.
      x-type-name: AWS::Route53Resolver::FirewallRuleGroupAssociation
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - FirewallRuleGroupId
        - VpcId
      x-read-only-properties:
        - Id
        - Arn
        - ManagedOwnerName
        - Status
        - StatusMessage
        - CreatorRequestId
        - CreationTime
        - ModificationTime
      x-required-properties:
        - FirewallRuleGroupId
        - VpcId
        - Priority
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - route53resolver:TagResource
          - route53resolver:UntagResource
      x-required-permissions:
        create:
          - route53resolver:AssociateFirewallRuleGroup
          - route53resolver:GetFirewallRuleGroupAssociation
          - route53resolver:TagResource
          - route53resolver:ListTagsForResource
          - ec2:DescribeVpcs
        read:
          - route53resolver:GetFirewallRuleGroupAssociation
          - route53resolver:ListTagsForResource
        list:
          - route53resolver:ListFirewallRuleGroupAssociations
          - route53resolver:ListTagsForResource
        delete:
          - route53resolver:DisassociateFirewallRuleGroup
          - route53resolver:GetFirewallRuleGroupAssociation
          - route53resolver:UntagResource
          - route53resolver:ListTagsForResource
        update:
          - route53resolver:UpdateFirewallRuleGroupAssociation
          - route53resolver:GetFirewallRuleGroupAssociation
          - route53resolver:TagResource
          - route53resolver:UntagResource
          - route53resolver:ListTagsForResource
    OutpostResolver:
      type: object
      properties:
        Id:
          description: Id
          type: string
          minLength: 1
          maxLength: 64
        CreatorRequestId:
          description: The id of the creator request.
          type: string
          minLength: 1
          maxLength: 255
        Name:
          description: The OutpostResolver name.
          type: string
          minLength: 1
          maxLength: 255
        Arn:
          description: The OutpostResolver ARN.
          type: string
          minLength: 1
          maxLength: 1024
        OutpostArn:
          description: The Outpost ARN.
          type: string
          minLength: 1
          maxLength: 1024
        PreferredInstanceType:
          description: The OutpostResolver instance type.
          type: string
          minLength: 1
          maxLength: 255
        Status:
          description: The OutpostResolver status, possible values are CREATING, OPERATIONAL, UPDATING, DELETING, ACTION_NEEDED, FAILED_CREATION and FAILED_DELETION.
          type: string
          enum:
            - CREATING
            - OPERATIONAL
            - DELETING
            - UPDATING
            - ACTION_NEEDED
            - FAILED_CREATION
            - FAILED_DELETION
        StatusMessage:
          description: The OutpostResolver status message.
          type: string
        InstanceCount:
          description: The number of OutpostResolvers.
          type: integer
          minimum: 4
          maximum: 256
        CreationTime:
          description: The OutpostResolver creation time
          type: string
          minLength: 20
          maxLength: 40
        ModificationTime:
          description: The OutpostResolver last modified time
          type: string
          minLength: 20
          maxLength: 40
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - OutpostArn
        - PreferredInstanceType
        - Name
      x-stackql-resource-name: outpost_resolver
      description: Resource schema for AWS::Route53Resolver::OutpostResolver.
      x-type-name: AWS::Route53Resolver::OutpostResolver
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - OutpostArn
      x-read-only-properties:
        - Id
        - Arn
        - Status
        - StatusMessage
        - CreationTime
        - ModificationTime
        - CreatorRequestId
      x-required-properties:
        - OutpostArn
        - PreferredInstanceType
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - route53resolver:TagResource
          - route53resolver:UntagResource
      x-required-permissions:
        create:
          - route53resolver:CreateOutpostResolver
          - route53resolver:GetOutpostResolver
          - route53resolver:ListTagsForResource
          - outposts:GetOutpost
          - route53resolver:TagResource
        read:
          - route53resolver:GetOutpostResolver
          - route53resolver:ListTagsForResource
        update:
          - route53resolver:UpdateOutpostResolver
          - route53resolver:GetOutpostResolver
          - route53resolver:UntagResource
          - route53resolver:TagResource
          - route53resolver:ListTagsForResource
        delete:
          - route53resolver:DeleteOutpostResolver
          - route53resolver:GetOutpostResolver
          - route53resolver:ListOutpostResolvers
          - route53resolver:ListResolverEndpoints
        list:
          - route53resolver:ListOutpostResolvers
          - route53resolver:ListTagsForResource
    ResolverConfig:
      type: object
      properties:
        Id:
          description: Id
          type: string
          minLength: 1
          maxLength: 64
        OwnerId:
          description: AccountId
          type: string
          minLength: 12
          maxLength: 32
        ResourceId:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        AutodefinedReverse:
          description: ResolverAutodefinedReverseStatus, possible values are ENABLING, ENABLED, DISABLING AND DISABLED.
          type: string
          enum:
            - ENABLING
            - ENABLED
            - DISABLING
            - DISABLED
        AutodefinedReverseFlag:
          description: Represents the desired status of AutodefinedReverse. The only supported value on creation is DISABLE. Deletion of this resource will return AutodefinedReverse to its default value (ENABLED).
          type: string
          enum:
            - DISABLE
      required:
        - ResourceId
        - AutodefinedReverseFlag
      x-stackql-resource-name: resolver_config
      description: Resource schema for AWS::Route53Resolver::ResolverConfig.
      x-type-name: AWS::Route53Resolver::ResolverConfig
      x-stackql-primary-identifier:
        - ResourceId
      x-create-only-properties:
        - ResourceId
        - AutodefinedReverseFlag
      x-read-only-properties:
        - OwnerId
        - Id
        - AutodefinedReverse
      x-required-properties:
        - ResourceId
        - AutodefinedReverseFlag
      x-required-permissions:
        create:
          - route53resolver:UpdateResolverConfig
          - route53resolver:GetResolverConfig
          - ec2:DescribeVpcs
        read:
          - route53resolver:GetResolverConfig
          - ec2:DescribeVpcs
        delete:
          - route53resolver:UpdateResolverConfig
          - route53resolver:ListResolverConfigs
          - ec2:DescribeVpcs
        list:
          - route53resolver:ListResolverConfigs
          - ec2:DescribeVpcs
    ResolverDNSSECConfig:
      type: object
      properties:
        Id:
          description: Id
          type: string
          minLength: 1
          maxLength: 64
        OwnerId:
          description: AccountId
          type: string
          minLength: 12
          maxLength: 32
        ResourceId:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        ValidationStatus:
          description: ResolverDNSSECValidationStatus, possible values are ENABLING, ENABLED, DISABLING AND DISABLED.
          type: string
          enum:
            - ENABLING
            - ENABLED
            - DISABLING
            - DISABLED
      x-stackql-resource-name: resolverdnssec_config
      description: Resource schema for AWS::Route53Resolver::ResolverDNSSECConfig.
      x-type-name: AWS::Route53Resolver::ResolverDNSSECConfig
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - ResourceId
      x-read-only-properties:
        - OwnerId
        - Id
        - ValidationStatus
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - resolverdnssec:CreateConfig
          - route53resolver:UpdateResolverDnssecConfig
          - route53resolver:GetResolverDnssecConfig
          - ec2:DescribeVpcs
        read:
          - resolverdnssec:GetConfig
          - route53resolver:ListResolverDnssecConfigs
        delete:
          - resolverdnssec:DeleteConfig
          - route53resolver:UpdateResolverDnssecConfig
          - route53resolver:ListResolverDnssecConfigs
          - ec2:DescribeVpcs
        list:
          - resolverdnssec:ListConfig
          - route53resolver:ListResolverDnssecConfigs
    ResolverQueryLoggingConfig:
      type: object
      properties:
        Id:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        OwnerId:
          description: AccountId
          type: string
          minLength: 12
          maxLength: 32
        Status:
          description: ResolverQueryLogConfigStatus, possible values are CREATING, CREATED, DELETED AND FAILED.
          type: string
          enum:
            - CREATING
            - CREATED
            - DELETING
            - FAILED
        ShareStatus:
          description: ShareStatus, possible values are NOT_SHARED, SHARED_WITH_ME, SHARED_BY_ME.
          type: string
          enum:
            - NOT_SHARED
            - SHARED_WITH_ME
            - SHARED_BY_ME
        AssociationCount:
          description: Count
          type: integer
        Arn:
          description: Arn
          type: string
          minLength: 1
          maxLength: 600
        Name:
          description: ResolverQueryLogConfigName
          type: string
          pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
          minLength: 1
          maxLength: 64
        CreatorRequestId:
          description: The id of the creator request.
          type: string
          minLength: 1
          maxLength: 255
        DestinationArn:
          description: destination arn
          type: string
          minLength: 1
          maxLength: 600
        CreationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
      x-stackql-resource-name: resolver_query_logging_config
      description: Resource schema for AWS::Route53Resolver::ResolverQueryLoggingConfig.
      x-type-name: AWS::Route53Resolver::ResolverQueryLoggingConfig
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Name
        - DestinationArn
      x-read-only-properties:
        - OwnerId
        - Status
        - ShareStatus
        - AssociationCount
        - Arn
        - CreatorRequestId
        - CreationTime
        - Id
      x-required-permissions:
        create:
          - resolverquerylogging:CreateConfig
          - resolverquerylogging:GetConfig
          - route53resolver:CreateResolverQueryLogConfig
          - route53resolver:GetResolverQueryLogConfig
          - logs:CreateLogDelivery
          - logs:GetLogDelivery
          - logs:UpdateLogDelivery
          - logs:DeleteLogDelivery
          - logs:ListLogDeliveries
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
          - logs:DescribeLogGroups
          - iam:CreateServiceLinkedRole
        read:
          - resolverquerylogging:GetConfig
          - route53resolver:GetResolverQueryLogConfig
        delete:
          - resolverquerylogging:DeleteConfig
          - resolverquerylogging:ListConfig
          - route53resolver:DeleteResolverQueryLogConfig
          - route53resolver:ListResolverQueryLogConfigs
        list:
          - resolverquerylogging:ListConfig
          - route53resolver:ListResolverQueryLogConfigs
    ResolverQueryLoggingConfigAssociation:
      type: object
      properties:
        Id:
          description: Id
          type: string
          minLength: 1
          maxLength: 64
        ResolverQueryLogConfigId:
          description: ResolverQueryLogConfigId
          type: string
          minLength: 1
          maxLength: 64
        ResourceId:
          description: ResourceId
          type: string
          minLength: 1
          maxLength: 64
        Status:
          description: ResolverQueryLogConfigAssociationStatus
          type: string
          enum:
            - CREATING
            - ACTIVE
            - ACTION_NEEDED
            - DELETING
            - FAILED
            - OVERRIDDEN
        Error:
          description: ResolverQueryLogConfigAssociationError
          type: string
          enum:
            - NONE
            - DESTINATION_NOT_FOUND
            - ACCESS_DENIED
        ErrorMessage:
          description: ResolverQueryLogConfigAssociationErrorMessage
          type: string
        CreationTime:
          description: Rfc3339TimeString
          type: string
          minLength: 20
          maxLength: 40
      x-stackql-resource-name: resolver_query_logging_config_association
      description: Resource schema for AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation.
      x-type-name: AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - ResolverQueryLogConfigId
        - ResourceId
      x-read-only-properties:
        - Status
        - Error
        - ErrorMessage
        - CreationTime
        - Id
      x-required-permissions:
        create:
          - resolverquerylogging:AssociateConfig
          - resolverquerylogging:GetConfigAssociation
          - route53resolver:AssociateResolverQueryLogConfig
          - ec2:DescribeVpcs
          - route53resolver:GetResolverQueryLogConfigAssociation
        read:
          - resolverquerylogging:GetConfigAssociation
          - route53resolver:GetResolverQueryLogConfigAssociation
        delete:
          - resolverquerylogging:DisassociateConfig
          - resolverquerylogging:ListConfigAssociation
          - route53resolver:DisassociateResolverQueryLogConfig
          - route53resolver:ListResolverQueryLogConfigAssociations
          - route53resolver:GetResolverQueryLogConfigAssociation
        list:
          - resolverquerylogging:ListConfigAssociations
          - route53resolver:ListResolverQueryLogConfigAssociations
    TargetAddress:
      additionalProperties: false
      type: object
      properties:
        Ipv6:
          description: 'One IPv6 address that you want to forward DNS queries to. You can specify only IPv6 addresses. '
          type: string
        Ip:
          description: 'One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses. '
          type: string
        Port:
          minLength: 0
          description: 'The port at Ip that you want to forward DNS queries to. '
          type: string
          maxLength: 65535
        Protocol:
          description: 'The protocol that you want to use to forward DNS queries. '
          type: string
          enum:
            - Do53
            - DoH
        ServerNameIndication:
          minLength: 0
          description: The SNI of the target name servers for DoH/DoH-FIPS outbound endpoints
          type: string
          maxLength: 255
    ResolverRule:
      type: object
      properties:
        ResolverEndpointId:
          minLength: 1
          description: The ID of the endpoint that the rule is associated with.
          type: string
          maxLength: 64
        DomainName:
          minLength: 1
          description: DNS queries for this domain name are forwarded to the IP addresses that are specified in TargetIps
          type: string
          maxLength: 256
        RuleType:
          description: When you want to forward DNS queries for specified domain name to resolvers on your network, specify FORWARD. When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify SYSTEM.
          type: string
          enum:
            - FORWARD
            - SYSTEM
            - RECURSIVE
            - DELEGATE
        ResolverRuleId:
          description: The ID of the endpoint that the rule is associated with.
          type: string
        Arn:
          description: The Amazon Resource Name (ARN) of the resolver rule.
          type: string
        Tags:
          uniqueItems: false
          description: An array of key-value pairs to apply to this resource.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        TargetIps:
          uniqueItems: false
          description: An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/TargetAddress'
        Name:
          minLength: 0
          description: The name for the Resolver rule
          type: string
          maxLength: 64
      required:
        - RuleType
      x-stackql-resource-name: resolver_rule
      description: Resource Type definition for AWS::Route53Resolver::ResolverRule
      x-type-name: AWS::Route53Resolver::ResolverRule
      x-stackql-primary-identifier:
        - ResolverRuleId
      x-create-only-properties:
        - RuleType
      x-conditional-create-only-properties:
        - DomainName
      x-read-only-properties:
        - Arn
        - ResolverRuleId
      x-required-properties:
        - RuleType
      x-tagging:
        permissions:
          - route53resolver:TagResource
          - route53resolver:UntagResource
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - route53resolver:GetResolverRule
          - route53resolver:ListTagsForResource
        create:
          - route53resolver:CreateResolverRule
          - route53resolver:GetResolverRule
          - route53resolver:ListTagsForResource
          - route53resolver:TagResource
        update:
          - route53resolver:UpdateResolverRule
          - route53resolver:GetResolverRule
          - route53resolver:ListTagsForResource
          - route53resolver:TagResource
          - route53resolver:UntagResource
        list:
          - route53resolver:ListResolverRules
        delete:
          - route53resolver:DeleteResolverRule
          - route53resolver:GetResolverRule
    ResolverRuleAssociation:
      type: object
      properties:
        VPCId:
          description: The ID of the VPC that you associated the Resolver rule with.
          type: string
        ResolverRuleId:
          description: The ID of the Resolver rule that you associated with the VPC that is specified by ``VPCId``.
          type: string
        ResolverRuleAssociationId:
          description: ''
          type: string
        Name:
          description: The name of an association between a Resolver rule and a VPC.
          type: string
      required:
        - VPCId
        - ResolverRuleId
      x-stackql-resource-name: resolver_rule_association
      description: >-
        In the response to an [AssociateResolverRule](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html), [DisassociateResolverRule](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverRule.html), or [ListResolverRuleAssociations](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html) request, provides information about an association between a
        resolver rule and a VPC. The association determines which DNS queries that originate in the VPC are forwarded to your network.
      x-type-name: AWS::Route53Resolver::ResolverRuleAssociation
      x-stackql-primary-identifier:
        - ResolverRuleAssociationId
      x-create-only-properties:
        - Name
        - VPCId
        - ResolverRuleId
      x-read-only-properties:
        - ResolverRuleAssociationId
      x-required-properties:
        - VPCId
        - ResolverRuleId
      x-required-permissions:
        create:
          - route53resolver:AssociateResolverRule
          - route53resolver:GetResolverRuleAssociation
          - ec2:DescribeVpcs
        read:
          - route53resolver:GetResolverRuleAssociation
        delete:
          - route53resolver:DisassociateResolverRule
          - route53resolver:GetResolverRuleAssociation
        list:
          - route53resolver:ListResolverRuleAssociations
    CreateFirewallDomainListRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: ResourceId
              type: string
              minLength: 1
              maxLength: 64
            Arn:
              description: Arn
              type: string
              minLength: 1
              maxLength: 600
            Name:
              description: FirewallDomainListName
              type: string
              pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
              minLength: 1
              maxLength: 64
            DomainCount:
              description: Count
              type: integer
              minimum: 0
            Status:
              description: ResolverFirewallDomainList, possible values are COMPLETE, DELETING, UPDATING, COMPLETE_IMPORT_FAILED, IMPORTING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
              type: string
              enum:
                - COMPLETE
                - DELETING
                - UPDATING
                - COMPLETE_IMPORT_FAILED
                - IMPORTING
                - INACTIVE_OWNER_ACCOUNT_CLOSED
            StatusMessage:
              description: FirewallDomainListAssociationStatus
              type: string
            ManagedOwnerName:
              description: ServicePrincipal
              type: string
              minLength: 1
              maxLength: 512
            CreatorRequestId:
              description: The id of the creator request.
              type: string
              minLength: 1
              maxLength: 255
            CreationTime:
              description: Rfc3339TimeString
              type: string
              minLength: 20
              maxLength: 40
            ModificationTime:
              description: Rfc3339TimeString
              type: string
              minLength: 20
              maxLength: 40
            Domains:
              $ref: '#/components/schemas/Domains'
            DomainFileUrl:
              description: S3 URL to import domains from.
              type: string
              minLength: 1
              maxLength: 1024
            Tags:
              description: Tags
              type: array
              x-insertionOrder: false
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateFirewallDomainListRequest
      type: object
      required: []
    CreateFirewallRuleGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: ResourceId
              type: string
              minLength: 1
              maxLength: 64
            Arn:
              description: Arn
              type: string
              minLength: 1
              maxLength: 600
            Name:
              description: FirewallRuleGroupName
              type: string
              pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
              minLength: 1
              maxLength: 64
            RuleCount:
              description: Count
              type: integer
            Status:
              description: ResolverFirewallRuleGroupAssociation, possible values are COMPLETE, DELETING, UPDATING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
              type: string
              enum:
                - COMPLETE
                - DELETING
                - UPDATING
                - INACTIVE_OWNER_ACCOUNT_CLOSED
            StatusMessage:
              description: FirewallRuleGroupStatus
              type: string
            OwnerId:
              description: AccountId
              type: string
              minLength: 12
              maxLength: 32
            ShareStatus:
              description: ShareStatus, possible values are NOT_SHARED, SHARED_WITH_ME, SHARED_BY_ME.
              type: string
              enum:
                - NOT_SHARED
                - SHARED_WITH_ME
                - SHARED_BY_ME
            CreatorRequestId:
              description: The id of the creator request.
              type: string
              minLength: 1
              maxLength: 255
            CreationTime:
              description: Rfc3339TimeString
              type: string
              minLength: 20
              maxLength: 40
            ModificationTime:
              description: Rfc3339TimeString
              type: string
              minLength: 20
              maxLength: 40
            FirewallRules:
              description: FirewallRules
              type: array
              x-insertionOrder: false
              uniqueItems: true
              items:
                $ref: '#/components/schemas/FirewallRule'
            Tags:
              description: Tags
              type: array
              x-insertionOrder: false
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateFirewallRuleGroupRequest
      type: object
      required: []
    CreateFirewallRuleGroupAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: Id
              type: string
              minLength: 1
              maxLength: 64
            Arn:
              description: Arn
              type: string
              minLength: 1
              maxLength: 600
            FirewallRuleGroupId:
              description: FirewallRuleGroupId
              type: string
              minLength: 1
              maxLength: 64
            VpcId:
              description: VpcId
              type: string
              minLength: 1
              maxLength: 64
            Name:
              description: FirewallRuleGroupAssociationName
              type: string
              pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
              minLength: 0
              maxLength: 64
            Priority:
              description: Priority
              type: integer
            MutationProtection:
              description: MutationProtectionStatus
              type: string
              enum:
                - ENABLED
                - DISABLED
            ManagedOwnerName:
              description: ServicePrincipal
              type: string
              minLength: 1
              maxLength: 512
            Status:
              description: ResolverFirewallRuleGroupAssociation, possible values are COMPLETE, DELETING, UPDATING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
              type: string
              enum:
                - COMPLETE
                - DELETING
                - UPDATING
                - INACTIVE_OWNER_ACCOUNT_CLOSED
            StatusMessage:
              description: FirewallDomainListAssociationStatus
              type: string
            CreatorRequestId:
              description: The id of the creator request.
              type: string
              minLength: 1
              maxLength: 255
            CreationTime:
              description: Rfc3339TimeString
              type: string
              minLength: 20
              maxLength: 40
            ModificationTime:
              description: Rfc3339TimeString
              type: string
              minLength: 20
              maxLength: 40
            Tags:
              description: Tags
              type: array
              x-insertionOrder: false
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateFirewallRuleGroupAssociationRequest
      type: object
      required: []
    CreateOutpostResolverRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: Id
              type: string
              minLength: 1
              maxLength: 64
            CreatorRequestId:
              description: The id of the creator request.
              type: string
              minLength: 1
              maxLength: 255
            Name:
              description: The OutpostResolver name.
              type: string
              minLength: 1
              maxLength: 255
            Arn:
              description: The OutpostResolver ARN.
              type: string
              minLength: 1
              maxLength: 1024
            OutpostArn:
              description: The Outpost ARN.
              type: string
              minLength: 1
              maxLength: 1024
            PreferredInstanceType:
              description: The OutpostResolver instance type.
              type: string
              minLength: 1
              maxLength: 255
            Status:
              description: The OutpostResolver status, possible values are CREATING, OPERATIONAL, UPDATING, DELETING, ACTION_NEEDED, FAILED_CREATION and FAILED_DELETION.
              type: string
              enum:
                - CREATING
                - OPERATIONAL
                - DELETING
                - UPDATING
                - ACTION_NEEDED
                - FAILED_CREATION
                - FAILED_DELETION
            StatusMessage:
              description: The OutpostResolver status message.
              type: string
            InstanceCount:
              description: The number of OutpostResolvers.
              type: integer
              minimum: 4
              maximum: 256
            CreationTime:
              description: The OutpostResolver creation time
              type: string
              minLength: 20
              maxLength: 40
            ModificationTime:
              description: The OutpostResolver last modified time
              type: string
              minLength: 20
              maxLength: 40
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateOutpostResolverRequest
      type: object
      required: []
    CreateResolverConfigRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: Id
              type: string
              minLength: 1
              maxLength: 64
            OwnerId:
              description: AccountId
              type: string
              minLength: 12
              maxLength: 32
            ResourceId:
              description: ResourceId
              type: string
              minLength: 1
              maxLength: 64
            AutodefinedReverse:
              description: ResolverAutodefinedReverseStatus, possible values are ENABLING, ENABLED, DISABLING AND DISABLED.
              type: string
              enum:
                - ENABLING
                - ENABLED
                - DISABLING
                - DISABLED
            AutodefinedReverseFlag:
              description: Represents the desired status of AutodefinedReverse. The only supported value on creation is DISABLE. Deletion of this resource will return AutodefinedReverse to its default value (ENABLED).
              type: string
              enum:
                - DISABLE
          x-stackQL-stringOnly: true
      x-title: CreateResolverConfigRequest
      type: object
      required: []
    CreateResolverDNSSECConfigRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: Id
              type: string
              minLength: 1
              maxLength: 64
            OwnerId:
              description: AccountId
              type: string
              minLength: 12
              maxLength: 32
            ResourceId:
              description: ResourceId
              type: string
              minLength: 1
              maxLength: 64
            ValidationStatus:
              description: ResolverDNSSECValidationStatus, possible values are ENABLING, ENABLED, DISABLING AND DISABLED.
              type: string
              enum:
                - ENABLING
                - ENABLED
                - DISABLING
                - DISABLED
          x-stackQL-stringOnly: true
      x-title: CreateResolverDNSSECConfigRequest
      type: object
      required: []
    CreateResolverQueryLoggingConfigRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: ResourceId
              type: string
              minLength: 1
              maxLength: 64
            OwnerId:
              description: AccountId
              type: string
              minLength: 12
              maxLength: 32
            Status:
              description: ResolverQueryLogConfigStatus, possible values are CREATING, CREATED, DELETED AND FAILED.
              type: string
              enum:
                - CREATING
                - CREATED
                - DELETING
                - FAILED
            ShareStatus:
              description: ShareStatus, possible values are NOT_SHARED, SHARED_WITH_ME, SHARED_BY_ME.
              type: string
              enum:
                - NOT_SHARED
                - SHARED_WITH_ME
                - SHARED_BY_ME
            AssociationCount:
              description: Count
              type: integer
            Arn:
              description: Arn
              type: string
              minLength: 1
              maxLength: 600
            Name:
              description: ResolverQueryLogConfigName
              type: string
              pattern: (?!^[0-9]+$)([a-zA-Z0-9\-_' ']+)
              minLength: 1
              maxLength: 64
            CreatorRequestId:
              description: The id of the creator request.
              type: string
              minLength: 1
              maxLength: 255
            DestinationArn:
              description: destination arn
              type: string
              minLength: 1
              maxLength: 600
            CreationTime:
              description: Rfc3339TimeString
              type: string
              minLength: 20
              maxLength: 40
          x-stackQL-stringOnly: true
      x-title: CreateResolverQueryLoggingConfigRequest
      type: object
      required: []
    CreateResolverQueryLoggingConfigAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: Id
              type: string
              minLength: 1
              maxLength: 64
            ResolverQueryLogConfigId:
              description: ResolverQueryLogConfigId
              type: string
              minLength: 1
              maxLength: 64
            ResourceId:
              description: ResourceId
              type: string
              minLength: 1
              maxLength: 64
            Status:
              description: ResolverQueryLogConfigAssociationStatus
              type: string
              enum:
                - CREATING
                - ACTIVE
                - ACTION_NEEDED
                - DELETING
                - FAILED
                - OVERRIDDEN
            Error:
              description: ResolverQueryLogConfigAssociationError
              type: string
              enum:
                - NONE
                - DESTINATION_NOT_FOUND
                - ACCESS_DENIED
            ErrorMessage:
              description: ResolverQueryLogConfigAssociationErrorMessage
              type: string
            CreationTime:
              description: Rfc3339TimeString
              type: string
              minLength: 20
              maxLength: 40
          x-stackQL-stringOnly: true
      x-title: CreateResolverQueryLoggingConfigAssociationRequest
      type: object
      required: []
    CreateResolverRuleRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ResolverEndpointId:
              minLength: 1
              description: The ID of the endpoint that the rule is associated with.
              type: string
              maxLength: 64
            DomainName:
              minLength: 1
              description: DNS queries for this domain name are forwarded to the IP addresses that are specified in TargetIps
              type: string
              maxLength: 256
            RuleType:
              description: When you want to forward DNS queries for specified domain name to resolvers on your network, specify FORWARD. When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify SYSTEM.
              type: string
              enum:
                - FORWARD
                - SYSTEM
                - RECURSIVE
                - DELEGATE
            ResolverRuleId:
              description: The ID of the endpoint that the rule is associated with.
              type: string
            Arn:
              description: The Amazon Resource Name (ARN) of the resolver rule.
              type: string
            Tags:
              uniqueItems: false
              description: An array of key-value pairs to apply to this resource.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            TargetIps:
              uniqueItems: false
              description: An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/TargetAddress'
            Name:
              minLength: 0
              description: The name for the Resolver rule
              type: string
              maxLength: 64
          x-stackQL-stringOnly: true
      x-title: CreateResolverRuleRequest
      type: object
      required: []
    CreateResolverRuleAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            VPCId:
              description: The ID of the VPC that you associated the Resolver rule with.
              type: string
            ResolverRuleId:
              description: The ID of the Resolver rule that you associated with the VPC that is specified by ``VPCId``.
              type: string
            ResolverRuleAssociationId:
              description: ''
              type: string
            Name:
              description: The name of an association between a Resolver rule and a VPC.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateResolverRuleAssociationRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    firewall_domain_lists:
      name: firewall_domain_lists
      id: aws.route53resolver.firewall_domain_lists
      x-cfn-schema-name: FirewallDomainList
      x-cfn-type-name: AWS::Route53Resolver::FirewallDomainList
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__FirewallDomainList&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::FirewallDomainList"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::FirewallDomainList"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::FirewallDomainList"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/firewall_domain_lists/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/firewall_domain_lists/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/firewall_domain_lists/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.DomainCount') as domain_count,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.ManagedOwnerName') as managed_owner_name,
              JSON_EXTRACT(Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.ModificationTime') as modification_time,
              JSON_EXTRACT(Properties, '$.Domains') as domains,
              JSON_EXTRACT(Properties, '$.DomainFileUrl') as domain_file_url,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.DomainCount') as domain_count,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
                JSON_EXTRACT(detail.Properties, '$.ManagedOwnerName') as managed_owner_name,
                JSON_EXTRACT(detail.Properties, '$.CreatorRequestId') as creator_request_id,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.ModificationTime') as modification_time,
                JSON_EXTRACT(detail.Properties, '$.Domains') as domains,
                JSON_EXTRACT(detail.Properties, '$.DomainFileUrl') as domain_file_url,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
                AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'DomainCount') as domain_count,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'StatusMessage') as status_message,
                  json_extract_path_text(Properties, 'ManagedOwnerName') as managed_owner_name,
                  json_extract_path_text(Properties, 'CreatorRequestId') as creator_request_id,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'ModificationTime') as modification_time,
                  json_extract_path_text(Properties, 'Domains') as domains,
                  json_extract_path_text(Properties, 'DomainFileUrl') as domain_file_url,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'DomainCount') as domain_count,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                    json_extract_path_text(detail.Properties, 'ManagedOwnerName') as managed_owner_name,
                    json_extract_path_text(detail.Properties, 'CreatorRequestId') as creator_request_id,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'ModificationTime') as modification_time,
                    json_extract_path_text(detail.Properties, 'Domains') as domains,
                    json_extract_path_text(detail.Properties, 'DomainFileUrl') as domain_file_url,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
                    AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
                    AND listing.region = 'us-east-1'
    firewall_domain_lists_list_only:
      name: firewall_domain_lists_list_only
      id: aws.route53resolver.firewall_domain_lists_list_only
      x-cfn-schema-name: FirewallDomainList
      x-cfn-type-name: AWS::Route53Resolver::FirewallDomainList
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
                AND region = 'us-east-1'
    firewall_domain_list_tags:
      name: firewall_domain_list_tags
      id: aws.route53resolver.firewall_domain_list_tags
      x-cfn-schema-name: FirewallDomainList
      x-cfn-type-name: AWS::Route53Resolver::FirewallDomainList
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.DomainCount') as domain_count,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(detail.Properties, '$.ManagedOwnerName') as managed_owner_name,
              JSON_EXTRACT(detail.Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.ModificationTime') as modification_time,
              JSON_EXTRACT(detail.Properties, '$.Domains') as domains,
              JSON_EXTRACT(detail.Properties, '$.DomainFileUrl') as domain_file_url
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
              AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'DomainCount') as domain_count,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                json_extract_path_text(detail.Properties, 'ManagedOwnerName') as managed_owner_name,
                json_extract_path_text(detail.Properties, 'CreatorRequestId') as creator_request_id,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'ModificationTime') as modification_time,
                json_extract_path_text(detail.Properties, 'Domains') as domains,
                json_extract_path_text(detail.Properties, 'DomainFileUrl') as domain_file_url
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
                AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallDomainList'
                AND listing.region = 'us-east-1'
    firewall_rule_groups:
      name: firewall_rule_groups
      id: aws.route53resolver.firewall_rule_groups
      x-cfn-schema-name: FirewallRuleGroup
      x-cfn-type-name: AWS::Route53Resolver::FirewallRuleGroup
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__FirewallRuleGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::FirewallRuleGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::FirewallRuleGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::FirewallRuleGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/firewall_rule_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/firewall_rule_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/firewall_rule_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RuleCount') as rule_count,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.ShareStatus') as share_status,
              JSON_EXTRACT(Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.ModificationTime') as modification_time,
              JSON_EXTRACT(Properties, '$.FirewallRules') as firewall_rules,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.RuleCount') as rule_count,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
                JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
                JSON_EXTRACT(detail.Properties, '$.ShareStatus') as share_status,
                JSON_EXTRACT(detail.Properties, '$.CreatorRequestId') as creator_request_id,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.ModificationTime') as modification_time,
                JSON_EXTRACT(detail.Properties, '$.FirewallRules') as firewall_rules,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
                AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'RuleCount') as rule_count,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'StatusMessage') as status_message,
                  json_extract_path_text(Properties, 'OwnerId') as owner_id,
                  json_extract_path_text(Properties, 'ShareStatus') as share_status,
                  json_extract_path_text(Properties, 'CreatorRequestId') as creator_request_id,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'ModificationTime') as modification_time,
                  json_extract_path_text(Properties, 'FirewallRules') as firewall_rules,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'RuleCount') as rule_count,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                    json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                    json_extract_path_text(detail.Properties, 'ShareStatus') as share_status,
                    json_extract_path_text(detail.Properties, 'CreatorRequestId') as creator_request_id,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'ModificationTime') as modification_time,
                    json_extract_path_text(detail.Properties, 'FirewallRules') as firewall_rules,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
                    AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
                    AND listing.region = 'us-east-1'
    firewall_rule_groups_list_only:
      name: firewall_rule_groups_list_only
      id: aws.route53resolver.firewall_rule_groups_list_only
      x-cfn-schema-name: FirewallRuleGroup
      x-cfn-type-name: AWS::Route53Resolver::FirewallRuleGroup
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
                AND region = 'us-east-1'
    firewall_rule_group_tags:
      name: firewall_rule_group_tags
      id: aws.route53resolver.firewall_rule_group_tags
      x-cfn-schema-name: FirewallRuleGroup
      x-cfn-type-name: AWS::Route53Resolver::FirewallRuleGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.RuleCount') as rule_count,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(detail.Properties, '$.ShareStatus') as share_status,
              JSON_EXTRACT(detail.Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.ModificationTime') as modification_time,
              JSON_EXTRACT(detail.Properties, '$.FirewallRules') as firewall_rules
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
              AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'RuleCount') as rule_count,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                json_extract_path_text(detail.Properties, 'ShareStatus') as share_status,
                json_extract_path_text(detail.Properties, 'CreatorRequestId') as creator_request_id,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'ModificationTime') as modification_time,
                json_extract_path_text(detail.Properties, 'FirewallRules') as firewall_rules
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
                AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroup'
                AND listing.region = 'us-east-1'
    firewall_rule_group_associations:
      name: firewall_rule_group_associations
      id: aws.route53resolver.firewall_rule_group_associations
      x-cfn-schema-name: FirewallRuleGroupAssociation
      x-cfn-type-name: AWS::Route53Resolver::FirewallRuleGroupAssociation
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__FirewallRuleGroupAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::FirewallRuleGroupAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::FirewallRuleGroupAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::FirewallRuleGroupAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/firewall_rule_group_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/firewall_rule_group_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/firewall_rule_group_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.FirewallRuleGroupId') as firewall_rule_group_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Priority') as priority,
              JSON_EXTRACT(Properties, '$.MutationProtection') as mutation_protection,
              JSON_EXTRACT(Properties, '$.ManagedOwnerName') as managed_owner_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.ModificationTime') as modification_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.FirewallRuleGroupId') as firewall_rule_group_id,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Priority') as priority,
                JSON_EXTRACT(detail.Properties, '$.MutationProtection') as mutation_protection,
                JSON_EXTRACT(detail.Properties, '$.ManagedOwnerName') as managed_owner_name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
                JSON_EXTRACT(detail.Properties, '$.CreatorRequestId') as creator_request_id,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.ModificationTime') as modification_time,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
                AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'FirewallRuleGroupId') as firewall_rule_group_id,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Priority') as priority,
                  json_extract_path_text(Properties, 'MutationProtection') as mutation_protection,
                  json_extract_path_text(Properties, 'ManagedOwnerName') as managed_owner_name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'StatusMessage') as status_message,
                  json_extract_path_text(Properties, 'CreatorRequestId') as creator_request_id,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'ModificationTime') as modification_time,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'FirewallRuleGroupId') as firewall_rule_group_id,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Priority') as priority,
                    json_extract_path_text(detail.Properties, 'MutationProtection') as mutation_protection,
                    json_extract_path_text(detail.Properties, 'ManagedOwnerName') as managed_owner_name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                    json_extract_path_text(detail.Properties, 'CreatorRequestId') as creator_request_id,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'ModificationTime') as modification_time,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
                    AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
                    AND listing.region = 'us-east-1'
    firewall_rule_group_associations_list_only:
      name: firewall_rule_group_associations_list_only
      id: aws.route53resolver.firewall_rule_group_associations_list_only
      x-cfn-schema-name: FirewallRuleGroupAssociation
      x-cfn-type-name: AWS::Route53Resolver::FirewallRuleGroupAssociation
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
                AND region = 'us-east-1'
    firewall_rule_group_association_tags:
      name: firewall_rule_group_association_tags
      id: aws.route53resolver.firewall_rule_group_association_tags
      x-cfn-schema-name: FirewallRuleGroupAssociation
      x-cfn-type-name: AWS::Route53Resolver::FirewallRuleGroupAssociation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.FirewallRuleGroupId') as firewall_rule_group_id,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Priority') as priority,
              JSON_EXTRACT(detail.Properties, '$.MutationProtection') as mutation_protection,
              JSON_EXTRACT(detail.Properties, '$.ManagedOwnerName') as managed_owner_name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(detail.Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.ModificationTime') as modification_time
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
              AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'FirewallRuleGroupId') as firewall_rule_group_id,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Priority') as priority,
                json_extract_path_text(detail.Properties, 'MutationProtection') as mutation_protection,
                json_extract_path_text(detail.Properties, 'ManagedOwnerName') as managed_owner_name,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                json_extract_path_text(detail.Properties, 'CreatorRequestId') as creator_request_id,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'ModificationTime') as modification_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
                AND detail.data__TypeName = 'AWS::Route53Resolver::FirewallRuleGroupAssociation'
                AND listing.region = 'us-east-1'
    outpost_resolvers:
      name: outpost_resolvers
      id: aws.route53resolver.outpost_resolvers
      x-cfn-schema-name: OutpostResolver
      x-cfn-type-name: AWS::Route53Resolver::OutpostResolver
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__OutpostResolver&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::OutpostResolver"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::OutpostResolver"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::OutpostResolver"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/outpost_resolvers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/outpost_resolvers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/outpost_resolvers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(Properties, '$.PreferredInstanceType') as preferred_instance_type,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.InstanceCount') as instance_count,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.ModificationTime') as modification_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.CreatorRequestId') as creator_request_id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.OutpostArn') as outpost_arn,
                JSON_EXTRACT(detail.Properties, '$.PreferredInstanceType') as preferred_instance_type,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
                JSON_EXTRACT(detail.Properties, '$.InstanceCount') as instance_count,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.ModificationTime') as modification_time,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
                AND detail.data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'CreatorRequestId') as creator_request_id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'OutpostArn') as outpost_arn,
                  json_extract_path_text(Properties, 'PreferredInstanceType') as preferred_instance_type,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'StatusMessage') as status_message,
                  json_extract_path_text(Properties, 'InstanceCount') as instance_count,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'ModificationTime') as modification_time,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'CreatorRequestId') as creator_request_id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'OutpostArn') as outpost_arn,
                    json_extract_path_text(detail.Properties, 'PreferredInstanceType') as preferred_instance_type,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                    json_extract_path_text(detail.Properties, 'InstanceCount') as instance_count,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'ModificationTime') as modification_time,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
                    AND detail.data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
                    AND listing.region = 'us-east-1'
    outpost_resolvers_list_only:
      name: outpost_resolvers_list_only
      id: aws.route53resolver.outpost_resolvers_list_only
      x-cfn-schema-name: OutpostResolver
      x-cfn-type-name: AWS::Route53Resolver::OutpostResolver
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
                AND region = 'us-east-1'
    outpost_resolver_tags:
      name: outpost_resolver_tags
      id: aws.route53resolver.outpost_resolver_tags
      x-cfn-schema-name: OutpostResolver
      x-cfn-type-name: AWS::Route53Resolver::OutpostResolver
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(detail.Properties, '$.PreferredInstanceType') as preferred_instance_type,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(detail.Properties, '$.InstanceCount') as instance_count,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.ModificationTime') as modification_time
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
              AND detail.data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'CreatorRequestId') as creator_request_id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'OutpostArn') as outpost_arn,
                json_extract_path_text(detail.Properties, 'PreferredInstanceType') as preferred_instance_type,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                json_extract_path_text(detail.Properties, 'InstanceCount') as instance_count,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'ModificationTime') as modification_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
                AND detail.data__TypeName = 'AWS::Route53Resolver::OutpostResolver'
                AND listing.region = 'us-east-1'
    resolver_configs:
      name: resolver_configs
      id: aws.route53resolver.resolver_configs
      x-cfn-schema-name: ResolverConfig
      x-cfn-type-name: AWS::Route53Resolver::ResolverConfig
      x-identifiers:
        - ResourceId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResolverConfig&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resolver_configs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resolver_configs/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.AutodefinedReverse') as autodefined_reverse,
              JSON_EXTRACT(Properties, '$.AutodefinedReverseFlag') as autodefined_reverse_flag
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverConfig'
              AND data__Identifier = '<ResourceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
                JSON_EXTRACT(detail.Properties, '$.AutodefinedReverse') as autodefined_reverse,
                JSON_EXTRACT(detail.Properties, '$.AutodefinedReverseFlag') as autodefined_reverse_flag
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverConfig'
                AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverConfig'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'OwnerId') as owner_id,
                  json_extract_path_text(Properties, 'ResourceId') as resource_id,
                  json_extract_path_text(Properties, 'AutodefinedReverse') as autodefined_reverse,
                  json_extract_path_text(Properties, 'AutodefinedReverseFlag') as autodefined_reverse_flag
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverConfig'
                  AND data__Identifier = '<ResourceId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                    json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                    json_extract_path_text(detail.Properties, 'AutodefinedReverse') as autodefined_reverse,
                    json_extract_path_text(detail.Properties, 'AutodefinedReverseFlag') as autodefined_reverse_flag
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverConfig'
                    AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverConfig'
                    AND listing.region = 'us-east-1'
    resolver_configs_list_only:
      name: resolver_configs_list_only
      id: aws.route53resolver.resolver_configs_list_only
      x-cfn-schema-name: ResolverConfig
      x-cfn-type-name: AWS::Route53Resolver::ResolverConfig
      x-identifiers:
        - ResourceId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverConfig'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ResourceId') as resource_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverConfig'
                AND region = 'us-east-1'
    resolverdnssec_configs:
      name: resolverdnssec_configs
      id: aws.route53resolver.resolverdnssec_configs
      x-cfn-schema-name: ResolverDNSSECConfig
      x-cfn-type-name: AWS::Route53Resolver::ResolverDNSSECConfig
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResolverDNSSECConfig&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverDNSSECConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverDNSSECConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resolverdnssec_configs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resolverdnssec_configs/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ValidationStatus') as validation_status
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverDNSSECConfig'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
                JSON_EXTRACT(detail.Properties, '$.ValidationStatus') as validation_status
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverDNSSECConfig'
                AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverDNSSECConfig'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'OwnerId') as owner_id,
                  json_extract_path_text(Properties, 'ResourceId') as resource_id,
                  json_extract_path_text(Properties, 'ValidationStatus') as validation_status
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverDNSSECConfig'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                    json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                    json_extract_path_text(detail.Properties, 'ValidationStatus') as validation_status
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverDNSSECConfig'
                    AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverDNSSECConfig'
                    AND listing.region = 'us-east-1'
    resolverdnssec_configs_list_only:
      name: resolverdnssec_configs_list_only
      id: aws.route53resolver.resolverdnssec_configs_list_only
      x-cfn-schema-name: ResolverDNSSECConfig
      x-cfn-type-name: AWS::Route53Resolver::ResolverDNSSECConfig
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverDNSSECConfig'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverDNSSECConfig'
                AND region = 'us-east-1'
    resolver_query_logging_configs:
      name: resolver_query_logging_configs
      id: aws.route53resolver.resolver_query_logging_configs
      x-cfn-schema-name: ResolverQueryLoggingConfig
      x-cfn-type-name: AWS::Route53Resolver::ResolverQueryLoggingConfig
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResolverQueryLoggingConfig&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverQueryLoggingConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverQueryLoggingConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resolver_query_logging_configs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resolver_query_logging_configs/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.ShareStatus') as share_status,
              JSON_EXTRACT(Properties, '$.AssociationCount') as association_count,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.CreatorRequestId') as creator_request_id,
              JSON_EXTRACT(Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfig'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.ShareStatus') as share_status,
                JSON_EXTRACT(detail.Properties, '$.AssociationCount') as association_count,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.CreatorRequestId') as creator_request_id,
                JSON_EXTRACT(detail.Properties, '$.DestinationArn') as destination_arn,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfig'
                AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfig'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'OwnerId') as owner_id,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'ShareStatus') as share_status,
                  json_extract_path_text(Properties, 'AssociationCount') as association_count,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'CreatorRequestId') as creator_request_id,
                  json_extract_path_text(Properties, 'DestinationArn') as destination_arn,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfig'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'ShareStatus') as share_status,
                    json_extract_path_text(detail.Properties, 'AssociationCount') as association_count,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'CreatorRequestId') as creator_request_id,
                    json_extract_path_text(detail.Properties, 'DestinationArn') as destination_arn,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfig'
                    AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfig'
                    AND listing.region = 'us-east-1'
    resolver_query_logging_configs_list_only:
      name: resolver_query_logging_configs_list_only
      id: aws.route53resolver.resolver_query_logging_configs_list_only
      x-cfn-schema-name: ResolverQueryLoggingConfig
      x-cfn-type-name: AWS::Route53Resolver::ResolverQueryLoggingConfig
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfig'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfig'
                AND region = 'us-east-1'
    resolver_query_logging_config_associations:
      name: resolver_query_logging_config_associations
      id: aws.route53resolver.resolver_query_logging_config_associations
      x-cfn-schema-name: ResolverQueryLoggingConfigAssociation
      x-cfn-type-name: AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResolverQueryLoggingConfigAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resolver_query_logging_config_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resolver_query_logging_config_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ResolverQueryLogConfigId') as resolver_query_log_config_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Error') as error,
              JSON_EXTRACT(Properties, '$.ErrorMessage') as error_message,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.ResolverQueryLogConfigId') as resolver_query_log_config_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Error') as error,
                JSON_EXTRACT(detail.Properties, '$.ErrorMessage') as error_message,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation'
                AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'ResolverQueryLogConfigId') as resolver_query_log_config_id,
                  json_extract_path_text(Properties, 'ResourceId') as resource_id,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Error') as error,
                  json_extract_path_text(Properties, 'ErrorMessage') as error_message,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'ResolverQueryLogConfigId') as resolver_query_log_config_id,
                    json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Error') as error,
                    json_extract_path_text(detail.Properties, 'ErrorMessage') as error_message,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation'
                    AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation'
                    AND listing.region = 'us-east-1'
    resolver_query_logging_config_associations_list_only:
      name: resolver_query_logging_config_associations_list_only
      id: aws.route53resolver.resolver_query_logging_config_associations_list_only
      x-cfn-schema-name: ResolverQueryLoggingConfigAssociation
      x-cfn-type-name: AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation'
                AND region = 'us-east-1'
    resolver_rules:
      name: resolver_rules
      id: aws.route53resolver.resolver_rules
      x-cfn-schema-name: ResolverRule
      x-cfn-type-name: AWS::Route53Resolver::ResolverRule
      x-identifiers:
        - ResolverRuleId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResolverRule&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resolver_rules/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resolver_rules/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/resolver_rules/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ResolverEndpointId') as resolver_endpoint_id,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.RuleType') as rule_type,
              JSON_EXTRACT(Properties, '$.ResolverRuleId') as resolver_rule_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TargetIps') as target_ips,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverRule'
              AND data__Identifier = '<ResolverRuleId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ResolverEndpointId') as resolver_endpoint_id,
                JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(detail.Properties, '$.RuleType') as rule_type,
                JSON_EXTRACT(detail.Properties, '$.ResolverRuleId') as resolver_rule_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.TargetIps') as target_ips,
                JSON_EXTRACT(detail.Properties, '$.Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverRule'
                AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverRule'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ResolverEndpointId') as resolver_endpoint_id,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'RuleType') as rule_type,
                  json_extract_path_text(Properties, 'ResolverRuleId') as resolver_rule_id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'TargetIps') as target_ips,
                  json_extract_path_text(Properties, 'Name') as name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverRule'
                  AND data__Identifier = '<ResolverRuleId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ResolverEndpointId') as resolver_endpoint_id,
                    json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                    json_extract_path_text(detail.Properties, 'RuleType') as rule_type,
                    json_extract_path_text(detail.Properties, 'ResolverRuleId') as resolver_rule_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'TargetIps') as target_ips,
                    json_extract_path_text(detail.Properties, 'Name') as name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverRule'
                    AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverRule'
                    AND listing.region = 'us-east-1'
    resolver_rules_list_only:
      name: resolver_rules_list_only
      id: aws.route53resolver.resolver_rules_list_only
      x-cfn-schema-name: ResolverRule
      x-cfn-type-name: AWS::Route53Resolver::ResolverRule
      x-identifiers:
        - ResolverRuleId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResolverRuleId') as resolver_rule_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverRule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ResolverRuleId') as resolver_rule_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverRule'
                AND region = 'us-east-1'
    resolver_rule_tags:
      name: resolver_rule_tags
      id: aws.route53resolver.resolver_rule_tags
      x-cfn-schema-name: ResolverRule
      x-cfn-type-name: AWS::Route53Resolver::ResolverRule
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ResolverEndpointId') as resolver_endpoint_id,
              JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(detail.Properties, '$.RuleType') as rule_type,
              JSON_EXTRACT(detail.Properties, '$.ResolverRuleId') as resolver_rule_id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.TargetIps') as target_ips,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverRule'
              AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverRule'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ResolverEndpointId') as resolver_endpoint_id,
                json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                json_extract_path_text(detail.Properties, 'RuleType') as rule_type,
                json_extract_path_text(detail.Properties, 'ResolverRuleId') as resolver_rule_id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'TargetIps') as target_ips,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverRule'
                AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverRule'
                AND listing.region = 'us-east-1'
    resolver_rule_associations:
      name: resolver_rule_associations
      id: aws.route53resolver.resolver_rule_associations
      x-cfn-schema-name: ResolverRuleAssociation
      x-cfn-type-name: AWS::Route53Resolver::ResolverRuleAssociation
      x-identifiers:
        - ResolverRuleAssociationId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResolverRuleAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverRuleAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Route53Resolver::ResolverRuleAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resolver_rule_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resolver_rule_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VPCId') as vpc_id,
              JSON_EXTRACT(Properties, '$.ResolverRuleId') as resolver_rule_id,
              JSON_EXTRACT(Properties, '$.ResolverRuleAssociationId') as resolver_rule_association_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverRuleAssociation'
              AND data__Identifier = '<ResolverRuleAssociationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.VPCId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.ResolverRuleId') as resolver_rule_id,
                JSON_EXTRACT(detail.Properties, '$.ResolverRuleAssociationId') as resolver_rule_association_id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverRuleAssociation'
                AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverRuleAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'VPCId') as vpc_id,
                  json_extract_path_text(Properties, 'ResolverRuleId') as resolver_rule_id,
                  json_extract_path_text(Properties, 'ResolverRuleAssociationId') as resolver_rule_association_id,
                  json_extract_path_text(Properties, 'Name') as name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53Resolver::ResolverRuleAssociation'
                  AND data__Identifier = '<ResolverRuleAssociationId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'VPCId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'ResolverRuleId') as resolver_rule_id,
                    json_extract_path_text(detail.Properties, 'ResolverRuleAssociationId') as resolver_rule_association_id,
                    json_extract_path_text(detail.Properties, 'Name') as name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Route53Resolver::ResolverRuleAssociation'
                    AND detail.data__TypeName = 'AWS::Route53Resolver::ResolverRuleAssociation'
                    AND listing.region = 'us-east-1'
    resolver_rule_associations_list_only:
      name: resolver_rule_associations_list_only
      id: aws.route53resolver.resolver_rule_associations_list_only
      x-cfn-schema-name: ResolverRuleAssociation
      x-cfn-type-name: AWS::Route53Resolver::ResolverRuleAssociation
      x-identifiers:
        - ResolverRuleAssociationId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResolverRuleAssociationId') as resolver_rule_association_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverRuleAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ResolverRuleAssociationId') as resolver_rule_association_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53Resolver::ResolverRuleAssociation'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__FirewallDomainList&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateFirewallDomainList
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateFirewallDomainListRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__FirewallRuleGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateFirewallRuleGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateFirewallRuleGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__FirewallRuleGroupAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateFirewallRuleGroupAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateFirewallRuleGroupAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__OutpostResolver&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateOutpostResolver
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateOutpostResolverRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResolverConfig&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResolverConfig
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResolverConfigRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResolverDNSSECConfig&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResolverDNSSECConfig
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResolverDNSSECConfigRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResolverQueryLoggingConfig&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResolverQueryLoggingConfig
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResolverQueryLoggingConfigRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResolverQueryLoggingConfigAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResolverQueryLoggingConfigAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResolverQueryLoggingConfigAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResolverRule&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResolverRule
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResolverRuleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResolverRuleAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResolverRuleAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResolverRuleAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
