openapi: 3.0.0
info:
  title: ECS
  version: 1.0.0
paths: {}
components:
  schemas:
    ManagedScaling:
      description: The managed scaling settings for the Auto Scaling group capacity provider.
      type: object
      properties:
        MinimumScalingStepSize:
          type: integer
        MaximumScalingStepSize:
          type: integer
        Status:
          type: string
          enum:
            - DISABLED
            - ENABLED
        TargetCapacity:
          type: integer
        InstanceWarmupPeriod:
          type: integer
      additionalProperties: false
    AutoScalingGroupProvider:
      type: object
      properties:
        AutoScalingGroupArn:
          type: string
        ManagedScaling:
          $ref: '#/components/schemas/ManagedScaling'
        ManagedTerminationProtection:
          type: string
          enum:
            - DISABLED
            - ENABLED
      required:
        - AutoScalingGroupArn
      additionalProperties: false
    Tag:
      type: object
      properties:
        Key:
          type: string
        Value:
          type: string
      additionalProperties: false
    CapacityProvider:
      description: If using ec2 auto-scaling, the name of the associated capacity provider. Otherwise FARGATE, FARGATE_SPOT.
      type: string
      anyOf:
        - type: string
          enum:
            - FARGATE
            - FARGATE_SPOT
        - type: string
          minLength: 1
          maxLength: 2048
    ClusterSettings:
      description: The setting to use when creating a cluster. This parameter is used to enable CloudWatch Container Insights for a cluster. If this value is specified, it will override the containerInsights value set with PutAccountSetting or PutAccountSettingDefault.
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
      additionalProperties: false
    ClusterConfiguration:
      description: The configurations to be set at cluster level.
      type: object
      properties:
        ExecuteCommandConfiguration:
          $ref: '#/components/schemas/ExecuteCommandConfiguration'
      additionalProperties: false
    ExecuteCommandConfiguration:
      description: The configuration for ExecuteCommand.
      type: object
      properties:
        KmsKeyId:
          type: string
        Logging:
          type: string
        LogConfiguration:
          $ref: '#/components/schemas/ExecuteCommandLogConfiguration'
      additionalProperties: false
    ExecuteCommandLogConfiguration:
      description: The session logging configuration for ExecuteCommand.
      type: object
      properties:
        CloudWatchLogGroupName:
          type: string
        CloudWatchEncryptionEnabled:
          type: boolean
        S3BucketName:
          type: string
        S3EncryptionEnabled:
          type: boolean
        S3KeyPrefix:
          type: string
      additionalProperties: false
    ServiceConnectDefaults:
      description: Service Connect Configuration default for all services or tasks within this cluster
      type: object
      properties:
        Namespace:
          description: Service Connect Namespace Name or ARN default for all services or tasks within this cluster
          type: string
      additionalProperties: false
    CapacityProviderStrategyItem:
      type: object
      properties:
        Base:
          type: integer
        CapacityProvider:
          type: string
        Weight:
          type: integer
      additionalProperties: false
    Cluster:
      description: The name of the cluster
      type: string
      minLength: 1
      maxLength: 2048
    CapacityProviders:
      description: List of capacity providers to associate with the cluster
      type: array
      items:
        $ref: '#/components/schemas/CapacityProvider'
      uniqueItems: true
    DefaultCapacityProviderStrategy:
      description: List of capacity providers to associate with the cluster
      type: array
      items:
        $ref: '#/components/schemas/CapacityProviderStrategy'
    CapacityProviderStrategy:
      type: object
      properties:
        Base:
          type: integer
          minimum: 0
          maximum: 100000
        Weight:
          type: integer
          minimum: 0
          maximum: 1000
        CapacityProvider:
          $ref: '#/components/schemas/CapacityProvider'
      required:
        - CapacityProvider
      additionalProperties: false
    ClusterCapacityProviderAssociations:
      type: object
      properties:
        CapacityProviders:
          $ref: '#/components/schemas/CapacityProviders'
        Cluster:
          $ref: '#/components/schemas/Cluster'
        DefaultCapacityProviderStrategy:
          $ref: '#/components/schemas/DefaultCapacityProviderStrategy'
      required:
        - CapacityProviders
        - Cluster
        - DefaultCapacityProviderStrategy
      x-stackql-resource-name: cluster_capacity_provider_associations
      x-stackql-primaryIdentifier:
        - Cluster
    PrimaryTaskSet:
      type: object
      properties:
        Cluster:
          description: The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
          type: string
        TaskSetId:
          description: The ID or full Amazon Resource Name (ARN) of the task set.
          type: string
        Service:
          description: The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
          type: string
      required:
        - Cluster
        - Service
        - TaskSetId
      x-stackql-resource-name: primary_task_set
      x-stackql-primaryIdentifier:
        - Cluster
        - Service
    AwsVpcConfiguration:
      description: The VPC subnets and security groups associated with a task. All specified subnets and security groups must be from the same VPC.
      type: object
      properties:
        AssignPublicIp:
          description: Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
          type: string
          enum:
            - DISABLED
            - ENABLED
        SecurityGroups:
          description: The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
          type: array
          items:
            type: string
          maxItems: 5
        Subnets:
          description: The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.
          type: array
          items:
            type: string
          maxItems: 16
      required:
        - Subnets
      additionalProperties: false
    DeploymentAlarms:
      type: object
      properties:
        AlarmNames:
          type: array
          items:
            type: string
        Rollback:
          type: boolean
        Enable:
          type: boolean
      required:
        - AlarmNames
        - Rollback
        - Enable
      additionalProperties: false
    DeploymentCircuitBreaker:
      type: object
      properties:
        Enable:
          type: boolean
        Rollback:
          type: boolean
      required:
        - Enable
        - Rollback
      additionalProperties: false
    DeploymentConfiguration:
      type: object
      properties:
        DeploymentCircuitBreaker:
          $ref: '#/components/schemas/DeploymentCircuitBreaker'
        MaximumPercent:
          type: integer
        MinimumHealthyPercent:
          type: integer
        Alarms:
          $ref: '#/components/schemas/DeploymentAlarms'
      additionalProperties: false
    DeploymentController:
      type: object
      properties:
        Type:
          type: string
          enum:
            - CODE_DEPLOY
            - ECS
            - EXTERNAL
      additionalProperties: false
    LoadBalancer:
      description: 'A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer. '
      type: object
      properties:
        ContainerName:
          description: The name of the container (as it appears in a container definition) to associate with the load balancer.
          type: string
        ContainerPort:
          description: The port on the container to associate with the load balancer. This port must correspond to a containerPort in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they are launched on must allow ingress traffic on the hostPort of the port mapping.
          type: integer
        LoadBalancerName:
          description: The name of the load balancer to associate with the Amazon ECS service or task set. A load balancer name is only specified when using a Classic Load Balancer. If you are using an Application Load Balancer or a Network Load Balancer this should be omitted.
          type: string
        TargetGroupArn:
          description: >-
            The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you are using a Classic Load Balancer this should be omitted. For services using the ECS deployment controller, you can specify one or multiple target groups. For more information, see
            https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html in the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you are required to define two target groups for the load balancer. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html in the Amazon Elastic Container Service Developer Guide. If your service's task definition
            uses the awsvpc network mode (which is required for the Fargate launch type), you must choose ip as the target type, not instance, when creating your target groups because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance.
          type: string
      additionalProperties: false
    LogConfiguration:
      type: object
      required:
        - LogDriver
      properties:
        LogDriver:
          type: string
        Options:
          type: object
          x-patternProperties:
            .{1,}:
              type: string
          additionalProperties: false
        SecretOptions:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Secret'
      additionalProperties: false
    NetworkConfiguration:
      description: An object representing the network configuration for a task or service.
      type: object
      properties:
        AwsVpcConfiguration:
          $ref: '#/components/schemas/AwsVpcConfiguration'
      additionalProperties: false
    PlacementConstraint:
      type: object
      properties:
        Expression:
          type: string
        Type:
          type: string
          enum:
            - distinctInstance
            - memberOf
      required:
        - Type
      additionalProperties: false
    PlacementStrategy:
      type: object
      properties:
        Field:
          type: string
        Type:
          type: string
          enum:
            - binpack
            - random
            - spread
      required:
        - Type
      additionalProperties: false
    Secret:
      type: object
      required:
        - Name
        - ValueFrom
      properties:
        Name:
          type: string
        ValueFrom:
          type: string
      additionalProperties: false
    ServiceConnectClientAlias:
      type: object
      properties:
        Port:
          type: integer
        DnsName:
          type: string
      required:
        - Port
      additionalProperties: false
    ServiceConnectConfiguration:
      type: object
      properties:
        Enabled:
          type: boolean
        Namespace:
          type: string
        Services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceConnectService'
        LogConfiguration:
          $ref: '#/components/schemas/LogConfiguration'
      required:
        - Enabled
      additionalProperties: false
    ServiceConnectService:
      type: object
      properties:
        PortName:
          type: string
        DiscoveryName:
          type: string
        ClientAliases:
          type: array
          items:
            $ref: '#/components/schemas/ServiceConnectClientAlias'
        IngressPortOverride:
          type: integer
      required:
        - PortName
      additionalProperties: false
    ServiceRegistry:
      type: object
      properties:
        ContainerName:
          description: >-
            The container name value, already specified in the task definition, to be used for your service discovery service. If the task definition that your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination
            or a port value, but not both.
          type: string
        ContainerPort:
          description: >-
            The port value, already specified in the task definition, to be used for your service discovery service. If the task definition your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but
            not both.
          type: integer
        Port:
          description: The port value used if your service discovery service specified an SRV record. This field may be used if both the awsvpc network mode and SRV records are used.
          type: integer
        RegistryArn:
          description: The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is AWS Cloud Map. For more information, see https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html
          type: string
      additionalProperties: false
    Service:
      type: object
      properties:
        ServiceArn:
          type: string
        CapacityProviderStrategy:
          type: array
          items:
            $ref: '#/components/schemas/CapacityProviderStrategyItem'
        Cluster:
          type: string
        DeploymentConfiguration:
          $ref: '#/components/schemas/DeploymentConfiguration'
        DeploymentController:
          $ref: '#/components/schemas/DeploymentController'
        DesiredCount:
          type: integer
        EnableECSManagedTags:
          type: boolean
        EnableExecuteCommand:
          type: boolean
        HealthCheckGracePeriodSeconds:
          type: integer
        LaunchType:
          type: string
          enum:
            - EC2
            - FARGATE
            - EXTERNAL
        LoadBalancers:
          type: array
          items:
            $ref: '#/components/schemas/LoadBalancer'
        Name:
          type: string
        NetworkConfiguration:
          $ref: '#/components/schemas/NetworkConfiguration'
        PlacementConstraints:
          type: array
          items:
            $ref: '#/components/schemas/PlacementConstraint'
        PlacementStrategies:
          type: array
          items:
            $ref: '#/components/schemas/PlacementStrategy'
        PlatformVersion:
          type: string
          default: LATEST
        PropagateTags:
          type: string
          enum:
            - SERVICE
            - TASK_DEFINITION
        Role:
          type: string
        SchedulingStrategy:
          type: string
          enum:
            - DAEMON
            - REPLICA
        ServiceConnectConfiguration:
          $ref: '#/components/schemas/ServiceConnectConfiguration'
        ServiceName:
          type: string
        ServiceRegistries:
          type: array
          items:
            $ref: '#/components/schemas/ServiceRegistry'
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        TaskDefinition:
          type: string
      x-stackql-resource-name: service
      x-stackql-primaryIdentifier:
        - ServiceArn
        - Cluster
    ContainerDefinition:
      description: List of container definitions that are passed to the Docker daemon on a container instance
      type: object
      required:
        - Name
        - Image
      properties:
        Command:
          type: array
          x-insertionOrder: true
          items:
            type: string
        Cpu:
          type: integer
        DependsOn:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ContainerDependency'
        DisableNetworking:
          type: boolean
        DnsSearchDomains:
          type: array
          x-insertionOrder: false
          items:
            type: string
        DnsServers:
          type: array
          x-insertionOrder: false
          items:
            type: string
        DockerLabels:
          type: object
          x-patternProperties:
            .{1,}:
              type: string
          additionalProperties: false
        DockerSecurityOptions:
          type: array
          x-insertionOrder: false
          items:
            type: string
        EntryPoint:
          type: array
          x-insertionOrder: true
          items:
            type: string
        Environment:
          description: The environment variables to pass to a container
          type: array
          x-insertionOrder: true
          uniqueItems: true
          items:
            $ref: '#/components/schemas/KeyValuePair'
        EnvironmentFiles:
          description: The list of one or more files that contain the environment variables to pass to a container
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/EnvironmentFile'
        Essential:
          type: boolean
        ExtraHosts:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/HostEntry'
        FirelensConfiguration:
          $ref: '#/components/schemas/FirelensConfiguration'
        HealthCheck:
          $ref: '#/components/schemas/HealthCheck'
        Hostname:
          type: string
        Image:
          description: The image used to start a container. This string is passed directly to the Docker daemon.
          type: string
        Links:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
        LinuxParameters:
          $ref: '#/components/schemas/LinuxParameters'
        LogConfiguration:
          $ref: '#/components/schemas/LogConfiguration'
        Memory:
          description: The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
          type: integer
        MemoryReservation:
          type: integer
        MountPoints:
          type: array
          x-insertionOrder: true
          uniqueItems: true
          items:
            $ref: '#/components/schemas/MountPoint'
        Name:
          description: The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
          type: string
        PortMappings:
          description: Port mappings allow containers to access ports on the host container instance to send or receive traffic.
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PortMapping'
        Privileged:
          type: boolean
        ReadonlyRootFilesystem:
          type: boolean
        RepositoryCredentials:
          $ref: '#/components/schemas/RepositoryCredentials'
        ResourceRequirements:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ResourceRequirement'
        Secrets:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Secret'
        StartTimeout:
          type: integer
        StopTimeout:
          type: integer
        Ulimits:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Ulimit'
        User:
          type: string
        VolumesFrom:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/VolumeFrom'
        WorkingDirectory:
          type: string
        Interactive:
          type: boolean
        PseudoTerminal:
          type: boolean
        SystemControls:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SystemControl'
      additionalProperties: false
    SystemControl:
      type: object
      properties:
        Namespace:
          type: string
        Value:
          type: string
      additionalProperties: false
    ContainerDependency:
      type: object
      properties:
        ContainerName:
          type: string
        Condition:
          type: string
      additionalProperties: false
    Device:
      type: object
      properties:
        ContainerPath:
          type: string
        HostPath:
          type: string
        Permissions:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
      additionalProperties: false
    DockerVolumeConfiguration:
      type: object
      properties:
        Autoprovision:
          type: boolean
        Driver:
          type: string
        DriverOpts:
          type: object
          x-patternProperties:
            .{1,}:
              type: string
          additionalProperties: false
        Labels:
          type: object
          x-patternProperties:
            .{1,}:
              type: string
          additionalProperties: false
        Scope:
          type: string
      additionalProperties: false
    AuthorizationConfig:
      type: object
      properties:
        IAM:
          type: string
          enum:
            - ENABLED
            - DISABLED
        AccessPointId:
          type: string
      additionalProperties: false
    EFSVolumeConfiguration:
      type: object
      required:
        - FilesystemId
      properties:
        FilesystemId:
          type: string
        RootDirectory:
          type: string
        TransitEncryption:
          type: string
          enum:
            - ENABLED
            - DISABLED
        TransitEncryptionPort:
          type: integer
        AuthorizationConfig:
          $ref: '#/components/schemas/AuthorizationConfig'
      additionalProperties: false
    EnvironmentFile:
      type: object
      properties:
        Value:
          type: string
        Type:
          type: string
      additionalProperties: false
    EphemeralStorage:
      type: object
      properties:
        SizeInGiB:
          type: integer
      additionalProperties: false
    FirelensConfiguration:
      type: object
      properties:
        Type:
          type: string
        Options:
          type: object
          x-patternProperties:
            .{1,}:
              type: string
          additionalProperties: false
      additionalProperties: false
    HealthCheck:
      description: The health check command and associated configuration parameters for the container.
      type: object
      properties:
        Command:
          description: A string array representing the command that the container runs to determine if it is healthy.
          type: array
          x-insertionOrder: true
          items:
            type: string
        Interval:
          description: The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
          type: integer
        Timeout:
          description: The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.
          type: integer
        Retries:
          description: The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.
          type: integer
        StartPeriod:
          description: The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.
          type: integer
      additionalProperties: false
    HostEntry:
      type: object
      properties:
        Hostname:
          type: string
        IpAddress:
          type: string
      additionalProperties: false
    HostVolumeProperties:
      type: object
      properties:
        SourcePath:
          type: string
      additionalProperties: false
    InferenceAccelerator:
      type: object
      properties:
        DeviceName:
          type: string
        DeviceType:
          type: string
      additionalProperties: false
    KernelCapabilities:
      type: object
      properties:
        Add:
          type: array
          x-insertionOrder: false
          items:
            type: string
        Drop:
          type: array
          x-insertionOrder: false
          items:
            type: string
      additionalProperties: false
    KeyValuePair:
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
      additionalProperties: false
    LinuxParameters:
      type: object
      properties:
        Capabilities:
          $ref: '#/components/schemas/KernelCapabilities'
        Devices:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Device'
        InitProcessEnabled:
          type: boolean
        MaxSwap:
          type: integer
        SharedMemorySize:
          type: integer
        Swappiness:
          type: integer
        Tmpfs:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tmpfs'
      additionalProperties: false
    PortMapping:
      type: object
      properties:
        Name:
          type: string
        ContainerPort:
          type: integer
        ContainerPortRange:
          type: string
        HostPort:
          type: integer
        Protocol:
          type: string
        AppProtocol:
          type: string
          enum:
            - http
            - http2
            - grpc
      additionalProperties: false
    MountPoint:
      type: object
      properties:
        ContainerPath:
          type: string
        ReadOnly:
          type: boolean
        SourceVolume:
          type: string
      additionalProperties: false
    ProxyConfiguration:
      type: object
      required:
        - ContainerName
      properties:
        ContainerName:
          type: string
        ProxyConfigurationProperties:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/KeyValuePair'
        Type:
          type: string
      additionalProperties: false
    RepositoryCredentials:
      type: object
      properties:
        CredentialsParameter:
          type: string
      additionalProperties: false
    ResourceRequirement:
      type: object
      required:
        - Type
        - Value
      properties:
        Type:
          type: string
        Value:
          type: string
      additionalProperties: false
    RuntimePlatform:
      type: object
      properties:
        CpuArchitecture:
          type: string
        OperatingSystemFamily:
          type: string
      additionalProperties: false
    TaskDefinitionPlacementConstraint:
      type: object
      required:
        - Type
      properties:
        Type:
          type: string
        Expression:
          type: string
      additionalProperties: false
    Tmpfs:
      type: object
      required:
        - Size
      properties:
        ContainerPath:
          type: string
        MountOptions:
          type: array
          x-insertionOrder: false
          items:
            type: string
        Size:
          type: integer
      additionalProperties: false
    Ulimit:
      type: object
      required:
        - HardLimit
        - Name
        - SoftLimit
      properties:
        HardLimit:
          type: integer
        Name:
          type: string
        SoftLimit:
          type: integer
      additionalProperties: false
    Volume:
      type: object
      properties:
        DockerVolumeConfiguration:
          $ref: '#/components/schemas/DockerVolumeConfiguration'
        EFSVolumeConfiguration:
          $ref: '#/components/schemas/EFSVolumeConfiguration'
        Host:
          $ref: '#/components/schemas/HostVolumeProperties'
        Name:
          type: string
      additionalProperties: false
    VolumeFrom:
      type: object
      properties:
        ReadOnly:
          type: boolean
        SourceContainer:
          type: string
      additionalProperties: false
    TaskDefinition:
      type: object
      properties:
        TaskDefinitionArn:
          description: The Amazon Resource Name (ARN) of the Amazon ECS task definition
          type: string
        Family:
          type: string
        ContainerDefinitions:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ContainerDefinition'
        Cpu:
          type: string
        ExecutionRoleArn:
          type: string
        EphemeralStorage:
          $ref: '#/components/schemas/EphemeralStorage'
        InferenceAccelerators:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/InferenceAccelerator'
        Memory:
          type: string
        NetworkMode:
          type: string
        PlacementConstraints:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TaskDefinitionPlacementConstraint'
        ProxyConfiguration:
          $ref: '#/components/schemas/ProxyConfiguration'
        RequiresCompatibilities:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
        TaskRoleArn:
          type: string
        Volumes:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Volume'
        PidMode:
          type: string
        RuntimePlatform:
          $ref: '#/components/schemas/RuntimePlatform'
        IpcMode:
          type: string
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: task_definition
      x-stackql-primaryIdentifier:
        - TaskDefinitionArn
    Scale:
      type: object
      properties:
        Unit:
          description: The unit of measure for the scale value.
          type: string
          enum:
            - PERCENT
        Value:
          description: The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
          type: number
          minimum: 0
          maximum: 100
      additionalProperties: false
    TaskSet:
      type: object
      properties:
        Cluster:
          description: The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
          type: string
        ExternalId:
          description: 'An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value. '
          type: string
        Id:
          description: The ID of the task set.
          type: string
        LaunchType:
          description: 'The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide. '
          type: string
          enum:
            - EC2
            - FARGATE
        LoadBalancers:
          type: array
          items:
            $ref: '#/components/schemas/LoadBalancer'
        NetworkConfiguration:
          $ref: '#/components/schemas/NetworkConfiguration'
        PlatformVersion:
          description: The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
          type: string
        Scale:
          description: A floating-point percentage of the desired number of tasks to place and keep running in the task set.
          $ref: '#/components/schemas/Scale'
        Service:
          description: The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
          type: string
        ServiceRegistries:
          description: The details of the service discovery registries to assign to this task set. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html.
          type: array
          items:
            $ref: '#/components/schemas/ServiceRegistry'
        TaskDefinition:
          description: The short name or full Amazon Resource Name (ARN) of the task definition for the tasks in the task set to use.
          type: string
      required:
        - Cluster
        - Service
        - TaskDefinition
      x-stackql-resource-name: task_set
      x-stackql-primaryIdentifier:
        - Cluster
        - Service
        - Id
  x-stackQL-resources:
    cluster_capacity_provider_associations:
      name: cluster_capacity_provider_associations
      id: aws.ecs.cluster_capacity_provider_associations
      x-cfn-schema-name: ClusterCapacityProviderAssociations
      x-type: get
      x-identifiers:
        - Cluster
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECS::ClusterCapacityProviderAssociations'
    primary_task_sets:
      name: primary_task_sets
      id: aws.ecs.primary_task_sets
      x-cfn-schema-name: PrimaryTaskSet
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Cluster') as cluster,
              JSON_EXTRACT(Properties, '$.Service') as service
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECS::PrimaryTaskSet'
    primary_task_set:
      name: primary_task_set
      id: aws.ecs.primary_task_set
      x-cfn-schema-name: PrimaryTaskSet
      x-type: get
      x-identifiers:
        - Cluster
        - Service
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Cluster') as cluster,
              JSON_EXTRACT(Properties, '$.TaskSetId') as task_set_id,
              JSON_EXTRACT(Properties, '$.Service') as service
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECS::PrimaryTaskSet'
    services:
      name: services
      id: aws.ecs.services
      x-cfn-schema-name: Service
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServiceArn') as service_arn,
              JSON_EXTRACT(Properties, '$.Cluster') as cluster
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECS::Service'
    service:
      name: service
      id: aws.ecs.service
      x-cfn-schema-name: Service
      x-type: get
      x-identifiers:
        - ServiceArn
        - Cluster
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServiceArn') as service_arn,
              JSON_EXTRACT(Properties, '$.CapacityProviderStrategy') as capacity_provider_strategy,
              JSON_EXTRACT(Properties, '$.Cluster') as cluster,
              JSON_EXTRACT(Properties, '$.DeploymentConfiguration.DeploymentCircuitBreaker') as deployment_configuration_deployment_circuit_breaker,
              JSON_EXTRACT(Properties, '$.DeploymentConfiguration.MaximumPercent') as deployment_configuration_maximum_percent,
              JSON_EXTRACT(Properties, '$.DeploymentConfiguration.MinimumHealthyPercent') as deployment_configuration_minimum_healthy_percent,
              JSON_EXTRACT(Properties, '$.DeploymentConfiguration.Alarms') as deployment_configuration_alarms,
              JSON_EXTRACT(Properties, '$.DeploymentController.Type') as deployment_controller_type,
              JSON_EXTRACT(Properties, '$.DesiredCount') as desired_count,
              JSON_EXTRACT(Properties, '$.EnableECSManagedTags') as enable_ec_smanaged_tags,
              JSON_EXTRACT(Properties, '$.EnableExecuteCommand') as enable_execute_command,
              JSON_EXTRACT(Properties, '$.HealthCheckGracePeriodSeconds') as health_check_grace_period_seconds,
              JSON_EXTRACT(Properties, '$.LaunchType') as launch_type,
              JSON_EXTRACT(Properties, '$.LoadBalancers') as load_balancers,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.NetworkConfiguration.AwsVpcConfiguration') as network_configuration_aws_vpc_configuration,
              JSON_EXTRACT(Properties, '$.PlacementConstraints') as placement_constraints,
              JSON_EXTRACT(Properties, '$.PlacementStrategies') as placement_strategies,
              JSON_EXTRACT(Properties, '$.PlatformVersion') as platform_version,
              JSON_EXTRACT(Properties, '$.PropagateTags') as propagate_tags,
              JSON_EXTRACT(Properties, '$.Role') as role,
              JSON_EXTRACT(Properties, '$.SchedulingStrategy') as scheduling_strategy,
              JSON_EXTRACT(Properties, '$.ServiceConnectConfiguration.Enabled') as service_connect_configuration_enabled,
              JSON_EXTRACT(Properties, '$.ServiceConnectConfiguration.Namespace') as service_connect_configuration_namespace,
              JSON_EXTRACT(Properties, '$.ServiceConnectConfiguration.Services') as service_connect_configuration_services,
              JSON_EXTRACT(Properties, '$.ServiceConnectConfiguration.LogConfiguration') as service_connect_configuration_log_configuration,
              JSON_EXTRACT(Properties, '$.ServiceName') as service_name,
              JSON_EXTRACT(Properties, '$.ServiceRegistries') as service_registries,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TaskDefinition') as task_definition
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECS::Service'
    task_definitions:
      name: task_definitions
      id: aws.ecs.task_definitions
      x-cfn-schema-name: TaskDefinition
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TaskDefinitionArn') as task_definition_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECS::TaskDefinition'
    task_definition:
      name: task_definition
      id: aws.ecs.task_definition
      x-cfn-schema-name: TaskDefinition
      x-type: get
      x-identifiers:
        - TaskDefinitionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TaskDefinitionArn') as task_definition_arn,
              JSON_EXTRACT(Properties, '$.Family') as family,
              JSON_EXTRACT(Properties, '$.ContainerDefinitions') as container_definitions,
              JSON_EXTRACT(Properties, '$.Cpu') as cpu,
              JSON_EXTRACT(Properties, '$.ExecutionRoleArn') as execution_role_arn,
              JSON_EXTRACT(Properties, '$.EphemeralStorage.SizeInGiB') as ephemeral_storage_size_in_gi_b,
              JSON_EXTRACT(Properties, '$.InferenceAccelerators') as inference_accelerators,
              JSON_EXTRACT(Properties, '$.Memory') as memory,
              JSON_EXTRACT(Properties, '$.NetworkMode') as network_mode,
              JSON_EXTRACT(Properties, '$.PlacementConstraints') as placement_constraints,
              JSON_EXTRACT(Properties, '$.ProxyConfiguration.ContainerName') as proxy_configuration_container_name,
              JSON_EXTRACT(Properties, '$.ProxyConfiguration.ProxyConfigurationProperties') as proxy_configuration_proxy_configuration_properties,
              JSON_EXTRACT(Properties, '$.ProxyConfiguration.Type') as proxy_configuration_type,
              JSON_EXTRACT(Properties, '$.RequiresCompatibilities') as requires_compatibilities,
              JSON_EXTRACT(Properties, '$.TaskRoleArn') as task_role_arn,
              JSON_EXTRACT(Properties, '$.Volumes') as volumes,
              JSON_EXTRACT(Properties, '$.PidMode') as pid_mode,
              JSON_EXTRACT(Properties, '$.RuntimePlatform.CpuArchitecture') as runtime_platform_cpu_architecture,
              JSON_EXTRACT(Properties, '$.RuntimePlatform.OperatingSystemFamily') as runtime_platform_operating_system_family,
              JSON_EXTRACT(Properties, '$.IpcMode') as ipc_mode,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECS::TaskDefinition'
    task_sets:
      name: task_sets
      id: aws.ecs.task_sets
      x-cfn-schema-name: TaskSet
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Cluster') as cluster,
              JSON_EXTRACT(Properties, '$.Service') as service,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECS::TaskSet'
    task_set:
      name: task_set
      id: aws.ecs.task_set
      x-cfn-schema-name: TaskSet
      x-type: get
      x-identifiers:
        - Cluster
        - Service
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Cluster') as cluster,
              JSON_EXTRACT(Properties, '$.ExternalId') as external_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LaunchType') as launch_type,
              JSON_EXTRACT(Properties, '$.LoadBalancers') as load_balancers,
              JSON_EXTRACT(Properties, '$.NetworkConfiguration.AwsVpcConfiguration') as network_configuration_aws_vpc_configuration,
              JSON_EXTRACT(Properties, '$.PlatformVersion') as platform_version,
              JSON_EXTRACT(Properties, '$.Scale.Unit') as scale_unit,
              JSON_EXTRACT(Properties, '$.Scale.Value') as scale_value,
              JSON_EXTRACT(Properties, '$.Service') as service,
              JSON_EXTRACT(Properties, '$.ServiceRegistries') as service_registries,
              JSON_EXTRACT(Properties, '$.TaskDefinition') as task_definition
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECS::TaskSet'
