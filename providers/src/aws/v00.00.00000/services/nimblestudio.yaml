openapi: 3.0.0
info:
  title: NimbleStudio
  version: 1.0.0
paths: {}
components:
  schemas:
    AutomaticTerminationMode:
      type: string
      enum:
        - DEACTIVATED
        - ACTIVATED
    SessionBackupMode:
      type: string
      enum:
        - AUTOMATIC
        - DEACTIVATED
    SessionPersistenceMode:
      type: string
      enum:
        - DEACTIVATED
        - ACTIVATED
    StreamConfiguration:
      type: object
      description: <p>A configuration for a streaming session.</p>
      properties:
        ClipboardMode:
          $ref: '#/components/schemas/StreamingClipboardMode'
        Ec2InstanceTypes:
          type: array
          items:
            $ref: '#/components/schemas/StreamingInstanceType'
          maxItems: 30
          minItems: 1
          description: |-
            <p>The EC2 instance types that users can select from when launching a streaming session
                        with this launch profile.</p>
        MaxSessionLengthInMinutes:
          type: number
          default: 690
          maximum: 43200
          minimum: 1
          description: |-
            <p>The length of time, in minutes, that a streaming session can be active before it is
                        stopped or terminated. After this point, Nimble Studio automatically terminates or
                        stops the session. The default length of time is 690 minutes, and the maximum length of
                        time is 30 days.</p>
        StreamingImageIds:
          type: array
          items:
            type: string
            maxLength: 22
            minLength: 0
            pattern: ^[a-zA-Z0-9-_]*$
          maxItems: 20
          minItems: 1
          description: |-
            <p>The streaming images that users can select from when launching a streaming session
                        with this launch profile.</p>
        MaxStoppedSessionLengthInMinutes:
          type: number
          default: 0
          maximum: 5760
          minimum: 0
          description: |-
            <p>Integer that determines if you can start and stop your sessions and how long a session
                        can stay in the <code>STOPPED</code> state. The default value is 0. The maximum value is
                        5760.</p>
                     <p>This field is allowed only when <code>sessionPersistenceMode</code> is
                            <code>ACTIVATED</code> and <code>automaticTerminationMode</code> is
                            <code>ACTIVATED</code>.</p>
                     <p>If the value is set to 0, your sessions can’t be <code>STOPPED</code>. If you then
                        call <code>StopStreamingSession</code>, the session fails. If the time that a session
                        stays in the <code>READY</code> state exceeds the <code>maxSessionLengthInMinutes</code>
                        value, the session will automatically be terminated (instead of
                        <code>STOPPED</code>).</p>
                     <p>If the value is set to a positive number, the session can be stopped. You can call
                            <code>StopStreamingSession</code> to stop sessions in the <code>READY</code> state.
                        If the time that a session stays in the <code>READY</code> state exceeds the
                            <code>maxSessionLengthInMinutes</code> value, the session will automatically be
                        stopped (instead of terminated).</p>
        SessionStorage:
          $ref: '#/components/schemas/StreamConfigurationSessionStorage'
        SessionBackup:
          $ref: '#/components/schemas/StreamConfigurationSessionBackup'
        SessionPersistenceMode:
          $ref: '#/components/schemas/SessionPersistenceMode'
        VolumeConfiguration:
          $ref: '#/components/schemas/VolumeConfiguration'
        AutomaticTerminationMode:
          $ref: '#/components/schemas/AutomaticTerminationMode'
      required:
        - ClipboardMode
        - Ec2InstanceTypes
        - StreamingImageIds
      additionalProperties: false
    StreamConfigurationSessionBackup:
      type: object
      description: |-
        <p>Configures how streaming sessions are backed up when launched from this launch
                    profile.</p>
      properties:
        Mode:
          $ref: '#/components/schemas/SessionBackupMode'
        MaxBackupsToRetain:
          type: number
          default: 0
          maximum: 10
          minimum: 0
          description: |-
            <p>The maximum number of backups that each streaming session created from this launch
                        profile can have.</p>
      additionalProperties: false
    StreamConfigurationSessionStorage:
      type: object
      description: <p>The configuration for a streaming session’s upload storage.</p>
      properties:
        Root:
          $ref: '#/components/schemas/StreamingSessionStorageRoot'
        Mode:
          type: array
          items:
            $ref: '#/components/schemas/StreamingSessionStorageMode'
          minItems: 1
          description: |-
            <p>Allows artists to upload files to their workstations. The only valid option is
                            <code>UPLOAD</code>.</p>
      required:
        - Mode
      additionalProperties: false
    StreamingClipboardMode:
      type: string
      enum:
        - ENABLED
        - DISABLED
    StreamingInstanceType:
      type: string
      enum:
        - g4dn.xlarge
        - g4dn.2xlarge
        - g4dn.4xlarge
        - g4dn.8xlarge
        - g4dn.12xlarge
        - g4dn.16xlarge
        - g3.4xlarge
        - g3s.xlarge
        - g5.xlarge
        - g5.2xlarge
        - g5.4xlarge
        - g5.8xlarge
        - g5.16xlarge
    StreamingSessionStorageMode:
      type: string
      enum:
        - UPLOAD
    StreamingSessionStorageRoot:
      type: object
      description: |-
        <p>The upload storage root location (folder) on streaming workstations where files are
                    uploaded.</p>
      properties:
        Linux:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^(\$HOME|/)[/]?([A-Za-z0-9-_]+/)*([A-Za-z0-9_-]+)$
          description: <p>The folder path in Linux workstations where files are uploaded.</p>
        Windows:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^((\%HOMEPATH\%)|[a-zA-Z]:)[\\/](?:[a-zA-Z0-9_-]+[\\/])*[a-zA-Z0-9_-]+$
          description: <p>The folder path in Windows workstations where files are uploaded.</p>
      additionalProperties: false
    Tags:
      type: object
      x-patternProperties:
        .+:
          type: string
      additionalProperties: false
    VolumeConfiguration:
      type: object
      description: |-
        <p>Custom volume configuration for the root volumes that are attached to streaming
                    sessions.</p>
                 <p>This parameter is only allowed when <code>sessionPersistenceMode</code> is
                        <code>ACTIVATED</code>.</p>
      properties:
        Size:
          type: number
          default: 500
          maximum: 16000
          minimum: 100
          description: |-
            <p>The size of the root volume that is attached to the streaming session. The root volume
                        size is measured in GiBs.</p>
        Throughput:
          type: number
          default: 125
          maximum: 1000
          minimum: 125
          description: |-
            <p>The throughput to provision for the root volume that is attached to the streaming
                        session. The throughput is measured in MiB/s.</p>
        Iops:
          type: number
          default: 3000
          maximum: 16000
          minimum: 3000
          description: |-
            <p>The number of I/O operations per second for the root volume that is attached to
                        streaming session.</p>
      additionalProperties: false
    LaunchProfile:
      type: object
      properties:
        Description:
          type: string
          maxLength: 256
          minLength: 0
          description: <p>The description.</p>
        Ec2SubnetIds:
          type: array
          items:
            type: string
          maxItems: 6
          minItems: 0
          description: |-
            <p>Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from.
                        These subnets must support the specified instance types. </p>
        LaunchProfileId:
          type: string
        LaunchProfileProtocolVersions:
          type: array
          items:
            type: string
            maxLength: 10
            minLength: 0
            pattern: ^2021\-03\-31$
            description: |-
              <p>The version number of the protocol that is used by the launch profile. The only valid
                          version is "2021-03-31".</p>
          description: |-
            <p>The version number of the protocol that is used by the launch profile. The only valid
                        version is "2021-03-31".</p>
        Name:
          type: string
          maxLength: 64
          minLength: 1
          description: <p>The name for the launch profile.</p>
        StreamConfiguration:
          $ref: '#/components/schemas/StreamConfiguration'
        StudioComponentIds:
          type: array
          items:
            type: string
          maxItems: 100
          minItems: 1
          description: |-
            <p>Unique identifiers for a collection of studio components that can be used with this
                        launch profile.</p>
        StudioId:
          type: string
          description: <p>The studio ID. </p>
        Tags:
          $ref: '#/components/schemas/Tags'
      required:
        - StudioId
        - Name
        - StudioComponentIds
        - Ec2SubnetIds
        - StreamConfiguration
        - LaunchProfileProtocolVersions
      x-stackql-resource-name: launch_profile
      x-stackql-primaryIdentifier:
        - LaunchProfileId
        - StudioId
    StreamingImageEncryptionConfiguration:
      type: object
      description: <p>TODO</p>
      properties:
        KeyType:
          $ref: '#/components/schemas/StreamingImageEncryptionConfigurationKeyType'
        KeyArn:
          type: string
          minLength: 4
          pattern: ^arn:.*
          description: <p>The ARN for a KMS key that is used to encrypt studio data.</p>
      required:
        - KeyType
      additionalProperties: false
    StreamingImageEncryptionConfigurationKeyType:
      type: string
      description: <p/>
      enum:
        - CUSTOMER_MANAGED_KEY
    StreamingImage:
      type: object
      properties:
        Description:
          type: string
          maxLength: 256
          minLength: 0
          description: <p>A human-readable description of the streaming image.</p>
        Ec2ImageId:
          type: string
          pattern: ^ami-[0-9A-z]+$
          description: <p>The ID of an EC2 machine image with which to create this streaming image.</p>
        EncryptionConfiguration:
          $ref: '#/components/schemas/StreamingImageEncryptionConfiguration'
        EulaIds:
          type: array
          items:
            type: string
          description: <p>The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.</p>
        Name:
          type: string
          maxLength: 64
          minLength: 0
          description: <p>A friendly name for a streaming image resource.</p>
        Owner:
          type: string
          description: <p>The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.</p>
        Platform:
          type: string
          pattern: ^[a-zA-Z]*$
          description: <p>The platform of the streaming image, either WINDOWS or LINUX.</p>
        StreamingImageId:
          type: string
        StudioId:
          type: string
          description: <p>The studioId. </p>
        Tags:
          $ref: '#/components/schemas/Tags'
      required:
        - StudioId
        - Ec2ImageId
        - Name
      x-stackql-resource-name: streaming_image
      x-stackql-primaryIdentifier:
        - StudioId
        - StreamingImageId
    StudioEncryptionConfiguration:
      type: object
      description: <p>Configuration of the encryption method that is used for the studio.</p>
      properties:
        KeyType:
          $ref: '#/components/schemas/StudioEncryptionConfigurationKeyType'
        KeyArn:
          type: string
          minLength: 4
          pattern: ^arn:.*
          description: <p>The ARN for a KMS key that is used to encrypt studio data.</p>
      required:
        - KeyType
      additionalProperties: false
    StudioEncryptionConfigurationKeyType:
      type: string
      description: <p>The type of KMS key that is used to encrypt studio data.</p>
      enum:
        - AWS_OWNED_KEY
        - CUSTOMER_MANAGED_KEY
    Studio:
      type: object
      properties:
        AdminRoleArn:
          type: string
          description: <p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.</p>
        DisplayName:
          type: string
          maxLength: 64
          minLength: 0
          description: <p>A friendly name for the studio.</p>
        HomeRegion:
          type: string
          maxLength: 50
          minLength: 0
          pattern: '[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]'
          description: <p>The Amazon Web Services Region where the studio resource is located.</p>
        SsoClientId:
          type: string
          description: <p>The Amazon Web Services SSO application client ID used to integrate with Amazon Web Services SSO to enable Amazon Web Services SSO users to log in to Nimble Studio portal.</p>
        StudioEncryptionConfiguration:
          $ref: '#/components/schemas/StudioEncryptionConfiguration'
        StudioId:
          type: string
        StudioName:
          type: string
          maxLength: 64
          minLength: 3
          pattern: ^[a-z0-9]*$
          description: <p>The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.</p>
        StudioUrl:
          type: string
          description: <p>The address of the web page for the studio.</p>
        Tags:
          $ref: '#/components/schemas/Tags'
        UserRoleArn:
          type: string
          description: <p>The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.</p>
      required:
        - DisplayName
        - UserRoleArn
        - AdminRoleArn
        - StudioName
      x-stackql-resource-name: studio
      x-stackql-primaryIdentifier:
        - StudioId
    ActiveDirectoryComputerAttribute:
      type: object
      description: |-
        <p>An LDAP attribute of an Active Directory computer account, in the form of a name:value
                    pair.</p>
      properties:
        Name:
          type: string
          maxLength: 40
          minLength: 1
          description: <p>The name for the LDAP attribute.</p>
        Value:
          type: string
          maxLength: 64
          minLength: 1
          description: <p>The value for the LDAP attribute.</p>
      additionalProperties: false
    ActiveDirectoryConfiguration:
      type: object
      description: |-
        <p>The configuration for a Microsoft Active Directory (Microsoft AD) studio
                    resource.</p>
      properties:
        ComputerAttributes:
          type: array
          items:
            $ref: '#/components/schemas/ActiveDirectoryComputerAttribute'
          maxItems: 50
          minItems: 0
          description: <p>A collection of custom attributes for an Active Directory computer.</p>
        DirectoryId:
          type: string
          description: |-
            <p>The directory ID of the Directory Service for Microsoft Active Directory to access
                        using this studio component.</p>
        OrganizationalUnitDistinguishedName:
          type: string
          maxLength: 2000
          minLength: 1
          description: |-
            <p>The distinguished name (DN) and organizational unit (OU) of an Active Directory
                        computer.</p>
      additionalProperties: false
    ComputeFarmConfiguration:
      type: object
      description: <p>The configuration for a render farm that is associated with a studio resource.</p>
      properties:
        ActiveDirectoryUser:
          type: string
          description: |-
            <p>The name of an Active Directory user that is used on ComputeFarm worker
                        instances.</p>
        Endpoint:
          type: string
          description: |-
            <p>The endpoint of the ComputeFarm that is accessed by the studio component
                        resource.</p>
      additionalProperties: false
    LaunchProfilePlatform:
      type: string
      enum:
        - LINUX
        - WINDOWS
    LicenseServiceConfiguration:
      type: object
      description: |-
        <p>The configuration for a license service that is associated with a studio
                    resource.</p>
      properties:
        Endpoint:
          type: string
          description: |-
            <p>The endpoint of the license service that is accessed by the studio component
                        resource.</p>
      additionalProperties: false
    ScriptParameterKeyValue:
      type: object
      description: <p>A parameter for a studio component script, in the form of a key:value pair.</p>
      properties:
        Key:
          type: string
          maxLength: 64
          minLength: 1
          pattern: ^[a-zA-Z_][a-zA-Z0-9_]+$
          description: <p>A script parameter key.</p>
        Value:
          type: string
          maxLength: 256
          minLength: 1
          description: <p>A script parameter value.</p>
      additionalProperties: false
    SharedFileSystemConfiguration:
      type: object
      description: |-
        <p>The configuration for a shared file storage system that is associated with a studio
                    resource.</p>
      properties:
        Endpoint:
          type: string
          description: |-
            <p>The endpoint of the shared file system that is accessed by the studio component
                        resource.</p>
        FileSystemId:
          type: string
          description: <p>The unique identifier for a file system.</p>
        LinuxMountPoint:
          type: string
          maxLength: 128
          minLength: 0
          pattern: ^(/?|(\$HOME)?(/[^/\n\s\\]+)*)$
          description: <p>The mount location for a shared file system on a Linux virtual workstation.</p>
        ShareName:
          type: string
          description: <p>The name of the file share.</p>
        WindowsMountDrive:
          type: string
          pattern: ^[A-Z]$
          description: <p>The mount location for a shared file system on a Windows virtual workstation.</p>
      additionalProperties: false
    StudioComponentConfiguration:
      description: <p>The configuration of the studio component, based on component type.</p>
      oneOf:
        - type: object
          title: ActiveDirectoryConfiguration
          properties:
            ActiveDirectoryConfiguration:
              $ref: '#/components/schemas/ActiveDirectoryConfiguration'
          required:
            - ActiveDirectoryConfiguration
          additionalProperties: false
        - type: object
          title: ComputeFarmConfiguration
          properties:
            ComputeFarmConfiguration:
              $ref: '#/components/schemas/ComputeFarmConfiguration'
          required:
            - ComputeFarmConfiguration
          additionalProperties: false
        - type: object
          title: LicenseServiceConfiguration
          properties:
            LicenseServiceConfiguration:
              $ref: '#/components/schemas/LicenseServiceConfiguration'
          required:
            - LicenseServiceConfiguration
          additionalProperties: false
        - type: object
          title: SharedFileSystemConfiguration
          properties:
            SharedFileSystemConfiguration:
              $ref: '#/components/schemas/SharedFileSystemConfiguration'
          required:
            - SharedFileSystemConfiguration
          additionalProperties: false
    StudioComponentInitializationScript:
      type: object
      description: <p>Initialization scripts for studio components.</p>
      properties:
        LaunchProfileProtocolVersion:
          type: string
          maxLength: 10
          minLength: 0
          pattern: ^2021\-03\-31$
          description: |-
            <p>The version number of the protocol that is used by the launch profile. The only valid
                        version is "2021-03-31".</p>
        Platform:
          $ref: '#/components/schemas/LaunchProfilePlatform'
        RunContext:
          $ref: '#/components/schemas/StudioComponentInitializationScriptRunContext'
        Script:
          type: string
          maxLength: 5120
          minLength: 1
          description: <p>The initialization script.</p>
      additionalProperties: false
    StudioComponentInitializationScriptRunContext:
      type: string
      enum:
        - SYSTEM_INITIALIZATION
        - USER_INITIALIZATION
    StudioComponentSubtype:
      type: string
      enum:
        - AWS_MANAGED_MICROSOFT_AD
        - AMAZON_FSX_FOR_WINDOWS
        - AMAZON_FSX_FOR_LUSTRE
        - CUSTOM
    StudioComponentType:
      type: string
      enum:
        - ACTIVE_DIRECTORY
        - SHARED_FILE_SYSTEM
        - COMPUTE_FARM
        - LICENSE_SERVICE
        - CUSTOM
    StudioComponent:
      type: object
      properties:
        Configuration:
          $ref: '#/components/schemas/StudioComponentConfiguration'
        Description:
          type: string
          maxLength: 256
          minLength: 0
          description: <p>The description.</p>
        Ec2SecurityGroupIds:
          type: array
          items:
            type: string
          maxItems: 30
          minItems: 0
          description: <p>The EC2 security groups that control access to the studio component.</p>
        InitializationScripts:
          type: array
          items:
            $ref: '#/components/schemas/StudioComponentInitializationScript'
          description: <p>Initialization scripts for studio components.</p>
        Name:
          type: string
          maxLength: 64
          minLength: 0
          description: <p>The name for the studio component.</p>
        RuntimeRoleArn:
          type: string
          maxLength: 2048
          minLength: 0
        ScriptParameters:
          type: array
          items:
            $ref: '#/components/schemas/ScriptParameterKeyValue'
          maxItems: 30
          minItems: 0
          description: <p>Parameters for the studio component scripts.</p>
        SecureInitializationRoleArn:
          type: string
          maxLength: 2048
          minLength: 0
        StudioComponentId:
          type: string
        StudioId:
          type: string
          description: <p>The studio ID. </p>
        Subtype:
          $ref: '#/components/schemas/StudioComponentSubtype'
        Tags:
          $ref: '#/components/schemas/Tags'
        Type:
          $ref: '#/components/schemas/StudioComponentType'
      required:
        - StudioId
        - Name
        - Type
      x-stackql-resource-name: studio_component
      x-stackql-primaryIdentifier:
        - StudioComponentId
        - StudioId
  x-stackQL-resources:
    launch_profiles:
      name: launch_profiles
      id: aws.nimblestudio.launch_profiles
      x-cfn-schema-name: LaunchProfile
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LaunchProfileId') as launch_profile_id,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NimbleStudio::LaunchProfile'
    launch_profile:
      name: launch_profile
      id: aws.nimblestudio.launch_profile
      x-cfn-schema-name: LaunchProfile
      x-type: get
      x-identifiers:
        - LaunchProfileId
        - StudioId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Ec2SubnetIds') as ec2_subnet_ids,
              JSON_EXTRACT(Properties, '$.LaunchProfileId') as launch_profile_id,
              JSON_EXTRACT(Properties, '$.LaunchProfileProtocolVersions') as launch_profile_protocol_versions,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.StreamConfiguration.ClipboardMode') as stream_configuration_clipboard_mode,
              JSON_EXTRACT(Properties, '$.StreamConfiguration.Ec2InstanceTypes') as stream_configuration_ec2_instance_types,
              JSON_EXTRACT(Properties, '$.StreamConfiguration.MaxSessionLengthInMinutes') as stream_configuration_max_session_length_in_minutes,
              JSON_EXTRACT(Properties, '$.StreamConfiguration.StreamingImageIds') as stream_configuration_streaming_image_ids,
              JSON_EXTRACT(Properties, '$.StreamConfiguration.MaxStoppedSessionLengthInMinutes') as stream_configuration_max_stopped_session_length_in_minutes,
              JSON_EXTRACT(Properties, '$.StreamConfiguration.SessionStorage') as stream_configuration_session_storage,
              JSON_EXTRACT(Properties, '$.StreamConfiguration.SessionBackup') as stream_configuration_session_backup,
              JSON_EXTRACT(Properties, '$.StreamConfiguration.SessionPersistenceMode') as stream_configuration_session_persistence_mode,
              JSON_EXTRACT(Properties, '$.StreamConfiguration.VolumeConfiguration') as stream_configuration_volume_configuration,
              JSON_EXTRACT(Properties, '$.StreamConfiguration.AutomaticTerminationMode') as stream_configuration_automatic_termination_mode,
              JSON_EXTRACT(Properties, '$.StudioComponentIds') as studio_component_ids,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NimbleStudio::LaunchProfile'
    streaming_images:
      name: streaming_images
      id: aws.nimblestudio.streaming_images
      x-cfn-schema-name: StreamingImage
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id,
              JSON_EXTRACT(Properties, '$.StreamingImageId') as streaming_image_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NimbleStudio::StreamingImage'
    streaming_image:
      name: streaming_image
      id: aws.nimblestudio.streaming_image
      x-cfn-schema-name: StreamingImage
      x-type: get
      x-identifiers:
        - StudioId
        - StreamingImageId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Ec2ImageId') as ec2_image_id,
              JSON_EXTRACT(Properties, '$.EncryptionConfiguration.KeyType') as encryption_configuration_key_type,
              JSON_EXTRACT(Properties, '$.EncryptionConfiguration.KeyArn') as encryption_configuration_key_arn,
              JSON_EXTRACT(Properties, '$.EulaIds') as eula_ids,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Owner') as owner,
              JSON_EXTRACT(Properties, '$.Platform') as platform,
              JSON_EXTRACT(Properties, '$.StreamingImageId') as streaming_image_id,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NimbleStudio::StreamingImage'
    studios:
      name: studios
      id: aws.nimblestudio.studios
      x-cfn-schema-name: Studio
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NimbleStudio::Studio'
    studio:
      name: studio
      id: aws.nimblestudio.studio
      x-cfn-schema-name: Studio
      x-type: get
      x-identifiers:
        - StudioId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AdminRoleArn') as admin_role_arn,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.HomeRegion') as home_region,
              JSON_EXTRACT(Properties, '$.SsoClientId') as sso_client_id,
              JSON_EXTRACT(Properties, '$.StudioEncryptionConfiguration.KeyType') as studio_encryption_configuration_key_type,
              JSON_EXTRACT(Properties, '$.StudioEncryptionConfiguration.KeyArn') as studio_encryption_configuration_key_arn,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id,
              JSON_EXTRACT(Properties, '$.StudioName') as studio_name,
              JSON_EXTRACT(Properties, '$.StudioUrl') as studio_url,
              JSON_EXTRACT(Properties, '$.UserRoleArn') as user_role_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NimbleStudio::Studio'
    studio_components:
      name: studio_components
      id: aws.nimblestudio.studio_components
      x-cfn-schema-name: StudioComponent
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StudioComponentId') as studio_component_id,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NimbleStudio::StudioComponent'
    studio_component:
      name: studio_component
      id: aws.nimblestudio.studio_component
      x-cfn-schema-name: StudioComponent
      x-type: get
      x-identifiers:
        - StudioComponentId
        - StudioId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Ec2SecurityGroupIds') as ec2_security_group_ids,
              JSON_EXTRACT(Properties, '$.InitializationScripts') as initialization_scripts,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RuntimeRoleArn') as runtime_role_arn,
              JSON_EXTRACT(Properties, '$.ScriptParameters') as script_parameters,
              JSON_EXTRACT(Properties, '$.SecureInitializationRoleArn') as secure_initialization_role_arn,
              JSON_EXTRACT(Properties, '$.StudioComponentId') as studio_component_id,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NimbleStudio::StudioComponent'
