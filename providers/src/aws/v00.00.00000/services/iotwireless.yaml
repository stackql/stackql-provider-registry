openapi: 3.0.0
info:
  title: IoTWireless
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Tag:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          minLength: 0
          maxLength: 256
      additionalProperties: false
    Destination:
      type: object
      properties:
        Name:
          description: Unique name of destination
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          maxLength: 128
        Expression:
          description: Destination expression
          type: string
        ExpressionType:
          description: Must be RuleName
          type: string
          enum:
            - RuleName
            - MqttTopic
            - SnsTopic
        Description:
          description: Destination description
          type: string
          maxLength: 2048
        Tags:
          description: A list of key-value pairs that contain metadata for the destination.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        RoleArn:
          description: AWS role ARN that grants access
          type: string
          minLength: 20
          maxLength: 2048
        Arn:
          description: Destination arn. Returned after successful create.
          type: string
      required:
        - Name
        - Expression
        - ExpressionType
      x-stackql-resource-name: destination
      description: Destination's resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::IoTWireless::Destination
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Arn
      x-required-properties:
        - Name
        - Expression
        - ExpressionType
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:ListTagsForResource
      x-required-permissions:
        create:
          - iam:PassRole
          - iotwireless:CreateDestination
          - iotwireless:TagResource
        read:
          - iotwireless:GetDestination
          - iotwireless:ListTagsForResource
        update:
          - iam:PassRole
          - iotwireless:GetDestination
          - iotwireless:UpdateDestination
          - iotwireless:UntagResource
          - iotwireless:TagResource
        delete:
          - iotwireless:DeleteDestination
        list:
          - iotwireless:ListDestinations
          - iotwireless:ListTagsForResource
    LoRaWANDeviceProfile:
      type: object
      additionalProperties: false
      properties:
        SupportsClassB:
          type: boolean
        ClassBTimeout:
          type: integer
          minimum: 0
          maximum: 1000
        PingSlotPeriod:
          type: integer
          minimum: 128
          maximum: 4096
        PingSlotDr:
          type: integer
          minimum: 0
          maximum: 15
        PingSlotFreq:
          type: integer
          minimum: 1000000
          maximum: 16700000
        SupportsClassC:
          type: boolean
        ClassCTimeout:
          type: integer
          minimum: 0
          maximum: 1000
        MacVersion:
          type: string
          maxLength: 64
        RegParamsRevision:
          type: string
          maxLength: 64
        RxDelay1:
          type: integer
          minimum: 0
          maximum: 15
        RxDrOffset1:
          type: integer
          minimum: 0
          maximum: 7
        RxFreq2:
          type: integer
          minimum: 1000000
          maximum: 16700000
        RxDataRate2:
          type: integer
          minimum: 0
          maximum: 15
        FactoryPresetFreqsList:
          type: array
          maxItems: 20
          items:
            $ref: '#/components/schemas/FactoryPresetFreq'
        MaxEirp:
          type: integer
          minimum: 0
          maximum: 15
        MaxDutyCycle:
          type: integer
          minimum: 0
          maximum: 100
        SupportsJoin:
          type: boolean
        RfRegion:
          type: string
          maxLength: 64
        Supports32BitFCnt:
          type: boolean
    FactoryPresetFreq:
      type: integer
      minimum: 1000000
      maximum: 16700000
    DeviceProfile:
      type: object
      properties:
        Name:
          description: Name of service profile
          type: string
          maxLength: 256
        LoRaWAN:
          description: LoRaWANDeviceProfile supports all LoRa specific attributes for service profile for CreateDeviceProfile operation
          $ref: '#/components/schemas/LoRaWANDeviceProfile'
        Tags:
          description: A list of key-value pairs that contain metadata for the device profile.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          description: Service profile Arn. Returned after successful create.
          type: string
        Id:
          description: Service profile Id. Returned after successful create.
          type: string
          maxLength: 256
      required: []
      x-stackql-resource-name: device_profile
      description: Device Profile's resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::IoTWireless::DeviceProfile
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Name
        - LoRaWAN
      x-read-only-properties:
        - Arn
        - Id
      x-required-properties: []
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:ListTagsForResource
      x-required-permissions:
        create:
          - iotwireless:CreateDeviceProfile
          - iotwireless:TagResource
        update:
          - iotwireless:GetDeviceProfile
          - iotwireless:TagResource
          - iotwireless:UntagResource
        read:
          - iotwireless:GetDeviceProfile
          - iotwireless:ListTagsForResource
        delete:
          - iotwireless:DeleteDeviceProfile
        list:
          - iotwireless:ListDeviceProfiles
          - iotwireless:ListTagsForResource
    LoRaWAN:
      type: object
      properties:
        RfRegion:
          description: Multicast group LoRaWAN RF region
          type: string
          minLength: 1
          maxLength: 64
        DlClass:
          description: Multicast group LoRaWAN DL Class
          type: string
          minLength: 1
          maxLength: 64
        NumberOfDevicesRequested:
          description: Multicast group number of devices requested. Returned after successful read.
          type: integer
        NumberOfDevicesInGroup:
          description: Multicast group number of devices in group. Returned after successful read.
          type: integer
      additionalProperties: false
      required:
        - RfRegion
        - DlClass
    FuotaTask:
      type: object
      properties:
        Name:
          description: Name of FUOTA task
          type: string
          maxLength: 256
        Description:
          description: FUOTA task description
          type: string
          maxLength: 2048
        LoRaWAN:
          description: FUOTA task LoRaWAN
          $ref: '#/components/schemas/LoRaWAN'
        FirmwareUpdateImage:
          description: FUOTA task firmware update image binary S3 link
          type: string
          minLength: 1
          maxLength: 2048
        FirmwareUpdateRole:
          description: FUOTA task firmware IAM role for reading S3
          type: string
          minLength: 1
          maxLength: 256
        Arn:
          description: FUOTA task arn. Returned after successful create.
          type: string
        Id:
          description: FUOTA task id. Returned after successful create.
          type: string
          maxLength: 256
        Tags:
          description: A list of key-value pairs that contain metadata for the FUOTA task.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        FuotaTaskStatus:
          description: FUOTA task status. Returned after successful read.
          type: string
        AssociateWirelessDevice:
          description: Wireless device to associate. Only for update request.
          type: string
          maxLength: 256
        DisassociateWirelessDevice:
          description: Wireless device to disassociate. Only for update request.
          type: string
          maxLength: 256
        AssociateMulticastGroup:
          description: Multicast group to associate. Only for update request.
          type: string
          maxLength: 256
        DisassociateMulticastGroup:
          description: Multicast group to disassociate. Only for update request.
          type: string
          maxLength: 256
      required:
        - LoRaWAN
        - FirmwareUpdateImage
        - FirmwareUpdateRole
      x-stackql-resource-name: fuota_task
      description: Create and manage FUOTA tasks.
      x-type-name: AWS::IoTWireless::FuotaTask
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Arn
        - Id
        - FuotaTaskStatus
        - LoRaWAN/StartTime
      x-required-properties:
        - LoRaWAN
        - FirmwareUpdateImage
        - FirmwareUpdateRole
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:ListTagsForResource
      x-required-permissions:
        create:
          - iotwireless:CreateFuotaTask
          - iotwireless:TagResource
          - iam:GetRole
          - iam:PassRole
        read:
          - iotwireless:GetFuotaTask
          - iotwireless:ListTagsForResource
        update:
          - iam:PassRole
          - iotwireless:UpdateFuotaTask
          - iotwireless:GetFuotaTask
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:AssociateMulticastGroupWithFuotaTask
          - iotwireless:DisassociateMulticastGroupFromFuotaTask
          - iotwireless:AssociateWirelessDeviceWithFuotaTask
          - iotwireless:DisassociateWirelessDeviceFromFuotaTask
        delete:
          - iotwireless:DeleteFuotaTask
        list:
          - iotwireless:ListFuotaTasks
          - iotwireless:ListTagsForResource
    MulticastGroup:
      type: object
      properties:
        Name:
          description: Name of Multicast group
          type: string
          maxLength: 256
        Description:
          description: Multicast group description
          type: string
          maxLength: 2048
        LoRaWAN:
          description: Multicast group LoRaWAN
          $ref: '#/components/schemas/LoRaWAN'
        Arn:
          description: Multicast group arn. Returned after successful create.
          type: string
        Id:
          description: Multicast group id. Returned after successful create.
          type: string
          maxLength: 256
        Tags:
          description: A list of key-value pairs that contain metadata for the Multicast group.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Status:
          description: Multicast group status. Returned after successful read.
          type: string
        AssociateWirelessDevice:
          description: Wireless device to associate. Only for update request.
          type: string
          maxLength: 256
        DisassociateWirelessDevice:
          description: Wireless device to disassociate. Only for update request.
          type: string
          maxLength: 256
      required:
        - LoRaWAN
      x-stackql-resource-name: multicast_group
      description: Create and manage Multicast groups.
      x-type-name: AWS::IoTWireless::MulticastGroup
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Arn
        - Id
        - Status
        - LoRaWAN/NumberOfDevicesRequested
        - LoRaWAN/NumberOfDevicesInGroup
      x-required-properties:
        - LoRaWAN
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:ListTagsForResource
      x-required-permissions:
        create:
          - iotwireless:CreateMulticastGroup
          - iotwireless:TagResource
        read:
          - iotwireless:GetMulticastGroup
          - iotwireless:ListTagsForResource
        update:
          - iotwireless:UpdateMulticastGroup
          - iotwireless:GetMulticastGroup
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:AssociateWirelessDeviceWithMulticastGroup
          - iotwireless:DisassociateWirelessDeviceFromMulticastGroup
        delete:
          - iotwireless:DeleteMulticastGroup
        list:
          - iotwireless:ListMulticastGroups
          - iotwireless:ListTagsForResource
    WirelessDeviceFrameInfo:
      type: string
      enum:
        - ENABLED
        - DISABLED
    LogLevel:
      type: string
      enum:
        - INFO
        - ERROR
        - DISABLED
    NetworkAnalyzerConfiguration:
      type: object
      properties:
        Name:
          description: Name of the network analyzer configuration
          type: string
          pattern: ^[a-zA-Z0-9-_]+$
          maxLength: 1024
        Description:
          description: The description of the new resource
          type: string
          maxLength: 2048
        TraceContent:
          description: Trace content for your wireless gateway and wireless device resources
          type: object
          additionalProperties: false
          properties:
            WirelessDeviceFrameInfo:
              $ref: '#/components/schemas/WirelessDeviceFrameInfo'
            LogLevel:
              $ref: '#/components/schemas/LogLevel'
        WirelessDevices:
          description: List of wireless gateway resources that have been added to the network analyzer configuration
          type: array
          x-insertionOrder: false
          items:
            type: string
          maxItems: 250
        WirelessGateways:
          description: List of wireless gateway resources that have been added to the network analyzer configuration
          type: array
          x-insertionOrder: false
          items:
            type: string
          maxItems: 250
        Arn:
          description: Arn for network analyzer configuration, Returned upon successful create.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
      x-stackql-resource-name: network_analyzer_configuration
      description: Create and manage NetworkAnalyzerConfiguration resource.
      x-type-name: AWS::IoTWireless::NetworkAnalyzerConfiguration
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Arn
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:ListTagsForResource
      x-required-permissions:
        create:
          - iotwireless:CreateNetworkAnalyzerConfiguration
          - iotwireless:TagResource
        read:
          - iotwireless:GetNetworkAnalyzerConfiguration
          - iotwireless:ListTagsForResource
        update:
          - iotwireless:UpdateNetworkAnalyzerConfiguration
          - iotwireless:GetNetworkAnalyzerConfiguration
          - iotwireless:TagResource
          - iotwireless:UntagResource
        delete:
          - iotwireless:DeleteNetworkAnalyzerConfiguration
        list:
          - iotwireless:ListNetworkAnalyzerConfigurations
          - iotwireless:ListTagsForResource
    SidewalkAccountInfo:
      type: object
      additionalProperties: false
      properties:
        AppServerPrivateKey:
          type: string
          pattern: '[a-fA-F0-9]{64}'
          minLength: 1
          maxLength: 4096
      required:
        - AppServerPrivateKey
    SidewalkAccountInfoWithFingerprint:
      type: object
      additionalProperties: false
      properties:
        AmazonId:
          type: string
          maxLength: 2048
        Fingerprint:
          type: string
          pattern: '[a-fA-F0-9]{64}'
          minLength: 64
          maxLength: 64
        Arn:
          type: string
    SidewalkUpdateAccount:
      type: object
      additionalProperties: false
      properties:
        AppServerPrivateKey:
          type: string
          pattern: '[a-fA-F0-9]{64}'
          minLength: 1
          maxLength: 4096
    PartnerAccount:
      type: object
      properties:
        Sidewalk:
          description: The Sidewalk account credentials.
          $ref: '#/components/schemas/SidewalkAccountInfo'
        PartnerAccountId:
          description: The partner account ID to disassociate from the AWS account
          type: string
          maxLength: 256
        PartnerType:
          description: The partner type
          type: string
          enum:
            - Sidewalk
        SidewalkResponse:
          description: The Sidewalk account credentials.
          $ref: '#/components/schemas/SidewalkAccountInfoWithFingerprint'
        AccountLinked:
          description: Whether the partner account is linked to the AWS account.
          type: boolean
        SidewalkUpdate:
          description: The Sidewalk account credentials.
          $ref: '#/components/schemas/SidewalkUpdateAccount'
        Fingerprint:
          description: The fingerprint of the Sidewalk application server private key.
          type: string
        Arn:
          description: PartnerAccount arn. Returned after successful create.
          type: string
        Tags:
          description: A list of key-value pairs that contain metadata for the destination.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: partner_account
      description: Create and manage partner account
      x-type-name: AWS::IoTWireless::PartnerAccount
      x-stackql-primary-identifier:
        - PartnerAccountId
      x-create-only-properties:
        - PartnerAccountId
      x-write-only-properties:
        - SidewalkUpdate
        - Sidewalk
      x-read-only-properties:
        - Arn
        - Fingerprint
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:ListTagsForResource
      x-required-permissions:
        create:
          - iotwireless:AssociateAwsAccountWithPartnerAccount
          - iotwireless:TagResource
          - iotwireless:GetPartnerAccount
        read:
          - iotwireless:GetPartnerAccount
          - iotwireless:ListTagsForResource
        list:
          - iotwireless:ListPartnerAccounts
          - iotwireless:ListTagsForResource
        update:
          - iotwireless:GetPartnerAccount
          - iotwireless:AssociateAwsAccountWithPartnerAccount
          - iotwireless:UpdatePartnerAccount
          - iotwireless:ListTagsForResource
          - iotwireless:TagResource
          - iotwireless:UntagResource
        delete:
          - iotwireless:DisassociateAwsAccountFromPartnerAccount
    LoRaWANServiceProfile:
      type: object
      additionalProperties: false
      properties:
        UlRate:
          type: integer
        UlBucketSize:
          type: integer
        UlRatePolicy:
          type: string
        DlRate:
          type: integer
        DlBucketSize:
          type: integer
        DlRatePolicy:
          type: string
        AddGwMetadata:
          type: boolean
        DevStatusReqFreq:
          type: integer
        ReportDevStatusBattery:
          type: boolean
        ReportDevStatusMargin:
          type: boolean
        DrMin:
          type: integer
        DrMax:
          type: integer
        ChannelMask:
          type: string
        PrAllowed:
          type: boolean
        HrAllowed:
          type: boolean
        RaAllowed:
          type: boolean
        NwkGeoLoc:
          type: boolean
        TargetPer:
          type: integer
        MinGwDiversity:
          type: integer
    ServiceProfile:
      type: object
      properties:
        Name:
          description: Name of service profile
          type: string
          maxLength: 256
        LoRaWAN:
          description: LoRaWAN supports all LoRa specific attributes for service profile for CreateServiceProfile operation
          $ref: '#/components/schemas/LoRaWANServiceProfile'
        Tags:
          description: A list of key-value pairs that contain metadata for the service profile.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          description: Service profile Arn. Returned after successful create.
          type: string
        Id:
          description: Service profile Id. Returned after successful create.
          type: string
          maxLength: 256
      required: []
      x-stackql-resource-name: service_profile
      description: An example resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::IoTWireless::ServiceProfile
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Name
        - LoRaWAN
      x-read-only-properties:
        - Id
        - Arn
        - LoRaWAN/UlRate
        - LoRaWAN/UlBucketSize
        - LoRaWAN/UlRatePolicy
        - LoRaWAN/DlRate
        - LoRaWAN/DlBucketSize
        - LoRaWAN/DlRatePolicy
        - LoRaWAN/DevStatusReqFreq
        - LoRaWAN/ReportDevStatusBattery
        - LoRaWAN/ReportDevStatusMargin
        - LoRaWAN/DrMin
        - LoRaWAN/DrMax
        - LoRaWAN/ChannelMask
        - LoRaWAN/HrAllowed
        - LoRaWAN/NwkGeoLoc
        - LoRaWAN/TargetPer
        - LoRaWAN/MinGwDiversity
      x-required-properties: []
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:ListTagsForResource
      x-required-permissions:
        create:
          - iotwireless:CreateServiceProfile
          - iotwireless:TagResource
        update:
          - iotwireless:GetServiceProfile
          - iotwireless:TagResource
          - iotwireless:UntagResource
        read:
          - iotwireless:GetServiceProfile
          - iotwireless:ListTagsForResource
        delete:
          - iotwireless:DeleteServiceProfile
        list:
          - iotwireless:ListServiceProfiles
          - iotwireless:ListTagsForResource
    LoRaWANGatewayVersion:
      type: object
      additionalProperties: false
      properties:
        PackageVersion:
          type: string
          minLength: 1
          maxLength: 32
        Model:
          type: string
          minLength: 1
          maxLength: 4096
        Station:
          type: string
          minLength: 1
          maxLength: 4096
    LoRaWANUpdateGatewayTaskCreate:
      type: object
      additionalProperties: false
      properties:
        UpdateSignature:
          type: string
          minLength: 1
          maxLength: 4096
        SigKeyCrc:
          type: integer
          format: int64
        CurrentVersion:
          $ref: '#/components/schemas/LoRaWANGatewayVersion'
        UpdateVersion:
          $ref: '#/components/schemas/LoRaWANGatewayVersion'
    UpdateWirelessGatewayTaskCreate:
      type: object
      additionalProperties: false
      properties:
        UpdateDataSource:
          type: string
          minLength: 1
          maxLength: 4096
        UpdateDataRole:
          type: string
          minLength: 1
          maxLength: 2048
        LoRaWAN:
          $ref: '#/components/schemas/LoRaWANUpdateGatewayTaskCreate'
    LoRaWANUpdateGatewayTaskEntry:
      type: object
      additionalProperties: false
      properties:
        CurrentVersion:
          $ref: '#/components/schemas/LoRaWANGatewayVersion'
        UpdateVersion:
          $ref: '#/components/schemas/LoRaWANGatewayVersion'
    TaskDefinition:
      type: object
      properties:
        Name:
          description: The name of the new resource.
          type: string
          minLength: 1
          maxLength: 256
        AutoCreateTasks:
          description: Whether to automatically create tasks using this task definition for all gateways with the specified current version. If false, the task must me created by calling CreateWirelessGatewayTask.
          type: boolean
        Update:
          description: Information about the gateways to update.
          $ref: '#/components/schemas/UpdateWirelessGatewayTaskCreate'
        LoRaWANUpdateGatewayTaskEntry:
          description: The list of task definitions.
          $ref: '#/components/schemas/LoRaWANUpdateGatewayTaskEntry'
        Id:
          description: The ID of the new wireless gateway task definition
          type: string
          pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
        TaskDefinitionType:
          description: A filter to list only the wireless gateway task definitions that use this task definition type
          type: string
          enum:
            - UPDATE
        Arn:
          description: TaskDefinition arn. Returned after successful create.
          type: string
        Tags:
          description: A list of key-value pairs that contain metadata for the destination.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AutoCreateTasks
      x-stackql-resource-name: task_definition
      description: Creates a gateway task definition.
      x-type-name: AWS::IoTWireless::TaskDefinition
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Id
        - Arn
      x-required-properties:
        - AutoCreateTasks
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:ListTagsForResource
      x-required-permissions:
        create:
          - iotwireless:CreateWirelessGatewayTaskDefinition
          - iotwireless:TagResource
          - iam:GetRole
          - iam:PassRole
        update:
          - iotwireless:GetWirelessGatewayTaskDefinition
          - iotwireless:TagResource
          - iotwireless:UntagResource
        read:
          - iotwireless:GetWirelessGatewayTaskDefinition
          - iotwireless:ListTagsForResource
        delete:
          - iotwireless:DeleteWirelessGatewayTaskDefinition
        list:
          - iotwireless:ListWirelessGatewayTaskDefinitions
          - iotwireless:ListTagsForResource
    OtaaV10x:
      type: object
      additionalProperties: false
      properties:
        AppKey:
          type: string
          pattern: '[a-fA-F0-9]{32}'
        AppEui:
          type: string
          pattern: '[a-fA-F0-9]{16}'
      required:
        - AppKey
        - AppEui
    OtaaV11:
      type: object
      additionalProperties: false
      properties:
        AppKey:
          type: string
          pattern: '[a-fA-F0-9]{32}'
        NwkKey:
          type: string
          pattern: '[a-fA-F0-9]{32}'
        JoinEui:
          type: string
          pattern: '[a-fA-F0-9]{16}'
      required:
        - AppKey
        - NwkKey
        - JoinEui
    SessionKeysAbpV11:
      type: object
      additionalProperties: false
      properties:
        FNwkSIntKey:
          type: string
          pattern: '[a-fA-F0-9]{32}'
        SNwkSIntKey:
          type: string
          pattern: '[a-fA-F0-9]{32}'
        NwkSEncKey:
          type: string
          pattern: '[a-fA-F0-9]{32}'
        AppSKey:
          type: string
          pattern: '[a-fA-F0-9]{32}'
      required:
        - FNwkSIntKey
        - SNwkSIntKey
        - NwkSEncKey
        - AppSKey
    AbpV11:
      type: object
      additionalProperties: false
      properties:
        DevAddr:
          type: string
          pattern: '[a-fA-F0-9]{8}'
        SessionKeys:
          $ref: '#/components/schemas/SessionKeysAbpV11'
      required:
        - DevAddr
        - SessionKeys
    SessionKeysAbpV10x:
      type: object
      additionalProperties: false
      properties:
        NwkSKey:
          type: string
          pattern: '[a-fA-F0-9]{32}'
        AppSKey:
          type: string
          pattern: '[a-fA-F0-9]{32}'
      required:
        - NwkSKey
        - AppSKey
    AbpV10x:
      type: object
      additionalProperties: false
      properties:
        DevAddr:
          type: string
          pattern: '[a-fA-F0-9]{8}'
        SessionKeys:
          $ref: '#/components/schemas/SessionKeysAbpV10x'
      required:
        - DevAddr
        - SessionKeys
    FPorts:
      type: object
      additionalProperties: false
      properties:
        Applications:
          description: A list of optional LoRaWAN application information, which can be used for geolocation.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Application'
    LoRaWANDevice:
      type: object
      additionalProperties: false
      properties:
        DevEui:
          type: string
          pattern: '[a-f0-9]{16}'
        DeviceProfileId:
          type: string
          maxLength: 256
        ServiceProfileId:
          type: string
          maxLength: 256
        OtaaV11:
          $ref: '#/components/schemas/OtaaV11'
        OtaaV10x:
          $ref: '#/components/schemas/OtaaV10x'
        AbpV11:
          $ref: '#/components/schemas/AbpV11'
        AbpV10x:
          $ref: '#/components/schemas/AbpV10x'
        FPorts:
          $ref: '#/components/schemas/FPorts'
      oneOf:
        - required:
            - OtaaV11
        - required:
            - OtaaV10x
        - required:
            - AbpV11
        - required:
            - AbpV10x
    Application:
      description: LoRaWAN application configuration, which can be used to perform geolocation.
      type: object
      properties:
        DestinationName:
          description: The name of the position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.
          type: string
          pattern: '[a-zA-Z0-9-_]+'
          maxLength: 128
        FPort:
          description: The Fport value.
          type: integer
          minimum: 1
          maximum: 223
        Type:
          description: Application type, which can be specified to obtain real-time position information of your LoRaWAN device.
          type: string
          enum:
            - SemtechGeolocation
            - SemtechGNSS
            - SemtechGNSSNG
            - SemtechWiFi
      additionalProperties: false
    WirelessDevice:
      type: object
      properties:
        Type:
          description: Wireless device type, currently only Sidewalk and LoRa
          type: string
          enum:
            - Sidewalk
            - LoRaWAN
        Name:
          description: Wireless device name
          type: string
          maxLength: 256
        Description:
          description: Wireless device description
          type: string
          maxLength: 2048
        DestinationName:
          description: Wireless device destination name
          type: string
          maxLength: 128
        LoRaWAN:
          description: The combination of Package, Station and Model which represents the version of the LoRaWAN Wireless Device.
          $ref: '#/components/schemas/LoRaWANDevice'
        Tags:
          description: A list of key-value pairs that contain metadata for the device. Currently not supported, will not create if tags are passed.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          description: Wireless device arn. Returned after successful create.
          type: string
        Id:
          description: Wireless device Id. Returned after successful create.
          type: string
          maxLength: 256
        ThingArn:
          description: Thing arn. Passed into update to associate Thing with Wireless device.
          type: string
        ThingName:
          description: Thing Arn. If there is a Thing created, this can be returned with a Get call.
          type: string
        LastUplinkReceivedAt:
          description: The date and time when the most recent uplink was received.
          type: string
        Positioning:
          description: FPort values for the GNSS, stream, and ClockSync functions of the positioning information.
          type: string
          enum:
            - Enabled
            - Disabled
      required:
        - Type
        - DestinationName
      x-stackql-resource-name: wireless_device
      description: Create and manage wireless gateways, including LoRa gateways.
      x-type-name: AWS::IoTWireless::WirelessDevice
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - ThingName
        - Id
        - Arn
      x-required-properties:
        - Type
        - DestinationName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:ListTagsForResource
      x-required-permissions:
        create:
          - iotwireless:CreateWirelessDevice
          - iotwireless:TagResource
        read:
          - iotwireless:GetWirelessDevice
          - iotwireless:ListTagsForResource
        update:
          - iotwireless:UpdateWirelessDevice
          - iotwireless:GetWirelessDevice
          - iotwireless:AssociateWirelessDeviceWithThing
          - iotwireless:TagResource
          - iotwireless:UntagResource
        delete:
          - iotwireless:DeleteWirelessDevice
          - iotwireless:DisassociateWirelessDeviceFromThing
        list:
          - iotwireless:ListWirelessDevices
          - iotwireless:ListTagsForResource
    DeviceCreationFileList:
      description: sidewalk create device's file path
      type: array
      items:
        type: string
        maxLength: 1024
    Role:
      description: sidewalk role
      type: string
      maxLength: 2048
    WirelessDeviceImportTask:
      type: object
      properties:
        Id:
          description: Id for Wireless Device Import Task, Returned upon successful start.
          type: string
          maxLength: 256
        Arn:
          description: Arn for Wireless Device Import Task, Returned upon successful start.
          type: string
          maxLength: 128
        DestinationName:
          description: Destination Name for import task
          type: string
          pattern: '[a-zA-Z0-9-_]+'
          maxLength: 128
        CreationDate:
          description: CreationDate for import task
          type: string
        Sidewalk:
          description: sidewalk contain file for created device and role
          type: object
          additionalProperties: false
          properties:
            SidewalkManufacturingSn:
              type: string
              maxLength: 64
            DeviceCreationFile:
              type: string
              maxLength: 1024
            DeviceCreationFileList:
              $ref: '#/components/schemas/DeviceCreationFileList'
            Role:
              $ref: '#/components/schemas/Role'
        Status:
          description: Status for import task
          type: string
          enum:
            - INITIALIZING
            - INITIALIZED
            - PENDING
            - COMPLETE
            - FAILED
            - DELETING
        StatusReason:
          description: StatusReason for import task
          type: string
        InitializedImportedDevicesCount:
          description: Initialized Imported Devices Count
          type: integer
        PendingImportedDevicesCount:
          description: Pending Imported Devices Count
          type: integer
        OnboardedImportedDevicesCount:
          description: Onboarded Imported Devices Count
          type: integer
        FailedImportedDevicesCount:
          description: Failed Imported Devices Count
          type: integer
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DestinationName
        - Sidewalk
      x-stackql-resource-name: wireless_device_import_task
      description: Wireless Device Import Tasks
      x-type-name: AWS::IoTWireless::WirelessDeviceImportTask
      x-stackql-primary-identifier:
        - Id
      x-write-only-properties:
        - Sidewalk/DeviceCreationFile
        - Sidewalk/SidewalkManufacturingSn
      x-read-only-properties:
        - Id
        - Arn
        - CreationDate
        - Status
        - StatusReason
        - InitializedImportedDevicesCount
        - PendingImportedDevicesCount
        - OnboardedImportedDevicesCount
        - FailedImportedDevicesCount
        - Sidewalk/DeviceCreationFileList
      x-required-properties:
        - DestinationName
        - Sidewalk
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:ListTagsForResource
      x-required-permissions:
        create:
          - iotwireless:StartWirelessDeviceImportTask
          - iotwireless:StartSingleWirelessDeviceImportTask
          - iotwireless:TagResource
          - iam:PassRole
        read:
          - iotwireless:GetWirelessDeviceImportTask
          - iotwireless:ListTagsForResource
        update:
          - iotwireless:GetWirelessDeviceImportTask
          - iotwireless:UpdateWirelessDeviceImportTask
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iam:PassRole
        delete:
          - iotwireless:DeleteWirelessDeviceImportTask
        list:
          - iotwireless:ListWirelessDeviceImportTasks
          - iotwireless:ListTagsForResource
    LoRaWANGateway:
      type: object
      additionalProperties: false
      properties:
        GatewayEui:
          type: string
          pattern: ^(([0-9A-Fa-f]{2}-){7}|([0-9A-Fa-f]{2}:){7}|([0-9A-Fa-f]{2}\s){7}|([0-9A-Fa-f]{2}){7})([0-9A-Fa-f]{2})$
        RfRegion:
          type: string
          maxLength: 64
      required:
        - GatewayEui
        - RfRegion
    WirelessGateway:
      type: object
      properties:
        Name:
          description: Name of Wireless Gateway.
          type: string
          maxLength: 256
        Description:
          description: Description of Wireless Gateway.
          type: string
          maxLength: 2048
        Tags:
          description: A list of key-value pairs that contain metadata for the gateway.
          type: array
          uniqueItems: true
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        LoRaWAN:
          description: The combination of Package, Station and Model which represents the version of the LoRaWAN Wireless Gateway.
          $ref: '#/components/schemas/LoRaWANGateway'
        Arn:
          description: Arn for Wireless Gateway. Returned upon successful create.
          type: string
        Id:
          description: Id for Wireless Gateway. Returned upon successful create.
          type: string
          maxLength: 256
        ThingArn:
          description: Thing Arn. Passed into Update to associate a Thing with the Wireless Gateway.
          type: string
        ThingName:
          description: Thing Name. If there is a Thing created, this can be returned with a Get call.
          type: string
        LastUplinkReceivedAt:
          description: The date and time when the most recent uplink was received.
          type: string
      required:
        - LoRaWAN
      x-stackql-resource-name: wireless_gateway
      description: Create and manage wireless gateways, including LoRa gateways.
      x-type-name: AWS::IoTWireless::WirelessGateway
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Id
        - Arn
      x-required-properties:
        - LoRaWAN
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotwireless:TagResource
          - iotwireless:UntagResource
          - iotwireless:ListTagsForResource
      x-required-permissions:
        create:
          - iotwireless:CreateWirelessGateway
          - iotwireless:TagResource
        read:
          - iotwireless:GetWirelessGateway
          - iotwireless:ListTagsForResource
        update:
          - iotwireless:GetWirelessGateway
          - iotwireless:UpdateWirelessGateway
          - iotwireless:AssociateWirelessGatewayWithThing
          - iotwireless:TagResource
          - iotwireless:UntagResource
        delete:
          - iotwireless:DeleteWirelessGateway
          - iotwireless:DisassociateWirelessGatewayFromThing
        list:
          - iotwireless:ListWirelessGateways
          - iotwireless:ListTagsForResource
    CreateDestinationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: Unique name of destination
              type: string
              pattern: '[a-zA-Z0-9:_-]+'
              maxLength: 128
            Expression:
              description: Destination expression
              type: string
            ExpressionType:
              description: Must be RuleName
              type: string
              enum:
                - RuleName
                - MqttTopic
                - SnsTopic
            Description:
              description: Destination description
              type: string
              maxLength: 2048
            Tags:
              description: A list of key-value pairs that contain metadata for the destination.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            RoleArn:
              description: AWS role ARN that grants access
              type: string
              minLength: 20
              maxLength: 2048
            Arn:
              description: Destination arn. Returned after successful create.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateDestinationRequest
      type: object
      required: []
    CreateDeviceProfileRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: Name of service profile
              type: string
              maxLength: 256
            LoRaWAN:
              description: LoRaWANDeviceProfile supports all LoRa specific attributes for service profile for CreateDeviceProfile operation
              $ref: '#/components/schemas/LoRaWANDeviceProfile'
            Tags:
              description: A list of key-value pairs that contain metadata for the device profile.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Arn:
              description: Service profile Arn. Returned after successful create.
              type: string
            Id:
              description: Service profile Id. Returned after successful create.
              type: string
              maxLength: 256
          x-stackQL-stringOnly: true
      x-title: CreateDeviceProfileRequest
      type: object
      required: []
    CreateFuotaTaskRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: Name of FUOTA task
              type: string
              maxLength: 256
            Description:
              description: FUOTA task description
              type: string
              maxLength: 2048
            LoRaWAN:
              description: FUOTA task LoRaWAN
              $ref: '#/components/schemas/LoRaWAN'
            FirmwareUpdateImage:
              description: FUOTA task firmware update image binary S3 link
              type: string
              minLength: 1
              maxLength: 2048
            FirmwareUpdateRole:
              description: FUOTA task firmware IAM role for reading S3
              type: string
              minLength: 1
              maxLength: 256
            Arn:
              description: FUOTA task arn. Returned after successful create.
              type: string
            Id:
              description: FUOTA task id. Returned after successful create.
              type: string
              maxLength: 256
            Tags:
              description: A list of key-value pairs that contain metadata for the FUOTA task.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            FuotaTaskStatus:
              description: FUOTA task status. Returned after successful read.
              type: string
            AssociateWirelessDevice:
              description: Wireless device to associate. Only for update request.
              type: string
              maxLength: 256
            DisassociateWirelessDevice:
              description: Wireless device to disassociate. Only for update request.
              type: string
              maxLength: 256
            AssociateMulticastGroup:
              description: Multicast group to associate. Only for update request.
              type: string
              maxLength: 256
            DisassociateMulticastGroup:
              description: Multicast group to disassociate. Only for update request.
              type: string
              maxLength: 256
          x-stackQL-stringOnly: true
      x-title: CreateFuotaTaskRequest
      type: object
      required: []
    CreateMulticastGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: Name of Multicast group
              type: string
              maxLength: 256
            Description:
              description: Multicast group description
              type: string
              maxLength: 2048
            LoRaWAN:
              description: Multicast group LoRaWAN
              $ref: '#/components/schemas/LoRaWAN'
            Arn:
              description: Multicast group arn. Returned after successful create.
              type: string
            Id:
              description: Multicast group id. Returned after successful create.
              type: string
              maxLength: 256
            Tags:
              description: A list of key-value pairs that contain metadata for the Multicast group.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Status:
              description: Multicast group status. Returned after successful read.
              type: string
            AssociateWirelessDevice:
              description: Wireless device to associate. Only for update request.
              type: string
              maxLength: 256
            DisassociateWirelessDevice:
              description: Wireless device to disassociate. Only for update request.
              type: string
              maxLength: 256
          x-stackQL-stringOnly: true
      x-title: CreateMulticastGroupRequest
      type: object
      required: []
    CreateNetworkAnalyzerConfigurationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: Name of the network analyzer configuration
              type: string
              pattern: ^[a-zA-Z0-9-_]+$
              maxLength: 1024
            Description:
              description: The description of the new resource
              type: string
              maxLength: 2048
            TraceContent:
              description: Trace content for your wireless gateway and wireless device resources
              type: object
              additionalProperties: false
              properties:
                WirelessDeviceFrameInfo:
                  $ref: '#/components/schemas/WirelessDeviceFrameInfo'
                LogLevel:
                  $ref: '#/components/schemas/LogLevel'
            WirelessDevices:
              description: List of wireless gateway resources that have been added to the network analyzer configuration
              type: array
              x-insertionOrder: false
              items:
                type: string
              maxItems: 250
            WirelessGateways:
              description: List of wireless gateway resources that have been added to the network analyzer configuration
              type: array
              x-insertionOrder: false
              items:
                type: string
              maxItems: 250
            Arn:
              description: Arn for network analyzer configuration, Returned upon successful create.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateNetworkAnalyzerConfigurationRequest
      type: object
      required: []
    CreatePartnerAccountRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Sidewalk:
              description: The Sidewalk account credentials.
              $ref: '#/components/schemas/SidewalkAccountInfo'
            PartnerAccountId:
              description: The partner account ID to disassociate from the AWS account
              type: string
              maxLength: 256
            PartnerType:
              description: The partner type
              type: string
              enum:
                - Sidewalk
            SidewalkResponse:
              description: The Sidewalk account credentials.
              $ref: '#/components/schemas/SidewalkAccountInfoWithFingerprint'
            AccountLinked:
              description: Whether the partner account is linked to the AWS account.
              type: boolean
            SidewalkUpdate:
              description: The Sidewalk account credentials.
              $ref: '#/components/schemas/SidewalkUpdateAccount'
            Fingerprint:
              description: The fingerprint of the Sidewalk application server private key.
              type: string
            Arn:
              description: PartnerAccount arn. Returned after successful create.
              type: string
            Tags:
              description: A list of key-value pairs that contain metadata for the destination.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreatePartnerAccountRequest
      type: object
      required: []
    CreateServiceProfileRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: Name of service profile
              type: string
              maxLength: 256
            LoRaWAN:
              description: LoRaWAN supports all LoRa specific attributes for service profile for CreateServiceProfile operation
              $ref: '#/components/schemas/LoRaWANServiceProfile'
            Tags:
              description: A list of key-value pairs that contain metadata for the service profile.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Arn:
              description: Service profile Arn. Returned after successful create.
              type: string
            Id:
              description: Service profile Id. Returned after successful create.
              type: string
              maxLength: 256
          x-stackQL-stringOnly: true
      x-title: CreateServiceProfileRequest
      type: object
      required: []
    CreateTaskDefinitionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: The name of the new resource.
              type: string
              minLength: 1
              maxLength: 256
            AutoCreateTasks:
              description: Whether to automatically create tasks using this task definition for all gateways with the specified current version. If false, the task must me created by calling CreateWirelessGatewayTask.
              type: boolean
            Update:
              description: Information about the gateways to update.
              $ref: '#/components/schemas/UpdateWirelessGatewayTaskCreate'
            LoRaWANUpdateGatewayTaskEntry:
              description: The list of task definitions.
              $ref: '#/components/schemas/LoRaWANUpdateGatewayTaskEntry'
            Id:
              description: The ID of the new wireless gateway task definition
              type: string
              pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
            TaskDefinitionType:
              description: A filter to list only the wireless gateway task definitions that use this task definition type
              type: string
              enum:
                - UPDATE
            Arn:
              description: TaskDefinition arn. Returned after successful create.
              type: string
            Tags:
              description: A list of key-value pairs that contain metadata for the destination.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateTaskDefinitionRequest
      type: object
      required: []
    CreateWirelessDeviceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Type:
              description: Wireless device type, currently only Sidewalk and LoRa
              type: string
              enum:
                - Sidewalk
                - LoRaWAN
            Name:
              description: Wireless device name
              type: string
              maxLength: 256
            Description:
              description: Wireless device description
              type: string
              maxLength: 2048
            DestinationName:
              description: Wireless device destination name
              type: string
              maxLength: 128
            LoRaWAN:
              description: The combination of Package, Station and Model which represents the version of the LoRaWAN Wireless Device.
              $ref: '#/components/schemas/LoRaWANDevice'
            Tags:
              description: A list of key-value pairs that contain metadata for the device. Currently not supported, will not create if tags are passed.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Arn:
              description: Wireless device arn. Returned after successful create.
              type: string
            Id:
              description: Wireless device Id. Returned after successful create.
              type: string
              maxLength: 256
            ThingArn:
              description: Thing arn. Passed into update to associate Thing with Wireless device.
              type: string
            ThingName:
              description: Thing Arn. If there is a Thing created, this can be returned with a Get call.
              type: string
            LastUplinkReceivedAt:
              description: The date and time when the most recent uplink was received.
              type: string
            Positioning:
              description: FPort values for the GNSS, stream, and ClockSync functions of the positioning information.
              type: string
              enum:
                - Enabled
                - Disabled
          x-stackQL-stringOnly: true
      x-title: CreateWirelessDeviceRequest
      type: object
      required: []
    CreateWirelessDeviceImportTaskRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: Id for Wireless Device Import Task, Returned upon successful start.
              type: string
              maxLength: 256
            Arn:
              description: Arn for Wireless Device Import Task, Returned upon successful start.
              type: string
              maxLength: 128
            DestinationName:
              description: Destination Name for import task
              type: string
              pattern: '[a-zA-Z0-9-_]+'
              maxLength: 128
            CreationDate:
              description: CreationDate for import task
              type: string
            Sidewalk:
              description: sidewalk contain file for created device and role
              type: object
              additionalProperties: false
              properties:
                SidewalkManufacturingSn:
                  type: string
                  maxLength: 64
                DeviceCreationFile:
                  type: string
                  maxLength: 1024
                DeviceCreationFileList:
                  $ref: '#/components/schemas/DeviceCreationFileList'
                Role:
                  $ref: '#/components/schemas/Role'
            Status:
              description: Status for import task
              type: string
              enum:
                - INITIALIZING
                - INITIALIZED
                - PENDING
                - COMPLETE
                - FAILED
                - DELETING
            StatusReason:
              description: StatusReason for import task
              type: string
            InitializedImportedDevicesCount:
              description: Initialized Imported Devices Count
              type: integer
            PendingImportedDevicesCount:
              description: Pending Imported Devices Count
              type: integer
            OnboardedImportedDevicesCount:
              description: Onboarded Imported Devices Count
              type: integer
            FailedImportedDevicesCount:
              description: Failed Imported Devices Count
              type: integer
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateWirelessDeviceImportTaskRequest
      type: object
      required: []
    CreateWirelessGatewayRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: Name of Wireless Gateway.
              type: string
              maxLength: 256
            Description:
              description: Description of Wireless Gateway.
              type: string
              maxLength: 2048
            Tags:
              description: A list of key-value pairs that contain metadata for the gateway.
              type: array
              uniqueItems: true
              maxItems: 200
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            LoRaWAN:
              description: The combination of Package, Station and Model which represents the version of the LoRaWAN Wireless Gateway.
              $ref: '#/components/schemas/LoRaWANGateway'
            Arn:
              description: Arn for Wireless Gateway. Returned upon successful create.
              type: string
            Id:
              description: Id for Wireless Gateway. Returned upon successful create.
              type: string
              maxLength: 256
            ThingArn:
              description: Thing Arn. Passed into Update to associate a Thing with the Wireless Gateway.
              type: string
            ThingName:
              description: Thing Name. If there is a Thing created, this can be returned with a Get call.
              type: string
            LastUplinkReceivedAt:
              description: The date and time when the most recent uplink was received.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateWirelessGatewayRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    destinations:
      name: destinations
      id: aws.iotwireless.destinations
      x-cfn-schema-name: Destination
      x-cfn-type-name: AWS::IoTWireless::Destination
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Destination&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::Destination"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::Destination"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::Destination"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/destinations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/destinations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/destinations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Expression') as expression,
              JSON_EXTRACT(Properties, '$.ExpressionType') as expression_type,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::Destination'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Expression') as expression,
                JSON_EXTRACT(detail.Properties, '$.ExpressionType') as expression_type,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTWireless::Destination'
                AND detail.data__TypeName = 'AWS::IoTWireless::Destination'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Expression') as expression,
                  json_extract_path_text(Properties, 'ExpressionType') as expression_type,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::Destination'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Expression') as expression,
                    json_extract_path_text(detail.Properties, 'ExpressionType') as expression_type,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTWireless::Destination'
                    AND detail.data__TypeName = 'AWS::IoTWireless::Destination'
                    AND listing.region = 'us-east-1'
    destinations_list_only:
      name: destinations_list_only
      id: aws.iotwireless.destinations_list_only
      x-cfn-schema-name: Destination
      x-cfn-type-name: AWS::IoTWireless::Destination
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::Destination'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::Destination'
                AND region = 'us-east-1'
    destination_tags:
      name: destination_tags
      id: aws.iotwireless.destination_tags
      x-cfn-schema-name: Destination
      x-cfn-type-name: AWS::IoTWireless::Destination
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Expression') as expression,
              JSON_EXTRACT(detail.Properties, '$.ExpressionType') as expression_type,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTWireless::Destination'
              AND detail.data__TypeName = 'AWS::IoTWireless::Destination'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Expression') as expression,
                json_extract_path_text(detail.Properties, 'ExpressionType') as expression_type,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTWireless::Destination'
                AND detail.data__TypeName = 'AWS::IoTWireless::Destination'
                AND listing.region = 'us-east-1'
    device_profiles:
      name: device_profiles
      id: aws.iotwireless.device_profiles
      x-cfn-schema-name: DeviceProfile
      x-cfn-type-name: AWS::IoTWireless::DeviceProfile
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DeviceProfile&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::DeviceProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::DeviceProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::DeviceProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/device_profiles/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/device_profiles/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/device_profiles/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::DeviceProfile'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTWireless::DeviceProfile'
                AND detail.data__TypeName = 'AWS::IoTWireless::DeviceProfile'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'LoRaWAN') as lo_ra_wan,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Id') as id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::DeviceProfile'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Id') as id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTWireless::DeviceProfile'
                    AND detail.data__TypeName = 'AWS::IoTWireless::DeviceProfile'
                    AND listing.region = 'us-east-1'
    device_profiles_list_only:
      name: device_profiles_list_only
      id: aws.iotwireless.device_profiles_list_only
      x-cfn-schema-name: DeviceProfile
      x-cfn-type-name: AWS::IoTWireless::DeviceProfile
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::DeviceProfile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::DeviceProfile'
                AND region = 'us-east-1'
    device_profile_tags:
      name: device_profile_tags
      id: aws.iotwireless.device_profile_tags
      x-cfn-schema-name: DeviceProfile
      x-cfn-type-name: AWS::IoTWireless::DeviceProfile
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTWireless::DeviceProfile'
              AND detail.data__TypeName = 'AWS::IoTWireless::DeviceProfile'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Id') as id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTWireless::DeviceProfile'
                AND detail.data__TypeName = 'AWS::IoTWireless::DeviceProfile'
                AND listing.region = 'us-east-1'
    fuota_tasks:
      name: fuota_tasks
      id: aws.iotwireless.fuota_tasks
      x-cfn-schema-name: FuotaTask
      x-cfn-type-name: AWS::IoTWireless::FuotaTask
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__FuotaTask&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::FuotaTask"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::FuotaTask"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::FuotaTask"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/fuota_tasks/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/fuota_tasks/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/fuota_tasks/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(Properties, '$.FirmwareUpdateImage') as firmware_update_image,
              JSON_EXTRACT(Properties, '$.FirmwareUpdateRole') as firmware_update_role,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.FuotaTaskStatus') as fuota_task_status,
              JSON_EXTRACT(Properties, '$.AssociateWirelessDevice') as associate_wireless_device,
              JSON_EXTRACT(Properties, '$.DisassociateWirelessDevice') as disassociate_wireless_device,
              JSON_EXTRACT(Properties, '$.AssociateMulticastGroup') as associate_multicast_group,
              JSON_EXTRACT(Properties, '$.DisassociateMulticastGroup') as disassociate_multicast_group
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::FuotaTask'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
                JSON_EXTRACT(detail.Properties, '$.FirmwareUpdateImage') as firmware_update_image,
                JSON_EXTRACT(detail.Properties, '$.FirmwareUpdateRole') as firmware_update_role,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.FuotaTaskStatus') as fuota_task_status,
                JSON_EXTRACT(detail.Properties, '$.AssociateWirelessDevice') as associate_wireless_device,
                JSON_EXTRACT(detail.Properties, '$.DisassociateWirelessDevice') as disassociate_wireless_device,
                JSON_EXTRACT(detail.Properties, '$.AssociateMulticastGroup') as associate_multicast_group,
                JSON_EXTRACT(detail.Properties, '$.DisassociateMulticastGroup') as disassociate_multicast_group
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTWireless::FuotaTask'
                AND detail.data__TypeName = 'AWS::IoTWireless::FuotaTask'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'LoRaWAN') as lo_ra_wan,
                  json_extract_path_text(Properties, 'FirmwareUpdateImage') as firmware_update_image,
                  json_extract_path_text(Properties, 'FirmwareUpdateRole') as firmware_update_role,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'FuotaTaskStatus') as fuota_task_status,
                  json_extract_path_text(Properties, 'AssociateWirelessDevice') as associate_wireless_device,
                  json_extract_path_text(Properties, 'DisassociateWirelessDevice') as disassociate_wireless_device,
                  json_extract_path_text(Properties, 'AssociateMulticastGroup') as associate_multicast_group,
                  json_extract_path_text(Properties, 'DisassociateMulticastGroup') as disassociate_multicast_group
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::FuotaTask'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                    json_extract_path_text(detail.Properties, 'FirmwareUpdateImage') as firmware_update_image,
                    json_extract_path_text(detail.Properties, 'FirmwareUpdateRole') as firmware_update_role,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'FuotaTaskStatus') as fuota_task_status,
                    json_extract_path_text(detail.Properties, 'AssociateWirelessDevice') as associate_wireless_device,
                    json_extract_path_text(detail.Properties, 'DisassociateWirelessDevice') as disassociate_wireless_device,
                    json_extract_path_text(detail.Properties, 'AssociateMulticastGroup') as associate_multicast_group,
                    json_extract_path_text(detail.Properties, 'DisassociateMulticastGroup') as disassociate_multicast_group
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTWireless::FuotaTask'
                    AND detail.data__TypeName = 'AWS::IoTWireless::FuotaTask'
                    AND listing.region = 'us-east-1'
    fuota_tasks_list_only:
      name: fuota_tasks_list_only
      id: aws.iotwireless.fuota_tasks_list_only
      x-cfn-schema-name: FuotaTask
      x-cfn-type-name: AWS::IoTWireless::FuotaTask
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::FuotaTask'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::FuotaTask'
                AND region = 'us-east-1'
    fuota_task_tags:
      name: fuota_task_tags
      id: aws.iotwireless.fuota_task_tags
      x-cfn-schema-name: FuotaTask
      x-cfn-type-name: AWS::IoTWireless::FuotaTask
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(detail.Properties, '$.FirmwareUpdateImage') as firmware_update_image,
              JSON_EXTRACT(detail.Properties, '$.FirmwareUpdateRole') as firmware_update_role,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.FuotaTaskStatus') as fuota_task_status,
              JSON_EXTRACT(detail.Properties, '$.AssociateWirelessDevice') as associate_wireless_device,
              JSON_EXTRACT(detail.Properties, '$.DisassociateWirelessDevice') as disassociate_wireless_device,
              JSON_EXTRACT(detail.Properties, '$.AssociateMulticastGroup') as associate_multicast_group,
              JSON_EXTRACT(detail.Properties, '$.DisassociateMulticastGroup') as disassociate_multicast_group
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTWireless::FuotaTask'
              AND detail.data__TypeName = 'AWS::IoTWireless::FuotaTask'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                json_extract_path_text(detail.Properties, 'FirmwareUpdateImage') as firmware_update_image,
                json_extract_path_text(detail.Properties, 'FirmwareUpdateRole') as firmware_update_role,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'FuotaTaskStatus') as fuota_task_status,
                json_extract_path_text(detail.Properties, 'AssociateWirelessDevice') as associate_wireless_device,
                json_extract_path_text(detail.Properties, 'DisassociateWirelessDevice') as disassociate_wireless_device,
                json_extract_path_text(detail.Properties, 'AssociateMulticastGroup') as associate_multicast_group,
                json_extract_path_text(detail.Properties, 'DisassociateMulticastGroup') as disassociate_multicast_group
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTWireless::FuotaTask'
                AND detail.data__TypeName = 'AWS::IoTWireless::FuotaTask'
                AND listing.region = 'us-east-1'
    multicast_groups:
      name: multicast_groups
      id: aws.iotwireless.multicast_groups
      x-cfn-schema-name: MulticastGroup
      x-cfn-type-name: AWS::IoTWireless::MulticastGroup
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__MulticastGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::MulticastGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::MulticastGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::MulticastGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/multicast_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/multicast_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/multicast_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.AssociateWirelessDevice') as associate_wireless_device,
              JSON_EXTRACT(Properties, '$.DisassociateWirelessDevice') as disassociate_wireless_device
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::MulticastGroup'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.AssociateWirelessDevice') as associate_wireless_device,
                JSON_EXTRACT(detail.Properties, '$.DisassociateWirelessDevice') as disassociate_wireless_device
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTWireless::MulticastGroup'
                AND detail.data__TypeName = 'AWS::IoTWireless::MulticastGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'LoRaWAN') as lo_ra_wan,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'AssociateWirelessDevice') as associate_wireless_device,
                  json_extract_path_text(Properties, 'DisassociateWirelessDevice') as disassociate_wireless_device
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::MulticastGroup'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'AssociateWirelessDevice') as associate_wireless_device,
                    json_extract_path_text(detail.Properties, 'DisassociateWirelessDevice') as disassociate_wireless_device
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTWireless::MulticastGroup'
                    AND detail.data__TypeName = 'AWS::IoTWireless::MulticastGroup'
                    AND listing.region = 'us-east-1'
    multicast_groups_list_only:
      name: multicast_groups_list_only
      id: aws.iotwireless.multicast_groups_list_only
      x-cfn-schema-name: MulticastGroup
      x-cfn-type-name: AWS::IoTWireless::MulticastGroup
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::MulticastGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::MulticastGroup'
                AND region = 'us-east-1'
    multicast_group_tags:
      name: multicast_group_tags
      id: aws.iotwireless.multicast_group_tags
      x-cfn-schema-name: MulticastGroup
      x-cfn-type-name: AWS::IoTWireless::MulticastGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.AssociateWirelessDevice') as associate_wireless_device,
              JSON_EXTRACT(detail.Properties, '$.DisassociateWirelessDevice') as disassociate_wireless_device
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTWireless::MulticastGroup'
              AND detail.data__TypeName = 'AWS::IoTWireless::MulticastGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'AssociateWirelessDevice') as associate_wireless_device,
                json_extract_path_text(detail.Properties, 'DisassociateWirelessDevice') as disassociate_wireless_device
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTWireless::MulticastGroup'
                AND detail.data__TypeName = 'AWS::IoTWireless::MulticastGroup'
                AND listing.region = 'us-east-1'
    network_analyzer_configurations:
      name: network_analyzer_configurations
      id: aws.iotwireless.network_analyzer_configurations
      x-cfn-schema-name: NetworkAnalyzerConfiguration
      x-cfn-type-name: AWS::IoTWireless::NetworkAnalyzerConfiguration
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__NetworkAnalyzerConfiguration&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::NetworkAnalyzerConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::NetworkAnalyzerConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::NetworkAnalyzerConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/network_analyzer_configurations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/network_analyzer_configurations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/network_analyzer_configurations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.TraceContent') as trace_content,
              JSON_EXTRACT(Properties, '$.WirelessDevices') as wireless_devices,
              JSON_EXTRACT(Properties, '$.WirelessGateways') as wireless_gateways,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.TraceContent') as trace_content,
                JSON_EXTRACT(detail.Properties, '$.WirelessDevices') as wireless_devices,
                JSON_EXTRACT(detail.Properties, '$.WirelessGateways') as wireless_gateways,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
                AND detail.data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'TraceContent') as trace_content,
                  json_extract_path_text(Properties, 'WirelessDevices') as wireless_devices,
                  json_extract_path_text(Properties, 'WirelessGateways') as wireless_gateways,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'TraceContent') as trace_content,
                    json_extract_path_text(detail.Properties, 'WirelessDevices') as wireless_devices,
                    json_extract_path_text(detail.Properties, 'WirelessGateways') as wireless_gateways,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
                    AND detail.data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
                    AND listing.region = 'us-east-1'
    network_analyzer_configurations_list_only:
      name: network_analyzer_configurations_list_only
      id: aws.iotwireless.network_analyzer_configurations_list_only
      x-cfn-schema-name: NetworkAnalyzerConfiguration
      x-cfn-type-name: AWS::IoTWireless::NetworkAnalyzerConfiguration
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
                AND region = 'us-east-1'
    network_analyzer_configuration_tags:
      name: network_analyzer_configuration_tags
      id: aws.iotwireless.network_analyzer_configuration_tags
      x-cfn-schema-name: NetworkAnalyzerConfiguration
      x-cfn-type-name: AWS::IoTWireless::NetworkAnalyzerConfiguration
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.TraceContent') as trace_content,
              JSON_EXTRACT(detail.Properties, '$.WirelessDevices') as wireless_devices,
              JSON_EXTRACT(detail.Properties, '$.WirelessGateways') as wireless_gateways,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
              AND detail.data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'TraceContent') as trace_content,
                json_extract_path_text(detail.Properties, 'WirelessDevices') as wireless_devices,
                json_extract_path_text(detail.Properties, 'WirelessGateways') as wireless_gateways,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
                AND detail.data__TypeName = 'AWS::IoTWireless::NetworkAnalyzerConfiguration'
                AND listing.region = 'us-east-1'
    partner_accounts:
      name: partner_accounts
      id: aws.iotwireless.partner_accounts
      x-cfn-schema-name: PartnerAccount
      x-cfn-type-name: AWS::IoTWireless::PartnerAccount
      x-identifiers:
        - PartnerAccountId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PartnerAccount&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::PartnerAccount"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::PartnerAccount"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::PartnerAccount"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/partner_accounts/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/partner_accounts/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/partner_accounts/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Sidewalk') as sidewalk,
              JSON_EXTRACT(Properties, '$.PartnerAccountId') as partner_account_id,
              JSON_EXTRACT(Properties, '$.PartnerType') as partner_type,
              JSON_EXTRACT(Properties, '$.SidewalkResponse') as sidewalk_response,
              JSON_EXTRACT(Properties, '$.AccountLinked') as account_linked,
              JSON_EXTRACT(Properties, '$.SidewalkUpdate') as sidewalk_update,
              JSON_EXTRACT(Properties, '$.Fingerprint') as fingerprint,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::PartnerAccount'
              AND data__Identifier = '<PartnerAccountId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Sidewalk') as sidewalk,
                JSON_EXTRACT(detail.Properties, '$.PartnerAccountId') as partner_account_id,
                JSON_EXTRACT(detail.Properties, '$.PartnerType') as partner_type,
                JSON_EXTRACT(detail.Properties, '$.SidewalkResponse') as sidewalk_response,
                JSON_EXTRACT(detail.Properties, '$.AccountLinked') as account_linked,
                JSON_EXTRACT(detail.Properties, '$.SidewalkUpdate') as sidewalk_update,
                JSON_EXTRACT(detail.Properties, '$.Fingerprint') as fingerprint,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTWireless::PartnerAccount'
                AND detail.data__TypeName = 'AWS::IoTWireless::PartnerAccount'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Sidewalk') as sidewalk,
                  json_extract_path_text(Properties, 'PartnerAccountId') as partner_account_id,
                  json_extract_path_text(Properties, 'PartnerType') as partner_type,
                  json_extract_path_text(Properties, 'SidewalkResponse') as sidewalk_response,
                  json_extract_path_text(Properties, 'AccountLinked') as account_linked,
                  json_extract_path_text(Properties, 'SidewalkUpdate') as sidewalk_update,
                  json_extract_path_text(Properties, 'Fingerprint') as fingerprint,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::PartnerAccount'
                  AND data__Identifier = '<PartnerAccountId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Sidewalk') as sidewalk,
                    json_extract_path_text(detail.Properties, 'PartnerAccountId') as partner_account_id,
                    json_extract_path_text(detail.Properties, 'PartnerType') as partner_type,
                    json_extract_path_text(detail.Properties, 'SidewalkResponse') as sidewalk_response,
                    json_extract_path_text(detail.Properties, 'AccountLinked') as account_linked,
                    json_extract_path_text(detail.Properties, 'SidewalkUpdate') as sidewalk_update,
                    json_extract_path_text(detail.Properties, 'Fingerprint') as fingerprint,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTWireless::PartnerAccount'
                    AND detail.data__TypeName = 'AWS::IoTWireless::PartnerAccount'
                    AND listing.region = 'us-east-1'
    partner_accounts_list_only:
      name: partner_accounts_list_only
      id: aws.iotwireless.partner_accounts_list_only
      x-cfn-schema-name: PartnerAccount
      x-cfn-type-name: AWS::IoTWireless::PartnerAccount
      x-identifiers:
        - PartnerAccountId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PartnerAccountId') as partner_account_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::PartnerAccount'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PartnerAccountId') as partner_account_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::PartnerAccount'
                AND region = 'us-east-1'
    partner_account_tags:
      name: partner_account_tags
      id: aws.iotwireless.partner_account_tags
      x-cfn-schema-name: PartnerAccount
      x-cfn-type-name: AWS::IoTWireless::PartnerAccount
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Sidewalk') as sidewalk,
              JSON_EXTRACT(detail.Properties, '$.PartnerAccountId') as partner_account_id,
              JSON_EXTRACT(detail.Properties, '$.PartnerType') as partner_type,
              JSON_EXTRACT(detail.Properties, '$.SidewalkResponse') as sidewalk_response,
              JSON_EXTRACT(detail.Properties, '$.AccountLinked') as account_linked,
              JSON_EXTRACT(detail.Properties, '$.SidewalkUpdate') as sidewalk_update,
              JSON_EXTRACT(detail.Properties, '$.Fingerprint') as fingerprint,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTWireless::PartnerAccount'
              AND detail.data__TypeName = 'AWS::IoTWireless::PartnerAccount'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Sidewalk') as sidewalk,
                json_extract_path_text(detail.Properties, 'PartnerAccountId') as partner_account_id,
                json_extract_path_text(detail.Properties, 'PartnerType') as partner_type,
                json_extract_path_text(detail.Properties, 'SidewalkResponse') as sidewalk_response,
                json_extract_path_text(detail.Properties, 'AccountLinked') as account_linked,
                json_extract_path_text(detail.Properties, 'SidewalkUpdate') as sidewalk_update,
                json_extract_path_text(detail.Properties, 'Fingerprint') as fingerprint,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTWireless::PartnerAccount'
                AND detail.data__TypeName = 'AWS::IoTWireless::PartnerAccount'
                AND listing.region = 'us-east-1'
    service_profiles:
      name: service_profiles
      id: aws.iotwireless.service_profiles
      x-cfn-schema-name: ServiceProfile
      x-cfn-type-name: AWS::IoTWireless::ServiceProfile
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ServiceProfile&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::ServiceProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::ServiceProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::ServiceProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/service_profiles/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/service_profiles/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/service_profiles/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::ServiceProfile'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTWireless::ServiceProfile'
                AND detail.data__TypeName = 'AWS::IoTWireless::ServiceProfile'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'LoRaWAN') as lo_ra_wan,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Id') as id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::ServiceProfile'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Id') as id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTWireless::ServiceProfile'
                    AND detail.data__TypeName = 'AWS::IoTWireless::ServiceProfile'
                    AND listing.region = 'us-east-1'
    service_profiles_list_only:
      name: service_profiles_list_only
      id: aws.iotwireless.service_profiles_list_only
      x-cfn-schema-name: ServiceProfile
      x-cfn-type-name: AWS::IoTWireless::ServiceProfile
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::ServiceProfile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::ServiceProfile'
                AND region = 'us-east-1'
    service_profile_tags:
      name: service_profile_tags
      id: aws.iotwireless.service_profile_tags
      x-cfn-schema-name: ServiceProfile
      x-cfn-type-name: AWS::IoTWireless::ServiceProfile
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTWireless::ServiceProfile'
              AND detail.data__TypeName = 'AWS::IoTWireless::ServiceProfile'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Id') as id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTWireless::ServiceProfile'
                AND detail.data__TypeName = 'AWS::IoTWireless::ServiceProfile'
                AND listing.region = 'us-east-1'
    task_definitions:
      name: task_definitions
      id: aws.iotwireless.task_definitions
      x-cfn-schema-name: TaskDefinition
      x-cfn-type-name: AWS::IoTWireless::TaskDefinition
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TaskDefinition&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::TaskDefinition"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::TaskDefinition"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::TaskDefinition"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/task_definitions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/task_definitions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/task_definitions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.AutoCreateTasks') as auto_create_tasks,
              JSON_EXTRACT(Properties, '$.Update') as _update,
              JSON_EXTRACT(Properties, '$.LoRaWANUpdateGatewayTaskEntry') as lo_ra_wan_update_gateway_task_entry,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.TaskDefinitionType') as task_definition_type,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::TaskDefinition'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.AutoCreateTasks') as auto_create_tasks,
                JSON_EXTRACT(detail.Properties, '$.Update') as _update,
                JSON_EXTRACT(detail.Properties, '$.LoRaWANUpdateGatewayTaskEntry') as lo_ra_wan_update_gateway_task_entry,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.TaskDefinitionType') as task_definition_type,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTWireless::TaskDefinition'
                AND detail.data__TypeName = 'AWS::IoTWireless::TaskDefinition'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'AutoCreateTasks') as auto_create_tasks,
                  json_extract_path_text(Properties, 'Update') as _update,
                  json_extract_path_text(Properties, 'LoRaWANUpdateGatewayTaskEntry') as lo_ra_wan_update_gateway_task_entry,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'TaskDefinitionType') as task_definition_type,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::TaskDefinition'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'AutoCreateTasks') as auto_create_tasks,
                    json_extract_path_text(detail.Properties, 'Update') as _update,
                    json_extract_path_text(detail.Properties, 'LoRaWANUpdateGatewayTaskEntry') as lo_ra_wan_update_gateway_task_entry,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'TaskDefinitionType') as task_definition_type,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTWireless::TaskDefinition'
                    AND detail.data__TypeName = 'AWS::IoTWireless::TaskDefinition'
                    AND listing.region = 'us-east-1'
    task_definitions_list_only:
      name: task_definitions_list_only
      id: aws.iotwireless.task_definitions_list_only
      x-cfn-schema-name: TaskDefinition
      x-cfn-type-name: AWS::IoTWireless::TaskDefinition
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::TaskDefinition'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::TaskDefinition'
                AND region = 'us-east-1'
    task_definition_tags:
      name: task_definition_tags
      id: aws.iotwireless.task_definition_tags
      x-cfn-schema-name: TaskDefinition
      x-cfn-type-name: AWS::IoTWireless::TaskDefinition
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.AutoCreateTasks') as auto_create_tasks,
              JSON_EXTRACT(detail.Properties, '$.Update') as _update,
              JSON_EXTRACT(detail.Properties, '$.LoRaWANUpdateGatewayTaskEntry') as lo_ra_wan_update_gateway_task_entry,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.TaskDefinitionType') as task_definition_type,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTWireless::TaskDefinition'
              AND detail.data__TypeName = 'AWS::IoTWireless::TaskDefinition'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'AutoCreateTasks') as auto_create_tasks,
                json_extract_path_text(detail.Properties, 'Update') as _update,
                json_extract_path_text(detail.Properties, 'LoRaWANUpdateGatewayTaskEntry') as lo_ra_wan_update_gateway_task_entry,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'TaskDefinitionType') as task_definition_type,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTWireless::TaskDefinition'
                AND detail.data__TypeName = 'AWS::IoTWireless::TaskDefinition'
                AND listing.region = 'us-east-1'
    wireless_devices:
      name: wireless_devices
      id: aws.iotwireless.wireless_devices
      x-cfn-schema-name: WirelessDevice
      x-cfn-type-name: AWS::IoTWireless::WirelessDevice
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__WirelessDevice&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::WirelessDevice"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::WirelessDevice"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::WirelessDevice"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/wireless_devices/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/wireless_devices/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/wireless_devices/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DestinationName') as destination_name,
              JSON_EXTRACT(Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ThingArn') as thing_arn,
              JSON_EXTRACT(Properties, '$.ThingName') as thing_name,
              JSON_EXTRACT(Properties, '$.LastUplinkReceivedAt') as last_uplink_received_at,
              JSON_EXTRACT(Properties, '$.Positioning') as positioning
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::WirelessDevice'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.DestinationName') as destination_name,
                JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.ThingArn') as thing_arn,
                JSON_EXTRACT(detail.Properties, '$.ThingName') as thing_name,
                JSON_EXTRACT(detail.Properties, '$.LastUplinkReceivedAt') as last_uplink_received_at,
                JSON_EXTRACT(detail.Properties, '$.Positioning') as positioning
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessDevice'
                AND detail.data__TypeName = 'AWS::IoTWireless::WirelessDevice'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'DestinationName') as destination_name,
                  json_extract_path_text(Properties, 'LoRaWAN') as lo_ra_wan,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'ThingArn') as thing_arn,
                  json_extract_path_text(Properties, 'ThingName') as thing_name,
                  json_extract_path_text(Properties, 'LastUplinkReceivedAt') as last_uplink_received_at,
                  json_extract_path_text(Properties, 'Positioning') as positioning
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::WirelessDevice'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'DestinationName') as destination_name,
                    json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'ThingArn') as thing_arn,
                    json_extract_path_text(detail.Properties, 'ThingName') as thing_name,
                    json_extract_path_text(detail.Properties, 'LastUplinkReceivedAt') as last_uplink_received_at,
                    json_extract_path_text(detail.Properties, 'Positioning') as positioning
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessDevice'
                    AND detail.data__TypeName = 'AWS::IoTWireless::WirelessDevice'
                    AND listing.region = 'us-east-1'
    wireless_devices_list_only:
      name: wireless_devices_list_only
      id: aws.iotwireless.wireless_devices_list_only
      x-cfn-schema-name: WirelessDevice
      x-cfn-type-name: AWS::IoTWireless::WirelessDevice
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::WirelessDevice'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::WirelessDevice'
                AND region = 'us-east-1'
    wireless_device_tags:
      name: wireless_device_tags
      id: aws.iotwireless.wireless_device_tags
      x-cfn-schema-name: WirelessDevice
      x-cfn-type-name: AWS::IoTWireless::WirelessDevice
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.DestinationName') as destination_name,
              JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.ThingArn') as thing_arn,
              JSON_EXTRACT(detail.Properties, '$.ThingName') as thing_name,
              JSON_EXTRACT(detail.Properties, '$.LastUplinkReceivedAt') as last_uplink_received_at,
              JSON_EXTRACT(detail.Properties, '$.Positioning') as positioning
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessDevice'
              AND detail.data__TypeName = 'AWS::IoTWireless::WirelessDevice'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'DestinationName') as destination_name,
                json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'ThingArn') as thing_arn,
                json_extract_path_text(detail.Properties, 'ThingName') as thing_name,
                json_extract_path_text(detail.Properties, 'LastUplinkReceivedAt') as last_uplink_received_at,
                json_extract_path_text(detail.Properties, 'Positioning') as positioning
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessDevice'
                AND detail.data__TypeName = 'AWS::IoTWireless::WirelessDevice'
                AND listing.region = 'us-east-1'
    wireless_device_import_tasks:
      name: wireless_device_import_tasks
      id: aws.iotwireless.wireless_device_import_tasks
      x-cfn-schema-name: WirelessDeviceImportTask
      x-cfn-type-name: AWS::IoTWireless::WirelessDeviceImportTask
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__WirelessDeviceImportTask&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::WirelessDeviceImportTask"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::WirelessDeviceImportTask"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::WirelessDeviceImportTask"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/wireless_device_import_tasks/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/wireless_device_import_tasks/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/wireless_device_import_tasks/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DestinationName') as destination_name,
              JSON_EXTRACT(Properties, '$.CreationDate') as creation_date,
              JSON_EXTRACT(Properties, '$.Sidewalk') as sidewalk,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusReason') as status_reason,
              JSON_EXTRACT(Properties, '$.InitializedImportedDevicesCount') as initialized_imported_devices_count,
              JSON_EXTRACT(Properties, '$.PendingImportedDevicesCount') as pending_imported_devices_count,
              JSON_EXTRACT(Properties, '$.OnboardedImportedDevicesCount') as onboarded_imported_devices_count,
              JSON_EXTRACT(Properties, '$.FailedImportedDevicesCount') as failed_imported_devices_count,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.DestinationName') as destination_name,
                JSON_EXTRACT(detail.Properties, '$.CreationDate') as creation_date,
                JSON_EXTRACT(detail.Properties, '$.Sidewalk') as sidewalk,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.StatusReason') as status_reason,
                JSON_EXTRACT(detail.Properties, '$.InitializedImportedDevicesCount') as initialized_imported_devices_count,
                JSON_EXTRACT(detail.Properties, '$.PendingImportedDevicesCount') as pending_imported_devices_count,
                JSON_EXTRACT(detail.Properties, '$.OnboardedImportedDevicesCount') as onboarded_imported_devices_count,
                JSON_EXTRACT(detail.Properties, '$.FailedImportedDevicesCount') as failed_imported_devices_count,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
                AND detail.data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'DestinationName') as destination_name,
                  json_extract_path_text(Properties, 'CreationDate') as creation_date,
                  json_extract_path_text(Properties, 'Sidewalk') as sidewalk,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'StatusReason') as status_reason,
                  json_extract_path_text(Properties, 'InitializedImportedDevicesCount') as initialized_imported_devices_count,
                  json_extract_path_text(Properties, 'PendingImportedDevicesCount') as pending_imported_devices_count,
                  json_extract_path_text(Properties, 'OnboardedImportedDevicesCount') as onboarded_imported_devices_count,
                  json_extract_path_text(Properties, 'FailedImportedDevicesCount') as failed_imported_devices_count,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'DestinationName') as destination_name,
                    json_extract_path_text(detail.Properties, 'CreationDate') as creation_date,
                    json_extract_path_text(detail.Properties, 'Sidewalk') as sidewalk,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'StatusReason') as status_reason,
                    json_extract_path_text(detail.Properties, 'InitializedImportedDevicesCount') as initialized_imported_devices_count,
                    json_extract_path_text(detail.Properties, 'PendingImportedDevicesCount') as pending_imported_devices_count,
                    json_extract_path_text(detail.Properties, 'OnboardedImportedDevicesCount') as onboarded_imported_devices_count,
                    json_extract_path_text(detail.Properties, 'FailedImportedDevicesCount') as failed_imported_devices_count,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
                    AND detail.data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
                    AND listing.region = 'us-east-1'
    wireless_device_import_tasks_list_only:
      name: wireless_device_import_tasks_list_only
      id: aws.iotwireless.wireless_device_import_tasks_list_only
      x-cfn-schema-name: WirelessDeviceImportTask
      x-cfn-type-name: AWS::IoTWireless::WirelessDeviceImportTask
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
                AND region = 'us-east-1'
    wireless_device_import_task_tags:
      name: wireless_device_import_task_tags
      id: aws.iotwireless.wireless_device_import_task_tags
      x-cfn-schema-name: WirelessDeviceImportTask
      x-cfn-type-name: AWS::IoTWireless::WirelessDeviceImportTask
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.DestinationName') as destination_name,
              JSON_EXTRACT(detail.Properties, '$.CreationDate') as creation_date,
              JSON_EXTRACT(detail.Properties, '$.Sidewalk') as sidewalk,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.StatusReason') as status_reason,
              JSON_EXTRACT(detail.Properties, '$.InitializedImportedDevicesCount') as initialized_imported_devices_count,
              JSON_EXTRACT(detail.Properties, '$.PendingImportedDevicesCount') as pending_imported_devices_count,
              JSON_EXTRACT(detail.Properties, '$.OnboardedImportedDevicesCount') as onboarded_imported_devices_count,
              JSON_EXTRACT(detail.Properties, '$.FailedImportedDevicesCount') as failed_imported_devices_count
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
              AND detail.data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'DestinationName') as destination_name,
                json_extract_path_text(detail.Properties, 'CreationDate') as creation_date,
                json_extract_path_text(detail.Properties, 'Sidewalk') as sidewalk,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'StatusReason') as status_reason,
                json_extract_path_text(detail.Properties, 'InitializedImportedDevicesCount') as initialized_imported_devices_count,
                json_extract_path_text(detail.Properties, 'PendingImportedDevicesCount') as pending_imported_devices_count,
                json_extract_path_text(detail.Properties, 'OnboardedImportedDevicesCount') as onboarded_imported_devices_count,
                json_extract_path_text(detail.Properties, 'FailedImportedDevicesCount') as failed_imported_devices_count
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
                AND detail.data__TypeName = 'AWS::IoTWireless::WirelessDeviceImportTask'
                AND listing.region = 'us-east-1'
    wireless_gateways:
      name: wireless_gateways
      id: aws.iotwireless.wireless_gateways
      x-cfn-schema-name: WirelessGateway
      x-cfn-type-name: AWS::IoTWireless::WirelessGateway
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__WirelessGateway&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::WirelessGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::WirelessGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTWireless::WirelessGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/wireless_gateways/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/wireless_gateways/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/wireless_gateways/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ThingArn') as thing_arn,
              JSON_EXTRACT(Properties, '$.ThingName') as thing_name,
              JSON_EXTRACT(Properties, '$.LastUplinkReceivedAt') as last_uplink_received_at
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::WirelessGateway'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.ThingArn') as thing_arn,
                JSON_EXTRACT(detail.Properties, '$.ThingName') as thing_name,
                JSON_EXTRACT(detail.Properties, '$.LastUplinkReceivedAt') as last_uplink_received_at
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessGateway'
                AND detail.data__TypeName = 'AWS::IoTWireless::WirelessGateway'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'LoRaWAN') as lo_ra_wan,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'ThingArn') as thing_arn,
                  json_extract_path_text(Properties, 'ThingName') as thing_name,
                  json_extract_path_text(Properties, 'LastUplinkReceivedAt') as last_uplink_received_at
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTWireless::WirelessGateway'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'ThingArn') as thing_arn,
                    json_extract_path_text(detail.Properties, 'ThingName') as thing_name,
                    json_extract_path_text(detail.Properties, 'LastUplinkReceivedAt') as last_uplink_received_at
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessGateway'
                    AND detail.data__TypeName = 'AWS::IoTWireless::WirelessGateway'
                    AND listing.region = 'us-east-1'
    wireless_gateways_list_only:
      name: wireless_gateways_list_only
      id: aws.iotwireless.wireless_gateways_list_only
      x-cfn-schema-name: WirelessGateway
      x-cfn-type-name: AWS::IoTWireless::WirelessGateway
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::WirelessGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTWireless::WirelessGateway'
                AND region = 'us-east-1'
    wireless_gateway_tags:
      name: wireless_gateway_tags
      id: aws.iotwireless.wireless_gateway_tags
      x-cfn-schema-name: WirelessGateway
      x-cfn-type-name: AWS::IoTWireless::WirelessGateway
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.LoRaWAN') as lo_ra_wan,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.ThingArn') as thing_arn,
              JSON_EXTRACT(detail.Properties, '$.ThingName') as thing_name,
              JSON_EXTRACT(detail.Properties, '$.LastUplinkReceivedAt') as last_uplink_received_at
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessGateway'
              AND detail.data__TypeName = 'AWS::IoTWireless::WirelessGateway'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'LoRaWAN') as lo_ra_wan,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'ThingArn') as thing_arn,
                json_extract_path_text(detail.Properties, 'ThingName') as thing_name,
                json_extract_path_text(detail.Properties, 'LastUplinkReceivedAt') as last_uplink_received_at
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTWireless::WirelessGateway'
                AND detail.data__TypeName = 'AWS::IoTWireless::WirelessGateway'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Destination&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDestination
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDestinationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DeviceProfile&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDeviceProfile
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDeviceProfileRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__FuotaTask&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateFuotaTask
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateFuotaTaskRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__MulticastGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateMulticastGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateMulticastGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__NetworkAnalyzerConfiguration&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNetworkAnalyzerConfiguration
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNetworkAnalyzerConfigurationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PartnerAccount&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePartnerAccount
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePartnerAccountRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ServiceProfile&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateServiceProfile
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateServiceProfileRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TaskDefinition&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTaskDefinition
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTaskDefinitionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__WirelessDevice&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateWirelessDevice
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateWirelessDeviceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__WirelessDeviceImportTask&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateWirelessDeviceImportTask
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateWirelessDeviceImportTaskRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__WirelessGateway&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateWirelessGateway
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateWirelessGatewayRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
