openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: My Business Account Management API
  description: The My Business Account Management API provides an interface for managing access to a location on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
  version: v1
  x-discovery-doc-revision: '20230104'
  x-generated-date: '2023-01-06'
externalDocs:
  url: https://developers.google.com/my-business/
servers:
  - url: https://mybusinessaccountmanagement.googleapis.com
components:
  schemas:
    ListLocationAdminsResponse:
      properties:
        admins:
          type: array
          items:
            $ref: '#/components/schemas/Admin'
          description: A collection of Admins.
      id: ListLocationAdminsResponse
      description: Response message for AccessControl.ListLocationAdmins.
      type: object
    DeclineInvitationRequest:
      properties: {}
      description: Request message for AccessControl.DeclineInvitation.
      type: object
      id: DeclineInvitationRequest
    OrganizationInfo:
      type: object
      id: OrganizationInfo
      properties:
        phoneNumber:
          description: Output only. The contact number for the organization.
          type: string
          readOnly: true
        registeredDomain:
          description: Output only. The registered domain for the account.
          readOnly: true
          type: string
        address:
          $ref: '#/components/schemas/PostalAddress'
          description: Output only. The postal address for the account.
          readOnly: true
      description: Additional information stored for an organization.
    TargetLocation:
      type: object
      id: TargetLocation
      description: Represents a target location for a pending invitation.
      properties:
        address:
          description: The address of the location to which the user is invited.
          type: string
        locationName:
          type: string
          description: The name of the location to which the user is invited.
    Invitation:
      properties:
        targetType:
          enum:
            - TARGET_TYPE_UNSPECIFIED
            - ACCOUNTS_ONLY
            - LOCATIONS_ONLY
          description: Output only. Specifies which target types should appear in the response.
          readOnly: true
          enumDescriptions:
            - Set when target type is unspecified.
            - List invitations only for targets of type Account.
            - List invitations only for targets of type Location.
          type: string
        targetLocation:
          $ref: '#/components/schemas/TargetLocation'
          description: The target location this invitation is for.
        role:
          type: string
          enumDescriptions:
            - Not specified.
            - The admin has owner-level access and is the primary owner. (Displays as 'Primary Owner' in UI).
            - The admin has owner-level access. (Displays as 'Owner' in UI).
            - The admin has managerial access.
            - The admin can manage social (Google+) pages. (Displays as 'Site Manager' in UI). This API doesn't allow creating an account admin with a SITE_MANAGER role.
          enum:
            - ADMIN_ROLE_UNSPECIFIED
            - PRIMARY_OWNER
            - OWNER
            - MANAGER
            - SITE_MANAGER
          readOnly: true
          description: Output only. The invited role on the account.
        name:
          description: Required. The resource name for the invitation. `accounts/{account_id}/invitations/{invitation_id}`.
          type: string
        targetAccount:
          description: The sparsely populated account this invitation is for.
          $ref: '#/components/schemas/Account'
      type: object
      description: Represents a pending invitation.
      id: Invitation
    ListAccountsResponse:
      id: ListAccountsResponse
      description: Response message for Accounts.ListAccounts.
      type: object
      properties:
        nextPageToken:
          type: string
          description: If the number of accounts exceeds the requested page size, this field is populated with a token to fetch the next page of accounts on a subsequent call to `accounts.list`. If there are no more accounts, this field is not present in the response.
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
          description: A collection of accounts to which the user has access. The personal account of the user doing the query will always be the first item of the result, unless it is filtered out.
    AcceptInvitationRequest:
      description: Request message for AccessControl.AcceptInvitation.
      properties: {}
      type: object
      id: AcceptInvitationRequest
    PostalAddress:
      description: 'Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478'
      id: PostalAddress
      properties:
        sublocality:
          type: string
          description: Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
        organization:
          description: Optional. The name of the organization at the address.
          type: string
        revision:
          type: integer
          description: The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
          format: int32
        addressLines:
          description: Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
          items:
            type: string
          type: array
        administrativeArea:
          description: Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
          type: string
        sortingCode:
          type: string
          description: Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
        locality:
          type: string
          description: 'Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.'
        regionCode:
          type: string
          description: 'Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.'
        postalCode:
          type: string
          description: Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
        recipients:
          type: array
          description: Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
          items:
            type: string
        languageCode:
          description: 'Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address'' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".'
          type: string
      type: object
    ListInvitationsResponse:
      id: ListInvitationsResponse
      description: Response message for AccessControl.ListInvitations.
      properties:
        invitations:
          description: A collection of invitations that are pending for the account. The number of invitations listed here cannot exceed 1000.
          items:
            $ref: '#/components/schemas/Invitation'
          type: array
      type: object
    Empty:
      properties: {}
      id: Empty
      type: object
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
    ListAccountAdminsResponse:
      properties:
        accountAdmins:
          description: A collection of Admin instances.
          items:
            $ref: '#/components/schemas/Admin'
          type: array
      id: ListAccountAdminsResponse
      description: Response message for AccessControl.ListAccountAdmins.
      type: object
    Admin:
      type: object
      id: Admin
      description: An administrator of an Account or a location.
      properties:
        role:
          enum:
            - ADMIN_ROLE_UNSPECIFIED
            - PRIMARY_OWNER
            - OWNER
            - MANAGER
            - SITE_MANAGER
          enumDescriptions:
            - Not specified.
            - The admin has owner-level access and is the primary owner. (Displays as 'Primary Owner' in UI).
            - The admin has owner-level access. (Displays as 'Owner' in UI).
            - The admin has managerial access.
            - The admin can manage social (Google+) pages. (Displays as 'Site Manager' in UI). This API doesn't allow creating an account admin with a SITE_MANAGER role.
          type: string
          description: Required. Specifies the role that this admin uses with the specified Account or Location.
        name:
          type: string
          description: 'Immutable. The resource name. For account admins, this is in the form: `accounts/{account_id}/admins/{admin_id}` For location admins, this is in the form: `locations/{location_id}/admins/{admin_id}` This field will be ignored if set during admin creation.'
        account:
          description: 'Immutable. The name of the Account resource that this Admin refers to. Used when calling locations.admins.create to invite a LocationGroup as an admin. If both this field and `admin` are set on `CREATE` requests, this field takes precedence and the email address in `admin` will be ignored. Format: `accounts/{account}`.'
          type: string
        pendingInvitation:
          type: boolean
          readOnly: true
          description: Output only. Indicates whether this admin has a pending invitation for the specified resource.
        admin:
          type: string
          description: Optional. The name of the admin. When making the initial invitation, this is the invitee's email address. On `GET` calls, the user's email address is returned if the invitation is still pending. Otherwise, it contains the user's first and last names. This field is only needed to be set during admin creation.
    TransferLocationRequest:
      properties:
        destinationAccount:
          type: string
          description: Required. Name of the account resource to transfer the location to (for example, "accounts/{account}").
      type: object
      description: Request message for AccessControl.TransferLocation.
      id: TransferLocationRequest
    Account:
      id: Account
      type: object
      properties:
        name:
          description: Immutable. The resource name, in the format `accounts/{account_id}`.
          type: string
        vettedState:
          enum:
            - VETTED_STATE_UNSPECIFIED
            - NOT_VETTED
            - VETTED
            - INVALID
          type: string
          readOnly: true
          description: Output only. Indicates whether the account is vetted by Google. A vetted account is able to verify locations via the VETTED_PARTNER method.
          enumDescriptions:
            - Not Specified
            - The account is not vetted by Google.
            - The account is vetted by Google and in a valid state. An account is automatically vetted if it has direct access to a vetted group account.
            - The account is vetted but in an invalid state. The account will behave like an unvetted account.
        organizationInfo:
          $ref: '#/components/schemas/OrganizationInfo'
          description: Output only. Additional info for an organization. This is populated only for an organization account.
          readOnly: true
        type:
          enum:
            - ACCOUNT_TYPE_UNSPECIFIED
            - PERSONAL
            - LOCATION_GROUP
            - USER_GROUP
            - ORGANIZATION
          type: string
          enumDescriptions:
            - Not specified.
            - An end-user account.
            - A group of Locations. For more information, see the [help center article] (https://support.google.com/business/answer/6085326)
            - A User Group for segregating organization staff in groups. For more information, see the [help center article](https://support.google.com/business/answer/7655731)
            - An organization representing a company. For more information, see the [help center article](https://support.google.com/business/answer/7663063)
          description: Required. Contains the type of account. Accounts of type PERSONAL and ORGANIZATION cannot be created using this API.
        accountNumber:
          type: string
          readOnly: true
          description: Output only. Account reference number if provisioned.
        accountName:
          description: Required. The name of the account. For an account of type `PERSONAL`, this is the first and last name of the user account.
          type: string
        role:
          enum:
            - ACCOUNT_ROLE_UNSPECIFIED
            - PRIMARY_OWNER
            - OWNER
            - MANAGER
            - SITE_MANAGER
          enumDescriptions:
            - Not specified.
            - The user is the primary owner this account.
            - The user owner of the account.
            - The user can manage this account.
            - The user can manage a limited set of features for the account.
          description: Output only. Specifies the AccountRole of this account.
          type: string
          readOnly: true
        permissionLevel:
          description: Output only. Specifies the permission level the user has for this account.
          type: string
          readOnly: true
          enum:
            - PERMISSION_LEVEL_UNSPECIFIED
            - OWNER_LEVEL
            - MEMBER_LEVEL
          enumDescriptions:
            - Not specified.
            - The user has owner level permission.
            - The user has member level permission.
        verificationState:
          enum:
            - VERIFICATION_STATE_UNSPECIFIED
            - VERIFIED
            - UNVERIFIED
            - VERIFICATION_REQUESTED
          enumDescriptions:
            - Not specified.
            - Verified account.
            - Account that is not verified, and verification has not been requested.
            - Account that is not verified, but verification has been requested.
          description: Output only. If verified, future locations that are created are automatically connected to Google Maps, and have Google+ pages created, without requiring moderation.
          readOnly: true
          type: string
        primaryOwner:
          type: string
          description: Required. Input only. The resource name of the account which will be the primary owner of the account being created. It should be of the form `accounts/{account_id}/`.
      description: An account is a container for your location. If you are the only user who manages locations for your business, you can use your personal Google Account. To share management of locations with multiple users, [create a business account] (https://support.google.com/business/answer/6085339?ref_topic=6085325).
  parameters:
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
            https://www.googleapis.com/auth/monitoring.read: View monitoring data for all of your Google Cloud and third-party projects
            https://www.googleapis.com/auth/monitoring: View and write monitoring data for all of your Google and third-party Cloud and API projects
            https://www.googleapis.com/auth/monitoring.write: Publish metric data to your Google Cloud projects
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    locations:
      id: googlemybusiness.mybusinessaccountmanagement.locations
      name: locations
      title: Locations
      methods:
        transfer:
          operation:
            $ref: '#/paths/~1v1~1locations~1{locationsId}:transfer/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    admins:
      id: googlemybusiness.mybusinessaccountmanagement.admins
      name: admins
      title: Admins
      methods:
        locations_admins_list:
          operation:
            $ref: '#/paths/~1v1~1locations~1{locationsId}~1admins/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        locations_admins_create:
          operation:
            $ref: '#/paths/~1v1~1locations~1{locationsId}~1admins/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        locations_admins_delete:
          operation:
            $ref: '#/paths/~1v1~1locations~1{locationsId}~1admins~1{adminsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        locations_admins_patch:
          operation:
            $ref: '#/paths/~1v1~1locations~1{locationsId}~1admins~1{adminsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        accounts_admins_list:
          operation:
            $ref: '#/paths/~1v1~1accounts~1{accountsId}~1admins/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        accounts_admins_create:
          operation:
            $ref: '#/paths/~1v1~1accounts~1{accountsId}~1admins/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        accounts_admins_patch:
          operation:
            $ref: '#/paths/~1v1~1accounts~1{accountsId}~1admins~1{adminsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        accounts_admins_delete:
          operation:
            $ref: '#/paths/~1v1~1accounts~1{accountsId}~1admins~1{adminsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/admins/methods/locations_admins_list'
          - $ref: '#/components/x-stackQL-resources/admins/methods/accounts_admins_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/admins/methods/locations_admins_create'
          - $ref: '#/components/x-stackQL-resources/admins/methods/accounts_admins_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/admins/methods/locations_admins_delete'
          - $ref: '#/components/x-stackQL-resources/admins/methods/accounts_admins_delete'
    invitations:
      id: googlemybusiness.mybusinessaccountmanagement.invitations
      name: invitations
      title: Invitations
      methods:
        accounts_invitations_accept:
          operation:
            $ref: '#/paths/~1v1~1accounts~1{accountsId}~1invitations~1{invitationsId}:accept/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        accounts_invitations_decline:
          operation:
            $ref: '#/paths/~1v1~1accounts~1{accountsId}~1invitations~1{invitationsId}:decline/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        accounts_invitations_list:
          operation:
            $ref: '#/paths/~1v1~1accounts~1{accountsId}~1invitations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/invitations/methods/accounts_invitations_list'
        insert: []
        update: []
        delete: []
    accounts:
      id: googlemybusiness.mybusinessaccountmanagement.accounts
      name: accounts
      title: Accounts
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1accounts~1{accountsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1accounts~1{accountsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1accounts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1accounts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/accounts/methods/get'
          - $ref: '#/components/x-stackQL-resources/accounts/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/accounts/methods/create'
        update: []
        delete: []
paths:
  /v1/locations/{locationsId}:transfer:
    parameters: &ref_1
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
    post:
      description: Moves a location from an account that the user owns to another account that the same user administers. The user must be an owner of the account the location is currently associated with and must also be at least a manager of the destination account.
      operationId: mybusinessaccountmanagement.locations.transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferLocationRequest'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: exec
  /v1/locations/{locationsId}/admins:
    parameters: *ref_1
    get:
      description: Lists all of the admins for the specified location.
      operationId: mybusinessaccountmanagement.locations.admins.list
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationAdminsResponse'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: admins
      x-stackQL-verb: select
    post:
      description: Invites the specified user to become an administrator for the specified location. The invitee must accept the invitation in order to be granted access to the location. See AcceptInvitation to programmatically accept an invitation.
      operationId: mybusinessaccountmanagement.locations.admins.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: admins
      x-stackQL-verb: insert
  /v1/locations/{locationsId}/admins/{adminsId}:
    parameters: *ref_1
    delete:
      description: Removes the specified admin as a manager of the specified location.
      operationId: mybusinessaccountmanagement.locations.admins.delete
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: adminsId
          required: true
          schema:
            type: string
      x-stackQL-resource: admins
      x-stackQL-verb: delete
    patch:
      description: Updates the Admin for the specified location. Only the AdminRole of the Admin can be updated.
      operationId: mybusinessaccountmanagement.locations.admins.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: adminsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: admins
      x-stackQL-verb: exec
  /v1/accounts/{accountsId}/admins:
    parameters: *ref_1
    get:
      description: Lists the admins for the specified account.
      operationId: mybusinessaccountmanagement.accounts.admins.list
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccountAdminsResponse'
      parameters:
        - in: path
          name: accountsId
          required: true
          schema:
            type: string
      x-stackQL-resource: admins
      x-stackQL-verb: select
    post:
      description: Invites the specified user to become an administrator for the specified account. The invitee must accept the invitation in order to be granted access to the account. See AcceptInvitation to programmatically accept an invitation.
      operationId: mybusinessaccountmanagement.accounts.admins.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      parameters:
        - in: path
          name: accountsId
          required: true
          schema:
            type: string
      x-stackQL-resource: admins
      x-stackQL-verb: insert
  /v1/accounts/{accountsId}/admins/{adminsId}:
    parameters: *ref_1
    patch:
      description: Updates the Admin for the specified Account Admin.
      operationId: mybusinessaccountmanagement.accounts.admins.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      parameters:
        - in: path
          name: accountsId
          required: true
          schema:
            type: string
        - in: path
          name: adminsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: admins
      x-stackQL-verb: exec
    delete:
      description: Removes the specified admin from the specified account.
      operationId: mybusinessaccountmanagement.accounts.admins.delete
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: accountsId
          required: true
          schema:
            type: string
        - in: path
          name: adminsId
          required: true
          schema:
            type: string
      x-stackQL-resource: admins
      x-stackQL-verb: delete
  /v1/accounts/{accountsId}/invitations/{invitationsId}:accept:
    parameters: *ref_1
    post:
      description: Accepts the specified invitation.
      operationId: mybusinessaccountmanagement.accounts.invitations.accept
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptInvitationRequest'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: accountsId
          required: true
          schema:
            type: string
        - in: path
          name: invitationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: invitations
      x-stackQL-verb: exec
  /v1/accounts/{accountsId}/invitations/{invitationsId}:decline:
    parameters: *ref_1
    post:
      description: Declines the specified invitation.
      operationId: mybusinessaccountmanagement.accounts.invitations.decline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeclineInvitationRequest'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: accountsId
          required: true
          schema:
            type: string
        - in: path
          name: invitationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: invitations
      x-stackQL-verb: exec
  /v1/accounts/{accountsId}/invitations:
    parameters: *ref_1
    get:
      description: Lists pending invitations for the specified account.
      operationId: mybusinessaccountmanagement.accounts.invitations.list
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInvitationsResponse'
      parameters:
        - in: path
          name: accountsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: invitations
      x-stackQL-verb: select
  /v1/accounts/{accountsId}:
    parameters: *ref_1
    get:
      description: Gets the specified account. Returns `NOT_FOUND` if the account does not exist or if the caller does not have access rights to it.
      operationId: mybusinessaccountmanagement.accounts.get
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
      parameters:
        - in: path
          name: accountsId
          required: true
          schema:
            type: string
      x-stackQL-resource: accounts
      x-stackQL-verb: select
    patch:
      description: Updates the specified business account. Personal accounts cannot be updated using this method.
      operationId: mybusinessaccountmanagement.accounts.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
      parameters:
        - in: path
          name: accountsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
      x-stackQL-resource: accounts
      x-stackQL-verb: exec
  /v1/accounts:
    parameters: *ref_1
    get:
      description: Lists all of the accounts for the authenticated user. This includes all accounts that the user owns, as well as any accounts for which the user has management rights.
      operationId: mybusinessaccountmanagement.accounts.list
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccountsResponse'
      parameters:
        - in: query
          name: parentAccount
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: accounts
      x-stackQL-verb: select
    post:
      description: Creates an account with the specified name and type under the given parent. - Personal accounts and Organizations cannot be created. - User Groups cannot be created with a Personal account as primary owner. - Location Groups cannot be created with a primary owner of a Personal account if the Personal account is in an Organization. - Location Groups cannot own Location Groups.
      operationId: mybusinessaccountmanagement.accounts.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
      parameters: []
      x-stackQL-resource: accounts
      x-stackQL-verb: insert
