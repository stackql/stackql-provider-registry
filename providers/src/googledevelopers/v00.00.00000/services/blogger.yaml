openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Blogger API
  description: The Blogger API provides access to posts, comments and pages of a Blogger blog.
  version: v3
  x-discovery-doc-revision: '20230112'
  x-generated-date: '2023-01-19'
externalDocs:
  url: https://developers.google.com/blogger/docs/3.0/getting_started
servers:
  - url: https://blogger.googleapis.com
components:
  schemas:
    PostUserInfosList:
      type: object
      id: PostUserInfosList
      properties:
        kind:
          description: The kind of this entity. Always blogger#postList.
          type: string
        nextPageToken:
          type: string
          description: Pagination token to fetch the next page, if one exists.
        items:
          items:
            $ref: '#/components/schemas/PostUserInfo'
          type: array
          description: The list of Posts with User information for the post, for this Blog.
    Blog:
      properties:
        published:
          type: string
          description: RFC 3339 date-time when this blog was published.
        posts:
          description: The container of posts in this blog.
          type: object
          properties:
            totalItems:
              type: integer
              description: The count of posts in this blog.
              format: int32
            items:
              type: array
              description: The List of Posts for this Blog.
              items:
                $ref: '#/components/schemas/Post'
            selfLink:
              description: The URL of the container for posts in this blog.
              type: string
        customMetaData:
          type: string
          description: The JSON custom meta-data for the Blog.
        id:
          type: string
          description: The identifier for this resource.
        kind:
          type: string
          description: The kind of this entry. Always blogger#blog.
        status:
          type: string
          enumDescriptions:
            - ''
            - ''
          enum:
            - LIVE
            - DELETED
          description: The status of the blog.
        pages:
          properties:
            selfLink:
              type: string
              description: The URL of the container for pages in this blog.
            totalItems:
              format: int32
              description: The count of pages in this blog.
              type: integer
          description: The container of pages in this blog.
          type: object
        name:
          description: The name of this blog. This is displayed as the title.
          type: string
        selfLink:
          type: string
          description: The API REST URL to fetch this resource from.
        description:
          description: The description of this blog. This is displayed underneath the title.
          type: string
        url:
          type: string
          description: The URL where this blog is published.
        updated:
          description: RFC 3339 date-time when this blog was last updated.
          type: string
        locale:
          type: object
          properties:
            country:
              type: string
              description: The country this blog's locale is set to.
            variant:
              type: string
              description: The language variant this blog is authored in.
            language:
              type: string
              description: The language this blog is authored in.
          description: The locale this Blog is set to.
      type: object
      id: Blog
    PostPerUserInfo:
      properties:
        kind:
          type: string
          description: The kind of this entity. Always blogger#postPerUserInfo.
        userId:
          description: ID of the User.
          type: string
        postId:
          description: ID of the Post resource.
          type: string
        blogId:
          type: string
          description: ID of the Blog that the post resource belongs to.
        hasEditAccess:
          type: boolean
          description: True if the user has Author level access to the post.
      id: PostPerUserInfo
      type: object
    User:
      id: User
      properties:
        blogs:
          description: The container of blogs for this user.
          properties:
            selfLink:
              type: string
              description: The URL of the Blogs for this user.
          type: object
        displayName:
          description: The display name.
          type: string
        about:
          description: Profile summary information.
          type: string
        kind:
          type: string
          description: The kind of this entity. Always blogger#user.
        locale:
          type: object
          properties:
            language:
              type: string
              description: The language this blog is authored in.
            country:
              type: string
              description: The country this blog's locale is set to.
            variant:
              type: string
              description: The language variant this blog is authored in.
          description: This user's locale
        url:
          description: The user's profile page.
          type: string
        id:
          type: string
          description: The identifier for this User.
        selfLink:
          type: string
          description: The API REST URL to fetch this resource from.
        created:
          type: string
          description: The timestamp of when this profile was created, in seconds since epoch.
      type: object
    BlogUserInfo:
      type: object
      properties:
        blog_user_info:
          $ref: '#/components/schemas/BlogPerUserInfo'
          description: Information about a User for the Blog.
        blog:
          description: The Blog resource.
          $ref: '#/components/schemas/Blog'
        kind:
          type: string
          description: The kind of this entity. Always blogger#blogUserInfo.
      id: BlogUserInfo
    CommentList:
      id: CommentList
      type: object
      properties:
        prevPageToken:
          type: string
          description: Pagination token to fetch the previous page, if one exists.
        etag:
          type: string
          description: Etag of the response.
        nextPageToken:
          description: Pagination token to fetch the next page, if one exists.
          type: string
        kind:
          description: The kind of this entry. Always blogger#commentList.
          type: string
        items:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
          description: The List of Comments for a Post.
    Pageviews:
      id: Pageviews
      properties:
        kind:
          description: The kind of this entry. Always blogger#page_views.
          type: string
        counts:
          items:
            type: object
            properties:
              count:
                type: string
                format: int64
                description: Count of page views for the given time range.
              timeRange:
                description: Time range the given count applies to.
                type: string
                enum:
                  - ALL_TIME
                  - THIRTY_DAYS
                  - SEVEN_DAYS
                enumDescriptions:
                  - ''
                  - ''
                  - ''
          description: The container of posts in this blog.
          type: array
        blogId:
          type: string
          description: Blog Id.
      type: object
    BlogPerUserInfo:
      id: BlogPerUserInfo
      type: object
      properties:
        userId:
          type: string
          description: ID of the User.
        kind:
          type: string
          description: The kind of this entity. Always blogger#blogPerUserInfo.
        blogId:
          type: string
          description: ID of the Blog resource.
        role:
          enum:
            - VIEW_TYPE_UNSPECIFIED
            - READER
            - AUTHOR
            - ADMIN
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          description: Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).
        hasAdminAccess:
          type: boolean
          description: True if the user has Admin level access to the blog.
        photosAlbumKey:
          type: string
          description: The Photo Album Key for the user when adding photos to the blog.
    Post:
      id: Post
      type: object
      properties:
        id:
          description: The identifier of this Post.
          type: string
        title:
          description: The title of the Post.
          type: string
        trashed:
          description: RFC 3339 date-time when this Post was last trashed.
          type: string
        images:
          type: array
          items:
            properties:
              url:
                type: string
            type: object
          description: Display image for the Post.
        labels:
          items:
            type: string
          type: array
          description: The list of labels this Post was tagged with.
        replies:
          type: object
          description: The container of comments on this Post.
          properties:
            items:
              description: The List of Comments for this Post.
              items:
                $ref: '#/components/schemas/Comment'
              type: array
            selfLink:
              description: The URL of the comments on this post.
              type: string
            totalItems:
              description: The count of comments on this post.
              format: int64
              type: string
        kind:
          type: string
          description: The kind of this entity. Always blogger#post.
        status:
          enum:
            - LIVE
            - DRAFT
            - SCHEDULED
            - SOFT_TRASHED
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          description: Status of the post. Only set for admin-level requests.
        published:
          type: string
          description: RFC 3339 date-time when this Post was published.
        author:
          properties:
            id:
              description: The identifier of the creator.
              type: string
            url:
              description: The URL of the creator's Profile page.
              type: string
            displayName:
              type: string
              description: The display name.
            image:
              description: The creator's avatar.
              type: object
              properties:
                url:
                  description: The creator's avatar URL.
                  type: string
          type: object
          description: The author of this Post.
        titleLink:
          description: The title link URL, similar to atom's related link.
          type: string
        customMetaData:
          description: The JSON meta-data for the Post.
          type: string
        location:
          type: object
          properties:
            lng:
              format: double
              description: Location's longitude.
              type: number
            lat:
              description: Location's latitude.
              type: number
              format: double
            name:
              description: Location name.
              type: string
            span:
              description: Location's viewport span. Can be used when rendering a map preview.
              type: string
          description: The location for geotagged posts.
        readerComments:
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
          description: Comment control and display setting for readers of this post.
          enum:
            - ALLOW
            - DONT_ALLOW_SHOW_EXISTING
            - DONT_ALLOW_HIDE_EXISTING
        content:
          type: string
          description: The content of the Post. May contain HTML markup.
        updated:
          type: string
          description: RFC 3339 date-time when this Post was last updated.
        url:
          description: The URL where this Post is displayed.
          type: string
        selfLink:
          type: string
          description: The API REST URL to fetch this resource from.
        blog:
          type: object
          description: Data about the blog containing this Post.
          properties:
            id:
              type: string
              description: The identifier of the Blog that contains this Post.
        etag:
          type: string
          description: Etag of the resource.
    PostUserInfo:
      type: object
      properties:
        post:
          description: The Post resource.
          $ref: '#/components/schemas/Post'
        post_user_info:
          $ref: '#/components/schemas/PostPerUserInfo'
          description: Information about a User for the Post.
        kind:
          description: The kind of this entity. Always blogger#postUserInfo.
          type: string
      id: PostUserInfo
    Comment:
      properties:
        author:
          type: object
          description: The author of this Comment.
          properties:
            id:
              type: string
              description: The identifier of the creator.
            url:
              description: The URL of the creator's Profile page.
              type: string
            displayName:
              description: The display name.
              type: string
            image:
              type: object
              description: The creator's avatar.
              properties:
                url:
                  description: The creator's avatar URL.
                  type: string
        status:
          type: string
          enum:
            - LIVE
            - EMPTIED
            - PENDING
            - SPAM
          description: The status of the comment (only populated for admin users).
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        updated:
          type: string
          description: RFC 3339 date-time when this comment was last updated.
        selfLink:
          description: The API REST URL to fetch this resource from.
          type: string
        post:
          properties:
            id:
              type: string
              description: The identifier of the post containing this comment.
          type: object
          description: Data about the post containing this comment.
        content:
          description: The actual content of the comment. May include HTML markup.
          type: string
        kind:
          type: string
          description: The kind of this entry. Always blogger#comment.
        published:
          description: RFC 3339 date-time when this comment was published.
          type: string
        id:
          description: The identifier for this resource.
          type: string
        inReplyTo:
          description: Data about the comment this is in reply to.
          properties:
            id:
              type: string
              description: The identified of the parent of this comment.
          type: object
        blog:
          properties:
            id:
              description: The identifier of the blog containing this comment.
              type: string
          type: object
          description: Data about the blog containing this comment.
      type: object
      id: Comment
    Page:
      properties:
        kind:
          type: string
          description: The kind of this entity. Always blogger#page.
        author:
          type: object
          description: The author of this Page.
          properties:
            url:
              type: string
              description: The URL of the creator's Profile page.
            displayName:
              description: The display name.
              type: string
            image:
              type: object
              description: The creator's avatar.
              properties:
                url:
                  description: The creator's avatar URL.
                  type: string
            id:
              type: string
              description: The identifier of the creator.
        trashed:
          type: string
          description: RFC 3339 date-time when this Page was trashed.
        blog:
          properties:
            id:
              type: string
              description: The identifier of the blog containing this page.
          description: Data about the blog containing this Page.
          type: object
        etag:
          description: Etag of the resource.
          type: string
        updated:
          description: RFC 3339 date-time when this Page was last updated.
          type: string
        published:
          description: RFC 3339 date-time when this Page was published.
          type: string
        status:
          description: The status of the page for admin resources (either LIVE or DRAFT).
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - LIVE
            - DRAFT
            - SOFT_TRASHED
          type: string
        title:
          description: The title of this entity. This is the name displayed in the Admin user interface.
          type: string
        url:
          type: string
          description: The URL that this Page is displayed at.
        content:
          type: string
          description: The body content of this Page, in HTML.
        id:
          type: string
          description: The identifier for this resource.
        selfLink:
          type: string
          description: The API REST URL to fetch this resource from.
      type: object
      id: Page
    BlogList:
      id: BlogList
      type: object
      properties:
        kind:
          description: The kind of this entity. Always blogger#blogList.
          type: string
        blogUserInfos:
          type: array
          items:
            $ref: '#/components/schemas/BlogUserInfo'
          description: Admin level list of blog per-user information.
        items:
          description: The list of Blogs this user has Authorship or Admin rights over.
          items:
            $ref: '#/components/schemas/Blog'
          type: array
    PostList:
      type: object
      id: PostList
      properties:
        prevPageToken:
          description: Pagination token to fetch the previous page, if one exists.
          type: string
        kind:
          description: The kind of this entity. Always blogger#postList.
          type: string
        items:
          description: The list of Posts for this Blog.
          items:
            $ref: '#/components/schemas/Post'
          type: array
        etag:
          type: string
          description: Etag of the response.
        nextPageToken:
          type: string
          description: Pagination token to fetch the next page, if one exists.
    PageList:
      id: PageList
      type: object
      properties:
        etag:
          description: Etag of the response.
          type: string
        items:
          items:
            $ref: '#/components/schemas/Page'
          description: The list of Pages for a Blog.
          type: array
        kind:
          type: string
          description: The kind of this entity. Always blogger#pageList.
        nextPageToken:
          type: string
          description: Pagination token to fetch the next page, if one exists.
  parameters:
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/blogger.readonly: View your Blogger account
            https://www.googleapis.com/auth/blogger: Manage your Blogger account
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    blogs_by_url:
      id: googledevelopers.blogger.blogs_by_url
      name: blogs_by_url
      title: Blogs_by_url
      methods:
        blogs_getByUrl:
          operation:
            $ref: '#/paths/~1v3~1blogs~1byurl/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/blogs_by_url/methods/blogs_getByUrl'
        insert: []
        update: []
        delete: []
    blogs:
      id: googledevelopers.blogger.blogs
      name: blogs
      title: Blogs
      methods:
        get:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/blogs/methods/get'
        insert: []
        update: []
        delete: []
    blogs_by_user:
      id: googledevelopers.blogger.blogs_by_user
      name: blogs_by_user
      title: Blogs_by_user
      methods:
        blogs_listByUser:
          operation:
            $ref: '#/paths/~1v3~1users~1{userId}~1blogs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    blog_user_infos:
      id: googledevelopers.blogger.blog_user_infos
      name: blog_user_infos
      title: Blog_user_infos
      methods:
        blogUserInfos_get:
          operation:
            $ref: '#/paths/~1v3~1users~1{userId}~1blogs~1{blogId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/blog_user_infos/methods/blogUserInfos_get'
        insert: []
        update: []
        delete: []
    pages:
      id: googledevelopers.blogger.pages
      name: pages
      title: Pages
      methods:
        list:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        revert:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}~1revert/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        publish:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}~1publish/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/pages/methods/get'
          - $ref: '#/components/x-stackQL-resources/pages/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/pages/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/pages/methods/delete'
    users:
      id: googledevelopers.blogger.users
      name: users
      title: Users
      methods:
        get:
          operation:
            $ref: '#/paths/~1v3~1users~1{userId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/users/methods/get'
        insert: []
        update: []
        delete: []
    comments:
      id: googledevelopers.blogger.comments
      name: comments
      title: Comments
      methods:
        markAsSpam:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments~1{commentId}~1spam/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        approve:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments~1{commentId}~1approve/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments~1{commentId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments~1{commentId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/comments/methods/get'
          - $ref: '#/components/x-stackQL-resources/comments/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/comments/methods/delete'
    comments_by_blog:
      id: googledevelopers.blogger.comments_by_blog
      name: comments_by_blog
      title: Comments_by_blog
      methods:
        comments_listByBlog:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1comments/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    comments_content:
      id: googledevelopers.blogger.comments_content
      name: comments_content
      title: Comments_content
      methods:
        comments_removeContent:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments~1{commentId}~1removecontent/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    posts_by_path:
      id: googledevelopers.blogger.posts_by_path
      name: posts_by_path
      title: Posts_by_path
      methods:
        posts_getByPath:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1bypath/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/posts_by_path/methods/posts_getByPath'
        insert: []
        update: []
        delete: []
    posts:
      id: googledevelopers.blogger.posts
      name: posts
      title: Posts
      methods:
        revert:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1revert/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1search/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        publish:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1publish/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/posts/methods/get'
          - $ref: '#/components/x-stackQL-resources/posts/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/posts/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/posts/methods/delete'
    post_user_infos:
      id: googledevelopers.blogger.post_user_infos
      name: post_user_infos
      title: Post_user_infos
      methods:
        postUserInfos_get:
          operation:
            $ref: '#/paths/~1v3~1users~1{userId}~1blogs~1{blogId}~1posts~1{postId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postUserInfos_list:
          operation:
            $ref: '#/paths/~1v3~1users~1{userId}~1blogs~1{blogId}~1posts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/post_user_infos/methods/postUserInfos_get'
          - $ref: '#/components/x-stackQL-resources/post_user_infos/methods/postUserInfos_list'
        insert: []
        update: []
        delete: []
    page_views:
      id: googledevelopers.blogger.page_views
      name: page_views
      title: Page_views
      methods:
        pageViews_get:
          operation:
            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pageviews/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/page_views/methods/pageViews_get'
        insert: []
        update: []
        delete: []
paths:
  /v3/blogs/byurl:
    parameters: &ref_1
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
    get:
      description: Gets a blog by url.
      operationId: blogger.blogs.getByUrl
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
      parameters:
        - in: query
          name: url
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
      x-stackQL-resource: blogs_by_url
      x-stackQL-verb: select
  /v3/blogs/{blogId}:
    parameters: *ref_1
    get:
      description: Gets a blog by id.
      operationId: blogger.blogs.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: maxPosts
          schema:
            type: integer
      x-stackQL-resource: blogs
      x-stackQL-verb: select
  /v3/users/{userId}/blogs:
    parameters: *ref_1
    get:
      description: Lists blogs by user.
      operationId: blogger.blogs.listByUser
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogList'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: fetchUserInfo
          schema:
            type: boolean
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: role
          schema:
            type: string
      x-stackQL-resource: blogs_by_user
      x-stackQL-verb: select
  /v3/users/{userId}/blogs/{blogId}:
    parameters: *ref_1
    get:
      description: Gets one blog and user info pair by blog id and user id.
      operationId: blogger.blogUserInfos.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogUserInfo'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: query
          name: maxPosts
          schema:
            type: integer
      x-stackQL-resource: blog_user_infos
      x-stackQL-verb: select
  /v3/blogs/{blogId}/pages:
    parameters: *ref_1
    get:
      description: Lists pages.
      operationId: blogger.pages.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageList'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: fetchBodies
          schema:
            type: boolean
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
      x-stackQL-resource: pages
      x-stackQL-verb: select
    post:
      description: Inserts a page.
      operationId: blogger.pages.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: query
          name: isDraft
          schema:
            type: boolean
      x-stackQL-resource: pages
      x-stackQL-verb: insert
  /v3/blogs/{blogId}/pages/{pageId}:
    parameters: *ref_1
    put:
      description: Updates a page by blog id and page id.
      operationId: blogger.pages.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: pageId
          required: true
          schema:
            type: string
        - in: query
          name: publish
          schema:
            type: boolean
        - in: query
          name: revert
          schema:
            type: boolean
      x-stackQL-resource: pages
      x-stackQL-verb: exec
    patch:
      description: Patches a page.
      operationId: blogger.pages.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: pageId
          required: true
          schema:
            type: string
        - in: query
          name: revert
          schema:
            type: boolean
        - in: query
          name: publish
          schema:
            type: boolean
      x-stackQL-resource: pages
      x-stackQL-verb: exec
    delete:
      description: Deletes a page by blog id and page id.
      operationId: blogger.pages.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: pageId
          required: true
          schema:
            type: string
        - in: query
          name: useTrash
          schema:
            type: boolean
      x-stackQL-resource: pages
      x-stackQL-verb: delete
    get:
      description: Gets a page by blog id and page id.
      operationId: blogger.pages.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: pageId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
      x-stackQL-resource: pages
      x-stackQL-verb: select
  /v3/blogs/{blogId}/pages/{pageId}/revert:
    parameters: *ref_1
    post:
      description: Reverts a published or scheduled page to draft state.
      operationId: blogger.pages.revert
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: pageId
          required: true
          schema:
            type: string
      x-stackQL-resource: pages
      x-stackQL-verb: exec
  /v3/blogs/{blogId}/pages/{pageId}/publish:
    parameters: *ref_1
    post:
      description: Publishes a page.
      operationId: blogger.pages.publish
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: pageId
          required: true
          schema:
            type: string
      x-stackQL-resource: pages
      x-stackQL-verb: exec
  /v3/users/{userId}:
    parameters: *ref_1
    get:
      description: Gets one user by user_id.
      operationId: blogger.users.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: select
  /v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam:
    parameters: *ref_1
    post:
      description: Marks a comment as spam by blog id, post id and comment id.
      operationId: blogger.comments.markAsSpam
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      x-stackQL-resource: comments
      x-stackQL-verb: exec
  /v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve:
    parameters: *ref_1
    post:
      description: Marks a comment as not spam by blog id, post id and comment id.
      operationId: blogger.comments.approve
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      x-stackQL-resource: comments
      x-stackQL-verb: exec
  /v3/blogs/{blogId}/posts/{postId}/comments:
    parameters: *ref_1
    get:
      description: Lists comments.
      operationId: blogger.comments.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: fetchBodies
          schema:
            type: boolean
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: endDate
          schema:
            type: string
      x-stackQL-resource: comments
      x-stackQL-verb: select
  /v3/blogs/{blogId}/comments:
    parameters: *ref_1
    get:
      description: Lists comments by blog.
      operationId: blogger.comments.listByBlog
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: fetchBodies
          schema:
            type: boolean
        - in: query
          name: endDate
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: comments_by_blog
      x-stackQL-verb: select
  /v3/blogs/{blogId}/posts/{postId}/comments/{commentId}:
    parameters: *ref_1
    delete:
      description: Deletes a comment by blog id, post id and comment id.
      operationId: blogger.comments.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      x-stackQL-resource: comments
      x-stackQL-verb: delete
    get:
      description: Gets a comment by id.
      operationId: blogger.comments.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
      x-stackQL-resource: comments
      x-stackQL-verb: select
  /v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent:
    parameters: *ref_1
    post:
      description: Removes the content of a comment by blog id, post id and comment id.
      operationId: blogger.comments.removeContent
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      x-stackQL-resource: comments_content
      x-stackQL-verb: delete
  /v3/blogs/{blogId}/posts/bypath:
    parameters: *ref_1
    get:
      description: Gets a post by path.
      operationId: blogger.posts.getByPath
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: maxComments
          schema:
            type: integer
      x-stackQL-resource: posts_by_path
      x-stackQL-verb: select
  /v3/blogs/{blogId}/posts/{postId}/revert:
    parameters: *ref_1
    post:
      description: Reverts a published or scheduled post to draft state.
      operationId: blogger.posts.revert
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
      x-stackQL-resource: posts
      x-stackQL-verb: exec
  /v3/blogs/{blogId}/posts/{postId}:
    parameters: *ref_1
    patch:
      description: Patches a post.
      operationId: blogger.posts.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: query
          name: revert
          schema:
            type: boolean
        - in: query
          name: fetchBody
          schema:
            type: boolean
        - in: query
          name: maxComments
          schema:
            type: integer
        - in: query
          name: fetchImages
          schema:
            type: boolean
        - in: query
          name: publish
          schema:
            type: boolean
      x-stackQL-resource: posts
      x-stackQL-verb: exec
    get:
      description: Gets a post by blog id and post id
      operationId: blogger.posts.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: query
          name: fetchBody
          schema:
            type: boolean
        - in: query
          name: maxComments
          schema:
            type: integer
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: fetchImages
          schema:
            type: boolean
      x-stackQL-resource: posts
      x-stackQL-verb: select
    delete:
      description: Deletes a post by blog id and post id.
      operationId: blogger.posts.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: query
          name: useTrash
          schema:
            type: boolean
      x-stackQL-resource: posts
      x-stackQL-verb: delete
    put:
      description: Updates a post by blog id and post id.
      operationId: blogger.posts.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: query
          name: fetchImages
          schema:
            type: boolean
        - in: query
          name: fetchBody
          schema:
            type: boolean
        - in: query
          name: maxComments
          schema:
            type: integer
        - in: query
          name: publish
          schema:
            type: boolean
        - in: query
          name: revert
          schema:
            type: boolean
      x-stackQL-resource: posts
      x-stackQL-verb: exec
  /v3/blogs/{blogId}/posts:
    parameters: *ref_1
    post:
      description: Inserts a post.
      operationId: blogger.posts.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: query
          name: fetchBody
          schema:
            type: boolean
        - in: query
          name: fetchImages
          schema:
            type: boolean
        - in: query
          name: isDraft
          schema:
            type: boolean
      x-stackQL-resource: posts
      x-stackQL-verb: insert
    get:
      description: Lists posts.
      operationId: blogger.posts.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: labels
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: fetchBodies
          schema:
            type: boolean
        - in: query
          name: fetchImages
          schema:
            type: boolean
        - in: query
          name: sortOption
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
        - in: query
          name: endDate
          schema:
            type: string
      x-stackQL-resource: posts
      x-stackQL-verb: select
  /v3/blogs/{blogId}/posts/search:
    parameters: *ref_1
    get:
      description: Searches for posts matching given query terms in the specified blog.
      operationId: blogger.posts.search
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: query
          name: q
          required: true
          schema:
            type: string
        - in: query
          name: fetchBodies
          schema:
            type: boolean
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: posts
      x-stackQL-verb: exec
  /v3/blogs/{blogId}/posts/{postId}/publish:
    parameters: *ref_1
    post:
      description: Publishes a post.
      operationId: blogger.posts.publish
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: query
          name: publishDate
          schema:
            type: string
      x-stackQL-resource: posts
      x-stackQL-verb: exec
  /v3/users/{userId}/blogs/{blogId}/posts/{postId}:
    parameters: *ref_1
    get:
      description: Gets one post and user info pair, by post_id and user_id.
      operationId: blogger.postUserInfos.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserInfo'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: query
          name: maxComments
          schema:
            type: integer
      x-stackQL-resource: post_user_infos
      x-stackQL-verb: select
  /v3/users/{userId}/blogs/{blogId}/posts:
    parameters: *ref_1
    get:
      description: Lists post and user info pairs.
      operationId: blogger.postUserInfos.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
        - Oauth2:
            - https://www.googleapis.com/auth/blogger.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/blogger.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserInfosList'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: labels
          schema:
            type: string
        - in: query
          name: fetchBodies
          schema:
            type: boolean
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: endDate
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
      x-stackQL-resource: post_user_infos
      x-stackQL-verb: select
  /v3/blogs/{blogId}/pageviews:
    parameters: *ref_1
    get:
      description: Gets page views by blog id.
      operationId: blogger.pageViews.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/blogger
          Oauth2c:
            - https://www.googleapis.com/auth/blogger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageviews'
      parameters:
        - in: path
          name: blogId
          required: true
          schema:
            type: string
        - in: query
          name: range
          schema:
            type: string
      x-stackQL-resource: page_views
      x-stackQL-verb: select
