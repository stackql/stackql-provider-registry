openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Google Play Game Services
  description: The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
  version: v1
  x-discovery-doc-revision: '20221213'
  x-generated-date: '2023-01-06'
externalDocs:
  url: https://developers.google.com/games/
servers:
  - url: https://games.googleapis.com
components:
  schemas:
    AchievementSetStepsAtLeastResponse:
      id: AchievementSetStepsAtLeastResponse
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementSetStepsAtLeastResponse`.
        newlyUnlocked:
          type: boolean
          description: Whether the current steps for the achievement has reached the number of steps required to unlock.
        currentSteps:
          format: int32
          description: The current steps recorded for this incremental achievement.
          type: integer
      type: object
      description: An achievement set steps at least response.
    Leaderboard:
      properties:
        isIconUrlDefault:
          type: boolean
          description: Indicates whether the icon image being returned is a default image, or is game-provided.
        name:
          description: The name of the leaderboard.
          type: string
        id:
          description: The leaderboard ID.
          type: string
        iconUrl:
          type: string
          description: The icon for the leaderboard.
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboard`.
        order:
          description: How scores are ordered.
          enumDescriptions:
            - Default value. This value is unused.
            - Larger values are better; scores are sorted in descending order
            - Smaller values are better; scores are sorted in ascending order
          type: string
          enum:
            - SCORE_ORDER_UNSPECIFIED
            - LARGER_IS_BETTER
            - SMALLER_IS_BETTER
      id: Leaderboard
      description: The Leaderboard resource.
      type: object
    PlayerExperienceInfo:
      type: object
      description: 1P/3P metadata about the player's experience.
      id: PlayerExperienceInfo
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerExperienceInfo`.
        nextLevel:
          description: The next level of the player. If the current level is the maximum level, this should be same as the current level.
          $ref: '#/components/schemas/PlayerLevel'
        currentExperiencePoints:
          description: The current number of experience points for the player.
          format: int64
          type: string
        lastLevelUpTimestampMillis:
          type: string
          description: The timestamp when the player was leveled up, in millis since Unix epoch UTC.
          format: int64
        currentLevel:
          $ref: '#/components/schemas/PlayerLevel'
          description: The current level of the player.
    LeaderboardListResponse:
      type: object
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardListResponse`.
        items:
          items:
            $ref: '#/components/schemas/Leaderboard'
          description: The leaderboards.
          type: array
        nextPageToken:
          description: Token corresponding to the next page of results.
          type: string
      id: LeaderboardListResponse
      description: A list of leaderboard objects.
    InstanceAndroidDetails:
      id: InstanceAndroidDetails
      description: The Android instance details resource.
      type: object
      properties:
        preferred:
          description: Indicates that this instance is the default for new installations.
          type: boolean
        enablePiracyCheck:
          description: Flag indicating whether the anti-piracy check is enabled.
          type: boolean
        packageName:
          description: Android package name which maps to Google Play URL.
          type: string
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceAndroidDetails`.
          type: string
    EventChild:
      type: object
      description: An event child relationship resource.
      id: EventChild
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#eventChild`.
        childId:
          type: string
          description: The ID of the child event.
    SnapshotImage:
      type: object
      description: An image of a snapshot.
      id: SnapshotImage
      properties:
        width:
          type: integer
          description: The width of the image.
          format: int32
        mime_type:
          type: string
          description: The MIME type of the image.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshotImage`.
          type: string
        height:
          type: integer
          format: int32
          description: The height of the image.
        url:
          type: string
          description: The URL of the image. This URL may be invalidated at any time and should not be cached.
    PlayerEvent:
      type: object
      description: An event status resource.
      properties:
        definitionId:
          type: string
          description: The ID of the event definition.
        numEvents:
          type: string
          description: The current number of times this event has occurred.
          format: int64
        playerId:
          description: The ID of the player.
          type: string
        formattedNumEvents:
          description: The current number of times this event has occurred, as a string. The formatting of this string depends on the configuration of your event in the Play Games Developer Console.
          type: string
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEvent`.
      id: PlayerEvent
    AchievementRevealResponse:
      type: object
      id: AchievementRevealResponse
      description: An achievement reveal response
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementRevealResponse`.
        currentState:
          type: string
          enumDescriptions:
            - Safe default, don't use.
            - Achievement is revealed.
            - Achievement is unlocked.
          description: The current state of the achievement for which a reveal was attempted. This might be `UNLOCKED` if the achievement was already unlocked.
          enum:
            - REVEAL_ACHIEVEMENT_STATE_UNSPECIFIED
            - REVEALED
            - UNLOCKED
    AchievementUnlockResponse:
      id: AchievementUnlockResponse
      description: An achievement unlock response
      type: object
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUnlockResponse`.
        newlyUnlocked:
          type: boolean
          description: Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).
    ApplicationCategory:
      description: An application category object.
      properties:
        primary:
          type: string
          description: The primary category.
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#applicationCategory`.
        secondary:
          type: string
          description: The secondary category.
      type: object
      id: ApplicationCategory
    LeaderboardScoreRank:
      properties:
        formattedNumScores:
          type: string
          description: The number of scores in the leaderboard as a string.
        formattedRank:
          description: The rank in the leaderboard as a string.
          type: string
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardScoreRank`.
        rank:
          description: The rank in the leaderboard.
          format: int64
          type: string
        numScores:
          description: The number of scores in the leaderboard.
          format: int64
          type: string
      description: A score rank in a leaderboard.
      type: object
      id: LeaderboardScoreRank
    ScopedPlayerIds:
      type: object
      description: Scoped player identifiers.
      properties:
        gamePlayerId:
          type: string
          description: Game-scoped player identifier. This is the same id that is returned in GetPlayer game_player_id field.
        developerPlayerKey:
          description: Identifier of the player across all games of the given developer. Every player has the same developer_player_key in all games of one developer. Developer player key changes for the game if the game is transferred to another developer. Note that game_player_id will stay unchanged.
          type: string
      id: ScopedPlayerIds
    EventUpdateResponse:
      properties:
        playerEvents:
          type: array
          description: The current status of any updated events
          items:
            $ref: '#/components/schemas/PlayerEvent'
        eventFailures:
          description: Any failures updating a particular event.
          items:
            $ref: '#/components/schemas/EventRecordFailure'
          type: array
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateResponse`.
        batchFailures:
          items:
            $ref: '#/components/schemas/EventBatchRecordFailure'
          description: Any batch-wide failures which occurred applying updates.
          type: array
      id: EventUpdateResponse
      type: object
      description: An event period update resource.
    PlayerLeaderboardScore:
      type: object
      id: PlayerLeaderboardScore
      properties:
        socialRank:
          $ref: '#/components/schemas/LeaderboardScoreRank'
          description: The social rank of the score in this leaderboard.
        scoreString:
          description: The formatted value of this score.
          type: string
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScore`.
        writeTimestamp:
          format: int64
          description: The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.
          type: string
        leaderboard_id:
          type: string
          description: The ID of the leaderboard this score is in.
        friendsRank:
          $ref: '#/components/schemas/LeaderboardScoreRank'
          description: The rank of the score in the friends collection for this leaderboard.
        scoreTag:
          description: Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
          type: string
        scoreValue:
          type: string
          format: int64
          description: The numerical value of this score.
        publicRank:
          $ref: '#/components/schemas/LeaderboardScoreRank'
          description: The public rank of the score in this leaderboard. This object will not be present if the user is not sharing their scores publicly.
        timeSpan:
          type: string
          description: The time span of this score.
          enum:
            - SCORE_TIME_SPAN_UNSPECIFIED
            - ALL_TIME
            - WEEKLY
            - DAILY
          enumDescriptions:
            - Default value. This value is unused.
            - The score is an all-time score.
            - The score is a weekly score.
            - The score is a daily score.
      description: A player leaderboard score object.
    Application:
      description: The Application resource.
      id: Application
      type: object
      properties:
        leaderboard_count:
          type: integer
          description: The number of leaderboards visible to the currently authenticated player.
          format: int32
        instances:
          description: The instances of the application.
          type: array
          items:
            $ref: '#/components/schemas/Instance'
        themeColor:
          type: string
          description: A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. "E0E0E0").
        assets:
          type: array
          items:
            $ref: '#/components/schemas/ImageAsset'
          description: The assets of the application.
        enabledFeatures:
          items:
            enum:
              - APPLICATION_FEATURE_UNSPECIFIED
              - SNAPSHOTS
            type: string
            enumDescriptions:
              - Safe default, don't use.
              - Saved Games (snapshots).
          description: A list of features that have been enabled for the application.
          type: array
        achievement_count:
          format: int32
          description: The number of achievements visible to the currently authenticated player.
          type: integer
        lastUpdatedTimestamp:
          format: int64
          type: string
          description: The last updated timestamp of the application.
        name:
          description: The name of the application.
          type: string
        description:
          type: string
          description: The description of the application.
        category:
          description: The category of the application.
          $ref: '#/components/schemas/ApplicationCategory'
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#application`.
        id:
          description: The ID of the application.
          type: string
        author:
          type: string
          description: The author of the application.
    PlayerLeaderboardScoreListResponse:
      properties:
        player:
          $ref: '#/components/schemas/Player'
          description: The Player resources for the owner of this score.
        items:
          description: The leaderboard scores.
          type: array
          items:
            $ref: '#/components/schemas/PlayerLeaderboardScore'
        nextPageToken:
          type: string
          description: The pagination token for the next page of results.
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScoreListResponse`.
      id: PlayerLeaderboardScoreListResponse
      description: A list of player leaderboard scores.
      type: object
    Player:
      description: A Player resource.
      type: object
      properties:
        bannerUrlLandscape:
          type: string
          description: The url to the landscape mode player banner image.
        avatarImageUrl:
          description: The base URL for the image that represents the player.
          type: string
        gamePlayerId:
          type: string
          description: Per-application unique player identifier.
        experienceInfo:
          description: An object to represent Play Game experience information for the player.
          $ref: '#/components/schemas/PlayerExperienceInfo'
        originalPlayerId:
          type: string
          description: The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.
        bannerUrlPortrait:
          type: string
          description: The url to the portrait mode player banner image.
        profileSettings:
          description: The player's profile settings. Controls whether or not the player's profile is visible to other players.
          $ref: '#/components/schemas/ProfileSettings'
        playerId:
          description: The ID of the player.
          type: string
        title:
          type: string
          description: The player's title rewarded for their game activities.
        name:
          properties:
            familyName:
              type: string
              description: The family name of this player. In some places, this is known as the last name.
            givenName:
              description: The given name of this player. In some places, this is known as the first name.
              type: string
          type: object
          description: A representation of the individual components of the name.
        friendStatus:
          description: The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.
          type: string
          enum:
            - FRIEND_STATUS_UNSPECIFIED
            - NO_RELATIONSHIP
            - FRIEND
          enumDescriptions:
            - Default value. This value is unused.
            - There is no relationship between the players.
            - The player and requester are friends.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#player`
          type: string
        displayName:
          description: The name to display for the player.
          type: string
      id: Player
    MetagameConfig:
      properties:
        playerLevels:
          description: The list of player levels.
          items:
            $ref: '#/components/schemas/PlayerLevel'
          type: array
        currentVersion:
          format: int32
          description: Current version of the metagame configuration data. When this data is updated, the version number will be increased by one.
          type: integer
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#metagameConfig`.
      description: The metagame config resource
      type: object
      id: MetagameConfig
    EventDefinitionListResponse:
      type: object
      description: A ListDefinitions response.
      properties:
        items:
          description: The event definitions.
          type: array
          items:
            $ref: '#/components/schemas/EventDefinition'
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinitionListResponse`.
          type: string
        nextPageToken:
          type: string
          description: The pagination token for the next page of results.
      id: EventDefinitionListResponse
    PlayerAchievementListResponse:
      id: PlayerAchievementListResponse
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PlayerAchievement'
          description: The achievements.
        nextPageToken:
          description: Token corresponding to the next page of results.
          type: string
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievementListResponse`.
          type: string
      description: A list of achievement objects.
    AchievementDefinition:
      type: object
      id: AchievementDefinition
      description: An achievement definition object.
      properties:
        experiencePoints:
          description: Experience points which will be earned when unlocking this achievement.
          format: int64
          type: string
        description:
          description: The description of the achievement.
          type: string
        achievementType:
          enum:
            - ACHIEVEMENT_TYPE_UNSPECIFIED
            - STANDARD
            - INCREMENTAL
          description: The type of the achievement.
          type: string
          enumDescriptions:
            - Safe default, don't use.
            - Achievement is either locked or unlocked.
            - Achievement is incremental.
        isUnlockedIconUrlDefault:
          description: Indicates whether the unlocked icon image being returned is a default image, or is game-provided.
          type: boolean
        isRevealedIconUrlDefault:
          description: Indicates whether the revealed icon image being returned is a default image, or is provided by the game.
          type: boolean
        name:
          type: string
          description: The name of the achievement.
        id:
          type: string
          description: The ID of the achievement.
        formattedTotalSteps:
          type: string
          description: The total steps for an incremental achievement as a string.
        revealedIconUrl:
          type: string
          description: The image URL for the revealed achievement icon.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinition`.
          type: string
        totalSteps:
          description: The total steps for an incremental achievement.
          format: int32
          type: integer
        initialState:
          description: The initial state of the achievement.
          enumDescriptions:
            - Safe default, don't use.
            - Achievement is hidden.
            - Achievement is revealed.
            - Achievement is unlocked.
          type: string
          enum:
            - INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED
            - HIDDEN
            - REVEALED
            - UNLOCKED
        unlockedIconUrl:
          description: The image URL for the unlocked achievement icon.
          type: string
    PlayerEventListResponse:
      id: PlayerEventListResponse
      properties:
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEventListResponse`.
          type: string
        nextPageToken:
          type: string
          description: The pagination token for the next page of results.
        items:
          items:
            $ref: '#/components/schemas/PlayerEvent'
          type: array
          description: The player events.
      description: A ListByPlayer response.
      type: object
    RevisionCheckResponse:
      type: object
      id: RevisionCheckResponse
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#revisionCheckResponse`.
        revisionStatus:
          type: string
          description: The result of the revision check.
          enumDescriptions:
            - Default value. This value is unused.
            - The revision being used is current.
            - There is currently a newer version available, but the revision being used still works.
            - The revision being used is not supported in any released version.
          enum:
            - REVISION_STATUS_UNSPECIFIED
            - OK
            - DEPRECATED
            - INVALID
        apiVersion:
          type: string
          description: The version of the API this client revision should use when calling API methods.
      description: A third party checking a revision response.
    SnapshotListResponse:
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Snapshot'
          description: The snapshots.
        nextPageToken:
          type: string
          description: Token corresponding to the next page of results. If there are no more results, the token is omitted.
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshotListResponse`.
      description: A third party list snapshots response.
      id: SnapshotListResponse
      type: object
    AchievementUpdateMultipleResponse:
      description: Response message for UpdateMultipleAchievements rpc.
      properties:
        updatedAchievements:
          type: array
          items:
            $ref: '#/components/schemas/AchievementUpdateResponse'
          description: The updated state of the achievements.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateMultipleResponse`.
          type: string
      id: AchievementUpdateMultipleResponse
      type: object
    AchievementDefinitionsListResponse:
      properties:
        nextPageToken:
          type: string
          description: Token corresponding to the next page of results.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinitionsListResponse`.
          type: string
        items:
          items:
            $ref: '#/components/schemas/AchievementDefinition'
          type: array
          description: The achievement definitions.
      description: A list of achievement definition objects.
      id: AchievementDefinitionsListResponse
      type: object
    PlayerLevel:
      type: object
      id: PlayerLevel
      properties:
        maxExperiencePoints:
          format: int64
          type: string
          description: The maximum experience points for this level.
        level:
          description: The level for the user.
          type: integer
          format: int32
        minExperiencePoints:
          description: The minimum experience points for this level.
          type: string
          format: int64
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLevel`.
          type: string
      description: 1P/3P metadata about a user's level.
    Category:
      id: Category
      properties:
        experiencePoints:
          format: int64
          description: Experience points earned in this category.
          type: string
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#category`.
          type: string
        category:
          description: The category name.
          type: string
      type: object
      description: Data related to individual game categories.
    InstanceWebDetails:
      description: The Web details resource.
      properties:
        launchUrl:
          description: Launch URL for the game.
          type: string
        preferred:
          type: boolean
          description: Indicates that this instance is the default for new installations.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceWebDetails`.
          type: string
      id: InstanceWebDetails
      type: object
    EndPoint:
      description: Container for a URL end point of the requested type.
      type: object
      properties:
        url:
          description: A URL suitable for loading in a web browser for the requested endpoint.
          type: string
      id: EndPoint
    EventDefinition:
      id: EventDefinition
      type: object
      description: An event definition resource.
      properties:
        id:
          type: string
          description: The ID of the event.
        isDefaultImageUrl:
          type: boolean
          description: Indicates whether the icon image being returned is a default image, or is game-provided.
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinition`.
        displayName:
          description: The name to display for the event.
          type: string
        visibility:
          enum:
            - EVENT_VISIBILITY_UNSPECIFIED
            - REVEALED
            - HIDDEN
          type: string
          enumDescriptions:
            - Default value. Should not be used.
            - This event should be visible to all users.
            - This event should only be shown to users that have recorded this event at least once.
          description: The visibility of event being tracked in this definition.
        childEvents:
          description: A list of events that are a child of this event.
          type: array
          items:
            $ref: '#/components/schemas/EventChild'
        imageUrl:
          type: string
          description: The base URL for the image that represents the event.
        description:
          description: Description of what this event represents.
          type: string
    CategoryListResponse:
      properties:
        nextPageToken:
          description: Token corresponding to the next page of results.
          type: string
        items:
          description: The list of categories with usage data.
          items:
            $ref: '#/components/schemas/Category'
          type: array
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#categoryListResponse`.
          type: string
      type: object
      id: CategoryListResponse
      description: A third party list metagame categories response.
    GamesAchievementSetStepsAtLeast:
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#GamesAchievementSetStepsAtLeast`.
        steps:
          type: integer
          description: The minimum number of steps for the achievement to be set to.
          format: int32
      type: object
      description: The payload to request to increment an achievement.
      id: GamesAchievementSetStepsAtLeast
    AchievementUpdateMultipleRequest:
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateMultipleRequest`.
        updates:
          items:
            $ref: '#/components/schemas/AchievementUpdateRequest'
          description: The individual achievement update requests.
          type: array
      id: AchievementUpdateMultipleRequest
      type: object
      description: A list of achievement update requests.
    LeaderboardEntry:
      description: The Leaderboard Entry resource.
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardEntry`.
        scoreTag:
          description: Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
          type: string
        scoreValue:
          type: string
          format: int64
          description: The numerical value of this score.
        formattedScoreRank:
          description: The localized string for the rank of this score for this leaderboard.
          type: string
        player:
          $ref: '#/components/schemas/Player'
          description: The player who holds this score.
        formattedScore:
          type: string
          description: The localized string for the numerical value of this score.
        timeSpan:
          enumDescriptions:
            - Default value. This value is unused.
            - The score is an all-time score.
            - The score is a weekly score.
            - The score is a daily score.
          type: string
          description: The time span of this high score.
          enum:
            - SCORE_TIME_SPAN_UNSPECIFIED
            - ALL_TIME
            - WEEKLY
            - DAILY
        writeTimestampMillis:
          format: int64
          description: The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.
          type: string
        scoreRank:
          description: The rank of this score for this leaderboard.
          type: string
          format: int64
      type: object
      id: LeaderboardEntry
    PlayerScoreListResponse:
      properties:
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreListResponse`.
          type: string
        submittedScores:
          description: The score submissions statuses.
          type: array
          items:
            $ref: '#/components/schemas/PlayerScoreResponse'
      description: A list of score submission statuses.
      id: PlayerScoreListResponse
      type: object
    ScoreSubmission:
      description: A request to submit a score to leaderboards.
      properties:
        scoreTag:
          type: string
          description: Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
        leaderboardId:
          type: string
          description: The leaderboard this score is being submitted to.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#scoreSubmission`.
          type: string
        score:
          type: string
          description: The new score being submitted.
          format: int64
        signature:
          type: string
          description: Signature Values will contain URI-safe characters as defined by section 2.3 of RFC 3986.
      type: object
      id: ScoreSubmission
    Instance:
      type: object
      properties:
        acquisitionUri:
          description: URI which shows where a user can acquire this instance.
          type: string
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#instance`.
          type: string
        webInstance:
          description: Platform dependent details for Web.
          $ref: '#/components/schemas/InstanceWebDetails'
        iosInstance:
          $ref: '#/components/schemas/InstanceIosDetails'
          description: Platform dependent details for iOS.
        name:
          type: string
          description: Localized display name.
        androidInstance:
          $ref: '#/components/schemas/InstanceAndroidDetails'
          description: Platform dependent details for Android.
        platformType:
          enum:
            - PLATFORM_TYPE_UNSPECIFIED
            - ANDROID
            - IOS
            - WEB_APP
          description: The platform type.
          type: string
          enumDescriptions:
            - Default value. Should be unused.
            - Instance is for Android.
            - Instance is for iOS.
            - Instance is for Web App.
        turnBasedPlay:
          description: Flag to show if this game instance supports turn based play.
          type: boolean
        realtimePlay:
          description: Flag to show if this game instance supports realtime play.
          type: boolean
      description: The Instance resource.
      id: Instance
    EventUpdateRequest:
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateRequest`.
        updateCount:
          description: The number of times this event occurred in this time period.
          type: string
          format: int64
        definitionId:
          type: string
          description: The ID of the event being modified in this update.
      type: object
      id: EventUpdateRequest
      description: An event period update resource.
    EventPeriodUpdate:
      properties:
        timePeriod:
          description: The time period being covered by this update.
          $ref: '#/components/schemas/EventPeriodRange'
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#eventPeriodUpdate`.
        updates:
          items:
            $ref: '#/components/schemas/EventUpdateRequest'
          description: The updates being made for this time period.
          type: array
      description: An event period update resource.
      type: object
      id: EventPeriodUpdate
    GamesAchievementIncrement:
      type: object
      id: GamesAchievementIncrement
      description: The payload to request to increment an achievement.
      properties:
        steps:
          format: int32
          description: The number of steps to be incremented.
          type: integer
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#GamesAchievementIncrement`.
          type: string
        requestId:
          format: int64
          type: string
          description: The requestId associated with an increment to an achievement.
    PlayerScoreResponse:
      properties:
        beatenScoreTimeSpans:
          description: The time spans where the submitted score is better than the existing score for that time span.
          type: array
          items:
            type: string
            enumDescriptions:
              - Default value. This value is unused.
              - The score is an all-time score.
              - The score is a weekly score.
              - The score is a daily score.
            enum:
              - SCORE_TIME_SPAN_UNSPECIFIED
              - ALL_TIME
              - WEEKLY
              - DAILY
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreResponse`.
        unbeatenScores:
          type: array
          items:
            $ref: '#/components/schemas/PlayerScore'
          description: The scores in time spans that have not been beaten. As an example, the submitted score may be better than the player's `DAILY` score, but not better than the player's scores for the `WEEKLY` or `ALL_TIME` time spans.
        leaderboardId:
          type: string
          description: The leaderboard ID that this score was submitted to.
        formattedScore:
          type: string
          description: The formatted value of the submitted score.
        scoreTag:
          description: Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
          type: string
      description: A list of leaderboard entry resources.
      id: PlayerScoreResponse
      type: object
    EventPeriodRange:
      id: EventPeriodRange
      description: An event period time range.
      properties:
        periodEndMillis:
          format: int64
          description: The time when this update period ends, in millis, since 1970 UTC (Unix Epoch).
          type: string
        periodStartMillis:
          description: The time when this update period begins, in millis, since 1970 UTC (Unix Epoch).
          format: int64
          type: string
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#eventPeriodRange`.
      type: object
    ProfileSettings:
      properties:
        profileVisible:
          description: Whether the player's profile is visible to the currently signed in player.
          type: boolean
        friendsListVisibility:
          type: string
          enum:
            - FRIENDS_LIST_VISIBILITY_UNSPECIFIED
            - VISIBLE
            - REQUEST_REQUIRED
            - UNAVAILABLE
          enumDescriptions:
            - Unused.
            - The friends list is currently visible to the game.
            - The developer does not have access to the friends list, but can call the Android API to show a consent dialog.
            - The friends list is currently unavailable for this user, and it is not possible to request access at this time, either because the user has permanently declined or the friends feature is not available to them. In this state, any attempts to request access to the friends list will be unsuccessful.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#profileSettings`.
          type: string
      id: ProfileSettings
      type: object
      description: Profile settings
    InstanceIosDetails:
      description: The iOS details resource.
      id: InstanceIosDetails
      properties:
        bundleIdentifier:
          description: Bundle identifier.
          type: string
        supportIphone:
          type: boolean
          description: Flag to indicate if this instance supports iPhone.
        itunesAppId:
          type: string
          description: iTunes App ID.
        preferredForIpad:
          type: boolean
          description: Indicates that this instance is the default for new installations on iPad devices.
        supportIpad:
          description: Flag to indicate if this instance supports iPad.
          type: boolean
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceIosDetails`.
        preferredForIphone:
          type: boolean
          description: Indicates that this instance is the default for new installations on iPhone devices.
      type: object
    PlayerAchievement:
      id: PlayerAchievement
      description: An achievement object.
      type: object
      properties:
        currentSteps:
          format: int32
          type: integer
          description: The current steps for an incremental achievement.
        id:
          type: string
          description: The ID of the achievement.
        experiencePoints:
          format: int64
          type: string
          description: Experience points earned for the achievement. This field is absent for achievements that have not yet been unlocked and 0 for achievements that have been unlocked by testers but that are unpublished.
        achievementState:
          enum:
            - STATE_UNSPECIFIED
            - HIDDEN
            - REVEALED
            - UNLOCKED
          description: The state of the achievement.
          enumDescriptions:
            - Default value. This value is unused.
            - Achievement is hidden.
            - Achievement is revealed.
            - Achievement is unlocked.
          type: string
        lastUpdatedTimestamp:
          type: string
          description: The timestamp of the last modification to this achievement's state.
          format: int64
        formattedCurrentStepsString:
          type: string
          description: The current steps for an incremental achievement as a string.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievement`.
          type: string
    EventBatchRecordFailure:
      properties:
        range:
          $ref: '#/components/schemas/EventPeriodRange'
          description: The time range which was rejected; empty for a request-wide failure.
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#eventBatchRecordFailure`.
        failureCause:
          description: The cause for the update failure.
          enum:
            - EVENT_FAILURE_CAUSE_UNSPECIFIED
            - TOO_LARGE
            - TIME_PERIOD_EXPIRED
            - TIME_PERIOD_SHORT
            - TIME_PERIOD_LONG
            - ALREADY_UPDATED
            - RECORD_RATE_HIGH
          type: string
          enumDescriptions:
            - Default value. Should not be used.
            - A batch request was issued with more events than are allowed in a single batch.
            - A batch was sent with data too far in the past to record.
            - A batch was sent with a time range that was too short.
            - A batch was sent with a time range that was too long.
            - An attempt was made to record a batch of data which was already seen.
            - An attempt was made to record data faster than the server will apply updates.
      description: A batch update failure resource.
      type: object
      id: EventBatchRecordFailure
    AchievementIncrementResponse:
      id: AchievementIncrementResponse
      properties:
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementIncrementResponse`.
          type: string
        currentSteps:
          format: int32
          type: integer
          description: The current steps recorded for this incremental achievement.
        newlyUnlocked:
          type: boolean
          description: Whether the current steps for the achievement has reached the number of steps required to unlock.
      description: An achievement increment response
      type: object
    AchievementUpdateRequest:
      description: A request to update an achievement.
      id: AchievementUpdateRequest
      properties:
        achievementId:
          type: string
          description: The achievement this update is being applied to.
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateRequest`.
        incrementPayload:
          $ref: '#/components/schemas/GamesAchievementIncrement'
          description: The payload if an update of type `INCREMENT` was requested for the achievement.
        setStepsAtLeastPayload:
          description: The payload if an update of type `SET_STEPS_AT_LEAST` was requested for the achievement.
          $ref: '#/components/schemas/GamesAchievementSetStepsAtLeast'
        updateType:
          type: string
          enum:
            - ACHIEVEMENT_UPDATE_TYPE_UNSPECIFIED
            - REVEAL
            - UNLOCK
            - INCREMENT
            - SET_STEPS_AT_LEAST
          enumDescriptions:
            - Safe default, don't use.
            - Achievement is revealed.
            - Achievement is unlocked.
            - Achievement is incremented.
            - Achievement progress is set to at least the passed value.
          description: The type of update being applied.
      type: object
    PlayerScore:
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScore`.
        timeSpan:
          type: string
          enum:
            - SCORE_TIME_SPAN_UNSPECIFIED
            - ALL_TIME
            - WEEKLY
            - DAILY
          enumDescriptions:
            - Default value. This value is unused.
            - The score is an all-time score.
            - The score is a weekly score.
            - The score is a daily score.
          description: The time span for this player score.
        formattedScore:
          type: string
          description: The formatted score for this player score.
        score:
          type: string
          format: int64
          description: The numerical value for this player score.
        scoreTag:
          type: string
          description: Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
      description: A player score.
      id: PlayerScore
      type: object
    LeaderboardScores:
      description: A ListScores response.
      type: object
      properties:
        numScores:
          type: string
          description: The total number of scores in the leaderboard.
          format: int64
        prevPageToken:
          type: string
          description: The pagination token for the previous page of results.
        playerScore:
          description: The score of the requesting player on the leaderboard. The player's score may appear both here and in the list of scores above. If you are viewing a public leaderboard and the player is not sharing their gameplay information publicly, the `scoreRank`and `formattedScoreRank` values will not be present.
          $ref: '#/components/schemas/LeaderboardEntry'
        items:
          items:
            $ref: '#/components/schemas/LeaderboardEntry'
          type: array
          description: The scores in the leaderboard.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardScores`.
          type: string
        nextPageToken:
          type: string
          description: The pagination token for the next page of results.
      id: LeaderboardScores
    EventRecordFailure:
      type: object
      id: EventRecordFailure
      description: An event update failure resource.
      properties:
        failureCause:
          description: The cause for the update failure.
          enum:
            - EVENT_UPDATE_FAILURE_CAUSE_UNSPECIFIED
            - NOT_FOUND
            - INVALID_UPDATE_VALUE
          enumDescriptions:
            - Default value. Should not use.
            - An attempt was made to set an event that was not defined.
            - An attempt was made to increment an event by a non-positive value.
          type: string
        eventId:
          type: string
          description: The ID of the event that was not updated.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordFailure`.
          type: string
    PlayerListResponse:
      type: object
      id: PlayerListResponse
      properties:
        nextPageToken:
          description: Token corresponding to the next page of results.
          type: string
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerListResponse`.
          type: string
        items:
          description: The players.
          items:
            $ref: '#/components/schemas/Player'
          type: array
      description: A third party player list response.
    StatsResponse:
      type: object
      properties:
        days_since_last_played:
          type: integer
          format: int32
          description: Number of days since the player last played this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.
        spend_probability:
          type: number
          format: float
          description: The probability of the player going to spend the game in the next seven days. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.
        avg_session_length_minutes:
          format: float
          description: Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not populated if there is not enough information.
          type: number
        churn_probability:
          type: number
          description: The probability of the player not returning to play the game in the next day. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough information.
          format: float
        num_purchases:
          format: int32
          type: integer
          description: Number of in-app purchases made by the player in this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#statsResponse`.
        high_spender_probability:
          format: float
          type: number
          description: The probability of the player going to spend beyond a threshold amount of money. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.
        num_sessions_percentile:
          description: The approximation of the sessions percentile of the player within the last 30 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.
          type: number
          format: float
        num_sessions:
          type: integer
          description: The approximate number of sessions of the player within the last 28 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.
          format: int32
        total_spend_next_28_days:
          description: The predicted amount of money that the player going to spend in the next 28 days. E.g., 1, 30, 60, ... . Not populated if there is not enough information.
          format: float
          type: number
        spend_percentile:
          type: number
          format: float
          description: The approximate spend percentile of the player in this game. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.
      id: StatsResponse
      description: A third party stats resource.
    AchievementUpdateResponse:
      description: An updated achievement.
      type: object
      properties:
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateResponse`.
          type: string
        newlyUnlocked:
          description: Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).
          type: boolean
        currentSteps:
          description: The current steps recorded for this achievement if it is incremental.
          type: integer
          format: int32
        currentState:
          description: The current state of the achievement.
          enumDescriptions:
            - Safe default, don't use.
            - Achievement is hidden.
            - Achievement is revealed.
            - Achievement is unlocked.
          enum:
            - UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED
            - HIDDEN
            - REVEALED
            - UNLOCKED
          type: string
        achievementId:
          description: The achievement this update is was applied to.
          type: string
        updateOccurred:
          description: Whether the requested updates actually affected the achievement.
          type: boolean
      id: AchievementUpdateResponse
    Snapshot:
      id: Snapshot
      description: An snapshot object.
      properties:
        coverImage:
          description: The cover image of this snapshot. May be absent if there is no image.
          $ref: '#/components/schemas/SnapshotImage'
        driveId:
          description: The ID of the file underlying this snapshot in the Drive API. Only present if the snapshot is a view on a Drive file and the file is owned by the caller.
          type: string
        title:
          description: The title of this snapshot.
          type: string
        progressValue:
          type: string
          description: The progress value (64-bit integer set by developer) associated with this snapshot.
          format: int64
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshot`.
        uniqueName:
          type: string
          description: The unique name provided when the snapshot was created.
        id:
          type: string
          description: The ID of the snapshot.
        description:
          type: string
          description: The description of this snapshot.
        type:
          enum:
            - SNAPSHOT_TYPE_UNSPECIFIED
            - SAVE_GAME
          enumDescriptions:
            - Default value. This value is unused.
            - A snapshot representing a save game.
          description: The type of this snapshot.
          type: string
        lastModifiedMillis:
          type: string
          format: int64
          description: The timestamp (in millis since Unix epoch) of the last modification to this snapshot.
        durationMillis:
          description: The duration associated with this snapshot, in millis.
          format: int64
          type: string
      type: object
    PlayerScoreSubmissionList:
      properties:
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreSubmissionList`.
        scores:
          description: The score submissions.
          items:
            $ref: '#/components/schemas/ScoreSubmission'
          type: array
      type: object
      description: A list of score submission requests.
      id: PlayerScoreSubmissionList
    ImageAsset:
      properties:
        url:
          description: The URL of the asset.
          type: string
        width:
          description: The width of the asset.
          type: integer
          format: int32
        height:
          type: integer
          description: The height of the asset.
          format: int32
        name:
          type: string
          description: The name of the asset.
        kind:
          type: string
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#imageAsset`.
      description: An image asset object.
      type: object
      id: ImageAsset
    ApplicationVerifyResponse:
      description: A third party application verification response resource.
      id: ApplicationVerifyResponse
      type: object
      properties:
        alternate_player_id:
          type: string
          description: An alternate ID that was once used for the player that was issued the auth token used in this request. (This field is not normally populated.)
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#applicationVerifyResponse`.
          type: string
        player_id:
          type: string
          description: The ID of the player that was issued the auth token used in this request.
    EventRecordRequest:
      description: An event period update resource.
      type: object
      id: EventRecordRequest
      properties:
        timePeriods:
          items:
            $ref: '#/components/schemas/EventPeriodUpdate'
          type: array
          description: A list of the time period updates being made in this request.
        kind:
          description: Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordRequest`.
          type: string
        requestId:
          type: string
          format: int64
          description: The request ID used to identify this attempt to record events.
        currentTimeMillis:
          format: int64
          type: string
          description: The current time when this update was sent, in milliseconds, since 1970 UTC (Unix Epoch).
  parameters:
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/games: Create, edit, and delete your Google Play Games activity
            https://www.googleapis.com/auth/drive.appdata: See, create, and delete its own configuration data in your Google Drive
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    leaderboards:
      id: googledevelopers.games.leaderboards
      name: leaderboards
      title: Leaderboards
      methods:
        list:
          operation:
            $ref: '#/paths/~1games~1v1~1leaderboards/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1games~1v1~1leaderboards~1{leaderboardId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/leaderboards/methods/get'
          - $ref: '#/components/x-stackQL-resources/leaderboards/methods/list'
        insert: []
        update: []
        delete: []
    scores:
      id: googledevelopers.games.scores
      name: scores
      title: Scores
      methods:
        submitMultiple:
          operation:
            $ref: '#/paths/~1games~1v1~1leaderboards~1scores/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1games~1v1~1leaderboards~1{leaderboardId}~1scores~1{collection}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1games~1v1~1players~1{playerId}~1leaderboards~1{leaderboardId}~1scores~1{timeSpan}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        submit:
          operation:
            $ref: '#/paths/~1games~1v1~1leaderboards~1{leaderboardId}~1scores/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/scores/methods/get'
          - $ref: '#/components/x-stackQL-resources/scores/methods/list'
        insert: []
        update: []
        delete: []
    scores__window:
      id: googledevelopers.games.scores__window
      name: scores__window
      title: Scores__window
      methods:
        scores_listWindow:
          operation:
            $ref: '#/paths/~1games~1v1~1leaderboards~1{leaderboardId}~1window~1{collection}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    achievements:
      id: googledevelopers.games.achievements
      name: achievements
      title: Achievements
      methods:
        unlock:
          operation:
            $ref: '#/paths/~1games~1v1~1achievements~1{achievementId}~1unlock/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        setStepsAtLeast:
          operation:
            $ref: '#/paths/~1games~1v1~1achievements~1{achievementId}~1setStepsAtLeast/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        increment:
          operation:
            $ref: '#/paths/~1games~1v1~1achievements~1{achievementId}~1increment/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateMultiple:
          operation:
            $ref: '#/paths/~1games~1v1~1achievements~1updateMultiple/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1games~1v1~1players~1{playerId}~1achievements/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        reveal:
          operation:
            $ref: '#/paths/~1games~1v1~1achievements~1{achievementId}~1reveal/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/achievements/methods/list'
        insert: []
        update: []
        delete: []
    players:
      id: googledevelopers.games.players
      name: players
      title: Players
      methods:
        get:
          operation:
            $ref: '#/paths/~1games~1v1~1players~1{playerId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1games~1v1~1players~1me~1players~1{collection}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/players/methods/get'
          - $ref: '#/components/x-stackQL-resources/players/methods/list'
        insert: []
        update: []
        delete: []
    players__scoped_player_ids:
      id: googledevelopers.games.players__scoped_player_ids
      name: players__scoped_player_ids
      title: Players__scoped_player_ids
      methods:
        players_getScopedPlayerIds:
          operation:
            $ref: '#/paths/~1games~1v1~1players~1me~1scopedIds/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/players__scoped_player_ids/methods/players_getScopedPlayerIds'
        insert: []
        update: []
        delete: []
    metagame__metagame_config:
      id: googledevelopers.games.metagame__metagame_config
      name: metagame__metagame_config
      title: Metagame__metagame_config
      methods:
        metagame_getMetagameConfig:
          operation:
            $ref: '#/paths/~1games~1v1~1metagameConfig/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/metagame__metagame_config/methods/metagame_getMetagameConfig'
        insert: []
        update: []
        delete: []
    metagame__categories_by_player:
      id: googledevelopers.games.metagame__categories_by_player
      name: metagame__categories_by_player
      title: Metagame__categories_by_player
      methods:
        metagame_listCategoriesByPlayer:
          operation:
            $ref: '#/paths/~1games~1v1~1players~1{playerId}~1categories~1{collection}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    snapshots:
      id: googledevelopers.games.snapshots
      name: snapshots
      title: Snapshots
      methods:
        get:
          operation:
            $ref: '#/paths/~1games~1v1~1snapshots~1{snapshotId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1games~1v1~1players~1{playerId}~1snapshots/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/snapshots/methods/get'
          - $ref: '#/components/x-stackQL-resources/snapshots/methods/list'
        insert: []
        update: []
        delete: []
    applications__end_point:
      id: googledevelopers.games.applications__end_point
      name: applications__end_point
      title: Applications__end_point
      methods:
        applications_getEndPoint:
          operation:
            $ref: '#/paths/~1games~1v1~1applications~1getEndPoint/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    applications:
      id: googledevelopers.games.applications
      name: applications
      title: Applications
      methods:
        get:
          operation:
            $ref: '#/paths/~1games~1v1~1applications~1{applicationId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        verify:
          operation:
            $ref: '#/paths/~1games~1v1~1applications~1{applicationId}~1verify/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        played:
          operation:
            $ref: '#/paths/~1games~1v1~1applications~1played/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/applications/methods/get'
        insert: []
        update: []
        delete: []
    revisions:
      id: googledevelopers.games.revisions
      name: revisions
      title: Revisions
      methods:
        check:
          operation:
            $ref: '#/paths/~1games~1v1~1revisions~1check/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    stats:
      id: googledevelopers.games.stats
      name: stats
      title: Stats
      methods:
        get:
          operation:
            $ref: '#/paths/~1games~1v1~1stats/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/stats/methods/get'
        insert: []
        update: []
        delete: []
    events:
      id: googledevelopers.games.events
      name: events
      title: Events
      methods:
        record:
          operation:
            $ref: '#/paths/~1games~1v1~1events/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    events__by_player:
      id: googledevelopers.games.events__by_player
      name: events__by_player
      title: Events__by_player
      methods:
        events_listByPlayer:
          operation:
            $ref: '#/paths/~1games~1v1~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    events__definitions:
      id: googledevelopers.games.events__definitions
      name: events__definitions
      title: Events__definitions
      methods:
        events_listDefinitions:
          operation:
            $ref: '#/paths/~1games~1v1~1eventDefinitions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    achievement_definitions:
      id: googledevelopers.games.achievement_definitions
      name: achievement_definitions
      title: Achievement_definitions
      methods:
        achievementDefinitions_list:
          operation:
            $ref: '#/paths/~1games~1v1~1achievements/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/achievement_definitions/methods/achievementDefinitions_list'
        insert: []
        update: []
        delete: []
paths:
  /games/v1/leaderboards:
    parameters: &ref_1
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/oauth_token'
    get:
      description: Lists all the leaderboard metadata for your application.
      operationId: games.leaderboards.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardListResponse'
      parameters:
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: leaderboards
      x-stackQL-verb: select
  /games/v1/leaderboards/{leaderboardId}:
    parameters: *ref_1
    get:
      description: Retrieves the metadata of the leaderboard with the given ID.
      operationId: games.leaderboards.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leaderboard'
      parameters:
        - in: path
          name: leaderboardId
          required: true
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
      x-stackQL-resource: leaderboards
      x-stackQL-verb: select
  /games/v1/leaderboards/scores:
    parameters: *ref_1
    post:
      description: Submits multiple scores to leaderboards.
      operationId: games.scores.submitMultiple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerScoreSubmissionList'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerScoreListResponse'
      parameters:
        - in: query
          name: language
          schema:
            type: string
      x-stackQL-resource: scores
      x-stackQL-verb: exec
  /games/v1/leaderboards/{leaderboardId}/scores/{collection}:
    parameters: *ref_1
    get:
      description: Lists the scores in a leaderboard, starting from the top.
      operationId: games.scores.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardScores'
      parameters:
        - in: path
          name: leaderboardId
          required: true
          schema:
            type: string
        - in: path
          name: collection
          required: true
          schema:
            type: string
        - in: query
          name: timeSpan
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: scores
      x-stackQL-verb: select
  /games/v1/leaderboards/{leaderboardId}/window/{collection}:
    parameters: *ref_1
    get:
      description: Lists the scores in a leaderboard around (and including) a player's score.
      operationId: games.scores.listWindow
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardScores'
      parameters:
        - in: path
          name: leaderboardId
          required: true
          schema:
            type: string
        - in: path
          name: collection
          required: true
          schema:
            type: string
        - in: query
          name: timeSpan
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: returnTopIfAbsent
          schema:
            type: boolean
        - in: query
          name: resultsAbove
          schema:
            type: integer
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: scores__window
      x-stackQL-verb: select
  /games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}:
    parameters: *ref_1
    get:
      description: 'Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, `leaderboardId` can be set to `ALL` to retrieve data for all leaderboards in a given time span. `NOTE: You cannot ask for ''ALL'' leaderboards and ''ALL'' timeSpans in the same request; only one parameter may be set to ''ALL''.'
      operationId: games.scores.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerLeaderboardScoreListResponse'
      parameters:
        - in: path
          name: playerId
          required: true
          schema:
            type: string
        - in: path
          name: leaderboardId
          required: true
          schema:
            type: string
        - in: path
          name: timeSpan
          required: true
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: includeRankType
          schema:
            type: string
      x-stackQL-resource: scores
      x-stackQL-verb: select
  /games/v1/leaderboards/{leaderboardId}/scores:
    parameters: *ref_1
    post:
      description: Submits a score to the specified leaderboard.
      operationId: games.scores.submit
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerScoreResponse'
      parameters:
        - in: path
          name: leaderboardId
          required: true
          schema:
            type: string
        - in: query
          name: score
          required: true
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: scoreTag
          schema:
            type: string
      x-stackQL-resource: scores
      x-stackQL-verb: exec
  /games/v1/achievements/{achievementId}/unlock:
    parameters: *ref_1
    post:
      description: Unlocks this achievement for the currently authenticated player.
      operationId: games.achievements.unlock
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementUnlockResponse'
      parameters:
        - in: path
          name: achievementId
          required: true
          schema:
            type: string
      x-stackQL-resource: achievements
      x-stackQL-verb: exec
  /games/v1/achievements/{achievementId}/setStepsAtLeast:
    parameters: *ref_1
    post:
      description: Sets the steps for the currently authenticated player towards unlocking an achievement. If the steps parameter is less than the current number of steps that the player already gained for the achievement, the achievement is not modified.
      operationId: games.achievements.setStepsAtLeast
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementSetStepsAtLeastResponse'
      parameters:
        - in: path
          name: achievementId
          required: true
          schema:
            type: string
        - in: query
          name: steps
          required: true
          schema:
            type: integer
      x-stackQL-resource: achievements
      x-stackQL-verb: exec
  /games/v1/achievements/{achievementId}/increment:
    parameters: *ref_1
    post:
      description: Increments the steps of the achievement with the given ID for the currently authenticated player.
      operationId: games.achievements.increment
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementIncrementResponse'
      parameters:
        - in: path
          name: achievementId
          required: true
          schema:
            type: string
        - in: query
          name: stepsToIncrement
          required: true
          schema:
            type: integer
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: achievements
      x-stackQL-verb: exec
  /games/v1/achievements/updateMultiple:
    parameters: *ref_1
    post:
      description: Updates multiple achievements for the currently authenticated player.
      operationId: games.achievements.updateMultiple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AchievementUpdateMultipleRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementUpdateMultipleResponse'
      parameters: []
      x-stackQL-resource: achievements
      x-stackQL-verb: exec
  /games/v1/players/{playerId}/achievements:
    parameters: *ref_1
    get:
      description: Lists the progress for all your application's achievements for the currently authenticated player.
      operationId: games.achievements.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerAchievementListResponse'
      parameters:
        - in: path
          name: playerId
          required: true
          schema:
            type: string
        - in: query
          name: state
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: achievements
      x-stackQL-verb: select
  /games/v1/achievements/{achievementId}/reveal:
    parameters: *ref_1
    post:
      description: Sets the state of the achievement with the given ID to `REVEALED` for the currently authenticated player.
      operationId: games.achievements.reveal
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementRevealResponse'
      parameters:
        - in: path
          name: achievementId
          required: true
          schema:
            type: string
      x-stackQL-resource: achievements
      x-stackQL-verb: exec
  /games/v1/players/{playerId}:
    parameters: *ref_1
    get:
      description: Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set `playerId` to `me`.
      operationId: games.players.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
      parameters:
        - in: path
          name: playerId
          required: true
          schema:
            type: string
        - in: query
          name: playerIdConsistencyToken
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
      x-stackQL-resource: players
      x-stackQL-verb: select
  /games/v1/players/me/players/{collection}:
    parameters: *ref_1
    get:
      description: Get the collection of players for the currently authenticated user.
      operationId: games.players.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerListResponse'
      parameters:
        - in: path
          name: collection
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: language
          schema:
            type: string
      x-stackQL-resource: players
      x-stackQL-verb: select
  /games/v1/players/me/scopedIds:
    parameters: *ref_1
    get:
      description: Retrieves scoped player identifiers for currently authenticated user.
      operationId: games.players.getScopedPlayerIds
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopedPlayerIds'
      parameters: []
      x-stackQL-resource: players__scoped_player_ids
      x-stackQL-verb: select
  /games/v1/metagameConfig:
    parameters: *ref_1
    get:
      description: Return the metagame configuration data for the calling application.
      operationId: games.metagame.getMetagameConfig
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetagameConfig'
      parameters: []
      x-stackQL-resource: metagame__metagame_config
      x-stackQL-verb: select
  /games/v1/players/{playerId}/categories/{collection}:
    parameters: *ref_1
    get:
      description: List play data aggregated per category for the player corresponding to `playerId`.
      operationId: games.metagame.listCategoriesByPlayer
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListResponse'
      parameters:
        - in: path
          name: playerId
          required: true
          schema:
            type: string
        - in: path
          name: collection
          required: true
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: metagame__categories_by_player
      x-stackQL-verb: select
  /games/v1/snapshots/{snapshotId}:
    parameters: *ref_1
    get:
      description: Retrieves the metadata for a given snapshot ID.
      operationId: games.snapshots.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/drive.appdata
          Oauth2c:
            - https://www.googleapis.com/auth/drive.appdata
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
      parameters:
        - in: path
          name: snapshotId
          required: true
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
      x-stackQL-resource: snapshots
      x-stackQL-verb: select
  /games/v1/players/{playerId}/snapshots:
    parameters: *ref_1
    get:
      description: Retrieves a list of snapshots created by your application for the player corresponding to the player ID.
      operationId: games.snapshots.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/drive.appdata
          Oauth2c:
            - https://www.googleapis.com/auth/drive.appdata
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotListResponse'
      parameters:
        - in: path
          name: playerId
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: snapshots
      x-stackQL-verb: select
  /games/v1/applications/getEndPoint:
    parameters: *ref_1
    post:
      description: Returns a URL for the requested end point type.
      operationId: games.applications.getEndPoint
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPoint'
      parameters:
        - in: query
          name: endPointType
          schema:
            type: string
        - in: query
          name: applicationId
          schema:
            type: string
      x-stackQL-resource: applications__end_point
      x-stackQL-verb: select
  /games/v1/applications/{applicationId}:
    parameters: *ref_1
    get:
      description: Retrieves the metadata of the application with the given ID. If the requested application is not available for the specified `platformType`, the returned response will not include any instance data.
      operationId: games.applications.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
      parameters:
        - in: path
          name: applicationId
          required: true
          schema:
            type: string
        - in: query
          name: platformType
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
      x-stackQL-resource: applications
      x-stackQL-verb: select
  /games/v1/applications/{applicationId}/verify:
    parameters: *ref_1
    get:
      description: Verifies the auth token provided with this request is for the application with the specified ID, and returns the ID of the player it was granted for.
      operationId: games.applications.verify
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationVerifyResponse'
      parameters:
        - in: path
          name: applicationId
          required: true
          schema:
            type: string
      x-stackQL-resource: applications
      x-stackQL-verb: exec
  /games/v1/applications/played:
    parameters: *ref_1
    post:
      description: Indicate that the currently authenticated user is playing your application.
      operationId: games.applications.played
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      parameters: []
      x-stackQL-resource: applications
      x-stackQL-verb: exec
  /games/v1/revisions/check:
    parameters: *ref_1
    get:
      description: Checks whether the games client is out of date.
      operationId: games.revisions.check
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionCheckResponse'
      parameters:
        - in: query
          name: clientRevision
          required: true
          schema:
            type: string
      x-stackQL-resource: revisions
      x-stackQL-verb: exec
  /games/v1/stats:
    parameters: *ref_1
    get:
      description: Returns engagement and spend statistics in this application for the currently authenticated user.
      operationId: games.stats.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'
      parameters: []
      x-stackQL-resource: stats
      x-stackQL-verb: select
  /games/v1/events:
    parameters: *ref_1
    post:
      description: Records a batch of changes to the number of times events have occurred for the currently authenticated user of this application.
      operationId: games.events.record
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRecordRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUpdateResponse'
      parameters:
        - in: query
          name: language
          schema:
            type: string
      x-stackQL-resource: events
      x-stackQL-verb: exec
    get:
      description: Returns a list showing the current progress on events in this application for the currently authenticated user.
      operationId: games.events.listByPlayer
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerEventListResponse'
      parameters:
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: events__by_player
      x-stackQL-verb: select
  /games/v1/eventDefinitions:
    parameters: *ref_1
    get:
      description: Returns a list of the event definitions in this application.
      operationId: games.events.listDefinitions
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDefinitionListResponse'
      parameters:
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: language
          schema:
            type: string
      x-stackQL-resource: events__definitions
      x-stackQL-verb: select
  /games/v1/achievements:
    parameters: *ref_1
    get:
      description: Lists all the achievement definitions for your application.
      operationId: games.achievementDefinitions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/games
          Oauth2c:
            - https://www.googleapis.com/auth/games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementDefinitionsListResponse'
      parameters:
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: achievement_definitions
      x-stackQL-verb: select
