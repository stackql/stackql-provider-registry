openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Domains RDAP API
  description: Read-only public API that lets users search for information about domain names.
  version: v1
  x-discovery-doc-revision: '20230118'
  x-generated-date: '2023-01-19'
externalDocs:
  url: https://developers.google.com/domains/rdap/
servers:
  - url: https://domainsrdap.googleapis.com
components:
  schemas:
    Notice:
      id: Notice
      type: object
      properties:
        links:
          description: Link to a document containing more information.
          items:
            $ref: '#/components/schemas/Link'
          type: array
        description:
          type: array
          items:
            type: string
          description: Description of the notice.
        type:
          type: string
          description: 'Type values defined in [section 10.2.1 of RFC 7483](https://tools.ietf.org/html/rfc7483#section-10.2.1) specific to a whole response: "result set truncated due to authorization", "result set truncated due to excessive load", "result set truncated due to unexplainable reasons".'
        title:
          type: string
          description: 'Title of a notice. Example: "Terms of Service".'
      description: Notices object defined in [section 4.3 of RFC 7483](https://tools.ietf.org/html/rfc7483#section-4.3).
    Link:
      properties:
        href:
          type: string
          description: 'Target URL of a link. Example: "http://example.com/previous".'
        value:
          description: 'URL giving context for the link. Example: "http://example.com/current".'
          type: string
        media:
          description: 'Media type of the link destination. Example: "screen".'
          type: string
        title:
          type: string
          description: 'Title of this link. Example: "title".'
        rel:
          description: 'Relation type of a link. Example: "previous".'
          type: string
        hreflang:
          description: 'Language code of a link. Example: "en".'
          type: string
        type:
          type: string
          description: 'Content type of the link. Example: "application/json".'
      type: object
      id: Link
      description: Links object defined in [section 4.2 of RFC 7483](https://tools.ietf.org/html/rfc7483#section-4.2).
    RdapResponse:
      id: RdapResponse
      properties:
        title:
          type: string
          description: Error title.
        lang:
          description: Error language code. Error response info fields are defined in [section 6 of RFC 7483](https://tools.ietf.org/html/rfc7483#section-6).
          type: string
        description:
          items:
            type: string
          type: array
          description: Error description.
        errorCode:
          format: int32
          type: integer
          description: 'Error HTTP code. Example: "501".'
        notices:
          items:
            $ref: '#/components/schemas/Notice'
          type: array
          description: Notices applying to this response.
        rdapConformance:
          items:
            type: string
          type: array
          description: RDAP conformance level.
        jsonResponse:
          description: HTTP response with content type set to "application/json+rdap".
          $ref: '#/components/schemas/HttpBody'
      description: Response to a general RDAP query.
      type: object
    HttpBody:
      properties:
        contentType:
          description: The HTTP Content-Type header value specifying the content type of the body.
          type: string
        extensions:
          type: array
          description: Application specific response metadata. Must be set in the first response for streaming APIs.
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
        data:
          description: The HTTP request/response body as raw binary.
          format: byte
          type: string
      id: HttpBody
      description: 'Message that represents an arbitrary HTTP body. It should only be used for payload formats that can''t be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.'
      type: object
  parameters:
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    help:
      id: googledevelopers.domainsrdap.help
      name: help
      title: Help
      methods:
        getHelp:
          operation:
            $ref: '#/paths/~1v1~1help/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/help/methods/getHelp'
        insert: []
        update: []
        delete: []
    entities:
      id: googledevelopers.domainsrdap.entities
      name: entities
      title: Entities
      methods:
        getEntities:
          operation:
            $ref: '#/paths/~1v1~1entities/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/entities/methods/getEntities'
        insert: []
        update: []
        delete: []
    ip:
      id: googledevelopers.domainsrdap.ip
      name: ip
      title: Ip
      methods:
        getIp:
          operation:
            $ref: '#/paths/~1v1~1ip/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1ip~1{ipId}~1{ipId1}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ip/methods/get'
          - $ref: '#/components/x-stackQL-resources/ip/methods/getIp'
        insert: []
        update: []
        delete: []
    nameservers:
      id: googledevelopers.domainsrdap.nameservers
      name: nameservers
      title: Nameservers
      methods:
        getNameservers:
          operation:
            $ref: '#/paths/~1v1~1nameservers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/nameservers/methods/getNameservers'
        insert: []
        update: []
        delete: []
    domains:
      id: googledevelopers.domainsrdap.domains
      name: domains
      title: Domains
      methods:
        getDomains:
          operation:
            $ref: '#/paths/~1v1~1domains/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/domains/methods/getDomains'
        insert: []
        update: []
        delete: []
    nameserver:
      id: googledevelopers.domainsrdap.nameserver
      name: nameserver
      title: Nameserver
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1nameserver~1{nameserverId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/nameserver/methods/get'
        insert: []
        update: []
        delete: []
    autnum:
      id: googledevelopers.domainsrdap.autnum
      name: autnum
      title: Autnum
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1autnum~1{autnumId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/autnum/methods/get'
        insert: []
        update: []
        delete: []
    domain:
      id: googledevelopers.domainsrdap.domain
      name: domain
      title: Domain
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1domain~1{domainId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/domain/methods/get'
        insert: []
        update: []
        delete: []
    entity:
      id: googledevelopers.domainsrdap.entity
      name: entity
      title: Entity
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1entity~1{entityId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/entity/methods/get'
        insert: []
        update: []
        delete: []
paths:
  /v1/help:
    parameters: &ref_1
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/quotaUser'
    get:
      description: Get help information for the RDAP API, including links to documentation.
      operationId: domainsrdap.getHelp
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters: []
      x-stackQL-resource: help
      x-stackQL-verb: select
  /v1/entities:
    parameters: *ref_1
    get:
      description: The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.
      operationId: domainsrdap.getEntities
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RdapResponse'
      parameters: []
      x-stackQL-resource: entities
      x-stackQL-verb: select
  /v1/ip:
    parameters: *ref_1
    get:
      description: The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.
      operationId: domainsrdap.getIp
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters: []
      x-stackQL-resource: ip
      x-stackQL-verb: select
  /v1/nameservers:
    parameters: *ref_1
    get:
      description: The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.
      operationId: domainsrdap.getNameservers
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RdapResponse'
      parameters: []
      x-stackQL-resource: nameservers
      x-stackQL-verb: select
  /v1/domains:
    parameters: *ref_1
    get:
      description: The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.
      operationId: domainsrdap.getDomains
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RdapResponse'
      parameters: []
      x-stackQL-resource: domains
      x-stackQL-verb: select
  /v1/ip/{ipId}/{ipId1}:
    parameters: *ref_1
    get:
      description: The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.
      operationId: domainsrdap.ip.get
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RdapResponse'
      parameters:
        - in: path
          name: ipId
          required: true
          schema:
            type: string
        - in: path
          name: ipId1
          required: true
          schema:
            type: string
      x-stackQL-resource: ip
      x-stackQL-verb: select
  /v1/nameserver/{nameserverId}:
    parameters: *ref_1
    get:
      description: The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.
      operationId: domainsrdap.nameserver.get
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RdapResponse'
      parameters:
        - in: path
          name: nameserverId
          required: true
          schema:
            type: string
      x-stackQL-resource: nameserver
      x-stackQL-verb: select
  /v1/autnum/{autnumId}:
    parameters: *ref_1
    get:
      description: The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.
      operationId: domainsrdap.autnum.get
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RdapResponse'
      parameters:
        - in: path
          name: autnumId
          required: true
          schema:
            type: string
      x-stackQL-resource: autnum
      x-stackQL-verb: select
  /v1/domain/{domainId}:
    parameters: *ref_1
    get:
      description: Look up RDAP information for a domain by name.
      operationId: domainsrdap.domain.get
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: domainId
          required: true
          schema:
            type: string
      x-stackQL-resource: domain
      x-stackQL-verb: select
  /v1/entity/{entityId}:
    parameters: *ref_1
    get:
      description: The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.
      operationId: domainsrdap.entity.get
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RdapResponse'
      parameters:
        - in: path
          name: entityId
          required: true
          schema:
            type: string
      x-stackQL-resource: entity
      x-stackQL-verb: select
