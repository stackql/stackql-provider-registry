openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Authorized Buyers Marketplace API
  description: The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
  version: v1
  x-discovery-doc-revision: '20230105'
  x-generated-date: '2023-01-06'
externalDocs:
  url: https://developers.google.com/authorized-buyers/apis/marketplace/reference/rest/
servers:
  - url: https://authorizedbuyersmarketplace.googleapis.com
components:
  schemas:
    FinalizedDeal:
      id: FinalizedDeal
      description: A finalized deal is a snapshot of the deal when both buyer and seller accept the deal. The buyer or seller can update the deal after it's been finalized and renegotiate on the deal targeting, terms and other fields, while at the same time the finalized snapshot of the deal can still be retrieved using this API. The finalized deal contains a copy of the deal as it existed when most recently finalized, as well as fields related to deal serving such as pause/resume status, RTB metrics, and more.
      type: object
      properties:
        dealServingStatus:
          description: Serving status of the deal.
          enumDescriptions:
            - Unspecified.
            - The deal is actively serving or ready to serve when the start date is reached.
            - The deal serving has ended.
            - The deal serving is paused by buyer.
            - The deal serving is paused by seller.
          type: string
          enum:
            - DEAL_SERVING_STATUS_UNSPECIFIED
            - ACTIVE
            - ENDED
            - PAUSED_BY_BUYER
            - PAUSED_BY_SELLER
        dealPausingInfo:
          $ref: '#/components/schemas/DealPausingInfo'
          description: Information related to deal pausing for the deal.
        name:
          description: 'The resource name of the finalized deal. Format: `buyers/{accountId}/finalizeddeals/{finalizedDealId}`'
          type: string
        deal:
          $ref: '#/components/schemas/Deal'
          description: A copy of the Deal made upon finalization. During renegotiation, this will reflect the last finalized deal before renegotiation was initiated.
        rtbMetrics:
          $ref: '#/components/schemas/RtbMetrics'
          description: Real-time bidding metrics for this deal.
        readyToServe:
          description: Whether the Programmatic Guaranteed deal is ready for serving.
          type: boolean
    ListClientUsersResponse:
      properties:
        nextPageToken:
          type: string
          description: A token to retrieve the next page of results. Pass this value in the ListClientUsersRequest.pageToken field in the subsequent call to the list method to retrieve the next page of results.
        clientUsers:
          description: The returned list of client users.
          items:
            $ref: '#/components/schemas/ClientUser'
          type: array
      description: Response message for the list method.
      id: ListClientUsersResponse
      type: object
    DeliveryControl:
      description: Message contains details about how the deal will be paced.
      properties:
        roadblockingType:
          type: string
          enum:
            - ROADBLOCKING_TYPE_UNSPECIFIED
            - ONLY_ONE
            - ONE_OR_MORE
            - AS_MANY_AS_POSSIBLE
            - ALL_ROADBLOCK
            - CREATIVE_SET
          readOnly: true
          description: Output only. Specifies the roadblocking type in display creatives.
          enumDescriptions:
            - A placeholder for an unspecified roadblocking type.
            - Only one creative from a deal can serve per ad request. https://support.google.com/admanager/answer/177277.
            - Any number of creatives from a deal can serve together per ad request.
            - As many creatives from a deal as can fit on a page will serve. This could mean anywhere from one to all of a deal's creatives given the size constraints of ad slots on a page.
            - All or none of the creatives from a deal will serve.
            - A main/companion creative set roadblocking type.
        deliveryRateType:
          type: string
          readOnly: true
          enumDescriptions:
            - A placeholder for an undefined delivery rate type.
            - Impressions are served uniformly over the life of the deal.
            - Impressions are served front-loaded.
            - Impressions are served as fast as possible.
          enum:
            - DELIVERY_RATE_TYPE_UNSPECIFIED
            - EVENLY
            - FRONT_LOADED
            - AS_FAST_AS_POSSIBLE
          description: Output only. Specifies how the impression delivery will be paced.
        creativeRotationType:
          description: Output only. Specifies strategy to use for selecting a creative when multiple creatives of the same size are available.
          enum:
            - CREATIVE_ROTATION_TYPE_UNSPECIFIED
            - ROTATION_EVEN
            - ROTATION_OPTIMIZED
            - ROTATION_MANUAL
            - ROTATION_SEQUENTIAL
          enumDescriptions:
            - Creatives are displayed roughly the same number of times over the duration of the deal.
            - Creatives are displayed roughly the same number of times over the duration of the deal.
            - Creatives are served roughly proportionally to their performance.
            - Creatives are served roughly proportionally to their weights.
            - Creatives are served exactly in sequential order, also known as Storyboarding.
          type: string
          readOnly: true
        companionDeliveryType:
          readOnly: true
          enum:
            - COMPANION_DELIVERY_TYPE_UNSPECIFIED
            - DELIVERY_OPTIONAL
            - DELIVERY_AT_LEAST_ONE
            - DELIVERY_ALL
          description: Output only. Specifies roadblocking in a main companion lineitem.
          enumDescriptions:
            - A placeholder for an unspecified companion delivery type.
            - Companions are not required to serve a creative set. The creative set can serve an inventory that has zero or more matching companions.
            - At least one companion must be served in order for the creative set to be used.
            - All companions in the set must be served in order for the creative set to be used. This can still serve to inventory that has more companions than can be filled.
          type: string
        frequencyCap:
          description: Output only. Specifies any frequency caps. Cannot be filtered within ListDealsRequest.
          type: array
          items:
            $ref: '#/components/schemas/FrequencyCap'
          readOnly: true
      type: object
      id: DeliveryControl
    VideoTargeting:
      description: Represents targeting information about video.
      id: VideoTargeting
      properties:
        targetedPositionTypes:
          items:
            enumDescriptions:
              - A placeholder for an undefined video position.
              - Ad is played before the video.
              - Ad is played during the video.
              - Ad is played after the video.
            type: string
            enum:
              - POSITION_TYPE_UNSPECIFIED
              - PREROLL
              - MIDROLL
              - POSTROLL
          type: array
          description: A list of video positions to be included. When this field is populated, the excluded_position_types field must be empty.
        excludedPositionTypes:
          items:
            enum:
              - POSITION_TYPE_UNSPECIFIED
              - PREROLL
              - MIDROLL
              - POSTROLL
            enumDescriptions:
              - A placeholder for an undefined video position.
              - Ad is played before the video.
              - Ad is played during the video.
              - Ad is played after the video.
            type: string
          description: A list of video positions to be excluded. When this field is populated, the targeted_position_types field must be empty.
          type: array
      type: object
    AdSize:
      description: Represents size of a single ad slot, or a creative.
      properties:
        height:
          description: The height of the ad slot in pixels. This field will be present only when size type is `PIXEL`.
          format: int64
          type: string
        type:
          type: string
          enumDescriptions:
            - A placeholder for an undefined size type.
            - Ad slot with size specified by height and width in pixels.
            - Special size to describe an interstitial ad slot.
            - Native (mobile) ads rendered by the publisher.
            - Fluid size (responsive size) can be resized automatically with the change of outside environment.
          description: The type of the ad slot size.
          enum:
            - TYPE_UNSPECIFIED
            - PIXEL
            - INTERSTITIAL
            - NATIVE
            - FLUID
        width:
          format: int64
          type: string
          description: The width of the ad slot in pixels. This field will be present only when size type is `PIXEL`.
      type: object
      id: AdSize
    AcceptProposalRequest:
      type: object
      properties:
        proposalRevision:
          format: int64
          type: string
          description: The last known client revision number of the proposal.
      description: Request to accept a proposal. Accepting a proposal implies acceptance of the publisher terms_and_conditions, if any.
      id: AcceptProposalRequest
    FirstPartyMobileApplicationTargeting:
      description: Represents a list of targeted and excluded mobile application IDs that publishers own. Android App ID, for example, com.google.android.apps.maps, can be found in Google Play Store URL. iOS App ID (which is a number) can be found at the end of iTunes store URL. First party mobile applications is either included or excluded.
      type: object
      id: FirstPartyMobileApplicationTargeting
      properties:
        excludedAppIds:
          type: array
          description: A list of application IDs to be excluded.
          items:
            type: string
        targetedAppIds:
          type: array
          description: A list of application IDs to be included.
          items:
            type: string
    ListPublisherProfilesResponse:
      properties:
        publisherProfiles:
          description: The list of matching publisher profiles.
          type: array
          items:
            $ref: '#/components/schemas/PublisherProfile'
        nextPageToken:
          description: Token to fetch the next page of results.
          type: string
      description: Response message for profiles visible to the buyer.
      id: ListPublisherProfilesResponse
      type: object
    FrequencyCap:
      properties:
        timeUnitType:
          enumDescriptions:
            - A placeholder for an undefined time unit type. This just indicates the variable with this value hasn't been initialized.
            - Minute unit.
            - Hour unit.
            - Day unit.
            - Week unit.
            - Month unit.
            - Lifecycle/Lifetime unit.
            - Pod unit.
            - Stream unit.
          description: The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.
          enum:
            - TIME_UNIT_TYPE_UNSPECIFIED
            - MINUTE
            - HOUR
            - DAY
            - WEEK
            - MONTH
            - LIFETIME
            - POD
            - STREAM
          type: string
        maxImpressions:
          description: The maximum number of impressions that can be served to a user within the specified time period.
          format: int32
          type: integer
        timeUnitsCount:
          description: The amount of time, in the units specified by time_unit_type. Defines the amount of time over which impressions per user are counted and capped.
          type: integer
          format: int32
      type: object
      id: FrequencyCap
      description: Message contains details about publisher-set frequency caps of the delivery.
    ClientUser:
      properties:
        state:
          type: string
          readOnly: true
          enum:
            - STATE_UNSPECIFIED
            - INVITED
            - ACTIVE
            - INACTIVE
          enumDescriptions:
            - A placeholder for an undefined user state.
            - A user who was created but hasn't accepted the invitation yet, not allowed to access the Authorized Buyers UI.
            - A user that is currently active and allowed to access the Authorized Buyers UI.
            - A user that is currently inactive and not allowed to access the Authorized Buyers UI.
          description: Output only. The state of the client user.
        name:
          readOnly: true
          type: string
          description: 'Output only. The resource name of the client user. Format: `buyers/{accountId}/clients/{clientAccountId}/users/{userId}`'
        email:
          type: string
          description: Required. The client user's email address that has to be unique across all users for the same client.
      type: object
      id: ClientUser
      description: A user of a client who has restricted access to the Marketplace and certain other sections of the Authorized Buyers UI based on the role granted to the associated client.
    PublisherProfile:
      id: PublisherProfile
      properties:
        audienceDescription:
          type: string
          description: Description on the publisher's audience.
        isParent:
          type: boolean
          description: 'Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a portion of inventory. One seller has only one parent publisher profile, and can have multiple child profiles. See https://support.google.com/admanager/answer/6035806 for details. Can be used to filter the response of the publisherProfiles.list method by setting the filter to "is_parent: true".'
        topHeadlines:
          items:
            type: string
          description: Up to three key metrics and rankings. For example, "#1 Mobile News Site for 20 Straight Months".
          type: array
        domains:
          type: array
          items:
            type: string
          description: The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like "photos.google.co.uk/123", but will instead contain "google.co.uk". Can be used to filter the response of the publisherProfiles.list method.
        name:
          type: string
          description: 'Name of the publisher profile. Format: `buyers/{buyer}/publisherProfiles/{publisher_profile}`'
        samplePageUrl:
          description: URL to a sample content page.
          type: string
        overview:
          type: string
          description: Overview of the publisher.
        mediaKitUrl:
          type: string
          description: URL to additional marketing and sales materials.
        mobileApps:
          type: array
          description: The list of apps represented in this publisher profile. Empty if this is a parent profile.
          items:
            $ref: '#/components/schemas/PublisherProfileMobileApplication'
        publisherCode:
          description: A unique identifying code for the seller. This value is the same for all of the seller's parent and child publisher profiles. Can be used to filter the response of the publisherProfiles.list method.
          type: string
        logoUrl:
          type: string
          description: A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image.
        pitchStatement:
          type: string
          description: Statement explaining what's unique about publisher's business, and why buyers should partner with the publisher.
        directDealsContact:
          description: Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
          type: string
        displayName:
          type: string
          description: Display name of the publisher profile. Can be used to filter the response of the publisherProfiles.list method.
        programmaticDealsContact:
          description: Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
          type: string
      description: The values in the publisher profile are supplied by the publisher. All fields are not filterable unless stated otherwise.
      type: object
    PrivateData:
      description: Buyers are allowed to store certain types of private data in a proposal or deal.
      id: PrivateData
      type: object
      properties:
        referenceId:
          description: 'A buyer specified reference ID. This can be queried in the list operations (max-length: 1024 unicode code units).'
          type: string
    TimeZone:
      type: object
      properties:
        version:
          description: Optional. IANA Time Zone Database version number, e.g. "2019a".
          type: string
        id:
          description: IANA Time Zone Database time zone, e.g. "America/New_York".
          type: string
      id: TimeZone
      description: Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
    SendRfpRequest:
      type: object
      properties:
        geoTargeting:
          $ref: '#/components/schemas/CriteriaTargeting'
          description: Geo criteria IDs to be targeted. Refer to Geo tables.
        note:
          type: string
          description: A message that is sent to the publisher. Maximum length is 1024 characters.
        estimatedGrossSpend:
          $ref: '#/components/schemas/Money'
          description: Specified by buyers in request for proposal (RFP) to notify publisher the total estimated spend for the proposal. Publishers will receive this information and send back proposed deals accordingly.
        flightEndTime:
          description: Required. Proposed flight end time of the RFP. A timestamp in RFC3339 UTC "Zulu" format. Note that the specified value will be truncated to a granularity of one second.
          type: string
          format: google-datetime
        client:
          type: string
          description: 'If the current buyer is sending the RFP on behalf of its client, use this field to specify the name of the client in the format: `buyers/{accountId}/clients/{clientAccountid}`.'
        buyerContacts:
          items:
            $ref: '#/components/schemas/Contact'
          type: array
          description: Contact information for the buyer.
        programmaticGuaranteedTerms:
          description: The terms for programmatic guaranteed deals.
          $ref: '#/components/schemas/ProgrammaticGuaranteedTerms'
        inventorySizeTargeting:
          description: Inventory sizes to be targeted.
          $ref: '#/components/schemas/InventorySizeTargeting'
        preferredDealTerms:
          $ref: '#/components/schemas/PreferredDealTerms'
          description: The terms for preferred deals.
        flightStartTime:
          format: google-datetime
          type: string
          description: Required. Proposed flight start time of the RFP. A timestamp in RFC3339 UTC "Zulu" format. Note that the specified value will be truncated to a granularity of one second.
        displayName:
          type: string
          description: Required. The display name of the proposal being created by this RFP.
        publisherProfile:
          description: 'Required. The profile of the publisher who will receive this RFP in the format: `buyers/{accountId}/publisherProfiles/{publisherProfileId}`.'
          type: string
      id: SendRfpRequest
      description: Request to send an RFP. All fields in this request are proposed to publisher and subject to changes by publisher during later negotiation.
    BatchUpdateDealsRequest:
      type: object
      id: BatchUpdateDealsRequest
      description: Request message for batch updating deals.
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/UpdateDealRequest'
          description: Required. List of request messages to update deals.
    Price:
      type: object
      description: Represents a price and a pricing type for a deal.
      properties:
        type:
          description: The pricing type for the deal.
          type: string
          enum:
            - TYPE_UNSPECIFIED
            - CPM
            - CPD
          enumDescriptions:
            - A placeholder for an undefined pricing type. If the pricing type is unspecified, CPM will be used instead.
            - Cost per thousand impressions.
            - Cost per day.
        amount:
          $ref: '#/components/schemas/Money'
          description: The actual price with currency specified.
      id: Price
    ActivateClientUserRequest:
      type: object
      properties: {}
      description: Request message for activating a client user.
      id: ActivateClientUserRequest
    PreferredDealTerms:
      type: object
      id: PreferredDealTerms
      description: Pricing terms for Preferred Deals.
      properties:
        fixedPrice:
          $ref: '#/components/schemas/Price'
          description: Fixed price for the deal.
    PauseFinalizedDealRequest:
      id: PauseFinalizedDealRequest
      properties:
        reason:
          description: The reason to pause the finalized deal, will be displayed to the seller. Maximum length is 1000 characters.
          type: string
      type: object
      description: Request message for pausing a finalized deal.
    AddNoteRequest:
      description: Request to add a note.
      type: object
      properties:
        note:
          $ref: '#/components/schemas/Note'
          description: The note to add.
      id: AddNoteRequest
    UnsubscribeAuctionPackageRequest:
      description: Request message for UnsubscribeAuctionPackage.
      id: UnsubscribeAuctionPackageRequest
      properties: {}
      type: object
    CancelNegotiationRequest:
      type: object
      id: CancelNegotiationRequest
      description: Request to cancel an ongoing negotiation.
      properties: {}
    ListFinalizedDealsResponse:
      id: ListFinalizedDealsResponse
      description: Response message for listing finalized deals.
      properties:
        nextPageToken:
          description: Token to fetch the next page of results.
          type: string
        finalizedDeals:
          description: The list of finalized deals.
          type: array
          items:
            $ref: '#/components/schemas/FinalizedDeal'
      type: object
    ListAuctionPackagesResponse:
      type: object
      description: Response message for listing auction packages.
      id: ListAuctionPackagesResponse
      properties:
        auctionPackages:
          items:
            $ref: '#/components/schemas/AuctionPackage'
          type: array
          description: The list of auction packages.
        nextPageToken:
          type: string
          description: Continuation token for fetching the next page of results. Pass this value in the ListAuctionPackagesRequest.pageToken field in the subsequent call to the `ListAuctionPackages` method to retrieve the next page of results.
    InventorySizeTargeting:
      description: Represents the size of an ad unit that can be targeted on a bid request.
      type: object
      properties:
        excludedInventorySizes:
          description: A list of inventory sizes to be excluded.
          type: array
          items:
            $ref: '#/components/schemas/AdSize'
        targetedInventorySizes:
          type: array
          items:
            $ref: '#/components/schemas/AdSize'
          description: A list of inventory sizes to be included.
      id: InventorySizeTargeting
    DeactivateClientRequest:
      type: object
      description: Request message for disabling a client.
      properties: {}
      id: DeactivateClientRequest
    ListProposalsResponse:
      properties:
        proposals:
          description: The list of proposals.
          items:
            $ref: '#/components/schemas/Proposal'
          type: array
        nextPageToken:
          type: string
          description: Continuation token for fetching the next page of results.
      description: Response message for listing proposals.
      type: object
      id: ListProposalsResponse
    SubscribeClientsRequest:
      description: Request message for SubscribeAuctionPackageClients.
      properties:
        clients:
          type: array
          description: Optional. A list of client buyers to subscribe to the auction package, with client buyer in the format `buyers/{accountId}/clients/{clientAccountId}`. The current buyer will be subscribed to the auction package regardless of the list contents if not already.
          items:
            type: string
      type: object
      id: SubscribeClientsRequest
    ListClientsResponse:
      description: Response message for the list method.
      properties:
        clients:
          description: The returned list of clients.
          type: array
          items:
            $ref: '#/components/schemas/Client'
        nextPageToken:
          type: string
          description: A token to retrieve the next page of results. Pass this value in the ListClientsRequest.pageToken field in the subsequent call to the list method to retrieve the next page of results.
      type: object
      id: ListClientsResponse
    AuctionPackage:
      type: object
      id: AuctionPackage
      description: Defines a segment of inventory that buyer wants to buy. It's created by buyer and could be shared with multiple buyers.
      properties:
        createTime:
          description: Output only. Time the auction package was created.
          readOnly: true
          type: string
          format: google-datetime
        name:
          type: string
          description: 'Immutable. The unique identifier for the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}` The auction_package_id part of name is sent in the BidRequest to all RTB bidders and is returned as deal_id by the bidder in the BidResponse.'
        subscribedClients:
          type: array
          description: 'Output only. The list of clients of the current buyer that are subscribed to the AuctionPackage. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}`'
          items:
            type: string
          readOnly: true
        creator:
          description: 'Output only. The buyer that created this auction package. Format: `buyers/{buyerAccountId}`'
          type: string
          readOnly: true
        description:
          description: Output only. A description of the auction package.
          readOnly: true
          type: string
        updateTime:
          type: string
          format: google-datetime
          readOnly: true
          description: Output only. Time the auction package was last updated. This value is only increased when this auction package is updated but never when a buyer subscribed.
        displayName:
          type: string
          description: The display_name assigned to the auction package.
    BatchUpdateDealsResponse:
      description: Response message for batch updating deals.
      id: BatchUpdateDealsResponse
      type: object
      properties:
        deals:
          type: array
          items:
            $ref: '#/components/schemas/Deal'
          description: Deals updated.
    RtbMetrics:
      id: RtbMetrics
      type: object
      description: Real-time bidding metrics. For what each metric means refer to [Report metrics](https://support.google.com/adxbuyer/answer/6115195#report-metrics)
      properties:
        bidRate7Days:
          type: number
          format: double
          description: Bid rate in last 7 days, calculated by (bids / bid requests).
        bidRequests7Days:
          type: string
          description: Bid requests in last 7 days.
          format: int64
        mustBidRateCurrentMonth:
          description: Must bid rate for current month.
          format: double
          type: number
        bids7Days:
          description: Bids in last 7 days.
          type: string
          format: int64
        filteredBidRate7Days:
          type: number
          format: double
          description: Filtered bid rate in last 7 days, calculated by (filtered bids / bids).
        adImpressions7Days:
          format: int64
          description: Ad impressions in last 7 days.
          type: string
    ProgrammaticGuaranteedTerms:
      properties:
        guaranteedLooks:
          description: Count of guaranteed looks.
          format: int64
          type: string
        impressionCap:
          format: int64
          description: The lifetime impression cap for CPM Sponsorship deals. Deal will stop serving when cap is reached.
          type: string
        fixedPrice:
          $ref: '#/components/schemas/Price'
          description: Fixed price for the deal.
        minimumDailyLooks:
          format: int64
          description: Daily minimum looks for CPD deal types.
          type: string
        percentShareOfVoice:
          type: string
          format: int64
          description: For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached. Valid value is within range 0~100.
        reservationType:
          enum:
            - RESERVATION_TYPE_UNSPECIFIED
            - STANDARD
            - SPONSORSHIP
          description: The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD.
          enumDescriptions:
            - An unspecified reservation type.
            - Non-sponsorship deal.
            - Sponsorship deals don't have impression goal (guaranteed_looks) and they are served based on the flight dates. For CPM Sponsorship deals, impression_cap is the lifetime impression limit.
          type: string
      id: ProgrammaticGuaranteedTerms
      type: object
      description: Pricing terms for Programmatic Guaranteed Deals.
    PublisherProfileMobileApplication:
      id: PublisherProfileMobileApplication
      type: object
      description: A mobile application that contains a external app ID, name, and app store.
      properties:
        externalAppId:
          type: string
          description: The external ID for the app from its app store. Can be used to filter the response of the publisherProfiles.list method.
        name:
          type: string
          description: The name of the app.
        appStore:
          description: The app store the app belongs to. Can be used to filter the response of the publisherProfiles.list method.
          enumDescriptions:
            - A placeholder for an unknown app store.
            - Apple iTunes
            - Google Play
            - Roku
            - Amazon Fire TV
            - PlayStation
            - Xbox
            - Samsung TV
            - Amazon Appstore
            - OPPO App Market
            - Samsung Galaxy Store
            - VIVO App Store
            - Xiaomi GetApps
          enum:
            - APP_STORE_TYPE_UNSPECIFIED
            - APPLE_ITUNES
            - GOOGLE_PLAY
            - ROKU
            - AMAZON_FIRE_TV
            - PLAYSTATION
            - XBOX
            - SAMSUNG_TV
            - AMAZON
            - OPPO
            - SAMSUNG
            - VIVO
            - XIAOMI
          type: string
    Deal:
      properties:
        name:
          type: string
          description: 'Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}'
        updateTime:
          type: string
          readOnly: true
          description: Output only. The time when the deal was last updated.
          format: google-datetime
        buyer:
          readOnly: true
          description: 'Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`'
          type: string
        programmaticGuaranteedTerms:
          description: The terms for programmatic guaranteed deals.
          $ref: '#/components/schemas/ProgrammaticGuaranteedTerms'
        sellerTimeZone:
          $ref: '#/components/schemas/TimeZone'
          description: Output only. Time zone of the seller used to mark the boundaries of a day for daypart targeting and CPD billing.
          readOnly: true
        description:
          type: string
          description: Output only. Free text description for the deal terms.
          readOnly: true
        client:
          type: string
          readOnly: true
          description: 'Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`'
        displayName:
          readOnly: true
          type: string
          description: 'Output only. The name of the deal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the deal.'
        dealType:
          type: string
          description: Output only. Type of deal.
          readOnly: true
          enum:
            - DEAL_TYPE_UNSPECIFIED
            - PREFERRED_DEAL
            - PRIVATE_AUCTION
            - PROGRAMMATIC_GUARANTEED
          enumDescriptions:
            - Default, unspecified deal type.
            - Preferred deals.
            - Private auction deals.
            - Programmatic guaranteed deals.
        proposalRevision:
          type: string
          readOnly: true
          format: int64
          description: Output only. The revision number for the proposal and is the same value as proposal.proposal_revision. Each update to deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
        flightEndTime:
          description: Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals.
          type: string
          format: google-datetime
        deliveryControl:
          $ref: '#/components/schemas/DeliveryControl'
          readOnly: true
          description: Output only. Specifies the pacing set by the publisher.
        privateAuctionTerms:
          description: The terms for private auction deals.
          $ref: '#/components/schemas/PrivateAuctionTerms'
        targeting:
          description: Specifies the subset of inventory targeted by the deal. Can be updated by the buyer before the deal is finalized.
          $ref: '#/components/schemas/MarketplaceTargeting'
        publisherProfile:
          type: string
          description: 'Immutable. Reference to the seller on the deal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}`'
        estimatedGrossSpend:
          $ref: '#/components/schemas/Money'
          description: Specified by buyers in request for proposal (RFP) to notify publisher the total estimated spend for the proposal. Publishers will receive this information and send back proposed deals accordingly.
        flightStartTime:
          type: string
          format: google-datetime
          description: Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.
        creativeRequirements:
          readOnly: true
          $ref: '#/components/schemas/CreativeRequirements'
          description: Output only. Metadata about the creatives of this deal.
        billedBuyer:
          description: 'Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`'
          type: string
          readOnly: true
        createTime:
          description: Output only. The time of the deal creation.
          format: google-datetime
          readOnly: true
          type: string
        preferredDealTerms:
          description: The terms for preferred deals.
          $ref: '#/components/schemas/PreferredDealTerms'
      type: object
      description: 'A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals.'
      id: Deal
    AddCreativeRequest:
      id: AddCreativeRequest
      type: object
      description: Request message for adding creative to be used in the bidding process for the finalized deal.
      properties:
        creative:
          description: Name of the creative to add to the finalized deal, in the format `buyers/{buyerAccountId}/creatives/{creativeId}`. See creative.name.
          type: string
    Empty:
      id: Empty
      type: object
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
    MobileApplicationTargeting:
      properties:
        firstPartyTargeting:
          description: Publisher owned apps to be targeted or excluded by the publisher to display the ads in.
          $ref: '#/components/schemas/FirstPartyMobileApplicationTargeting'
      description: Mobile application targeting settings.
      type: object
      id: MobileApplicationTargeting
    DeactivateClientUserRequest:
      type: object
      description: Request message for deactivating a client user.
      id: DeactivateClientUserRequest
      properties: {}
    DayPartTargeting:
      type: object
      properties:
        timeZoneType:
          type: string
          description: The time zone type of the day parts
          enumDescriptions:
            - Default value. This field is unused.
            - The publisher's time zone
            - The user's time zone
          enum:
            - TIME_ZONE_TYPE_UNSPECIFIED
            - SELLER
            - USER
        dayParts:
          description: The targeted weekdays and times
          items:
            $ref: '#/components/schemas/DayPart'
          type: array
      description: Represents Daypart targeting.
      id: DayPartTargeting
    OperatingSystemTargeting:
      properties:
        operatingSystemVersionCriteria:
          description: IDs of operating system versions to be included/excluded.
          $ref: '#/components/schemas/CriteriaTargeting'
        operatingSystemCriteria:
          $ref: '#/components/schemas/CriteriaTargeting'
          description: IDs of operating systems to be included/excluded.
      type: object
      description: Represents targeting information for operating systems.
      id: OperatingSystemTargeting
    SubscribeAuctionPackageRequest:
      id: SubscribeAuctionPackageRequest
      description: Request message for SubscribeAuctionPackage.
      type: object
      properties: {}
    UpdateDealRequest:
      id: UpdateDealRequest
      properties:
        updateMask:
          description: List of fields to be updated. If empty or unspecified, the service will update all fields populated in the update request excluding the output only fields and primitive fields with default value. Note that explicit field mask is required in order to reset a primitive field back to its default value, for example, false for boolean fields, 0 for integer fields. A special field mask consisting of a single path "*" can be used to indicate full replacement(the equivalent of PUT method), updatable fields unset or unspecified in the input will be cleared or set to default value. Output only fields will be ignored regardless of the value of updateMask.
          type: string
          format: google-fieldmask
        deal:
          description: 'Required. The deal to update. The deal''s `name` field is used to identify the deal to be updated. Note: proposal_revision will have to be provided within the resource or else an error will be thrown. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}'
          $ref: '#/components/schemas/Deal'
      description: Request message for updating the deal at the given revision number.
      type: object
    TechnologyTargeting:
      type: object
      description: Represents targeting about various types of technology.
      id: TechnologyTargeting
      properties:
        deviceCategoryTargeting:
          $ref: '#/components/schemas/CriteriaTargeting'
          description: IDs of device categories to be included/excluded.
        deviceCapabilityTargeting:
          $ref: '#/components/schemas/CriteriaTargeting'
          description: IDs of device capabilities to be included/excluded.
        operatingSystemTargeting:
          $ref: '#/components/schemas/OperatingSystemTargeting'
          description: Operating system related targeting information.
    PlacementTargeting:
      properties:
        mobileApplicationTargeting:
          description: Mobile application targeting information in a deal. This doesn't apply to Auction Packages.
          $ref: '#/components/schemas/MobileApplicationTargeting'
        uriTargeting:
          description: URLs to be included/excluded.
          $ref: '#/components/schemas/UriTargeting'
      description: Represents targeting about where the ads can appear, for example, certain sites or mobile applications. Different placement targeting types will be logically OR'ed.
      id: PlacementTargeting
      type: object
    ListDealsResponse:
      properties:
        deals:
          type: array
          items:
            $ref: '#/components/schemas/Deal'
          description: The list of deals.
        nextPageToken:
          type: string
          description: Token to fetch the next page of results.
      description: Response message for listing deals in a proposal.
      id: ListDealsResponse
      type: object
    Money:
      id: Money
      properties:
        currencyCode:
          description: The three-letter currency code defined in ISO 4217.
          type: string
        units:
          format: int64
          description: The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
          type: string
        nanos:
          format: int32
          description: Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
          type: integer
      description: Represents an amount of money with its currency type.
      type: object
    Client:
      properties:
        name:
          type: string
          description: 'Output only. The resource name of the client. Format: `buyers/{accountId}/clients/{clientAccountId}`'
          readOnly: true
        state:
          readOnly: true
          type: string
          enumDescriptions:
            - A placeholder for an undefined client state. Should not be used.
            - A client that is currently active and allowed to access the Authorized Buyers UI.
            - A client that is currently inactive and not allowed to access the Authorized Buyers UI.
          description: Output only. The state of the client.
          enum:
            - STATE_UNSPECIFIED
            - ACTIVE
            - INACTIVE
        displayName:
          type: string
          description: Required. Display name shown to publishers. Must be unique for clients without partnerClientId specified. Maximum length of 255 characters is allowed.
        role:
          type: string
          enumDescriptions:
            - A placeholder for an undefined client role. This value should never be specified in user input for create or update method, otherwise an error will be returned.
            - Users associated with this client role can only view proposals and deals in the Marketplace UI. They cannot negotiate or approve proposals and deals sent from publishers or send RFP to publishers.
            - Users associated with this client role can view and negotiate on the proposals and deals in the Marketplace UI sent from publishers and send RFP to publishers, but cannot approve the proposals and deals by themselves. The buyer can approve the proposals and deals on behalf of the client.
            - Users associated with this client role can view, negotiate and approve proposals and deals in the Marketplace UI and send RFP to publishers.
          description: Required. The role assigned to the client. Each role implies a set of permissions granted to the client.
          enum:
            - CLIENT_ROLE_UNSPECIFIED
            - CLIENT_DEAL_VIEWER
            - CLIENT_DEAL_NEGOTIATOR
            - CLIENT_DEAL_APPROVER
        partnerClientId:
          description: Arbitrary unique identifier provided by the buyer. This field can be used to associate a client with an identifier in the namespace of the buyer, lookup clients by that identifier and verify whether an Authorized Buyers account of the client already exists. If present, must be unique across all the clients.
          type: string
        sellerVisible:
          type: boolean
          description: Whether the client will be visible to sellers.
      id: Client
      description: A client represents an agency, a brand, or an advertiser customer of the buyer. Based on the client's role, its client users will have varying levels of restricted access to the Marketplace and certain other sections of the Authorized Buyers UI.
      type: object
    DayPart:
      description: Defines targeting for a period of time on a specific week day.
      type: object
      properties:
        endTime:
          $ref: '#/components/schemas/TimeOfDay'
          description: 'Hours in 24 hour time between 0 and 24, inclusive. Note: 24 is logically equivalent to 0, but is supported since in some cases there may need to be differentiation made between midnight on one day and midnight on the next day. Accepted values for minutes are [0, 15, 30, 45]. 0 is the only acceptable minute value for hour 24. Seconds and nanos are ignored.'
        startTime:
          $ref: '#/components/schemas/TimeOfDay'
          description: 'Hours in 24 hour time between 0 and 24, inclusive. Note: 24 is logically equivalent to 0, but is supported since in some cases there may need to be differentiation made between midnight on one day and midnight on the next day. Accepted values for minutes are [0, 15, 30, 45]. 0 is the only acceptable minute value for hour 24. Seconds and nanos are ignored.'
        dayOfWeek:
          type: string
          enumDescriptions:
            - The day of the week is unspecified.
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
          enum:
            - DAY_OF_WEEK_UNSPECIFIED
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
            - SATURDAY
            - SUNDAY
          description: Day of week for the period.
      id: DayPart
    DealPausingInfo:
      properties:
        pausingConsented:
          type: boolean
          description: Whether pausing is consented between buyer and seller for the deal.
        pauseReason:
          description: The reason for the pausing of the deal; empty for active deals.
          type: string
        pauseRole:
          description: The party that first paused the deal; unspecified for active deals.
          type: string
          enumDescriptions:
            - A placeholder for an undefined buyer/seller role.
            - Specifies the role as buyer.
            - Specifies the role as seller.
          enum:
            - BUYER_SELLER_ROLE_UNSPECIFIED
            - BUYER
            - SELLER
      type: object
      id: DealPausingInfo
      description: Information related to deal pausing.
    CriteriaTargeting:
      type: object
      properties:
        excludedCriteriaIds:
          description: A list of numeric IDs to be excluded.
          type: array
          items:
            format: int64
            type: string
        targetedCriteriaIds:
          type: array
          description: A list of numeric IDs to be included.
          items:
            type: string
            format: int64
      id: CriteriaTargeting
      description: Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax.
    Note:
      description: A text note attached to the proposal to facilitate the communication between buyers and sellers.
      id: Note
      properties:
        note:
          type: string
          description: The text of the note. Maximum length is 1024 characters.
        createTime:
          readOnly: true
          description: Output only. When this note was created.
          type: string
          format: google-datetime
        creatorRole:
          type: string
          readOnly: true
          description: Output only. The role who created the note.
          enum:
            - BUYER_SELLER_ROLE_UNSPECIFIED
            - BUYER
            - SELLER
          enumDescriptions:
            - A placeholder for an undefined buyer/seller role.
            - Specifies the role as buyer.
            - Specifies the role as seller.
      type: object
    PrivateAuctionTerms:
      properties:
        openAuctionAllowed:
          description: Output only. True if open auction buyers are allowed to compete with invited buyers in this private auction.
          readOnly: true
          type: boolean
        floorPrice:
          description: The minimum price buyer has to bid to compete in the private auction.
          $ref: '#/components/schemas/Price'
      description: Pricing terms for Private Auctions.
      type: object
      id: PrivateAuctionTerms
    ActivateClientRequest:
      id: ActivateClientRequest
      description: Request message for activating a client.
      type: object
      properties: {}
    UriTargeting:
      id: UriTargeting
      properties:
        excludedUris:
          type: array
          description: A list of URLs to be excluded.
          items:
            type: string
        targetedUris:
          type: array
          description: A list of URLs to be included.
          items:
            type: string
      type: object
      description: Represents a list of targeted and excluded URLs (for example, google.com). For Private Auction Deals, URLs are either included or excluded. For Programmatic Guaranteed and Preferred Deals, this doesn't apply.
    CreativeRequirements:
      description: Message captures data about the creatives in the deal.
      properties:
        creativePreApprovalPolicy:
          enumDescriptions:
            - A placeholder for an undefined creative pre-approval policy.
            - The seller needs to approve each creative before it can serve.
            - The seller does not need to approve each creative before it can serve.
          type: string
          description: Output only. Specifies the creative pre-approval policy.
          enum:
            - CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED
            - SELLER_PRE_APPROVAL_REQUIRED
            - SELLER_PRE_APPROVAL_NOT_REQUIRED
          readOnly: true
        programmaticCreativeSource:
          enum:
            - PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED
            - ADVERTISER
            - PUBLISHER
          description: Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by the buyer.
          readOnly: true
          enumDescriptions:
            - A placeholder for an undefined programmatic creative source.
            - The advertiser provides the creatives.
            - The publisher provides the creatives to be served.
          type: string
        skippableAdType:
          description: Output only. Skippable video ads allow viewers to skip ads after 5 seconds. Only applicable for deals with video creatives.
          enumDescriptions:
            - A placeholder for an unspecified skippable ad type.
            - Video ad that can be skipped after 5 seconds. This value will appear in RTB bid requests as SkippableBidRequestType::REQUIRE_SKIPPABLE.
            - Video ad that can be skipped after 5 seconds, and is counted as engaged view after 30 seconds. The creative is hosted on YouTube only, and viewcount of the YouTube video increments after the engaged view. This value will appear in RTB bid requests as SkippableBidRequestType::REQUIRE_SKIPPABLE.
            - This video ad is not skippable. This value will appear in RTB bid requests as SkippableBidRequestType::BLOCK_SKIPPABLE.
            - This video ad can be skipped after 5 seconds or not-skippable. This value will appear in RTB bid requests as SkippableBidRequestType::ALLOW_SKIPPABLE.
          readOnly: true
          type: string
          enum:
            - SKIPPABLE_AD_TYPE_UNSPECIFIED
            - SKIPPABLE
            - INSTREAM_SELECT
            - NOT_SKIPPABLE
            - ANY
        creativeFormat:
          readOnly: true
          enum:
            - CREATIVE_FORMAT_UNSPECIFIED
            - DISPLAY
            - VIDEO
          type: string
          description: Output only. The format of the creative, only applicable for programmatic guaranteed and preferred deals.
          enumDescriptions:
            - A placeholder for an unspecified creative format.
            - Banner creatives such as image or HTML5 assets.
            - Video creatives that can be played in a video player.
        creativeSafeFrameCompatibility:
          enumDescriptions:
            - A placeholder for an undefined creative safe-frame compatibility.
            - The creatives need to be compatible with the safe frame option.
            - The creatives can be incompatible with the safe frame option.
          readOnly: true
          description: Output only. Specifies whether the creative is safeFrame compatible.
          enum:
            - CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED
            - COMPATIBLE
            - INCOMPATIBLE
          type: string
        maxAdDurationMs:
          readOnly: true
          format: int64
          description: Output only. The max duration of the video creative in milliseconds. only applicable for deals with video creatives.
          type: string
      type: object
      id: CreativeRequirements
    InventoryTypeTargeting:
      type: object
      properties:
        inventoryTypes:
          items:
            enum:
              - INVENTORY_TYPE_UNSPECIFIED
              - BROWSER
              - MOBILE_APP
              - VIDEO_PLAYER
            enumDescriptions:
              - Unspecified inventory type
              - Desktop or mobile web browser excluding ads inside a video player
              - Mobile apps other than video players and web browsers
              - Instream video and audio
            type: string
          type: array
          description: The list of targeted inventory types for the bid request.
      id: InventoryTypeTargeting
      description: Targeting of the inventory types a bid request can originate from.
    Contact:
      id: Contact
      properties:
        email:
          description: Email address for the contact.
          type: string
        displayName:
          description: The display_name of the contact.
          type: string
      type: object
      description: Contains information on how a buyer or seller can be reached.
    Proposal:
      description: Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer.
      type: object
      properties:
        updateTime:
          format: google-datetime
          readOnly: true
          type: string
          description: Output only. The time when the proposal was last revised.
        name:
          description: 'Immutable. The name of the proposal serving as a unique identifier. Format: buyers/{accountId}/proposals/{proposalId}'
          type: string
        originatorRole:
          description: Output only. Indicates whether the buyer/seller created the proposal.
          enum:
            - BUYER_SELLER_ROLE_UNSPECIFIED
            - BUYER
            - SELLER
          type: string
          enumDescriptions:
            - A placeholder for an undefined buyer/seller role.
            - Specifies the role as buyer.
            - Specifies the role as seller.
          readOnly: true
        client:
          readOnly: true
          type: string
          description: 'Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`'
        lastUpdaterOrCommentorRole:
          type: string
          enumDescriptions:
            - A placeholder for an undefined buyer/seller role.
            - Specifies the role as buyer.
            - Specifies the role as seller.
          description: Output only. The role of the last user that either updated the proposal or left a comment.
          enum:
            - BUYER_SELLER_ROLE_UNSPECIFIED
            - BUYER
            - SELLER
          readOnly: true
        isRenegotiating:
          readOnly: true
          description: Output only. True if the proposal was previously finalized and is now being renegotiated.
          type: boolean
        notes:
          items:
            $ref: '#/components/schemas/Note'
          type: array
          description: A list of notes from the buyer and the seller attached to this proposal.
        dealType:
          description: Output only. Type of deal the proposal contains.
          readOnly: true
          type: string
          enumDescriptions:
            - Default, unspecified deal type.
            - Preferred deals.
            - Private auction deals.
            - Programmatic guaranteed deals.
          enum:
            - DEAL_TYPE_UNSPECIFIED
            - PREFERRED_DEAL
            - PRIVATE_AUCTION
            - PROGRAMMATIC_GUARANTEED
        publisherProfile:
          type: string
          description: 'Immutable. Reference to the seller on the proposal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}` Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.'
        billedBuyer:
          description: 'Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`'
          type: string
          readOnly: true
        sellerContacts:
          items:
            $ref: '#/components/schemas/Contact'
          readOnly: true
          type: array
          description: Output only. Contact information for the seller.
        buyerPrivateData:
          description: Buyer private data (hidden from seller).
          $ref: '#/components/schemas/PrivateData'
        pausingConsented:
          type: boolean
          description: Whether pausing is allowed for the proposal. This is a negotiable term between buyers and publishers.
        buyerContacts:
          description: Contact information for the buyer.
          items:
            $ref: '#/components/schemas/Contact'
          type: array
        termsAndConditions:
          readOnly: true
          description: Output only. The terms and conditions associated with this proposal. Accepting a proposal implies acceptance of this field. This is created by the seller, the buyer can only view it.
          type: string
        state:
          enumDescriptions:
            - Unspecified proposal state
            - When a proposal is waiting for buyer to review.
            - When the proposal is waiting for the seller to review.
            - When the seller accepted the proposal and sent it to the buyer for review.
            - When both buyer and seller has accepted the proposal
            - When either buyer or seller has cancelled the proposal
          type: string
          enum:
            - STATE_UNSPECIFIED
            - BUYER_REVIEW_REQUESTED
            - SELLER_REVIEW_REQUESTED
            - BUYER_ACCEPTANCE_REQUESTED
            - FINALIZED
            - TERMINATED
          description: Output only. Indicates the state of the proposal.
          readOnly: true
        proposalRevision:
          description: Output only. The revision number for the proposal. Each update to the proposal or deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
          type: string
          format: int64
          readOnly: true
        displayName:
          type: string
          description: 'Output only. The descriptive name for the proposal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the proposal.'
          readOnly: true
        buyer:
          type: string
          readOnly: true
          description: 'Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`'
      id: Proposal
    TimeOfDay:
      type: object
      description: Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
      properties:
        seconds:
          format: int32
          type: integer
          description: Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
        nanos:
          description: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
          format: int32
          type: integer
        hours:
          type: integer
          description: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
          format: int32
        minutes:
          type: integer
          description: Minutes of hour of day. Must be from 0 to 59.
          format: int32
      id: TimeOfDay
    SetReadyToServeRequest:
      id: SetReadyToServeRequest
      properties: {}
      type: object
      description: Request message for setting ready to serve for a finalized deal.
    ResumeFinalizedDealRequest:
      type: object
      properties: {}
      description: Request message for resuming a finalized deal.
      id: ResumeFinalizedDealRequest
    UnsubscribeClientsRequest:
      type: object
      description: Request message for UnsubscribeAuctionPackage.
      id: UnsubscribeClientsRequest
      properties:
        clients:
          type: array
          description: Optional. A list of client buyers to unsubscribe from the auction package, with client buyer in the format `buyers/{accountId}/clients/{clientAccountId}`.
          items:
            type: string
    MarketplaceTargeting:
      id: MarketplaceTargeting
      description: Targeting represents different criteria that can be used to target inventory. For example, they can choose to target inventory only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.
      properties:
        inventorySizeTargeting:
          $ref: '#/components/schemas/InventorySizeTargeting'
          readOnly: true
          description: Output only. Inventory sizes to be included/excluded.
        technologyTargeting:
          readOnly: true
          $ref: '#/components/schemas/TechnologyTargeting'
          description: Output only. Technology targeting information, for example, operating system, device category.
        geoTargeting:
          readOnly: true
          $ref: '#/components/schemas/CriteriaTargeting'
          description: Output only. Geo criteria IDs to be included/excluded.
        videoTargeting:
          description: Output only. Video targeting information.
          readOnly: true
          $ref: '#/components/schemas/VideoTargeting'
        userListTargeting:
          description: Buyer user list targeting information. User lists can be uploaded using https://developers.google.com/authorized-buyers/rtb/bulk-uploader.
          $ref: '#/components/schemas/CriteriaTargeting'
        inventoryTypeTargeting:
          $ref: '#/components/schemas/InventoryTypeTargeting'
          readOnly: true
          description: Output only. Inventory type targeting information.
        daypartTargeting:
          description: Daypart targeting information.
          $ref: '#/components/schemas/DayPartTargeting'
        placementTargeting:
          description: Output only. Placement targeting information, for example, URL, mobile applications.
          $ref: '#/components/schemas/PlacementTargeting'
          readOnly: true
      type: object
  parameters:
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/authorized-buyers-marketplace: See, create, edit, and delete your Authorized Buyers Marketplace entities.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    auction_packages:
      id: googledevelopers.authorizedbuyersmarketplace.auction_packages
      name: auction_packages
      title: Auction_packages
      methods:
        buyers_auctionPackages_unsubscribeClients:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1auctionPackages~1{auctionPackagesId}:unsubscribeClients/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_auctionPackages_unsubscribe:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1auctionPackages~1{auctionPackagesId}:unsubscribe/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_auctionPackages_subscribe:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1auctionPackages~1{auctionPackagesId}:subscribe/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_auctionPackages_subscribeClients:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1auctionPackages~1{auctionPackagesId}:subscribeClients/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_auctionPackages_get:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1auctionPackages~1{auctionPackagesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_auctionPackages_list:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1auctionPackages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/auction_packages/methods/buyers_auctionPackages_get'
          - $ref: '#/components/x-stackQL-resources/auction_packages/methods/buyers_auctionPackages_list'
        insert: []
        update: []
        delete: []
    finalized_deals__creative:
      id: googledevelopers.authorizedbuyersmarketplace.finalized_deals__creative
      name: finalized_deals__creative
      title: Finalized_deals__creative
      methods:
        buyers_finalizedDeals_addCreative:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1finalizedDeals~1{finalizedDealsId}:addCreative/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    finalized_deals:
      id: googledevelopers.authorizedbuyersmarketplace.finalized_deals
      name: finalized_deals
      title: Finalized_deals
      methods:
        buyers_finalizedDeals_get:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1finalizedDeals~1{finalizedDealsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_finalizedDeals_setReadyToServe:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1finalizedDeals~1{finalizedDealsId}:setReadyToServe/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_finalizedDeals_pause:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1finalizedDeals~1{finalizedDealsId}:pause/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_finalizedDeals_list:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1finalizedDeals/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_finalizedDeals_resume:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1finalizedDeals~1{finalizedDealsId}:resume/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        bidders_finalizedDeals_list:
          operation:
            $ref: '#/paths/~1v1~1bidders~1{biddersId}~1finalizedDeals/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/finalized_deals/methods/buyers_finalizedDeals_get'
          - $ref: '#/components/x-stackQL-resources/finalized_deals/methods/buyers_finalizedDeals_list'
          - $ref: '#/components/x-stackQL-resources/finalized_deals/methods/bidders_finalizedDeals_list'
        insert: []
        update: []
        delete: []
    users:
      id: googledevelopers.authorizedbuyersmarketplace.users
      name: users
      title: Users
      methods:
        buyers_clients_users_deactivate:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients~1{clientsId}~1users~1{usersId}:deactivate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_clients_users_create:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients~1{clientsId}~1users/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_clients_users_list:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients~1{clientsId}~1users/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_clients_users_delete:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients~1{clientsId}~1users~1{usersId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_clients_users_get:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients~1{clientsId}~1users~1{usersId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_clients_users_activate:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients~1{clientsId}~1users~1{usersId}:activate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/users/methods/buyers_clients_users_get'
          - $ref: '#/components/x-stackQL-resources/users/methods/buyers_clients_users_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/users/methods/buyers_clients_users_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/users/methods/buyers_clients_users_delete'
    clients:
      id: googledevelopers.authorizedbuyersmarketplace.clients
      name: clients
      title: Clients
      methods:
        buyers_clients_patch:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients~1{clientsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_clients_get:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients~1{clientsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_clients_activate:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients~1{clientsId}:activate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_clients_deactivate:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients~1{clientsId}:deactivate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_clients_list:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_clients_create:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1clients/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/clients/methods/buyers_clients_get'
          - $ref: '#/components/x-stackQL-resources/clients/methods/buyers_clients_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/clients/methods/buyers_clients_create'
        update: []
        delete: []
    publisher_profiles:
      id: googledevelopers.authorizedbuyersmarketplace.publisher_profiles
      name: publisher_profiles
      title: Publisher_profiles
      methods:
        buyers_publisherProfiles_get:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1publisherProfiles~1{publisherProfilesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_publisherProfiles_list:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1publisherProfiles/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/publisher_profiles/methods/buyers_publisherProfiles_get'
          - $ref: '#/components/x-stackQL-resources/publisher_profiles/methods/buyers_publisherProfiles_list'
        insert: []
        update: []
        delete: []
    proposals__note:
      id: googledevelopers.authorizedbuyersmarketplace.proposals__note
      name: proposals__note
      title: Proposals__note
      methods:
        buyers_proposals_addNote:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1proposals~1{proposalsId}:addNote/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    proposals:
      id: googledevelopers.authorizedbuyersmarketplace.proposals
      name: proposals
      title: Proposals
      methods:
        buyers_proposals_accept:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1proposals~1{proposalsId}:accept/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_proposals_sendRfp:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1proposals:sendRfp/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_proposals_patch:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1proposals~1{proposalsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_proposals_get:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1proposals~1{proposalsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_proposals_cancelNegotiation:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1proposals~1{proposalsId}:cancelNegotiation/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_proposals_list:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1proposals/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/proposals/methods/buyers_proposals_get'
          - $ref: '#/components/x-stackQL-resources/proposals/methods/buyers_proposals_list'
        insert: []
        update: []
        delete: []
    deals:
      id: googledevelopers.authorizedbuyersmarketplace.deals
      name: deals
      title: Deals
      methods:
        buyers_proposals_deals_batchUpdate:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1proposals~1{proposalsId}~1deals:batchUpdate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_proposals_deals_list:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1proposals~1{proposalsId}~1deals/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_proposals_deals_patch:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1proposals~1{proposalsId}~1deals~1{dealsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        buyers_proposals_deals_get:
          operation:
            $ref: '#/paths/~1v1~1buyers~1{buyersId}~1proposals~1{proposalsId}~1deals~1{dealsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/deals/methods/buyers_proposals_deals_get'
          - $ref: '#/components/x-stackQL-resources/deals/methods/buyers_proposals_deals_list'
        insert: []
        update: []
        delete: []
paths:
  /v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:unsubscribeClients:
    parameters: &ref_1
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/oauth_token'
    post:
      description: Unsubscribe from the auction package for the specified clients of the buyer. Unsubscribing a client that is not subscribed will have no effect.
      operationId: authorizedbuyersmarketplace.buyers.auctionPackages.unsubscribeClients
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnsubscribeClientsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionPackage'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: auctionPackagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: auction_packages
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:unsubscribe:
    parameters: *ref_1
    post:
      description: Unsubscribe from the auction package for the specified buyer. Once unsubscribed, the bidder will no longer receive a call out for the auction package deal ID and the specified buyer.
      operationId: authorizedbuyersmarketplace.buyers.auctionPackages.unsubscribe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnsubscribeAuctionPackageRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionPackage'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: auctionPackagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: auction_packages
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:subscribe:
    parameters: *ref_1
    post:
      description: Subscribe to the auction package for the specified buyer. Once subscribed, the bidder will receive a call out for inventory matching the auction package targeting criteria with the auction package deal ID and the specified buyer.
      operationId: authorizedbuyersmarketplace.buyers.auctionPackages.subscribe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeAuctionPackageRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionPackage'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: auctionPackagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: auction_packages
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:subscribeClients:
    parameters: *ref_1
    post:
      description: Subscribe the specified clients of the buyer to the auction package. If a client in the list does not belong to the buyer, an error response will be returned, and all of the following clients in the list will not be subscribed. Subscribing an already subscribed client will have no effect.
      operationId: authorizedbuyersmarketplace.buyers.auctionPackages.subscribeClients
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeClientsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionPackage'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: auctionPackagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: auction_packages
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:
    parameters: *ref_1
    get:
      description: Gets an auction package given its name.
      operationId: authorizedbuyersmarketplace.buyers.auctionPackages.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionPackage'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: auctionPackagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: auction_packages
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/auctionPackages:
    parameters: *ref_1
    get:
      description: List the auction packages subscribed by a buyer and its clients.
      operationId: authorizedbuyersmarketplace.buyers.auctionPackages.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuctionPackagesResponse'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: auction_packages
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:addCreative:
    parameters: *ref_1
    post:
      description: Add creative to be used in the bidding process for a finalized deal. For programmatic guaranteed deals, it's recommended that you associate at least one approved creative with the deal before calling SetReadyToServe, to help reduce the number of bid responses filtered because they don't contain approved creatives. Creatives successfully added to a deal can be found in the Realtime-bidding Creatives API creative.deal_ids. This method only applies to programmatic guaranteed deals. Maximum number of 1000 creatives can be added to a finalized deal.
      operationId: authorizedbuyersmarketplace.buyers.finalizedDeals.addCreative
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCreativeRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalizedDeal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: finalizedDealsId
          required: true
          schema:
            type: string
      x-stackQL-resource: finalized_deals__creative
      x-stackQL-verb: insert
  /v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:
    parameters: *ref_1
    get:
      description: Gets a finalized deal given its name.
      operationId: authorizedbuyersmarketplace.buyers.finalizedDeals.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalizedDeal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: finalizedDealsId
          required: true
          schema:
            type: string
      x-stackQL-resource: finalized_deals
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:setReadyToServe:
    parameters: *ref_1
    post:
      description: Sets the given finalized deal as ready to serve. By default, deals are set as ready to serve as soon as they're finalized. If you want to opt out of the default behavior, and manually indicate that deals are ready to serve, ask your Technical Account Manager to add you to the allowlist. If you choose to use this method, finalized deals belonging to the bidder and its child seats don't start serving until after you call `setReadyToServe`, and after the deals become active. For example, you can use this method to delay receiving bid requests until your creative is ready. This method only applies to programmatic guaranteed deals.
      operationId: authorizedbuyersmarketplace.buyers.finalizedDeals.setReadyToServe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetReadyToServeRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalizedDeal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: finalizedDealsId
          required: true
          schema:
            type: string
      x-stackQL-resource: finalized_deals
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:pause:
    parameters: *ref_1
    post:
      description: Pauses serving of the given finalized deal. This call only pauses the serving status, and does not affect other fields of the finalized deal. Calling this method for an already paused deal has no effect. This method only applies to programmatic guaranteed deals.
      operationId: authorizedbuyersmarketplace.buyers.finalizedDeals.pause
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PauseFinalizedDealRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalizedDeal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: finalizedDealsId
          required: true
          schema:
            type: string
      x-stackQL-resource: finalized_deals
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/finalizedDeals:
    parameters: *ref_1
    get:
      description: Lists finalized deals. Use the URL path "/v1/buyers/{accountId}/finalizedDeals" to list finalized deals for the current buyer and its clients. Bidders can use the URL path "/v1/bidders/{accountId}/finalizedDeals" to list finalized deals for the bidder, its buyers and all their clients.
      operationId: authorizedbuyersmarketplace.buyers.finalizedDeals.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFinalizedDealsResponse'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: finalized_deals
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:resume:
    parameters: *ref_1
    post:
      description: Resumes serving of the given finalized deal. Calling this method for an running deal has no effect. If a deal is initially paused by the seller, calling this method will not resume serving of the deal until the seller also resumes the deal. This method only applies to programmatic guaranteed deals.
      operationId: authorizedbuyersmarketplace.buyers.finalizedDeals.resume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeFinalizedDealRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalizedDeal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: finalizedDealsId
          required: true
          schema:
            type: string
      x-stackQL-resource: finalized_deals
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/clients/{clientsId}/users/{usersId}:deactivate:
    parameters: *ref_1
    post:
      description: Deactivates an existing client user. The state of the client user will be updated from "ACTIVE" to "INACTIVE". This method has no effect if the client user is already in "INACTIVE" state. An error will be returned if the client user to deactivate is still in "INVITED" state.
      operationId: authorizedbuyersmarketplace.buyers.clients.users.deactivate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeactivateClientUserRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUser'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: clientsId
          required: true
          schema:
            type: string
        - in: path
          name: usersId
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/clients/{clientsId}/users:
    parameters: *ref_1
    post:
      description: Creates a new client user in "INVITED" state. An email invitation will be sent to the new user, once accepted the user will become active.
      operationId: authorizedbuyersmarketplace.buyers.clients.users.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUser'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUser'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: clientsId
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: insert
    get:
      description: Lists all client users for a specified client.
      operationId: authorizedbuyersmarketplace.buyers.clients.users.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClientUsersResponse'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: clientsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/clients/{clientsId}/users/{usersId}:
    parameters: *ref_1
    delete:
      description: Deletes an existing client user. The client user will lose access to the Authorized Buyers UI. Note that if a client user is deleted, the user's access to the UI can't be restored unless a new client user is created and activated.
      operationId: authorizedbuyersmarketplace.buyers.clients.users.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: clientsId
          required: true
          schema:
            type: string
        - in: path
          name: usersId
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: delete
    get:
      description: Retrieves an existing client user.
      operationId: authorizedbuyersmarketplace.buyers.clients.users.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUser'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: clientsId
          required: true
          schema:
            type: string
        - in: path
          name: usersId
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/clients/{clientsId}/users/{usersId}:activate:
    parameters: *ref_1
    post:
      description: Activates an existing client user. The state of the client user will be updated from "INACTIVE" to "ACTIVE". This method has no effect if the client user is already in "ACTIVE" state. An error will be returned if the client user to activate is still in "INVITED" state.
      operationId: authorizedbuyersmarketplace.buyers.clients.users.activate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateClientUserRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUser'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: clientsId
          required: true
          schema:
            type: string
        - in: path
          name: usersId
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/clients/{clientsId}:
    parameters: *ref_1
    patch:
      description: Updates an existing client.
      operationId: authorizedbuyersmarketplace.buyers.clients.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: clientsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: clients
      x-stackQL-verb: exec
    get:
      description: Gets a client with a given resource name.
      operationId: authorizedbuyersmarketplace.buyers.clients.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: clientsId
          required: true
          schema:
            type: string
      x-stackQL-resource: clients
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/clients/{clientsId}:activate:
    parameters: *ref_1
    post:
      description: Activates an existing client. The state of the client will be updated to "ACTIVE". This method has no effect if the client is already in "ACTIVE" state.
      operationId: authorizedbuyersmarketplace.buyers.clients.activate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateClientRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: clientsId
          required: true
          schema:
            type: string
      x-stackQL-resource: clients
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/clients/{clientsId}:deactivate:
    parameters: *ref_1
    post:
      description: Deactivates an existing client. The state of the client will be updated to "INACTIVE". This method has no effect if the client is already in "INACTIVE" state.
      operationId: authorizedbuyersmarketplace.buyers.clients.deactivate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeactivateClientRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: clientsId
          required: true
          schema:
            type: string
      x-stackQL-resource: clients
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/clients:
    parameters: *ref_1
    get:
      description: Lists all the clients for the current buyer.
      operationId: authorizedbuyersmarketplace.buyers.clients.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClientsResponse'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: clients
      x-stackQL-verb: select
    post:
      description: Creates a new client.
      operationId: authorizedbuyersmarketplace.buyers.clients.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
      x-stackQL-resource: clients
      x-stackQL-verb: insert
  /v1/buyers/{buyersId}/publisherProfiles/{publisherProfilesId}:
    parameters: *ref_1
    get:
      description: Gets the requested publisher profile by name.
      operationId: authorizedbuyersmarketplace.buyers.publisherProfiles.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublisherProfile'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: publisherProfilesId
          required: true
          schema:
            type: string
      x-stackQL-resource: publisher_profiles
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/publisherProfiles:
    parameters: *ref_1
    get:
      description: Lists publisher profiles. The returned publisher profiles aren't in any defined order. The order of the results might change. A new publisher profile can appear in any place in the list of returned results.
      operationId: authorizedbuyersmarketplace.buyers.publisherProfiles.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPublisherProfilesResponse'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: publisher_profiles
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/proposals/{proposalsId}:addNote:
    parameters: *ref_1
    post:
      description: Creates a note for this proposal and sends to the seller.
      operationId: authorizedbuyersmarketplace.buyers.proposals.addNote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddNoteRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: proposalsId
          required: true
          schema:
            type: string
      x-stackQL-resource: proposals__note
      x-stackQL-verb: insert
  /v1/buyers/{buyersId}/proposals/{proposalsId}:accept:
    parameters: *ref_1
    post:
      description: Accepts the proposal at the given revision number. If the revision number in the request is behind the latest from the server, an error message will be returned. This call updates the Proposal.state from `BUYER_ACCEPTANCE_REQUESTED` to `FINALIZED`; it has no side effect if the Proposal.state is already `FINALIZED` and throws exception if the Proposal.state is not either `BUYER_ACCEPTANCE_REQUESTED` or `FINALIZED`. Accepting a proposal means the buyer understands and accepts the Proposal.terms_and_conditions proposed by the seller.
      operationId: authorizedbuyersmarketplace.buyers.proposals.accept
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptProposalRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: proposalsId
          required: true
          schema:
            type: string
      x-stackQL-resource: proposals
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/proposals:sendRfp:
    parameters: *ref_1
    post:
      description: Sends a request for proposal (RFP) to a publisher to initiate the negotiation regarding certain inventory. In the RFP, buyers can specify the deal type, deal terms, start and end dates, targeting, and a message to the publisher. Once the RFP is sent, a proposal in `SELLER_REVIEW_REQUESTED` state will be created and returned in the response. The publisher may review your request and respond with detailed deals in the proposal.
      operationId: authorizedbuyersmarketplace.buyers.proposals.sendRfp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendRfpRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
      x-stackQL-resource: proposals
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/proposals/{proposalsId}:
    parameters: *ref_1
    patch:
      description: Updates the proposal at the given revision number. If the revision number in the request is behind the latest from the server, an error message will be returned. See FieldMask for how to use FieldMask. Only fields specified in the UpdateProposalRequest.update_mask will be updated; Fields noted as 'Immutable' or 'Output only' yet specified in the UpdateProposalRequest.update_mask will be ignored and left unchanged. Updating a private auction proposal is not allowed and will result in an error.
      operationId: authorizedbuyersmarketplace.buyers.proposals.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Proposal'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: proposalsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: proposals
      x-stackQL-verb: exec
    get:
      description: Gets a proposal using its name. The proposal is returned at most recent revision. revision.
      operationId: authorizedbuyersmarketplace.buyers.proposals.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: proposalsId
          required: true
          schema:
            type: string
      x-stackQL-resource: proposals
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/proposals/{proposalsId}:cancelNegotiation:
    parameters: *ref_1
    post:
      description: Cancels an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized. If the proposal has not been finalized before, calling this method will set the Proposal.state to `TERMINATED` and increment the Proposal.proposal_revision. If the proposal has been finalized before and is under renegotiation now, calling this method will reset the Proposal.state to `FINALIZED` and increment the Proposal.proposal_revision. This method does not support private auction proposals whose Proposal.deal_type is 'PRIVATE_AUCTION'.
      operationId: authorizedbuyersmarketplace.buyers.proposals.cancelNegotiation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelNegotiationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: proposalsId
          required: true
          schema:
            type: string
      x-stackQL-resource: proposals
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/proposals:
    parameters: *ref_1
    get:
      description: Lists proposals. A filter expression (list filter syntax) may be specified to filter the results. This will not list finalized versions of proposals that are being renegotiated; to retrieve these use the finalizedProposals resource.
      operationId: authorizedbuyersmarketplace.buyers.proposals.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProposalsResponse'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: proposals
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/proposals/{proposalsId}/deals:batchUpdate:
    parameters: *ref_1
    post:
      description: Batch updates multiple deals in the same proposal.
      operationId: authorizedbuyersmarketplace.buyers.proposals.deals.batchUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdateDealsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpdateDealsResponse'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: proposalsId
          required: true
          schema:
            type: string
      x-stackQL-resource: deals
      x-stackQL-verb: exec
  /v1/buyers/{buyersId}/proposals/{proposalsId}/deals:
    parameters: *ref_1
    get:
      description: Lists all deals in a proposal. To retrieve only the finalized revision deals regardless if a deal is being renegotiated, see the FinalizedDeals resource.
      operationId: authorizedbuyersmarketplace.buyers.proposals.deals.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDealsResponse'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: proposalsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: deals
      x-stackQL-verb: select
  /v1/buyers/{buyersId}/proposals/{proposalsId}/deals/{dealsId}:
    parameters: *ref_1
    patch:
      description: 'Updates the given deal at the buyer known revision number. If the server revision has advanced since the passed-in proposal.proposal_revision an ABORTED error message will be returned. The revision number is incremented by the server whenever the proposal or its constituent deals are updated. Note: The revision number is kept at a proposal level. The buyer of the API is expected to keep track of the revision number after the last update operation and send it in as part of the next update request. This way, if there are further changes on the server (for example, seller making new updates), then the server can detect conflicts and reject the proposed changes.'
      operationId: authorizedbuyersmarketplace.buyers.proposals.deals.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deal'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: proposalsId
          required: true
          schema:
            type: string
        - in: path
          name: dealsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: deals
      x-stackQL-verb: exec
    get:
      description: Gets a deal given its name. The deal is returned at its head revision.
      operationId: authorizedbuyersmarketplace.buyers.proposals.deals.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deal'
      parameters:
        - in: path
          name: buyersId
          required: true
          schema:
            type: string
        - in: path
          name: proposalsId
          required: true
          schema:
            type: string
        - in: path
          name: dealsId
          required: true
          schema:
            type: string
      x-stackQL-resource: deals
      x-stackQL-verb: select
  /v1/bidders/{biddersId}/finalizedDeals:
    parameters: *ref_1
    get:
      description: Lists finalized deals. Use the URL path "/v1/buyers/{accountId}/finalizedDeals" to list finalized deals for the current buyer and its clients. Bidders can use the URL path "/v1/bidders/{accountId}/finalizedDeals" to list finalized deals for the bidder, its buyers and all their clients.
      operationId: authorizedbuyersmarketplace.bidders.finalizedDeals.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
          Oauth2c:
            - https://www.googleapis.com/auth/authorized-buyers-marketplace
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFinalizedDealsResponse'
      parameters:
        - in: path
          name: biddersId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: finalized_deals
      x-stackQL-verb: select
