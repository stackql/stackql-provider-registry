openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Poly API
  description: 'The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. '
  version: v1
  x-discovery-doc-revision: '20210817'
  x-generated-date: '2023-01-19'
externalDocs:
  url: https://developers.google.com/poly/
servers:
  - url: https://poly.googleapis.com
components:
  schemas:
    ObjParseError:
      properties:
        line:
          type: string
          description: The text of the line. Note that this may be truncated if the line was very long. This may not include the error if it occurs after line truncation.
        startIndex:
          type: integer
          format: int32
          description: The starting character index at which the problem was found.
        endIndex:
          type: integer
          description: The ending character index at which the problem was found.
          format: int32
        filePath:
          description: The file path in which the problem was found.
          type: string
        code:
          type: string
          description: The type of problem found (required).
          enumDescriptions:
            - Unknown error code.
            - Vertex references are specified in an inconsistent style for a face (e.g. some vertices specify texture vertices but some don't).
            - The command is invalid.
            - A invalid number was specified.
            - An invalid vertex reference was specified.
            - A vertex reference does not specify a geometric vertex.
            - An expected token was not found.
            - The vertex specified too few dimensions for its usage.
            - The face specified too few vertices.
            - The vertex specified too many dimensions for its usage.
            - This command is a valid OBJ command but is not supported. This error is only generated for the first instance of such a command.
            - This line ended with unparsed token characters.
            - The specified vertex was not found.
            - The specified number was too large or small for its usage.
            - The specified parameter value was not recognized.
            - The specified texture option is not valid.
            - The maximum number of problems to report was reached. Parsing continues, but further problems will be ignored.
            - An expected file name was not specified.
            - The specified file was not found in the import.
            - The specified material was not found in any material definition in the import.
            - Material parameters were specified before the first material definition.
            - The smoothing group is not valid.
            - Vertex colors were specified for only some vertices of a face.
            - A missing file was found at a different file path.
            - A line in an OBJ or MTL file exceeded the maximum line length.
            - The file path was invalid. Only relative paths are supported.
          enum:
            - CODE_UNSPECIFIED
            - INCONSISTENT_VERTEX_REFS
            - INVALID_COMMAND
            - INVALID_NUMBER
            - INVALID_VERTEX_REF
            - MISSING_GEOMETRIC_VERTEX
            - MISSING_TOKEN
            - TOO_FEW_DIMENSIONS
            - TOO_FEW_VERTICES
            - TOO_MANY_DIMENSIONS
            - UNSUPPORTED_COMMAND
            - UNUSED_TOKENS
            - VERTEX_NOT_FOUND
            - NUMBER_OUT_OF_RANGE
            - INVALID_VALUE
            - INVALID_TEXTURE_OPTION
            - TOO_MANY_PROBLEMS
            - MISSING_FILE_NAME
            - FILE_NOT_FOUND
            - UNKNOWN_MATERIAL
            - NO_MATERIAL_DEFINED
            - INVALID_SMOOTHING_GROUP
            - MISSING_VERTEX_COLORS
            - FILE_SUBSTITUTION
            - LINE_TOO_LONG
            - INVALID_FILE_PATH
        lineNumber:
          type: integer
          format: int32
          description: Line number at which the problem was found.
      id: ObjParseError
      type: object
      description: Details of an error resulting from parsing an OBJ file
    StartAssetImportResponse:
      id: StartAssetImportResponse
      description: A response message from a request to startImport. This is returned in the response field of the Operation.
      type: object
      properties:
        assetId:
          description: The id of newly created asset. If this is empty when the operation is complete it means the import failed. Please refer to the assetImportMessages field to understand what went wrong.
          type: string
        assetImportId:
          description: The id of the asset import.
          type: string
        publishUrl:
          description: The publish URL for the asset.
          type: string
        assetImportMessages:
          items:
            $ref: '#/components/schemas/AssetImportMessage'
          description: The message from the asset import. This will contain any warnings (or - in the case of failure - errors) that occurred during import.
          type: array
    AssetImportMessage:
      id: AssetImportMessage
      type: object
      description: A message generated by the asset import process.
      properties:
        imageError:
          description: An optional image error. Only present for INVALID_IMAGE_FILE.
          $ref: '#/components/schemas/ImageError'
        filePath:
          description: An optional file path. Only present for those error codes that specify it.
          type: string
        code:
          enum:
            - CODE_UNSPECIFIED
            - NO_IMPORTABLE_FILE
            - EMPTY_MODEL
            - OBJ_PARSE_ERROR
            - EXPIRED
            - IMAGE_ERROR
            - EXTRA_FILES_WITH_ARCHIVE
            - DEFAULT_MATERIALS
            - FATAL_ERROR
            - INVALID_ELEMENT_TYPE
          type: string
          enumDescriptions:
            - Unknown error code.
            - The asset import did not include any file that we can import (i.e. an OBJ file).
            - When generating the preview for the import, no geometry was found.
            - A problem was encountered while parsing the OBJ file. The converter makes a 'best effort' attempt to continue when encountering such issues. In some cases the resulting preview model may still be acceptable. The details can be found in the parse error message.
            - The importer was not able to import the model before the expiration time.
            - The importer encountered a problem reading an image file.
            - Multiple files were encountered in addition to a ZIP archive. When uploading an archive only one file is permitted.
            - Default materials are used in the model. This means that one or more faces is using default materials either because no usemtl statement was specified or because the requested material was not found due to a missing material file or bad material name. This does not cover the case of missing textures.
            - The importer encountered a fatal error and was unable to import the model.
            - The import includes a file of an unsupported element type. The file path is specified.
          description: The code associated with this message.
        objParseError:
          description: An optional OBJ parse error. Only present for OBJ_PARSE_ERROR.
          $ref: '#/components/schemas/ObjParseError'
    ListLikedAssetsResponse:
      description: A response message from a request to list.
      id: ListLikedAssetsResponse
      type: object
      properties:
        assets:
          description: A list of assets that match the criteria specified in the request.
          items:
            $ref: '#/components/schemas/Asset'
          type: array
        totalSize:
          type: integer
          format: int32
          description: The total number of assets in the list, without pagination.
        nextPageToken:
          description: The continuation token for retrieving the next page. If empty, indicates that there are no more pages. To get the next page, submit the same request specifying this value as the page_token.
          type: string
    UserAsset:
      description: Data about the user's asset.
      type: object
      id: UserAsset
      properties:
        asset:
          description: An Asset.
          $ref: '#/components/schemas/Asset'
    ListAssetsResponse:
      description: A response message from a request to list.
      id: ListAssetsResponse
      properties:
        nextPageToken:
          description: The continuation token for retrieving the next page. If empty, indicates that there are no more pages. To get the next page, submit the same request specifying this value as the page_token.
          type: string
        totalSize:
          format: int32
          description: The total number of assets in the list, without pagination.
          type: integer
        assets:
          description: A list of assets that match the criteria specified in the request.
          type: array
          items:
            $ref: '#/components/schemas/Asset'
      type: object
    FormatComplexity:
      id: FormatComplexity
      type: object
      properties:
        triangleCount:
          format: int64
          description: The estimated number of triangles.
          type: string
        lodHint:
          type: integer
          format: int32
          description: A non-negative integer that represents the level of detail (LOD) of this format relative to other formats of the same asset with the same format_type. This hint allows you to sort formats from the most-detailed (0) to least-detailed (integers greater than 0).
      description: Information on the complexity of this Format.
    RemixInfo:
      description: Info about the sources of this asset (i.e. assets that were remixed to create this asset).
      id: RemixInfo
      properties:
        sourceAsset:
          description: 'Resource ids for the sources of this remix, of the form: `assets/{ASSET_ID}`'
          items:
            type: string
          type: array
      type: object
    File:
      id: File
      description: Represents a file in Poly, which can be a root, resource, or thumbnail file.
      properties:
        relativePath:
          type: string
          description: The path of the resource file relative to the root file. For root or thumbnail files, this is just the filename.
        url:
          description: The URL where the file data can be retrieved.
          type: string
        contentType:
          description: The MIME content-type, such as `image/png`. For more information, see [MIME types](//developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
          type: string
      type: object
    Asset:
      description: Represents and describes an asset in the Poly library. An asset is a 3D model or scene created using [Tilt Brush](//www.tiltbrush.com), [Blocks](//vr.google.com/blocks/), or any 3D program that produces a file that can be upload to Poly.
      properties:
        license:
          enum:
            - UNKNOWN
            - CREATIVE_COMMONS_BY
            - ALL_RIGHTS_RESERVED
          enumDescriptions:
            - Unknown license value.
            - Creative Commons CC-BY 3.0. https://creativecommons.org/licenses/by/3.0/
            - 'Unlicensed: All Rights Reserved by the author. Unlicensed assets are **not** returned by List Assets.'
          description: The license under which the author has made the asset available for use, if any.
          type: string
        isCurated:
          type: boolean
          description: Whether this asset has been curated by the Poly team.
        authorName:
          description: The author's publicly visible name. Use this name when giving credit to the author. For more information, see [Licensing](/poly/discover/licensing).
          type: string
        createTime:
          type: string
          format: google-datetime
          description: For published assets, the time when the asset was published. For unpublished assets, the time when the asset was created.
        description:
          description: The human-readable description, set by the asset's author.
          type: string
        thumbnail:
          description: The thumbnail image for the asset.
          $ref: '#/components/schemas/File'
        formats:
          type: array
          items:
            $ref: '#/components/schemas/Format'
          description: A list of Formats where each format describes one representation of the asset.
        remixInfo:
          description: The remix info for the asset.
          $ref: '#/components/schemas/RemixInfo'
        displayName:
          type: string
          description: The human-readable name, set by the asset's author.
        visibility:
          enumDescriptions:
            - Unknown (and invalid) visibility.
            - Access to the asset and its underlying files and resources is restricted to the author. **Authentication:** You must supply an OAuth token that corresponds to the author's account.
            - Access to the asset and its underlying files and resources is available to anyone with the asset's name. Unlisted assets are **not** returned by List Assets.
            - Access to the asset and its underlying files and resources is available to anyone.
          description: The visibility of the asset and who can access it.
          type: string
          enum:
            - VISIBILITY_UNSPECIFIED
            - PRIVATE
            - UNLISTED
            - PUBLIC
        updateTime:
          description: The time when the asset was last modified. For published assets, whose contents are immutable, the update time changes only when metadata properties, such as visibility, are updated.
          type: string
          format: google-datetime
        name:
          type: string
          description: 'The unique identifier for the asset in the form: `assets/{ASSET_ID}`.'
        presentationParams:
          description: Hints for displaying the asset. Note that these parameters are not immutable; the author of an asset may change them post-publication.
          $ref: '#/components/schemas/PresentationParams'
        metadata:
          description: Application-defined opaque metadata for this asset. This field is only returned when querying for the signed-in user's own assets, not for public assets. This string is limited to 1K chars. It is up to the creator of the asset to define the format for this string (for example, JSON).
          type: string
      id: Asset
      type: object
    Format:
      id: Format
      type: object
      description: The same asset can be represented in different formats, for example, a [WaveFront .obj](//en.wikipedia.org/wiki/Wavefront_.obj_file) file with its corresponding .mtl file or a [Khronos glTF](//www.khronos.org/gltf) file with its corresponding .glb binary data. A format refers to a specific representation of an asset and contains all information needed to retrieve and describe this representation.
      properties:
        formatComplexity:
          description: Complexity stats about this representation of the asset.
          $ref: '#/components/schemas/FormatComplexity'
        resources:
          description: A list of dependencies of the root element. May include, but is not limited to, materials, textures, and shader programs.
          items:
            $ref: '#/components/schemas/File'
          type: array
        formatType:
          type: string
          description: 'A short string that identifies the format type of this representation. Possible values are: `FBX`, `GLTF`, `GLTF2`, `OBJ`, and `TILT`.'
        root:
          $ref: '#/components/schemas/File'
          description: The root of the file hierarchy. This will always be populated. For some format_types - such as `TILT`, which are self-contained - this is all of the data. Other types - such as `OBJ` - often reference other data elements. These are contained in the resources field.
    PresentationParams:
      properties:
        orientingRotation:
          description: 'A rotation that should be applied to the object root to make it upright. More precisely, this quaternion transforms from "object space" (the space in which the object is defined) to "presentation space", a coordinate system where +Y is up, +X is right, -Z is forward. For example, if the object is the Eiffel Tower, in its local coordinate system the object might be laid out such that the base of the tower is on the YZ plane and the tip of the tower is towards positive X. In this case this quaternion would specify a rotation (of 90 degrees about the Z axis) such that in the presentation space the base of the tower is aligned with the XZ plane, and the tip of the tower lies towards +Y. This rotation is unrelated to the object''s pose in the web preview, which is just a camera position setting and is *not* reflected in this rotation. Please note: this is applicable only to the gLTF.'
          $ref: '#/components/schemas/Quaternion'
        colorSpace:
          description: The materials' diffuse/albedo color. This does not apply to vertex colors or texture maps.
          enum:
            - UNKNOWN
            - LINEAR
            - GAMMA
          enumDescriptions:
            - Invalid color value.
            - Linear color values. Default.
            - Colors should be converted to linear by assuming gamma = 2.0.
          type: string
        backgroundColor:
          description: 'A background color which could be used for displaying the 3D asset in a ''thumbnail'' or ''palette'' style view. Authors have the option to set this background color when publishing or editing their asset. This is represented as a six-digit hexademical triplet specifying the RGB components of the background color, e.g. #FF0000 for Red.'
          type: string
      type: object
      id: PresentationParams
      description: Hints for displaying the asset, based on information available when the asset was uploaded.
    ImageError:
      description: A message resulting from reading an image file.
      properties:
        filePath:
          description: The file path in the import of the image that was rejected.
          type: string
        code:
          description: The type of image error encountered. Optional for older image errors.
          enumDescriptions:
            - Unknown error code.
            - We were unable to read the image file.
            - The image size is too large.
            - The image data does not match the expected MIME type of the image.
          enum:
            - CODE_UNSPECIFIED
            - INVALID_IMAGE
            - IMAGE_TOO_BIG
            - WRONG_IMAGE_TYPE
          type: string
      type: object
      id: ImageError
    Quaternion:
      properties:
        z:
          description: The z component.
          format: double
          type: number
        x:
          description: The x component.
          format: double
          type: number
        'y':
          type: number
          description: The y component.
          format: double
        w:
          type: number
          description: The scalar component.
          format: double
      id: Quaternion
      type: object
      description: 'A [Quaternion](//en.wikipedia.org/wiki/Quaternion). Please note: if in the response you see "w: 1" and nothing else this is the default value of [0, 0, 0, 1] where x,y, and z are 0.'
    ListUserAssetsResponse:
      type: object
      description: A response message from a request to list.
      id: ListUserAssetsResponse
      properties:
        totalSize:
          type: integer
          description: The total number of assets in the list, without pagination.
          format: int32
        nextPageToken:
          type: string
          description: The continuation token for retrieving the next page. If empty, indicates that there are no more pages. To get the next page, submit the same request specifying this value as the page_token.
        userAssets:
          items:
            $ref: '#/components/schemas/UserAsset'
          description: A list of UserAssets matching the request.
          type: array
  parameters:
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    likedassets:
      id: googledevelopers.poly.likedassets
      name: likedassets
      title: Likedassets
      methods:
        users_likedassets_list:
          operation:
            $ref: '#/paths/~1v1~1users~1{usersId}~1likedassets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/likedassets/methods/users_likedassets_list'
        insert: []
        update: []
        delete: []
    assets:
      id: googledevelopers.poly.assets
      name: assets
      title: Assets
      methods:
        users_assets_list:
          operation:
            $ref: '#/paths/~1v1~1users~1{usersId}~1assets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1assets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1assets~1{assetsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/assets/methods/users_assets_list'
          - $ref: '#/components/x-stackQL-resources/assets/methods/get'
          - $ref: '#/components/x-stackQL-resources/assets/methods/list'
        insert: []
        update: []
        delete: []
paths:
  /v1/users/{usersId}/likedassets:
    parameters: &ref_1
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/upload_protocol'
    get:
      description: Lists assets that the user has liked. Only the value 'me', representing the currently-authenticated user, is supported. May include assets with an access level of UNLISTED.
      operationId: poly.users.likedassets.list
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLikedAssetsResponse'
      parameters:
        - in: path
          name: usersId
          required: true
          schema:
            type: string
        - in: query
          name: format
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: likedassets
      x-stackQL-verb: select
  /v1/users/{usersId}/assets:
    parameters: *ref_1
    get:
      description: Lists assets authored by the given user. Only the value 'me', representing the currently-authenticated user, is supported. May include assets with an access level of PRIVATE or UNLISTED and assets which are All Rights Reserved for the currently-authenticated user.
      operationId: poly.users.assets.list
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserAssetsResponse'
      parameters:
        - in: path
          name: usersId
          required: true
          schema:
            type: string
        - in: query
          name: format
          schema:
            type: string
        - in: query
          name: visibility
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: assets
      x-stackQL-verb: select
  /v1/assets:
    parameters: *ref_1
    get:
      description: Lists all public, remixable assets. These are assets with an access level of PUBLIC and published under the CC-By license.
      operationId: poly.assets.list
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssetsResponse'
      parameters:
        - in: query
          name: format
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxComplexity
          schema:
            type: string
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: keywords
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: curated
          schema:
            type: boolean
      x-stackQL-resource: assets
      x-stackQL-verb: select
  /v1/assets/{assetsId}:
    parameters: *ref_1
    get:
      description: Returns detailed information about an asset given its name. PRIVATE assets are returned only if the currently authenticated user (via OAuth token) is the author of the asset.
      operationId: poly.assets.get
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
      parameters:
        - in: path
          name: assetsId
          required: true
          schema:
            type: string
      x-stackQL-resource: assets
      x-stackQL-verb: select
