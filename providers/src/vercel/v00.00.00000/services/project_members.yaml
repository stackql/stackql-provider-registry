openapi: 3.0.3
servers:
  - url: 'https://api.vercel.com'
    description: Production API
info:
  contact:
    email: support@vercel.com
    name: Vercel Support
    url: 'https://vercel.com/support'
  version: 0.0.1
  title: Vercel API - project_members
  description: projectMembers
components:
  schemas: {}
  responses: {}
  securitySchemes:
    bearerToken:
      type: http
      description: Default authentication mechanism
      scheme: bearer
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://api.vercel.com/oauth/authorize'
          tokenUrl: 'https://api.vercel.com/oauth/access_token'
          scopes: {}
  x-stackQL-resources:
    projects_members:
      id: vercel.project_members.projects_members
      name: projects_members
      title: Projects Members
      methods:
        get_project_members:
          operation:
            $ref: '#/paths/~1v1~1projects~1{idOrName}~1members/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.members
        _get_project_members:
          operation:
            $ref: '#/paths/~1v1~1projects~1{idOrName}~1members/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        add_project_member:
          operation:
            $ref: '#/paths/~1v1~1projects~1{idOrName}~1members/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        remove_project_member:
          operation:
            $ref: '#/paths/~1v1~1projects~1{idOrName}~1members~1{uid}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/projects_members/methods/get_project_members'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/projects_members/methods/remove_project_member'
paths:
  '/v1/projects/{idOrName}/members':
    get:
      description: Lists all members of a project.
      operationId: getProjectMembers
      security:
        - bearerToken: []
      summary: List project members
      tags:
        - projectMembers
      responses:
        '200':
          description: Paginated list of members for the project.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                  - properties:
                      members:
                        items:
                          properties:
                            avatar:
                              type: string
                              description: ID of the file for the Avatar of this member.
                              example: 123a6c5209bc3778245d011443644c8d27dc2c50
                            email:
                              type: string
                              description: The email of this member.
                              example: jane.doe@example.com
                            role:
                              type: string
                              enum:
                                - ADMIN
                                - PROJECT_DEVELOPER
                                - PROJECT_VIEWER
                              description: Role of this user in the project.
                              example: ADMIN
                            uid:
                              type: string
                              description: The ID of this user.
                              example: zTuNVUXEAvvnNN3IaqinkyMw
                            username:
                              type: string
                              description: The unique username of this user.
                              example: jane-doe
                            name:
                              type: string
                              description: The name of this user.
                              example: Jane Doe
                            createdAt:
                              type: number
                              description: Timestamp in milliseconds when this member was added.
                              example: 1588720733602
                          required:
                            - email
                            - role
                            - uid
                            - username
                            - createdAt
                          type: object
                        type: array
                      pagination:
                        properties:
                          hasNext:
                            type: boolean
                          count:
                            type: number
                            description: Amount of items in the current page.
                            example: 20
                          next:
                            nullable: true
                            type: number
                            description: Timestamp that must be used to request the next page.
                            example: 1540095775951
                          prev:
                            nullable: true
                            type: number
                            description: Timestamp that must be used to request the previous page.
                            example: 1540095775951
                        required:
                          - hasNext
                          - count
                          - next
                          - prev
                        type: object
                    required:
                      - members
                      - pagination
                    type: object
                    description: Paginated list of members for the project.
        '400':
          description: One of the provided values in the request query is invalid.
        '401':
          description: ''
        '403':
          description: You do not have permission to access this resource.
      parameters:
        - name: idOrName
          description: The ID or name of the Project.
          in: path
          required: true
          schema:
            type: string
            description: The ID or name of the Project.
            example: prj_pavWOn1iLObbXLRiwVvzmPrTWyTf
        - name: limit
          description: Limit how many project members should be returned
          in: query
          required: false
          schema:
            description: Limit how many project members should be returned
            example: 20
            type: integer
            minimum: 1
            maximum: 100
        - name: since
          description: Timestamp in milliseconds to only include members added since then.
          in: query
          required: false
          schema:
            description: Timestamp in milliseconds to only include members added since then.
            example: 1540095775951
            type: integer
        - name: until
          description: Timestamp in milliseconds to only include members added until then.
          in: query
          required: false
          schema:
            description: Timestamp in milliseconds to only include members added until then.
            example: 1540095775951
            type: integer
        - name: search
          description: 'Search project members by their name, username, and email.'
          in: query
          required: false
          schema:
            description: 'Search project members by their name, username, and email.'
            type: string
        - description: The Team identifier or slug to perform the request on behalf of.
          in: query
          name: teamId
          required: true
          schema:
            type: string
    post:
      description: Adds a new member to the project.
      operationId: addProjectMember
      security:
        - bearerToken: []
      summary: Adds a new member to a project.
      tags:
        - projectMembers
      responses:
        '200':
          description: Responds with the project ID on success.
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                required:
                  - id
                type: object
                description: Responds with the project ID on success.
        '400':
          description: |-
            One of the provided values in the request body is invalid.
            One of the provided values in the request query is invalid.
        '401':
          description: ''
        '403':
          description: You do not have permission to access this resource.
        '500':
          description: ''
      parameters:
        - name: idOrName
          description: The ID or name of the Project.
          in: path
          required: true
          schema:
            type: string
            description: The ID or name of the Project.
            example: prj_pavWOn1iLObbXLRiwVvzmPrTWyTf
        - description: The Team identifier or slug to perform the request on behalf of.
          in: query
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - role
              oneOf:
                - required:
                    - uid
                - required:
                    - username
                - required:
                    - email
              properties:
                uid:
                  type: string
                  maxLength: 256
                  example: ndlgr43fadlPyCtREAqxxdyFK
                  description: The ID of the team member that should be added to this project.
                username:
                  type: string
                  maxLength: 256
                  example: example
                  description: The username of the team member that should be added to this project.
                email:
                  type: string
                  format: email
                  example: entity@example.com
                  description: The email of the team member that should be added to this project.
                role:
                  type: string
                  enum:
                    - ADMIN
                    - PROJECT_DEVELOPER
                    - PROJECT_VIEWER
                  example: ADMIN
                  description: The project role of the member that will be added.
  '/v1/projects/{idOrName}/members/{uid}':
    delete:
      description: Remove a member from a specific project
      operationId: removeProjectMember
      security:
        - bearerToken: []
      summary: Remove a Project Member
      tags:
        - projectMembers
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                required:
                  - id
                type: object
        '400':
          description: One of the provided values in the request query is invalid.
        '401':
          description: ''
        '403':
          description: You do not have permission to access this resource.
      parameters:
        - name: idOrName
          description: The ID or name of the Project.
          in: path
          required: true
          schema:
            type: string
            description: The ID or name of the Project.
            example: prj_pavWOn1iLObbXLRiwVvzmPrTWyTf
        - name: uid
          description: The user ID of the member.
          in: path
          required: true
          schema:
            type: string
            description: The user ID of the member.
            example: ndlgr43fadlPyCtREAqxxdyFK
        - description: The Team identifier or slug to perform the request on behalf of.
          in: query
          name: teamId
          required: true
          schema:
            type: string
