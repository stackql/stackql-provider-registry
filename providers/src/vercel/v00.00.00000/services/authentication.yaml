openapi: 3.0.3
servers:
  - url: 'https://api.vercel.com'
    description: Production API
info:
  contact:
    email: support@vercel.com
    name: Vercel Support
    url: 'https://vercel.com/support'
  version: 0.0.1
  title: Vercel API - authentication
  description: authentication
components:
  schemas:
    AuthToken:
      properties:
        id:
          type: string
          description: The unique identifier of the token.
          example: 5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391
        name:
          type: string
          description: The human-readable name of the token.
        type:
          type: string
          description: The type of the token.
          example: oauth2-token
        origin:
          type: string
          description: The origin of how the token was created.
          example: github
        scopes:
          items:
            oneOf:
              - properties:
                  type:
                    type: string
                    enum:
                      - user
                  origin:
                    type: string
                    enum:
                      - saml
                      - github
                      - gitlab
                      - bitbucket
                      - email
                      - manual
                  createdAt:
                    type: number
                  expiresAt:
                    type: number
                required:
                  - type
                  - origin
                  - createdAt
                type: object
                description: The access scopes granted to the token.
              - properties:
                  type:
                    type: string
                    enum:
                      - team
                  teamId:
                    type: string
                  origin:
                    type: string
                    enum:
                      - saml
                      - github
                      - gitlab
                      - bitbucket
                      - email
                      - manual
                  createdAt:
                    type: number
                  expiresAt:
                    type: number
                required:
                  - type
                  - teamId
                  - origin
                  - createdAt
                type: object
                description: The access scopes granted to the token.
          type: array
          description: The access scopes granted to the token.
        expiresAt:
          type: number
          description: Timestamp (in milliseconds) of when the token expires.
          example: 1632816536002
        activeAt:
          type: number
          description: Timestamp (in milliseconds) of when the token was most recently used.
          example: 1632816536002
        createdAt:
          type: number
          description: Timestamp (in milliseconds) of when the token was created.
          example: 1632816536002
      required:
        - id
        - name
        - type
        - activeAt
        - createdAt
      type: object
      description: Authentication token metadata.
    Pagination:
      properties:
        count:
          type: number
          description: Amount of items in the current page.
          example: 20
        next:
          nullable: true
          type: number
          description: Timestamp that must be used to request the next page.
          example: 1540095775951
        prev:
          nullable: true
          type: number
          description: Timestamp that must be used to request the previous page.
          example: 1540095775951
      required:
        - count
        - next
        - prev
      type: object
      description: 'This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.'
  responses: {}
  securitySchemes:
    bearerToken:
      type: http
      description: Default authentication mechanism
      scheme: bearer
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://api.vercel.com/oauth/authorize'
          tokenUrl: 'https://api.vercel.com/oauth/access_token'
          scopes: {}
  x-stackQL-resources:
    user_tokens:
      id: vercel.authentication.user_tokens
      name: user_tokens
      title: User Tokens
      methods:
        list_auth_tokens:
          operation:
            $ref: '#/paths/~1v5~1user~1tokens/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.tokens
        _list_auth_tokens:
          operation:
            $ref: '#/paths/~1v5~1user~1tokens/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_auth_token:
          operation:
            $ref: '#/paths/~1v3~1user~1tokens/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_auth_token:
          operation:
            $ref: '#/paths/~1v5~1user~1tokens~1{tokenId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_auth_token:
          operation:
            $ref: '#/paths/~1v3~1user~1tokens~1{tokenId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        verify_token:
          operation:
            $ref: '#/paths/~1registration~1verify/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        email_login:
          operation:
            $ref: '#/paths/~1registration/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/user_tokens/methods/get_auth_token'
          - $ref: '#/components/x-stackQL-resources/user_tokens/methods/list_auth_tokens'
        insert:
          - $ref: '#/components/x-stackQL-resources/user_tokens/methods/create_auth_token'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/user_tokens/methods/delete_auth_token'
paths:
  /v5/user/tokens:
    get:
      description: Retrieve a list of the current User's authentication tokens.
      operationId: listAuthTokens
      security:
        - bearerToken: []
      summary: List Auth Tokens
      tags:
        - authentication
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  tokens:
                    items:
                      $ref: '#/components/schemas/AuthToken'
                    type: array
                  testingToken:
                    $ref: '#/components/schemas/AuthToken'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - tokens
                  - pagination
                type: object
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: You do not have permission to access this resource.
      parameters: []
  /v3/user/tokens:
    post:
      description: 'Creates and returns a new authentication token for the currently authenticated User. The `bearerToken` property is only provided once, in the response body, so be sure to save it on the client for use with API requests.'
      operationId: createAuthToken
      security:
        - bearerToken: []
      summary: Create an Auth Token
      tags:
        - authentication
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                properties:
                  token:
                    $ref: '#/components/schemas/AuthToken'
                  bearerToken:
                    type: string
                    description: 'The authentication token''s actual value. This token is only provided in this response, and can never be retrieved again in the future. Be sure to save it somewhere safe!'
                    example: uRKJSTt0L4RaSkiMj41QTkxM
                required:
                  - token
                  - bearerToken
                type: object
                description: Successful response.
        '400':
          description: One of the provided values in the request body is invalid.
        '401':
          description: ''
        '403':
          description: You do not have permission to access this resource.
        '404':
          description: ''
      parameters:
        - description: The Team identifier or slug to perform the request on behalf of.
          in: query
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  additionalProperties: false
                  required:
                    - name
                  properties:
                    name:
                      type: string
                    expiresAt:
                      type: number
                - type: object
                  additionalProperties: false
                  required:
                    - type
                    - name
                  properties:
                    type:
                      enum:
                        - oauth2-token
                    name:
                      type: string
                    clientId:
                      type: string
                    installationId:
                      type: string
                    expiresAt:
                      type: number
  '/v5/user/tokens/{tokenId}':
    get:
      description: Retrieve metadata about an authentication token belonging to the currently authenticated User.
      operationId: getAuthToken
      security:
        - bearerToken: []
      summary: Get Auth Token Metadata
      tags:
        - authentication
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                properties:
                  token:
                    $ref: '#/components/schemas/AuthToken'
                required:
                  - token
                type: object
                description: Successful response.
        '400':
          description: One of the provided values in the request query is invalid.
        '403':
          description: You do not have permission to access this resource.
        '404':
          description: Token not found with the requested `tokenId`.
      parameters:
        - name: tokenId
          description: 'The identifier of the token to retrieve. The special value \"current\" may be supplied, which returns the metadata for the token that the current HTTP request is authenticated with.'
          in: path
          required: true
          schema:
            type: string
            description: 'The identifier of the token to retrieve. The special value \"current\" may be supplied, which returns the metadata for the token that the current HTTP request is authenticated with.'
            example: 5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391
  '/v3/user/tokens/{tokenId}':
    delete:
      description: 'Invalidate an authentication token, such that it will no longer be valid for future HTTP requests.'
      operationId: deleteAuthToken
      security:
        - bearerToken: []
      summary: Delete an authentication token
      tags:
        - authentication
      responses:
        '200':
          description: Authentication token successfully deleted.
          content:
            application/json:
              schema:
                properties:
                  tokenId:
                    type: string
                    description: The unique identifier of the token that was deleted.
                    example: 5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391
                required:
                  - tokenId
                type: object
                description: Authentication token successfully deleted.
        '400':
          description: One of the provided values in the request query is invalid.
        '401':
          description: ''
        '403':
          description: You do not have permission to access this resource.
        '404':
          description: Token not found with the requested `tokenId`.
      parameters:
        - name: tokenId
          description: 'The identifier of the token to invalidate. The special value \"current\" may be supplied, which invalidates the token that the HTTP request was authenticated with.'
          in: path
          required: true
          schema:
            type: string
            description: 'The identifier of the token to invalidate. The special value \"current\" may be supplied, which invalidates the token that the HTTP request was authenticated with.'
            example: 5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391
  /registration/verify:
    get:
      description: Verify the user accepted the login request and get a authentication token. The user email address and the token received after requesting the login must be added to the URL as a query string with the names `email` and `token`.
      operationId: verifyToken
      security: []
      summary: Verify a login request to get an authentication token
      tags:
        - authentication
      responses:
        '200':
          description: The verification was successful.
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    description: The user authentication token that can be used to perform API requests.
                    example: 1ioXyz9Ue4xdCYGROet1dlKd
                  email:
                    type: string
                    description: Email address of the authenticated user.
                    example: amy@example.com
                  teamId:
                    type: string
                    description: 'When completing SAML Single Sign-On authentication, this will be the ID of the Team that was authenticated for.'
                    example: team_LLHUOMOoDlqOp8wPE4kFo9pE
                required:
                  - token
                  - email
                type: object
        '400':
          description: |-
            One of the provided values in the request query is invalid.
            The slug is already in use
            The provided token exists but is not yet confirmed
        '403':
          description: |-
            You do not have permission to access this resource.
            The verification sso token is invalid or not found
            The verification token is invalid or not found
        '404':
          description: ''
      parameters:
        - name: email
          description: Email to verify the login.
          in: query
          required: false
          schema:
            type: string
            description: Email to verify the login.
        - name: token
          description: The token returned when the login was requested.
          in: query
          required: true
          schema:
            type: string
            description: The token returned when the login was requested.
        - name: tokenName
          description: The desired name for the token. It will be displayed on the user account details.
          in: query
          required: false
          schema:
            type: string
            example: Your Client App Name
            description: The desired name for the token. It will be displayed on the user account details.
        - name: ssoUserId
          description: 'The SAML Profile ID, when connecting a SAML Profile to a Team member for the first time.'
          in: query
          required: false
          schema:
            type: string
            description: 'The SAML Profile ID, when connecting a SAML Profile to a Team member for the first time.'
        - name: teamName
          description: The name of this user's team.
          in: query
          required: false
          schema:
            type: string
            description: The name of this user's team.
        - name: teamSlug
          description: The slug for this user's team.
          in: query
          required: false
          schema:
            type: string
            description: The slug for this user's team.
        - name: teamPlan
          description: The plan for this user's team (pro or hobby).
          in: query
          required: false
          schema:
            type: string
            enum:
              - pro
              - hobby
            description: The plan for this user's team (pro or hobby).
  /registration:
    post:
      description: Request a new login for a user to get a token. This will respond with a verification token and send an email to confirm the request. Once confirmed you can use the verification token to get an authentication token.
      operationId: emailLogin
      security: []
      summary: Login with email
      tags:
        - authentication
      responses:
        '200':
          description: The request was successful and an email was sent
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    description: The token used to verify the user accepted the login request
                    example: T1dmvPu36nmyYisXAs7IRzcR
                  securityCode:
                    type: string
                    description: The code the user is going to receive on the email. **Must** be displayed to the user so they can verify the request is the correct.
                    example: Practical Saola
                required:
                  - token
                  - securityCode
                type: object
        '400':
          description: |-
            One of the provided values in the request body is invalid.
            The provided email is invalid because the owner is blocked
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  example: user@mail.com
                  description: The user email.
                  type: string
                tokenName:
                  example: Your Client App Name
                  description: The desired name for the token. It will be displayed on the user account details.
                  type: string
              required:
                - email
              type: object
