paths:
  /v1/plan/pendingUpdateRequest:
    get:
      tags:
        - accountManagement
      summary: Get the pending plan update request, if any.
      description: Get the pending plan update request which will be applicable from next billing cycle.
      operationId: getPendingUpdateRequest
      responses:
        '200':
          description: Pending plan update request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingUpdateRequest'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - accountManagement
      summary: Delete the pending plan update request, if any.
      description: Delete the pending plan update request which would be applicable from next billing cycle.
      operationId: deletePendingUpdateRequest
      responses:
        '204':
          description: Deleted the pending update request.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    PendingUpdateRequest:
      required:
        - createdOn
        - plan
      type: object
      properties:
        createdOn:
          type: string
          description: The date on which the update request was created.
          format: date
        plan:
          $ref: '#/components/schemas/CurrentPlan'
      description: The pending plan update request for the account
    ErrorResponse:
      required:
        - errors
        - id
      type: object
      properties:
        id:
          type: string
          description: An identifier for the error; this is unique to the specific API request.
          example: IUUQI-DGH5I-TJ045
        errors:
          type: array
          description: A list of one or more causes of the error.
          example:
            - code: auth:password_too_short
              message: Your password was too short.
            - code: auth:password_character_classes
              message: Your password did not contain any non-alphanumeric characters
          items:
            $ref: '#/components/schemas/ErrorDescription'
    CurrentPlan:
      required:
        - billingFrequency
        - planCost
        - productId
      type: object
      properties:
        productId:
          pattern: ^(Essentials|Trial|Free|EnterpriseOps|EnterpriseSec|EnterpriseSuite)$
          type: string
          description: |
            Unique identifier of the product in current plan. Valid values are: 1. `Free` 2. `Trial` 3. `Essentials` 4. `EnterpriseOps` 5. `EnterpriseSec` 6. `EnterpriseSuite`
          example: Essentials
          x-pattern-message: 'must be one of the following: `Essentials`, `Trial`, `Free`, `EnterpriseOps`, `EnterpriseSec`, `EnterpriseSuite`'
        planCost:
          type: number
          description: Cost incurred for the current plan.
          format: double
          example: 725.46
        billingFrequency:
          pattern: ^(Monthly|Annually)$
          type: string
          description: |
            Billing frequency for the current plan. Valid values are: 1. `Monthly` 2. `Annually`
          example: Monthly
          x-pattern-message: 'must be one of the following: `Monthly` or `Annually`'
        consumables:
          type: array
          description: Consumables in the current plan.
          items:
            $ref: '#/components/schemas/Consumable'
        planType:
          pattern: ^(Free|Trial|Paid)$
          type: string
          description: Whether the account is `Free`/`Trial`/`Paid`
          example: Free
          x-pattern-message: 'must be one of the following: `Free`, `Trial` or `Paid`'
        planName:
          type: string
          description: The plan name for the product being used.
        discountAmount:
          type: integer
          description: The discount offered for the given contract period.
        contractPeriod:
          $ref: '#/components/schemas/ContractPeriod'
        currentBillingPeriod:
          $ref: '#/components/schemas/CurrentBillingPeriod'
        credits:
          type: integer
          description: Numerical value of the amount of credits
          format: int64
          example: 300
        baselines:
          $ref: '#/components/schemas/Baselines'
        pendingUpdateRequest:
          type: boolean
          description: True if there is a pending update request
        prorationDetails:
          $ref: '#/components/schemas/ProrationDetails'
      description: Current plan of the account.
    ErrorDescription:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: An error code describing the type of error.
          example: auth:password_too_short
        message:
          type: string
          description: A short English-language description of the error.
          example: Your password was too short.
        detail:
          type: string
          description: An optional fuller English-language description of the error.
          example: Your password was 5 characters long, the minimum length is 12 characters. See http://example.com/password for more information.
        meta:
          type: object
          description: An optional list of metadata about the error.
          example:
            minLength: 12
            actualLength: 5
    Consumable:
      required:
        - consumableId
        - quantity
      type: object
      properties:
        consumableId:
          pattern: ^(Storage|Metrics|Continuous|Credits)$
          type: string
          description: |
            Unique identifier of the consumable. Valid values are: 1. `Storage` 2. `Metrics` 3. `Continuous` 4. `Credits`
          example: Metrics
          x-pattern-message: 'must be one of the following: `Storage`, `Metrics`, `Continuous`, `Credits`'
        quantity:
          $ref: '#/components/schemas/Quantity'
      description: Details of consumable and its quantity.
    ContractPeriod:
      required:
        - endDate
        - startDate
      type: object
      properties:
        startDate:
          type: string
          description: Start date of the contract.
          format: date
        endDate:
          type: string
          description: End date of the contract.
          format: date
    CurrentBillingPeriod:
      required:
        - endDate
        - startDate
      type: object
      properties:
        startDate:
          type: string
          description: Start date of the current billing period.
          format: date
          example: '2012-02-02'
        endDate:
          type: string
          description: End date of the current billing period.
          format: date
          example: '2012-02-02'
    Baselines:
      type: object
      properties:
        continuousIngest:
          maximum: 1000000
          minimum: 0
          type: integer
          description: The amount of continuous logs ingest to allocate to the organization, in GBs.
          format: int64
          example: 50000
          default: 0
        continuousStorage:
          maximum: 30
          minimum: 30
          type: integer
          description: Number of days of continuous logs storage to allocate to the organization, in Days.
          format: int64
          example: 30
          default: 30
        frequentIngest:
          maximum: 1000000
          minimum: 0
          type: integer
          description: The amount of frequent logs ingest to allocate to the organization, in GBs.
          format: int64
          example: 50000
          default: 0
        frequentStorage:
          maximum: 30
          minimum: 30
          type: integer
          description: Number of days of frequent logs storage to allocate to the organization, in Days.
          format: int64
          example: 30
          default: 30
        infrequentIngest:
          maximum: 1000000
          minimum: 0
          type: integer
          description: The amount of infrequent logs ingest to allocate to the organization, in GBs.
          format: int64
          example: 50000
          default: 0
        infrequentStorage:
          maximum: 30
          minimum: 30
          type: integer
          description: The amount of infrequent logs storage to allocate to the organization, in Days.
          format: int64
          example: 30
          default: 30
        infrequentScan:
          maximum: 1000000
          minimum: 0
          type: integer
          description: The amount of infrequent logs scan to allocate to the organization, in GBs.
          format: int64
          example: 50000
          default: 0
        metrics:
          maximum: 5000000
          minimum: 0
          type: integer
          description: The amount of Metrics usage to allocate to the organization, in DPMs (Data Points per Minute).
          format: int64
          example: 50000
          default: 0
        cseIngest:
          maximum: 1000000
          minimum: 0
          type: integer
          description: The amount of CSE ingest to allocate to the organization, in GBs.
          format: int64
          example: 50000
          default: 0
        cseStorage:
          maximum: 1000000
          minimum: 0
          type: integer
          description: The amount of CSE storage to allocate to the organization, in GBs.
          format: int64
          example: 50000
          default: 0
        tracingIngest:
          maximum: 1000000
          minimum: 0
          type: integer
          description: The amount of tracing data ingest to allocate to the organization, in GBs.
          format: int64
          example: 50000
          default: 0
      description: Details of consumable and its quantity.
    ProrationDetails:
      required:
        - proratedCost
        - proratedCredits
        - remainingDays
      type: object
      properties:
        remainingDays:
          type: integer
          description: Remaining days in the billing cycle for which the new plan is prorated.
          format: int32
        proratedCredits:
          type: integer
          description: Total prorated credits that get added to the bucket based on the remaining billing period.
          format: int32
        proratedCost:
          type: number
          description: Cost of the total prorated credits.
          format: double
      description: Details about the prorated credits and prorated cost in case of immediate monthly to monthly cycle upgrades.
    Quantity:
      required:
        - unit
        - value
      type: object
      properties:
        value:
          type: integer
          description: The value of the consumable in units.
          format: int64
          example: 61425
        unit:
          pattern: ^(GB|DPM|Credits|Days)$
          type: string
          description: |
            The unit of the consumable. Units are provided in: 1. `GB` 2. `DPM`(Data Points Per Minute) 3. `Credits` 4. `Days`
          example: GB
          x-pattern-message: 'must be one of the following: `GB`, `DPM`, `Credits`, `Days`'
      description: Details of unit of consumption and its value.
  parameters: {}
  responses: {}
  securitySchemes: {}
  callbacks: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  x-stackQL-resources:
    pending_update_request:
      id: sumologic.plan.pending_update_request
      name: pending_update_request
      title: Pending_update_request
      methods:
        getPendingUpdateRequest:
          operation:
            $ref: '#/paths/~1v1~1plan~1pendingUpdateRequest/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deletePendingUpdateRequest:
          operation:
            $ref: '#/paths/~1v1~1plan~1pendingUpdateRequest/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/pending_update_request/methods/getPendingUpdateRequest'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/pending_update_request/methods/deletePendingUpdateRequest'
openapi: 3.0.0
servers:
  - url: https://api.{region}.sumologic.com/api
    variables:
      region:
        description: SumoLogic region
        enum:
          - us2
          - au
          - ca
          - de
          - eu
          - fed
          - in
          - jp
        default: us2
    description: The SumoLogic regional endpoint
security:
  - basicAuth: []
tags:
  - name: accountManagement
    description: |
      Account Management API.

      Manage the custom subdomain for the URL used to access your Sumo Logic account. For more information see [Manage Organization](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization).
    x-displayName: Account
  - name: appManagement
    description: |
      App installation API.

      View and install Sumo Logic Applications that deliver out-of-the-box dashboards, saved searches, and field extraction for popular data sources. For more information see [Sumo Logic Apps](https://help.sumologic.com/07Sumo-Logic-Apps).
    x-displayName: Apps (Beta)
  - name: connectionManagement
    description: |
      Connection management API.

      Set up connections to send alerts to other tools. For more information see [Connections and Integrations](https://help.sumologic.com/?cid=1044).
    x-displayName: Connections
  - name: contentManagement
    description: |
      Content management API.

      You can export, import, delete and copy content in your organization’s Library. For more information see [Library](https://help.sumologic.com/?cid=5173). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
      <br/> <br/>
      ### Example
      The following example uses API endpoints in the US1 deployment. Sumo Logic has several deployments that are assigned depending on the geographic location and the date an account is created. For details determining your account's deployment see [API endpoints](https://help.sumologic.com/?cid=3011).
      The [Content Import API](#operation/beginAsyncImport) can be used to create or update a Search, Scheduled Search, or Dashboard. Here is an example creating a Scheduled Search:
      1. Get the identifier of your `Personal` folder.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/personal
        ```

        Find the identifier of your `Personal` folder in the response.
        ```json
        {
            ...
            "id": "0000000006A2E86F", <----
            "name": "Personal",
            "itemType": "Folder",
            ...
        }
        ```

        You can use [getFolder](#operation/getFolder), [getAdminRecommededFolder](#operation/getAdminRecommendedFolderAsync),
        or [getGlobalFolder](#operation/getGlobalFolderAsync) endpoints to traverse the content tree and find the identifier of any
        folder you want to manage.

      2. Use the [Content Import API](#operation/beginAsyncImport) to create a new Scheduled Search inside your
        `Personal` folder.
        ```bash
        curl -X POST -u "<accessId>:<accessKey>" -H "Content-Type: application/json" -d @search.json https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import
        ```

        The data file `search.json` in the above command has the following `SavedSearchWithScheduleSyncDefinition` object.
        ```json
        // file: search.json
        {
            "type": "SavedSearchWithScheduleSyncDefinition",
            "name": "demo-scheduled-search",
            "description": "Runs every hour with timerange of 15m and sends email notifications",
            "search": {
                "queryText": "\"error\" and \"warn\"",
                "defaultTimeRange": "-15m",
                "byReceiptTime": false,
                "viewName": "",
                "viewStartTime": null,
                "queryParameters": []
            },
            "searchSchedule": {
                "cronExpression": "0 0/15 * * * ? *",
                "displayableTimeRange": "-15m",
                "parseableTimeRange": {
                    "from": {
                        "relativeTime": "-15m",
                        "type": "RelativeTimeRangeBoundary"
                    },
                    "to": null,
                    "type": "BeginBoundedTimeRange"
                },
                "timeZone": "America/Los_Angeles",
                "threshold": null,
                "notification": {
                    "taskType": "EmailSearchNotificationSyncDefinition",
                    "toList": [
                        "ops@acme.org"
                    ],
                    "subjectTemplate": "Search Results: {{SearchName}}",
                    "includeQuery": true,
                    "includeResultSet": true,
                    "includeHistogram": true,
                    "includeCsvAttachment": false
                },
                "muteErrorEmails": false,
                "scheduleType": "1Hour",
                "parameters": []
            }
        }
        ```

        The response of above request will have the job identifier that you can use to track the status of the import job.
        ```json
        {
            "id": "74DC17FA765C7443"
        }
        ```

      3. Use the job identifier from the import request to get the [status](#operation/getAsyncImportStatus) of the
        import job.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import/74DC17FA765C7443/status
        ```

        If you are importing a large item, you might have to wait for the import job to finish. The following is an
        example response from a completed job.
        ```json
        {
            "status": "Success",
            "statusMessage": null,
            "error": null
        }
        ```
    x-displayName: Content
  - name: contentPermissions
    description: |
      Content permissions API.

      You can share your folders, searches, and dashboards with specific users or roles. For more information see [Share Content](https://help.sumologic.com/?cid=8675309). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Permissions
  - name: dashboardManagement
    description: |
      Dashboard (New) management API.

      Dashboard (New) allows you to analyze metric and log data on the same dashboard, in a seamless view. This gives you control over the visual display of metric and log data. Dashboard (New) streamlines dashboard configurations and on-the-fly analytic visualizations with its new templating features. For more information see [Dashboard (New)](https://help.sumologic.com/?cid=5500).
    x-displayName: Dashboard (New)
  - name: dynamicParsingRuleManagement
    description: |
      Dynamic Parsing management API.

      Dynamic Parsing allows automatic field extraction from your log messages when you run a search.  This allows you to view fields from logs without having to manually specify parsing logic. For more information  see [Dynamic Parsing](https://help.sumologic.com/?cid=20011).
    x-displayName: Dynamic Parsing
  - name: extractionRuleManagement
    description: |
      Field Extraction Rule management API.

      Field Extraction Rules allow you to parse fields from your log messages at the time the messages are ingested eliminating the need to parse fields in your query. For more information see [Manage Field Extraction](https://help.sumologic.com/?cid=5313).
    x-displayName: Field Extraction Rules
  - name: fieldManagementV1
    description: |
      Field management API.

      Fields allow you to reference log data based on meaningful associations. They act as metadata tags that are assigned to your logs so you can search with them. Each field contains a key-value pair, where the field name is the key. Fields may be referred to as Log Metadata Fields. For more information see [Fields](https://help.sumologic.com/?cid=10116).
    x-displayName: Field Management
  - name: folderManagement
    description: |
      Folder management API.

      You can add folders and subfolders to the Library in order to organize your content for easy access or to share content. For more information see [Add Folders to the Library](https://help.sumologic.com/?cid=5020). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Folders
  - name: ingestBudgetManagementV1
    description: |
      Ingest Budget management API.

      Ingest Budgets allow you to control the capacity of daily ingestion volume sent to Sumo Logic from Collectors. For more information see [Ingest Budgets](https://help.sumologic.com/?cid=5235).
    x-displayName: Ingest Budgets
  - name: ingestBudgetManagementV2
    description: |
      Ingest Budget management API V2.

      Ingest Budgets V2 provide you the ability to create and assign budgets to your log data by Fields instead of using a Field Value. For more information see [Metadata Ingest Budgets](https://help.sumologic.com/?cid=52352).
    x-displayName: Ingest Budgets V2
  - name: partitionManagement
    description: |
      Partition management API.

      Creating a Partition allows you to improve search performance by searching over a smaller number of messages. For more information see [Manage Partitions](https://help.sumologic.com/?cid=5231).
    x-displayName: Partitions
  - name: logsDataForwardingManagement
    description: |
      Logs Data Forwarding management API.

      Logs Data Forwarding allows you to forward log data from a Partition or Scheduled View to an S3 bucket. For more information see [Forwarding Data to S3](https://help.sumologic.com/Manage/Data-Forwarding/Configure-Data-Forwarding-from-Sumo-Logic-to-S3).
    x-displayName: Logs Data Forwarding
  - name: roleManagement
    description: |
      Role management API.

      Roles determine the functions that users are able to perform in Sumo Logic. To manage roles, you must have an administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Roles](https://help.sumologic.com/?cid=5234).
    x-displayName: Roles
  - name: lookupManagement
    description: |
      Lookup Table management API.

      A Lookup Table is a table of data hosted on Sumo Logic that you can use to enrich the log and event data received by Sumo Logic. You must create a table schema before you can populate the table. For more information see [Lookup Tables](https://help.sumologic.com/?cid=10109).
    x-displayName: Lookup Tables
  - name: scheduledViewManagement
    description: |
      Scheduled View management API.

      Scheduled Views speed the search process for small and historical subsets of your data by functioning as a pre-aggregated index. For more information see [Manage Scheduled Views](https://help.sumologic.com/?cid=5128).
    x-displayName: Scheduled Views
  - name: tokensLibraryManagement
    description: |
      Tokens management API.

      Tokens are associated with your organization to authorize specific operations. Currently, we support collector registration tokens, which can be used to register Installed Collectors. Managing tokens requires the Manage Tokens role capability. For more information see [Installation Tokens](https://help.sumologic.com/?cid=0100).
    x-displayName: Tokens
  - name: transformationRuleManagement
    description: |
      Transformation Rule management API.
      Metrics Transformation Rules allow you control how long raw metrics are retained. You can also aggregate metrics at collection time and specify a separate retention period for the aggregated metrics. For more information see [Metrics Transformation Rules](https://help.sumologic.com/?cid=10117).
    x-displayName: Transformation Rules (Beta)
  - name: userManagement
    description: |
      User management API.

      To manage users, you must have the administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Users](https://help.sumologic.com/?cid=1006).
    x-displayName: Users
  - name: metricsSearchesManagement
    description: |
      Metrics Search management API.

      Save metrics searches in the content library and organize them in a folder hierarchy. Share useful queries with users in your organization. For more information see [Sharing Metric Charts](https://help.sumologic.com/Metrics/03-Metric-Charts/Share_a_Metric_Chart).
    x-displayName: Metrics Searches (Beta)
  - name: metricsQuery
    description: |
      Metrics Query API.

      The Metrics Query API allows you to execute queries on various metrics and retrieve multiple time-series (data-points) over time range(s). For more information see [Metrics - Classic](https://help.sumologic.com/?cid=1079).
    x-displayName: Metrics Query
  - name: accessKeyManagement
    description: |
      Access Key management API.

      Access Keys allow you to securely register new Collectors and access Sumo Logic APIs. For more information see [Access Keys](https://help.sumologic.com/?cid=6690).
    x-displayName: Access Keys
  - name: samlConfigurationManagement
    description: |
      SAML configuration management API

      Organizations with Enterprise accounts can provision Security Assertion Markup Language (SAML) 2.0 to enable Single Sign-On (SSO) for user access to Sumo Logic. For more information see [SAML Configuration](https://help.sumologic.com/?cid=4016).
    x-displayName: SAML Configuration
  - name: serviceAllowlistManagement
    description: |
      Service Allowlist management API

      Service Allowlist Settings allow you to explicitly grant access to specific IP addresses and/or CIDR notations for logins, APIs, and dashboard access. For more information see [Service Allowlist Settings](https://help.sumologic.com/?cid=5454).
    x-displayName: Service Allowlist
  - name: healthEvents
    description: |
      Health Events management API.

      Health Events allow you to keep track of the health of your Collectors and Sources. You can use them to find and investigate common errors and warnings that are known to cause collection issues. For more information see [Health Events](https://help.sumologic.com/?cid=0020).
    x-displayName: Health Events
  - name: archiveManagement
    description: |-
      Archive Ingestion Management API.

      Archive Ingestion allows you to ingest data from Archive destinations. You can use this API to ingest data from your Archive with an existing AWS S3 Archive Source. You need the Manage or View Collectors role capability to manage or view ingestion jobs. For more information see [Archive](https://help.sumologic.com/?cid=10011).
    x-displayName: Archive Ingestion Management
  - name: logSearchesEstimatedUsage
    description: |
      Log Search Estimated Usage API.

      Gets the estimated volume of data that would be scanned for a given log search in the Infrequent data tier, over a particular time range. In the Infrequent Data Tier, you pay per query, based on the amount data scanned. You can use this endpoint to get an estimate of the total data that would be scanned before running a query, and refine your query to scan less data, as necessary. For more information see [Infrequent data tier](https://help.sumologic.com/?cid=11987).
    x-displayName: Log Search Estimated Usage
  - name: passwordPolicy
    description: |
      Password Policy Management API

      The password policy controls how user passwords are managed. The "Manage Password Policy" role capability is required to update the password policy. For more information see [how to set a password policy](https://help.sumologic.com/?cid=8595).
    x-displayName: Password Policy
  - name: policiesManagement
    description: |
      Policies management API.

      Policies control the security and share settings of your organization. For more information see [Security](https://help.sumologic.com/?cid=4041).
    x-displayName: Policies
  - name: traces
    description: |
      Traces API

      The Traces API allows you to browse traces collected in the system. You can execute queries to find traces matching provided search criteria as well as gather detailed information about individual traces and spans. For more information see [View and investigate traces](https://help.sumologic.com/Traces/View_and_investigate_traces).
    x-displayName: Traces
  - name: spanAnalytics
    description: |
      Span Analytics API

      The Span Analytics API allows you to browse spans collected in the system. You can execute queries to find individual spans matching provided search criteria as well as run aggregated span queries and retrieve their results. For more information see [Spans](https://help.sumologic.com/Traces/Spans).
    x-displayName: Span Analytics
  - name: serviceMap
    description: |
      Service Map API

      The Service Map API allows you to fetch a graph representation of the Service Map, which is a high-level view of your application environment, automatically derived from tracing data. For more information see [Service Map](https://help.sumologic.com/Traces/Service_Map_and_Dashboards#service-map).
    x-displayName: Service Map
  - name: slosLibraryManagement
    description: |
      SLO Management API.

      SLOs are used to monitor and alert on KPIs for your most important services or user experience.
    x-displayName: SLOs
  - name: monitorsLibraryManagement
    description: |
      Monitor Management API.


      Monitors continuously query your data to monitor and send notifications when specific events occur.
      For more information see [Monitors](https://help.sumologic.com/?cid=10020).
    x-displayName: Monitors
info:
  title: Sumo Logic API - plan
  description: plan
  version: 1.0.0
  x-logo:
    url: ./sumologic_logo.png
