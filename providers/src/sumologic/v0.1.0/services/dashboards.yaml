paths:
  /v2/dashboards:
    get:
      tags:
        - dashboardManagement
      summary: List all dashboards.
      description: List all dashboards under the Personal folder created by the user or under folders viewable by user.
      operationId: listDashboards
      parameters:
        - name: limit
          in: query
          description: Limit the number of dashboard returned in the response. The number of dashboards returned may be less than the `limit`.
          required: false
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 50
          example: 50
        - name: token
          in: query
          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.
          required: false
          schema:
            type: string
          example: GDCiRv4vebF3UWFJQ1kySXBOR3Bzh69GR0RyWm9vCtc
        - name: mode
          in: query
          description: whether to list all viewable dashboards under the folders
          required: false
          schema:
            pattern: ^(createdByUser|allViewableByUser)$
            type: string
            example: createdByUser
            x-pattern-message: Must be `createdByUser` or `allViewableByUser`
          example: createdByUser
      responses:
        '200':
          description: Paginated list of dashboards under the Personal folder created by the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDashboards'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - dashboardManagement
      summary: Create a new dashboard.
      description: Creates a new dashboard.
      operationId: createDashboard
      requestBody:
        description: Information to create the new dashboard.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardRequest'
        required: true
      responses:
        '200':
          description: The dashboard has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/dashboards/{id}:
    get:
      tags:
        - dashboardManagement
      summary: Get a dashboard.
      description: Get a dashboard by the given identifier.
      operationId: getDashboard
      parameters:
        - name: id
          in: path
          description: UUID of the dashboard to return.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Dashboard object that was requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - dashboardManagement
      summary: Update a dashboard.
      description: Update a dashboard by the given identifier.
      operationId: updateDashboard
      parameters:
        - name: id
          in: path
          description: Identifier of the dashboard to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Information to update on the dashboard.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardRequest'
        required: true
      responses:
        '200':
          description: The dashboard was successfully modified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - dashboardManagement
      summary: Delete a dashboard.
      description: Delete a dashboard by the given identifier.
      operationId: deleteDashboard
      parameters:
        - name: id
          in: path
          description: Identifier of the dashboard to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Dashboard was deleted successfully.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/dashboards/reportJobs:
    post:
      tags:
        - dashboardManagement
      summary: Start a report job
      description: |
        Schedule an asynchronous job to generate a report from a template. All items in the template will be included unless specified. See template section for more details on individual templates. Reports can be generated in Pdf or Png format and exported in various methods (ex. direct download). You will get back an asynchronous job identifier on success. Use the [getAsyncReportGenerationStatus](#operation/getAsyncExportStatus) endpoint and the job identifier you got back in the response to track the status of an asynchronous report generation job.
      operationId: generateDashboardReport
      requestBody:
        description: Request for a report.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateReportRequest'
        required: true
      responses:
        '200':
          description: Export job has been scheduled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginAsyncJobResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/dashboards/reportJobs/{jobId}/status:
    get:
      tags:
        - dashboardManagement
      summary: Get report generation job status
      description: Get the status of an asynchronous report generation request for the given job identifier. On success, use the [getReportGenerationResult](#operation/getAsyncReportGenerationResult) endpoint to get the result of the report generation job.
      operationId: getAsyncReportGenerationStatus
      parameters:
        - name: jobId
          in: path
          description: The identifier of the asynchronous report generation job.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The status of the report generation job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatus'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/dashboards/reportJobs/{jobId}/result:
    get:
      tags:
        - dashboardManagement
      summary: Get report generation job result
      description: Get the result of an asynchronous report generation request for the given job identifier.
      operationId: getAsyncReportGenerationResult
      parameters:
        - name: jobId
          in: path
          description: The identifier of the asynchronous report generation job.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The result of export job.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    PaginatedDashboards:
      required:
        - dashboards
      type: object
      properties:
        dashboards:
          type: array
          description: List of dashboards.
          items:
            $ref: '#/components/schemas/Dashboard'
        next:
          type: string
          description: Next continuation token. `token` is set to null when no more pages are left.
          example: GDCiRv4vebF3UWFJQ1kySXBOR3Bzh69GR0RyWm9vCtc
    ErrorResponse:
      required:
        - errors
        - id
      type: object
      properties:
        id:
          type: string
          description: An identifier for the error; this is unique to the specific API request.
          example: IUUQI-DGH5I-TJ045
        errors:
          type: array
          description: A list of one or more causes of the error.
          example:
            - code: auth:password_too_short
              message: Your password was too short.
            - code: auth:password_character_classes
              message: Your password did not contain any non-alphanumeric characters
          items:
            $ref: '#/components/schemas/ErrorDescription'
    Dashboard:
      allOf:
        - $ref: '#/components/schemas/DashboardRequest'
        - type: object
          properties:
            id:
              type: string
              description: |
                Unique identifier for the dashboard. This id is used to get detailed information about the dashboard, such as panels, variables and the layout.
              example: B23OjNs5ZCyn5VdMwOBoLo3PjgRnJSAlNTKEDAcpuDG2CIgRe9KFXMofm2H2
            contentId:
              type: string
              description: |
                Content identifier for the dashboard. This id is used to connect to the Sumo Content Library and get general metadata about the dashboard. Use this id if you want to search for dashboards in Sumo folders.
              example: '1'
            scheduleId:
              type: string
              description: |
                Scheduled report identifier for the dashboard. Only most recently modified report schedule is rerun per dashboard. This id is used to manage the schedule details through the scheduled report API.
              example: RdQHYPh2jxoS90DXtKfA7nAJV2rsQ9BncpfY7IkjNzQWi52ug85W7r6Rrmtd
    ErrorDescription:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: An error code describing the type of error.
          example: auth:password_too_short
        message:
          type: string
          description: A short English-language description of the error.
          example: Your password was too short.
        detail:
          type: string
          description: An optional fuller English-language description of the error.
          example: Your password was 5 characters long, the minimum length is 12 characters. See http://example.com/password for more information.
        meta:
          type: object
          description: An optional list of metadata about the error.
          example:
            minLength: 12
            actualLength: 5
    DashboardRequest:
      required:
        - timeRange
        - title
      type: object
      properties:
        title:
          maxLength: 255
          minLength: 1
          type: string
          description: Title of the dashboard.
          example: Kubernetes Dashboard
        description:
          type: string
          description: Description of the dashboard.
          example: A view of pods, namespaces and nodes of your cluster.
        folderId:
          type: string
          description: |
            The identifier of the folder to save the dashboard in. By default it is saved in your personal folder.
          example: 000000000C1C17C6
        topologyLabelMap:
          $ref: '#/components/schemas/TopologyLabelMap'
        domain:
          type: string
          description: If set denotes that the dashboard concerns a given domain (e.g. `aws`, `k8s`, `app`).
          example: aws
          default: ''
        hierarchies:
          maxItems: 20
          type: array
          description: If set to non-empty array denotes that the dashboard concerns given hierarchies.
          example:
            - Kubernetes Node View
          items:
            type: string
          default: []
        refreshInterval:
          type: integer
          description: |
            Interval of time (in seconds) to automatically refresh the dashboard. A value of 0 means we never automatically refresh the dashboard. Allowed values are `0`, `30`, `60`, 120`, `300`, `900`, `3600`, `86400`.
          format: int32
          example: 30
        timeRange:
          $ref: '#/components/schemas/ResolvableTimeRange'
        panels:
          type: array
          description: Panels in the dashboard.
          items:
            $ref: '#/components/schemas/Panel'
        layout:
          $ref: '#/components/schemas/Layout'
        variables:
          type: array
          description: Variables to apply to the panels.
          items:
            $ref: '#/components/schemas/Variable'
        theme:
          pattern: ^(light|dark|Light|Dark)$
          type: string
          description: Theme for the dashboard. Either `Light` or `Dark`.
          example: light
          default: Light
          x-pattern-message: Must be `Light`, or `Dark`
    TopologyLabelMap:
      required:
        - data
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TopologyLabelValuesList'
          description: Map from topology labels to `TopologyLabelValuesList`.
      description: |
        Map of the topology labels. Each label has a key and a list of values. If a value is `*`, it means the label will match content for all values of its key.
      example:
        data:
          service:
            - kube-scheduler
            - kube-dns
    ResolvableTimeRange:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: Type of the time range. Value must be either `CompleteLiteralTimeRange` or `BeginBoundedTimeRange`.
      example:
        type: BeginBoundedTimeRange
        from:
          type: RelativeTimeRangeBoundary
          relativeTime: '-15m'
      discriminator:
        propertyName: type
    Panel:
      required:
        - key
        - panelType
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the panel.
          example: 2F7D449E3D511066
        key:
          type: string
          description: |
            Key for the panel. Used to create searches for the queries in the panel and configure the layout of the panel in the dashboard.
          example: panelca6280e4a75fca45
        title:
          type: string
          description: Title of the panel.
          example: This panel shows memory usage for your kubernetes pod.
        visualSettings:
          type: string
          description: Visual settings of the panel.
          example: '{\"general\":{\"type\":\"column\"}'
        keepVisualSettingsConsistentWithParent:
          type: boolean
          description: Keeps the visual settings, like series colors, consistent with the settings of the parent panel.
          default: true
        panelType:
          type: string
          description: Type of panel.
          example: SumoSearchPanel
      discriminator:
        propertyName: panelType
    Layout:
      required:
        - layoutStructures
        - layoutType
      type: object
      properties:
        layoutType:
          type: string
          description: The type of panel layout on the Dashboard. For example, Grid, Tabs, or Hierarchical. Currently supports `Grid` only.
          example: Grid
        layoutStructures:
          type: array
          description: Layout structures for the panel childen.
          items:
            $ref: '#/components/schemas/LayoutStructure'
      discriminator:
        propertyName: layoutType
    Variable:
      required:
        - name
        - sourceDefinition
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the variable.
        name:
          maxLength: 256
          type: string
          description: Name of the variable. The variable name is case-insensitive.
          example: _sourceHost
        displayName:
          maxLength: 256
          type: string
          description: |
            Display name of the variable shown in the UI. If this field is empty, the name field will be used.
            The display name is case-insensitive. Only numbers, and underscores are allowed in the variable name.
            This field is not yet supported by the UI.
          example: Source Host
        defaultValue:
          type: string
          description: Default value of the variable.
          example: default_value
        sourceDefinition:
          $ref: '#/components/schemas/VariableSourceDefinition'
        allowMultiSelect:
          type: boolean
          description: Allow multiple selections in the values dropdown.
          example: false
          default: false
        includeAllOption:
          type: boolean
          description: Include an "All" option at the top of the variable's values dropdown.
          example: true
          default: true
        hideFromUI:
          type: boolean
          description: Hide the variable in the dashboard UI.
          example: false
          default: false
        valueType:
          pattern: ^(String|Any)$
          type: string
          description: The type of value of the variable. Allowed values are `String` and Any`. `String` considers as a single phrase and will wrap in double-quotes, `Any` is all characters.
          example: Any
          default: Any
          x-pattern-message: Only `String` and `Any` are allowed.
    TopologyLabelValuesList:
      type: array
      description: List of values corresponding to a key of a label.
      example: kube-scheduler
      items:
        type: string
        description: Value of the label.
      default: []
    LayoutStructure:
      required:
        - key
        - structure
      type: object
      properties:
        key:
          type: string
          description: The identifier of the panel that this structure applies to.
          example: panelPANE-3DC454FD977E2A46
        structure:
          type: string
          description: The structure of a panel.
          example: '{\"height\":5,\"width\":9,\"x\":0,\"y\":0}'
    VariableSourceDefinition:
      required:
        - variableSourceType
      type: object
      properties:
        variableSourceType:
          type: string
          description: Source type of the variable values.
          example: MetadataVariableSourceDefinition
      discriminator:
        propertyName: variableSourceType
    GenerateReportRequest:
      required:
        - action
        - exportFormat
        - template
        - timezone
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ReportAction'
        exportFormat:
          pattern: ^(Pdf|Png)$
          type: string
          description: File format of the report. Can be `Pdf` or `Png`. `Pdf` is portable document format. `Png` is portable graphics image format.
          example: Pdf
          x-pattern-message: 'should be one of the following: ''Pdf'', ''Png'''
        timezone:
          type: string
          description: Time zone for the query time ranges. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
          example: America/Los_Angeles
        template:
          $ref: '#/components/schemas/Template'
    BeginAsyncJobResponse:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: Identifier to get the status of an asynchronous job.
          example: C03E086C137F38B4
    ReportAction:
      required:
        - actionType
      type: object
      properties:
        actionType:
          pattern: ^DirectDownloadReportAction$
          type: string
          description: Type of action.
          example: DirectDownloadReportAction
          x-pattern-message: should be 'DirectDownloadReportAction'
      description: The base class of all report action types. `DirectDownloadReportAction` downloads dashboard from browser. New action types may be supported in the future.
      discriminator:
        propertyName: actionType
    Template:
      required:
        - templateType
      type: object
      properties:
        templateType:
          pattern: ^(DashboardTemplate|DashboardReportModeTemplate)$
          type: string
          description: The type of template. `DashboardTemplate` provides a snapshot view of the exported dashboard. `DashboardReportModeTemplate` provides a printer-friendly view of the exported dashboard. New templates may be supported in the future.
          example: DashboardTemplate
          x-pattern-message: Must be `DashboardTemplate`, or `DashboardReportModeTemplate`
      discriminator:
        propertyName: templateType
    AsyncJobStatus:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          description: Whether or not the request is in progress (`InProgress`), has completed successfully (`Success`), or has completed with an error (`Failed`).
        statusMessage:
          type: string
          description: Additional status message generated if the status is not `Failed`.
        error:
          $ref: '#/components/schemas/ErrorDescription'
      example:
        status: Success
        statusMessage: ''
  parameters: {}
  responses: {}
  securitySchemes: {}
  callbacks: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  x-stackQL-resources:
    dashboards:
      id: sumologic.dashboards.dashboards
      name: dashboards
      title: Dashboards
      methods:
        listDashboards:
          operation:
            $ref: '#/paths/~1v2~1dashboards/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createDashboard:
          operation:
            $ref: '#/paths/~1v2~1dashboards/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDashboard:
          operation:
            $ref: '#/paths/~1v2~1dashboards~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateDashboard:
          operation:
            $ref: '#/paths/~1v2~1dashboards~1{id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteDashboard:
          operation:
            $ref: '#/paths/~1v2~1dashboards~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/dashboards/methods/getDashboard'
          - $ref: '#/components/x-stackQL-resources/dashboards/methods/listDashboards'
        insert:
          - $ref: '#/components/x-stackQL-resources/dashboards/methods/createDashboard'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/dashboards/methods/deleteDashboard'
    report_jobs:
      id: sumologic.dashboards.report_jobs
      name: report_jobs
      title: Report_jobs
      methods:
        generateDashboardReport:
          operation:
            $ref: '#/paths/~1v2~1dashboards~1reportJobs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    report_jobs_status:
      id: sumologic.dashboards.report_jobs_status
      name: report_jobs_status
      title: Report_jobs_status
      methods:
        getAsyncReportGenerationStatus:
          operation:
            $ref: '#/paths/~1v2~1dashboards~1reportJobs~1{jobId}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/report_jobs_status/methods/getAsyncReportGenerationStatus'
        insert: []
        update: []
        delete: []
    report_jobs_result:
      id: sumologic.dashboards.report_jobs_result
      name: report_jobs_result
      title: Report_jobs_result
      methods:
        getAsyncReportGenerationResult:
          operation:
            $ref: '#/paths/~1v2~1dashboards~1reportJobs~1{jobId}~1result/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
openapi: 3.0.0
servers:
  - url: https://api.{region}.sumologic.com/api
    variables:
      region:
        description: SumoLogic region
        enum:
          - us2
          - au
          - ca
          - de
          - eu
          - fed
          - in
          - jp
        default: us2
    description: The SumoLogic regional endpoint
security:
  - basicAuth: []
tags:
  - name: accountManagement
    description: |
      Account Management API.

      Manage the custom subdomain for the URL used to access your Sumo Logic account. For more information see [Manage Organization](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization).
    x-displayName: Account
  - name: appManagement
    description: |
      App installation API.

      View and install Sumo Logic Applications that deliver out-of-the-box dashboards, saved searches, and field extraction for popular data sources. For more information see [Sumo Logic Apps](https://help.sumologic.com/07Sumo-Logic-Apps).
    x-displayName: Apps (Beta)
  - name: connectionManagement
    description: |
      Connection management API.

      Set up connections to send alerts to other tools. For more information see [Connections and Integrations](https://help.sumologic.com/?cid=1044).
    x-displayName: Connections
  - name: contentManagement
    description: |
      Content management API.

      You can export, import, delete and copy content in your organization’s Library. For more information see [Library](https://help.sumologic.com/?cid=5173). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
      <br/> <br/>
      ### Example
      The following example uses API endpoints in the US1 deployment. Sumo Logic has several deployments that are assigned depending on the geographic location and the date an account is created. For details determining your account's deployment see [API endpoints](https://help.sumologic.com/?cid=3011).
      The [Content Import API](#operation/beginAsyncImport) can be used to create or update a Search, Scheduled Search, or Dashboard. Here is an example creating a Scheduled Search:
      1. Get the identifier of your `Personal` folder.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/personal
        ```

        Find the identifier of your `Personal` folder in the response.
        ```json
        {
            ...
            "id": "0000000006A2E86F", <----
            "name": "Personal",
            "itemType": "Folder",
            ...
        }
        ```

        You can use [getFolder](#operation/getFolder), [getAdminRecommededFolder](#operation/getAdminRecommendedFolderAsync),
        or [getGlobalFolder](#operation/getGlobalFolderAsync) endpoints to traverse the content tree and find the identifier of any
        folder you want to manage.

      2. Use the [Content Import API](#operation/beginAsyncImport) to create a new Scheduled Search inside your
        `Personal` folder.
        ```bash
        curl -X POST -u "<accessId>:<accessKey>" -H "Content-Type: application/json" -d @search.json https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import
        ```

        The data file `search.json` in the above command has the following `SavedSearchWithScheduleSyncDefinition` object.
        ```json
        // file: search.json
        {
            "type": "SavedSearchWithScheduleSyncDefinition",
            "name": "demo-scheduled-search",
            "description": "Runs every hour with timerange of 15m and sends email notifications",
            "search": {
                "queryText": "\"error\" and \"warn\"",
                "defaultTimeRange": "-15m",
                "byReceiptTime": false,
                "viewName": "",
                "viewStartTime": null,
                "queryParameters": []
            },
            "searchSchedule": {
                "cronExpression": "0 0/15 * * * ? *",
                "displayableTimeRange": "-15m",
                "parseableTimeRange": {
                    "from": {
                        "relativeTime": "-15m",
                        "type": "RelativeTimeRangeBoundary"
                    },
                    "to": null,
                    "type": "BeginBoundedTimeRange"
                },
                "timeZone": "America/Los_Angeles",
                "threshold": null,
                "notification": {
                    "taskType": "EmailSearchNotificationSyncDefinition",
                    "toList": [
                        "ops@acme.org"
                    ],
                    "subjectTemplate": "Search Results: {{SearchName}}",
                    "includeQuery": true,
                    "includeResultSet": true,
                    "includeHistogram": true,
                    "includeCsvAttachment": false
                },
                "muteErrorEmails": false,
                "scheduleType": "1Hour",
                "parameters": []
            }
        }
        ```

        The response of above request will have the job identifier that you can use to track the status of the import job.
        ```json
        {
            "id": "74DC17FA765C7443"
        }
        ```

      3. Use the job identifier from the import request to get the [status](#operation/getAsyncImportStatus) of the
        import job.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import/74DC17FA765C7443/status
        ```

        If you are importing a large item, you might have to wait for the import job to finish. The following is an
        example response from a completed job.
        ```json
        {
            "status": "Success",
            "statusMessage": null,
            "error": null
        }
        ```
    x-displayName: Content
  - name: contentPermissions
    description: |
      Content permissions API.

      You can share your folders, searches, and dashboards with specific users or roles. For more information see [Share Content](https://help.sumologic.com/?cid=8675309). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Permissions
  - name: dashboardManagement
    description: |
      Dashboard (New) management API.

      Dashboard (New) allows you to analyze metric and log data on the same dashboard, in a seamless view. This gives you control over the visual display of metric and log data. Dashboard (New) streamlines dashboard configurations and on-the-fly analytic visualizations with its new templating features. For more information see [Dashboard (New)](https://help.sumologic.com/?cid=5500).
    x-displayName: Dashboard (New)
  - name: dynamicParsingRuleManagement
    description: |
      Dynamic Parsing management API.

      Dynamic Parsing allows automatic field extraction from your log messages when you run a search.  This allows you to view fields from logs without having to manually specify parsing logic. For more information  see [Dynamic Parsing](https://help.sumologic.com/?cid=20011).
    x-displayName: Dynamic Parsing
  - name: extractionRuleManagement
    description: |
      Field Extraction Rule management API.

      Field Extraction Rules allow you to parse fields from your log messages at the time the messages are ingested eliminating the need to parse fields in your query. For more information see [Manage Field Extraction](https://help.sumologic.com/?cid=5313).
    x-displayName: Field Extraction Rules
  - name: fieldManagementV1
    description: |
      Field management API.

      Fields allow you to reference log data based on meaningful associations. They act as metadata tags that are assigned to your logs so you can search with them. Each field contains a key-value pair, where the field name is the key. Fields may be referred to as Log Metadata Fields. For more information see [Fields](https://help.sumologic.com/?cid=10116).
    x-displayName: Field Management
  - name: folderManagement
    description: |
      Folder management API.

      You can add folders and subfolders to the Library in order to organize your content for easy access or to share content. For more information see [Add Folders to the Library](https://help.sumologic.com/?cid=5020). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Folders
  - name: ingestBudgetManagementV1
    description: |
      Ingest Budget management API.

      Ingest Budgets allow you to control the capacity of daily ingestion volume sent to Sumo Logic from Collectors. For more information see [Ingest Budgets](https://help.sumologic.com/?cid=5235).
    x-displayName: Ingest Budgets
  - name: ingestBudgetManagementV2
    description: |
      Ingest Budget management API V2.

      Ingest Budgets V2 provide you the ability to create and assign budgets to your log data by Fields instead of using a Field Value. For more information see [Metadata Ingest Budgets](https://help.sumologic.com/?cid=52352).
    x-displayName: Ingest Budgets V2
  - name: partitionManagement
    description: |
      Partition management API.

      Creating a Partition allows you to improve search performance by searching over a smaller number of messages. For more information see [Manage Partitions](https://help.sumologic.com/?cid=5231).
    x-displayName: Partitions
  - name: logsDataForwardingManagement
    description: |
      Logs Data Forwarding management API.

      Logs Data Forwarding allows you to forward log data from a Partition or Scheduled View to an S3 bucket. For more information see [Forwarding Data to S3](https://help.sumologic.com/Manage/Data-Forwarding/Configure-Data-Forwarding-from-Sumo-Logic-to-S3).
    x-displayName: Logs Data Forwarding
  - name: roleManagement
    description: |
      Role management API.

      Roles determine the functions that users are able to perform in Sumo Logic. To manage roles, you must have an administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Roles](https://help.sumologic.com/?cid=5234).
    x-displayName: Roles
  - name: lookupManagement
    description: |
      Lookup Table management API.

      A Lookup Table is a table of data hosted on Sumo Logic that you can use to enrich the log and event data received by Sumo Logic. You must create a table schema before you can populate the table. For more information see [Lookup Tables](https://help.sumologic.com/?cid=10109).
    x-displayName: Lookup Tables
  - name: scheduledViewManagement
    description: |
      Scheduled View management API.

      Scheduled Views speed the search process for small and historical subsets of your data by functioning as a pre-aggregated index. For more information see [Manage Scheduled Views](https://help.sumologic.com/?cid=5128).
    x-displayName: Scheduled Views
  - name: tokensLibraryManagement
    description: |
      Tokens management API.

      Tokens are associated with your organization to authorize specific operations. Currently, we support collector registration tokens, which can be used to register Installed Collectors. Managing tokens requires the Manage Tokens role capability. For more information see [Installation Tokens](https://help.sumologic.com/?cid=0100).
    x-displayName: Tokens
  - name: transformationRuleManagement
    description: |
      Transformation Rule management API.
      Metrics Transformation Rules allow you control how long raw metrics are retained. You can also aggregate metrics at collection time and specify a separate retention period for the aggregated metrics. For more information see [Metrics Transformation Rules](https://help.sumologic.com/?cid=10117).
    x-displayName: Transformation Rules (Beta)
  - name: userManagement
    description: |
      User management API.

      To manage users, you must have the administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Users](https://help.sumologic.com/?cid=1006).
    x-displayName: Users
  - name: metricsSearchesManagement
    description: |
      Metrics Search management API.

      Save metrics searches in the content library and organize them in a folder hierarchy. Share useful queries with users in your organization. For more information see [Sharing Metric Charts](https://help.sumologic.com/Metrics/03-Metric-Charts/Share_a_Metric_Chart).
    x-displayName: Metrics Searches (Beta)
  - name: metricsQuery
    description: |
      Metrics Query API.

      The Metrics Query API allows you to execute queries on various metrics and retrieve multiple time-series (data-points) over time range(s). For more information see [Metrics - Classic](https://help.sumologic.com/?cid=1079).
    x-displayName: Metrics Query
  - name: accessKeyManagement
    description: |
      Access Key management API.

      Access Keys allow you to securely register new Collectors and access Sumo Logic APIs. For more information see [Access Keys](https://help.sumologic.com/?cid=6690).
    x-displayName: Access Keys
  - name: samlConfigurationManagement
    description: |
      SAML configuration management API

      Organizations with Enterprise accounts can provision Security Assertion Markup Language (SAML) 2.0 to enable Single Sign-On (SSO) for user access to Sumo Logic. For more information see [SAML Configuration](https://help.sumologic.com/?cid=4016).
    x-displayName: SAML Configuration
  - name: serviceAllowlistManagement
    description: |
      Service Allowlist management API

      Service Allowlist Settings allow you to explicitly grant access to specific IP addresses and/or CIDR notations for logins, APIs, and dashboard access. For more information see [Service Allowlist Settings](https://help.sumologic.com/?cid=5454).
    x-displayName: Service Allowlist
  - name: healthEvents
    description: |
      Health Events management API.

      Health Events allow you to keep track of the health of your Collectors and Sources. You can use them to find and investigate common errors and warnings that are known to cause collection issues. For more information see [Health Events](https://help.sumologic.com/?cid=0020).
    x-displayName: Health Events
  - name: archiveManagement
    description: |-
      Archive Ingestion Management API.

      Archive Ingestion allows you to ingest data from Archive destinations. You can use this API to ingest data from your Archive with an existing AWS S3 Archive Source. You need the Manage or View Collectors role capability to manage or view ingestion jobs. For more information see [Archive](https://help.sumologic.com/?cid=10011).
    x-displayName: Archive Ingestion Management
  - name: logSearchesEstimatedUsage
    description: |
      Log Search Estimated Usage API.

      Gets the estimated volume of data that would be scanned for a given log search in the Infrequent data tier, over a particular time range. In the Infrequent Data Tier, you pay per query, based on the amount data scanned. You can use this endpoint to get an estimate of the total data that would be scanned before running a query, and refine your query to scan less data, as necessary. For more information see [Infrequent data tier](https://help.sumologic.com/?cid=11987).
    x-displayName: Log Search Estimated Usage
  - name: passwordPolicy
    description: |
      Password Policy Management API

      The password policy controls how user passwords are managed. The "Manage Password Policy" role capability is required to update the password policy. For more information see [how to set a password policy](https://help.sumologic.com/?cid=8595).
    x-displayName: Password Policy
  - name: policiesManagement
    description: |
      Policies management API.

      Policies control the security and share settings of your organization. For more information see [Security](https://help.sumologic.com/?cid=4041).
    x-displayName: Policies
  - name: traces
    description: |
      Traces API

      The Traces API allows you to browse traces collected in the system. You can execute queries to find traces matching provided search criteria as well as gather detailed information about individual traces and spans. For more information see [View and investigate traces](https://help.sumologic.com/Traces/View_and_investigate_traces).
    x-displayName: Traces
  - name: spanAnalytics
    description: |
      Span Analytics API

      The Span Analytics API allows you to browse spans collected in the system. You can execute queries to find individual spans matching provided search criteria as well as run aggregated span queries and retrieve their results. For more information see [Spans](https://help.sumologic.com/Traces/Spans).
    x-displayName: Span Analytics
  - name: serviceMap
    description: |
      Service Map API

      The Service Map API allows you to fetch a graph representation of the Service Map, which is a high-level view of your application environment, automatically derived from tracing data. For more information see [Service Map](https://help.sumologic.com/Traces/Service_Map_and_Dashboards#service-map).
    x-displayName: Service Map
  - name: slosLibraryManagement
    description: |
      SLO Management API.

      SLOs are used to monitor and alert on KPIs for your most important services or user experience.
    x-displayName: SLOs
  - name: monitorsLibraryManagement
    description: |
      Monitor Management API.


      Monitors continuously query your data to monitor and send notifications when specific events occur.
      For more information see [Monitors](https://help.sumologic.com/?cid=10020).
    x-displayName: Monitors
info:
  title: Sumo Logic API - dashboards
  description: dashboards
  version: 1.0.0
  x-logo:
    url: ./sumologic_logo.png
