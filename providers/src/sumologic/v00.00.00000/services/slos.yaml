paths:
  /v1/slos/sli:
    get:
      tags:
        - slosLibraryManagement
      summary: Bulk fetch SLI values, error budget remaining and SLI computation status for the current compliance period.
      description: Bulk fetch SLI values, error budget remaining and SLI computation status for the current compliance period.
      operationId: sli
      parameters:
        - name: ids
          in: query
          description: The identifiers of the SLOs.
          required: true
          schema:
            type: array
            items:
              type: string
          example: 000000000000000A,000000000000000B
      responses:
        '200':
          description: A map containing current status, SLI value and error budget remaining corresponding to each SLO id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdToSliStatusMap'
        default:
          description: Error getting SLI metrics for the SLO ids.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/slos/usageInfo:
    get:
      tags:
        - slosLibraryManagement
      summary: Usage info of SLOs.
      description: Get the current number and the allowed number of log and metrics SLOs.
      operationId: getSloUsageInfo
      responses:
        '200':
          description: SLO Usage Info has been retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SloUsageInfo'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/slos:
    get:
      tags:
        - slosLibraryManagement
      summary: Bulk read a slo or folder.
      description: Bulk read a slo or folder by the given identifiers from the slos library.
      operationId: slosReadByIds
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of identifiers.
          required: true
          schema:
            type: array
            items:
              type: string
          example: 0000000000000001,0000000000000002,0000000000000003
      responses:
        '200':
          description: A map between an identifier and its definition (slo or folder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdToSlosLibraryBaseResponseMap'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - slosLibraryManagement
      summary: |
        Create a slo or folder.
      description: Create a slo or folder in the slos library.
      operationId: slosCreate
      parameters:
        - name: parentId
          in: query
          description: Identifier of the parent folder in which to create the slo or folder.
          required: true
          schema:
            type: string
      requestBody:
        description: The slo or folder to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlosLibraryBase'
        required: true
      responses:
        '200':
          description: The slo or folder was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlosLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - slosLibraryManagement
      summary: |
        Bulk delete a slo or folder.
      description: Bulk delete a slo or folder by the given identifiers in the slos library.
      operationId: slosDeleteByIds
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of identifiers.
          required: true
          schema:
            type: array
            items:
              type: string
          example: 0000000000000001,0000000000000002,0000000000000003
      responses:
        '200':
          description: A map between the deleted identifier and its metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdToSlosLibraryBaseResponseMap'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/slos/root:
    get:
      tags:
        - slosLibraryManagement
      summary: Get the root slos folder.
      description: Get the root folder in the slos library.
      operationId: getSlosLibraryRoot
      responses:
        '200':
          description: Root folder of the slos library.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlosLibraryFolderResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/slos/path:
    get:
      tags:
        - slosLibraryManagement
      summary: Read a slo or folder by its path.
      description: Read a slo or folder by its path in the slos library structure.
      operationId: slosGetByPath
      parameters:
        - name: path
          in: query
          description: The path of the slo or folder.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Requested slo or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlosLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/slos/search:
    get:
      tags:
        - slosLibraryManagement
      summary: Search for a slo or folder.
      description: Search for a slo or folder in the slos library structure.
      operationId: slosSearch
      parameters:
        - name: query
          in: query
          description: |-
            The search query to find slo or folder. Below is the list of different filters with examples:
              - **createdBy** : Filter by the user's identifier who created the content. Example: `createdBy:000000000000968B`.
              - **createdBefore** : Filter by the content objects created before the given timestamp(in milliseconds). Example: `createdBefore:1457997222`.
              - **createdAfter** : Filter by the content objects created after the given timestamp(in milliseconds). Example: `createdAfter:1457997111`.
              - **modifiedBefore** : Filter by the content objects modified before the given timestamp(in milliseconds). Example: `modifiedBefore:1457997222`.
              - **modifiedAfter** : Filter by the content objects modified after the given timestamp(in milliseconds). Example: `modifiedAfter:1457997111`.
              - **type** : Filter by the type of the content object. Example: `type:folder`.

            You can also use multiple filters in one query. For example to search for all content objects created by user with identifier 000000000000968B with creation timestamp after 1457997222 containing the text Test, the query would look like:

              `createdBy:000000000000968B createdAfter:1457997222 Test`
          required: true
          schema:
            type: string
          example: createdBy:000000000000968B Test
        - name: limit
          in: query
          description: Maximum number of items you want in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
          example: 10
        - name: offset
          in: query
          description: The position or row from where to start the search operation.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 5
      responses:
        '200':
          description: List of folders and slos matching the search query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSlosLibraryItemWithPath'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/slos/{id}:
    get:
      tags:
        - slosLibraryManagement
      summary: Get a slo or folder.
      description: Get a slo or folder from the slos library.
      operationId: slosReadById
      parameters:
        - name: id
          in: path
          description: Identifier of the slo or folder to read.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Requested slo or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlosLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - slosLibraryManagement
      summary: |
        Update a slo or folder.
      description: Update a slo or folder in the slos library.
      operationId: slosUpdateById
      parameters:
        - name: id
          in: path
          description: Identifier of the slo or folder to update.
          required: true
          schema:
            type: string
      requestBody:
        description: The slo or folder to update. The content version must match its latest version number in the slos library. If the version does not match it will not be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlosLibraryBaseUpdate'
        required: true
      responses:
        '200':
          description: The slo or folder was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlosLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - slosLibraryManagement
      summary: |
        Delete a slo or folder.
      description: Delete a slo or folder from the slos library.
      operationId: slosDeleteById
      parameters:
        - name: id
          in: path
          description: Identifier of the slo or folder to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The slo or folder was successfully deleted.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/slos/{id}/path:
    get:
      tags:
        - slosLibraryManagement
      summary: Get the path of a slo or folder.
      description: Get the full path of the slo or folder in the slos library.
      operationId: getSlosFullPath
      parameters:
        - name: id
          in: path
          description: Identifier of the slo or folder.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Full path of the slo or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Path'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/slos/{id}/move:
    post:
      tags:
        - slosLibraryManagement
      summary: Move a slo or folder.
      description: Move a slo or folder to a different location in the slos library.
      operationId: slosMove
      parameters:
        - name: id
          in: path
          description: Identifier of the slo or folder to move.
          required: true
          schema:
            type: string
        - name: parentId
          in: query
          description: Identifier of the parent folder to move the slo or folder to.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Moved slo or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlosLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/slos/{id}/copy:
    post:
      tags:
        - slosLibraryManagement
      summary: Copy a slo or folder.
      description: Copy a slo or folder in the slos library.
      operationId: slosCopy
      parameters:
        - name: id
          in: path
          description: Identifier of the slo or folder to copy.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          Fields include:
            1) Identifier of the parent folder to copy to.
            2) Optionally provide a new name.
            3) Optionally provide a new description.
            4) Optionally set to true if you want to copy and preserve the locked status. Requires `LockSlos` capability.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentCopyParams'
        required: true
      responses:
        '200':
          description: The slo or folder was copied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlosLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/slos/{id}/export:
    get:
      tags:
        - slosLibraryManagement
      summary: Export a slo or folder.
      description: Export a slo or folder. If the given identifier is a folder, everything under the folder is exported recursively with folder as the root.
      operationId: slosExportItem
      parameters:
        - name: id
          in: path
          description: Identifier of the slo or folder to export.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Exported slo or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlosLibraryBaseExport'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/slos/{parentId}/import:
    post:
      tags:
        - slosLibraryManagement
      summary: Import a slo or folder.
      description: Import a slo or folder.
      operationId: slosImportItem
      parameters:
        - name: parentId
          in: path
          description: Identifier of the parent folder in which to import the slo or folder.
          required: true
          schema:
            type: string
      requestBody:
        description: The slo or folder to be imported.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlosLibraryBaseExport'
        required: true
      responses:
        '200':
          description: 'Newly imported slo or folder. NOTE: Permissions field will not be filled (empty list).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlosLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    IdToSliStatusMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SliStatus'
      description: Map of SLO identifier to SliStatus object.
    ErrorResponse:
      required:
        - errors
        - id
      type: object
      properties:
        id:
          type: string
          description: An identifier for the error; this is unique to the specific API request.
          example: IUUQI-DGH5I-TJ045
        errors:
          type: array
          description: A list of one or more causes of the error.
          example:
            - code: auth:password_too_short
              message: Your password was too short.
            - code: auth:password_character_classes
              message: Your password did not contain any non-alphanumeric characters
          items:
            $ref: '#/components/schemas/ErrorDescription'
    SliStatus:
      required:
        - status
      type: object
      properties:
        status:
          pattern: ^(Success|Error|InProgress)$
          type: string
          description: Whether the SLI computation is complete / had an error / is in progress.
          example: Success
        sliPercentage:
          type: number
          description: SLI percentage for the compliance period. Available if `status` is `Success`.
          format: double
          example: 95.14
        errorBudgetRemainingPercentage:
          type: number
          description: Percentage of error budget remaining for the compliance period. Available if `status` is `Success`.
          format: double
        absoluteErrorBudgetRemaining:
          type: string
          description: Formatted string for the absolute error budget remaining (time duration for window-based SLIs, request count for request-based SLIs). Available if `status` is `Success`.
          example: 1h56m, -3h45m, -241.3k req, 1.5k req
        progressPercentage:
          type: number
          description: SLI computation progress.
          format: double
      description: Status of the SLI computation. If the status is successful, also contains the SLI value and error budget remaining for the current compliance period.
    ErrorDescription:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: An error code describing the type of error.
          example: auth:password_too_short
        message:
          type: string
          description: A short English-language description of the error.
          example: Your password was too short.
        detail:
          type: string
          description: An optional fuller English-language description of the error.
          example: Your password was 5 characters long, the minimum length is 12 characters. See http://example.com/password for more information.
        meta:
          type: object
          description: An optional list of metadata about the error.
          example:
            minLength: 12
            actualLength: 5
    SloUsageInfo:
      type: array
      description: The usage info of logs and metrics SLOs.
      items:
        $ref: '#/components/schemas/SloUsage'
    SloUsage:
      properties:
        sliType:
          pattern: ^(Logs|Metrics|Monitors)$
          type: string
          description: The type of SLO usage info (Logs/Metrics/Monitor based).
          example: Logs
          x-pattern-message: Either `Logs` or `Metrics` or `Monitors`.
        usage:
          type: integer
          description: Current number of active Logs/Metrics/Monitors SLOs.
          example: 100
        limit:
          type: integer
          description: The limit of active Logs/Metrics/Monitors SLOs.
          example: 100
      description: The usage info of SLOs.
    IdToSlosLibraryBaseResponseMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SlosLibraryBaseResponse'
    SlosLibraryBaseResponse:
      required:
        - contentType
        - createdAt
        - createdBy
        - description
        - id
        - isMutable
        - isSystem
        - modifiedAt
        - modifiedBy
        - name
        - parentId
        - type
        - version
      type: object
      properties:
        id:
          type: string
          description: Identifier of the slo or folder.
        name:
          type: string
          description: Identifier of the slo or folder.
        description:
          type: string
          description: Description of the slo or folder.
        version:
          type: integer
          description: Version of the slo or folder.
          format: int64
        createdAt:
          type: string
          description: Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
          format: date-time
        createdBy:
          type: string
          description: Identifier of the user who created the resource.
        modifiedAt:
          type: string
          description: Last modification timestamp in UTC.
          format: date-time
        modifiedBy:
          type: string
          description: Identifier of the user who last modified the resource.
        parentId:
          type: string
          description: Identifier of the parent folder.
        contentType:
          type: string
          description: |-
            Type of the content. Valid values:
              1) Slo
              2) Folder
        type:
          type: string
          description: Type of the object model.
        isSystem:
          type: boolean
          description: System objects are objects provided by Sumo Logic. System objects can only be localized. Non-local fields can't be updated.
        isMutable:
          type: boolean
          description: Immutable objects are "READ-ONLY".
        permissions:
          type: array
          description: Aggregated permission summary for the calling user. If detailed permission statements are required, please call list permissions endpoint.
          example:
            - Read
            - Delete
          items:
            type: string
      discriminator:
        propertyName: type
    SlosLibraryBase:
      required:
        - name
        - type
      type: object
      properties:
        name:
          type: string
          description: Name of the slo or folder.
        description:
          type: string
          description: Description of the slo or folder.
          default: ''
        type:
          type: string
          description: |-
            Type of the object model. Valid values:
              1) SlosLibrarySlo
              2) SlosLibraryFolder
      discriminator:
        propertyName: type
    SlosLibraryFolderResponse:
      allOf:
        - $ref: '#/components/schemas/SlosLibraryBaseResponse'
        - required:
            - children
            - permissions
          type: object
          properties:
            permissions:
              type: array
              description: Aggregated permission summary for the calling user. If detailed permission statements are required, please call list permissions endpoint.
              example:
                - Read
                - Delete
              items:
                type: string
            children:
              type: array
              description: 'Children of the folder. NOTE: Permissions field will not be filled (empty list) for children.'
              items:
                $ref: '#/components/schemas/SlosLibraryBaseResponse'
    ListSlosLibraryItemWithPath:
      type: array
      description: Multi-type list of types slo or folder.
      items:
        $ref: '#/components/schemas/SlosLibraryItemWithPath'
    SlosLibraryItemWithPath:
      required:
        - item
        - path
      type: object
      properties:
        item:
          $ref: '#/components/schemas/SlosLibraryBaseResponse'
        path:
          type: string
          description: Path of the slo or folder.
          example: /Slos/SampleFolder/TestSlo
    SlosLibraryBaseUpdate:
      required:
        - name
        - type
        - version
      type: object
      properties:
        name:
          type: string
          description: The name of the slo or folder.
        description:
          type: string
          description: The description of the slo or folder.
          default: ''
        version:
          type: integer
          description: The version of the slo or folder.
          format: int64
        type:
          type: string
          description: Type of the object model.
      discriminator:
        propertyName: type
    Path:
      required:
        - path
        - pathItems
      type: object
      properties:
        pathItems:
          type: array
          description: Elements of the path.
          items:
            $ref: '#/components/schemas/PathItem'
        path:
          type: string
          description: String representation of the path.
    PathItem:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: Identifier of the path element.
        name:
          type: string
          description: Name of the path element.
    ContentCopyParams:
      required:
        - parentId
      type: object
      properties:
        parentId:
          type: string
          description: Identifier of the parent folder to copy to.
        name:
          type: string
          description: Optionally provide a new name.
        description:
          type: string
          description: Optionally provide a new description.
    SlosLibraryBaseExport:
      required:
        - name
        - type
      type: object
      properties:
        name:
          type: string
          description: Name of the slo or folder.
        description:
          type: string
          description: Description of the slo or folder.
        type:
          type: string
          description: Type of the object model.
      discriminator:
        propertyName: type
  parameters: {}
  responses: {}
  securitySchemes: {}
  callbacks: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  x-stackQL-resources:
    sli:
      id: sumologic.slos.sli
      name: sli
      title: Sli
      methods:
        sli:
          operation:
            $ref: '#/paths/~1v1~1slos~1sli/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    usage_info:
      id: sumologic.slos.usage_info
      name: usage_info
      title: Usage_info
      methods:
        getSloUsageInfo:
          operation:
            $ref: '#/paths/~1v1~1slos~1usageInfo/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/usage_info/methods/getSloUsageInfo'
        insert: []
        update: []
        delete: []
    slos:
      id: sumologic.slos.slos
      name: slos
      title: Slos
      methods:
        slosReadByIds:
          operation:
            $ref: '#/paths/~1v1~1slos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        slosCreate:
          operation:
            $ref: '#/paths/~1v1~1slos/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        slosDeleteByIds:
          operation:
            $ref: '#/paths/~1v1~1slos/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        slosReadById:
          operation:
            $ref: '#/paths/~1v1~1slos~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        slosUpdateById:
          operation:
            $ref: '#/paths/~1v1~1slos~1{id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        slosDeleteById:
          operation:
            $ref: '#/paths/~1v1~1slos~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    root:
      id: sumologic.slos.root
      name: root
      title: Root
      methods:
        getSlosLibraryRoot:
          operation:
            $ref: '#/paths/~1v1~1slos~1root/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/root/methods/getSlosLibraryRoot'
        insert: []
        update: []
        delete: []
    path:
      id: sumologic.slos.path
      name: path
      title: Path
      methods:
        slosGetByPath:
          operation:
            $ref: '#/paths/~1v1~1slos~1path/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getSlosFullPath:
          operation:
            $ref: '#/paths/~1v1~1slos~1{id}~1path/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/path/methods/getSlosFullPath'
        insert: []
        update: []
        delete: []
    search:
      id: sumologic.slos.search
      name: search
      title: Search
      methods:
        slosSearch:
          operation:
            $ref: '#/paths/~1v1~1slos~1search/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    move:
      id: sumologic.slos.move
      name: move
      title: Move
      methods:
        slosMove:
          operation:
            $ref: '#/paths/~1v1~1slos~1{id}~1move/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    copy:
      id: sumologic.slos.copy
      name: copy
      title: Copy
      methods:
        slosCopy:
          operation:
            $ref: '#/paths/~1v1~1slos~1{id}~1copy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    export:
      id: sumologic.slos.export
      name: export
      title: Export
      methods:
        slosExportItem:
          operation:
            $ref: '#/paths/~1v1~1slos~1{id}~1export/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    import:
      id: sumologic.slos.import
      name: import
      title: Import
      methods:
        slosImportItem:
          operation:
            $ref: '#/paths/~1v1~1slos~1{parentId}~1import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
openapi: 3.0.0
servers:
  - url: https://api.{region}.sumologic.com/api
    variables:
      region:
        description: SumoLogic region
        enum:
          - us2
          - au
          - ca
          - de
          - eu
          - fed
          - in
          - jp
        default: us2
    description: The SumoLogic regional endpoint
security:
  - basicAuth: []
tags:
  - name: accountManagement
    description: |
      Account Management API.

      Manage the custom subdomain for the URL used to access your Sumo Logic account. For more information see [Manage Organization](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization).
    x-displayName: Account
  - name: appManagement
    description: |
      App installation API.

      View and install Sumo Logic Applications that deliver out-of-the-box dashboards, saved searches, and field extraction for popular data sources. For more information see [Sumo Logic Apps](https://help.sumologic.com/07Sumo-Logic-Apps).
    x-displayName: Apps (Beta)
  - name: connectionManagement
    description: |
      Connection management API.

      Set up connections to send alerts to other tools. For more information see [Connections and Integrations](https://help.sumologic.com/?cid=1044).
    x-displayName: Connections
  - name: contentManagement
    description: |
      Content management API.

      You can export, import, delete and copy content in your organization’s Library. For more information see [Library](https://help.sumologic.com/?cid=5173). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
      <br/> <br/>
      ### Example
      The following example uses API endpoints in the US1 deployment. Sumo Logic has several deployments that are assigned depending on the geographic location and the date an account is created. For details determining your account's deployment see [API endpoints](https://help.sumologic.com/?cid=3011).
      The [Content Import API](#operation/beginAsyncImport) can be used to create or update a Search, Scheduled Search, or Dashboard. Here is an example creating a Scheduled Search:
      1. Get the identifier of your `Personal` folder.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/personal
        ```

        Find the identifier of your `Personal` folder in the response.
        ```json
        {
            ...
            "id": "0000000006A2E86F", <----
            "name": "Personal",
            "itemType": "Folder",
            ...
        }
        ```

        You can use [getFolder](#operation/getFolder), [getAdminRecommededFolder](#operation/getAdminRecommendedFolderAsync),
        or [getGlobalFolder](#operation/getGlobalFolderAsync) endpoints to traverse the content tree and find the identifier of any
        folder you want to manage.

      2. Use the [Content Import API](#operation/beginAsyncImport) to create a new Scheduled Search inside your
        `Personal` folder.
        ```bash
        curl -X POST -u "<accessId>:<accessKey>" -H "Content-Type: application/json" -d @search.json https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import
        ```

        The data file `search.json` in the above command has the following `SavedSearchWithScheduleSyncDefinition` object.
        ```json
        // file: search.json
        {
            "type": "SavedSearchWithScheduleSyncDefinition",
            "name": "demo-scheduled-search",
            "description": "Runs every hour with timerange of 15m and sends email notifications",
            "search": {
                "queryText": "\"error\" and \"warn\"",
                "defaultTimeRange": "-15m",
                "byReceiptTime": false,
                "viewName": "",
                "viewStartTime": null,
                "queryParameters": []
            },
            "searchSchedule": {
                "cronExpression": "0 0/15 * * * ? *",
                "displayableTimeRange": "-15m",
                "parseableTimeRange": {
                    "from": {
                        "relativeTime": "-15m",
                        "type": "RelativeTimeRangeBoundary"
                    },
                    "to": null,
                    "type": "BeginBoundedTimeRange"
                },
                "timeZone": "America/Los_Angeles",
                "threshold": null,
                "notification": {
                    "taskType": "EmailSearchNotificationSyncDefinition",
                    "toList": [
                        "ops@acme.org"
                    ],
                    "subjectTemplate": "Search Results: {{SearchName}}",
                    "includeQuery": true,
                    "includeResultSet": true,
                    "includeHistogram": true,
                    "includeCsvAttachment": false
                },
                "muteErrorEmails": false,
                "scheduleType": "1Hour",
                "parameters": []
            }
        }
        ```

        The response of above request will have the job identifier that you can use to track the status of the import job.
        ```json
        {
            "id": "74DC17FA765C7443"
        }
        ```

      3. Use the job identifier from the import request to get the [status](#operation/getAsyncImportStatus) of the
        import job.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import/74DC17FA765C7443/status
        ```

        If you are importing a large item, you might have to wait for the import job to finish. The following is an
        example response from a completed job.
        ```json
        {
            "status": "Success",
            "statusMessage": null,
            "error": null
        }
        ```
    x-displayName: Content
  - name: contentPermissions
    description: |
      Content permissions API.

      You can share your folders, searches, and dashboards with specific users or roles. For more information see [Share Content](https://help.sumologic.com/?cid=8675309). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Permissions
  - name: dashboardManagement
    description: |
      Dashboard (New) management API.

      Dashboard (New) allows you to analyze metric and log data on the same dashboard, in a seamless view. This gives you control over the visual display of metric and log data. Dashboard (New) streamlines dashboard configurations and on-the-fly analytic visualizations with its new templating features. For more information see [Dashboard (New)](https://help.sumologic.com/?cid=5500).
    x-displayName: Dashboard (New)
  - name: dynamicParsingRuleManagement
    description: |
      Dynamic Parsing management API.

      Dynamic Parsing allows automatic field extraction from your log messages when you run a search.  This allows you to view fields from logs without having to manually specify parsing logic. For more information  see [Dynamic Parsing](https://help.sumologic.com/?cid=20011).
    x-displayName: Dynamic Parsing
  - name: extractionRuleManagement
    description: |
      Field Extraction Rule management API.

      Field Extraction Rules allow you to parse fields from your log messages at the time the messages are ingested eliminating the need to parse fields in your query. For more information see [Manage Field Extraction](https://help.sumologic.com/?cid=5313).
    x-displayName: Field Extraction Rules
  - name: fieldManagementV1
    description: |
      Field management API.

      Fields allow you to reference log data based on meaningful associations. They act as metadata tags that are assigned to your logs so you can search with them. Each field contains a key-value pair, where the field name is the key. Fields may be referred to as Log Metadata Fields. For more information see [Fields](https://help.sumologic.com/?cid=10116).
    x-displayName: Field Management
  - name: folderManagement
    description: |
      Folder management API.

      You can add folders and subfolders to the Library in order to organize your content for easy access or to share content. For more information see [Add Folders to the Library](https://help.sumologic.com/?cid=5020). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Folders
  - name: ingestBudgetManagementV1
    description: |
      Ingest Budget management API.

      Ingest Budgets allow you to control the capacity of daily ingestion volume sent to Sumo Logic from Collectors. For more information see [Ingest Budgets](https://help.sumologic.com/?cid=5235).
    x-displayName: Ingest Budgets
  - name: ingestBudgetManagementV2
    description: |
      Ingest Budget management API V2.

      Ingest Budgets V2 provide you the ability to create and assign budgets to your log data by Fields instead of using a Field Value. For more information see [Metadata Ingest Budgets](https://help.sumologic.com/?cid=52352).
    x-displayName: Ingest Budgets V2
  - name: partitionManagement
    description: |
      Partition management API.

      Creating a Partition allows you to improve search performance by searching over a smaller number of messages. For more information see [Manage Partitions](https://help.sumologic.com/?cid=5231).
    x-displayName: Partitions
  - name: logsDataForwardingManagement
    description: |
      Logs Data Forwarding management API.

      Logs Data Forwarding allows you to forward log data from a Partition or Scheduled View to an S3 bucket. For more information see [Forwarding Data to S3](https://help.sumologic.com/Manage/Data-Forwarding/Configure-Data-Forwarding-from-Sumo-Logic-to-S3).
    x-displayName: Logs Data Forwarding
  - name: roleManagement
    description: |
      Role management API.

      Roles determine the functions that users are able to perform in Sumo Logic. To manage roles, you must have an administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Roles](https://help.sumologic.com/?cid=5234).
    x-displayName: Roles
  - name: lookupManagement
    description: |
      Lookup Table management API.

      A Lookup Table is a table of data hosted on Sumo Logic that you can use to enrich the log and event data received by Sumo Logic. You must create a table schema before you can populate the table. For more information see [Lookup Tables](https://help.sumologic.com/?cid=10109).
    x-displayName: Lookup Tables
  - name: scheduledViewManagement
    description: |
      Scheduled View management API.

      Scheduled Views speed the search process for small and historical subsets of your data by functioning as a pre-aggregated index. For more information see [Manage Scheduled Views](https://help.sumologic.com/?cid=5128).
    x-displayName: Scheduled Views
  - name: tokensLibraryManagement
    description: |
      Tokens management API.

      Tokens are associated with your organization to authorize specific operations. Currently, we support collector registration tokens, which can be used to register Installed Collectors. Managing tokens requires the Manage Tokens role capability. For more information see [Installation Tokens](https://help.sumologic.com/?cid=0100).
    x-displayName: Tokens
  - name: transformationRuleManagement
    description: |
      Transformation Rule management API.
      Metrics Transformation Rules allow you control how long raw metrics are retained. You can also aggregate metrics at collection time and specify a separate retention period for the aggregated metrics. For more information see [Metrics Transformation Rules](https://help.sumologic.com/?cid=10117).
    x-displayName: Transformation Rules (Beta)
  - name: userManagement
    description: |
      User management API.

      To manage users, you must have the administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Users](https://help.sumologic.com/?cid=1006).
    x-displayName: Users
  - name: metricsSearchesManagement
    description: |
      Metrics Search management API.

      Save metrics searches in the content library and organize them in a folder hierarchy. Share useful queries with users in your organization. For more information see [Sharing Metric Charts](https://help.sumologic.com/Metrics/03-Metric-Charts/Share_a_Metric_Chart).
    x-displayName: Metrics Searches (Beta)
  - name: metricsQuery
    description: |
      Metrics Query API.

      The Metrics Query API allows you to execute queries on various metrics and retrieve multiple time-series (data-points) over time range(s). For more information see [Metrics - Classic](https://help.sumologic.com/?cid=1079).
    x-displayName: Metrics Query
  - name: accessKeyManagement
    description: |
      Access Key management API.

      Access Keys allow you to securely register new Collectors and access Sumo Logic APIs. For more information see [Access Keys](https://help.sumologic.com/?cid=6690).
    x-displayName: Access Keys
  - name: samlConfigurationManagement
    description: |
      SAML configuration management API

      Organizations with Enterprise accounts can provision Security Assertion Markup Language (SAML) 2.0 to enable Single Sign-On (SSO) for user access to Sumo Logic. For more information see [SAML Configuration](https://help.sumologic.com/?cid=4016).
    x-displayName: SAML Configuration
  - name: serviceAllowlistManagement
    description: |
      Service Allowlist management API

      Service Allowlist Settings allow you to explicitly grant access to specific IP addresses and/or CIDR notations for logins, APIs, and dashboard access. For more information see [Service Allowlist Settings](https://help.sumologic.com/?cid=5454).
    x-displayName: Service Allowlist
  - name: healthEvents
    description: |
      Health Events management API.

      Health Events allow you to keep track of the health of your Collectors and Sources. You can use them to find and investigate common errors and warnings that are known to cause collection issues. For more information see [Health Events](https://help.sumologic.com/?cid=0020).
    x-displayName: Health Events
  - name: archiveManagement
    description: |-
      Archive Ingestion Management API.

      Archive Ingestion allows you to ingest data from Archive destinations. You can use this API to ingest data from your Archive with an existing AWS S3 Archive Source. You need the Manage or View Collectors role capability to manage or view ingestion jobs. For more information see [Archive](https://help.sumologic.com/?cid=10011).
    x-displayName: Archive Ingestion Management
  - name: logSearchesEstimatedUsage
    description: |
      Log Search Estimated Usage API.

      Gets the estimated volume of data that would be scanned for a given log search in the Infrequent data tier, over a particular time range. In the Infrequent Data Tier, you pay per query, based on the amount data scanned. You can use this endpoint to get an estimate of the total data that would be scanned before running a query, and refine your query to scan less data, as necessary. For more information see [Infrequent data tier](https://help.sumologic.com/?cid=11987).
    x-displayName: Log Search Estimated Usage
  - name: passwordPolicy
    description: |
      Password Policy Management API

      The password policy controls how user passwords are managed. The "Manage Password Policy" role capability is required to update the password policy. For more information see [how to set a password policy](https://help.sumologic.com/?cid=8595).
    x-displayName: Password Policy
  - name: policiesManagement
    description: |
      Policies management API.

      Policies control the security and share settings of your organization. For more information see [Security](https://help.sumologic.com/?cid=4041).
    x-displayName: Policies
  - name: traces
    description: |
      Traces API

      The Traces API allows you to browse traces collected in the system. You can execute queries to find traces matching provided search criteria as well as gather detailed information about individual traces and spans. For more information see [View and investigate traces](https://help.sumologic.com/Traces/View_and_investigate_traces).
    x-displayName: Traces
  - name: spanAnalytics
    description: |
      Span Analytics API

      The Span Analytics API allows you to browse spans collected in the system. You can execute queries to find individual spans matching provided search criteria as well as run aggregated span queries and retrieve their results. For more information see [Spans](https://help.sumologic.com/Traces/Spans).
    x-displayName: Span Analytics
  - name: serviceMap
    description: |
      Service Map API

      The Service Map API allows you to fetch a graph representation of the Service Map, which is a high-level view of your application environment, automatically derived from tracing data. For more information see [Service Map](https://help.sumologic.com/Traces/Service_Map_and_Dashboards#service-map).
    x-displayName: Service Map
  - name: slosLibraryManagement
    description: |
      SLO Management API.

      SLOs are used to monitor and alert on KPIs for your most important services or user experience.
    x-displayName: SLOs
  - name: monitorsLibraryManagement
    description: |
      Monitor Management API.


      Monitors continuously query your data to monitor and send notifications when specific events occur.
      For more information see [Monitors](https://help.sumologic.com/?cid=10020).
    x-displayName: Monitors
info:
  title: Sumo Logic API - slos
  description: slos
  version: 1.0.0
  x-logo:
    url: ./sumologic_logo.png
