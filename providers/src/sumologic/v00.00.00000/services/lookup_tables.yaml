paths:
  /v1/lookupTables:
    post:
      tags:
        - lookupManagement
      summary: Create a lookup table.
      description: |-
        Create a new lookup table by providing a schema and specifying its configuration. Providing parentFolderId
         is mandatory. Use the [getItemByPath](#operation/getItemByPath) endpoint to get content id of a path.
        Please check [Content management API](#tag/contentManagement) and [Folder management API](#tag/folderManagement) for all available options.
      operationId: createTable
      parameters: []
      requestBody:
        description: The schema and configuration for the lookup table.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupTableDefinition'
        required: true
      responses:
        '200':
          description: Lookup table created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTable'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/lookupTables/{id}:
    get:
      tags:
        - lookupManagement
      summary: Get a lookup table.
      description: Get a lookup table for the given identifier.
      operationId: lookupTableById
      parameters:
        - name: id
          in: path
          description: Identifier of the lookup table.
          required: true
          schema:
            type: string
            example: 0000000001C41EE4
      responses:
        '200':
          description: Definition of the lookup table.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTable'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - lookupManagement
      summary: Edit a lookup table.
      description: Edit the lookup table data. All the fields are mandatory in the request.
      operationId: updateTable
      parameters:
        - name: id
          in: path
          description: Identifier of the lookup table.
          required: true
          schema:
            type: string
            example: 0000000001C41EE4
      requestBody:
        description: The configuration changes for the lookup table.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupUpdateDefinition'
        required: true
      responses:
        '200':
          description: Configuration updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTable'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - lookupManagement
      summary: Delete a lookup table.
      description: Delete a lookup table completely. <br> **Warning:** `This operation cannot be undone`.
      operationId: deleteTable
      parameters:
        - name: id
          in: path
          description: Identifier of the lookup table.
          required: true
          schema:
            type: string
            example: 0000000001C41EE4
      responses:
        '204':
          description: Deletion successful.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/lookupTables/{id}/upload:
    post:
      tags:
        - lookupManagement
      summary: Upload a CSV file.
      description: Create a request to populate a lookup table with a CSV file.
      operationId: uploadFile
      parameters:
        - name: id
          in: path
          description: Identifier of the lookup table to populate.
          required: true
          schema:
            type: string
            example: 0000000001C41EE4
        - name: merge
          in: query
          description: This indicates whether the file contents will be merged with existing data in the lookup table or not. If this is true then data with the same primary keys will be updated while the rest of the rows will be appended. By default, merge is false. The response includes a request identifier that you need to use in the [Request Status API](#operation/requestStatus) to track the status of the upload request.
          schema:
            type: boolean
            example: true
            default: false
        - name: fileEncoding
          in: query
          description: File encoding of file being uploaded.
          schema:
            type: string
            example: UTF-16
            default: UTF-8
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  type: string
                  description: |-
                    The CSV file to upload.
                      - The size limit for the CSV file is 100MB.
                      - Use Unix format, with newlines ("\n") separating rows.
                      - The first row should contain headers that match the lookup table schema. Matching is
                        case-insensitive.
                  format: binary
        required: true
      responses:
        '200':
          description: The upload request was accepted. Use the provided token in a status request to track the status of the upload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupRequestToken'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/lookupTables/jobs/{jobId}/status:
    get:
      tags:
        - lookupManagement
      summary: Get the status of an async job.
      description: Retrieve the status of a previously made request. If the request was successful, the status of the response object will be `Success`.
      operationId: requestJobStatus
      parameters:
        - name: jobId
          in: path
          description: An identifier returned in response to an asynchronous request.
          required: true
          schema:
            type: string
            example: 0000000001C41AA3
      responses:
        '200':
          description: The status of async job with given identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupAsyncJobStatus'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/lookupTables/{id}/truncate:
    post:
      tags:
        - lookupManagement
      summary: Empty a lookup table.
      description: Delete all data from a lookup table.
      operationId: truncateTable
      parameters:
        - name: id
          in: path
          description: Identifier of the table to clear.
          required: true
          schema:
            type: string
            example: 0000000001C41EE4
      responses:
        '200':
          description: The delete data request was accepted. Use the provided token in a status request to track the status of the delete.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupRequestToken'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/lookupTables/{id}/row:
    put:
      tags:
        - lookupManagement
      summary: Insert or Update a lookup table row.
      description: Insert or update a row of a lookup table with the given identifier. A new row is inserted if the primary key does not exist already, otherwise the existing row with the specified primary key is updated. All the fields of the lookup table are required and will be updated to the given values. In case a field is not specified then it will be assumed to be set to null. If the table size exceeds the maximum limit of 100MB then based on the size limit action of the table the update will be processed or discarded.
      operationId: updateTableRow
      parameters:
        - name: id
          in: path
          description: Identifier of the lookup table.
          required: true
          schema:
            type: string
            example: 0000000001C41EE4
      requestBody:
        description: Lookup table row update definition.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowUpdateDefinition'
        required: true
      responses:
        '204':
          description: Row updated successfully.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/lookupTables/{id}/deleteTableRow:
    put:
      tags:
        - lookupManagement
      summary: Delete a lookup table row.
      description: Delete a row from lookup table by providing the row's primary keys' values. The complete set of primary key fields of the lookup table should be provided.
      operationId: deleteTableRow
      parameters:
        - name: id
          in: path
          description: Identifier of the lookup table.
          required: true
          schema:
            type: string
            example: 0000000001C41EE4
      requestBody:
        description: Lookup table row delete definition.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowDeleteDefinition'
        required: true
      responses:
        '204':
          description: Row deleted successfully.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    LookupTableDefinition:
      required:
        - name
        - parentFolderId
      description: Definition of the lookup table.
      allOf:
        - $ref: '#/components/schemas/ExportableLookupTableInfo'
        - properties:
            name:
              maxLength: 255
              type: string
              description: The name of the lookup table.
              example: SampleLookupTable
            parentFolderId:
              type: string
              description: The parent-folder-path identifier of the lookup table in the Library.
              example: 0000000001C41EE4
    LookupTable:
      required:
        - id
      description: Lookup table definition and metadata.
      allOf:
        - $ref: '#/components/schemas/MetadataModel'
        - $ref: '#/components/schemas/LookupTableDefinition'
        - properties:
            id:
              type: string
              description: Identifier of the lookup table as a content item.
              example: 0000000001C41EE4
            contentPath:
              type: string
              description: 'Address/path of the parent folder of this lookup table in content library. For example, a lookup table existing  in the personal/lookupTable folder for user johndoe would be: /Library/Users/johndoe@acme.com/lookupTable'
              example: /Library/Users/johndoe@acme.com/lookupTable
            size:
              type: integer
              description: The current size of the lookup table in bytes
              format: int64
              example: 100
    ErrorResponse:
      required:
        - errors
        - id
      type: object
      properties:
        id:
          type: string
          description: An identifier for the error; this is unique to the specific API request.
          example: IUUQI-DGH5I-TJ045
        errors:
          type: array
          description: A list of one or more causes of the error.
          example:
            - code: auth:password_too_short
              message: Your password was too short.
            - code: auth:password_character_classes
              message: Your password did not contain any non-alphanumeric characters
          items:
            $ref: '#/components/schemas/ErrorDescription'
    ExportableLookupTableInfo:
      required:
        - description
        - fields
        - primaryKeys
      type: object
      properties:
        description:
          maxLength: 1000
          type: string
          description: The description of the lookup table.
          example: This is a sample lookup table description.
        fields:
          minItems: 1
          type: array
          description: The list of fields in the lookup table.
          items:
            $ref: '#/components/schemas/LookupTableField'
        primaryKeys:
          minItems: 1
          uniqueItems: true
          type: array
          description: The names of the fields that make up the primary key for the lookup table. These will be a subset of the fields that the table will contain.
          example:
            - FieldName1
          items:
            type: string
        ttl:
          maximum: 525600
          minimum: 0
          type: integer
          description: A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
          format: int32
          example: 100
          default: 0
        sizeLimitAction:
          pattern: ^(StopIncomingMessages|DeleteOldData)$
          type: string
          description: The action that needs to be taken when the size limit is reached for the table. The possible values can be `StopIncomingMessages` or `DeleteOldData`. DeleteOldData will start deleting old data once size limit is reached whereas StopIncomingMessages will discard all the updates made to the lookup table once size limit is reached.
          example: DeleteOldData
          default: StopIncomingMessages
          x-pattern-message: must be either `StopIncomingMessages` or `DeleteOldData`
      description: The lookup table definition independent of its location in the Library and name.
    MetadataModel:
      required:
        - createdAt
        - createdBy
        - modifiedAt
        - modifiedBy
      type: object
      properties:
        createdAt:
          type: string
          description: Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
          format: date-time
          example: '2018-10-16T09:10:00Z'
        createdBy:
          type: string
          description: Identifier of the user who created the resource.
          example: 0000000006743FDD
        modifiedAt:
          type: string
          description: Last modification timestamp in UTC.
          format: date-time
          example: '2018-10-16T09:10:00Z'
        modifiedBy:
          type: string
          description: Identifier of the user who last modified the resource.
          example: 0000000006743FE8
    ErrorDescription:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: An error code describing the type of error.
          example: auth:password_too_short
        message:
          type: string
          description: A short English-language description of the error.
          example: Your password was too short.
        detail:
          type: string
          description: An optional fuller English-language description of the error.
          example: Your password was 5 characters long, the minimum length is 12 characters. See http://example.com/password for more information.
        meta:
          type: object
          description: An optional list of metadata about the error.
          example:
            minLength: 12
            actualLength: 5
    LookupTableField:
      required:
        - fieldName
        - fieldType
      type: object
      properties:
        fieldName:
          type: string
          description: The name of the field.
          example: FieldName1
        fieldType:
          pattern: ^(boolean|int|long|double|string)$
          type: string
          description: |-
            The data type of the field. Supported types:
              - `boolean`
              - `int`
              - `long`
              - `double`
              - `string`
          example: boolean
          x-pattern-message: 'must be one of the following: `boolean`, `int`, `long`, `double`, `string`'
      description: The definition of the field.
    LookupUpdateDefinition:
      required:
        - description
        - ttl
      type: object
      properties:
        ttl:
          maximum: 525600
          minimum: 0
          type: integer
          description: A time to live for each entry in the lookup table (in minutes). 0 is a special value. A TTL of 0 implies entry will never be deleted from the table.
          format: int32
          example: 100
          default: 0
        description:
          maxLength: 1000
          type: string
          description: The description of the lookup table. The description cannot be blank.
          example: This is a sample lookup table description.
        sizeLimitAction:
          type: string
          description: The action that needs to be taken when the size limit is reached for the table. The possible values can be `StopIncomingMessages` or `DeleteOldData`. DeleteOldData will starting deleting old data once size limit is reached whereas StopIncomingMessages will discard all the updates made to the lookup table once size limit is reached.
          example: DeleteOldData
          default: StopIncomingMessages
      description: The updated lookup table parameters.
    LookupRequestToken:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The identifier used to track the request.
          example: 0000000001C41EF2
      description: Allows you to track the status of an upload or export request.
    LookupAsyncJobStatus:
      required:
        - createdAt
        - eventType
        - jobId
        - lookupContentId
        - lookupContentPath
        - lookupName
        - modifiedAt
        - status
        - userId
      type: object
      properties:
        jobId:
          type: string
          description: An identifier returned in response to an asynchronous request.
          example: 0000000001C41EF2
        status:
          type: string
          description: Whether or not the request is pending (`Pending`), in progress (`InProgress`), has completed successfully (`Success`), has completed partially with warnings (`PartialSuccess`) or has completed with an error (`Failed`).
        statusMessages:
          type: array
          description: Additional status messages generated if any if the status is `Success`.
          items:
            type: string
        errors:
          type: array
          description: More information about the failures, if the status is `Failed`.
          items:
            $ref: '#/components/schemas/ErrorDescription'
        warnings:
          type: array
          description: More information about the warnings, if the status is `PartialSuccess`.
          items:
            $ref: '#/components/schemas/warningDescription'
        lookupContentId:
          type: string
          description: Content id of lookup table on which this operation was performed.
          example: 0000000001C41EE4
        lookupName:
          type: string
          description: Name of lookup table on which this operation was performed.
          example: sampleLookup
        lookupContentPath:
          type: string
          description: Content path of lookup table on which this operation was performed.
          example: /Library/Users/xyz@demo.com/sampleLookup
        requestType:
          type: string
          description: |-
            Type of asynchronous request made:
              - `BulkMerge`
              - `BulkReplace`
              - `Truncate`
          example: BulkMerge
        userId:
          type: string
          description: User id of user who initiated this operation.
          example: 0000000006743FDD
        createdAt:
          type: string
          description: Creation time of this job in UTC.
          format: date-time
          example: '2018-10-16T09:10:00Z'
        modifiedAt:
          type: string
          description: Timestamp in UTC when status was last updated.
          format: date-time
          example: '2018-10-16T09:10:00Z'
      description: Lookup table async job status.
    warningDescription:
      required:
        - message
      type: object
      properties:
        message:
          type: string
          description: Description of the warning.
          example: 60 rows were dropped.
        cause:
          type: string
          description: An optional cause of this warning.
          example: Primary key values were duplicate.
      description: Warning description
    RowUpdateDefinition:
      required:
        - row
      type: object
      properties:
        row:
          maxItems: 1000
          type: array
          description: A list of all the field identifiers and their corresponding values.
          items:
            $ref: '#/components/schemas/TableRow'
      description: Lookup table data to be uploaded.
    TableRow:
      required:
        - columnName
        - columnValue
      type: object
      properties:
        columnName:
          type: string
          description: Name of the column of the table.
          example: user_id
        columnValue:
          type: string
          description: Value of the specified column.
          example: user1
      description: Lookup table row column and column value.
    RowDeleteDefinition:
      required:
        - primaryKey
      type: object
      properties:
        primaryKey:
          maxItems: 1000
          type: array
          description: A list of all the primary key field identifiers and their corresponding values which defines the row to delete.
          items:
            $ref: '#/components/schemas/TableRow'
      description: Lookup table primary key of the row to be deleted.
  parameters: {}
  responses: {}
  securitySchemes: {}
  callbacks: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  x-stackQL-resources:
    lookup_tables:
      id: sumologic.lookup_tables.lookup_tables
      name: lookup_tables
      title: Lookup_tables
      methods:
        createTable:
          operation:
            $ref: '#/paths/~1v1~1lookupTables/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        lookupTableById:
          operation:
            $ref: '#/paths/~1v1~1lookupTables~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateTable:
          operation:
            $ref: '#/paths/~1v1~1lookupTables~1{id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteTable:
          operation:
            $ref: '#/paths/~1v1~1lookupTables~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/lookup_tables/methods/createTable'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/lookup_tables/methods/deleteTable'
    upload:
      id: sumologic.lookup_tables.upload
      name: upload
      title: Upload
      methods:
        uploadFile:
          operation:
            $ref: '#/paths/~1v1~1lookupTables~1{id}~1upload/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    jobs_status:
      id: sumologic.lookup_tables.jobs_status
      name: jobs_status
      title: Jobs_status
      methods:
        requestJobStatus:
          operation:
            $ref: '#/paths/~1v1~1lookupTables~1jobs~1{jobId}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    truncate:
      id: sumologic.lookup_tables.truncate
      name: truncate
      title: Truncate
      methods:
        truncateTable:
          operation:
            $ref: '#/paths/~1v1~1lookupTables~1{id}~1truncate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    row:
      id: sumologic.lookup_tables.row
      name: row
      title: Row
      methods:
        updateTableRow:
          operation:
            $ref: '#/paths/~1v1~1lookupTables~1{id}~1row/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    delete_table_row:
      id: sumologic.lookup_tables.delete_table_row
      name: delete_table_row
      title: Delete_table_row
      methods:
        deleteTableRow:
          operation:
            $ref: '#/paths/~1v1~1lookupTables~1{id}~1deleteTableRow/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
openapi: 3.0.0
servers:
  - url: https://api.{region}.sumologic.com/api
    variables:
      region:
        description: SumoLogic region
        enum:
          - us2
          - au
          - ca
          - de
          - eu
          - fed
          - in
          - jp
        default: us2
    description: The SumoLogic regional endpoint
security:
  - basicAuth: []
tags:
  - name: accountManagement
    description: |
      Account Management API.

      Manage the custom subdomain for the URL used to access your Sumo Logic account. For more information see [Manage Organization](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization).
    x-displayName: Account
  - name: appManagement
    description: |
      App installation API.

      View and install Sumo Logic Applications that deliver out-of-the-box dashboards, saved searches, and field extraction for popular data sources. For more information see [Sumo Logic Apps](https://help.sumologic.com/07Sumo-Logic-Apps).
    x-displayName: Apps (Beta)
  - name: connectionManagement
    description: |
      Connection management API.

      Set up connections to send alerts to other tools. For more information see [Connections and Integrations](https://help.sumologic.com/?cid=1044).
    x-displayName: Connections
  - name: contentManagement
    description: |
      Content management API.

      You can export, import, delete and copy content in your organization’s Library. For more information see [Library](https://help.sumologic.com/?cid=5173). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
      <br/> <br/>
      ### Example
      The following example uses API endpoints in the US1 deployment. Sumo Logic has several deployments that are assigned depending on the geographic location and the date an account is created. For details determining your account's deployment see [API endpoints](https://help.sumologic.com/?cid=3011).
      The [Content Import API](#operation/beginAsyncImport) can be used to create or update a Search, Scheduled Search, or Dashboard. Here is an example creating a Scheduled Search:
      1. Get the identifier of your `Personal` folder.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/personal
        ```

        Find the identifier of your `Personal` folder in the response.
        ```json
        {
            ...
            "id": "0000000006A2E86F", <----
            "name": "Personal",
            "itemType": "Folder",
            ...
        }
        ```

        You can use [getFolder](#operation/getFolder), [getAdminRecommededFolder](#operation/getAdminRecommendedFolderAsync),
        or [getGlobalFolder](#operation/getGlobalFolderAsync) endpoints to traverse the content tree and find the identifier of any
        folder you want to manage.

      2. Use the [Content Import API](#operation/beginAsyncImport) to create a new Scheduled Search inside your
        `Personal` folder.
        ```bash
        curl -X POST -u "<accessId>:<accessKey>" -H "Content-Type: application/json" -d @search.json https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import
        ```

        The data file `search.json` in the above command has the following `SavedSearchWithScheduleSyncDefinition` object.
        ```json
        // file: search.json
        {
            "type": "SavedSearchWithScheduleSyncDefinition",
            "name": "demo-scheduled-search",
            "description": "Runs every hour with timerange of 15m and sends email notifications",
            "search": {
                "queryText": "\"error\" and \"warn\"",
                "defaultTimeRange": "-15m",
                "byReceiptTime": false,
                "viewName": "",
                "viewStartTime": null,
                "queryParameters": []
            },
            "searchSchedule": {
                "cronExpression": "0 0/15 * * * ? *",
                "displayableTimeRange": "-15m",
                "parseableTimeRange": {
                    "from": {
                        "relativeTime": "-15m",
                        "type": "RelativeTimeRangeBoundary"
                    },
                    "to": null,
                    "type": "BeginBoundedTimeRange"
                },
                "timeZone": "America/Los_Angeles",
                "threshold": null,
                "notification": {
                    "taskType": "EmailSearchNotificationSyncDefinition",
                    "toList": [
                        "ops@acme.org"
                    ],
                    "subjectTemplate": "Search Results: {{SearchName}}",
                    "includeQuery": true,
                    "includeResultSet": true,
                    "includeHistogram": true,
                    "includeCsvAttachment": false
                },
                "muteErrorEmails": false,
                "scheduleType": "1Hour",
                "parameters": []
            }
        }
        ```

        The response of above request will have the job identifier that you can use to track the status of the import job.
        ```json
        {
            "id": "74DC17FA765C7443"
        }
        ```

      3. Use the job identifier from the import request to get the [status](#operation/getAsyncImportStatus) of the
        import job.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import/74DC17FA765C7443/status
        ```

        If you are importing a large item, you might have to wait for the import job to finish. The following is an
        example response from a completed job.
        ```json
        {
            "status": "Success",
            "statusMessage": null,
            "error": null
        }
        ```
    x-displayName: Content
  - name: contentPermissions
    description: |
      Content permissions API.

      You can share your folders, searches, and dashboards with specific users or roles. For more information see [Share Content](https://help.sumologic.com/?cid=8675309). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Permissions
  - name: dashboardManagement
    description: |
      Dashboard (New) management API.

      Dashboard (New) allows you to analyze metric and log data on the same dashboard, in a seamless view. This gives you control over the visual display of metric and log data. Dashboard (New) streamlines dashboard configurations and on-the-fly analytic visualizations with its new templating features. For more information see [Dashboard (New)](https://help.sumologic.com/?cid=5500).
    x-displayName: Dashboard (New)
  - name: dynamicParsingRuleManagement
    description: |
      Dynamic Parsing management API.

      Dynamic Parsing allows automatic field extraction from your log messages when you run a search.  This allows you to view fields from logs without having to manually specify parsing logic. For more information  see [Dynamic Parsing](https://help.sumologic.com/?cid=20011).
    x-displayName: Dynamic Parsing
  - name: extractionRuleManagement
    description: |
      Field Extraction Rule management API.

      Field Extraction Rules allow you to parse fields from your log messages at the time the messages are ingested eliminating the need to parse fields in your query. For more information see [Manage Field Extraction](https://help.sumologic.com/?cid=5313).
    x-displayName: Field Extraction Rules
  - name: fieldManagementV1
    description: |
      Field management API.

      Fields allow you to reference log data based on meaningful associations. They act as metadata tags that are assigned to your logs so you can search with them. Each field contains a key-value pair, where the field name is the key. Fields may be referred to as Log Metadata Fields. For more information see [Fields](https://help.sumologic.com/?cid=10116).
    x-displayName: Field Management
  - name: folderManagement
    description: |
      Folder management API.

      You can add folders and subfolders to the Library in order to organize your content for easy access or to share content. For more information see [Add Folders to the Library](https://help.sumologic.com/?cid=5020). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Folders
  - name: ingestBudgetManagementV1
    description: |
      Ingest Budget management API.

      Ingest Budgets allow you to control the capacity of daily ingestion volume sent to Sumo Logic from Collectors. For more information see [Ingest Budgets](https://help.sumologic.com/?cid=5235).
    x-displayName: Ingest Budgets
  - name: ingestBudgetManagementV2
    description: |
      Ingest Budget management API V2.

      Ingest Budgets V2 provide you the ability to create and assign budgets to your log data by Fields instead of using a Field Value. For more information see [Metadata Ingest Budgets](https://help.sumologic.com/?cid=52352).
    x-displayName: Ingest Budgets V2
  - name: partitionManagement
    description: |
      Partition management API.

      Creating a Partition allows you to improve search performance by searching over a smaller number of messages. For more information see [Manage Partitions](https://help.sumologic.com/?cid=5231).
    x-displayName: Partitions
  - name: logsDataForwardingManagement
    description: |
      Logs Data Forwarding management API.

      Logs Data Forwarding allows you to forward log data from a Partition or Scheduled View to an S3 bucket. For more information see [Forwarding Data to S3](https://help.sumologic.com/Manage/Data-Forwarding/Configure-Data-Forwarding-from-Sumo-Logic-to-S3).
    x-displayName: Logs Data Forwarding
  - name: roleManagement
    description: |
      Role management API.

      Roles determine the functions that users are able to perform in Sumo Logic. To manage roles, you must have an administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Roles](https://help.sumologic.com/?cid=5234).
    x-displayName: Roles
  - name: lookupManagement
    description: |
      Lookup Table management API.

      A Lookup Table is a table of data hosted on Sumo Logic that you can use to enrich the log and event data received by Sumo Logic. You must create a table schema before you can populate the table. For more information see [Lookup Tables](https://help.sumologic.com/?cid=10109).
    x-displayName: Lookup Tables
  - name: scheduledViewManagement
    description: |
      Scheduled View management API.

      Scheduled Views speed the search process for small and historical subsets of your data by functioning as a pre-aggregated index. For more information see [Manage Scheduled Views](https://help.sumologic.com/?cid=5128).
    x-displayName: Scheduled Views
  - name: tokensLibraryManagement
    description: |
      Tokens management API.

      Tokens are associated with your organization to authorize specific operations. Currently, we support collector registration tokens, which can be used to register Installed Collectors. Managing tokens requires the Manage Tokens role capability. For more information see [Installation Tokens](https://help.sumologic.com/?cid=0100).
    x-displayName: Tokens
  - name: transformationRuleManagement
    description: |
      Transformation Rule management API.
      Metrics Transformation Rules allow you control how long raw metrics are retained. You can also aggregate metrics at collection time and specify a separate retention period for the aggregated metrics. For more information see [Metrics Transformation Rules](https://help.sumologic.com/?cid=10117).
    x-displayName: Transformation Rules (Beta)
  - name: userManagement
    description: |
      User management API.

      To manage users, you must have the administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Users](https://help.sumologic.com/?cid=1006).
    x-displayName: Users
  - name: metricsSearchesManagement
    description: |
      Metrics Search management API.

      Save metrics searches in the content library and organize them in a folder hierarchy. Share useful queries with users in your organization. For more information see [Sharing Metric Charts](https://help.sumologic.com/Metrics/03-Metric-Charts/Share_a_Metric_Chart).
    x-displayName: Metrics Searches (Beta)
  - name: metricsQuery
    description: |
      Metrics Query API.

      The Metrics Query API allows you to execute queries on various metrics and retrieve multiple time-series (data-points) over time range(s). For more information see [Metrics - Classic](https://help.sumologic.com/?cid=1079).
    x-displayName: Metrics Query
  - name: accessKeyManagement
    description: |
      Access Key management API.

      Access Keys allow you to securely register new Collectors and access Sumo Logic APIs. For more information see [Access Keys](https://help.sumologic.com/?cid=6690).
    x-displayName: Access Keys
  - name: samlConfigurationManagement
    description: |
      SAML configuration management API

      Organizations with Enterprise accounts can provision Security Assertion Markup Language (SAML) 2.0 to enable Single Sign-On (SSO) for user access to Sumo Logic. For more information see [SAML Configuration](https://help.sumologic.com/?cid=4016).
    x-displayName: SAML Configuration
  - name: serviceAllowlistManagement
    description: |
      Service Allowlist management API

      Service Allowlist Settings allow you to explicitly grant access to specific IP addresses and/or CIDR notations for logins, APIs, and dashboard access. For more information see [Service Allowlist Settings](https://help.sumologic.com/?cid=5454).
    x-displayName: Service Allowlist
  - name: healthEvents
    description: |
      Health Events management API.

      Health Events allow you to keep track of the health of your Collectors and Sources. You can use them to find and investigate common errors and warnings that are known to cause collection issues. For more information see [Health Events](https://help.sumologic.com/?cid=0020).
    x-displayName: Health Events
  - name: archiveManagement
    description: |-
      Archive Ingestion Management API.

      Archive Ingestion allows you to ingest data from Archive destinations. You can use this API to ingest data from your Archive with an existing AWS S3 Archive Source. You need the Manage or View Collectors role capability to manage or view ingestion jobs. For more information see [Archive](https://help.sumologic.com/?cid=10011).
    x-displayName: Archive Ingestion Management
  - name: logSearchesEstimatedUsage
    description: |
      Log Search Estimated Usage API.

      Gets the estimated volume of data that would be scanned for a given log search in the Infrequent data tier, over a particular time range. In the Infrequent Data Tier, you pay per query, based on the amount data scanned. You can use this endpoint to get an estimate of the total data that would be scanned before running a query, and refine your query to scan less data, as necessary. For more information see [Infrequent data tier](https://help.sumologic.com/?cid=11987).
    x-displayName: Log Search Estimated Usage
  - name: passwordPolicy
    description: |
      Password Policy Management API

      The password policy controls how user passwords are managed. The "Manage Password Policy" role capability is required to update the password policy. For more information see [how to set a password policy](https://help.sumologic.com/?cid=8595).
    x-displayName: Password Policy
  - name: policiesManagement
    description: |
      Policies management API.

      Policies control the security and share settings of your organization. For more information see [Security](https://help.sumologic.com/?cid=4041).
    x-displayName: Policies
  - name: traces
    description: |
      Traces API

      The Traces API allows you to browse traces collected in the system. You can execute queries to find traces matching provided search criteria as well as gather detailed information about individual traces and spans. For more information see [View and investigate traces](https://help.sumologic.com/Traces/View_and_investigate_traces).
    x-displayName: Traces
  - name: spanAnalytics
    description: |
      Span Analytics API

      The Span Analytics API allows you to browse spans collected in the system. You can execute queries to find individual spans matching provided search criteria as well as run aggregated span queries and retrieve their results. For more information see [Spans](https://help.sumologic.com/Traces/Spans).
    x-displayName: Span Analytics
  - name: serviceMap
    description: |
      Service Map API

      The Service Map API allows you to fetch a graph representation of the Service Map, which is a high-level view of your application environment, automatically derived from tracing data. For more information see [Service Map](https://help.sumologic.com/Traces/Service_Map_and_Dashboards#service-map).
    x-displayName: Service Map
  - name: slosLibraryManagement
    description: |
      SLO Management API.

      SLOs are used to monitor and alert on KPIs for your most important services or user experience.
    x-displayName: SLOs
  - name: monitorsLibraryManagement
    description: |
      Monitor Management API.


      Monitors continuously query your data to monitor and send notifications when specific events occur.
      For more information see [Monitors](https://help.sumologic.com/?cid=10020).
    x-displayName: Monitors
info:
  title: Sumo Logic API - lookup_tables
  description: lookupTables
  version: 1.0.0
  x-logo:
    url: ./sumologic_logo.png
