paths:
  /v1/monitors/usageInfo:
    get:
      tags:
        - monitorsLibraryManagement
      summary: Usage info of monitors.
      description: Get the current number and the allowed number of log and metrics monitors.
      operationId: getMonitorUsageInfo
      responses:
        '200':
          description: MonitorUsageInfo has been retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorUsageInfo'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/disable:
    put:
      tags:
        - monitorsLibraryManagement
      summary: Disable monitors.
      description: Bulk disable monitors by the given identifiers.
      operationId: disableMonitorByIds
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of identifiers.
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
          example: 0000000000000001,0000000000000002,0000000000000003
      responses:
        '200':
          description: Disabled monitors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisableMonitorResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors:
    get:
      tags:
        - monitorsLibraryManagement
      summary: Bulk read a monitor or folder.
      description: Bulk read a monitor or folder by the given identifiers from the monitors library.
      operationId: monitorsReadByIds
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of identifiers.
          required: true
          schema:
            type: array
            items:
              type: string
          example: 0000000000000001,0000000000000002,0000000000000003
      responses:
        '200':
          description: A map between an identifier and its definition (monitor or folder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdToMonitorsLibraryBaseResponseMap'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - monitorsLibraryManagement
      summary: |
        Create a monitor or folder.
      description: Create a monitor or folder in the monitors library.
      operationId: monitorsCreate
      parameters:
        - name: parentId
          in: query
          description: Identifier of the parent folder in which to create the monitor or folder.
          required: true
          schema:
            type: string
      requestBody:
        description: The monitor or folder to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitorsLibraryBase'
        required: true
      responses:
        '200':
          description: The monitor or folder was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - monitorsLibraryManagement
      summary: |
        Bulk delete a monitor or folder.
      description: Bulk delete a monitor or folder by the given identifiers in the monitors library.
      operationId: monitorsDeleteByIds
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of identifiers.
          required: true
          schema:
            type: array
            items:
              type: string
          example: 0000000000000001,0000000000000002,0000000000000003
      responses:
        '200':
          description: A map between the deleted identifier and its metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdToMonitorsLibraryBaseResponseMap'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/root:
    get:
      tags:
        - monitorsLibraryManagement
      summary: Get the root monitors folder.
      description: Get the root folder in the monitors library.
      operationId: getMonitorsLibraryRoot
      responses:
        '200':
          description: Root folder of the monitors library.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorsLibraryFolderResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/path:
    get:
      tags:
        - monitorsLibraryManagement
      summary: Read a monitor or folder by its path.
      description: Read a monitor or folder by its path in the monitors library structure.
      operationId: monitorsGetByPath
      parameters:
        - name: path
          in: query
          description: The path of the monitor or folder.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Requested monitor or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/search:
    get:
      tags:
        - monitorsLibraryManagement
      summary: Search for a monitor or folder.
      description: Search for a monitor or folder in the monitors library structure.
      operationId: monitorsSearch
      parameters:
        - name: query
          in: query
          description: |-
            The search query to find monitor or folder. Below is the list of different filters with examples:
              - **createdBy** : Filter by the user's identifier who created the content. Example: `createdBy:000000000000968B`.
              - **createdBefore** : Filter by the content objects created before the given timestamp(in milliseconds). Example: `createdBefore:1457997222`.
              - **createdAfter** : Filter by the content objects created after the given timestamp(in milliseconds). Example: `createdAfter:1457997111`.
              - **modifiedBefore** : Filter by the content objects modified before the given timestamp(in milliseconds). Example: `modifiedBefore:1457997222`.
              - **modifiedAfter** : Filter by the content objects modified after the given timestamp(in milliseconds). Example: `modifiedAfter:1457997111`.
              - **type** : Filter by the type of the content object. Example: `type:folder`.
              - **monitorStatus** : Filter by the status of the monitor: Normal, Critical, Warning, MissingData, Disabled, AllTriggered. Example: `monitorStatus:Normal`.

            You can also use multiple filters in one query. For example to search for all content objects created by user with identifier 000000000000968B with creation timestamp after 1457997222 containing the text Test, the query would look like:

              `createdBy:000000000000968B createdAfter:1457997222 Test`
          required: true
          schema:
            type: string
          example: createdBy:000000000000968B Test
        - name: limit
          in: query
          description: Maximum number of items you want in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
          example: 10
        - name: offset
          in: query
          description: The position or row from where to start the search operation.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 5
      responses:
        '200':
          description: List of folders and monitors matching the search query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMonitorsLibraryItemWithPath'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/{id}:
    get:
      tags:
        - monitorsLibraryManagement
      summary: Get a monitor or folder.
      description: Get a monitor or folder from the monitors library.
      operationId: monitorsReadById
      parameters:
        - name: id
          in: path
          description: Identifier of the monitor or folder to read.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Requested monitor or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - monitorsLibraryManagement
      summary: |
        Update a monitor or folder.
      description: Update a monitor or folder in the monitors library.
      operationId: monitorsUpdateById
      parameters:
        - name: id
          in: path
          description: Identifier of the monitor or folder to update.
          required: true
          schema:
            type: string
      requestBody:
        description: The monitor or folder to update. The content version must match its latest version number in the monitors library. If the version does not match it will not be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitorsLibraryBaseUpdate'
        required: true
      responses:
        '200':
          description: The monitor or folder was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - monitorsLibraryManagement
      summary: |
        Delete a monitor or folder.
      description: Delete a monitor or folder from the monitors library.
      operationId: monitorsDeleteById
      parameters:
        - name: id
          in: path
          description: Identifier of the monitor or folder to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The monitor or folder was successfully deleted.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/{id}/path:
    get:
      tags:
        - monitorsLibraryManagement
      summary: Get the path of a monitor or folder.
      description: Get the full path of the monitor or folder in the monitors library.
      operationId: getMonitorsFullPath
      parameters:
        - name: id
          in: path
          description: Identifier of the monitor or folder.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Full path of the monitor or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Path'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/{id}/move:
    post:
      tags:
        - monitorsLibraryManagement
      summary: Move a monitor or folder.
      description: Move a monitor or folder to a different location in the monitors library.
      operationId: monitorsMove
      parameters:
        - name: id
          in: path
          description: Identifier of the monitor or folder to move.
          required: true
          schema:
            type: string
        - name: parentId
          in: query
          description: Identifier of the parent folder to move the monitor or folder to.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Moved monitor or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/{id}/copy:
    post:
      tags:
        - monitorsLibraryManagement
      summary: Copy a monitor or folder.
      description: Copy a monitor or folder in the monitors library.
      operationId: monitorsCopy
      parameters:
        - name: id
          in: path
          description: Identifier of the monitor or folder to copy.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          Fields include:
            1) Identifier of the parent folder to copy to.
            2) Optionally provide a new name.
            3) Optionally provide a new description.
            4) Optionally set to true if you want to copy and preserve the locked status. Requires `LockMonitors` capability.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentCopyParams'
        required: true
      responses:
        '200':
          description: The monitor or folder was copied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/{id}/export:
    get:
      tags:
        - monitorsLibraryManagement
      summary: Export a monitor or folder.
      description: Export a monitor or folder. If the given identifier is a folder, everything under the folder is exported recursively with folder as the root.
      operationId: monitorsExportItem
      parameters:
        - name: id
          in: path
          description: Identifier of the monitor or folder to export.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Exported monitor or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorsLibraryBaseExport'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/{parentId}/import:
    post:
      tags:
        - monitorsLibraryManagement
      summary: Import a monitor or folder.
      description: Import a monitor or folder.
      operationId: monitorsImportItem
      parameters:
        - name: parentId
          in: path
          description: Identifier of the parent folder in which to import the monitor or folder.
          required: true
          schema:
            type: string
      requestBody:
        description: The monitor or folder to be imported.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitorsLibraryBaseExport'
        required: true
      responses:
        '200':
          description: 'Newly imported monitor or folder. NOTE: Permissions field will not be filled (empty list).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/{id}/permissions:
    get:
      tags:
        - monitorsLibraryManagement
      summary: |
        List explicit permissions on monitor or folder.
      description: List explicit permissions on monitor or folder in the monitors library.
      operationId: monitorsReadPermissionsById
      parameters:
        - name: id
          in: path
          description: Identifier of the monitor or folder to list permissions.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The list of explicit permission statements for the monitor or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPermissionsResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/permissions/set:
    put:
      tags:
        - monitorsLibraryManagement
      summary: |
        Set permissions on monitor or folder.
      description: Set permissions on monitor or folder in the monitors library.
      operationId: monitorsSetPermissions
      requestBody:
        description: The permission statement definitions to set.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionStatementDefinitions'
        required: true
      responses:
        '200':
          description: List of the successfully set `PermissionStatements`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionStatements'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/permissions/revoke:
    put:
      tags:
        - monitorsLibraryManagement
      summary: |
        Revoke all permissions on monitor or folder.
      description: Revoke all permissions on monitor or folder in the monitors library.
      operationId: monitorsRevokePermissions
      requestBody:
        description: The identifiers of the permissions statements to revoke.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionIdentifiers'
        required: true
      responses:
        '204':
          description: Permissions were successfully revoked for monitor or folder.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitors/{id}/permissionSummariesBySubjects:
    get:
      tags:
        - monitorsLibraryManagement
      summary: |
        List permission summaries for a monitor or folder.
      description: List permission summary meta(s) grouped by subjects on monitor or folder in the monitors library.
      operationId: monitorsReadPermissionSummariesByIdGroupBySubjects
      parameters:
        - name: id
          in: path
          description: Identifier of the monitor or folder to list permissions.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The list of permission summary meta(s) grouped by subjects for the monitor or folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionSummariesBySubjects'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    MonitorUsageInfo:
      type: array
      description: The usage info of logs and metrics monitors.
      items:
        $ref: '#/components/schemas/MonitorUsage'
    ErrorResponse:
      required:
        - errors
        - id
      type: object
      properties:
        id:
          type: string
          description: An identifier for the error; this is unique to the specific API request.
          example: IUUQI-DGH5I-TJ045
        errors:
          type: array
          description: A list of one or more causes of the error.
          example:
            - code: auth:password_too_short
              message: Your password was too short.
            - code: auth:password_character_classes
              message: Your password did not contain any non-alphanumeric characters
          items:
            $ref: '#/components/schemas/ErrorDescription'
    MonitorUsage:
      properties:
        monitorType:
          type: string
          description: The type of monitor usage info (Logs or Metrics).
          example: Logs
          enum:
            - Logs
            - Metrics
        usage:
          type: integer
          description: Current number of active Logs/Metrics monitors.
          example: 100
        limit:
          type: integer
          description: The limit of active Logs/Metrics monitors.
          example: 100
        total:
          type: integer
          description: The total number of monitors created. (Including both active and disabled Logs/Metrics monitors)
          example: 100
      description: The usage info of monitors.
    ErrorDescription:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: An error code describing the type of error.
          example: auth:password_too_short
        message:
          type: string
          description: A short English-language description of the error.
          example: Your password was too short.
        detail:
          type: string
          description: An optional fuller English-language description of the error.
          example: Your password was 5 characters long, the minimum length is 12 characters. See http://example.com/password for more information.
        meta:
          type: object
          description: An optional list of metadata about the error.
          example:
            minLength: 12
            actualLength: 5
    DisableMonitorResponse:
      type: object
      properties:
        monitors:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MonitorsLibraryMonitorResponse'
          description: A map between an identifier and its monitor.
        warnings:
          type: array
          description: Warnings from the operation.
          items:
            $ref: '#/components/schemas/DisableMonitorWarning'
      description: Response for disabling monitors.
    MonitorsLibraryMonitorResponse:
      allOf:
        - $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
        - required:
            - monitorType
            - queries
            - triggers
          type: object
          properties:
            monitorType:
              pattern: ^(Logs|Metrics|Slo)$
              type: string
              description: |-
                The type of monitor. Valid values:
                  1. `Logs`: A logs query monitor.
                  2. `Metrics`: A metrics query monitor.
                  3. `Slo`: A SLO based monitor. Currently SLO based monitor is available in closed beta (Notify your Sumo Logic representative in order to get the early access).
              example: Logs
              x-pattern-message: should be 'Logs' or 'Metrics' or 'Slo'
            evaluationDelay:
              type: string
              description: The delay duration for evaluating the monitor (relative to current time). The timerange of monitor will be shifted in the past by this delay time.
              example: 5m
              default: 0m
            alertName:
              type: string
              description: The name of the alert(s) triggered from this monitor. Monitor name will be used if not specified.
            queries:
              uniqueItems: true
              type: array
              description: All queries from the monitor.
              items:
                $ref: '#/components/schemas/MonitorQuery'
            triggers:
              type: array
              description: Defines the conditions of when to send notifications.
              example:
                - detectionMethod: StaticCondition
                  timeRange: 15m
                  triggerType: Critical
                  threshold: 50
                  thresholdType: GreaterThanOrEqual
                  occurrenceType: ResultCount
                  triggerSource: AllResults
                - detectionMethod: StaticCondition
                  timeRange: 15m
                  triggerType: ResolvedCritical
                  threshold: 50
                  thresholdType: LessThan
                  occurrenceType: ResultCount
                  triggerSource: AllResults
              items:
                $ref: '#/components/schemas/TriggerCondition'
            notifications:
              type: array
              description: The notifications the monitor will send when the respective trigger condition is met.
              example:
                - notification:
                    connectionType: Slack
                    connectionId: '0000000000000005'
                  runForTriggerTypes:
                    - Critical
                - notification:
                    connectionType: Email
                    messageBody: Alert Triggered!
                    recipients:
                      - john@doe.com
                    subject: 'Monitor Alert: {{TriggerType}} on {{SearchName}}'
                    timeZone: America/Los_Angeles
                  runForTriggerTypes:
                    - Critical
              items:
                $ref: '#/components/schemas/MonitorNotification'
              default: []
            isDisabled:
              type: boolean
              description: Whether or not the monitor is disabled. Disabled monitors will not run, and will not generate or send notifications.
              example: false
              default: false
            status:
              uniqueItems: true
              type: array
              description: |-
                The current status of the monitor. Each monitor can have one or more status values. Valid values:
                  1. `Normal`: The monitor is running normally and does not have any currently triggered conditions.
                  2. `Critical`: The Critical trigger condition has been met.
                  3. `Warning`: The Warning trigger condition has been met.
                  4. `MissingData`: The MissingData trigger condition has been met.
                  5. `Disabled`: The monitor has been disabled and is not currently running.
              example: '[Normal]'
              items:
                type: string
            groupNotifications:
              type: boolean
              description: Whether or not to group notifications for individual items that meet the trigger condition.
              example: true
              default: true
            warnings:
              type: object
              additionalProperties:
                type: string
              description: Monitor manager warnings
            playbook:
              maxLength: 4096
              type: string
              description: Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.
              example: This issue typically happens when database calls are timing out. Look at ServiceA's dashboard to investigate further
              default: ''
    DisableMonitorWarning:
      type: object
      properties:
        code:
          type: string
          description: A code for the warning message.
          example: content:not_found
        message:
          type: string
          description: A short message with details about the warning.
          example: Monitor id=0000000000000001 not found.
      description: Warning object from the operation providing details such as when a given monitor to disable does not exist.
    MonitorsLibraryBaseResponse:
      required:
        - contentType
        - createdAt
        - createdBy
        - description
        - id
        - isMutable
        - isSystem
        - modifiedAt
        - modifiedBy
        - name
        - parentId
        - type
        - version
      type: object
      properties:
        id:
          type: string
          description: Identifier of the monitor or folder.
        name:
          type: string
          description: Identifier of the monitor or folder.
        description:
          type: string
          description: Description of the monitor or folder.
        version:
          type: integer
          description: Version of the monitor or folder.
          format: int64
        createdAt:
          type: string
          description: Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
          format: date-time
        createdBy:
          type: string
          description: Identifier of the user who created the resource.
        modifiedAt:
          type: string
          description: Last modification timestamp in UTC.
          format: date-time
        modifiedBy:
          type: string
          description: Identifier of the user who last modified the resource.
        parentId:
          type: string
          description: Identifier of the parent folder.
        contentType:
          type: string
          description: |-
            Type of the content. Valid values:
              1) Monitor
              2) Folder
        type:
          type: string
          description: Type of the object model.
        isSystem:
          type: boolean
          description: System objects are objects provided by Sumo Logic. System objects can only be localized. Non-local fields can't be updated.
        isMutable:
          type: boolean
          description: Immutable objects are "READ-ONLY".
        permissions:
          type: array
          description: Aggregated permission summary for the calling user. If detailed permission statements are required, please call list permissions endpoint.
          example:
            - Read
            - Delete
          items:
            type: string
      discriminator:
        propertyName: type
    MonitorQuery:
      required:
        - query
        - rowId
      type: object
      properties:
        rowId:
          type: string
          description: The unique identifier of the row. Defaults to sequential capital letters, `A`, `B`, `C`, etc.
          example: A
        query:
          type: string
          description: The logs or metrics query that defines the stream of data the monitor runs on.
          example: _sourceCategory=search error
      description: A search query.
    TriggerCondition:
      required:
        - triggerType
      type: object
      properties:
        detectionMethod:
          pattern: ^(StaticCondition|LogsStaticCondition|MetricsStaticCondition|LogsOutlierCondition|MetricsOutlierCondition|LogsMissingDataCondition|MetricsMissingDataCondition|SloSliCondition|SloBurnRateCondition)$
          type: string
          description: |-
            Detection method of the trigger condition. Valid values:
              1. `StaticCondition`: A condition that triggers based off of a static threshold. This `detectionMethod` is deprecated, it is recommended to use other ones instead.
              2. `LogsStaticCondition`: A logs condition that triggers based off of a static threshold.
              3. `MetricsStaticCondition`: A metrics condition that triggers based off of a static threshold.
              4. `LogsOutlierCondition`: A logs condition that triggers based off of a dynamic outlier threshold.
              5. `MetricsOutlierCondition`: A metrics condition that triggers based off of a dynamic outlier threshold.
              6. `LogsMissingDataCondition`: A logs missing data condition that triggers based off of no data available.
              7. `MetricsMissingDataCondition`: A metrics missing data condition that triggers based off of no data available.
              8. `SloSliCondition`: An SLO condition that triggers based off of current SLI value.
              9. `SloBurnRateCondition`: An SLO condition that triggers based off of error budget burn rate.
          example: StaticCondition
          default: StaticCondition
          x-pattern-message: 'should be one of the following: ''StaticCondition'', ''LogsStaticCondition'', ''MetricsStaticCondition'', ''LogsOutlierCondition'', ''MetricsOutlierCondition'', ''LogsMissingDataCondition'', ''MetricsMissingDataCondition'', ''SloSliCondition'', ''SloBurnRateCondition'''
        triggerType:
          pattern: ^(Critical|Warning|MissingData|ResolvedCritical|ResolvedWarning|ResolvedMissingData)$
          type: string
          description: |-
            The type of trigger condition. Valid values:
              1. `Critical`: A critical condition to trigger on.
              2. `Warning`: A warning condition to trigger on.
              3. `MissingData`: A condition that indicates data is missing.
              4. `ResolvedCritical`: A condition to resolve a Critical trigger on.
              5. `ResolvedWarning`: A condition to resolve a Warning trigger on.
              6. `ResolvedMissingData`: A condition to resolve a MissingData trigger.
          example: Critical
          x-pattern-message: 'should be one of the following: ''Critical'', ''Warning'', ''MissingData'', ''ResolvedCritical'', ''ResolvedWarning'', or ''ResolvedMissingData'''
        resolutionWindow:
          type: string
          description: 'The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used. Valid values are: `0m`, `-5m`, `-10m`, `-15m`, `-30m`, `-1h`, `-3h`, `-6h`, `-12h`, or `-24h`'
          nullable: true
          example: '-5m'
      discriminator:
        propertyName: detectionMethod
    MonitorNotification:
      required:
        - notification
        - runForTriggerTypes
      type: object
      properties:
        notification:
          $ref: '#/components/schemas/Action'
        runForTriggerTypes:
          uniqueItems: true
          type: array
          description: The trigger types assigned to send this notification.
          items:
            type: string
    Action:
      required:
        - connectionType
      type: object
      properties:
        connectionType:
          pattern: ^(Email|AWSLambda|AzureFunctions|Datadog|HipChat|Jira|NewRelic|Opsgenie|PagerDuty|Slack|MicrosoftTeams|ServiceNow|SumoCloudSOAR|Webhook)$
          type: string
          description: |-
            Connection type of the connection. Valid values:
              1.  `Email`
              2.  `AWSLambda`
              3.  `AzureFunctions`
              4.  `Datadog`
              5.  `HipChat`
              6.  `Jira`
              7.  `NewRelic`
              8.  `Opsgenie`
              9.  `PagerDuty`
              10. `Slack`
              11. `MicrosoftTeams`
              12. `ServiceNow`
              13. `SumoCloudSOAR`
              14. `Webhook`
          x-pattern-message: 'should be one of the following: ''Email'', ''AWSLambda'', ''AzureFunctions'', ''Datadog'', ''HipChat'', ''Jira'', ''NewRelic'', ''Opsgenie'', ''PagerDuty'', ''Slack'', ''MicrosoftTeams'', ''ServiceNow'', ''SumoCloudSOAR'' and ''Webhook'''
      description: The base class of all connection types.
      discriminator:
        propertyName: connectionType
    IdToMonitorsLibraryBaseResponseMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
    MonitorsLibraryBase:
      required:
        - name
        - type
      type: object
      properties:
        name:
          type: string
          description: Name of the monitor or folder.
        description:
          type: string
          description: Description of the monitor or folder.
          default: ''
        type:
          type: string
          description: |-
            Type of the object model. Valid values:
              1) MonitorsLibraryMonitor
              2) MonitorsLibraryFolder
      discriminator:
        propertyName: type
    MonitorsLibraryFolderResponse:
      allOf:
        - $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
        - required:
            - children
            - permissions
          type: object
          properties:
            permissions:
              type: array
              description: Aggregated permission summary for the calling user. If detailed permission statements are required, please call list permissions endpoint.
              example:
                - Read
                - Delete
              items:
                type: string
            children:
              type: array
              description: 'Children of the folder. NOTE: Permissions field will not be filled (empty list) for children.'
              items:
                $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
    ListMonitorsLibraryItemWithPath:
      type: array
      description: Multi-type list of types monitor or folder.
      items:
        $ref: '#/components/schemas/MonitorsLibraryItemWithPath'
    MonitorsLibraryItemWithPath:
      required:
        - item
        - path
      type: object
      properties:
        item:
          $ref: '#/components/schemas/MonitorsLibraryBaseResponse'
        path:
          type: string
          description: Path of the monitor or folder.
          example: /Monitors/SampleFolder/TestMonitor
    MonitorsLibraryBaseUpdate:
      required:
        - name
        - type
        - version
      type: object
      properties:
        name:
          type: string
          description: The name of the monitor or folder.
        description:
          type: string
          description: The description of the monitor or folder.
          default: ''
        version:
          type: integer
          description: The version of the monitor or folder.
          format: int64
        type:
          type: string
          description: Type of the object model.
      discriminator:
        propertyName: type
    Path:
      required:
        - path
        - pathItems
      type: object
      properties:
        pathItems:
          type: array
          description: Elements of the path.
          items:
            $ref: '#/components/schemas/PathItem'
        path:
          type: string
          description: String representation of the path.
    PathItem:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: Identifier of the path element.
        name:
          type: string
          description: Name of the path element.
    ContentCopyParams:
      required:
        - parentId
      type: object
      properties:
        parentId:
          type: string
          description: Identifier of the parent folder to copy to.
        name:
          type: string
          description: Optionally provide a new name.
        description:
          type: string
          description: Optionally provide a new description.
    MonitorsLibraryBaseExport:
      required:
        - name
        - type
      type: object
      properties:
        name:
          type: string
          description: Name of the monitor or folder.
        description:
          type: string
          description: Description of the monitor or folder.
        type:
          type: string
          description: Type of the object model.
      discriminator:
        propertyName: type
    ListPermissionsResponse:
      required:
        - permissionStatements
      type: object
      properties:
        permissionStatements:
          type: array
          description: A list of permission statements.
          items:
            $ref: '#/components/schemas/PermissionStatement'
    PermissionStatement:
      allOf:
        - $ref: '#/components/schemas/PermissionStatementDefinition'
        - $ref: '#/components/schemas/MetadataModel'
    PermissionStatementDefinition:
      allOf:
        - $ref: '#/components/schemas/Permissions'
        - required:
            - subjectId
            - subjectType
            - targetId
          type: object
          properties:
            subjectType:
              pattern: ^(role|org)$
              type: string
              description: 'Type of subject for the permission. Valid values are: `role` or `org`.'
              example: role
              x-pattern-message: 'must be one of the following: `role` or `org`'
            subjectId:
              type: string
              description: The identifier that belongs to the subject type chosen above. For e.g. if the subjectType is set to `role`, subjectId should be the identifier of a role.  Similarly, if the subjectType is `org`, the subjectId should be the identifier of the same org,  which owns the resource target.
              example: 0000000006743FDA
            targetId:
              type: string
              description: The identifier that belongs to the resource this permission assignment applies to.
              example: 0000000006743FE2
    MetadataModel:
      required:
        - createdAt
        - createdBy
        - modifiedAt
        - modifiedBy
      type: object
      properties:
        createdAt:
          type: string
          description: Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
          format: date-time
          example: '2018-10-16T09:10:00Z'
        createdBy:
          type: string
          description: Identifier of the user who created the resource.
          example: 0000000006743FDD
        modifiedAt:
          type: string
          description: Last modification timestamp in UTC.
          format: date-time
          example: '2018-10-16T09:10:00Z'
        modifiedBy:
          type: string
          description: Identifier of the user who last modified the resource.
          example: 0000000006743FE8
    Permissions:
      required:
        - permissions
      type: object
      properties:
        permissions:
          type: array
          description: List of permissions.
          example:
            - Read
            - Delete
          items:
            type: string
    PermissionStatementDefinitions:
      required:
        - permissionStatementDefinitions
      type: object
      properties:
        permissionStatementDefinitions:
          maxItems: 1000
          minItems: 1
          type: array
          description: List of permission statement definitions.
          items:
            $ref: '#/components/schemas/PermissionStatementDefinition'
    PermissionStatements:
      required:
        - permissionStatements
      type: object
      properties:
        permissionStatements:
          type: array
          description: A list of permission statements.
          items:
            $ref: '#/components/schemas/PermissionStatement'
    PermissionIdentifiers:
      required:
        - permissionIdentifiers
      type: object
      properties:
        permissionIdentifiers:
          maxItems: 1000
          minItems: 1
          type: array
          description: List of permission identifiers.
          items:
            $ref: '#/components/schemas/PermissionIdentifier'
    PermissionIdentifier:
      allOf:
        - $ref: '#/components/schemas/PermissionSubject'
        - required:
            - targetId
          type: object
          properties:
            targetId:
              type: string
              description: The identifier that belongs to the resource this permission assignment applies to.
              example: 0000000006743FE2
    PermissionSubject:
      required:
        - subjectId
        - subjectType
      type: object
      properties:
        subjectType:
          pattern: ^(user|role|org)$
          type: string
          description: 'Type of subject for the permission. Valid values are: `user` or `role` or `org`.'
          example: role
          x-pattern-message: 'must be one of the following: `user`, `role`, `org`'
        subjectId:
          type: string
          description: The identifier that belongs to the subject type chosen above. For e.g. if the subjectType is set to `user`, subjectId should be the identifier of a user (same goes for `role` or `org` subjectType).
          example: 0000000006743FDA
      description: Identifier for the entity (subject) that is granted the permission on resource(s).
    PermissionSummariesBySubjects:
      required:
        - permissionSummariesBySubjects
      type: object
      properties:
        permissionSummariesBySubjects:
          type: array
          description: A list of PermissionSubjects and PermissionSummaryMeta(s) associated with each subject.
          items:
            $ref: '#/components/schemas/PermissionSummaryBySubjects'
    PermissionSummaryBySubjects:
      description: A list of PermissionSubjects and PermissionSummaryMeta(s) associated with each subject.
      allOf:
        - $ref: '#/components/schemas/PermissionSubject'
        - required:
            - permissionSummaries
          type: object
          properties:
            permissionSummaries:
              type: array
              items:
                $ref: '#/components/schemas/PermissionSummaryMeta'
    PermissionSummaryMeta:
      required:
        - isExplicit
        - isInherited
        - isRecursive
        - isRevoked
        - isSystemDefined
        - name
      type: object
      properties:
        name:
          type: string
          description: 'Name of the permission. Example values are: `Read`, `Update`, `Create`, etc.'
          example: Read
        isInherited:
          type: boolean
          description: A true value implies that the permission is inherited from some ancestors of the resource. A false value implies that the permission is explicitly assigned to the resource.
          example: true
        isExplicit:
          type: boolean
          description: A true value implies that the permission is explicitly assigned to the resource. A false value implies that the permission is not explicitly assigned to the resource.
          example: true
        isRevoked:
          type: boolean
          description: A true value implies that the capability required for this permission has been revoked.
          example: true
        isRecursive:
          type: boolean
          description: A true value implies that the permission is recursively cascaded down to all the direct and indirect children of the resource.
          example: true
        isSystemDefined:
          type: boolean
          description: A true value implies that the permission is defined by the system on the resource and can not be modified by the user. A false value implies that the permission is defined by the user on the resource and can be modified by the user.
          example: true
      description: Permission Summary with additional information like inheritance, revocation, etc about the permission.
  parameters: {}
  responses: {}
  securitySchemes: {}
  callbacks: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  x-stackQL-resources:
    usage_info:
      id: sumologic.monitors.usage_info
      name: usage_info
      title: Usage_info
      methods:
        getMonitorUsageInfo:
          operation:
            $ref: '#/paths/~1v1~1monitors~1usageInfo/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/usage_info/methods/getMonitorUsageInfo'
        insert: []
        update: []
        delete: []
    disable:
      id: sumologic.monitors.disable
      name: disable
      title: Disable
      methods:
        disableMonitorByIds:
          operation:
            $ref: '#/paths/~1v1~1monitors~1disable/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    monitors:
      id: sumologic.monitors.monitors
      name: monitors
      title: Monitors
      methods:
        monitorsReadByIds:
          operation:
            $ref: '#/paths/~1v1~1monitors/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        monitorsCreate:
          operation:
            $ref: '#/paths/~1v1~1monitors/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        monitorsDeleteByIds:
          operation:
            $ref: '#/paths/~1v1~1monitors/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        monitorsReadById:
          operation:
            $ref: '#/paths/~1v1~1monitors~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        monitorsUpdateById:
          operation:
            $ref: '#/paths/~1v1~1monitors~1{id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        monitorsDeleteById:
          operation:
            $ref: '#/paths/~1v1~1monitors~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    root:
      id: sumologic.monitors.root
      name: root
      title: Root
      methods:
        getMonitorsLibraryRoot:
          operation:
            $ref: '#/paths/~1v1~1monitors~1root/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/root/methods/getMonitorsLibraryRoot'
        insert: []
        update: []
        delete: []
    path:
      id: sumologic.monitors.path
      name: path
      title: Path
      methods:
        monitorsGetByPath:
          operation:
            $ref: '#/paths/~1v1~1monitors~1path/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getMonitorsFullPath:
          operation:
            $ref: '#/paths/~1v1~1monitors~1{id}~1path/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/path/methods/getMonitorsFullPath'
        insert: []
        update: []
        delete: []
    search:
      id: sumologic.monitors.search
      name: search
      title: Search
      methods:
        monitorsSearch:
          operation:
            $ref: '#/paths/~1v1~1monitors~1search/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    move:
      id: sumologic.monitors.move
      name: move
      title: Move
      methods:
        monitorsMove:
          operation:
            $ref: '#/paths/~1v1~1monitors~1{id}~1move/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    copy:
      id: sumologic.monitors.copy
      name: copy
      title: Copy
      methods:
        monitorsCopy:
          operation:
            $ref: '#/paths/~1v1~1monitors~1{id}~1copy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    export:
      id: sumologic.monitors.export
      name: export
      title: Export
      methods:
        monitorsExportItem:
          operation:
            $ref: '#/paths/~1v1~1monitors~1{id}~1export/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    import:
      id: sumologic.monitors.import
      name: import
      title: Import
      methods:
        monitorsImportItem:
          operation:
            $ref: '#/paths/~1v1~1monitors~1{parentId}~1import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    permissions:
      id: sumologic.monitors.permissions
      name: permissions
      title: Permissions
      methods:
        monitorsReadPermissionsById:
          operation:
            $ref: '#/paths/~1v1~1monitors~1{id}~1permissions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    permissions_set:
      id: sumologic.monitors.permissions_set
      name: permissions_set
      title: Permissions_set
      methods:
        monitorsSetPermissions:
          operation:
            $ref: '#/paths/~1v1~1monitors~1permissions~1set/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    permissions_revoke:
      id: sumologic.monitors.permissions_revoke
      name: permissions_revoke
      title: Permissions_revoke
      methods:
        monitorsRevokePermissions:
          operation:
            $ref: '#/paths/~1v1~1monitors~1permissions~1revoke/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    permission_summaries_by_subjects:
      id: sumologic.monitors.permission_summaries_by_subjects
      name: permission_summaries_by_subjects
      title: Permission_summaries_by_subjects
      methods:
        monitorsReadPermissionSummariesByIdGroupBySubjects:
          operation:
            $ref: '#/paths/~1v1~1monitors~1{id}~1permissionSummariesBySubjects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
openapi: 3.0.0
servers:
  - url: https://api.{region}.sumologic.com/api
    variables:
      region:
        description: SumoLogic region
        enum:
          - us2
          - au
          - ca
          - de
          - eu
          - fed
          - in
          - jp
        default: us2
    description: The SumoLogic regional endpoint
security:
  - basicAuth: []
tags:
  - name: accountManagement
    description: |
      Account Management API.

      Manage the custom subdomain for the URL used to access your Sumo Logic account. For more information see [Manage Organization](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization).
    x-displayName: Account
  - name: appManagement
    description: |
      App installation API.

      View and install Sumo Logic Applications that deliver out-of-the-box dashboards, saved searches, and field extraction for popular data sources. For more information see [Sumo Logic Apps](https://help.sumologic.com/07Sumo-Logic-Apps).
    x-displayName: Apps (Beta)
  - name: connectionManagement
    description: |
      Connection management API.

      Set up connections to send alerts to other tools. For more information see [Connections and Integrations](https://help.sumologic.com/?cid=1044).
    x-displayName: Connections
  - name: contentManagement
    description: |
      Content management API.

      You can export, import, delete and copy content in your organization’s Library. For more information see [Library](https://help.sumologic.com/?cid=5173). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
      <br/> <br/>
      ### Example
      The following example uses API endpoints in the US1 deployment. Sumo Logic has several deployments that are assigned depending on the geographic location and the date an account is created. For details determining your account's deployment see [API endpoints](https://help.sumologic.com/?cid=3011).
      The [Content Import API](#operation/beginAsyncImport) can be used to create or update a Search, Scheduled Search, or Dashboard. Here is an example creating a Scheduled Search:
      1. Get the identifier of your `Personal` folder.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/personal
        ```

        Find the identifier of your `Personal` folder in the response.
        ```json
        {
            ...
            "id": "0000000006A2E86F", <----
            "name": "Personal",
            "itemType": "Folder",
            ...
        }
        ```

        You can use [getFolder](#operation/getFolder), [getAdminRecommededFolder](#operation/getAdminRecommendedFolderAsync),
        or [getGlobalFolder](#operation/getGlobalFolderAsync) endpoints to traverse the content tree and find the identifier of any
        folder you want to manage.

      2. Use the [Content Import API](#operation/beginAsyncImport) to create a new Scheduled Search inside your
        `Personal` folder.
        ```bash
        curl -X POST -u "<accessId>:<accessKey>" -H "Content-Type: application/json" -d @search.json https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import
        ```

        The data file `search.json` in the above command has the following `SavedSearchWithScheduleSyncDefinition` object.
        ```json
        // file: search.json
        {
            "type": "SavedSearchWithScheduleSyncDefinition",
            "name": "demo-scheduled-search",
            "description": "Runs every hour with timerange of 15m and sends email notifications",
            "search": {
                "queryText": "\"error\" and \"warn\"",
                "defaultTimeRange": "-15m",
                "byReceiptTime": false,
                "viewName": "",
                "viewStartTime": null,
                "queryParameters": []
            },
            "searchSchedule": {
                "cronExpression": "0 0/15 * * * ? *",
                "displayableTimeRange": "-15m",
                "parseableTimeRange": {
                    "from": {
                        "relativeTime": "-15m",
                        "type": "RelativeTimeRangeBoundary"
                    },
                    "to": null,
                    "type": "BeginBoundedTimeRange"
                },
                "timeZone": "America/Los_Angeles",
                "threshold": null,
                "notification": {
                    "taskType": "EmailSearchNotificationSyncDefinition",
                    "toList": [
                        "ops@acme.org"
                    ],
                    "subjectTemplate": "Search Results: {{SearchName}}",
                    "includeQuery": true,
                    "includeResultSet": true,
                    "includeHistogram": true,
                    "includeCsvAttachment": false
                },
                "muteErrorEmails": false,
                "scheduleType": "1Hour",
                "parameters": []
            }
        }
        ```

        The response of above request will have the job identifier that you can use to track the status of the import job.
        ```json
        {
            "id": "74DC17FA765C7443"
        }
        ```

      3. Use the job identifier from the import request to get the [status](#operation/getAsyncImportStatus) of the
        import job.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import/74DC17FA765C7443/status
        ```

        If you are importing a large item, you might have to wait for the import job to finish. The following is an
        example response from a completed job.
        ```json
        {
            "status": "Success",
            "statusMessage": null,
            "error": null
        }
        ```
    x-displayName: Content
  - name: contentPermissions
    description: |
      Content permissions API.

      You can share your folders, searches, and dashboards with specific users or roles. For more information see [Share Content](https://help.sumologic.com/?cid=8675309). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Permissions
  - name: dashboardManagement
    description: |
      Dashboard (New) management API.

      Dashboard (New) allows you to analyze metric and log data on the same dashboard, in a seamless view. This gives you control over the visual display of metric and log data. Dashboard (New) streamlines dashboard configurations and on-the-fly analytic visualizations with its new templating features. For more information see [Dashboard (New)](https://help.sumologic.com/?cid=5500).
    x-displayName: Dashboard (New)
  - name: dynamicParsingRuleManagement
    description: |
      Dynamic Parsing management API.

      Dynamic Parsing allows automatic field extraction from your log messages when you run a search.  This allows you to view fields from logs without having to manually specify parsing logic. For more information  see [Dynamic Parsing](https://help.sumologic.com/?cid=20011).
    x-displayName: Dynamic Parsing
  - name: extractionRuleManagement
    description: |
      Field Extraction Rule management API.

      Field Extraction Rules allow you to parse fields from your log messages at the time the messages are ingested eliminating the need to parse fields in your query. For more information see [Manage Field Extraction](https://help.sumologic.com/?cid=5313).
    x-displayName: Field Extraction Rules
  - name: fieldManagementV1
    description: |
      Field management API.

      Fields allow you to reference log data based on meaningful associations. They act as metadata tags that are assigned to your logs so you can search with them. Each field contains a key-value pair, where the field name is the key. Fields may be referred to as Log Metadata Fields. For more information see [Fields](https://help.sumologic.com/?cid=10116).
    x-displayName: Field Management
  - name: folderManagement
    description: |
      Folder management API.

      You can add folders and subfolders to the Library in order to organize your content for easy access or to share content. For more information see [Add Folders to the Library](https://help.sumologic.com/?cid=5020). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Folders
  - name: ingestBudgetManagementV1
    description: |
      Ingest Budget management API.

      Ingest Budgets allow you to control the capacity of daily ingestion volume sent to Sumo Logic from Collectors. For more information see [Ingest Budgets](https://help.sumologic.com/?cid=5235).
    x-displayName: Ingest Budgets
  - name: ingestBudgetManagementV2
    description: |
      Ingest Budget management API V2.

      Ingest Budgets V2 provide you the ability to create and assign budgets to your log data by Fields instead of using a Field Value. For more information see [Metadata Ingest Budgets](https://help.sumologic.com/?cid=52352).
    x-displayName: Ingest Budgets V2
  - name: partitionManagement
    description: |
      Partition management API.

      Creating a Partition allows you to improve search performance by searching over a smaller number of messages. For more information see [Manage Partitions](https://help.sumologic.com/?cid=5231).
    x-displayName: Partitions
  - name: logsDataForwardingManagement
    description: |
      Logs Data Forwarding management API.

      Logs Data Forwarding allows you to forward log data from a Partition or Scheduled View to an S3 bucket. For more information see [Forwarding Data to S3](https://help.sumologic.com/Manage/Data-Forwarding/Configure-Data-Forwarding-from-Sumo-Logic-to-S3).
    x-displayName: Logs Data Forwarding
  - name: roleManagement
    description: |
      Role management API.

      Roles determine the functions that users are able to perform in Sumo Logic. To manage roles, you must have an administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Roles](https://help.sumologic.com/?cid=5234).
    x-displayName: Roles
  - name: lookupManagement
    description: |
      Lookup Table management API.

      A Lookup Table is a table of data hosted on Sumo Logic that you can use to enrich the log and event data received by Sumo Logic. You must create a table schema before you can populate the table. For more information see [Lookup Tables](https://help.sumologic.com/?cid=10109).
    x-displayName: Lookup Tables
  - name: scheduledViewManagement
    description: |
      Scheduled View management API.

      Scheduled Views speed the search process for small and historical subsets of your data by functioning as a pre-aggregated index. For more information see [Manage Scheduled Views](https://help.sumologic.com/?cid=5128).
    x-displayName: Scheduled Views
  - name: tokensLibraryManagement
    description: |
      Tokens management API.

      Tokens are associated with your organization to authorize specific operations. Currently, we support collector registration tokens, which can be used to register Installed Collectors. Managing tokens requires the Manage Tokens role capability. For more information see [Installation Tokens](https://help.sumologic.com/?cid=0100).
    x-displayName: Tokens
  - name: transformationRuleManagement
    description: |
      Transformation Rule management API.
      Metrics Transformation Rules allow you control how long raw metrics are retained. You can also aggregate metrics at collection time and specify a separate retention period for the aggregated metrics. For more information see [Metrics Transformation Rules](https://help.sumologic.com/?cid=10117).
    x-displayName: Transformation Rules (Beta)
  - name: userManagement
    description: |
      User management API.

      To manage users, you must have the administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Users](https://help.sumologic.com/?cid=1006).
    x-displayName: Users
  - name: metricsSearchesManagement
    description: |
      Metrics Search management API.

      Save metrics searches in the content library and organize them in a folder hierarchy. Share useful queries with users in your organization. For more information see [Sharing Metric Charts](https://help.sumologic.com/Metrics/03-Metric-Charts/Share_a_Metric_Chart).
    x-displayName: Metrics Searches (Beta)
  - name: metricsQuery
    description: |
      Metrics Query API.

      The Metrics Query API allows you to execute queries on various metrics and retrieve multiple time-series (data-points) over time range(s). For more information see [Metrics - Classic](https://help.sumologic.com/?cid=1079).
    x-displayName: Metrics Query
  - name: accessKeyManagement
    description: |
      Access Key management API.

      Access Keys allow you to securely register new Collectors and access Sumo Logic APIs. For more information see [Access Keys](https://help.sumologic.com/?cid=6690).
    x-displayName: Access Keys
  - name: samlConfigurationManagement
    description: |
      SAML configuration management API

      Organizations with Enterprise accounts can provision Security Assertion Markup Language (SAML) 2.0 to enable Single Sign-On (SSO) for user access to Sumo Logic. For more information see [SAML Configuration](https://help.sumologic.com/?cid=4016).
    x-displayName: SAML Configuration
  - name: serviceAllowlistManagement
    description: |
      Service Allowlist management API

      Service Allowlist Settings allow you to explicitly grant access to specific IP addresses and/or CIDR notations for logins, APIs, and dashboard access. For more information see [Service Allowlist Settings](https://help.sumologic.com/?cid=5454).
    x-displayName: Service Allowlist
  - name: healthEvents
    description: |
      Health Events management API.

      Health Events allow you to keep track of the health of your Collectors and Sources. You can use them to find and investigate common errors and warnings that are known to cause collection issues. For more information see [Health Events](https://help.sumologic.com/?cid=0020).
    x-displayName: Health Events
  - name: archiveManagement
    description: |-
      Archive Ingestion Management API.

      Archive Ingestion allows you to ingest data from Archive destinations. You can use this API to ingest data from your Archive with an existing AWS S3 Archive Source. You need the Manage or View Collectors role capability to manage or view ingestion jobs. For more information see [Archive](https://help.sumologic.com/?cid=10011).
    x-displayName: Archive Ingestion Management
  - name: logSearchesEstimatedUsage
    description: |
      Log Search Estimated Usage API.

      Gets the estimated volume of data that would be scanned for a given log search in the Infrequent data tier, over a particular time range. In the Infrequent Data Tier, you pay per query, based on the amount data scanned. You can use this endpoint to get an estimate of the total data that would be scanned before running a query, and refine your query to scan less data, as necessary. For more information see [Infrequent data tier](https://help.sumologic.com/?cid=11987).
    x-displayName: Log Search Estimated Usage
  - name: passwordPolicy
    description: |
      Password Policy Management API

      The password policy controls how user passwords are managed. The "Manage Password Policy" role capability is required to update the password policy. For more information see [how to set a password policy](https://help.sumologic.com/?cid=8595).
    x-displayName: Password Policy
  - name: policiesManagement
    description: |
      Policies management API.

      Policies control the security and share settings of your organization. For more information see [Security](https://help.sumologic.com/?cid=4041).
    x-displayName: Policies
  - name: traces
    description: |
      Traces API

      The Traces API allows you to browse traces collected in the system. You can execute queries to find traces matching provided search criteria as well as gather detailed information about individual traces and spans. For more information see [View and investigate traces](https://help.sumologic.com/Traces/View_and_investigate_traces).
    x-displayName: Traces
  - name: spanAnalytics
    description: |
      Span Analytics API

      The Span Analytics API allows you to browse spans collected in the system. You can execute queries to find individual spans matching provided search criteria as well as run aggregated span queries and retrieve their results. For more information see [Spans](https://help.sumologic.com/Traces/Spans).
    x-displayName: Span Analytics
  - name: serviceMap
    description: |
      Service Map API

      The Service Map API allows you to fetch a graph representation of the Service Map, which is a high-level view of your application environment, automatically derived from tracing data. For more information see [Service Map](https://help.sumologic.com/Traces/Service_Map_and_Dashboards#service-map).
    x-displayName: Service Map
  - name: slosLibraryManagement
    description: |
      SLO Management API.

      SLOs are used to monitor and alert on KPIs for your most important services or user experience.
    x-displayName: SLOs
  - name: monitorsLibraryManagement
    description: |
      Monitor Management API.


      Monitors continuously query your data to monitor and send notifications when specific events occur.
      For more information see [Monitors](https://help.sumologic.com/?cid=10020).
    x-displayName: Monitors
info:
  title: Sumo Logic API - monitors
  description: monitors
  version: 1.0.0
  x-logo:
    url: ./sumologic_logo.png
