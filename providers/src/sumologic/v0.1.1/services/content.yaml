paths:
  /v2/content/folders:
    post:
      tags:
        - folderManagement
      summary: Create a new folder.
      description: Creates a new folder under the given parent folder. Set the header parameter `isAdminMode` to `"true"` to create a folder inside "Admin Recommended" folder.
      operationId: createFolder
      parameters:
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      requestBody:
        description: Information about the new folder.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderDefinition'
        required: true
      responses:
        '200':
          description: The folder has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/folders/{id}:
    get:
      tags:
        - folderManagement
      summary: Get a folder.
      description: Get a folder with the given identifier. Set the header parameter `isAdminMode` to `"true"` if fetching a folder inside "Admin Recommended" folder.
      operationId: getFolder
      parameters:
        - name: id
          in: path
          description: Identifier of the folder to fetch.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Folder that was requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - folderManagement
      summary: Update a folder.
      description: Update an existing folder with the given identifier. Set the header parameter `isAdminMode` to `"true"` if updating a folder inside "Admin Recommended" folder.
      operationId: updateFolder
      parameters:
        - name: id
          in: path
          description: Identifier of the folder to update.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      requestBody:
        description: Information to update about the folder.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolderRequest'
        required: true
      responses:
        '200':
          description: The folder was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/folders/personal:
    get:
      tags:
        - folderManagement
      summary: Get personal folder.
      description: Get the personal folder of the current user.
      operationId: getPersonalFolder
      responses:
        '200':
          description: |
            The personal folder of the current user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/folders/global:
    get:
      tags:
        - folderManagement
      summary: Schedule Global View job
      description: |-
        Schedule an asynchronous job to get Global View. Global View contains all top-level content items that a user has permissions to view in the organization. User can traverse the top-level folders using [GetFolder API](#operation/getFolder) to get rest of the content items. Make sure you set `isAdminMode` header parameter to `true` when traversing top-level items.

        _Global View is not a real folder, therefore there is no folder identifier associated with it_.

        _You get back a identifier of asynchronous job in response to this endpoint. See [Asynchronous-Request](#section/Getting-Started/Asynchronous-Request) section for more details on how to work with asynchronous request._
      operationId: getGlobalFolderAsync
      parameters:
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An asynchronous job to get a list of all content items been scheduled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginAsyncJobResponse'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/folders/global/{jobId}/status:
    get:
      tags:
        - folderManagement
      summary: Get Global View job status
      description: Get the status of an asynchronous Global View job for the given job identifier. If job succeeds, use [Global View Result](#operation/getGlobalFolderAsyncResult) endpoint to fetch all content items that you have permissions to view.
      operationId: getGlobalFolderAsyncStatus
      parameters:
        - name: jobId
          in: path
          description: The identifier of the asynchronous Global View job.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Asynchronous Global View job status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatus'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/folders/global/{jobId}/result:
    get:
      tags:
        - folderManagement
      summary: Get Global View job result
      description: Get result of a Global View job for the given job identifier. The result will be a list of all content items that a user has permissions to view in the organization.
      operationId: getGlobalFolderAsyncResult
      parameters:
        - name: jobId
          in: path
          description: The identifier of the asynchronous Global View job.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of all content items with view permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentList'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/folders/adminRecommended:
    get:
      tags:
        - folderManagement
      summary: Schedule Admin Recommended folder job
      description: |-
        Schedule an asynchronous job to get the top-level Admin Recommended content items. You can read more about Admin Recommended folder [here](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode#move-important-content-to-admin-recommended).

        _You get back a identifier of asynchronous job in response to this endpoint. See [Asynchronous-Request](#section/Getting-Started/Asynchronous-Request) section for more details on how to work with asynchronous request._
      operationId: getAdminRecommendedFolderAsync
      parameters:
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An asynchronous job to get the Admin Recommended folder has been scheduled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginAsyncJobResponse'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/folders/adminRecommended/{jobId}/status:
    get:
      tags:
        - folderManagement
      summary: Get Admin Recommended folder job status
      description: Get the status of an asynchronous Admin Recommended folder job for the given job identifier. If job succeeds, use [Admin Recommended Job Result](#operation/getAdminRecommendedFolderAsyncResult) endpoint to fetch top-level content items in Admin Recommended folder.
      operationId: getAdminRecommendedFolderAsyncStatus
      parameters:
        - name: jobId
          in: path
          description: The identifier of the asynchronous Admin Recommended folder job.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Asynchronous Admin Recommended folder job status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatus'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/folders/adminRecommended/{jobId}/result:
    get:
      tags:
        - folderManagement
      summary: Get Admin Recommended folder job result
      description: Get result of an Admin Recommended job for the given job identifier. The result will be "Admin Recommended" folder with a list of top-level Admin Recommended content items in `children` field.
      operationId: getAdminRecommendedFolderAsyncResult
      parameters:
        - name: jobId
          in: path
          description: The identifier of the asynchronous Admin Recommended folder job.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Admin Recommended folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{id}/permissions:
    get:
      tags:
        - contentPermissions
      summary: Get permissions of a content item
      description: Returns content permissions of a content item with the given identifier.
      operationId: getContentPermissions
      parameters:
        - name: id
          in: path
          description: The identifier of the content item.
          required: true
          schema:
            type: string
        - name: explicitOnly
          in: query
          description: 'There are two permission types: explicit and implicit. Permissions specifically assigned to the content item are explicit. Permissions derived from a parent content item, like a folder are implicit. To return only explicit permissions set this to true.'
          schema:
            type: boolean
            default: false
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of permissions for the requested content item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentPermissionResult'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{id}/permissions/add:
    put:
      tags:
        - contentPermissions
      summary: Add permissions to a content item.
      description: Add permissions to a content item with the given identifier.
      operationId: addContentPermissions
      parameters:
        - name: id
          in: path
          description: The identifier of the content item.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      requestBody:
        description: New permissions to add to the content item with the given identifier.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentPermissionUpdateRequest'
        required: true
      responses:
        '200':
          description: Updated permission object for the requested content item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentPermissionResult'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{id}/permissions/remove:
    put:
      tags:
        - contentPermissions
      summary: Remove permissions from a content item.
      description: Remove permissions from a content item with the given identifier.
      operationId: removeContentPermissions
      parameters:
        - name: id
          in: path
          description: The identifier of the content item.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      requestBody:
        description: Permissions to remove from a content item with the given identifier.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentPermissionUpdateRequest'
        required: true
      responses:
        '200':
          description: Updated permissions for the requested content item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentPermissionResult'
        default:
          description: Operation failed with an error. Check that your request is valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/path:
    get:
      tags:
        - contentManagement
      summary: Get content item by path.
      description: |-
        Get a content item corresponding to the given path.

        _Path is specified in the required query parameter `path`. The path should be URL encoded._ For example, to get "Acme Corp" folder of a user "user@sumo.com" you can use the following curl command:
          ```bash
          curl https://api.sumologic.com/api/v2/content/path?path=/Library/Users/user%40sumo.com/Acme%20Corp
          ```


        The absolute path to a content item should be specified to get the item. The content library has "Library" folder at the root level. For items in "Personal" folder, the base path is "/Library/Users/user@sumo.com" where "user@sumo.com" is the email address of the user. For example if a user with email address `wile@acme.com` has `Rockets` folder inside Personal folder, the path of Rockets folder will be `/Library/Users/wile@acme.com/Rockets`.

        For items in "Admin Recommended" folder, the base path is "/Library/Admin Recommended". For example, given a folder `Acme` in Admin Recommended folder, the path will be `/Library/Admin Recommended/Acme`.
      operationId: getItemByPath
      parameters:
        - name: path
          in: query
          description: Path of the content item to retrieve.
          required: true
          schema:
            type: string
          example: /Library/Users/user@sumo.com/SampleFolder
      responses:
        '200':
          description: Content item corresponding to the given path.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{contentId}/path:
    get:
      tags:
        - contentManagement
      summary: Get path of an item.
      description: |
        Get full path of a content item with the given identifier.
      operationId: getPathById
      parameters:
        - name: contentId
          in: path
          description: Identifier of the content item to get the path.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Full path of the content item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentPath'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{id}/export:
    post:
      tags:
        - contentManagement
      summary: Start a content export job.
      description: |-
        Schedule an _asynchronous_ export of content with the given identifier. You will get back an asynchronous job identifier on success. Use the [getAsyncExportStatus](#operation/getAsyncExportStatus) endpoint and the job identifier you got back in the response to track the status of an asynchronous export job.
        If the content item is a folder, everything under the folder is exported recursively. Keep in mind when exporting large folders that there is a limit of 1000 content objects that can be exported at once. If you want to import more than 1000 content objects, then be sure to split the import into batches of 1000 objects or less.
        The results from the export are compatible with the Library import feature in the Sumo Logic user interface as well as the API content import job.
      operationId: beginAsyncExport
      parameters:
        - name: id
          in: path
          description: The identifier of the content item to export. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this API. The identifier needs to be in hexadecimal format.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Export job has been scheduled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginAsyncJobResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{contentId}/export/{jobId}/status:
    get:
      tags:
        - contentManagement
      summary: Content export job status.
      description: Get the status of an asynchronous content export request for the given job identifier. On success, use the [getExportResult](#operation/getAsyncExportResult) endpoint to get the result of the export job.
      operationId: getAsyncExportStatus
      parameters:
        - name: contentId
          in: path
          description: The identifier of the exported content item.
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          description: The identifier of the asynchronous export job.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The status of the export job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatus'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{contentId}/export/{jobId}/result:
    get:
      tags:
        - contentManagement
      summary: Content export job result.
      description: Get results from content export job for the given job identifier. The results from this export are incompatible with the Library import feature in the Sumo user interface.
      operationId: getAsyncExportResult
      parameters:
        - name: contentId
          in: path
          description: The identifier of the exported content item.
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          description: The identifier of the asynchronous job.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The result of export job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentSyncDefinition'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/folders/{folderId}/import:
    post:
      tags:
        - contentManagement
      summary: Start a content import job.
      description: Schedule an asynchronous import of content inside an existing folder with the given identifier. Import requests can be used to create or update content within a folder. Content items need to have a unique name within their folder. If there is already a content item with the same name in the folder, you can set the `overwrite` parameter to `true` to overwrite existing content items. By default, the `overwrite` parameter is set to `false`, where the import will fail if a content item with the same name already exist. Keep in mind when importing large folders that there is a limit of 1000 content objects that can be imported at once. If you want to import more than 1000 content objects, then be sure to split the import into batches of 1000 objects or less.
      operationId: beginAsyncImport
      parameters:
        - name: folderId
          in: path
          description: The identifier of the folder to import into. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this API. The identifier needs to be in hexadecimal format.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
        - name: overwrite
          in: query
          description: Set this to "true" to overwrite a content item if the name already exists.
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        description: The content to import.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentSyncDefinition'
        required: true
      responses:
        '200':
          description: Import job has been scheduled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginAsyncJobResponse'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/folders/{folderId}/import/{jobId}/status:
    get:
      tags:
        - contentManagement
      summary: Content import job status.
      description: Get the status of a content import job for the given job identifier.
      operationId: getAsyncImportStatus
      parameters:
        - name: folderId
          in: path
          description: The identifier of the folder to import into.
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          description: The identifier of the import request.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The status of the import job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatus'
        default:
          description: The operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{id}/delete:
    delete:
      tags:
        - contentManagement
      summary: Start a content deletion job.
      description: Start an asynchronous content deletion job with the given identifier.
      operationId: beginAsyncDelete
      parameters:
        - name: id
          in: path
          description: Identifier of the content to delete. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this API. The identifier needs to be in hexadecimal format.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Deletion job has been scheduled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginAsyncJobResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{id}/delete/{jobId}/status:
    get:
      tags:
        - contentManagement
      summary: Content deletion job status.
      description: Get the status of an asynchronous content deletion job request for the given job identifier.
      operationId: getAsyncDeleteStatus
      parameters:
        - name: id
          in: path
          description: Identifier of the content to delete.
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          description: The identifier of the asynchronous job.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The status of the content deletion job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatus'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{id}/copy:
    post:
      tags:
        - contentManagement
      summary: Start a content copy job.
      description: Start an asynchronous content copy job with the given identifier to the destination folder. If the content item is a folder, everything under the folder is copied recursively.
      operationId: beginAsyncCopy
      parameters:
        - name: id
          in: path
          description: The identifier of the content item to copy. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this API. The identifier needs to be in hexadecimal format.
          required: true
          schema:
            type: string
        - name: destinationFolder
          in: query
          description: The identifier of the destination folder.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Content copy job has been scheduled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginAsyncJobResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{id}/copy/{jobId}/status:
    get:
      tags:
        - contentManagement
      summary: Content copy job status.
      description: |
        Get the status of the copy request with the given job identifier. On success, field `statusMessage` will contain identifier of the newly copied content in format: `id: {hexIdentifier}`.
      operationId: asyncCopyStatus
      parameters:
        - name: id
          in: path
          description: The identifier of the content which was copied.
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          description: The identifier of the asynchronous copy request job.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The status of the content copy job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatus'
              example:
                status: Success
                statusMessage: 'id: 0000000000000197'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/content/{id}/move:
    post:
      tags:
        - contentManagement
      summary: Move an item.
      description: |
        Moves an item from its current location to another folder.
      operationId: moveItem
      parameters:
        - name: destinationFolderId
          in: query
          description: Identifier of the destination folder.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Identifier of the item the user wants to move.
          required: true
          schema:
            type: string
        - name: isAdminMode
          in: header
          description: Set this to "true" if you want to perform the request as a Content Administrator.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Content was moved successfully.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    FolderDefinition:
      required:
        - name
        - parentId
      type: object
      properties:
        name:
          maxLength: 128
          minLength: 1
          type: string
          description: The name of the folder.
          example: SampleFolder
        description:
          maxLength: 255
          minLength: 0
          type: string
          description: The description of the folder.
          example: This is a sample folder.
        parentId:
          type: string
          description: The identifier of the parent folder.
    Folder:
      allOf:
        - $ref: '#/components/schemas/Content'
        - type: object
          properties:
            description:
              maxLength: 255
              minLength: 0
              type: string
              description: The description of the folder.
              example: This is a sample folder.
            children:
              type: array
              description: A list of the content items.
              items:
                $ref: '#/components/schemas/Content'
    ErrorResponse:
      required:
        - errors
        - id
      type: object
      properties:
        id:
          type: string
          description: An identifier for the error; this is unique to the specific API request.
          example: IUUQI-DGH5I-TJ045
        errors:
          type: array
          description: A list of one or more causes of the error.
          example:
            - code: auth:password_too_short
              message: Your password was too short.
            - code: auth:password_character_classes
              message: Your password did not contain any non-alphanumeric characters
          items:
            $ref: '#/components/schemas/ErrorDescription'
    Content:
      allOf:
        - $ref: '#/components/schemas/MetadataModel'
        - required:
            - id
            - itemType
            - name
            - parentId
            - permissions
          properties:
            id:
              type: string
              description: Identifier of the content item.
              example: 000000000C1C17C6
            name:
              type: string
              description: The name of the content item.
              example: Personal
            itemType:
              type: string
              description: |-
                Type of the content item. Supported values are:
                  1. Folder
                  2. Search
                  3. Report (for old dashboards)
                  4. Dashboard (for new dashboards)
                  5. Lookups
              example: Folder
            parentId:
              type: string
              description: Identifier of the parent content item.
              example: 0000000001C41EF2
            permissions:
              type: array
              description: List of permissions the user has on the content item.
              example:
                - View
                - GrantView
                - Edit
              items:
                type: string
    ErrorDescription:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: An error code describing the type of error.
          example: auth:password_too_short
        message:
          type: string
          description: A short English-language description of the error.
          example: Your password was too short.
        detail:
          type: string
          description: An optional fuller English-language description of the error.
          example: Your password was 5 characters long, the minimum length is 12 characters. See http://example.com/password for more information.
        meta:
          type: object
          description: An optional list of metadata about the error.
          example:
            minLength: 12
            actualLength: 5
    MetadataModel:
      required:
        - createdAt
        - createdBy
        - modifiedAt
        - modifiedBy
      type: object
      properties:
        createdAt:
          type: string
          description: Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
          format: date-time
          example: '2018-10-16T09:10:00Z'
        createdBy:
          type: string
          description: Identifier of the user who created the resource.
          example: 0000000006743FDD
        modifiedAt:
          type: string
          description: Last modification timestamp in UTC.
          format: date-time
          example: '2018-10-16T09:10:00Z'
        modifiedBy:
          type: string
          description: Identifier of the user who last modified the resource.
          example: 0000000006743FE8
    UpdateFolderRequest:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 128
          minLength: 1
          type: string
          description: The name of the folder.
          example: SampleFolder
        description:
          maxLength: 255
          minLength: 0
          type: string
          description: The description of the folder.
          example: This is a sample folder.
    BeginAsyncJobResponse:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: Identifier to get the status of an asynchronous job.
          example: C03E086C137F38B4
    AsyncJobStatus:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          description: Whether or not the request is in progress (`InProgress`), has completed successfully (`Success`), or has completed with an error (`Failed`).
        statusMessage:
          type: string
          description: Additional status message generated if the status is not `Failed`.
        error:
          $ref: '#/components/schemas/ErrorDescription'
      example:
        status: Success
        statusMessage: ''
    ContentList:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          description: A list of the content items.
          items:
            $ref: '#/components/schemas/Content'
    ContentPermissionResult:
      required:
        - explicitPermissions
      type: object
      properties:
        explicitPermissions:
          type: array
          description: Explicitly assigned content permissions.
          items:
            $ref: '#/components/schemas/ContentPermissionAssignment'
        implicitPermissions:
          type: array
          description: Implicitly inherited content permissions.
          items:
            $ref: '#/components/schemas/ContentPermissionAssignment'
    ContentPermissionAssignment:
      required:
        - contentId
        - permissionName
        - sourceId
        - sourceType
      type: object
      properties:
        permissionName:
          pattern: ^(View|GrantView|Edit|GrantEdit|Manage|GrantManage)$
          type: string
          description: 'Content permission name. Valid values are: `View`, `GrantView`, `Edit`, `GrantEdit`, `Manage`, and `GrantManage`.'
          x-pattern-message: 'must be one of the following: `View`, `GrantView`, `Edit`, `GrantEdit`, `Manage`, `GrantManage`'
        sourceType:
          pattern: ^(user|role|org)$
          type: string
          description: 'Type of source for the permission. Valid values are: `user`, `role`, and `org`.'
          example: role
          x-pattern-message: 'must be one of the following: `user`, `role`, `org`'
        sourceId:
          type: string
          description: An identifier that belongs to the source type chosen above. For e.g. if the sourceType is set to "user", sourceId should be identifier of a user (same goes for `role` and `org` sourceType)
        contentId:
          type: string
          description: Unique identifier for the content item.
    ContentPermissionUpdateRequest:
      required:
        - contentPermissionAssignments
        - notificationMessage
        - notifyRecipients
      type: object
      properties:
        contentPermissionAssignments:
          type: array
          description: Content permissions to be updated.
          items:
            $ref: '#/components/schemas/ContentPermissionAssignment'
        notifyRecipients:
          type: boolean
          description: Set this to "true" to notify the users who had a permission update.
        notificationMessage:
          type: string
          description: The notification message sent to the users who had a permission update.
    ContentPath:
      required:
        - path
      type: object
      properties:
        path:
          type: string
          description: Path of the content item.
          example: /Library/Users/user@test.com/SampleFolder
    ContentSyncDefinition:
      required:
        - name
        - type
      type: object
      properties:
        type:
          type: string
          description: |-
            The content item type.
            **Note:**
             - `MewboardSyncDefinition` _is depreciated, and will soon be removed. Please use_ `DashboardV2SyncDefinition`
               _instead_.
             - Dashboard links are not supported for dashboards.
        name:
          type: string
          description: The name of the item.
      discriminator:
        propertyName: type
  parameters: {}
  responses: {}
  securitySchemes: {}
  callbacks: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  x-stackQL-resources:
    folders:
      id: sumologic.content.folders
      name: folders
      title: Folders
      methods:
        createFolder:
          operation:
            $ref: '#/paths/~1v2~1content~1folders/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getFolder:
          operation:
            $ref: '#/paths/~1v2~1content~1folders~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateFolder:
          operation:
            $ref: '#/paths/~1v2~1content~1folders~1{id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/folders/methods/getFolder'
        insert:
          - $ref: '#/components/x-stackQL-resources/folders/methods/createFolder'
        update: []
        delete: []
    folders_personal:
      id: sumologic.content.folders_personal
      name: folders_personal
      title: Folders_personal
      methods:
        getPersonalFolder:
          operation:
            $ref: '#/paths/~1v2~1content~1folders~1personal/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/folders_personal/methods/getPersonalFolder'
        insert: []
        update: []
        delete: []
    folders_global:
      id: sumologic.content.folders_global
      name: folders_global
      title: Folders_global
      methods:
        getGlobalFolderAsync:
          operation:
            $ref: '#/paths/~1v2~1content~1folders~1global/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/folders_global/methods/getGlobalFolderAsync'
        insert: []
        update: []
        delete: []
    folders_global_status:
      id: sumologic.content.folders_global_status
      name: folders_global_status
      title: Folders_global_status
      methods:
        getGlobalFolderAsyncStatus:
          operation:
            $ref: '#/paths/~1v2~1content~1folders~1global~1{jobId}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/folders_global_status/methods/getGlobalFolderAsyncStatus'
        insert: []
        update: []
        delete: []
    folders_global_result:
      id: sumologic.content.folders_global_result
      name: folders_global_result
      title: Folders_global_result
      methods:
        getGlobalFolderAsyncResult:
          operation:
            $ref: '#/paths/~1v2~1content~1folders~1global~1{jobId}~1result/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/folders_global_result/methods/getGlobalFolderAsyncResult'
        insert: []
        update: []
        delete: []
    folders_admin_recommended:
      id: sumologic.content.folders_admin_recommended
      name: folders_admin_recommended
      title: Folders_admin_recommended
      methods:
        getAdminRecommendedFolderAsync:
          operation:
            $ref: '#/paths/~1v2~1content~1folders~1adminRecommended/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/folders_admin_recommended/methods/getAdminRecommendedFolderAsync'
        insert: []
        update: []
        delete: []
    folders_admin_recommended_status:
      id: sumologic.content.folders_admin_recommended_status
      name: folders_admin_recommended_status
      title: Folders_admin_recommended_status
      methods:
        getAdminRecommendedFolderAsyncStatus:
          operation:
            $ref: '#/paths/~1v2~1content~1folders~1adminRecommended~1{jobId}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/folders_admin_recommended_status/methods/getAdminRecommendedFolderAsyncStatus'
        insert: []
        update: []
        delete: []
    folders_admin_recommended_result:
      id: sumologic.content.folders_admin_recommended_result
      name: folders_admin_recommended_result
      title: Folders_admin_recommended_result
      methods:
        getAdminRecommendedFolderAsyncResult:
          operation:
            $ref: '#/paths/~1v2~1content~1folders~1adminRecommended~1{jobId}~1result/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/folders_admin_recommended_result/methods/getAdminRecommendedFolderAsyncResult'
        insert: []
        update: []
        delete: []
    permissions:
      id: sumologic.content.permissions
      name: permissions
      title: Permissions
      methods:
        getContentPermissions:
          operation:
            $ref: '#/paths/~1v2~1content~1{id}~1permissions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/permissions/methods/getContentPermissions'
        insert: []
        update: []
        delete: []
    permissions_add:
      id: sumologic.content.permissions_add
      name: permissions_add
      title: Permissions_add
      methods:
        addContentPermissions:
          operation:
            $ref: '#/paths/~1v2~1content~1{id}~1permissions~1add/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    permissions_remove:
      id: sumologic.content.permissions_remove
      name: permissions_remove
      title: Permissions_remove
      methods:
        removeContentPermissions:
          operation:
            $ref: '#/paths/~1v2~1content~1{id}~1permissions~1remove/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    path:
      id: sumologic.content.path
      name: path
      title: Path
      methods:
        getItemByPath:
          operation:
            $ref: '#/paths/~1v2~1content~1path/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getPathById:
          operation:
            $ref: '#/paths/~1v2~1content~1{contentId}~1path/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/path/methods/getPathById'
          - $ref: '#/components/x-stackQL-resources/path/methods/getItemByPath'
        insert: []
        update: []
        delete: []
    export:
      id: sumologic.content.export
      name: export
      title: Export
      methods:
        beginAsyncExport:
          operation:
            $ref: '#/paths/~1v2~1content~1{id}~1export/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    export_status:
      id: sumologic.content.export_status
      name: export_status
      title: Export_status
      methods:
        getAsyncExportStatus:
          operation:
            $ref: '#/paths/~1v2~1content~1{contentId}~1export~1{jobId}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/export_status/methods/getAsyncExportStatus'
        insert: []
        update: []
        delete: []
    export_result:
      id: sumologic.content.export_result
      name: export_result
      title: Export_result
      methods:
        getAsyncExportResult:
          operation:
            $ref: '#/paths/~1v2~1content~1{contentId}~1export~1{jobId}~1result/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/export_result/methods/getAsyncExportResult'
        insert: []
        update: []
        delete: []
    folders_import:
      id: sumologic.content.folders_import
      name: folders_import
      title: Folders_import
      methods:
        beginAsyncImport:
          operation:
            $ref: '#/paths/~1v2~1content~1folders~1{folderId}~1import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    folders_import_status:
      id: sumologic.content.folders_import_status
      name: folders_import_status
      title: Folders_import_status
      methods:
        getAsyncImportStatus:
          operation:
            $ref: '#/paths/~1v2~1content~1folders~1{folderId}~1import~1{jobId}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/folders_import_status/methods/getAsyncImportStatus'
        insert: []
        update: []
        delete: []
    delete:
      id: sumologic.content.delete
      name: delete
      title: Delete
      methods:
        beginAsyncDelete:
          operation:
            $ref: '#/paths/~1v2~1content~1{id}~1delete/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    delete_status:
      id: sumologic.content.delete_status
      name: delete_status
      title: Delete_status
      methods:
        getAsyncDeleteStatus:
          operation:
            $ref: '#/paths/~1v2~1content~1{id}~1delete~1{jobId}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/delete_status/methods/getAsyncDeleteStatus'
        insert: []
        update: []
        delete: []
    copy:
      id: sumologic.content.copy
      name: copy
      title: Copy
      methods:
        beginAsyncCopy:
          operation:
            $ref: '#/paths/~1v2~1content~1{id}~1copy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    copy_status:
      id: sumologic.content.copy_status
      name: copy_status
      title: Copy_status
      methods:
        asyncCopyStatus:
          operation:
            $ref: '#/paths/~1v2~1content~1{id}~1copy~1{jobId}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    move:
      id: sumologic.content.move
      name: move
      title: Move
      methods:
        moveItem:
          operation:
            $ref: '#/paths/~1v2~1content~1{id}~1move/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
openapi: 3.0.0
servers:
  - url: https://api.{region}.sumologic.com/api
    variables:
      region:
        description: SumoLogic region
        enum:
          - us2
          - au
          - ca
          - de
          - eu
          - fed
          - in
          - jp
        default: us2
    description: The SumoLogic regional endpoint
security:
  - basicAuth: []
tags:
  - name: accountManagement
    description: |
      Account Management API.

      Manage the custom subdomain for the URL used to access your Sumo Logic account. For more information see [Manage Organization](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization).
    x-displayName: Account
  - name: appManagement
    description: |
      App installation API.

      View and install Sumo Logic Applications that deliver out-of-the-box dashboards, saved searches, and field extraction for popular data sources. For more information see [Sumo Logic Apps](https://help.sumologic.com/07Sumo-Logic-Apps).
    x-displayName: Apps (Beta)
  - name: connectionManagement
    description: |
      Connection management API.

      Set up connections to send alerts to other tools. For more information see [Connections and Integrations](https://help.sumologic.com/?cid=1044).
    x-displayName: Connections
  - name: contentManagement
    description: |
      Content management API.

      You can export, import, delete and copy content in your organization’s Library. For more information see [Library](https://help.sumologic.com/?cid=5173). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
      <br/> <br/>
      ### Example
      The following example uses API endpoints in the US1 deployment. Sumo Logic has several deployments that are assigned depending on the geographic location and the date an account is created. For details determining your account's deployment see [API endpoints](https://help.sumologic.com/?cid=3011).
      The [Content Import API](#operation/beginAsyncImport) can be used to create or update a Search, Scheduled Search, or Dashboard. Here is an example creating a Scheduled Search:
      1. Get the identifier of your `Personal` folder.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/personal
        ```

        Find the identifier of your `Personal` folder in the response.
        ```json
        {
            ...
            "id": "0000000006A2E86F", <----
            "name": "Personal",
            "itemType": "Folder",
            ...
        }
        ```

        You can use [getFolder](#operation/getFolder), [getAdminRecommededFolder](#operation/getAdminRecommendedFolderAsync),
        or [getGlobalFolder](#operation/getGlobalFolderAsync) endpoints to traverse the content tree and find the identifier of any
        folder you want to manage.

      2. Use the [Content Import API](#operation/beginAsyncImport) to create a new Scheduled Search inside your
        `Personal` folder.
        ```bash
        curl -X POST -u "<accessId>:<accessKey>" -H "Content-Type: application/json" -d @search.json https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import
        ```

        The data file `search.json` in the above command has the following `SavedSearchWithScheduleSyncDefinition` object.
        ```json
        // file: search.json
        {
            "type": "SavedSearchWithScheduleSyncDefinition",
            "name": "demo-scheduled-search",
            "description": "Runs every hour with timerange of 15m and sends email notifications",
            "search": {
                "queryText": "\"error\" and \"warn\"",
                "defaultTimeRange": "-15m",
                "byReceiptTime": false,
                "viewName": "",
                "viewStartTime": null,
                "queryParameters": []
            },
            "searchSchedule": {
                "cronExpression": "0 0/15 * * * ? *",
                "displayableTimeRange": "-15m",
                "parseableTimeRange": {
                    "from": {
                        "relativeTime": "-15m",
                        "type": "RelativeTimeRangeBoundary"
                    },
                    "to": null,
                    "type": "BeginBoundedTimeRange"
                },
                "timeZone": "America/Los_Angeles",
                "threshold": null,
                "notification": {
                    "taskType": "EmailSearchNotificationSyncDefinition",
                    "toList": [
                        "ops@acme.org"
                    ],
                    "subjectTemplate": "Search Results: {{SearchName}}",
                    "includeQuery": true,
                    "includeResultSet": true,
                    "includeHistogram": true,
                    "includeCsvAttachment": false
                },
                "muteErrorEmails": false,
                "scheduleType": "1Hour",
                "parameters": []
            }
        }
        ```

        The response of above request will have the job identifier that you can use to track the status of the import job.
        ```json
        {
            "id": "74DC17FA765C7443"
        }
        ```

      3. Use the job identifier from the import request to get the [status](#operation/getAsyncImportStatus) of the
        import job.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import/74DC17FA765C7443/status
        ```

        If you are importing a large item, you might have to wait for the import job to finish. The following is an
        example response from a completed job.
        ```json
        {
            "status": "Success",
            "statusMessage": null,
            "error": null
        }
        ```
    x-displayName: Content
  - name: contentPermissions
    description: |
      Content permissions API.

      You can share your folders, searches, and dashboards with specific users or roles. For more information see [Share Content](https://help.sumologic.com/?cid=8675309). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Permissions
  - name: dashboardManagement
    description: |
      Dashboard (New) management API.

      Dashboard (New) allows you to analyze metric and log data on the same dashboard, in a seamless view. This gives you control over the visual display of metric and log data. Dashboard (New) streamlines dashboard configurations and on-the-fly analytic visualizations with its new templating features. For more information see [Dashboard (New)](https://help.sumologic.com/?cid=5500).
    x-displayName: Dashboard (New)
  - name: dynamicParsingRuleManagement
    description: |
      Dynamic Parsing management API.

      Dynamic Parsing allows automatic field extraction from your log messages when you run a search.  This allows you to view fields from logs without having to manually specify parsing logic. For more information  see [Dynamic Parsing](https://help.sumologic.com/?cid=20011).
    x-displayName: Dynamic Parsing
  - name: extractionRuleManagement
    description: |
      Field Extraction Rule management API.

      Field Extraction Rules allow you to parse fields from your log messages at the time the messages are ingested eliminating the need to parse fields in your query. For more information see [Manage Field Extraction](https://help.sumologic.com/?cid=5313).
    x-displayName: Field Extraction Rules
  - name: fieldManagementV1
    description: |
      Field management API.

      Fields allow you to reference log data based on meaningful associations. They act as metadata tags that are assigned to your logs so you can search with them. Each field contains a key-value pair, where the field name is the key. Fields may be referred to as Log Metadata Fields. For more information see [Fields](https://help.sumologic.com/?cid=10116).
    x-displayName: Field Management
  - name: folderManagement
    description: |
      Folder management API.

      You can add folders and subfolders to the Library in order to organize your content for easy access or to share content. For more information see [Add Folders to the Library](https://help.sumologic.com/?cid=5020). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Folders
  - name: ingestBudgetManagementV1
    description: |
      Ingest Budget management API.

      Ingest Budgets allow you to control the capacity of daily ingestion volume sent to Sumo Logic from Collectors. For more information see [Ingest Budgets](https://help.sumologic.com/?cid=5235).
    x-displayName: Ingest Budgets
  - name: ingestBudgetManagementV2
    description: |
      Ingest Budget management API V2.

      Ingest Budgets V2 provide you the ability to create and assign budgets to your log data by Fields instead of using a Field Value. For more information see [Metadata Ingest Budgets](https://help.sumologic.com/?cid=52352).
    x-displayName: Ingest Budgets V2
  - name: partitionManagement
    description: |
      Partition management API.

      Creating a Partition allows you to improve search performance by searching over a smaller number of messages. For more information see [Manage Partitions](https://help.sumologic.com/?cid=5231).
    x-displayName: Partitions
  - name: logsDataForwardingManagement
    description: |
      Logs Data Forwarding management API.

      Logs Data Forwarding allows you to forward log data from a Partition or Scheduled View to an S3 bucket. For more information see [Forwarding Data to S3](https://help.sumologic.com/Manage/Data-Forwarding/Configure-Data-Forwarding-from-Sumo-Logic-to-S3).
    x-displayName: Logs Data Forwarding
  - name: roleManagement
    description: |
      Role management API.

      Roles determine the functions that users are able to perform in Sumo Logic. To manage roles, you must have an administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Roles](https://help.sumologic.com/?cid=5234).
    x-displayName: Roles
  - name: lookupManagement
    description: |
      Lookup Table management API.

      A Lookup Table is a table of data hosted on Sumo Logic that you can use to enrich the log and event data received by Sumo Logic. You must create a table schema before you can populate the table. For more information see [Lookup Tables](https://help.sumologic.com/?cid=10109).
    x-displayName: Lookup Tables
  - name: scheduledViewManagement
    description: |
      Scheduled View management API.

      Scheduled Views speed the search process for small and historical subsets of your data by functioning as a pre-aggregated index. For more information see [Manage Scheduled Views](https://help.sumologic.com/?cid=5128).
    x-displayName: Scheduled Views
  - name: tokensLibraryManagement
    description: |
      Tokens management API.

      Tokens are associated with your organization to authorize specific operations. Currently, we support collector registration tokens, which can be used to register Installed Collectors. Managing tokens requires the Manage Tokens role capability. For more information see [Installation Tokens](https://help.sumologic.com/?cid=0100).
    x-displayName: Tokens
  - name: transformationRuleManagement
    description: |
      Transformation Rule management API.
      Metrics Transformation Rules allow you control how long raw metrics are retained. You can also aggregate metrics at collection time and specify a separate retention period for the aggregated metrics. For more information see [Metrics Transformation Rules](https://help.sumologic.com/?cid=10117).
    x-displayName: Transformation Rules (Beta)
  - name: userManagement
    description: |
      User management API.

      To manage users, you must have the administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Users](https://help.sumologic.com/?cid=1006).
    x-displayName: Users
  - name: metricsSearchesManagement
    description: |
      Metrics Search management API.

      Save metrics searches in the content library and organize them in a folder hierarchy. Share useful queries with users in your organization. For more information see [Sharing Metric Charts](https://help.sumologic.com/Metrics/03-Metric-Charts/Share_a_Metric_Chart).
    x-displayName: Metrics Searches (Beta)
  - name: metricsQuery
    description: |
      Metrics Query API.

      The Metrics Query API allows you to execute queries on various metrics and retrieve multiple time-series (data-points) over time range(s). For more information see [Metrics - Classic](https://help.sumologic.com/?cid=1079).
    x-displayName: Metrics Query
  - name: accessKeyManagement
    description: |
      Access Key management API.

      Access Keys allow you to securely register new Collectors and access Sumo Logic APIs. For more information see [Access Keys](https://help.sumologic.com/?cid=6690).
    x-displayName: Access Keys
  - name: samlConfigurationManagement
    description: |
      SAML configuration management API

      Organizations with Enterprise accounts can provision Security Assertion Markup Language (SAML) 2.0 to enable Single Sign-On (SSO) for user access to Sumo Logic. For more information see [SAML Configuration](https://help.sumologic.com/?cid=4016).
    x-displayName: SAML Configuration
  - name: serviceAllowlistManagement
    description: |
      Service Allowlist management API

      Service Allowlist Settings allow you to explicitly grant access to specific IP addresses and/or CIDR notations for logins, APIs, and dashboard access. For more information see [Service Allowlist Settings](https://help.sumologic.com/?cid=5454).
    x-displayName: Service Allowlist
  - name: healthEvents
    description: |
      Health Events management API.

      Health Events allow you to keep track of the health of your Collectors and Sources. You can use them to find and investigate common errors and warnings that are known to cause collection issues. For more information see [Health Events](https://help.sumologic.com/?cid=0020).
    x-displayName: Health Events
  - name: archiveManagement
    description: |-
      Archive Ingestion Management API.

      Archive Ingestion allows you to ingest data from Archive destinations. You can use this API to ingest data from your Archive with an existing AWS S3 Archive Source. You need the Manage or View Collectors role capability to manage or view ingestion jobs. For more information see [Archive](https://help.sumologic.com/?cid=10011).
    x-displayName: Archive Ingestion Management
  - name: logSearchesEstimatedUsage
    description: |
      Log Search Estimated Usage API.

      Gets the estimated volume of data that would be scanned for a given log search in the Infrequent data tier, over a particular time range. In the Infrequent Data Tier, you pay per query, based on the amount data scanned. You can use this endpoint to get an estimate of the total data that would be scanned before running a query, and refine your query to scan less data, as necessary. For more information see [Infrequent data tier](https://help.sumologic.com/?cid=11987).
    x-displayName: Log Search Estimated Usage
  - name: passwordPolicy
    description: |
      Password Policy Management API

      The password policy controls how user passwords are managed. The "Manage Password Policy" role capability is required to update the password policy. For more information see [how to set a password policy](https://help.sumologic.com/?cid=8595).
    x-displayName: Password Policy
  - name: policiesManagement
    description: |
      Policies management API.

      Policies control the security and share settings of your organization. For more information see [Security](https://help.sumologic.com/?cid=4041).
    x-displayName: Policies
  - name: traces
    description: |
      Traces API

      The Traces API allows you to browse traces collected in the system. You can execute queries to find traces matching provided search criteria as well as gather detailed information about individual traces and spans. For more information see [View and investigate traces](https://help.sumologic.com/Traces/View_and_investigate_traces).
    x-displayName: Traces
  - name: spanAnalytics
    description: |
      Span Analytics API

      The Span Analytics API allows you to browse spans collected in the system. You can execute queries to find individual spans matching provided search criteria as well as run aggregated span queries and retrieve their results. For more information see [Spans](https://help.sumologic.com/Traces/Spans).
    x-displayName: Span Analytics
  - name: serviceMap
    description: |
      Service Map API

      The Service Map API allows you to fetch a graph representation of the Service Map, which is a high-level view of your application environment, automatically derived from tracing data. For more information see [Service Map](https://help.sumologic.com/Traces/Service_Map_and_Dashboards#service-map).
    x-displayName: Service Map
  - name: slosLibraryManagement
    description: |
      SLO Management API.

      SLOs are used to monitor and alert on KPIs for your most important services or user experience.
    x-displayName: SLOs
  - name: monitorsLibraryManagement
    description: |
      Monitor Management API.


      Monitors continuously query your data to monitor and send notifications when specific events occur.
      For more information see [Monitors](https://help.sumologic.com/?cid=10020).
    x-displayName: Monitors
info:
  title: Sumo Logic API - content
  description: content
  version: 1.0.0
  x-logo:
    url: ./sumologic_logo.png
