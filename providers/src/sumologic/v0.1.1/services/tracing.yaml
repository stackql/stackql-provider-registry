paths:
  /v1/tracing/tracequery:
    post:
      tags:
        - traces
      summary: Run a trace search query asynchronously.
      description: Execute a trace search query and get the id to fetch its status and results. Use the [Trace Query Status](#operation/getTraceQueryStatus) endpoint to check a query status. When the query has been completed, use the [Trace Query Result](#operation/getTraceQueryResult) endpoint to get the result of the asynchronous query.
      operationId: createTraceQuery
      parameters: []
      requestBody:
        description: Query parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsyncTraceQueryRequest'
        required: true
      responses:
        '200':
          description: Query execution result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTraceQueryResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/tracequery/{queryId}:
    delete:
      tags:
        - traces
      summary: Cancel a trace search query.
      description: Cancel a currently processed trace search query with the given id.
      operationId: cancelTraceQuery
      parameters:
        - name: queryId
          in: path
          description: Identifier of the query to cancel.
          required: true
          schema:
            type: string
            example: 798a13dc1ceeb19a
      responses:
        '204':
          description: Query canceled successfully.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/tracequery/{queryId}/status:
    get:
      tags:
        - traces
      summary: Get a trace search query status.
      description: Get a status of a trace query with the given id. When the query has been completed, use the [Trace Query Result](#operation/getTraceQueryResult) endpoint to get the result of the asynchronous query.
      operationId: getTraceQueryStatus
      parameters:
        - name: queryId
          in: path
          description: Identifier of the executed query.
          required: true
          schema:
            type: string
            example: 195038749d21ad109242c95cbbc8709d
      responses:
        '200':
          description: Status of the given trace search query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceQueryStatusResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/tracequery/{queryId}/rows/{rowId}/traces:
    get:
      tags:
        - traces
      summary: Get results of a trace search query.
      description: Get a list of traces matching a query with the specified id. The response is paginated with a default limit of 100 traces per page.
      operationId: getTraceQueryResult
      parameters:
        - name: queryId
          in: path
          description: Identifier of the executed query.
          required: true
          schema:
            type: string
            example: 195038749d21ad109242c95cbbc8709d
        - name: rowId
          in: path
          description: Identifier of the query row.
          required: true
          schema:
            type: string
            example: A
        - name: limit
          in: query
          description: Limit of the number of traces returned in the response.
          required: false
          schema:
            maximum: 500
            minimum: 1
            type: integer
            format: int32
            example: 100
            default: 100
        - name: token
          in: query
          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.
          required: false
          schema:
            type: string
            example: dlFXd0lhSkxzRjAwYnpVZkMrRmlhYnF4cGtNMWdnVEI
      responses:
        '200':
          description: Details about the given span query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceQueryResultResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/metrics:
    get:
      tags:
        - traces
      summary: Get trace search query metrics.
      description: Get a list of available trace metrics that can be used in trace search queries.
      operationId: getMetrics
      parameters: []
      responses:
        '200':
          description: List of available metrics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceMetricsResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/tracequery/fields:
    get:
      tags:
        - traces
      summary: Get filter fields for trace search queries.
      description: Get a list of available fields which can be used in trace search queries.
      operationId: getTraceQueryFields
      parameters: []
      responses:
        '200':
          description: List of available fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceFieldsResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/tracequery/fields/{field}/values:
    get:
      tags:
        - traces
      summary: Get trace search query filter field values.
      description: Get a list of available values for the given trace search query filter field. Not all fields support value listing. The response is paginated with a default limit of 10 values per page.
      operationId: getTraceQueryFieldValues
      parameters:
        - name: field
          in: path
          description: Field identifier.
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: Search filter to apply on the values to be returned. Only values containing the search query term will be returned.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to fetch.
          required: false
          schema:
            maximum: 500
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: token
          in: query
          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of available filter values for the given field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceFieldValuesResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/traces/{traceId}:
    get:
      tags:
        - traces
      summary: Get trace details.
      description: Get details of a trace with the given identifier.
      operationId: getTrace
      parameters:
        - name: traceId
          in: path
          description: Identifier of the trace to get the details.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Details of the trace with the given identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceDetail'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/traces/{traceId}/exists:
    get:
      tags:
        - traces
      summary: Check if the trace exists.
      description: Check if the trace with the given identifier exists.
      operationId: traceExists
      parameters:
        - name: traceId
          in: path
          description: Identifier of the trace to check.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The response contains the information whether the trace exists with other optional attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceExistsResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/traces/{traceId}/spans:
    get:
      tags:
        - traces
      summary: Get a list of trace spans.
      description: Get a list of spans for the given trace. The response is paginated with a default limit of 100 spans per page.
      operationId: getSpans
      parameters:
        - name: traceId
          in: path
          description: Identifier of the trace to get the spans.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to fetch.
          required: false
          schema:
            maximum: 500
            minimum: 1
            type: integer
            format: int32
            default: 100
        - name: token
          in: query
          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of spans for the given trace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceSpansResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/traces/{traceId}/traceEvents:
    get:
      tags:
        - traces
      summary: Get a list of events (without their attributes) per span for a trace.
      description: Gets a list of the events (without their attributes) attached to each span in a given trace. The response is paginated with a default limit of 100 spans per page.
      operationId: getTraceLightEvents
      parameters:
        - name: traceId
          in: path
          description: Identifier of the trace for which span events will be returned.
          required: true
          schema:
            maxLength: 32
            minLength: 16
            type: string
            example: 695068749d21cd104222a95cabc4707c
        - name: limit
          in: query
          description: The maximum number of spans with events returned by a single query.
          required: false
          schema:
            maximum: 500
            minimum: 1
            type: integer
            format: int32
            default: 100
        - name: token
          in: query
          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.
          required: false
          schema:
            type: string
            example: dlFXd0lhSkxzRjAwYnpVZkMrRmlhYnF4cGtNMWdnVEI
      responses:
        '200':
          description: Map of spans to events relations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceLightEventsResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/traces/{traceId}/criticalPath:
    get:
      tags:
        - traces
      summary: Get a critical path of a trace.
      description: Get a list of span segments composing the critical path of the trace. A span segment represents the processing time that was consumed within the span itself and does not incorporate the processing time of its children. The critical path is the sequence of span segments that contribute to the total trace duration. An increase of the processing time of any segment from the critical path would result in an increase of the total trace processing time.
      operationId: getCriticalPath
      parameters:
        - name: traceId
          in: path
          description: Identifier of the trace.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to fetch.
          required: false
          schema:
            maximum: 500
            minimum: 1
            type: integer
            format: int32
            default: 100
        - name: token
          in: query
          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of span segments composing the critical path.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriticalPathResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/traces/{traceId}/criticalPath/breakdown/service:
    get:
      tags:
        - traces
      summary: Get a critical path service breakdown of a trace.
      description: Get a critical path breakdown by services of the spans contributing to the critical path of a trace with the given identifier.
      operationId: getCriticalPathServiceBreakdown
      parameters:
        - name: traceId
          in: path
          description: Identifier of the trace.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of elements representing the critical path service breakdown.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriticalPathServiceBreakdownResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/traces/{traceId}/spans/{spanId}:
    get:
      tags:
        - traces
      summary: Get span details.
      description: Get details of a span with the given identifier.
      operationId: getSpan
      parameters:
        - name: traceId
          in: path
          description: Identifier of the trace the span belongs to.
          required: true
          schema:
            type: string
        - name: spanId
          in: path
          description: Identifier of the span to get the details.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Details of the span with the given identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceSpanDetail'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/traces/{traceId}/spans/{spanId}/billingInfo:
    get:
      tags:
        - traces
      summary: Get span billing details.
      description: Get the billing information of the span.
      operationId: getSpanBillingInfo
      parameters:
        - name: traceId
          in: path
          description: Identifier of the trace the span belongs to.
          required: true
          schema:
            type: string
        - name: spanId
          in: path
          description: Identifier of the span to get the billing info.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Billing information of the span with the given identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceSpanBillingInfo'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/spanquery:
    post:
      tags:
        - spanAnalytics
      summary: Run a span analytics query asynchronously.
      description: Execute a span analytics query and get the id to fetch its status and results. Use the [Span Query Status](#operation/getSpanQueryStatus) endpoint to check a query status. When the query has been completed, use the [Span Query Result](#operation/getSpanQueryResult) endpoint to get the result of the asynchronous query.
      operationId: createSpanQuery
      parameters: []
      requestBody:
        description: Query parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpanQueryRequest'
        required: true
      responses:
        '200':
          description: Query execution result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpanQueryResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/spanquery/{queryId}:
    delete:
      tags:
        - spanAnalytics
      summary: Cancel a span analytics query.
      description: Cancel a currently processed span search query with the given id.
      operationId: cancelSpanQuery
      parameters:
        - name: queryId
          in: path
          description: Identifier of the query to cancel.
          required: true
          schema:
            type: string
            example: 195038749d21ad109242c95cbbc8709d
      responses:
        '204':
          description: Query canceled successfully.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/spanquery/{queryId}/status:
    get:
      tags:
        - spanAnalytics
      summary: Get a span analytics query status.
      description: Get a status of a span analytics query with the given id. When the query has been completed, use the [Span Query Result](#operation/getSpanQueryResult) endpoint to get the result of the asynchronous query.
      operationId: getSpanQueryStatus
      parameters:
        - name: queryId
          in: path
          description: Identifier of the executed query.
          required: true
          schema:
            type: string
            example: 195038749d21ad109242c95cbbc8709d
      responses:
        '200':
          description: Details about the given span query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpanQueryStatusResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/spanquery/{queryId}/pause:
    put:
      tags:
        - spanAnalytics
      summary: Pause a span analytics query.
      description: Pause a currently processed span search query with the given id.
      operationId: pauseSpanQuery
      parameters:
        - name: queryId
          in: path
          description: Identifier of the query to pause.
          required: true
          schema:
            type: string
            example: 195038749d21ad109242c95cbbc8709d
      responses:
        '204':
          description: Query paused successfully.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/spanquery/{queryId}/resume:
    put:
      tags:
        - spanAnalytics
      summary: Resume a span analytics query.
      description: Resume a previously paused span search query with the given id.
      operationId: resumeSpanQuery
      parameters:
        - name: queryId
          in: path
          description: Identifier of the query to resume.
          required: true
          schema:
            type: string
            example: 195038749d21ad109242c95cbbc8709d
      responses:
        '204':
          description: Query resumed successfully.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/spanquery/{queryId}/rows/{rowId}/spans:
    get:
      tags:
        - spanAnalytics
      summary: Get results of a span analytics query.
      description: Get a list of spans matching a query with the specified id. The response is paginated with a default limit of 100 spans per page.
      operationId: getSpanQueryResult
      parameters:
        - name: queryId
          in: path
          description: Identifier of the executed query.
          required: true
          schema:
            type: string
            example: 195038749d21ad109242c95cbbc8709d
        - name: rowId
          in: path
          description: Identifier of the query row.
          required: true
          schema:
            type: string
            example: A
        - name: limit
          in: query
          description: Limit of the number of spans returned in the response.
          required: false
          schema:
            maximum: 500
            minimum: 1
            type: integer
            format: int32
            example: 100
            default: 100
        - name: token
          in: query
          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.
          required: false
          schema:
            type: string
            example: dlFXd0lhSkxzRjAwYnpVZkMrRmlhYnF4cGtNMWdnVEI
      responses:
        '200':
          description: Details about the given span query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpanQueryResultSpansResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/spanquery/{queryId}/rows/{rowId}/facets:
    get:
      tags:
        - spanAnalytics
      summary: Get a list of facets of a span analytics query.
      description: Get a list of facets of a span analytics query with the specified id.
      operationId: getSpanQueryFacets
      parameters:
        - name: queryId
          in: path
          description: Identifier of the executed query.
          required: true
          schema:
            type: string
            example: 195038749d21ad109242c95cbbc8709d
        - name: rowId
          in: path
          description: Identifier of the query row.
          required: true
          schema:
            type: string
            example: A
      responses:
        '200':
          description: The list of facets from the executed query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpanQueryResultFacetsResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/spanquery/{queryId}/aggregates:
    get:
      tags:
        - spanAnalytics
      summary: Get span analytics query aggregated results.
      description: Get span aggregation results for an aggregated span analytics query with the specified id. Only aggregated rows being part of the executed query will have matching results in the response of this endpoint.
      operationId: getSpanQueryAggregates
      parameters:
        - name: queryId
          in: path
          description: Identifier of the executed query.
          required: true
          schema:
            type: string
            example: 195038749d21ad109242c95cbbc8709d
      responses:
        '200':
          description: The aggregation result of the executed query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpanQueryAggregateResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/spanquery/fields:
    get:
      tags:
        - spanAnalytics
      summary: Get filter fields for span analytics queries.
      description: Get a list of available fields which can be used in span analytics queries.
      operationId: getSpanQueryFields
      parameters: []
      responses:
        '200':
          description: List of available fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpanQueryFieldsResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/spanquery/fields/{field}/values:
    get:
      tags:
        - spanAnalytics
      summary: Get span analytics query filter field values.
      description: Get a list of available values for the given span analytics query filter field. Not all fields support value listing. The response is paginated with a default limit of 10 field values per page.
      operationId: getSpanQueryFieldValues
      parameters:
        - name: field
          in: path
          description: Field identifier.
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: Search filter to apply on the values to be returned. Only values containing the search query term will be returned.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to fetch.
          required: false
          schema:
            maximum: 500
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: token
          in: query
          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of available filter values for the given field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceFieldValuesResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tracing/serviceMap:
    get:
      tags:
        - serviceMap
      summary: Get a service map.
      description: Run a search request to get a map of services and connections between them.
      operationId: getServiceMap
      parameters: []
      responses:
        '200':
          description: List of nodes and list of edges.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceMapResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    AsyncTraceQueryRequest:
      required:
        - queryRows
        - timeRange
      type: object
      properties:
        queryRows:
          type: array
          description: A list of trace queries.
          items:
            $ref: '#/components/schemas/AsyncTraceQueryRow'
        timeRange:
          $ref: '#/components/schemas/ResolvableTimeRange'
    CreateTraceQueryResponse:
      required:
        - queryId
      type: object
      properties:
        queryId:
          type: string
          description: Id of the created query
          example: cafaebf2f4f8320f
    ErrorResponse:
      required:
        - errors
        - id
      type: object
      properties:
        id:
          type: string
          description: An identifier for the error; this is unique to the specific API request.
          example: IUUQI-DGH5I-TJ045
        errors:
          type: array
          description: A list of one or more causes of the error.
          example:
            - code: auth:password_too_short
              message: Your password was too short.
            - code: auth:password_character_classes
              message: Your password did not contain any non-alphanumeric characters
          items:
            $ref: '#/components/schemas/ErrorDescription'
    AsyncTraceQueryRow:
      required:
        - query
        - rowId
      type: object
      properties:
        query:
          $ref: '#/components/schemas/TraceQueryExpression'
        rowId:
          maxLength: 16
          type: string
          description: An identifier used to reference this particular row of the query request while fetching a query result. Within a query, row ids must have distinct values.
          example: '#A'
        orderBy:
          $ref: '#/components/schemas/OrderBy'
    ResolvableTimeRange:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: Type of the time range. Value must be either `CompleteLiteralTimeRange` or `BeginBoundedTimeRange`.
      example:
        type: BeginBoundedTimeRange
        from:
          type: RelativeTimeRangeBoundary
          relativeTime: '-15m'
      discriminator:
        propertyName: type
    ErrorDescription:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: An error code describing the type of error.
          example: auth:password_too_short
        message:
          type: string
          description: A short English-language description of the error.
          example: Your password was too short.
        detail:
          type: string
          description: An optional fuller English-language description of the error.
          example: Your password was 5 characters long, the minimum length is 12 characters. See http://example.com/password for more information.
        meta:
          type: object
          description: An optional list of metadata about the error.
          example:
            minLength: 12
            actualLength: 5
    TraceQueryExpression:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: Expression type of the object model.
      description: Base query expression object.
      discriminator:
        propertyName: type
    OrderBy:
      required:
        - fieldName
        - order
      type: object
      properties:
        fieldName:
          maxLength: 32
          minLength: 1
          type: string
          description: 'Field based on which results should be sorted. When not provided, the default behavior is to sort by timestamp descending. Sortable fields values: `trace_id`, `start_timestamp`, `duration`, `spans_number`, `errors`, `status_code`.'
          example: start_timestamp
        order:
          pattern: ^(Asc|Desc)$
          type: string
          description: Type of sorting values - descending or ascending.
          example: Asc
          default: Desc
          x-pattern-message: should be either 'Asc' or 'Desc'
    TraceQueryStatusResponse:
      required:
        - queryRows
        - status
      type: object
      properties:
        queryRows:
          type: array
          description: A list of trace queries.
          items:
            $ref: '#/components/schemas/TraceQueryRowStatus'
        status:
          pattern: ^(Processing|Finished|Error|Canceled)$
          type: string
          description: 'Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Canceled`.'
          example: Processing
          x-pattern-message: Should be either `Processing`, `Finished`, `Error`, `Canceled`.
    TraceQueryRowStatus:
      required:
        - count
        - rowId
        - status
      type: object
      properties:
        rowId:
          type: string
          description: A unique identifier of the query.
          example: A
        status:
          pattern: ^(Processing|Finished|Error|Canceled)$
          type: string
          description: 'Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Canceled`.'
          example: Processing
          x-pattern-message: Should be either `Processing`, `Finished`, `Error`, `Canceled`.
        statusMessage:
          type: string
          description: Descriptive message of the status
          example: Finished successfully
        count:
          minimum: 0
          type: integer
          description: Number of results matching the query
          format: int64
          example: 3215
    TraceQueryResultResponse:
      required:
        - results
      type: object
      properties:
        results:
          type: array
          description: List of traces matching the query.
          items:
            $ref: '#/components/schemas/TraceDetail'
        next:
          type: string
          description: Next continuation token.
          example: '10001'
    TraceDetail:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: Trace identifier.
          example: 00000000000120CB
        rootService:
          type: string
          description: 'Root service which started the trace. Examples: `user-service`, `authentication-service`, `payment-service`, `/shopping-cart`'
          example: user-service
        rootResource:
          type: string
          description: 'Root resource on which the trace was started. Examples: `db.query`, `http.request`, `rpc.call`, `container`'
          example: http.request
        rootStatus:
          $ref: '#/components/schemas/TraceSpanStatus'
        rootOperationName:
          type: string
          description: The name of the operation given to the root span.
          example: retrieveAccount
        metrics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DoubleTracingValue'
          description: Calculated trace metrics.
          example:
            _duration: 143984411
        startedAt:
          type: string
          description: Date and time the trace was started in [ISO 8601 / RFC3339](https://tools.ietf.org/html/rfc3339) format.
          format: date-time
          example: '2019-11-22T09:00:00Z'
        criticalPathServiceBreakdownSummary:
          $ref: '#/components/schemas/CriticalPathServiceBreakdownSummary'
    TraceSpanStatus:
      required:
        - code
      type: object
      properties:
        code:
          type: string
          description: 'Status code of the span. Possible values: `OK`, `ERROR`, `UNKNOWN`.'
          example: OK
        message:
          type: string
          description: Optional descriptive message about the status, could be an http status code or the kind of an error, e.g. OSError.
          example: '404'
    DoubleTracingValue:
      allOf:
        - $ref: '#/components/schemas/TracingValue'
        - required:
            - value
          type: object
          properties:
            value:
              type: number
              format: double
    CriticalPathServiceBreakdownSummary:
      required:
        - elements
        - idleTime
        - otherServicesDuration
      type: object
      properties:
        elements:
          type: array
          description: List of the elements representing the critical path service duration breakdown - contains the first few services with the longest overall duration of the spans contributing to the critical path.
          items:
            $ref: '#/components/schemas/CriticalPathServiceBreakdownElementBase'
        otherServicesDuration:
          type: integer
          description: Overall processing time in nanoseconds consumed by the rest of the spans in the critical path (a sum of the duration times of the spans' critical path segments).
          format: int64
          example: 12957153
        idleTime:
          type: integer
          description: Overall time in nanoseconds when no particular operation was in progress.
          format: int64
          example: 60000000
    TracingValue:
      required:
        - type
      properties:
        type:
          type: string
          description: Type of the value model.
      discriminator:
        propertyName: type
    CriticalPathServiceBreakdownElementBase:
      required:
        - duration
      type: object
      properties:
        service:
          type: string
          description: The name of the service.
          example: user-service
        serviceColor:
          type: string
          description: Color hex code assigned to the service.
          example: '#fa41c6'
        duration:
          type: integer
          description: Overall processing time in nanoseconds consumed by the spans belonging to this service in the critical path (a sum of the duration times of the spans' critical path segments).
          format: int64
          example: 12957153
    TraceMetricsResponse:
      required:
        - metrics
      type: object
      properties:
        metrics:
          type: array
          description: List of trace metrics.
          items:
            $ref: '#/components/schemas/TraceMetricDetail'
    TraceMetricDetail:
      required:
        - metric
        - type
      type: object
      properties:
        metric:
          type: string
          description: Trace metric name. In trace queries it can be used in `MetricTracingFilter.metric`.
          example: _duration
        description:
          type: string
          description: Short description of the metric.
          example: The duration of a trace in nanoseconds.
        type:
          type: string
          description: 'The type the values of this field will have. Possible values: `DoubleTracingValue`, `IntegerTracingValue`.'
          example: IntegerTracingValue
    TraceFieldsResponse:
      required:
        - fields
      type: object
      properties:
        fields:
          type: array
          description: List of filter fields.
          items:
            $ref: '#/components/schemas/TraceFieldDetail'
    TraceFieldDetail:
      required:
        - field
        - fieldType
        - type
      type: object
      properties:
        field:
          type: string
          description: Filter field name.
          example: operation
        fieldType:
          pattern: ^(TraceField|SpanEventField)$
          type: string
          description: 'Indicates the kind of a field. Possible values: `TraceField`, `SpanEventField`.'
          example: SpanEventField
          default: TraceField
          x-pattern-message: 'Should be one of: `TraceField`, `SpanEventField`.'
        valueListing:
          type: boolean
          description: Indicates whether values for this field can be listed.
          example: false
        description:
          type: string
          description: Short description of the field.
          example: A piece of the workflow represented by a span
        type:
          type: string
          description: 'The type the values of this field will have. Possible values: `DoubleTracingValue`, `IntegerTracingValue`, `StringTracingValue`, `DateTimeTracingValue`.'
          example: StringTracingValue
        noValuesReason:
          $ref: '#/components/schemas/NoTraceFieldValuesReason'
    NoTraceFieldValuesReason:
      required:
        - code
        - message
      type: object
      properties:
        code:
          pattern: ^(HighCardinalityField|AutocompleteDisabled)$
          type: string
          description: 'A code uniquely identifying the reason for the lack of trace field values. Possible values: `HighCardinalityField`, `AutocompleteDisabled`.'
          example: HighCardinalityField
          x-pattern-message: Should be either `HighCardinalityField`, `AutocompleteDisabled`.
        message:
          type: string
          description: A short English-language description of the reason.
          example: Autocomplete has been disabled for this field due to high cardinality.
    TraceFieldValuesResponse:
      required:
        - fieldValues
        - totalCount
      type: object
      properties:
        fieldValues:
          type: array
          description: List of filter field values.
          items:
            type: string
        totalCount:
          type: integer
          description: Total number of values for a field matching the query. Can be approximated when it's above 3000.
          format: int64
          example: 1234
        next:
          type: string
          description: Next continuation token.
          example: Mi93V0ZqTTBzaW89
    TraceExistsResponse:
      required:
        - exists
      type: object
      properties:
        exists:
          type: boolean
          description: Indicates whether the trace with the given trace id exists.
          example: true
        url:
          type: string
          description: A path to the trace view page in Sumo Logic UI.
          example: '#/trace/00000000000120CB'
    TraceSpansResponse:
      required:
        - spans
        - totalCount
      type: object
      properties:
        spanPage:
          type: array
          description: List of trace spans.
          items:
            $ref: '#/components/schemas/TraceSpan'
        totalCount:
          type: integer
          description: Total count of spans for this trace.
          format: int64
          example: 1234
        next:
          type: string
          description: Next continuation token.
          example: dlFXd0lhSkxzRjAwYnpVZkMrRmlhYnF4cGtNMWdnVEI
    TraceSpan:
      required:
        - duration
        - id
        - operationName
        - startedAt
        - status
      type: object
      properties:
        id:
          type: string
          description: Identifier of the span.
          example: 00000000002317A9
        parentId:
          type: string
          description: Identifier of the parent span, if any. If the span has no parent it's considered a root span.
          example: 000000000003C7BE
        operationName:
          type: string
          description: The name of the operation given to the span.
          example: retrieveAccount
        resource:
          type: string
          description: The name of the resource attached to the span.
          example: http.request
        service:
          type: string
          description: The name of the service this span is part of.
          example: user-service
        serviceColor:
          type: string
          description: Color hex code assigned to the service.
          example: '#fa41c6'
        serviceType:
          $ref: '#/components/schemas/ServiceType'
        duration:
          type: integer
          description: Number of nanoseconds the span lasted.
          format: int64
          example: 212957153
        startedAt:
          type: string
          description: Date and time the span was started in the [ISO 8601 / RFC3339](https://tools.ietf.org/html/rfc3339) format.
          format: date-time
          example: '2019-11-22T09:00:00Z'
        status:
          $ref: '#/components/schemas/TraceSpanStatus'
        kind:
          pattern: ^(CLIENT|SERVER|PRODUCER|CONSUMER|INTERNAL)$
          type: string
          description: 'Span kind describes the relationship between the Span, its parents, and its children in a Trace. Possible values: `CLIENT`, `SERVER`, `PRODUCER`, `CONSUMER`, `INTERNAL`.'
          example: SERVER
          x-pattern-message: Should be either `CLIENT`, `SERVER`, `PRODUCER`, `CONSUMER` or `INTERNAL`.
        remoteService:
          type: string
          description: Name of the possible remote span's service.
          example: external-service
        remoteServiceColor:
          type: string
          description: Color hex code assigned to the remote service.
          example: '#fa41c6'
        remoteServiceType:
          $ref: '#/components/schemas/ServiceType'
        info:
          $ref: '#/components/schemas/TraceSpanInfo'
        numberOfLinks:
          type: integer
          description: Number of span links in this span.
          format: int32
          example: 2
    ServiceType:
      pattern: ^(Db|HTTP|MQ|Web|Mixed|Unknown|Cpp|DotNET|Erlang|Go|Java|NodeJS|Php|Python|Ruby|WebJS|Swift|MSSQL|MySQL|Oracle|Db2|PostgreSQL|Redshift|Hive|Cloudscape|HSQLDB|Progress|MaxDB|HANADB|Ingres|FirstSQL|EnterpriseDB|Cache|Adabas|Firebird|ApacheDerby|FileMaker|Informix|InstantDB|InterBase|MariaDB|Netezza|PervasivePSQL|PointBase|SQLite|Sybase|Teradata|Vertica|H2|ColdFusion|Cassandra|HBase|MongoDB|Redis|Couchbase|CouchDB|CosmosDB|DynamoDB|Neo4j|Geode|Elasticsearch|Memcached|CockroachDB)$
      type: string
      description: Defines type of service.
      example: HTTP
      x-pattern-message: Should be either `Db`, `HTTP`, `MQ`, `Web`, `Mixed`, `Unknown`, `Cpp`, `DotNET`, `Erlang`, `Go`, `Java`, `NodeJS`, `Php`, `Python`, `Ruby`, `WebJS`, `Swift`, `MSSQL`, `MySQL`, `Oracle`, `Db2`, `PostgreSQL`, `Redshift`, `Hive`, `Cloudscape`, `HSQLDB`, `Progress`, `MaxDB`, `HANADB`, `Ingres`, `FirstSQL`, `EnterpriseDB`, `Cache`, `Adabas`, `Firebird`, `ApacheDerby`, `FileMaker`, `Informix`, `InstantDB`, `InterBase`, `MariaDB`, `Netezza`, `PervasivePSQL`, `PointBase`, `SQLite`, `Sybase`, `Teradata`, `Vertica`, `H2`, `ColdFusion`, `Cassandra`, `HBase`, `MongoDB`, `Redis`, `Couchbase`, `CouchDB`, `CosmosDB`, `DynamoDB`, `Neo4j`, `Geode`, `Elasticsearch`, `Memcached` or `CockroachDB`
    TraceSpanInfo:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: 'Type of this span. Possible values: `TraceHttpSpanInfo`, `TraceDbSpanInfo`, `TraceMessageBusSpanInfo`.'
          example: TraceHttpSpanInfo
      discriminator:
        propertyName: type
    TraceLightEventsResponse:
      type: object
      properties:
        spanEvents:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/LightSpanEvent'
          description: Map of span ids to lists of their events, without their attributes.
        next:
          type: string
          description: Next continuation token.
          example: dlFXd0lhSkxzRjAwYnpVZkMrRmlhYnF4cGtNMWdnVEI
    LightSpanEvent:
      required:
        - name
        - timestamp
      type: object
      properties:
        timestamp:
          type: string
          description: Time when an event happened in the [ISO 8601 / RFC3339](https://tools.ietf.org/html/rfc3339) format.
          format: date-time
          example: '2021-04-19T17:36:57.47623Z'
        name:
          type: string
          description: Name of the event.
          example: domContentLoadedEventStart
      description: Light version of Span Event, without the attributes.
    CriticalPathResponse:
      required:
        - segments
      type: object
      properties:
        segments:
          type: array
          description: List of span segments from the critical path.
          items:
            $ref: '#/components/schemas/SpanPathSegment'
        next:
          type: string
          description: Next continuation token.
          example: Mi93V0ZqTTBzaW89
    SpanPathSegment:
      required:
        - duration
        - ratio
        - spanId
        - startOffset
      type: object
      properties:
        spanId:
          type: string
          description: Span identifier.
          example: 00000000000120CB
        service:
          type: string
          description: The name of the service this span is part of.
          example: user-service
        serviceColor:
          type: string
          description: Color hex code assigned to the service.
          example: '#fa41c6'
        startOffset:
          type: integer
          description: Number of nanoseconds from the span startedAt the segment started.
          format: int64
          example: 311285715
        duration:
          type: integer
          description: Number of nanoseconds the span segment lasted.
          format: int64
          example: 12957153
        fraction:
          type: number
          description: The fraction (value between 0.0 and 1.0) from the trace duration time this segment took.
          format: double
          example: 0.4
    CriticalPathServiceBreakdownResponse:
      required:
        - elements
        - idleTime
      type: object
      properties:
        elements:
          type: array
          description: List of elements representing the critical path service breakdown.
          items:
            $ref: '#/components/schemas/CriticalPathServiceBreakdownElementDetail'
        idleTime:
          type: integer
          description: Overall time in nanoseconds when no particular operation was in progress.
          format: int64
          example: 60000000
    CriticalPathServiceBreakdownElementDetail:
      allOf:
        - $ref: '#/components/schemas/CriticalPathServiceBreakdownElementBase'
        - required:
            - longestSegmentDuration
            - numSpans
          type: object
          properties:
            numSpans:
              type: integer
              description: Number of spans that are part of this service.
              format: int32
              example: 12957153
            longestSegmentDuration:
              type: integer
              description: Number of nanoseconds the longest span segment in the critical path lasted.
              format: int64
              example: 12957153
    TraceSpanDetail:
      allOf:
        - $ref: '#/components/schemas/TraceSpan'
        - type: object
          properties:
            errorMessage:
              type: string
              description: Produced error message (could be a stack trace, database error code, ..)
              example: |
                Exception in thread "local[9]" java.lang.OutOfMemoryError: Java heap space
                    at my.app.force.fields.SpaceShipForceField.main(SpaceShipForceField.java:17)
            fields:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/TracingValue'
              description: Fields attached to this span.
              example:
                component:
                  type: StringTracingValue
                  value: http
                http.method:
                  type: StringTracingValue
                  value: GET
                http.url:
                  type: StringTracingValue
                  value: /v1/users/123
                http.status_code:
                  type: StringTracingValue
                  value: '200'
            criticalPathContribution:
              $ref: '#/components/schemas/TraceSpanCriticalPathContribution'
            logs:
              type: array
              description: Logs attached to this span.
              example:
                - '[19/Dec/2019:10:58:21 +0000] ''GET /v1/users/123 HTTP/1.1'' 200 8215 ''http://111.111.11.1/'' ''Mozilla/5.0 (Macintosh; Intel Mac OS X 11_11_1) AppleWebKit/111.11 (KHTML, like Gecko) Chrome/11.1.1111.11 Safari/111.11'''
                - '[19/Dec/2019:10:58:24 +0000] ''GET /logo.png HTTP/1.1'' 404 555 ''http://111.111.11.1/'' ''Mozilla/5.0 (Macintosh; Intel Mac OS X 11_11_1) AppleWebKit/111.11 (KHTML, like Gecko) Chrome/11.1.1111.11 Safari/111.11'''
              items:
                type: string
            events:
              type: array
              description: Events attached to this span.
              items:
                $ref: '#/components/schemas/SpanEvent'
            links:
              type: array
              description: List of casually related spans.
              items:
                $ref: '#/components/schemas/SpanLink'
    TraceSpanCriticalPathContribution:
      required:
        - duration
        - fraction
      type: object
      properties:
        duration:
          type: integer
          description: Overall processing time in nanoseconds consumed by this span in the critical path of its trace (a sum of the duration times of this span's critical path segments).
          format: int64
          example: 12957153
        fraction:
          type: number
          description: The total fraction (value between 0.0 and 1.0) of the trace duration time consumed by this span in the critical path of its trace.
          format: double
          example: 0.4
    SpanEvent:
      description: Span event containing all information (in particular attributes).
      allOf:
        - $ref: '#/components/schemas/LightSpanEvent'
        - type: object
          properties:
            attributes:
              type: array
              description: Span event attributes.
              items:
                $ref: '#/components/schemas/SpanEventAttribute'
    SpanLink:
      required:
        - spanId
        - traceId
      type: object
      properties:
        traceId:
          type: string
          description: Trace identifier of the linked span.
          example: 00000000002317A9
        spanId:
          type: string
          description: Span identifier of the linked span.
          example: 000000000003C7BE
      description: Details of the linked span.
    SpanEventAttribute:
      type: object
      properties:
        attributeName:
          type: string
          description: Name of the attribute.
          example: message_details
        attributeValue:
          $ref: '#/components/schemas/EventAttributeValue'
    EventAttributeValue:
      required:
        - type
      properties:
        type:
          pattern: ^(BooleanEventAttributeValue|StringEventAttributeValue|DoubleEventAttributeValue|IntegerEventAttributeValue|BooleanArrayEventAttributeValue|StringArrayEventAttributeValue|DoubleArrayEventAttributeValue|IntegerArrayEventAttributeValue)$
          type: string
          description: Type of the event attribute value.
          example: BooleanAttributeValue
      discriminator:
        propertyName: type
    TraceSpanBillingInfo:
      required:
        - billedBytes
        - billedFormat
      type: object
      properties:
        billedBytes:
          type: integer
          description: Number of bytes that were charged for the span.
          example: 502
        billedFormat:
          type: string
          description: Billing format of the span. Number of bytes of this representation of the span is equal to `billedBytes`.
          example: traceId=2ff9c457b1aa00f4;spanId=97872e33215c4275;parentSpanId=98bcdfc5da874c40;operation=spanId-97872e33215c4275;startTimestamp=1603283111874000000;endTimestamp=1603283112268000000;service=ServiceA;status.code=ERROR;status.message=ERROR;kind=SERVER;custom-tag-2=value2;_sourcehost=127.0.0.1;http.url=/api/operation-x;message=Some error message;_sourcecategory=Http Input;custom-tag-1=value1;error=true;_sourcename=Http Input;error.kind=InvalidInput;_collector=trace-generator-collector;http.method=GET;
    SpanQueryRequest:
      required:
        - queryRows
        - timeRange
      type: object
      properties:
        queryRows:
          type: array
          description: A list of span analytics queries.
          items:
            $ref: '#/components/schemas/SpanQueryRow'
        timeRange:
          $ref: '#/components/schemas/ResolvableTimeRange'
        timeZone:
          type: string
          description: Time zone for the query time ranges. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
          example: America/Los_Angeles
          default: UTC
    SpanQueryResponse:
      required:
        - queryId
        - queryRows
      type: object
      properties:
        queryId:
          type: string
          description: Id of the created query
        queryRows:
          type: array
          description: A list of row responses with details about individual queries.
          items:
            $ref: '#/components/schemas/SpanQueryRowResponse'
        hasErrors:
          type: boolean
          description: Indicates whether there was an error while executing the query.
          example: true
          default: false
        timeRange:
          $ref: '#/components/schemas/BeginBoundedTimeRange'
    SpanQueryRow:
      required:
        - queryString
        - rowId
      type: object
      properties:
        queryString:
          type: string
          description: Query string using the log search syntax.
        rowId:
          pattern: ^[a-zA-Z0-9_]*$
          type: string
          description: An identifier used to reference this particular row of the query request. Within a query, row ids must have distinct values.
          example: A
    SpanQueryRowResponse:
      required:
        - isAggregation
        - rowId
      type: object
      properties:
        rowId:
          type: string
          description: A unique identifier of the query.
          example: A
        errors:
          type: array
          description: List of errors which occured when executing the query
          items:
            $ref: '#/components/schemas/SpanQueryRowError'
        isAggregation:
          type: boolean
          description: Indicates whether this query is an aggregation
          example: true
          default: false
        executedQuery:
          type: string
          description: The executed query after rewriting
          example: _index=_trace_spans traceId=00000000002317A9
    BeginBoundedTimeRange:
      allOf:
        - $ref: '#/components/schemas/ResolvableTimeRange'
        - required:
            - from
          type: object
          properties:
            from:
              $ref: '#/components/schemas/TimeRangeBoundary'
            to:
              $ref: '#/components/schemas/TimeRangeBoundary'
    SpanQueryRowError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: The error code.
          example: spanquery:query_validation_error
        message:
          type: string
          description: Short description of the occured error.
          example: Query A was invalid
        details:
          type: string
          description: Details about the occured error.
          example: '[1.78] failure: ''('' expected but '')'' found.'
    TimeRangeBoundary:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: 'Type of the time range boundary. Value must be from list: - `RelativeTimeRangeBoundary`, - `EpochTimeRangeBoundary`, - `Iso8601TimeRangeBoundary`, - `LiteralTimeRangeBoundary`.'
          example: RelativeTimeRangeBoundary
      discriminator:
        propertyName: type
    SpanQueryStatusResponse:
      required:
        - queryRows
        - status
      type: object
      properties:
        queryRows:
          type: array
          description: A list of span analytics queries.
          items:
            $ref: '#/components/schemas/SpanQueryRowStatus'
        status:
          pattern: ^(Processing|Finished|Error|Paused)$
          type: string
          description: 'Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Paused`'
          example: Processing
          x-pattern-message: Should be either `Processing`, `Finished`, `Error`, `Paused`.
    SpanQueryRowStatus:
      required:
        - count
        - rowId
        - status
      type: object
      properties:
        rowId:
          type: string
          description: A unique identifier of the query.
          example: A
        status:
          pattern: ^(Processing|Finished|Error|Paused)$
          type: string
          description: 'Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Paused`.'
          example: Processing
          x-pattern-message: Should be either `Processing`, `Finished`, `Error`, `Paused`.
        statusMessage:
          type: string
          description: Descriptive message of the status.
          example: Finished successfully
        count:
          minimum: 0
          type: integer
          description: Number of results matching the query
          format: int64
          example: 3215
        approximatedFieldCounts:
          type: boolean
          description: Indicates whether facet field cardinality counts are approximated or not.
          example: false
        facetsCompleted:
          type: boolean
          description: Indicates whether facets calculation has completed.
          example: false
    SpanQueryResultSpansResponse:
      required:
        - spanPage
      type: object
      properties:
        spanPage:
          type: array
          description: List of trace spans.
          items:
            $ref: '#/components/schemas/SpanQuerySpanData'
        next:
          type: string
          description: Next continuation token.
          example: Mi93V0ZqTTBzaW89
    SpanQuerySpanData:
      required:
        - duration
        - startedAt
      type: object
      properties:
        spanId:
          type: string
          description: Identifier of the span.
          example: 00000000002317A9
        traceId:
          type: string
          description: Identifier of the trace.
          example: 1BB004A0005213C2
        parentSpanId:
          type: string
          description: Identifier of the parent span, if any. If the span has no parent it's considered a root span.
          example: 000000000003C7BE
        operationName:
          type: string
          description: The name of the operation given to the span.
          example: retrieveAccount
        service:
          type: string
          description: The name of the service this span is part of.
          example: user-service
        remoteService:
          type: string
          description: Name of the possible remote span's service.
          example: external-service
        duration:
          type: integer
          description: Number of nanoseconds the span lasted.
          format: int64
          example: 212957153
        startedAt:
          type: string
          description: Date and time the span was started in [ISO 8601 / RFC3339](https://tools.ietf.org/html/rfc3339) format.
          format: date-time
          example: '2019-11-22T09:00:00Z'
        status:
          $ref: '#/components/schemas/TraceSpanStatus'
        kind:
          pattern: ^(CLIENT|SERVER|PRODUCER|CONSUMER|INTERNAL)$
          type: string
          description: 'Span kind describes the relationship between the Span, its parents, and its children in a Trace. Possible values: `CLIENT`, `SERVER`, `PRODUCER`, `CONSUMER`, `INTERNAL`.'
          example: SERVER
          x-pattern-message: Should be either `CLIENT`, `SERVER`, `PRODUCER`, `CONSUMER` or `INTERNAL`.
        tagsJSON:
          type: string
          description: Tags attached to this span as JSON.
          example: |-
            {
              &quot;http.host&quot;:&quot;http://example.com&quot;,
              &quot;http.method&quot;:&quot;GET&quot;
            }
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Metadata attached to the span.
          example:
            _sourceCategory: account-backend
    SpanQueryResultFacetsResponse:
      required:
        - facets
      type: object
      properties:
        facets:
          type: array
          description: List of facets.
          items:
            $ref: '#/components/schemas/SpanQueryRowFacet'
    SpanQueryRowFacet:
      required:
        - cardinality
        - dataType
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of the field facet.
          example: _sourceHost
        cardinality:
          type: integer
          description: The number of unique values this field occured.
          format: int32
          example: 3
        dataType:
          pattern: ^(String|Int|Long|Double|Boolean)$
          type: string
          description: Data type of the field.
          example: String
          x-pattern-message: Should be either `String`, `Int`, `Long`, `Double` or `Boolean`.
        inSchema:
          type: boolean
          description: Indicates whether the field is available in the span schema.
          example: false
        valueFrequency:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Map of field value frequencies.
          example:
            _sourceHost: 34099
    SpanQueryAggregateResponse:
      required:
        - result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/SpanQueryAggregateResult'
    SpanQueryAggregateResult:
      required:
        - series
        - status
      type: object
      properties:
        status:
          pattern: ^(Processing|Finished|Error|Paused)$
          type: string
          description: 'Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Paused`.'
          example: Processing
          x-pattern-message: Should be either `Processing`, `Finished`, `Error`, `Paused`.
        statusMessage:
          type: string
          description: Descriptive message of the status
          example: Finished successfully
        series:
          type: array
          description: The series returned from a search.
          items:
            $ref: '#/components/schemas/SpanQueryAggregateDataSeries'
    SpanQueryAggregateDataSeries:
      required:
        - dataPoints
        - name
        - queryId
      type: object
      properties:
        queryId:
          type: string
          description: The id of the query.
          example: A
        name:
          type: string
          description: |
            The meaning of 'name' depends on the series type.
              - For results of type 'timeseries', it is the value of the x axis 'field' key.
              - For results of type 'nontimeseries', it is the name of one of the fields that is not part of 'xAxisKeys'.
              - For results of type 'table', it is the comma-separated string of names of all fields.
          example: max(Disk_Used)
        dataPoints:
          type: array
          description: A list of data points in the series.
          items:
            $ref: '#/components/schemas/SpanQueryAggregatePointData'
        aggregateInfo:
          $ref: '#/components/schemas/SpanQueryAggregateAggregateData'
        metaData:
          $ref: '#/components/schemas/SpanQueryAggregateMetaData'
        seriesType:
          pattern: ^(TIMESERIES|NONTIMESERIES|TABLE)$
          type: string
          description: Type of the visual series.
          example: TIMESERIES
          x-pattern-message: Should be either `TIMESERIES`, `NONTIMESERIES`, `TABLE`.
        xAxisKeys:
          type: array
          description: Keys that will be plotted as a point on the x axis.
          example:
            - _sourceCategory
            - _sourceHost
          items:
            type: string
        valueType:
          pattern: ^(STRING|DOUBLE)$
          type: string
          description: Type of the values in the series.
          example: DOUBLE
          x-pattern-message: Should be either `STRING`, `DOUBLE`.
    SpanQueryAggregatePointData:
      required:
        - 'y'
      type: object
      properties:
        x:
          type: number
          description: Value that represents a point on the x axis.
          format: double
          example: 1
        'y':
          type: string
          description: Value that represents a point on the y axis.
          example: '12.3'
        xAxisValues:
          type: object
          additionalProperties:
            type: string
          description: Values that represents a point on the x axis.
          example:
            operation: /get/accounts
            service: accountService
          default: {}
    SpanQueryAggregateAggregateData:
      required:
        - avg
        - latest
        - max
        - min
        - sum
      type: object
      properties:
        max:
          type: number
          description: The maximum value in the series.
          format: double
          example: 10
        min:
          type: number
          description: The minimum value in the series.
          format: double
          example: 1.2
        avg:
          type: number
          description: The average value in the series.
          format: double
          example: 5.6
        sum:
          type: number
          description: The sum of all the values in the series.
          format: double
          example: 123.4
        latest:
          type: number
          description: The last value in the series.
          format: double
          example: 23.4
        count:
          type: number
          description: The number of values in the series.
          format: double
          example: 600
    SpanQueryAggregateMetaData:
      required:
        - data
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            type: string
          description: The value of the metadata.
          example:
            deployment: dev
            cluster: frontend
            instance: frontend-12
          default: {}
    SpanQueryFieldsResponse:
      required:
        - fields
      type: object
      properties:
        fields:
          type: array
          description: List of span fields.
          items:
            $ref: '#/components/schemas/SpanQueryFieldDetail'
    SpanQueryFieldDetail:
      allOf:
        - $ref: '#/components/schemas/TraceFieldDetail'
        - required:
            - inSchema
          type: object
          properties:
            inSchema:
              type: boolean
              description: Indicates whether the field is available in the schema.
              example: false
    ServiceMapResponse:
      required:
        - edges
        - nodes
      type: object
      properties:
        nodes:
          type: array
          description: List of service map nodes.
          items:
            $ref: '#/components/schemas/ServiceMapNode'
        edges:
          type: array
          description: List of service map edges.
          items:
            $ref: '#/components/schemas/ServiceMapEdge'
    ServiceMapNode:
      required:
        - isRemote
        - lastSeenAt
        - serviceName
        - serviceType
      type: object
      properties:
        serviceName:
          type: string
          description: Name of a service in a service map.
          example: service_name_1
        serviceColor:
          type: string
          description: Color hex code assigned to the service.
          example: '#fa41c6'
        lastSeenAt:
          type: string
          description: The last time in UTC a service has been seen. Formatted as defined by date-time - RFC3339.
          format: date-time
          example: '2019-11-22T09:00:00Z'
        isRemote:
          type: boolean
          description: Indicates whether node comes from inferred remote service or instrumented one.
          example: true
        serviceType:
          $ref: '#/components/schemas/ServiceType'
    ServiceMapEdge:
      required:
        - lastSeenAt
        - source
        - target
      type: object
      properties:
        source:
          type: string
          description: Name of a source service. Edge is directed from source to target.
          example: service_name_1
        target:
          type: string
          description: Name of a target service. Edge is directed from source to target.
          example: service_name_2
        lastSeenAt:
          type: string
          description: The last time in UTC an edge has been seen. Formatted as defined by date-time - RFC3339.
          format: date-time
          example: '2019-11-22T09:00:00Z'
  parameters: {}
  responses: {}
  securitySchemes: {}
  callbacks: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  x-stackQL-resources:
    tracequery:
      id: sumologic.tracing.tracequery
      name: tracequery
      title: Tracequery
      methods:
        createTraceQuery:
          operation:
            $ref: '#/paths/~1v1~1tracing~1tracequery/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancelTraceQuery:
          operation:
            $ref: '#/paths/~1v1~1tracing~1tracequery~1{queryId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/tracequery/methods/createTraceQuery'
        update: []
        delete: []
    tracequery_status:
      id: sumologic.tracing.tracequery_status
      name: tracequery_status
      title: Tracequery_status
      methods:
        getTraceQueryStatus:
          operation:
            $ref: '#/paths/~1v1~1tracing~1tracequery~1{queryId}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tracequery_status/methods/getTraceQueryStatus'
        insert: []
        update: []
        delete: []
    tracequery_rows_traces:
      id: sumologic.tracing.tracequery_rows_traces
      name: tracequery_rows_traces
      title: Tracequery_rows_traces
      methods:
        getTraceQueryResult:
          operation:
            $ref: '#/paths/~1v1~1tracing~1tracequery~1{queryId}~1rows~1{rowId}~1traces/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tracequery_rows_traces/methods/getTraceQueryResult'
        insert: []
        update: []
        delete: []
    metrics:
      id: sumologic.tracing.metrics
      name: metrics
      title: Metrics
      methods:
        getMetrics:
          operation:
            $ref: '#/paths/~1v1~1tracing~1metrics/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/metrics/methods/getMetrics'
        insert: []
        update: []
        delete: []
    tracequery_fields:
      id: sumologic.tracing.tracequery_fields
      name: tracequery_fields
      title: Tracequery_fields
      methods:
        getTraceQueryFields:
          operation:
            $ref: '#/paths/~1v1~1tracing~1tracequery~1fields/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tracequery_fields/methods/getTraceQueryFields'
        insert: []
        update: []
        delete: []
    tracequery_fields_values:
      id: sumologic.tracing.tracequery_fields_values
      name: tracequery_fields_values
      title: Tracequery_fields_values
      methods:
        getTraceQueryFieldValues:
          operation:
            $ref: '#/paths/~1v1~1tracing~1tracequery~1fields~1{field}~1values/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tracequery_fields_values/methods/getTraceQueryFieldValues'
        insert: []
        update: []
        delete: []
    traces:
      id: sumologic.tracing.traces
      name: traces
      title: Traces
      methods:
        getTrace:
          operation:
            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/traces/methods/getTrace'
        insert: []
        update: []
        delete: []
    traces_exists:
      id: sumologic.tracing.traces_exists
      name: traces_exists
      title: Traces_exists
      methods:
        traceExists:
          operation:
            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1exists/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    traces_spans:
      id: sumologic.tracing.traces_spans
      name: traces_spans
      title: Traces_spans
      methods:
        getSpans:
          operation:
            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1spans/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getSpan:
          operation:
            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1spans~1{spanId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/traces_spans/methods/getSpan'
          - $ref: '#/components/x-stackQL-resources/traces_spans/methods/getSpans'
        insert: []
        update: []
        delete: []
    traces_trace_events:
      id: sumologic.tracing.traces_trace_events
      name: traces_trace_events
      title: Traces_trace_events
      methods:
        getTraceLightEvents:
          operation:
            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1traceEvents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/traces_trace_events/methods/getTraceLightEvents'
        insert: []
        update: []
        delete: []
    traces_critical_path:
      id: sumologic.tracing.traces_critical_path
      name: traces_critical_path
      title: Traces_critical_path
      methods:
        getCriticalPath:
          operation:
            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1criticalPath/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/traces_critical_path/methods/getCriticalPath'
        insert: []
        update: []
        delete: []
    traces_critical_path_breakdown_service:
      id: sumologic.tracing.traces_critical_path_breakdown_service
      name: traces_critical_path_breakdown_service
      title: Traces_critical_path_breakdown_service
      methods:
        getCriticalPathServiceBreakdown:
          operation:
            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1criticalPath~1breakdown~1service/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/traces_critical_path_breakdown_service/methods/getCriticalPathServiceBreakdown'
        insert: []
        update: []
        delete: []
    traces_spans_billing_info:
      id: sumologic.tracing.traces_spans_billing_info
      name: traces_spans_billing_info
      title: Traces_spans_billing_info
      methods:
        getSpanBillingInfo:
          operation:
            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1spans~1{spanId}~1billingInfo/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/traces_spans_billing_info/methods/getSpanBillingInfo'
        insert: []
        update: []
        delete: []
    spanquery:
      id: sumologic.tracing.spanquery
      name: spanquery
      title: Spanquery
      methods:
        createSpanQuery:
          operation:
            $ref: '#/paths/~1v1~1tracing~1spanquery/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancelSpanQuery:
          operation:
            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/spanquery/methods/createSpanQuery'
        update: []
        delete: []
    spanquery_status:
      id: sumologic.tracing.spanquery_status
      name: spanquery_status
      title: Spanquery_status
      methods:
        getSpanQueryStatus:
          operation:
            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/spanquery_status/methods/getSpanQueryStatus'
        insert: []
        update: []
        delete: []
    spanquery_pause:
      id: sumologic.tracing.spanquery_pause
      name: spanquery_pause
      title: Spanquery_pause
      methods:
        pauseSpanQuery:
          operation:
            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1pause/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    spanquery_resume:
      id: sumologic.tracing.spanquery_resume
      name: spanquery_resume
      title: Spanquery_resume
      methods:
        resumeSpanQuery:
          operation:
            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1resume/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    spanquery_rows_spans:
      id: sumologic.tracing.spanquery_rows_spans
      name: spanquery_rows_spans
      title: Spanquery_rows_spans
      methods:
        getSpanQueryResult:
          operation:
            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1rows~1{rowId}~1spans/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/spanquery_rows_spans/methods/getSpanQueryResult'
        insert: []
        update: []
        delete: []
    spanquery_rows_facets:
      id: sumologic.tracing.spanquery_rows_facets
      name: spanquery_rows_facets
      title: Spanquery_rows_facets
      methods:
        getSpanQueryFacets:
          operation:
            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1rows~1{rowId}~1facets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/spanquery_rows_facets/methods/getSpanQueryFacets'
        insert: []
        update: []
        delete: []
    spanquery_aggregates:
      id: sumologic.tracing.spanquery_aggregates
      name: spanquery_aggregates
      title: Spanquery_aggregates
      methods:
        getSpanQueryAggregates:
          operation:
            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1aggregates/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/spanquery_aggregates/methods/getSpanQueryAggregates'
        insert: []
        update: []
        delete: []
    spanquery_fields:
      id: sumologic.tracing.spanquery_fields
      name: spanquery_fields
      title: Spanquery_fields
      methods:
        getSpanQueryFields:
          operation:
            $ref: '#/paths/~1v1~1tracing~1spanquery~1fields/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/spanquery_fields/methods/getSpanQueryFields'
        insert: []
        update: []
        delete: []
    spanquery_fields_values:
      id: sumologic.tracing.spanquery_fields_values
      name: spanquery_fields_values
      title: Spanquery_fields_values
      methods:
        getSpanQueryFieldValues:
          operation:
            $ref: '#/paths/~1v1~1tracing~1spanquery~1fields~1{field}~1values/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/spanquery_fields_values/methods/getSpanQueryFieldValues'
        insert: []
        update: []
        delete: []
    service_map:
      id: sumologic.tracing.service_map
      name: service_map
      title: Service_map
      methods:
        getServiceMap:
          operation:
            $ref: '#/paths/~1v1~1tracing~1serviceMap/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/service_map/methods/getServiceMap'
        insert: []
        update: []
        delete: []
openapi: 3.0.0
servers:
  - url: https://api.{region}.sumologic.com/api
    variables:
      region:
        description: SumoLogic region
        enum:
          - us2
          - au
          - ca
          - de
          - eu
          - fed
          - in
          - jp
        default: us2
    description: The SumoLogic regional endpoint
security:
  - basicAuth: []
tags:
  - name: accountManagement
    description: |
      Account Management API.

      Manage the custom subdomain for the URL used to access your Sumo Logic account. For more information see [Manage Organization](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization).
    x-displayName: Account
  - name: appManagement
    description: |
      App installation API.

      View and install Sumo Logic Applications that deliver out-of-the-box dashboards, saved searches, and field extraction for popular data sources. For more information see [Sumo Logic Apps](https://help.sumologic.com/07Sumo-Logic-Apps).
    x-displayName: Apps (Beta)
  - name: connectionManagement
    description: |
      Connection management API.

      Set up connections to send alerts to other tools. For more information see [Connections and Integrations](https://help.sumologic.com/?cid=1044).
    x-displayName: Connections
  - name: contentManagement
    description: |
      Content management API.

      You can export, import, delete and copy content in your organization’s Library. For more information see [Library](https://help.sumologic.com/?cid=5173). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
      <br/> <br/>
      ### Example
      The following example uses API endpoints in the US1 deployment. Sumo Logic has several deployments that are assigned depending on the geographic location and the date an account is created. For details determining your account's deployment see [API endpoints](https://help.sumologic.com/?cid=3011).
      The [Content Import API](#operation/beginAsyncImport) can be used to create or update a Search, Scheduled Search, or Dashboard. Here is an example creating a Scheduled Search:
      1. Get the identifier of your `Personal` folder.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/personal
        ```

        Find the identifier of your `Personal` folder in the response.
        ```json
        {
            ...
            "id": "0000000006A2E86F", <----
            "name": "Personal",
            "itemType": "Folder",
            ...
        }
        ```

        You can use [getFolder](#operation/getFolder), [getAdminRecommededFolder](#operation/getAdminRecommendedFolderAsync),
        or [getGlobalFolder](#operation/getGlobalFolderAsync) endpoints to traverse the content tree and find the identifier of any
        folder you want to manage.

      2. Use the [Content Import API](#operation/beginAsyncImport) to create a new Scheduled Search inside your
        `Personal` folder.
        ```bash
        curl -X POST -u "<accessId>:<accessKey>" -H "Content-Type: application/json" -d @search.json https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import
        ```

        The data file `search.json` in the above command has the following `SavedSearchWithScheduleSyncDefinition` object.
        ```json
        // file: search.json
        {
            "type": "SavedSearchWithScheduleSyncDefinition",
            "name": "demo-scheduled-search",
            "description": "Runs every hour with timerange of 15m and sends email notifications",
            "search": {
                "queryText": "\"error\" and \"warn\"",
                "defaultTimeRange": "-15m",
                "byReceiptTime": false,
                "viewName": "",
                "viewStartTime": null,
                "queryParameters": []
            },
            "searchSchedule": {
                "cronExpression": "0 0/15 * * * ? *",
                "displayableTimeRange": "-15m",
                "parseableTimeRange": {
                    "from": {
                        "relativeTime": "-15m",
                        "type": "RelativeTimeRangeBoundary"
                    },
                    "to": null,
                    "type": "BeginBoundedTimeRange"
                },
                "timeZone": "America/Los_Angeles",
                "threshold": null,
                "notification": {
                    "taskType": "EmailSearchNotificationSyncDefinition",
                    "toList": [
                        "ops@acme.org"
                    ],
                    "subjectTemplate": "Search Results: {{SearchName}}",
                    "includeQuery": true,
                    "includeResultSet": true,
                    "includeHistogram": true,
                    "includeCsvAttachment": false
                },
                "muteErrorEmails": false,
                "scheduleType": "1Hour",
                "parameters": []
            }
        }
        ```

        The response of above request will have the job identifier that you can use to track the status of the import job.
        ```json
        {
            "id": "74DC17FA765C7443"
        }
        ```

      3. Use the job identifier from the import request to get the [status](#operation/getAsyncImportStatus) of the
        import job.
        ```bash
        curl -X GET -u "<accessId>:<accessKey>" https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import/74DC17FA765C7443/status
        ```

        If you are importing a large item, you might have to wait for the import job to finish. The following is an
        example response from a completed job.
        ```json
        {
            "status": "Success",
            "statusMessage": null,
            "error": null
        }
        ```
    x-displayName: Content
  - name: contentPermissions
    description: |
      Content permissions API.

      You can share your folders, searches, and dashboards with specific users or roles. For more information see [Share Content](https://help.sumologic.com/?cid=8675309). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Permissions
  - name: dashboardManagement
    description: |
      Dashboard (New) management API.

      Dashboard (New) allows you to analyze metric and log data on the same dashboard, in a seamless view. This gives you control over the visual display of metric and log data. Dashboard (New) streamlines dashboard configurations and on-the-fly analytic visualizations with its new templating features. For more information see [Dashboard (New)](https://help.sumologic.com/?cid=5500).
    x-displayName: Dashboard (New)
  - name: dynamicParsingRuleManagement
    description: |
      Dynamic Parsing management API.

      Dynamic Parsing allows automatic field extraction from your log messages when you run a search.  This allows you to view fields from logs without having to manually specify parsing logic. For more information  see [Dynamic Parsing](https://help.sumologic.com/?cid=20011).
    x-displayName: Dynamic Parsing
  - name: extractionRuleManagement
    description: |
      Field Extraction Rule management API.

      Field Extraction Rules allow you to parse fields from your log messages at the time the messages are ingested eliminating the need to parse fields in your query. For more information see [Manage Field Extraction](https://help.sumologic.com/?cid=5313).
    x-displayName: Field Extraction Rules
  - name: fieldManagementV1
    description: |
      Field management API.

      Fields allow you to reference log data based on meaningful associations. They act as metadata tags that are assigned to your logs so you can search with them. Each field contains a key-value pair, where the field name is the key. Fields may be referred to as Log Metadata Fields. For more information see [Fields](https://help.sumologic.com/?cid=10116).
    x-displayName: Field Management
  - name: folderManagement
    description: |
      Folder management API.

      You can add folders and subfolders to the Library in order to organize your content for easy access or to share content. For more information see [Add Folders to the Library](https://help.sumologic.com/?cid=5020). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).
    x-displayName: Folders
  - name: ingestBudgetManagementV1
    description: |
      Ingest Budget management API.

      Ingest Budgets allow you to control the capacity of daily ingestion volume sent to Sumo Logic from Collectors. For more information see [Ingest Budgets](https://help.sumologic.com/?cid=5235).
    x-displayName: Ingest Budgets
  - name: ingestBudgetManagementV2
    description: |
      Ingest Budget management API V2.

      Ingest Budgets V2 provide you the ability to create and assign budgets to your log data by Fields instead of using a Field Value. For more information see [Metadata Ingest Budgets](https://help.sumologic.com/?cid=52352).
    x-displayName: Ingest Budgets V2
  - name: partitionManagement
    description: |
      Partition management API.

      Creating a Partition allows you to improve search performance by searching over a smaller number of messages. For more information see [Manage Partitions](https://help.sumologic.com/?cid=5231).
    x-displayName: Partitions
  - name: logsDataForwardingManagement
    description: |
      Logs Data Forwarding management API.

      Logs Data Forwarding allows you to forward log data from a Partition or Scheduled View to an S3 bucket. For more information see [Forwarding Data to S3](https://help.sumologic.com/Manage/Data-Forwarding/Configure-Data-Forwarding-from-Sumo-Logic-to-S3).
    x-displayName: Logs Data Forwarding
  - name: roleManagement
    description: |
      Role management API.

      Roles determine the functions that users are able to perform in Sumo Logic. To manage roles, you must have an administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Roles](https://help.sumologic.com/?cid=5234).
    x-displayName: Roles
  - name: lookupManagement
    description: |
      Lookup Table management API.

      A Lookup Table is a table of data hosted on Sumo Logic that you can use to enrich the log and event data received by Sumo Logic. You must create a table schema before you can populate the table. For more information see [Lookup Tables](https://help.sumologic.com/?cid=10109).
    x-displayName: Lookup Tables
  - name: scheduledViewManagement
    description: |
      Scheduled View management API.

      Scheduled Views speed the search process for small and historical subsets of your data by functioning as a pre-aggregated index. For more information see [Manage Scheduled Views](https://help.sumologic.com/?cid=5128).
    x-displayName: Scheduled Views
  - name: tokensLibraryManagement
    description: |
      Tokens management API.

      Tokens are associated with your organization to authorize specific operations. Currently, we support collector registration tokens, which can be used to register Installed Collectors. Managing tokens requires the Manage Tokens role capability. For more information see [Installation Tokens](https://help.sumologic.com/?cid=0100).
    x-displayName: Tokens
  - name: transformationRuleManagement
    description: |
      Transformation Rule management API.
      Metrics Transformation Rules allow you control how long raw metrics are retained. You can also aggregate metrics at collection time and specify a separate retention period for the aggregated metrics. For more information see [Metrics Transformation Rules](https://help.sumologic.com/?cid=10117).
    x-displayName: Transformation Rules (Beta)
  - name: userManagement
    description: |
      User management API.

      To manage users, you must have the administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Users](https://help.sumologic.com/?cid=1006).
    x-displayName: Users
  - name: metricsSearchesManagement
    description: |
      Metrics Search management API.

      Save metrics searches in the content library and organize them in a folder hierarchy. Share useful queries with users in your organization. For more information see [Sharing Metric Charts](https://help.sumologic.com/Metrics/03-Metric-Charts/Share_a_Metric_Chart).
    x-displayName: Metrics Searches (Beta)
  - name: metricsQuery
    description: |
      Metrics Query API.

      The Metrics Query API allows you to execute queries on various metrics and retrieve multiple time-series (data-points) over time range(s). For more information see [Metrics - Classic](https://help.sumologic.com/?cid=1079).
    x-displayName: Metrics Query
  - name: accessKeyManagement
    description: |
      Access Key management API.

      Access Keys allow you to securely register new Collectors and access Sumo Logic APIs. For more information see [Access Keys](https://help.sumologic.com/?cid=6690).
    x-displayName: Access Keys
  - name: samlConfigurationManagement
    description: |
      SAML configuration management API

      Organizations with Enterprise accounts can provision Security Assertion Markup Language (SAML) 2.0 to enable Single Sign-On (SSO) for user access to Sumo Logic. For more information see [SAML Configuration](https://help.sumologic.com/?cid=4016).
    x-displayName: SAML Configuration
  - name: serviceAllowlistManagement
    description: |
      Service Allowlist management API

      Service Allowlist Settings allow you to explicitly grant access to specific IP addresses and/or CIDR notations for logins, APIs, and dashboard access. For more information see [Service Allowlist Settings](https://help.sumologic.com/?cid=5454).
    x-displayName: Service Allowlist
  - name: healthEvents
    description: |
      Health Events management API.

      Health Events allow you to keep track of the health of your Collectors and Sources. You can use them to find and investigate common errors and warnings that are known to cause collection issues. For more information see [Health Events](https://help.sumologic.com/?cid=0020).
    x-displayName: Health Events
  - name: archiveManagement
    description: |-
      Archive Ingestion Management API.

      Archive Ingestion allows you to ingest data from Archive destinations. You can use this API to ingest data from your Archive with an existing AWS S3 Archive Source. You need the Manage or View Collectors role capability to manage or view ingestion jobs. For more information see [Archive](https://help.sumologic.com/?cid=10011).
    x-displayName: Archive Ingestion Management
  - name: logSearchesEstimatedUsage
    description: |
      Log Search Estimated Usage API.

      Gets the estimated volume of data that would be scanned for a given log search in the Infrequent data tier, over a particular time range. In the Infrequent Data Tier, you pay per query, based on the amount data scanned. You can use this endpoint to get an estimate of the total data that would be scanned before running a query, and refine your query to scan less data, as necessary. For more information see [Infrequent data tier](https://help.sumologic.com/?cid=11987).
    x-displayName: Log Search Estimated Usage
  - name: passwordPolicy
    description: |
      Password Policy Management API

      The password policy controls how user passwords are managed. The "Manage Password Policy" role capability is required to update the password policy. For more information see [how to set a password policy](https://help.sumologic.com/?cid=8595).
    x-displayName: Password Policy
  - name: policiesManagement
    description: |
      Policies management API.

      Policies control the security and share settings of your organization. For more information see [Security](https://help.sumologic.com/?cid=4041).
    x-displayName: Policies
  - name: traces
    description: |
      Traces API

      The Traces API allows you to browse traces collected in the system. You can execute queries to find traces matching provided search criteria as well as gather detailed information about individual traces and spans. For more information see [View and investigate traces](https://help.sumologic.com/Traces/View_and_investigate_traces).
    x-displayName: Traces
  - name: spanAnalytics
    description: |
      Span Analytics API

      The Span Analytics API allows you to browse spans collected in the system. You can execute queries to find individual spans matching provided search criteria as well as run aggregated span queries and retrieve their results. For more information see [Spans](https://help.sumologic.com/Traces/Spans).
    x-displayName: Span Analytics
  - name: serviceMap
    description: |
      Service Map API

      The Service Map API allows you to fetch a graph representation of the Service Map, which is a high-level view of your application environment, automatically derived from tracing data. For more information see [Service Map](https://help.sumologic.com/Traces/Service_Map_and_Dashboards#service-map).
    x-displayName: Service Map
  - name: slosLibraryManagement
    description: |
      SLO Management API.

      SLOs are used to monitor and alert on KPIs for your most important services or user experience.
    x-displayName: SLOs
  - name: monitorsLibraryManagement
    description: |
      Monitor Management API.


      Monitors continuously query your data to monitor and send notifications when specific events occur.
      For more information see [Monitors](https://help.sumologic.com/?cid=10020).
    x-displayName: Monitors
info:
  title: Sumo Logic API - tracing
  description: tracing
  version: 1.0.0
  x-logo:
    url: ./sumologic_logo.png
