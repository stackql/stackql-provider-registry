openapi: 3.0.0
servers:
  - url: https://management.azure.com/
info:
  title: Azure Arc VMware Management Service API
  description: Self service experience for VMware.
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  version: 2024-10-11-stackql-generated
security:
  - azure_auth:
      - user_impersonation
components:
  securitySchemes:
    azure_auth:
      description: Azure Active Directory OAuth2 Flow.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
          scopes:
            user_impersonation: impersonate your user account
  parameters:
    SubscriptionIdParameter:
      name: subscriptionId
      in: path
      description: The ID of the target subscription.
      required: true
      schema:
        minLength: 1
        type: string
    ApiVersionParameter:
      name: api-version
      in: query
      description: The API version to use for this operation.
      required: false
      schema:
        minLength: 1
        type: string
    ResourceGroupNameParameter:
      name: resourceGroupName
      in: path
      description: The name of the resource group. The name is case insensitive.
      required: true
      x-ms-parameter-location: method
      schema:
        minLength: 1
        maxLength: 90
        type: string
    OperationIdParameter:
      name: operationId
      in: path
      description: The ID of an ongoing async operation.
      required: true
      x-ms-parameter-location: method
      schema:
        minLength: 1
        type: string
    LocationParameter:
      name: location
      in: path
      description: The name of Azure region.
      required: true
      x-ms-parameter-location: method
      schema:
        minLength: 1
        type: string
    ManagementGroupNameParameter:
      name: managementGroupName
      in: path
      description: The name of the management group. The name is case insensitive.
      required: true
      x-ms-parameter-location: method
      schema:
        minLength: 1
        maxLength: 90
        type: string
    ScopeParameter:
      name: scope
      in: path
      description: The scope at which the operation is performed.
      required: true
      x-ms-skip-url-encoding: true
      x-ms-parameter-location: method
      schema:
        minLength: 1
        type: string
    TenantIdParameter:
      name: tenantId
      in: path
      description: The Azure tenant ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
      required: true
      x-ms-parameter-location: method
      schema:
        format: uuid
        type: string
    If-Match:
      name: ifMatch
      in: header
      description: The If-Match header that makes a request conditional.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    If-None-Match:
      name: ifNoneMatch
      in: header
      description: The If-None-Match header that makes a request conditional.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    subscriptionId:
      name: subscriptionId
      in: path
      description: The Subscription ID.
      required: true
      schema:
        type: string
    api-version:
      name: api-version
      in: query
      description: Client Api Version.
      required: false
      schema:
        type: string
    resourceGroupName:
      name: resourceGroupName
      in: path
      description: The Resource Group Name.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    resourceUriParameter:
      name: resourceUri
      in: path
      description: The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource to be extended.
      required: true
      x-ms-skip-url-encoding: true
      x-ms-parameter-location: method
      schema:
        type: string
  schemas:
    Resource:
      title: Resource
      description: Common fields that are returned in the response for all Azure Resource Manager resources
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        name:
          readOnly: true
          type: string
          description: The name of the resource
        type:
          readOnly: true
          type: string
          description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
      x-ms-azure-resource: true
    AzureEntityResource:
      x-ms-client-name: AzureEntityResource
      title: Entity Resource
      description: The resource model definition for an Azure Resource Manager resource with an etag.
      properties:
        etag:
          type: string
          readOnly: true
          description: Resource Etag.
        id:
          readOnly: true
          type: string
          description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        name:
          readOnly: true
          type: string
          description: The name of the resource
        type:
          readOnly: true
          type: string
          description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
      type: object
    TrackedResource:
      title: Tracked Resource
      description: The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
      required:
        - location
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: Resource tags.
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        id:
          readOnly: true
          type: string
          description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        name:
          readOnly: true
          type: string
          description: The name of the resource
        type:
          readOnly: true
          type: string
          description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
      type: object
    ProxyResource:
      title: Proxy Resource
      description: The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location
      properties:
        id:
          readOnly: true
          type: string
          description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        name:
          readOnly: true
          type: string
          description: The name of the resource
        type:
          readOnly: true
          type: string
          description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
      type: object
    ResourceModelWithAllowedPropertySet:
      description: The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set.
      type: object
      properties:
        id:
          readOnly: true
          type: string
          x-ms-mutability:
            - read
          description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        name:
          readOnly: true
          type: string
          description: The name of the resource
        type:
          readOnly: true
          type: string
          x-ms-mutability:
            - read
          description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        managedBy:
          type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.
        kind:
          type: string
          x-ms-mutability:
            - read
            - create
          description: Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
          pattern: ^[-\w\._,\(\)]+$
        etag:
          readOnly: true
          type: string
          description: 'The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. '
        tags:
          type: object
          additionalProperties:
            type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: Resource tags.
        identity:
          allOf:
            - $ref: '#/components/schemas/Identity'
        sku:
          allOf:
            - $ref: '#/components/schemas/Sku'
        plan:
          allOf:
            - $ref: '#/components/schemas/Plan'
      x-ms-azure-resource: true
    SkuTier:
      type: string
      enum:
        - Free
        - Basic
        - Standard
        - Premium
      x-ms-enum:
        name: SkuTier
        modelAsString: false
      description: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
    Sku:
      description: The resource model definition representing SKU
      type: object
      properties:
        name:
          type: string
          description: The name of the SKU. Ex - P3. It is typically a letter+number code
        tier:
          type: string
          enum:
            - Free
            - Basic
            - Standard
            - Premium
          x-ms-enum:
            name: SkuTier
            modelAsString: false
          description: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        size:
          type: string
          description: 'The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. '
        family:
          type: string
          description: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        capacity:
          type: integer
          format: int32
          description: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
      required:
        - name
    Identity:
      description: Identity for the resource.
      type: object
      properties:
        principalId:
          readOnly: true
          type: string
          description: The principal ID of resource identity.
        tenantId:
          readOnly: true
          type: string
          description: The tenant ID of resource.
        type:
          type: string
          description: The identity type.
          enum:
            - SystemAssigned
          x-ms-enum:
            name: ResourceIdentityType
            modelAsString: false
    Plan:
      type: object
      properties:
        name:
          type: string
          description: A user defined name of the 3rd Party Artifact that is being procured.
        publisher:
          type: string
          description: The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        product:
          type: string
          description: 'The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. '
        promotionCode:
          type: string
          description: A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        version:
          type: string
          description: The version of the desired product/artifact.
      description: Plan for the resource.
      required:
        - name
        - publisher
        - product
    ErrorDetail:
      description: The error detail.
      type: object
      properties:
        code:
          readOnly: true
          type: string
          description: The error code.
        message:
          readOnly: true
          type: string
          description: The error message.
        target:
          readOnly: true
          type: string
          description: The error target.
        details:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
          x-ms-identifiers:
            - message
            - target
          description: The error details.
        additionalInfo:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ErrorAdditionalInfo'
          x-ms-identifiers: []
          description: The error additional info.
    ErrorResponse:
      title: Error response
      description: Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
      type: object
      properties:
        error:
          description: The error object.
          $ref: '#/components/schemas/ErrorDetail'
    ErrorAdditionalInfo:
      type: object
      properties:
        type:
          readOnly: true
          type: string
          description: The additional info type.
        info:
          readOnly: true
          type: object
          description: The additional info.
      description: The resource management error additional info.
    Operation:
      title: REST API Operation
      description: Details of a REST API operation, returned from the Resource Provider Operations API
      type: object
      properties:
        name:
          description: 'The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"'
          type: string
          readOnly: true
        isDataAction:
          description: Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
          type: boolean
          readOnly: true
        display:
          description: Localized display information for this particular operation.
          type: object
          properties:
            provider:
              description: The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
              type: string
              readOnly: true
            resource:
              description: The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
              type: string
              readOnly: true
            operation:
              description: The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
              type: string
              readOnly: true
            description:
              description: The short, localized friendly description of the operation; suitable for tool tips and detailed views.
              type: string
              readOnly: true
        origin:
          description: The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
          type: string
          readOnly: true
          enum:
            - user
            - system
            - user,system
          x-ms-enum:
            name: Origin
            modelAsString: true
        actionType:
          description: Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
          type: string
          readOnly: true
          enum:
            - Internal
          x-ms-enum:
            name: ActionType
            modelAsString: true
    OperationListResult:
      description: A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
          x-ms-identifiers:
            - name
          description: List of operations supported by the resource provider
          readOnly: true
        nextLink:
          type: string
          description: URL to get the next set of operation list results (if there are any).
          readOnly: true
    OperationStatusResult:
      description: The current status of an async operation.
      type: object
      required:
        - status
      properties:
        id:
          description: Fully qualified ID for the async operation.
          type: string
        name:
          description: Name of the async operation.
          type: string
        status:
          description: Operation status.
          type: string
        percentComplete:
          description: Percent of the operation that is complete.
          type: number
          minimum: 0
          maximum: 100
        startTime:
          description: The start time of the operation.
          type: string
          format: date-time
        endTime:
          description: The end time of the operation.
          type: string
          format: date-time
        operations:
          description: The operations list.
          type: array
          items:
            $ref: '#/components/schemas/OperationStatusResult'
        error:
          description: If present, details of the operation error.
          $ref: '#/components/schemas/ErrorDetail'
    locationData:
      description: Metadata pertaining to the geographic location of the resource.
      type: object
      properties:
        name:
          type: string
          maxLength: 256
          description: A canonical name for the geographic or physical location.
        city:
          type: string
          description: The city or locality where the resource is located.
        district:
          type: string
          description: The district, state, or province where the resource is located.
        countryOrRegion:
          type: string
          description: The country or region where the resource is located
      required:
        - name
    systemData:
      description: Metadata pertaining to creation and last modification of the resource.
      type: object
      readOnly: true
      properties:
        createdBy:
          type: string
          description: The identity that created the resource.
        createdByType:
          type: string
          description: The type of identity that created the resource.
          enum:
            - User
            - Application
            - ManagedIdentity
            - Key
          x-ms-enum:
            name: createdByType
            modelAsString: true
        createdAt:
          type: string
          format: date-time
          description: The timestamp of resource creation (UTC).
        lastModifiedBy:
          type: string
          description: The identity that last modified the resource.
        lastModifiedByType:
          type: string
          description: The type of identity that last modified the resource.
          enum:
            - User
            - Application
            - ManagedIdentity
            - Key
          x-ms-enum:
            name: createdByType
            modelAsString: true
        lastModifiedAt:
          type: string
          format: date-time
          description: The timestamp of resource last modification (UTC)
    encryptionProperties:
      description: Configuration of key for data encryption
      type: object
      properties:
        status:
          description: Indicates whether or not the encryption is enabled for container registry.
          enum:
            - enabled
            - disabled
          type: string
          x-ms-enum:
            name: EncryptionStatus
            modelAsString: true
        keyVaultProperties:
          $ref: '#/components/schemas/KeyVaultProperties'
          description: Key vault properties.
    KeyVaultProperties:
      type: object
      properties:
        keyIdentifier:
          description: Key vault uri to access the encryption key.
          type: string
        identity:
          description: The client ID of the identity which will be used to access key vault.
          type: string
    CheckNameAvailabilityRequest:
      description: The check availability request body.
      type: object
      properties:
        name:
          description: The name of the resource for which availability needs to be checked.
          type: string
        type:
          description: The resource type.
          type: string
    CheckNameAvailabilityResponse:
      description: The check availability result.
      type: object
      properties:
        nameAvailable:
          description: Indicates if the resource name is available.
          type: boolean
        reason:
          description: The reason why the given name is not available.
          type: string
          enum:
            - Invalid
            - AlreadyExists
          x-ms-enum:
            name: CheckNameAvailabilityReason
            modelAsString: true
        message:
          description: Detailed reason why the given name is available.
          type: string
    ResourcePatch:
      type: object
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
          description: Resource tags.
      description: Object containing updates for patch operations.
    ResourcePoolProperties:
      description: Describes the properties of a Resource Pool.
      type: object
      properties:
        uuid:
          description: Gets or sets a unique identifier for this resource.
          type: string
          readOnly: true
        vCenterId:
          description: Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
          type: string
        moRefId:
          description: Gets or sets the vCenter MoRef (Managed Object Reference) ID for the resource pool.
          type: string
        inventoryItemId:
          description: Gets or sets the inventory Item ID for the resource pool.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the resource pool.
          type: string
          readOnly: true
        cpuSharesLevel:
          description: "Gets or sets CPUSharesLevel which specifies the CPU allocation level for this pool.\r\nThis property is used in relative allocation between resource consumers."
          type: string
          readOnly: true
        cpuReservationMHz:
          format: int64
          description: "Gets or sets CPUReservationMHz which specifies the CPU size in MHz that is guaranteed\r\nto be available."
          type: integer
          readOnly: true
        cpuLimitMHz:
          format: int64
          description: "Gets or sets CPULimitMHz which specifies a CPU usage limit in MHz.\r\nUtilization will not exceed this limit even if there are available resources."
          type: integer
          readOnly: true
        memSharesLevel:
          description: "Gets or sets CPUSharesLevel which specifies the memory allocation level for this pool.\r\nThis property is used in relative allocation between resource consumers."
          type: string
          readOnly: true
        memReservationMB:
          format: int64
          description: "Gets or sets MemReservationMB which specifies the guaranteed available memory in\r\nmegabytes."
          type: integer
          readOnly: true
        memLimitMB:
          format: int64
          description: "Gets or sets MemLimitMB specifies a memory usage limit in megabytes.\r\nUtilization will not exceed the specified limit even if there are available resources."
          type: integer
          readOnly: true
        memOverallUsageGB:
          format: int64
          description: Gets the used physical memory on the pool in GB.
          type: integer
          readOnly: true
        memCapacityGB:
          format: int64
          description: Gets the total amount of physical memory on the pool in GB.
          type: integer
          readOnly: true
        cpuOverallUsageMHz:
          format: int64
          description: Gets the used CPU usage across all cores on the pool in MHz.
          type: integer
          readOnly: true
        cpuCapacityMHz:
          format: int64
          description: Gets the max CPU usage across all cores on the pool in MHz.
          type: integer
          readOnly: true
        customResourceName:
          description: Gets the name of the corresponding resource in Kubernetes.
          type: string
          readOnly: true
        datastoreIds:
          description: Gets the datastore ARM ids.
          type: array
          items:
            type: string
          readOnly: true
        networkIds:
          description: Gets the network ARM ids.
          type: array
          items:
            type: string
          readOnly: true
        statuses:
          description: The resource status information.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ResourceStatus'
          x-ms-identifiers:
            - type
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
    ResourcePool:
      description: Define the resourcePool.
      required:
        - location
        - properties
      x-ms-azure-resource: true
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/ResourcePoolProperties'
        location:
          description: Gets or sets the location.
          type: string
          x-ms-mutability:
            - read
            - create
        extendedLocation:
          $ref: '#/components/schemas/ExtendedLocation'
          description: Gets or sets the extended location.
        systemData:
          $ref: '#/components/schemas/systemData'
          description: The system data.
        tags:
          description: Gets or sets the Resource tags.
          type: object
          additionalProperties:
            type: string
        name:
          description: Gets or sets the name.
          type: string
          readOnly: true
        id:
          description: Gets or sets the Id.
          type: string
          readOnly: true
        type:
          description: Gets or sets the type of the resource.
          type: string
          readOnly: true
        kind:
          type: string
          description: Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
      type: object
    ResourcePoolsList:
      description: List of ResourcePools.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of ResourcePools.
          type: string
        value:
          description: Array of ResourcePools
          type: array
          items:
            $ref: '#/components/schemas/ResourcePool'
      required:
        - value
    VICredential:
      description: Username / Password Credentials to connect to vcenter.
      type: object
      properties:
        username:
          description: Gets or sets username to connect with the vCenter.
          type: string
        password:
          description: Gets or sets the password to connect with the vCenter.
          type: string
          x-ms-mutability:
            - create
            - update
          x-ms-secret: true
    ResourceStatus:
      description: The resource status information.
      type: object
      properties:
        type:
          description: The type of the condition.
          type: string
          readOnly: true
        status:
          description: Status of the condition.
          type: string
          readOnly: true
        reason:
          description: The reason for the condition's status.
          type: string
          readOnly: true
        message:
          description: A human readable message indicating details about the status.
          type: string
          readOnly: true
        severity:
          description: Severity with which to treat failures of this type of condition.
          type: string
          readOnly: true
        lastUpdatedAt:
          description: The last update time for this condition.
          type: string
          format: date-time
          readOnly: true
    VCenterProperties:
      description: Describes the properties of a VCenter.
      required:
        - fqdn
      type: object
      properties:
        uuid:
          description: Gets or sets a unique identifier for this resource.
          type: string
          readOnly: true
        fqdn:
          description: Gets or sets the FQDN/IPAddress of the vCenter.
          type: string
        port:
          format: int32
          description: Gets or sets the port of the vCenter.
          maximum: 65535
          minimum: 1
          type: integer
        version:
          description: Gets or sets the version of the vCenter.
          type: string
          readOnly: true
        instanceUuid:
          description: Gets or sets the instance UUID of the vCenter.
          type: string
          readOnly: true
        connectionStatus:
          description: Gets or sets the connection status to the vCenter.
          type: string
          readOnly: true
        customResourceName:
          description: Gets the name of the corresponding resource in Kubernetes.
          type: string
          readOnly: true
        credentials:
          description: Username / Password Credentials to connect to vcenter.
          $ref: '#/components/schemas/VICredential'
        statuses:
          description: The resource status information.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ResourceStatus'
          x-ms-identifiers:
            - type
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
    VirtualDiskUpdate:
      description: Defines the virtual disk update.
      type: object
      properties:
        name:
          description: Gets or sets the name of the virtual disk.
          type: string
        diskSizeGB:
          format: int32
          description: Gets or sets the disk total size.
          type: integer
        deviceKey:
          format: int32
          description: Gets or sets the device key value.
          type: integer
        diskMode:
          description: Gets or sets the disk mode.
          $ref: '#/components/schemas/DiskMode'
        controllerKey:
          description: Gets or sets the controller id.
          format: int32
          type: integer
        unitNumber:
          description: Gets or sets the unit number of the disk on the controller.
          format: int32
          type: integer
        deviceName:
          description: Gets or sets the device name.
          type: string
        diskType:
          description: Gets or sets the disk backing type.
          $ref: '#/components/schemas/DiskType'
    VirtualDisk:
      description: Virtual disk model
      type: object
      properties:
        name:
          description: Gets or sets the name of the virtual disk.
          type: string
        label:
          description: Gets or sets the label of the virtual disk in vCenter.
          type: string
          readOnly: true
        diskObjectId:
          description: Gets or sets the disk object id.
          type: string
          readOnly: true
        diskSizeGB:
          format: int32
          description: Gets or sets the disk total size.
          type: integer
        deviceKey:
          format: int32
          description: Gets or sets the device key value.
          type: integer
        diskMode:
          description: Gets or sets the disk mode.
          $ref: '#/components/schemas/DiskMode'
        controllerKey:
          description: Gets or sets the controller id.
          format: int32
          type: integer
        unitNumber:
          description: Gets or sets the unit number of the disk on the controller.
          format: int32
          type: integer
        deviceName:
          description: Gets or sets the device name.
          type: string
        diskType:
          description: Gets or sets the disk backing type.
          $ref: '#/components/schemas/DiskType'
    VirtualDiskInventory:
      description: Virtual disk model
      type: object
      properties:
        diskName:
          description: Gets or sets the name of the virtual disk.
          type: string
        label:
          description: Gets or sets the label of the virtual disk in vCenter.
          type: string
          readOnly: true
        diskSizeGB:
          format: int32
          description: Gets or sets the disk total size.
          type: integer
          readOnly: true
        deviceKey:
          format: int32
          description: Gets or sets the device key value.
          type: integer
          readOnly: true
        diskMode:
          description: Gets or sets the disk mode.
          $ref: '#/components/schemas/DiskMode'
          readOnly: true
        controllerKey:
          description: Gets or sets the controller id.
          format: int32
          type: integer
          readOnly: true
        unitNumber:
          description: Gets or sets the unit number of the disk on the controller.
          format: int32
          type: integer
          readOnly: true
        deviceName:
          description: Gets or sets the device name.
          type: string
          readOnly: true
        fileName:
          description: Gets or sets the disk file name.
          type: string
          readOnly: true
        diskType:
          description: Gets or sets the disk backing type.
          $ref: '#/components/schemas/DiskType'
          readOnly: true
        eagerlyScrub:
          description: Gets or sets the eagerly scrub property of disk.
          type: boolean
          readOnly: true
        thinProvisioned:
          description: Gets or sets the thin provisioning property of disk.
          type: boolean
          readOnly: true
        controllerType:
          description: Gets or sets the controller type.
          type: string
          readOnly: true
        uuid:
          description: Gets or sets a unique identifier for this resource.
          type: string
          readOnly: true
    Condition:
      description: Condition defines an extension to status.
      type: object
      properties:
        status:
          description: Status of the condition.
          type: string
          readOnly: true
        reason:
          description: The reason for the condition's status.
          type: string
          readOnly: true
        message:
          description: A human readable message indicating details about the status.
          type: string
          readOnly: true
        severity:
          description: Severity with which to treat failures of this type of condition.
          type: string
          readOnly: true
    VCenter:
      description: Defines the vCenter.
      required:
        - location
        - properties
      x-ms-azure-resource: true
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/VCenterProperties'
        location:
          description: Gets or sets the location.
          type: string
          x-ms-mutability:
            - read
            - create
        extendedLocation:
          $ref: '#/components/schemas/ExtendedLocation'
          description: Gets or sets the extended location.
        systemData:
          $ref: '#/components/schemas/systemData'
          description: The system data.
        tags:
          description: Gets or sets the Resource tags.
          type: object
          additionalProperties:
            type: string
        name:
          description: Gets or sets the name.
          type: string
          readOnly: true
        id:
          description: Gets or sets the Id.
          type: string
          readOnly: true
        type:
          description: Gets or sets the type of the resource.
          type: string
          readOnly: true
        kind:
          type: string
          description: Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
      type: object
    VCentersList:
      description: List of VCenters.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of VCenters.
          type: string
        value:
          description: Array of VCenters
          type: array
          items:
            $ref: '#/components/schemas/VCenter'
      required:
        - value
    OsType:
      description: Defines the different types of VM guest operating systems.
      enum:
        - Windows
        - Linux
        - Other
      type: string
      x-ms-enum:
        modelAsString: true
        name: OsType
    OsProfileForVMInstance:
      description: Specifies the operating system settings for the virtual machine.
      type: object
      properties:
        computerName:
          description: Gets or sets computer name.
          type: string
        adminUsername:
          description: Gets or sets administrator username.
          type: string
        adminPassword:
          description: Sets administrator password.
          type: string
          x-ms-mutability:
            - create
            - update
          x-ms-secret: true
        guestId:
          description: Gets or sets the guestId.
          type: string
        osType:
          description: Gets or sets the type of the os.
          $ref: '#/components/schemas/OsType'
        osSku:
          description: Gets or sets os sku.
          type: string
          readOnly: true
        toolsRunningStatus:
          description: Gets or sets the current running status of VMware Tools running in the guest operating system.
          type: string
          readOnly: true
        toolsVersionStatus:
          description: Gets or sets the current version status of VMware Tools installed in the guest operating system.
          type: string
          readOnly: true
        toolsVersion:
          description: Gets or sets the current version of VMware Tools.
          type: string
          readOnly: true
        windowsConfiguration:
          description: Windows Configuration.
          $ref: '#/components/schemas/WindowsConfiguration'
    WindowsConfiguration:
      description: Specifies the Windows Configuration settings for the virtual machine.
      type: object
      properties:
        fullName:
          description: Sets full name of the owner of the vm.
          type: string
        orgName:
          description: Sets org name to which the owner of the vm belongs.
          type: string
        domainName:
          description: Sets domain name that vm should join.
          type: string
        domainUsername:
          description: Sets domain username.
          type: string
        domainUserPassword:
          description: Sets domain user password.
          type: string
          x-ms-mutability:
            - create
            - update
          x-ms-secret: true
        workGroupName:
          description: Sets work group name that vm should join.
          type: string
        productId:
          description: Sets product id of the vm.
          type: string
        autoLogon:
          description: Sets a value indicating whether auto logon is enabled.
          type: boolean
        autoLogonCount:
          format: int32
          description: Sets auto logon count.
          type: integer
        timeZone:
          type: string
          description: Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Time zone name correspond to time zones listed at Microsoft Time Zone name values(https://learn.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)).
        firstLogonCommands:
          description: Sets first logon commands
          type: array
          items:
            type: string
    HardwareProfile:
      description: Specifies the hardware settings for the virtual machine.
      type: object
      properties:
        memorySizeMB:
          format: int32
          description: Gets or sets memory size in MBs for the vm.
          type: integer
        numCPUs:
          format: int32
          description: Gets or sets the number of vCPUs for the vm.
          type: integer
        numCoresPerSocket:
          format: int32
          description: Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
          type: integer
        cpuHotAddEnabled:
          description: Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
          type: boolean
          readOnly: true
        cpuHotRemoveEnabled:
          description: Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
          type: boolean
          readOnly: true
        memoryHotAddEnabled:
          description: Gets or sets a value indicating whether memory can be added while this virtual machine is running.
          type: boolean
          readOnly: true
    NetworkProfileUpdate:
      description: Specifies the network interfaces of the virtual machine.
      type: object
      properties:
        networkInterfaces:
          description: Gets or sets the list of network interfaces associated with the virtual machine.
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterfaceUpdate'
    NetworkProfile:
      description: Specifies the network interfaces of the virtual machine.
      type: object
      properties:
        networkInterfaces:
          description: Gets or sets the list of network interfaces associated with the virtual machine.
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
    NetworkProfileInventory:
      description: Specifies the network interfaces of the virtual machine.
      type: object
      properties:
        networkInterfaces:
          description: Gets or sets the list of network interfaces associated with the virtual machine.
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterfaceInventory'
          x-ms-identifiers:
            - networkMoRefId
    SCSIControllerType:
      description: Defines the different types of SCSI controllers.
      enum:
        - lsilogic
        - buslogic
        - pvscsi
        - lsilogicsas
      type: string
      x-ms-enum:
        modelAsString: true
        name: SCSIControllerType
    VirtualSCSISharing:
      description: Defines the sharing mode for sharing the SCSI bus.
      enum:
        - noSharing
        - physicalSharing
        - virtualSharing
      type: string
      x-ms-enum:
        modelAsString: true
        name: VirtualSCSISharing
    VirtualSCSIController:
      description: This data object type contains the properties of a SCSI controller device attached to a virtual machine that is reported by the controller.
      type: object
      properties:
        type:
          description: Gets or sets the controller type.
          $ref: '#/components/schemas/SCSIControllerType'
        controllerKey:
          format: int32
          description: Gets or sets the key of the controller.
          type: integer
        busNumber:
          format: int32
          description: Gets or sets the bus number of the controller.
          type: integer
        scsiCtlrUnitNumber:
          format: int32
          description: Gets or sets the SCSI controller unit number.
          type: integer
        sharing:
          description: Gets or sets the sharing mode.
          $ref: '#/components/schemas/VirtualSCSISharing'
    StorageProfile:
      description: Specifies the storage settings for the virtual machine disks.
      type: object
      properties:
        disks:
          description: Gets or sets the list of virtual disks associated with the virtual machine.
          type: array
          items:
            $ref: '#/components/schemas/VirtualDisk'
        scsiControllers:
          description: Gets or sets the list of virtual SCSI controllers associated with the virtual machine.
          type: array
          items:
            $ref: '#/components/schemas/VirtualSCSIController'
          readOnly: true
    StorageProfileInventory:
      description: Specifies the storage settings for the virtual machine disks.
      type: object
      properties:
        disks:
          description: Gets or sets the list of virtual disks associated with the virtual machine.
          type: array
          items:
            $ref: '#/components/schemas/VirtualDiskInventory'
          x-ms-identifiers:
            - uuid
    StorageProfileUpdate:
      description: Specifies the storage settings for the virtual machine disks.
      type: object
      properties:
        disks:
          description: Gets or sets the list of virtual disks associated with the virtual machine.
          type: array
          items:
            $ref: '#/components/schemas/VirtualDiskUpdate'
    PlacementProfile:
      description: Specifies the compute and storage placement settings for the virtual machine.
      type: object
      properties:
        resourcePoolId:
          type: string
          description: Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.
        clusterId:
          type: string
          description: Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.
        hostId:
          type: string
          description: Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
        datastoreId:
          type: string
          description: Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.
    UefiSettings:
      type: object
      properties:
        secureBootEnabled:
          type: boolean
          description: Specifies whether secure boot should be enabled on the virtual machine.
      description: Specifies the security settings like secure boot used while creating the virtual machine.
    SecurityProfile:
      type: object
      properties:
        uefiSettings:
          $ref: '#/components/schemas/UefiSettings'
          description: Specifies the security settings like secure boot used while creating the virtual machine.
      description: Specifies the Security profile settings for the virtual machine.
    InfrastructureProfile:
      type: object
      properties:
        templateId:
          description: Gets or sets the ARM Id of the template resource to deploy the virtual machine.
          type: string
        vCenterId:
          description: Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
          type: string
        moRefId:
          description: Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
          type: string
          readOnly: true
        inventoryItemId:
          description: Gets or sets the inventory Item ID for the virtual machine.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the virtual machine.
          type: string
          readOnly: true
        folderPath:
          description: Gets or sets the folder path of the vm.
          type: string
          readOnly: true
        instanceUuid:
          description: Gets or sets the instance uuid of the vm.
          type: string
          readOnly: true
        smbiosUuid:
          type: string
          description: Gets or sets the SMBIOS UUID of the vm.
        firmwareType:
          description: Firmware type
          $ref: '#/components/schemas/FirmwareType'
        customResourceName:
          description: Gets the name of the corresponding resource in Kubernetes.
          type: string
          readOnly: true
      description: Specifies the vCenter infrastructure specific settings for the virtual machine.
    ExtendedLocation:
      type: object
      description: The extended location.
      properties:
        type:
          type: string
          description: The extended location type.
        name:
          type: string
          description: The extended location name.
    VirtualMachineInstanceProperties:
      description: Describes the properties of a Virtual Machine Instance.
      type: object
      properties:
        placementProfile:
          description: Placement properties.
          $ref: '#/components/schemas/PlacementProfile'
        osProfile:
          description: OS properties.
          $ref: '#/components/schemas/OsProfileForVMInstance'
        hardwareProfile:
          description: Hardware properties.
          $ref: '#/components/schemas/HardwareProfile'
        networkProfile:
          description: Network properties.
          $ref: '#/components/schemas/NetworkProfile'
        storageProfile:
          description: Storage properties.
          $ref: '#/components/schemas/StorageProfile'
        securityProfile:
          $ref: '#/components/schemas/SecurityProfile'
          description: Gets the security profile.
        infrastructureProfile:
          $ref: '#/components/schemas/InfrastructureProfile'
          description: Gets the infrastructure profile.
        powerState:
          description: Gets the power state of the virtual machine.
          type: string
          readOnly: true
        statuses:
          description: The resource status information.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ResourceStatus'
          x-ms-identifiers:
            - type
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
        resourceUid:
          description: Gets or sets a unique identifier for the vm resource.
          type: string
          readOnly: true
    VirtualMachineInstance:
      description: Define the virtualMachineInstance.
      required:
        - properties
      x-ms-azure-resource: true
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/VirtualMachineInstanceProperties'
        extendedLocation:
          $ref: '#/components/schemas/ExtendedLocation'
          description: Gets or sets the extended location.
      type: object
    VirtualMachineInstanceUpdateProperties:
      description: Describes the properties of a Virtual Machine.
      type: object
      properties:
        hardwareProfile:
          $ref: '#/components/schemas/HardwareProfile'
        storageProfile:
          $ref: '#/components/schemas/StorageProfileUpdate'
        networkProfile:
          $ref: '#/components/schemas/NetworkProfileUpdate'
    VirtualMachineInstanceUpdate:
      description: Defines the virtualMachineInstanceUpdate.
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/VirtualMachineInstanceUpdateProperties'
      type: object
    VirtualMachineInstancesList:
      description: List of VirtualMachineInstances.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of VirtualMachines.
          type: string
        value:
          description: Array of VirtualMachines
          type: array
          items:
            $ref: '#/components/schemas/VirtualMachineInstance'
      required:
        - value
    StopVirtualMachineOptions:
      description: Defines the stop action properties.
      type: object
      properties:
        skipShutdown:
          description: Gets or sets a value indicating whether to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Defaults to false.
          type: boolean
          default: false
    VirtualMachineTemplateProperties:
      description: Describes the properties of a Virtual Machine Template.
      type: object
      properties:
        uuid:
          description: Gets or sets a unique identifier for this resource.
          type: string
          readOnly: true
        vCenterId:
          description: Gets or sets the ARM Id of the vCenter resource in which this template resides.
          type: string
        moRefId:
          description: "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine\r\ntemplate."
          type: string
        inventoryItemId:
          description: Gets or sets the inventory Item ID for the virtual machine template.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the virtual machine template.
          type: string
          readOnly: true
        memorySizeMB:
          format: int32
          description: Gets or sets memory size in MBs for the template.
          type: integer
          readOnly: true
        numCPUs:
          format: int32
          description: Gets or sets the number of vCPUs for the template.
          type: integer
          readOnly: true
        numCoresPerSocket:
          format: int32
          description: "Gets or sets the number of cores per socket for the template.\r\nDefaults to 1 if unspecified."
          type: integer
          readOnly: true
        osType:
          description: Gets or sets the type of the os.
          $ref: '#/components/schemas/OsType'
          readOnly: true
        osName:
          description: Gets or sets os name.
          type: string
          readOnly: true
        folderPath:
          description: Gets or sets the folder path of the template.
          type: string
          readOnly: true
        networkInterfaces:
          description: Gets or sets the network interfaces of the template.
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
          readOnly: true
        disks:
          description: Gets or sets the disks the template.
          type: array
          items:
            $ref: '#/components/schemas/VirtualDisk'
          readOnly: true
        customResourceName:
          description: Gets the name of the corresponding resource in Kubernetes.
          type: string
          readOnly: true
        toolsVersionStatus:
          description: Gets or sets the current version status of VMware Tools installed in the guest operating system.
          type: string
          readOnly: true
        toolsVersion:
          description: Gets or sets the current version of VMware Tools.
          type: string
          readOnly: true
        firmwareType:
          description: Firmware type
          $ref: '#/components/schemas/FirmwareType'
          readOnly: true
        statuses:
          description: The resource status information.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ResourceStatus'
          x-ms-identifiers:
            - type
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
    ClusterProperties:
      description: Describes the properties of a Cluster.
      type: object
      properties:
        uuid:
          description: Gets or sets a unique identifier for this resource.
          type: string
          readOnly: true
        vCenterId:
          description: Gets or sets the ARM Id of the vCenter resource in which this cluster resides.
          type: string
        moRefId:
          description: Gets or sets the vCenter MoRef (Managed Object Reference) ID for the cluster.
          type: string
        inventoryItemId:
          description: Gets or sets the inventory Item ID for the cluster.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the cluster.
          type: string
          readOnly: true
        statuses:
          description: The resource status information.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ResourceStatus'
          x-ms-identifiers:
            - type
        customResourceName:
          description: Gets the name of the corresponding resource in Kubernetes.
          type: string
          readOnly: true
        usedMemoryGB:
          format: int64
          description: Gets the used physical memory on the cluster in GB.
          type: integer
          readOnly: true
        totalMemoryGB:
          format: int64
          description: Gets the total amount of physical memory on the cluster in GB.
          type: integer
          readOnly: true
        usedCpuMHz:
          format: int64
          description: Gets the used CPU usage across all cores on the cluster in MHz.
          type: integer
          readOnly: true
        totalCpuMHz:
          format: int64
          description: Gets the max CPU usage across all cores on the cluster in MHz.
          type: integer
          readOnly: true
        datastoreIds:
          description: Gets the datastore ARM ids.
          type: array
          items:
            type: string
          readOnly: true
        networkIds:
          description: Gets the network ARM ids.
          type: array
          items:
            type: string
          readOnly: true
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
    Cluster:
      description: Define the cluster.
      required:
        - location
        - properties
      x-ms-azure-resource: true
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/ClusterProperties'
        location:
          description: Gets or sets the location.
          type: string
          x-ms-mutability:
            - read
            - create
        extendedLocation:
          $ref: '#/components/schemas/ExtendedLocation'
          description: Gets or sets the extended location.
        systemData:
          $ref: '#/components/schemas/systemData'
          description: The system data.
        tags:
          description: Gets or sets the Resource tags.
          type: object
          additionalProperties:
            type: string
        name:
          description: Gets or sets the name.
          type: string
          readOnly: true
        id:
          description: Gets or sets the Id.
          type: string
          readOnly: true
        type:
          description: Gets or sets the type of the resource.
          type: string
          readOnly: true
        kind:
          type: string
          description: Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
      type: object
    ClustersList:
      description: List of Clusters.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of Clusters.
          type: string
        value:
          description: Array of Clusters
          type: array
          items:
            $ref: '#/components/schemas/Cluster'
      required:
        - value
    HostProperties:
      description: Describes the properties of a Host.
      type: object
      properties:
        uuid:
          description: Gets or sets a unique identifier for this resource.
          type: string
          readOnly: true
        vCenterId:
          description: Gets or sets the ARM Id of the vCenter resource in which this host resides.
          type: string
        moRefId:
          description: Gets or sets the vCenter MoRef (Managed Object Reference) ID for the host.
          type: string
        inventoryItemId:
          description: Gets or sets the inventory Item ID for the host.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the host.
          type: string
          readOnly: true
        statuses:
          description: The resource status information.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ResourceStatus'
          x-ms-identifiers:
            - type
        customResourceName:
          description: Gets the name of the corresponding resource in Kubernetes.
          type: string
          readOnly: true
        overallMemoryUsageGB:
          format: int64
          description: Gets the used physical memory on the host in GB.
          type: integer
          readOnly: true
        memorySizeGB:
          format: int64
          description: Gets the total amount of physical memory on the host in GB.
          type: integer
          readOnly: true
        overallCpuUsageMHz:
          format: int64
          description: Gets the used CPU usage across all cores in MHz.
          type: integer
          readOnly: true
        cpuMhz:
          format: int64
          description: Gets the max CPU usage across all cores in MHz.
          type: integer
          readOnly: true
        datastoreIds:
          description: Gets the datastore ARM ids.
          type: array
          items:
            type: string
          readOnly: true
        networkIds:
          description: Gets the network ARM ids.
          type: array
          items:
            type: string
          readOnly: true
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
    Host:
      description: Define the host.
      required:
        - location
        - properties
      x-ms-azure-resource: true
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/HostProperties'
        location:
          description: Gets or sets the location.
          type: string
          x-ms-mutability:
            - read
            - create
        extendedLocation:
          $ref: '#/components/schemas/ExtendedLocation'
          description: Gets or sets the extended location.
        systemData:
          $ref: '#/components/schemas/systemData'
          description: The system data.
        tags:
          description: Gets or sets the Resource tags.
          type: object
          additionalProperties:
            type: string
        name:
          description: Gets or sets the name.
          type: string
          readOnly: true
        id:
          description: Gets or sets the Id.
          type: string
          readOnly: true
        type:
          description: Gets or sets the type of the resource.
          type: string
          readOnly: true
        kind:
          type: string
          description: Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
      type: object
    HostsList:
      description: List of Hosts.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of Hosts.
          type: string
        value:
          description: Array of Hosts
          type: array
          items:
            $ref: '#/components/schemas/Host'
      required:
        - value
    DatastoreProperties:
      description: Describes the properties of a Datastore.
      type: object
      properties:
        uuid:
          description: Gets or sets a unique identifier for this resource.
          type: string
          readOnly: true
        vCenterId:
          description: Gets or sets the ARM Id of the vCenter resource in which this datastore resides.
          type: string
        moRefId:
          description: Gets or sets the vCenter MoRef (Managed Object Reference) ID for the datastore.
          type: string
        inventoryItemId:
          description: Gets or sets the inventory Item ID for the datastore.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the datastore.
          type: string
          readOnly: true
        statuses:
          description: The resource status information.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ResourceStatus'
          x-ms-identifiers:
            - type
        customResourceName:
          description: Gets the name of the corresponding resource in Kubernetes.
          type: string
          readOnly: true
        capacityGB:
          description: Gets or sets Maximum capacity of this datastore in GBs.
          format: int64
          type: integer
          readOnly: true
        freeSpaceGB:
          description: Gets or sets Available space of this datastore in GBs.
          format: int64
          type: integer
          readOnly: true
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Provisioning state of the resource.
          readOnly: true
    ResourceProvisioningState:
      type: string
      description: The current deployment state of resource.
      enum:
        - Succeeded
        - Failed
        - Canceled
        - Provisioning
        - Updating
        - Deleting
        - Accepted
        - Created
      x-ms-enum:
        name: ProvisioningState
        modelAsString: true
    Datastore:
      description: Define the datastore.
      required:
        - location
        - properties
      x-ms-azure-resource: true
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/DatastoreProperties'
        location:
          description: Gets or sets the location.
          type: string
          x-ms-mutability:
            - read
            - create
        extendedLocation:
          $ref: '#/components/schemas/ExtendedLocation'
          description: Gets or sets the extended location.
        systemData:
          $ref: '#/components/schemas/systemData'
          description: The system data.
        tags:
          description: Gets or sets the Resource tags.
          type: object
          additionalProperties:
            type: string
        name:
          description: Gets or sets the name.
          type: string
          readOnly: true
        id:
          description: Gets or sets the Id.
          type: string
          readOnly: true
        type:
          description: Gets or sets the type of the resource.
          type: string
          readOnly: true
        kind:
          type: string
          description: Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
      type: object
    DatastoresList:
      description: List of Datastores.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of Datastores.
          type: string
        value:
          description: Array of Datastores
          type: array
          items:
            $ref: '#/components/schemas/Datastore'
      required:
        - value
    VirtualMachineTemplate:
      description: Define the virtualMachineTemplate.
      required:
        - location
        - properties
      x-ms-azure-resource: true
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/VirtualMachineTemplateProperties'
        location:
          description: Gets or sets the location.
          type: string
          x-ms-mutability:
            - read
            - create
        extendedLocation:
          $ref: '#/components/schemas/ExtendedLocation'
          description: Gets or sets the extended location.
        systemData:
          $ref: '#/components/schemas/systemData'
          description: The system data.
        tags:
          description: Gets or sets the Resource tags.
          type: object
          additionalProperties:
            type: string
        name:
          description: Gets or sets the name.
          type: string
          readOnly: true
        id:
          description: Gets or sets the Id.
          type: string
          readOnly: true
        type:
          description: Gets or sets the type of the resource.
          type: string
          readOnly: true
        kind:
          type: string
          description: Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
      type: object
    VirtualMachineTemplatesList:
      description: List of VirtualMachineTemplates.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of VirtualMachineTemplates.
          type: string
        value:
          description: Array of VirtualMachineTemplates
          type: array
          items:
            $ref: '#/components/schemas/VirtualMachineTemplate'
      required:
        - value
    VirtualNetworkProperties:
      description: Describes the properties of a Virtual Network.
      type: object
      properties:
        uuid:
          description: Gets or sets a unique identifier for this resource.
          type: string
          readOnly: true
        vCenterId:
          description: Gets or sets the ARM Id of the vCenter resource in which this template resides.
          type: string
        moRefId:
          description: Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual network.
          type: string
        inventoryItemId:
          description: Gets or sets the inventory Item ID for the virtual network.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the virtual network.
          type: string
          readOnly: true
        customResourceName:
          description: Gets the name of the corresponding resource in Kubernetes.
          type: string
          readOnly: true
        statuses:
          description: The resource status information.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ResourceStatus'
          x-ms-identifiers:
            - type
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
    VirtualNetwork:
      description: Define the virtualNetwork.
      required:
        - location
        - properties
      x-ms-azure-resource: true
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/VirtualNetworkProperties'
        location:
          description: Gets or sets the location.
          type: string
          x-ms-mutability:
            - read
            - create
        extendedLocation:
          $ref: '#/components/schemas/ExtendedLocation'
          description: Gets or sets the extended location.
        systemData:
          $ref: '#/components/schemas/systemData'
          description: The system data.
        tags:
          description: Gets or sets the Resource tags.
          type: object
          additionalProperties:
            type: string
        name:
          description: Gets or sets the name.
          type: string
          readOnly: true
        id:
          description: Gets or sets the Id.
          type: string
          readOnly: true
        type:
          description: Gets or sets the type of the resource.
          type: string
          readOnly: true
        kind:
          type: string
          description: Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
      type: object
    VirtualNetworksList:
      description: List of VirtualNetworks.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of VirtualNetworks.
          type: string
        value:
          description: Array of VirtualNetworks
          type: array
          items:
            $ref: '#/components/schemas/VirtualNetwork'
      required:
        - value
    NetworkInterfaceUpdate:
      description: Defines the network interface update.
      type: object
      properties:
        name:
          description: Gets or sets the name of the network interface.
          type: string
        networkId:
          description: Gets or sets the ARM Id of the network resource to connect the virtual machine.
          type: string
        nicType:
          description: NIC type
          $ref: '#/components/schemas/NICType'
        powerOnBoot:
          description: Gets or sets the power on boot.
          $ref: '#/components/schemas/PowerOnBootOption'
        deviceKey:
          format: int32
          description: Gets or sets the device key value.
          type: integer
    NetworkInterface:
      description: Network Interface model
      type: object
      properties:
        name:
          description: Gets or sets the name of the network interface.
          type: string
        label:
          description: Gets or sets the label of the virtual network in vCenter that the nic is connected to.
          type: string
          readOnly: true
        ipAddresses:
          description: Gets or sets the nic ip addresses.
          type: array
          items:
            type: string
          readOnly: true
        macAddress:
          description: Gets or sets the NIC MAC address.
          type: string
          readOnly: true
        networkId:
          description: Gets or sets the ARM Id of the network resource to connect the virtual machine.
          type: string
        nicType:
          description: NIC type
          $ref: '#/components/schemas/NICType'
        powerOnBoot:
          description: Gets or sets the power on boot.
          $ref: '#/components/schemas/PowerOnBootOption'
        networkMoRefId:
          description: "Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network\r\nthat the nic is connected to."
          type: string
          readOnly: true
        networkMoName:
          description: Gets or sets the name of the virtual network in vCenter that the nic is connected to.
          type: string
          readOnly: true
        deviceKey:
          format: int32
          description: Gets or sets the device key value.
          type: integer
        ipSettings:
          description: Gets or sets the ipsettings.
          $ref: '#/components/schemas/NicIPSettings'
    NetworkInterfaceInventory:
      description: Inventory Network Interface model
      type: object
      properties:
        label:
          description: Gets or sets the label of the virtual network in vCenter that the nic is connected to.
          type: string
          readOnly: true
        ipAddresses:
          description: Gets or sets the nic ip addresses.
          type: array
          items:
            type: string
          readOnly: true
        macAddress:
          description: Gets or sets the NIC MAC address.
          type: string
          readOnly: true
        nicType:
          description: NIC type
          $ref: '#/components/schemas/NICType'
          readOnly: true
        networkMoRefId:
          description: "Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network\r\nthat the nic is connected to."
          type: string
          readOnly: true
        networkMoName:
          description: Gets or sets the name of the virtual network in vCenter that the nic is connected to.
          type: string
          readOnly: true
        deviceKey:
          format: int32
          description: Gets or sets the device key value.
          type: integer
          readOnly: true
    PowerOnBootOption:
      description: Defines the options for power on boot.
      enum:
        - enabled
        - disabled
      type: string
      x-ms-enum:
        modelAsString: true
        name: PowerOnBootOption
    DiskMode:
      description: Defines the different types of disk modes.
      enum:
        - persistent
        - independent_persistent
        - independent_nonpersistent
      type: string
      x-ms-enum:
        modelAsString: true
        name: DiskMode
    DiskType:
      description: Defines the different types of disks.
      enum:
        - flat
        - pmem
        - rawphysical
        - rawvirtual
        - sparse
        - sesparse
        - unknown
      type: string
      x-ms-enum:
        modelAsString: true
        name: DiskType
    NICType:
      description: NIC type
      type: string
      enum:
        - vmxnet3
        - vmxnet2
        - vmxnet
        - e1000
        - e1000e
        - pcnet32
      x-ms-enum:
        modelAsString: true
        name: NICType
    FirmwareType:
      description: Firmware type
      type: string
      enum:
        - bios
        - efi
      x-ms-enum:
        modelAsString: true
        name: FirmwareType
    IPAddressAllocationMethod:
      description: IP address allocation method.
      enum:
        - unset
        - dynamic
        - static
        - linklayer
        - random
        - other
      type: string
      x-ms-enum:
        modelAsString: true
        name: IPAddressAllocationMethod
    NicIPAddressSettings:
      description: IP address information for a virtual network adapter reported by the fabric.
      type: object
      properties:
        allocationMethod:
          description: Gets the ip address allocation method.
          type: string
          readOnly: true
        ipAddress:
          description: Gets the ip address for the nic.
          type: string
          readOnly: true
        subnetMask:
          description: Gets the mask.
          type: string
          readOnly: true
    NicIPSettings:
      description: Defines the network interface ip settings.
      type: object
      properties:
        allocationMethod:
          description: Gets or sets the nic allocation method.
          $ref: '#/components/schemas/IPAddressAllocationMethod'
        dnsServers:
          description: Gets or sets the dns servers.
          type: array
          items:
            type: string
        gateway:
          description: Gets or sets the gateway.
          type: array
          items:
            type: string
        ipAddress:
          description: Gets or sets the ip address for the nic.
          type: string
        subnetMask:
          description: Gets or sets the mask.
          type: string
        primaryWinsServer:
          description: Gets or sets the primary server.
          type: string
          readOnly: true
        secondaryWinsServer:
          description: Gets or sets the secondary server.
          type: string
          readOnly: true
        ipAddressInfo:
          description: Gets or sets the IP address information being reported for this NIC. This contains the same IPv4 information above plus IPV6 information.
          type: array
          items:
            $ref: '#/components/schemas/NicIPAddressSettings'
          readOnly: true
    operation:
      description: Operation provided by provider
      type: object
      properties:
        name:
          type: string
          description: Name of the operation
        isDataAction:
          description: Indicates whether the operation is data action or not.
          type: boolean
        display:
          type: object
          description: Properties of the operation
          properties:
            provider:
              type: string
              description: Provider name
            resource:
              type: string
              description: Resource name
            operation:
              type: string
              description: Operation name
            description:
              type: string
              description: Description of the operation
    operationsList:
      description: Lists the operations available.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of operations.
          type: string
        value:
          description: Array of operations
          type: array
          items:
            description: Operation.
            $ref: '#/components/schemas/operation'
      required:
        - value
    InventoryItemsList:
      description: List of InventoryItems.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of InventoryItems.
          type: string
        value:
          description: Array of InventoryItems
          type: array
          items:
            $ref: '#/components/schemas/InventoryItem'
      required:
        - value
    InventoryItem:
      description: Defines the inventory item.
      required:
        - properties
      x-ms-azure-resource: true
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/InventoryItemProperties'
        kind:
          type: string
          description: Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
      type: object
    InventoryItemProperties:
      description: Describes the properties of an Inventory Item.
      required:
        - inventoryType
      discriminator:
        propertyName: inventoryType
      type: object
      properties:
        inventoryType:
          description: They inventory type.
          $ref: '#/components/schemas/InventoryType'
        managedResourceId:
          description: Gets or sets the tracked resource id corresponding to the inventory resource.
          type: string
        moRefId:
          description: Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the inventory item.
          type: string
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
    ResourcePoolInventoryItem:
      description: The resource pool inventory item.
      x-ms-discriminator-value: ResourcePool
      properties:
        inventoryType:
          description: They inventory type.
          $ref: '#/components/schemas/InventoryType'
        managedResourceId:
          description: Gets or sets the tracked resource id corresponding to the inventory resource.
          type: string
        moRefId:
          description: Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the inventory item.
          type: string
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
        parent:
          description: Parent resourcePool inventory resource details.
          $ref: '#/components/schemas/InventoryItemDetails'
      type: object
    VirtualMachineInventoryItem:
      description: The VM inventory item.
      x-ms-discriminator-value: VirtualMachine
      properties:
        inventoryType:
          description: They inventory type.
          $ref: '#/components/schemas/InventoryType'
        managedResourceId:
          description: Gets or sets the tracked resource id corresponding to the inventory resource.
          type: string
        moRefId:
          description: Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the inventory item.
          type: string
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
        osType:
          description: Gets or sets the type of the os.
          $ref: '#/components/schemas/OsType'
        osName:
          description: Gets or sets os name.
          type: string
        ipAddresses:
          description: Gets or sets the nic ip addresses.
          type: array
          items:
            type: string
        folderPath:
          description: Gets or sets the folder path of the vm.
          type: string
        host:
          description: Host inventory resource details.
          $ref: '#/components/schemas/InventoryItemDetails'
        resourcePool:
          description: ResourcePool inventory resource details.
          $ref: '#/components/schemas/InventoryItemDetails'
        cluster:
          description: Cluster inventory resource details.
          $ref: '#/components/schemas/InventoryItemDetails'
        instanceUuid:
          description: Gets or sets the instance uuid of the vm.
          type: string
        smbiosUuid:
          type: string
          description: Gets or sets the SMBIOS UUID of the vm.
        powerState:
          description: Gets the power state of the virtual machine.
          type: string
          readOnly: true
        toolsRunningStatus:
          description: Gets or sets the current running status of VMware Tools running in the guest operating system.
          type: string
          readOnly: true
        toolsVersionStatus:
          description: Gets or sets the current version status of VMware Tools installed in the guest operating system.
          type: string
          readOnly: true
        toolsVersion:
          description: Gets or sets the current version of VMware Tools.
          type: string
          readOnly: true
        firmwareType:
          description: Firmware type
          $ref: '#/components/schemas/FirmwareType'
          readOnly: true
        changeTrackingSupported:
          type: boolean
          description: Gets a value indicating whether change tracking is supported.
          readOnly: true
        changeTrackingEnabled:
          type: boolean
          description: Gets a value indicating whether change tracking is enabled.
          readOnly: true
        maxSnapshots:
          format: int32
          type: integer
          description: Gets a value indicating the maximum possible number of snapshots.
          readOnly: true
        numberOfSnapshots:
          format: int32
          type: integer
          description: Gets a value indicating the number of snapshots on the vm.
          readOnly: true
        diskEnabledUuid:
          type: string
          description: Gets or sets the disk Enabled UUID of the vm.
          readOnly: true
        computerName:
          type: string
          description: Gets the computer name.
          readOnly: true
        memorySizeMB:
          format: int32
          type: integer
          description: Gets or sets memory size in MBs for the vm.
          readOnly: true
        numCPUs:
          format: int32
          type: integer
          description: Gets or sets the number of vCPU for the vm.
          readOnly: true
        storageProfile:
          description: Storage properties.
          $ref: '#/components/schemas/StorageProfileInventory'
        networkProfile:
          description: Network properties.
          $ref: '#/components/schemas/NetworkProfileInventory'
      type: object
    VirtualMachineTemplateInventoryItem:
      description: The VM Template inventory item.
      x-ms-discriminator-value: VirtualMachineTemplate
      properties:
        inventoryType:
          description: They inventory type.
          $ref: '#/components/schemas/InventoryType'
        managedResourceId:
          description: Gets or sets the tracked resource id corresponding to the inventory resource.
          type: string
        moRefId:
          description: Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the inventory item.
          type: string
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
        memorySizeMB:
          format: int32
          description: Gets or sets memory size in MBs for the template.
          type: integer
        numCPUs:
          format: int32
          description: Gets or sets the number of vCPUs for the template.
          type: integer
        numCoresPerSocket:
          format: int32
          description: "Gets or sets the number of cores per socket for the template.\r\nDefaults to 1 if unspecified."
          type: integer
        osType:
          description: Gets or sets the type of the os.
          $ref: '#/components/schemas/OsType'
        osName:
          description: Gets or sets os name.
          type: string
        toolsVersionStatus:
          description: Gets or sets the current version status of VMware Tools installed in the guest operating system.
          type: string
          readOnly: true
        toolsVersion:
          description: Gets or sets the current version of VMware Tools.
          type: string
          readOnly: true
        folderPath:
          description: Gets or sets the folder path of the template.
          type: string
      type: object
    VirtualNetworkInventoryItem:
      description: The Virtual network inventory item.
      x-ms-discriminator-value: VirtualNetwork
      properties:
        inventoryType:
          description: They inventory type.
          $ref: '#/components/schemas/InventoryType'
        managedResourceId:
          description: Gets or sets the tracked resource id corresponding to the inventory resource.
          type: string
        moRefId:
          description: Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the inventory item.
          type: string
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
      type: object
    ClusterInventoryItem:
      description: The cluster inventory item.
      x-ms-discriminator-value: Cluster
      properties:
        inventoryType:
          description: They inventory type.
          $ref: '#/components/schemas/InventoryType'
        managedResourceId:
          description: Gets or sets the tracked resource id corresponding to the inventory resource.
          type: string
        moRefId:
          description: Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the inventory item.
          type: string
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
      type: object
    DatastoreInventoryItem:
      description: The datastore inventory item.
      x-ms-discriminator-value: Datastore
      properties:
        inventoryType:
          description: They inventory type.
          $ref: '#/components/schemas/InventoryType'
        managedResourceId:
          description: Gets or sets the tracked resource id corresponding to the inventory resource.
          type: string
        moRefId:
          description: Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the inventory item.
          type: string
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
        capacityGB:
          format: int64
          description: Gets or sets Maximum capacity of this datastore, in GBs.
          type: integer
        freeSpaceGB:
          format: int64
          description: Gets or sets Available space of this datastore, in GBs.
          type: integer
      type: object
    HostInventoryItem:
      description: The host inventory item.
      x-ms-discriminator-value: Host
      properties:
        inventoryType:
          description: They inventory type.
          $ref: '#/components/schemas/InventoryType'
        managedResourceId:
          description: Gets or sets the tracked resource id corresponding to the inventory resource.
          type: string
        moRefId:
          description: Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the inventory item.
          type: string
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
        parent:
          description: Parent host inventory resource details.
          $ref: '#/components/schemas/InventoryItemDetails'
        numCoresPerSocket:
          format: int32
          type: integer
          description: Gets or sets the number of cores per socket on the host.
          readOnly: true
        numSockets:
          format: int32
          type: integer
          description: Gets or sets the number of sockets on the host.
          readOnly: true
        version:
          description: Gets or sets the version of the host.
          type: string
          readOnly: true
        cpuModel:
          description: Gets or sets the cpu model of the host.
          type: string
          readOnly: true
        memorySizeGB:
          format: int64
          description: Gets the total amount of physical memory on the host in GB.
          type: integer
          readOnly: true
        powerState:
          description: Gets or sets the power state of the host.
          type: string
          readOnly: true
      type: object
    InventoryType:
      type: string
      description: The inventory type.
      enum:
        - ResourcePool
        - VirtualMachine
        - VirtualMachineTemplate
        - VirtualNetwork
        - Cluster
        - Datastore
        - Host
      x-ms-enum:
        name: InventoryType
        modelAsString: true
    InventoryItemDetails:
      description: Describes the properties of an Inventory Item reference.
      type: object
      properties:
        inventoryItemId:
          description: Gets or sets the inventory Item ID for the resource.
          type: string
        moName:
          description: Gets or sets the vCenter Managed Object name for the resource.
          type: string
        inventoryType:
          description: The inventory type.
          $ref: '#/components/schemas/InventoryType'
    VmInstanceHybridIdentityMetadataList:
      description: List of HybridIdentityMetadata.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of HybridIdentityMetadata.
          type: string
        value:
          description: Array of HybridIdentityMetadata
          type: array
          items:
            $ref: '#/components/schemas/VmInstanceHybridIdentityMetadata'
      required:
        - value
    VmInstanceHybridIdentityMetadata:
      description: Defines the HybridIdentityMetadata.
      required:
        - properties
      x-ms-azure-resource: true
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/VmInstanceHybridIdentityMetadataProperties'
      type: object
    VmInstanceHybridIdentityMetadataProperties:
      description: Describes the properties of Hybrid Identity Metadata for a Virtual Machine.
      type: object
      properties:
        resourceUid:
          description: The unique identifier for the resource.
          type: string
        publicKey:
          description: Gets or sets the Public Key.
          type: string
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
    ProvisioningAction:
      description: Defines the different types of operations for guest agent.
      enum:
        - install
        - uninstall
        - repair
      type: string
      x-ms-enum:
        modelAsString: true
        name: ProvisioningAction
    GuestCredential:
      description: Username / Password Credentials to connect to guest.
      type: object
      properties:
        username:
          description: Gets or sets username to connect with the guest.
          type: string
        password:
          description: Gets or sets the password to connect with the guest.
          type: string
          x-ms-mutability:
            - create
            - update
          x-ms-secret: true
        privateKey:
          type: string
          description: Private key used to authenticate to a virtual machine through ssh.
          x-ms-secret: true
    HttpProxyConfiguration:
      description: HTTP Proxy configuration for the VM.
      type: object
      properties:
        httpsProxy:
          description: Gets or sets httpsProxy url.
          type: string
    GuestAgentList:
      description: List of GuestAgent.
      type: object
      properties:
        nextLink:
          description: Url to follow for getting next page of GuestAgent.
          type: string
        value:
          description: Array of GuestAgent
          type: array
          items:
            $ref: '#/components/schemas/GuestAgent'
      required:
        - value
    GuestAgent:
      description: Defines the GuestAgent.
      required:
        - properties
      x-ms-azure-resource: true
      properties:
        properties:
          x-ms-client-flatten: true
          description: Resource properties.
          $ref: '#/components/schemas/GuestAgentProperties'
      type: object
    GuestAgentProperties:
      description: Describes the properties of a Virtual Machine Guest Agent.
      type: object
      properties:
        uuid:
          description: Gets or sets a unique identifier for this resource.
          type: string
          readOnly: true
        credentials:
          description: Username / Password Credentials to provision guest agent.
          $ref: '#/components/schemas/GuestCredential'
        privateLinkScopeResourceId:
          type: string
          format: arm-id
          description: The resource id of the private link scope this machine is assigned to, if any.
        httpProxyConfig:
          description: HTTP Proxy configuration for the VM.
          $ref: '#/components/schemas/HttpProxyConfiguration'
        provisioningAction:
          description: Gets or sets the guest agent provisioning action.
          $ref: '#/components/schemas/ProvisioningAction'
          type: string
        status:
          description: Gets or sets the guest agent status.
          type: string
          readOnly: true
        customResourceName:
          description: Gets the name of the corresponding resource in Kubernetes.
          type: string
          readOnly: true
        statuses:
          description: The resource status information.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ResourceStatus'
          x-ms-identifiers:
            - type
        provisioningState:
          $ref: '#/components/schemas/ResourceProvisioningState'
          description: Gets the provisioning state.
          readOnly: true
  x-stackQL-resources:
    operations:
      id: azure_isv.connected_vsphere.operations
      name: operations
      title: operations
      methods:
        list:
          operation:
            $ref: '#/paths/~1providers~1Microsoft.ConnectedVMwarevSphere~1operations?api-version=2023-12-01/get'
            operationId: Operations_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: operationsList
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    resource_pools:
      id: azure_isv.connected_vsphere.resource_pools
      name: resource_pools
      title: resource_pools
      methods:
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1resourcePools~1{resourcePoolName}?api-version=2023-12-01/put'
            operationId: ResourcePools_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ResourcePool
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1resourcePools~1{resourcePoolName}?api-version=2023-12-01/get'
            operationId: ResourcePools_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ResourcePool
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1resourcePools~1{resourcePoolName}?api-version=2023-12-01/patch'
            operationId: ResourcePools_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ResourcePool
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1resourcePools~1{resourcePoolName}?api-version=2023-12-01/delete'
            operationId: ResourcePools_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.ConnectedVMwarevSphere~1resourcePools?api-version=2023-12-01/get'
            operationId: ResourcePools_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ResourcePoolsList
            objectKey: $.value
        list_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1resourcePools?api-version=2023-12-01/get'
            operationId: ResourcePools_ListByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ResourcePoolsList
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/resource_pools/methods/get'
          - $ref: '#/components/x-stackQL-resources/resource_pools/methods/list_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/resource_pools/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/resource_pools/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/resource_pools/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/resource_pools/methods/delete'
    clusters:
      id: azure_isv.connected_vsphere.clusters
      name: clusters
      title: clusters
      methods:
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1clusters~1{clusterName}?api-version=2023-12-01/put'
            operationId: Clusters_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Cluster
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1clusters~1{clusterName}?api-version=2023-12-01/get'
            operationId: Clusters_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Cluster
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1clusters~1{clusterName}?api-version=2023-12-01/patch'
            operationId: Clusters_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Cluster
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1clusters~1{clusterName}?api-version=2023-12-01/delete'
            operationId: Clusters_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.ConnectedVMwarevSphere~1clusters?api-version=2023-12-01/get'
            operationId: Clusters_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ClustersList
            objectKey: $.value
        list_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1clusters?api-version=2023-12-01/get'
            operationId: Clusters_ListByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ClustersList
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/get'
          - $ref: '#/components/x-stackQL-resources/clusters/methods/list_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/clusters/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/delete'
    hosts:
      id: azure_isv.connected_vsphere.hosts
      name: hosts
      title: hosts
      methods:
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1hosts~1{hostName}?api-version=2023-12-01/put'
            operationId: Hosts_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Host
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1hosts~1{hostName}?api-version=2023-12-01/get'
            operationId: Hosts_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Host
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1hosts~1{hostName}?api-version=2023-12-01/patch'
            operationId: Hosts_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Host
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1hosts~1{hostName}?api-version=2023-12-01/delete'
            operationId: Hosts_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.ConnectedVMwarevSphere~1hosts?api-version=2023-12-01/get'
            operationId: Hosts_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: HostsList
            objectKey: $.value
        list_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1hosts?api-version=2023-12-01/get'
            operationId: Hosts_ListByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: HostsList
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/hosts/methods/get'
          - $ref: '#/components/x-stackQL-resources/hosts/methods/list_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/hosts/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/hosts/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/hosts/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/hosts/methods/delete'
    datastores:
      id: azure_isv.connected_vsphere.datastores
      name: datastores
      title: datastores
      methods:
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1datastores~1{datastoreName}?api-version=2023-12-01/put'
            operationId: Datastores_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Datastore
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1datastores~1{datastoreName}?api-version=2023-12-01/get'
            operationId: Datastores_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Datastore
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1datastores~1{datastoreName}?api-version=2023-12-01/patch'
            operationId: Datastores_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Datastore
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1datastores~1{datastoreName}?api-version=2023-12-01/delete'
            operationId: Datastores_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.ConnectedVMwarevSphere~1datastores?api-version=2023-12-01/get'
            operationId: Datastores_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatastoresList
            objectKey: $.value
        list_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1datastores?api-version=2023-12-01/get'
            operationId: Datastores_ListByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatastoresList
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/datastores/methods/get'
          - $ref: '#/components/x-stackQL-resources/datastores/methods/list_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/datastores/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/datastores/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/datastores/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/datastores/methods/delete'
    vcenters:
      id: azure_isv.connected_vsphere.vcenters
      name: vcenters
      title: vcenters
      methods:
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1vcenters~1{vcenterName}?api-version=2023-12-01/put'
            operationId: VCenters_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VCenter
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1vcenters~1{vcenterName}?api-version=2023-12-01/get'
            operationId: VCenters_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VCenter
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1vcenters~1{vcenterName}?api-version=2023-12-01/patch'
            operationId: VCenters_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VCenter
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1vcenters~1{vcenterName}?api-version=2023-12-01/delete'
            operationId: VCenters_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.ConnectedVMwarevSphere~1vcenters?api-version=2023-12-01/get'
            operationId: VCenters_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VCentersList
            objectKey: $.value
        list_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1vcenters?api-version=2023-12-01/get'
            operationId: VCenters_ListByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VCentersList
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vcenters/methods/get'
          - $ref: '#/components/x-stackQL-resources/vcenters/methods/list_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/vcenters/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/vcenters/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/vcenters/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/vcenters/methods/delete'
    virtual_machine_templates:
      id: azure_isv.connected_vsphere.virtual_machine_templates
      name: virtual_machine_templates
      title: virtual_machine_templates
      methods:
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineTemplates~1{virtualMachineTemplateName}?api-version=2023-12-01/put'
            operationId: VirtualMachineTemplates_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualMachineTemplate
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineTemplates~1{virtualMachineTemplateName}?api-version=2023-12-01/get'
            operationId: VirtualMachineTemplates_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualMachineTemplate
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineTemplates~1{virtualMachineTemplateName}?api-version=2023-12-01/patch'
            operationId: VirtualMachineTemplates_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualMachineTemplate
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineTemplates~1{virtualMachineTemplateName}?api-version=2023-12-01/delete'
            operationId: VirtualMachineTemplates_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineTemplates?api-version=2023-12-01/get'
            operationId: VirtualMachineTemplates_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualMachineTemplatesList
            objectKey: $.value
        list_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineTemplates?api-version=2023-12-01/get'
            operationId: VirtualMachineTemplates_ListByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualMachineTemplatesList
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/virtual_machine_templates/methods/get'
          - $ref: '#/components/x-stackQL-resources/virtual_machine_templates/methods/list_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/virtual_machine_templates/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/virtual_machine_templates/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/virtual_machine_templates/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/virtual_machine_templates/methods/delete'
    virtual_networks:
      id: azure_isv.connected_vsphere.virtual_networks
      name: virtual_networks
      title: virtual_networks
      methods:
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualNetworks~1{virtualNetworkName}?api-version=2023-12-01/put'
            operationId: VirtualNetworks_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualNetwork
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualNetworks~1{virtualNetworkName}?api-version=2023-12-01/get'
            operationId: VirtualNetworks_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualNetwork
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualNetworks~1{virtualNetworkName}?api-version=2023-12-01/patch'
            operationId: VirtualNetworks_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualNetwork
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualNetworks~1{virtualNetworkName}?api-version=2023-12-01/delete'
            operationId: VirtualNetworks_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualNetworks?api-version=2023-12-01/get'
            operationId: VirtualNetworks_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualNetworksList
            objectKey: $.value
        list_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualNetworks?api-version=2023-12-01/get'
            operationId: VirtualNetworks_ListByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualNetworksList
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/virtual_networks/methods/get'
          - $ref: '#/components/x-stackQL-resources/virtual_networks/methods/list_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/virtual_networks/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/virtual_networks/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/virtual_networks/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/virtual_networks/methods/delete'
    inventory_items:
      id: azure_isv.connected_vsphere.inventory_items
      name: inventory_items
      title: inventory_items
      methods:
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1vcenters~1{vcenterName}~1inventoryItems~1{inventoryItemName}?api-version=2023-12-01/put'
            operationId: InventoryItems_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InventoryItem
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1vcenters~1{vcenterName}~1inventoryItems~1{inventoryItemName}?api-version=2023-12-01/get'
            operationId: InventoryItems_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InventoryItem
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1vcenters~1{vcenterName}~1inventoryItems~1{inventoryItemName}?api-version=2023-12-01/delete'
            operationId: InventoryItems_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_v_center:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.ConnectedVMwarevSphere~1vcenters~1{vcenterName}~1inventoryItems?api-version=2023-12-01/get'
            operationId: InventoryItems_ListByVCenter
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InventoryItemsList
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/inventory_items/methods/get'
          - $ref: '#/components/x-stackQL-resources/inventory_items/methods/list_by_v_center'
        insert:
          - $ref: '#/components/x-stackQL-resources/inventory_items/methods/create'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/inventory_items/methods/delete'
    virtual_machine_instances:
      id: azure_isv.connected_vsphere.virtual_machine_instances
      name: virtual_machine_instances
      title: virtual_machine_instances
      methods:
        create_or_update:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default?api-version=2023-12-01/put'
            operationId: VirtualMachineInstances_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualMachineInstance
        get:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default?api-version=2023-12-01/get'
            operationId: VirtualMachineInstances_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualMachineInstance
        update:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default?api-version=2023-12-01/patch'
            operationId: VirtualMachineInstances_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualMachineInstance
        delete:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default?api-version=2023-12-01/delete'
            operationId: VirtualMachineInstances_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        list:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances?api-version=2023-12-01/get'
            operationId: VirtualMachineInstances_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualMachineInstancesList
            objectKey: $.value
        stop:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default~1stop?api-version=2023-12-01/post'
            operationId: VirtualMachineInstances_Stop
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        start:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default~1start?api-version=2023-12-01/post'
            operationId: VirtualMachineInstances_Start
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        restart:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default~1restart?api-version=2023-12-01/post'
            operationId: VirtualMachineInstances_Restart
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/virtual_machine_instances/methods/get'
          - $ref: '#/components/x-stackQL-resources/virtual_machine_instances/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/virtual_machine_instances/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/virtual_machine_instances/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/virtual_machine_instances/methods/delete'
    vm_instance_hybrid_identity_metadata:
      id: azure_isv.connected_vsphere.vm_instance_hybrid_identity_metadata
      name: vm_instance_hybrid_identity_metadata
      title: vm_instance_hybrid_identity_metadata
      methods:
        get:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default~1hybridIdentityMetadata~1default?api-version=2023-12-01/get'
            operationId: VmInstanceHybridIdentityMetadata_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VmInstanceHybridIdentityMetadata
        list:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default~1hybridIdentityMetadata?api-version=2023-12-01/get'
            operationId: VmInstanceHybridIdentityMetadata_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VmInstanceHybridIdentityMetadataList
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vm_instance_hybrid_identity_metadata/methods/get'
          - $ref: '#/components/x-stackQL-resources/vm_instance_hybrid_identity_metadata/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    vm_instance_guest_agents:
      id: azure_isv.connected_vsphere.vm_instance_guest_agents
      name: vm_instance_guest_agents
      title: vm_instance_guest_agents
      methods:
        create:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default~1guestAgents~1default?api-version=2023-12-01/put'
            operationId: VMInstanceGuestAgents_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: GuestAgent
        get:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default~1guestAgents~1default?api-version=2023-12-01/get'
            operationId: VMInstanceGuestAgents_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: GuestAgent
        delete:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default~1guestAgents~1default?api-version=2023-12-01/delete'
            operationId: VMInstanceGuestAgents_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        list:
          operation:
            $ref: '#/paths/~1{resourceUri}~1providers~1Microsoft.ConnectedVMwarevSphere~1virtualMachineInstances~1default~1guestAgents?api-version=2023-12-01/get'
            operationId: VMInstanceGuestAgents_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: GuestAgentList
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vm_instance_guest_agents/methods/get'
          - $ref: '#/components/x-stackQL-resources/vm_instance_guest_agents/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/vm_instance_guest_agents/methods/create'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/vm_instance_guest_agents/methods/delete'
    vw_resource_pools:
      id: azure_isv.connected_vsphere.vw_resource_pools
      name: vw_resource_pools
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              id as id,
              name as name,
              location as location,
              extendedLocation as extended_location,
              systemData as system_data,
              tags as tags,
              type as type,
              kind as kind,
              JSON_EXTRACT(properties, '$.uuid') as "uuid",
              JSON_EXTRACT(properties, '$.vCenterId') as "v_center_id",
              JSON_EXTRACT(properties, '$.moRefId') as "mo_ref_id",
              JSON_EXTRACT(properties, '$.inventoryItemId') as "inventory_item_id",
              JSON_EXTRACT(properties, '$.moName') as "mo_name",
              JSON_EXTRACT(properties, '$.cpuSharesLevel') as "cpu_shares_level",
              JSON_EXTRACT(properties, '$.cpuReservationMHz') as "cpu_reservation_m_hz",
              JSON_EXTRACT(properties, '$.cpuLimitMHz') as "cpu_limit_m_hz",
              JSON_EXTRACT(properties, '$.memSharesLevel') as "mem_shares_level",
              JSON_EXTRACT(properties, '$.memReservationMB') as "mem_reservation_mb",
              JSON_EXTRACT(properties, '$.memLimitMB') as "mem_limit_mb",
              JSON_EXTRACT(properties, '$.memOverallUsageGB') as "mem_overall_usage_gb",
              JSON_EXTRACT(properties, '$.memCapacityGB') as "mem_capacity_gb",
              JSON_EXTRACT(properties, '$.cpuOverallUsageMHz') as "cpu_overall_usage_m_hz",
              JSON_EXTRACT(properties, '$.cpuCapacityMHz') as "cpu_capacity_m_hz",
              JSON_EXTRACT(properties, '$.customResourceName') as "custom_resource_name",
              JSON_EXTRACT(properties, '$.datastoreIds') as "datastore_ids",
              JSON_EXTRACT(properties, '$.networkIds') as "network_ids",
              JSON_EXTRACT(properties, '$.statuses') as "statuses",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              resourcePoolName
              FROM azure_isv.connected_vsphere.resource_pools
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                id as id,
                name as name,
                location as location,
                extendedLocation as extended_location,
                systemData as system_data,
                tags as tags,
                type as type,
                kind as kind,
                json_extract_path_text(properties, '$.uuid') as "uuid",
                json_extract_path_text(properties, '$.vCenterId') as "v_center_id",
                json_extract_path_text(properties, '$.moRefId') as "mo_ref_id",
                json_extract_path_text(properties, '$.inventoryItemId') as "inventory_item_id",
                json_extract_path_text(properties, '$.moName') as "mo_name",
                json_extract_path_text(properties, '$.cpuSharesLevel') as "cpu_shares_level",
                json_extract_path_text(properties, '$.cpuReservationMHz') as "cpu_reservation_m_hz",
                json_extract_path_text(properties, '$.cpuLimitMHz') as "cpu_limit_m_hz",
                json_extract_path_text(properties, '$.memSharesLevel') as "mem_shares_level",
                json_extract_path_text(properties, '$.memReservationMB') as "mem_reservation_mb",
                json_extract_path_text(properties, '$.memLimitMB') as "mem_limit_mb",
                json_extract_path_text(properties, '$.memOverallUsageGB') as "mem_overall_usage_gb",
                json_extract_path_text(properties, '$.memCapacityGB') as "mem_capacity_gb",
                json_extract_path_text(properties, '$.cpuOverallUsageMHz') as "cpu_overall_usage_m_hz",
                json_extract_path_text(properties, '$.cpuCapacityMHz') as "cpu_capacity_m_hz",
                json_extract_path_text(properties, '$.customResourceName') as "custom_resource_name",
                json_extract_path_text(properties, '$.datastoreIds') as "datastore_ids",
                json_extract_path_text(properties, '$.networkIds') as "network_ids",
                json_extract_path_text(properties, '$.statuses') as "statuses",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                resourcePoolName
                FROM azure_isv.connected_vsphere.resource_pools
                WHERE subscriptionId = 'replace-me';
    vw_clusters:
      id: azure_isv.connected_vsphere.vw_clusters
      name: vw_clusters
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              id as id,
              name as name,
              location as location,
              extendedLocation as extended_location,
              systemData as system_data,
              tags as tags,
              type as type,
              kind as kind,
              JSON_EXTRACT(properties, '$.uuid') as "uuid",
              JSON_EXTRACT(properties, '$.vCenterId') as "v_center_id",
              JSON_EXTRACT(properties, '$.moRefId') as "mo_ref_id",
              JSON_EXTRACT(properties, '$.inventoryItemId') as "inventory_item_id",
              JSON_EXTRACT(properties, '$.moName') as "mo_name",
              JSON_EXTRACT(properties, '$.statuses') as "statuses",
              JSON_EXTRACT(properties, '$.customResourceName') as "custom_resource_name",
              JSON_EXTRACT(properties, '$.usedMemoryGB') as "used_memory_gb",
              JSON_EXTRACT(properties, '$.totalMemoryGB') as "total_memory_gb",
              JSON_EXTRACT(properties, '$.usedCpuMHz') as "used_cpu_m_hz",
              JSON_EXTRACT(properties, '$.totalCpuMHz') as "total_cpu_m_hz",
              JSON_EXTRACT(properties, '$.datastoreIds') as "datastore_ids",
              JSON_EXTRACT(properties, '$.networkIds') as "network_ids",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              clusterName
              FROM azure_isv.connected_vsphere.clusters
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                id as id,
                name as name,
                location as location,
                extendedLocation as extended_location,
                systemData as system_data,
                tags as tags,
                type as type,
                kind as kind,
                json_extract_path_text(properties, '$.uuid') as "uuid",
                json_extract_path_text(properties, '$.vCenterId') as "v_center_id",
                json_extract_path_text(properties, '$.moRefId') as "mo_ref_id",
                json_extract_path_text(properties, '$.inventoryItemId') as "inventory_item_id",
                json_extract_path_text(properties, '$.moName') as "mo_name",
                json_extract_path_text(properties, '$.statuses') as "statuses",
                json_extract_path_text(properties, '$.customResourceName') as "custom_resource_name",
                json_extract_path_text(properties, '$.usedMemoryGB') as "used_memory_gb",
                json_extract_path_text(properties, '$.totalMemoryGB') as "total_memory_gb",
                json_extract_path_text(properties, '$.usedCpuMHz') as "used_cpu_m_hz",
                json_extract_path_text(properties, '$.totalCpuMHz') as "total_cpu_m_hz",
                json_extract_path_text(properties, '$.datastoreIds') as "datastore_ids",
                json_extract_path_text(properties, '$.networkIds') as "network_ids",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                clusterName
                FROM azure_isv.connected_vsphere.clusters
                WHERE subscriptionId = 'replace-me';
    vw_hosts:
      id: azure_isv.connected_vsphere.vw_hosts
      name: vw_hosts
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              id as id,
              name as name,
              location as location,
              extendedLocation as extended_location,
              systemData as system_data,
              tags as tags,
              type as type,
              kind as kind,
              JSON_EXTRACT(properties, '$.uuid') as "uuid",
              JSON_EXTRACT(properties, '$.vCenterId') as "v_center_id",
              JSON_EXTRACT(properties, '$.moRefId') as "mo_ref_id",
              JSON_EXTRACT(properties, '$.inventoryItemId') as "inventory_item_id",
              JSON_EXTRACT(properties, '$.moName') as "mo_name",
              JSON_EXTRACT(properties, '$.statuses') as "statuses",
              JSON_EXTRACT(properties, '$.customResourceName') as "custom_resource_name",
              JSON_EXTRACT(properties, '$.overallMemoryUsageGB') as "overall_memory_usage_gb",
              JSON_EXTRACT(properties, '$.memorySizeGB') as "memory_size_gb",
              JSON_EXTRACT(properties, '$.overallCpuUsageMHz') as "overall_cpu_usage_m_hz",
              JSON_EXTRACT(properties, '$.cpuMhz') as "cpu_mhz",
              JSON_EXTRACT(properties, '$.datastoreIds') as "datastore_ids",
              JSON_EXTRACT(properties, '$.networkIds') as "network_ids",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              hostName
              FROM azure_isv.connected_vsphere.hosts
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                id as id,
                name as name,
                location as location,
                extendedLocation as extended_location,
                systemData as system_data,
                tags as tags,
                type as type,
                kind as kind,
                json_extract_path_text(properties, '$.uuid') as "uuid",
                json_extract_path_text(properties, '$.vCenterId') as "v_center_id",
                json_extract_path_text(properties, '$.moRefId') as "mo_ref_id",
                json_extract_path_text(properties, '$.inventoryItemId') as "inventory_item_id",
                json_extract_path_text(properties, '$.moName') as "mo_name",
                json_extract_path_text(properties, '$.statuses') as "statuses",
                json_extract_path_text(properties, '$.customResourceName') as "custom_resource_name",
                json_extract_path_text(properties, '$.overallMemoryUsageGB') as "overall_memory_usage_gb",
                json_extract_path_text(properties, '$.memorySizeGB') as "memory_size_gb",
                json_extract_path_text(properties, '$.overallCpuUsageMHz') as "overall_cpu_usage_m_hz",
                json_extract_path_text(properties, '$.cpuMhz') as "cpu_mhz",
                json_extract_path_text(properties, '$.datastoreIds') as "datastore_ids",
                json_extract_path_text(properties, '$.networkIds') as "network_ids",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                hostName
                FROM azure_isv.connected_vsphere.hosts
                WHERE subscriptionId = 'replace-me';
    vw_datastores:
      id: azure_isv.connected_vsphere.vw_datastores
      name: vw_datastores
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              id as id,
              name as name,
              location as location,
              extendedLocation as extended_location,
              systemData as system_data,
              tags as tags,
              type as type,
              kind as kind,
              JSON_EXTRACT(properties, '$.uuid') as "uuid",
              JSON_EXTRACT(properties, '$.vCenterId') as "v_center_id",
              JSON_EXTRACT(properties, '$.moRefId') as "mo_ref_id",
              JSON_EXTRACT(properties, '$.inventoryItemId') as "inventory_item_id",
              JSON_EXTRACT(properties, '$.moName') as "mo_name",
              JSON_EXTRACT(properties, '$.statuses') as "statuses",
              JSON_EXTRACT(properties, '$.customResourceName') as "custom_resource_name",
              JSON_EXTRACT(properties, '$.capacityGB') as "capacity_gb",
              JSON_EXTRACT(properties, '$.freeSpaceGB') as "free_space_gb",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              datastoreName
              FROM azure_isv.connected_vsphere.datastores
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                id as id,
                name as name,
                location as location,
                extendedLocation as extended_location,
                systemData as system_data,
                tags as tags,
                type as type,
                kind as kind,
                json_extract_path_text(properties, '$.uuid') as "uuid",
                json_extract_path_text(properties, '$.vCenterId') as "v_center_id",
                json_extract_path_text(properties, '$.moRefId') as "mo_ref_id",
                json_extract_path_text(properties, '$.inventoryItemId') as "inventory_item_id",
                json_extract_path_text(properties, '$.moName') as "mo_name",
                json_extract_path_text(properties, '$.statuses') as "statuses",
                json_extract_path_text(properties, '$.customResourceName') as "custom_resource_name",
                json_extract_path_text(properties, '$.capacityGB') as "capacity_gb",
                json_extract_path_text(properties, '$.freeSpaceGB') as "free_space_gb",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                datastoreName
                FROM azure_isv.connected_vsphere.datastores
                WHERE subscriptionId = 'replace-me';
    vw_vcenters:
      id: azure_isv.connected_vsphere.vw_vcenters
      name: vw_vcenters
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              id as id,
              name as name,
              location as location,
              extendedLocation as extended_location,
              systemData as system_data,
              tags as tags,
              type as type,
              kind as kind,
              JSON_EXTRACT(properties, '$.uuid') as "uuid",
              JSON_EXTRACT(properties, '$.fqdn') as "fqdn",
              JSON_EXTRACT(properties, '$.port') as "port",
              JSON_EXTRACT(properties, '$.version') as "version",
              JSON_EXTRACT(properties, '$.instanceUuid') as "instance_uuid",
              JSON_EXTRACT(properties, '$.connectionStatus') as "connection_status",
              JSON_EXTRACT(properties, '$.customResourceName') as "custom_resource_name",
              JSON_EXTRACT(properties, '$.credentials') as "credentials",
              JSON_EXTRACT(properties, '$.statuses') as "statuses",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              vcenterName
              FROM azure_isv.connected_vsphere.vcenters
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                id as id,
                name as name,
                location as location,
                extendedLocation as extended_location,
                systemData as system_data,
                tags as tags,
                type as type,
                kind as kind,
                json_extract_path_text(properties, '$.uuid') as "uuid",
                json_extract_path_text(properties, '$.fqdn') as "fqdn",
                json_extract_path_text(properties, '$.port') as "port",
                json_extract_path_text(properties, '$.version') as "version",
                json_extract_path_text(properties, '$.instanceUuid') as "instance_uuid",
                json_extract_path_text(properties, '$.connectionStatus') as "connection_status",
                json_extract_path_text(properties, '$.customResourceName') as "custom_resource_name",
                json_extract_path_text(properties, '$.credentials') as "credentials",
                json_extract_path_text(properties, '$.statuses') as "statuses",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                vcenterName
                FROM azure_isv.connected_vsphere.vcenters
                WHERE subscriptionId = 'replace-me';
    vw_virtual_machine_templates:
      id: azure_isv.connected_vsphere.vw_virtual_machine_templates
      name: vw_virtual_machine_templates
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              id as id,
              name as name,
              location as location,
              extendedLocation as extended_location,
              systemData as system_data,
              tags as tags,
              type as type,
              kind as kind,
              JSON_EXTRACT(properties, '$.uuid') as "uuid",
              JSON_EXTRACT(properties, '$.vCenterId') as "v_center_id",
              JSON_EXTRACT(properties, '$.moRefId') as "mo_ref_id",
              JSON_EXTRACT(properties, '$.inventoryItemId') as "inventory_item_id",
              JSON_EXTRACT(properties, '$.moName') as "mo_name",
              JSON_EXTRACT(properties, '$.memorySizeMB') as "memory_size_mb",
              JSON_EXTRACT(properties, '$.numCPUs') as "num_cp_us",
              JSON_EXTRACT(properties, '$.numCoresPerSocket') as "num_cores_per_socket",
              JSON_EXTRACT(properties, '$.osType') as "os_type",
              JSON_EXTRACT(properties, '$.osName') as "os_name",
              JSON_EXTRACT(properties, '$.folderPath') as "folder_path",
              JSON_EXTRACT(properties, '$.networkInterfaces') as "network_interfaces",
              JSON_EXTRACT(properties, '$.disks') as "disks",
              JSON_EXTRACT(properties, '$.customResourceName') as "custom_resource_name",
              JSON_EXTRACT(properties, '$.toolsVersionStatus') as "tools_version_status",
              JSON_EXTRACT(properties, '$.toolsVersion') as "tools_version",
              JSON_EXTRACT(properties, '$.firmwareType') as "firmware_type",
              JSON_EXTRACT(properties, '$.statuses') as "statuses",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              virtualMachineTemplateName
              FROM azure_isv.connected_vsphere.virtual_machine_templates
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                id as id,
                name as name,
                location as location,
                extendedLocation as extended_location,
                systemData as system_data,
                tags as tags,
                type as type,
                kind as kind,
                json_extract_path_text(properties, '$.uuid') as "uuid",
                json_extract_path_text(properties, '$.vCenterId') as "v_center_id",
                json_extract_path_text(properties, '$.moRefId') as "mo_ref_id",
                json_extract_path_text(properties, '$.inventoryItemId') as "inventory_item_id",
                json_extract_path_text(properties, '$.moName') as "mo_name",
                json_extract_path_text(properties, '$.memorySizeMB') as "memory_size_mb",
                json_extract_path_text(properties, '$.numCPUs') as "num_cp_us",
                json_extract_path_text(properties, '$.numCoresPerSocket') as "num_cores_per_socket",
                json_extract_path_text(properties, '$.osType') as "os_type",
                json_extract_path_text(properties, '$.osName') as "os_name",
                json_extract_path_text(properties, '$.folderPath') as "folder_path",
                json_extract_path_text(properties, '$.networkInterfaces') as "network_interfaces",
                json_extract_path_text(properties, '$.disks') as "disks",
                json_extract_path_text(properties, '$.customResourceName') as "custom_resource_name",
                json_extract_path_text(properties, '$.toolsVersionStatus') as "tools_version_status",
                json_extract_path_text(properties, '$.toolsVersion') as "tools_version",
                json_extract_path_text(properties, '$.firmwareType') as "firmware_type",
                json_extract_path_text(properties, '$.statuses') as "statuses",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                virtualMachineTemplateName
                FROM azure_isv.connected_vsphere.virtual_machine_templates
                WHERE subscriptionId = 'replace-me';
    vw_virtual_networks:
      id: azure_isv.connected_vsphere.vw_virtual_networks
      name: vw_virtual_networks
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              id as id,
              name as name,
              location as location,
              extendedLocation as extended_location,
              systemData as system_data,
              tags as tags,
              type as type,
              kind as kind,
              JSON_EXTRACT(properties, '$.uuid') as "uuid",
              JSON_EXTRACT(properties, '$.vCenterId') as "v_center_id",
              JSON_EXTRACT(properties, '$.moRefId') as "mo_ref_id",
              JSON_EXTRACT(properties, '$.inventoryItemId') as "inventory_item_id",
              JSON_EXTRACT(properties, '$.moName') as "mo_name",
              JSON_EXTRACT(properties, '$.customResourceName') as "custom_resource_name",
              JSON_EXTRACT(properties, '$.statuses') as "statuses",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              virtualNetworkName
              FROM azure_isv.connected_vsphere.virtual_networks
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                id as id,
                name as name,
                location as location,
                extendedLocation as extended_location,
                systemData as system_data,
                tags as tags,
                type as type,
                kind as kind,
                json_extract_path_text(properties, '$.uuid') as "uuid",
                json_extract_path_text(properties, '$.vCenterId') as "v_center_id",
                json_extract_path_text(properties, '$.moRefId') as "mo_ref_id",
                json_extract_path_text(properties, '$.inventoryItemId') as "inventory_item_id",
                json_extract_path_text(properties, '$.moName') as "mo_name",
                json_extract_path_text(properties, '$.customResourceName') as "custom_resource_name",
                json_extract_path_text(properties, '$.statuses') as "statuses",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                virtualNetworkName
                FROM azure_isv.connected_vsphere.virtual_networks
                WHERE subscriptionId = 'replace-me';
    vw_inventory_items:
      id: azure_isv.connected_vsphere.vw_inventory_items
      name: vw_inventory_items
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              kind as kind,
              JSON_EXTRACT(properties, '$.inventoryType') as "inventory_type",
              JSON_EXTRACT(properties, '$.managedResourceId') as "managed_resource_id",
              JSON_EXTRACT(properties, '$.moRefId') as "mo_ref_id",
              JSON_EXTRACT(properties, '$.moName') as "mo_name",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              vcenterName,
              inventoryItemName
              FROM azure_isv.connected_vsphere.inventory_items
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND vcenterName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                kind as kind,
                json_extract_path_text(properties, '$.inventoryType') as "inventory_type",
                json_extract_path_text(properties, '$.managedResourceId') as "managed_resource_id",
                json_extract_path_text(properties, '$.moRefId') as "mo_ref_id",
                json_extract_path_text(properties, '$.moName') as "mo_name",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                vcenterName,
                inventoryItemName
                FROM azure_isv.connected_vsphere.inventory_items
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND vcenterName = 'replace-me';
    vw_virtual_machine_instances:
      id: azure_isv.connected_vsphere.vw_virtual_machine_instances
      name: vw_virtual_machine_instances
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              extendedLocation as extended_location,
              JSON_EXTRACT(properties, '$.placementProfile') as "placement_profile",
              JSON_EXTRACT(properties, '$.osProfile') as "os_profile",
              JSON_EXTRACT(properties, '$.hardwareProfile') as "hardware_profile",
              JSON_EXTRACT(properties, '$.networkProfile') as "network_profile",
              JSON_EXTRACT(properties, '$.storageProfile') as "storage_profile",
              JSON_EXTRACT(properties, '$.securityProfile') as "security_profile",
              JSON_EXTRACT(properties, '$.infrastructureProfile') as "infrastructure_profile",
              JSON_EXTRACT(properties, '$.powerState') as "power_state",
              JSON_EXTRACT(properties, '$.statuses') as "statuses",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              JSON_EXTRACT(properties, '$.resourceUid') as "resource_uid",
              resourceUri
              FROM azure_isv.connected_vsphere.virtual_machine_instances
              WHERE resourceUri = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                extendedLocation as extended_location,
                json_extract_path_text(properties, '$.placementProfile') as "placement_profile",
                json_extract_path_text(properties, '$.osProfile') as "os_profile",
                json_extract_path_text(properties, '$.hardwareProfile') as "hardware_profile",
                json_extract_path_text(properties, '$.networkProfile') as "network_profile",
                json_extract_path_text(properties, '$.storageProfile') as "storage_profile",
                json_extract_path_text(properties, '$.securityProfile') as "security_profile",
                json_extract_path_text(properties, '$.infrastructureProfile') as "infrastructure_profile",
                json_extract_path_text(properties, '$.powerState') as "power_state",
                json_extract_path_text(properties, '$.statuses') as "statuses",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                json_extract_path_text(properties, '$.resourceUid') as "resource_uid",
                resourceUri
                FROM azure_isv.connected_vsphere.virtual_machine_instances
                WHERE resourceUri = 'replace-me';
    vw_vm_instance_hybrid_identity_metadata:
      id: azure_isv.connected_vsphere.vw_vm_instance_hybrid_identity_metadata
      name: vw_vm_instance_hybrid_identity_metadata
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.resourceUid') as "resource_uid",
              JSON_EXTRACT(properties, '$.publicKey') as "public_key",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              resourceUri
              FROM azure_isv.connected_vsphere.vm_instance_hybrid_identity_metadata
              WHERE resourceUri = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.resourceUid') as "resource_uid",
                json_extract_path_text(properties, '$.publicKey') as "public_key",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                resourceUri
                FROM azure_isv.connected_vsphere.vm_instance_hybrid_identity_metadata
                WHERE resourceUri = 'replace-me';
    vw_vm_instance_guest_agents:
      id: azure_isv.connected_vsphere.vw_vm_instance_guest_agents
      name: vw_vm_instance_guest_agents
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.uuid') as "uuid",
              JSON_EXTRACT(properties, '$.credentials') as "credentials",
              JSON_EXTRACT(properties, '$.privateLinkScopeResourceId') as "private_link_scope_resource_id",
              JSON_EXTRACT(properties, '$.httpProxyConfig') as "http_proxy_config",
              JSON_EXTRACT(properties, '$.provisioningAction') as "provisioning_action",
              JSON_EXTRACT(properties, '$.status') as "status",
              JSON_EXTRACT(properties, '$.customResourceName') as "custom_resource_name",
              JSON_EXTRACT(properties, '$.statuses') as "statuses",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              resourceUri
              FROM azure_isv.connected_vsphere.vm_instance_guest_agents
              WHERE resourceUri = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.uuid') as "uuid",
                json_extract_path_text(properties, '$.credentials') as "credentials",
                json_extract_path_text(properties, '$.privateLinkScopeResourceId') as "private_link_scope_resource_id",
                json_extract_path_text(properties, '$.httpProxyConfig') as "http_proxy_config",
                json_extract_path_text(properties, '$.provisioningAction') as "provisioning_action",
                json_extract_path_text(properties, '$.status') as "status",
                json_extract_path_text(properties, '$.customResourceName') as "custom_resource_name",
                json_extract_path_text(properties, '$.statuses') as "statuses",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                resourceUri
                FROM azure_isv.connected_vsphere.vm_instance_guest_agents
                WHERE resourceUri = 'replace-me';
paths:
  /providers/Microsoft.ConnectedVMwarevSphere/operations?api-version=2023-12-01:
    get:
      description: Returns list of all operations.
      operationId: Operations_List
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Operation details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/operationsList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/resourcePools/{resourcePoolName}?api-version=2023-12-01:
    put:
      tags:
        - ResourcePools
      operationId: ResourcePools_Create
      description: Create Or Update resourcePool.
      summary: Implements resourcePool PUT method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: resourcePoolName
          in: path
          description: Name of the resourcePool.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Request payload.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourcePool'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePool'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePool'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    get:
      tags:
        - ResourcePools
      operationId: ResourcePools_Get
      summary: Gets a resourcePool.
      description: Implements resourcePool GET method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: resourcePoolName
          in: path
          description: Name of the resourcePool.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePool'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - ResourcePools
      operationId: ResourcePools_Update
      summary: Updates a resourcePool.
      description: API to update certain properties of the resourcePool resource.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: resourcePoolName
          in: path
          description: Name of the resourcePool.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Resource properties to update.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourcePatch'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePool'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - ResourcePools
      operationId: ResourcePools_Delete
      summary: Deletes an resourcePool.
      description: Implements resourcePool DELETE method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: resourcePoolName
          in: path
          description: Name of the resourcePool.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
        - name: force
          in: query
          description: Whether force delete was specified.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        '204':
          description: No Content
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/resourcePools?api-version=2023-12-01:
    get:
      tags:
        - ResourcePools
      operationId: ResourcePools_List
      summary: Implements GET resourcePools in a subscription.
      description: List of resourcePools in a subscription.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePoolsList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/resourcePools?api-version=2023-12-01:
    get:
      tags:
        - ResourcePools
      operationId: ResourcePools_ListByResourceGroup
      summary: Implements GET resourcePools in a resource group.
      description: List of resourcePools in a resource group.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePoolsList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/clusters/{clusterName}?api-version=2023-12-01:
    put:
      tags:
        - Clusters
      operationId: Clusters_Create
      description: Create Or Update cluster.
      summary: Implements cluster PUT method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: clusterName
          in: path
          description: Name of the cluster.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Request payload.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cluster'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    get:
      tags:
        - Clusters
      operationId: Clusters_Get
      summary: Gets a cluster.
      description: Implements cluster GET method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: clusterName
          in: path
          description: Name of the cluster.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Clusters
      operationId: Clusters_Update
      summary: Updates a cluster.
      description: API to update certain properties of the cluster resource.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: clusterName
          in: path
          description: Name of the cluster.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Resource properties to update.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourcePatch'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Clusters
      operationId: Clusters_Delete
      summary: Deletes an cluster.
      description: Implements cluster DELETE method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: clusterName
          in: path
          description: Name of the cluster.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
        - name: force
          in: query
          description: Whether force delete was specified.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        '204':
          description: No Content
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/clusters?api-version=2023-12-01:
    get:
      tags:
        - Clusters
      operationId: Clusters_List
      summary: Implements GET clusters in a subscription.
      description: List of clusters in a subscription.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClustersList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/clusters?api-version=2023-12-01:
    get:
      tags:
        - Clusters
      operationId: Clusters_ListByResourceGroup
      summary: Implements GET clusters in a resource group.
      description: List of clusters in a resource group.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClustersList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/hosts/{hostName}?api-version=2023-12-01:
    put:
      tags:
        - Hosts
      operationId: Hosts_Create
      description: Create Or Update host.
      summary: Implements host PUT method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: hostName
          in: path
          description: Name of the host.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Request payload.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Host'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    get:
      tags:
        - Hosts
      operationId: Hosts_Get
      summary: Gets a host.
      description: Implements host GET method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: hostName
          in: path
          description: Name of the host.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Hosts
      operationId: Hosts_Update
      summary: Updates a host.
      description: API to update certain properties of the host resource.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: hostName
          in: path
          description: Name of the host.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Resource properties to update.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourcePatch'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Hosts
      operationId: Hosts_Delete
      summary: Deletes an host.
      description: Implements host DELETE method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: hostName
          in: path
          description: Name of the host.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
        - name: force
          in: query
          description: Whether force delete was specified.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        '204':
          description: No Content
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/hosts?api-version=2023-12-01:
    get:
      tags:
        - Hosts
      operationId: Hosts_List
      summary: Implements GET hosts in a subscription.
      description: List of hosts in a subscription.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostsList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/hosts?api-version=2023-12-01:
    get:
      tags:
        - Hosts
      operationId: Hosts_ListByResourceGroup
      summary: Implements GET hosts in a resource group.
      description: List of hosts in a resource group.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostsList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/datastores/{datastoreName}?api-version=2023-12-01:
    put:
      tags:
        - Datastores
      operationId: Datastores_Create
      description: Create Or Update datastore.
      summary: Implements datastore PUT method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: datastoreName
          in: path
          description: Name of the datastore.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Request payload.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Datastore'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datastore'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datastore'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    get:
      tags:
        - Datastores
      operationId: Datastores_Get
      summary: Gets a datastore.
      description: Implements datastore GET method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: datastoreName
          in: path
          description: Name of the datastore.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datastore'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Datastores
      operationId: Datastores_Update
      summary: Updates a datastore.
      description: API to update certain properties of the datastore resource.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: datastoreName
          in: path
          description: Name of the datastore.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Resource properties to update.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourcePatch'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datastore'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Datastores
      operationId: Datastores_Delete
      summary: Deletes an datastore.
      description: Implements datastore DELETE method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: datastoreName
          in: path
          description: Name of the datastore.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
        - name: force
          in: query
          description: Whether force delete was specified.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        '204':
          description: No Content
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/datastores?api-version=2023-12-01:
    get:
      tags:
        - Datastores
      operationId: Datastores_List
      summary: Implements GET datastores in a subscription.
      description: List of datastores in a subscription.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatastoresList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/datastores?api-version=2023-12-01:
    get:
      tags:
        - Datastores
      operationId: Datastores_ListByResourceGroup
      summary: Implements GET datastores in a resource group.
      description: List of datastores in a resource group.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatastoresList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}?api-version=2023-12-01:
    put:
      tags:
        - VCenters
      operationId: VCenters_Create
      description: Create Or Update vCenter.
      summary: Implements vCenter PUT method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: vcenterName
          in: path
          description: Name of the vCenter.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Request payload.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VCenter'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCenter'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCenter'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    get:
      tags:
        - VCenters
      operationId: VCenters_Get
      summary: Gets a vCenter.
      description: Implements vCenter GET method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: vcenterName
          in: path
          description: Name of the vCenter.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCenter'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - VCenters
      operationId: VCenters_Update
      summary: Updates a vCenter.
      description: API to update certain properties of the vCenter resource.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: vcenterName
          in: path
          description: Name of the vCenter.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Resource properties to update.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourcePatch'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCenter'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - VCenters
      operationId: VCenters_Delete
      summary: Deletes an vCenter.
      description: Implements vCenter DELETE method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: vcenterName
          in: path
          description: Name of the vCenter.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
        - name: force
          in: query
          description: Whether force delete was specified.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        '204':
          description: No Content
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/vcenters?api-version=2023-12-01:
    get:
      tags:
        - VCenters
      operationId: VCenters_List
      summary: Implements GET vCenters in a subscription.
      description: List of vCenters in a subscription.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCentersList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters?api-version=2023-12-01:
    get:
      tags:
        - VCenters
      operationId: VCenters_ListByResourceGroup
      summary: Implements GET vCenters in a resource group.
      description: List of vCenters in a resource group.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCentersList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineTemplates/{virtualMachineTemplateName}?api-version=2023-12-01:
    put:
      tags:
        - VirtualMachineTemplates
      operationId: VirtualMachineTemplates_Create
      description: Create Or Update virtual machine template.
      summary: Implements virtual machine template PUT method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: virtualMachineTemplateName
          in: path
          description: Name of the virtual machine template resource.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Request payload.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualMachineTemplate'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineTemplate'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineTemplate'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    get:
      tags:
        - VirtualMachineTemplates
      operationId: VirtualMachineTemplates_Get
      summary: Gets a virtual machine template.
      description: Implements virtual machine template GET method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: virtualMachineTemplateName
          in: path
          description: Name of the virtual machine template resource.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineTemplate'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - VirtualMachineTemplates
      operationId: VirtualMachineTemplates_Update
      summary: Updates a virtual machine template.
      description: API to update certain properties of the virtual machine template resource.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: virtualMachineTemplateName
          in: path
          description: Name of the virtual machine template resource.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Resource properties to update.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourcePatch'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineTemplate'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - VirtualMachineTemplates
      operationId: VirtualMachineTemplates_Delete
      summary: Deletes an virtual machine template.
      description: Implements virtual machine template DELETE method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: virtualMachineTemplateName
          in: path
          description: Name of the virtual machine template resource.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
        - name: force
          in: query
          description: Whether force delete was specified.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        '204':
          description: No Content
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineTemplates?api-version=2023-12-01:
    get:
      tags:
        - VirtualMachineTemplates
      operationId: VirtualMachineTemplates_List
      summary: Implements GET virtualMachineTemplates in a subscription.
      description: List of virtualMachineTemplates in a subscription.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineTemplatesList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineTemplates?api-version=2023-12-01:
    get:
      tags:
        - VirtualMachineTemplates
      operationId: VirtualMachineTemplates_ListByResourceGroup
      summary: Implements GET virtualMachineTemplates in a resource group.
      description: List of virtualMachineTemplates in a resource group.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineTemplatesList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualNetworks/{virtualNetworkName}?api-version=2023-12-01:
    put:
      tags:
        - VirtualNetworks
      operationId: VirtualNetworks_Create
      description: Create Or Update virtual network.
      summary: Implements virtual network PUT method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: virtualNetworkName
          in: path
          description: Name of the virtual network resource.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Request payload.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualNetwork'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetwork'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetwork'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    get:
      tags:
        - VirtualNetworks
      operationId: VirtualNetworks_Get
      summary: Gets a virtual network.
      description: Implements virtual network GET method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: virtualNetworkName
          in: path
          description: Name of the virtual network resource.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetwork'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - VirtualNetworks
      operationId: VirtualNetworks_Update
      summary: Updates a virtual network.
      description: API to update certain properties of the virtual network resource.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: virtualNetworkName
          in: path
          description: Name of the virtual network resource.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Resource properties to update.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourcePatch'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetwork'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - VirtualNetworks
      operationId: VirtualNetworks_Delete
      summary: Deletes an virtual network.
      description: Implements virtual network DELETE method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: virtualNetworkName
          in: path
          description: Name of the virtual network resource.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
        - name: force
          in: query
          description: Whether force delete was specified.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        '204':
          description: No Content
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualNetworks?api-version=2023-12-01:
    get:
      tags:
        - VirtualNetworks
      operationId: VirtualNetworks_List
      summary: Implements GET virtualNetworks in a subscription.
      description: List of virtualNetworks in a subscription.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworksList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualNetworks?api-version=2023-12-01:
    get:
      tags:
        - VirtualNetworks
      operationId: VirtualNetworks_ListByResourceGroup
      summary: Implements GET virtualNetworks in a resource group.
      description: List of virtualNetworks in a resource group.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworksList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}/inventoryItems/{inventoryItemName}?api-version=2023-12-01:
    put:
      tags:
        - InventoryItems
      operationId: InventoryItems_Create
      description: Create Or Update InventoryItem.
      summary: Implements InventoryItem PUT method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: vcenterName
          in: path
          description: Name of the vCenter.
          required: true
          schema:
            type: string
        - name: inventoryItemName
          in: path
          description: Name of the inventoryItem.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Request payload.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - InventoryItems
      operationId: InventoryItems_Get
      summary: Gets InventoryItem.
      description: Implements InventoryItem GET method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: vcenterName
          in: path
          description: Name of the vCenter.
          required: true
          schema:
            type: string
        - name: inventoryItemName
          in: path
          description: Name of the inventoryItem.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - InventoryItems
      operationId: InventoryItems_Delete
      summary: Deletes an inventoryItem.
      description: Implements inventoryItem DELETE method.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: vcenterName
          in: path
          description: Name of the vCenter.
          required: true
          schema:
            type: string
        - name: inventoryItemName
          in: path
          description: Name of the inventoryItem.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
        '204':
          description: No Content
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}/inventoryItems?api-version=2023-12-01:
    get:
      tags:
        - InventoryItems
      operationId: InventoryItems_ListByVCenter
      summary: Implements GET inventoryItems in a vCenter.
      description: Returns the list of inventoryItems of the given vCenter.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - name: vcenterName
          in: path
          description: Name of the vCenter.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItemsList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default?api-version=2023-12-01:
    put:
      tags:
        - VirtualMachineInstances
      operationId: VirtualMachineInstances_CreateOrUpdate
      description: The operation to create or update a virtual machine instance. Please note some properties can be set only during virtual machine instance creation.
      summary: Implements virtual machine PUT method.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Request payload.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualMachineInstance'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineInstance'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineInstance'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    get:
      tags:
        - VirtualMachineInstances
      operationId: VirtualMachineInstances_Get
      summary: Gets a virtual machine.
      description: Retrieves information about a virtual machine instance.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineInstance'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - VirtualMachineInstances
      operationId: VirtualMachineInstances_Update
      summary: Updates a virtual machine.
      description: The operation to update a virtual machine instance.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Resource properties to update.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualMachineInstanceUpdate'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineInstance'
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    delete:
      tags:
        - VirtualMachineInstances
      operationId: VirtualMachineInstances_Delete
      summary: Deletes an virtual machine.
      description: The operation to delete a virtual machine instance.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
        - name: deleteFromHost
          in: query
          description: Whether to delete the VM from the vCenter.
          required: false
          schema:
            type: boolean
        - name: force
          in: query
          description: Whether force delete was specified.
          required: false
          schema:
            type: boolean
      responses:
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        '204':
          description: No Content
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
  /{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances?api-version=2023-12-01:
    get:
      tags:
        - VirtualMachineInstances
      operationId: VirtualMachineInstances_List
      summary: Implements List virtual machine instances.
      description: Lists all of the virtual machine instances within the specified parent resource.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineInstancesList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/stop?api-version=2023-12-01:
    post:
      tags:
        - VirtualMachineInstances
      operationId: VirtualMachineInstances_Stop
      description: The operation to power off (stop) a virtual machine instance.
      summary: Implements the operation to stop a virtual machine.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Virtualmachine stop action payload.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopVirtualMachineOptions'
      responses:
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/start?api-version=2023-12-01:
    post:
      tags:
        - VirtualMachineInstances
      operationId: VirtualMachineInstances_Start
      description: The operation to start a virtual machine instance.
      summary: Implements the operation to start a virtual machine.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      responses:
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/restart?api-version=2023-12-01:
    post:
      tags:
        - VirtualMachineInstances
      operationId: VirtualMachineInstances_Restart
      description: The operation to restart a virtual machine instance.
      summary: Implements the operation to restart a virtual machine.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      responses:
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/hybridIdentityMetadata/default?api-version=2023-12-01:
    get:
      tags:
        - VmInstanceHybridIdentityMetadata
      operationId: VmInstanceHybridIdentityMetadata_Get
      summary: Gets HybridIdentityMetadata.
      description: Implements HybridIdentityMetadata GET method.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmInstanceHybridIdentityMetadata'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/hybridIdentityMetadata?api-version=2023-12-01:
    get:
      tags:
        - VmInstanceHybridIdentityMetadata
      operationId: VmInstanceHybridIdentityMetadata_List
      summary: Implements GET HybridIdentityMetadata in a vm.
      description: Returns the list of HybridIdentityMetadata of the given vm.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmInstanceHybridIdentityMetadataList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/guestAgents/default?api-version=2023-12-01:
    put:
      tags:
        - VMInstanceGuestAgents
      operationId: VMInstanceGuestAgents_Create
      description: Create Or Update GuestAgent.
      summary: Implements GuestAgent PUT method.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      requestBody:
        description: Request payload.
        x-ms-requestBody-name: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuestAgent'
      responses:
        '200':
          description: Arm resource update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuestAgent'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuestAgent'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    get:
      tags:
        - VMInstanceGuestAgents
      operationId: VMInstanceGuestAgents_Get
      summary: Gets GuestAgent.
      description: Implements GuestAgent GET method.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuestAgent'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - VMInstanceGuestAgents
      operationId: VMInstanceGuestAgents_Delete
      summary: Deletes an GuestAgent.
      description: Implements GuestAgent DELETE method.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      responses:
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        '204':
          description: No Content
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/guestAgents?api-version=2023-12-01:
    get:
      tags:
        - VMInstanceGuestAgents
      operationId: VMInstanceGuestAgents_List
      summary: Implements GET GuestAgent in a vm.
      description: Returns the list of GuestAgent of the given vm.
      parameters:
        - $ref: '#/components/parameters/resourceUriParameter'
        - $ref: '#/components/parameters/api-version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuestAgentList'
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
