openapi: 3.0.3
servers:
  - description: Client API
    url: 'https://api.cloudflare.com/client/v4'
info:
  description: Argo Analytics for Geolocation
  license:
    name: BSD-3-Clause
    url: 'https://opensource.org/licenses/BSD-3-Clause'
  title: Cloudflare API - argo
  version: 4.0.0
components:
  schemas:
    common_components-schemas-identifier:
      description: Identifier
      example: 023e105f4ecef8ad9ca31a8372d0c353
      maxLength: 32
      readOnly: true
      type: string
    schemas-response_single:
      allOf:
        - $ref: '#/components/schemas/api-response-single'
        - properties:
            result:
              type: object
          type: object
    api-response-common-failure:
      properties:
        errors:
          allOf:
            - $ref: '#/components/schemas/messages'
          example:
            - code: 7003
              message: No route for the URI
          minLength: 1
        messages:
          allOf:
            - $ref: '#/components/schemas/messages'
          example: []
        result:
          enum:
            - null
          nullable: true
        success:
          description: Whether the API call was successful
          enum:
            - false
          example: false
          type: boolean
      required:
        - success
        - errors
        - messages
        - result
      type: object
    api-response-single:
      allOf:
        - $ref: '#/components/schemas/api-response-common'
        - properties:
            result:
              anyOf:
                - type: object
                - type: string
              nullable: true
    messages:
      example: []
      items:
        properties:
          code:
            minimum: 1000
            type: integer
          message:
            type: string
        required:
          - code
          - message
        type: object
        uniqueItems: true
      type: array
    api-response-common:
      properties:
        errors:
          $ref: '#/components/schemas/messages'
        messages:
          $ref: '#/components/schemas/messages'
        result:
          anyOf:
            - type: object
            - items: {}
              type: array
            - type: string
        success:
          description: Whether the API call was successful
          enum:
            - true
          example: true
          type: boolean
      required:
        - success
        - errors
        - messages
        - result
      type: object
    patch:
      description: Update enablement of Argo Smart Routing
      properties:
        value:
          $ref: '#/components/schemas/schemas-value'
      required:
        - value
      type: object
    schemas-value:
      description: Enables Argo Smart Routing.
      enum:
        - 'on'
        - 'off'
      example: 'on'
      type: string
    tunnel_response_collection:
      allOf:
        - $ref: '#/components/schemas/api-response-collection'
        - properties:
            result:
              items:
                $ref: '#/components/schemas/argo-tunnel'
              type: array
          type: object
    argo-tunnel:
      properties:
        connections:
          description: Connections between cloudflared and the Cloudflare edge that are serving this tunnel.
          items:
            $ref: '#/components/schemas/argo-tunnel_components-schemas-connection'
          type: array
        created_at:
          description: 'Timestamps when the tunnel was created, formatted in RFC 3339.'
        deleted_at:
          description: 'If present, indicates tunnel was deleted at the given date (formatted in RFC 3339). If absent, tunnel has not been deleted.'
          example: '2009-11-10T23:00:00Z'
          format: date-time
          nullable: true
          type: string
        id:
          $ref: '#/components/schemas/tunnel_id'
        name:
          $ref: '#/components/schemas/tunnel_name'
      required:
        - id
        - name
        - created_at
        - connections
      type: object
    api-response-collection:
      anyOf:
        - $ref: '#/components/schemas/api-response-common'
        - properties:
            result:
              items: {}
              nullable: true
              type: array
            result_info:
              $ref: '#/components/schemas/result_info'
      type: object
    argo-tunnel_components-schemas-connection:
      properties:
        colo_name:
          description: Short ID for the colo this connection is connected to.
          example: DFW
          type: string
        is_pending_reconnect:
          description: 'Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting. If this field is true, the connection has disconnected but is still being tracked for these optimized reconnects. If false, the connection is still actively serving.'
          example: false
          type: boolean
        uuid:
          $ref: '#/components/schemas/uuid'
    tunnel_id:
      description: UUID of the tunnel.
      example: f70ff985-a4ef-4643-bbbc-4a0ed4fc8415
      maxLength: 36
      readOnly: true
      type: string
    tunnel_name:
      description: A user-friendly name chosen when the tunnel is created. Cannot be empty.
      example: blog
      type: string
    result_info:
      properties:
        count:
          description: Total number of results for the requested service
          example: 1
          type: number
        page:
          description: Current page within paginated list of results
          example: 1
          type: number
        per_page:
          description: Number of results per page of results
          example: 20
          type: number
        total_count:
          description: Total results available without any search parameters
          example: 2000
          type: number
      type: object
    uuid:
      description: UUID
      example: f174e90a-fafe-4643-bbbc-4a0ed4fc8415
      maxLength: 36
      readOnly: true
      type: string
    tunnel_response_single:
      allOf:
        - $ref: '#/components/schemas/api-response-single'
        - properties:
            result:
              type: object
          type: object
    argo-tunnel_components-schemas-empty_response:
      allOf:
        - $ref: '#/components/schemas/api-response-common'
        - properties:
            result:
              type: object
          type: object
  responses: {}
  securitySchemes:
    api_email:
      in: header
      name: X-Auth-Email
      type: apiKey
    api_key:
      in: header
      name: X-Auth-Key
      type: apiKey
    api_token:
      scheme: bearer
      type: http
    user_service_key:
      in: header
      name: X-Auth-User-Service-Key
      type: apiKey
  x-stackQL-resources:
    zones_analytics_latency:
      id: cloudflare.argo.zones_analytics_latency
      name: zones_analytics_latency
      title: Zones Analytics Latency
      methods:
        analytics_for_zone_argo_analytics_for_a_zone:
          operation:
            $ref: '#/paths/~1zones~1{zone_identifier}~1analytics~1latency/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.result
        _analytics_for_zone_argo_analytics_for_a_zone:
          operation:
            $ref: '#/paths/~1zones~1{zone_identifier}~1analytics~1latency/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        analytics_for_geolocation_argo_analytics_for_a_zone_at_different_po_ps:
          operation:
            $ref: '#/paths/~1zones~1{zone_identifier}~1analytics~1latency~1colos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.result
        _analytics_for_geolocation_argo_analytics_for_a_zone_at_different_po_ps:
          operation:
            $ref: '#/paths/~1zones~1{zone_identifier}~1analytics~1latency~1colos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    zones_smart_routing:
      id: cloudflare.argo.zones_smart_routing
      name: zones_smart_routing
      title: Zones Smart Routing
      methods:
        smart_routing_get_argo_smart_routing_setting:
          operation:
            $ref: '#/paths/~1zones~1{zone_identifier}~1argo~1smart_routing/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _smart_routing_get_argo_smart_routing_setting:
          operation:
            $ref: '#/paths/~1zones~1{zone_identifier}~1argo~1smart_routing/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        smart_routing_patch_argo_smart_routing_setting:
          operation:
            $ref: '#/paths/~1zones~1{zone_identifier}~1argo~1smart_routing/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/zones_smart_routing/methods/smart_routing_get_argo_smart_routing_setting'
        insert: []
        update: []
        delete: []
    accounts_tunnels:
      id: cloudflare.argo.accounts_tunnels
      name: accounts_tunnels
      title: Accounts Tunnels
      methods:
        tunnel_list_argo_tunnels:
          operation:
            $ref: '#/paths/~1accounts~1{account_identifier}~1tunnels/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.result
        _tunnel_list_argo_tunnels:
          operation:
            $ref: '#/paths/~1accounts~1{account_identifier}~1tunnels/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        tunnel_create_argo_tunnel:
          operation:
            $ref: '#/paths/~1accounts~1{account_identifier}~1tunnels/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        tunnel_delete_argo_tunnel:
          operation:
            $ref: '#/paths/~1accounts~1{account_identifier}~1tunnels~1{tunnel_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        tunnel_get_argo_tunnel:
          operation:
            $ref: '#/paths/~1accounts~1{account_identifier}~1tunnels~1{tunnel_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.result
        _tunnel_get_argo_tunnel:
          operation:
            $ref: '#/paths/~1accounts~1{account_identifier}~1tunnels~1{tunnel_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        tunnel_clean_up_argo_tunnel_connections:
          operation:
            $ref: '#/paths/~1accounts~1{account_identifier}~1tunnels~1{tunnel_id}~1connections/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/accounts_tunnels/methods/tunnel_list_argo_tunnels'
          - $ref: '#/components/x-stackQL-resources/accounts_tunnels/methods/tunnel_get_argo_tunnel'
        insert:
          - $ref: '#/components/x-stackQL-resources/accounts_tunnels/methods/tunnel_create_argo_tunnel'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/accounts_tunnels/methods/tunnel_delete_argo_tunnel'
paths:
  '/zones/{zone_identifier}/analytics/latency/colos':
    get:
      operationId: argo-analytics-for-geolocation-argo-analytics-for-a-zone-at-different-po-ps
      parameters:
        - in: path
          name: zone_identifier
          required: true
          schema:
            $ref: '#/components/schemas/common_components-schemas-identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas-response_single'
          description: Argo Analytics for a zone at different PoPs response
        4xx:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/schemas-response_single'
                  - $ref: '#/components/schemas/api-response-common-failure'
          description: Argo Analytics for a zone at different PoPs response failure
      security:
        - api_email: []
          api_key: []
        - api_token: []
      summary: Argo Analytics for a zone at different PoPs
      tags:
        - Argo Analytics for Geolocation
      x-cfPermissionsRequired:
        enum:
          - '#analytics:read'
      x-cfPlanAvailability:
        business: true
        enterprise: true
        free: true
        pro: true
  '/zones/{zone_identifier}/analytics/latency':
    get:
      operationId: argo-analytics-for-zone-argo-analytics-for-a-zone
      parameters:
        - in: path
          name: zone_identifier
          required: true
          schema:
            $ref: '#/components/schemas/common_components-schemas-identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas-response_single'
          description: Argo Analytics for a zone response
        4xx:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/schemas-response_single'
                  - $ref: '#/components/schemas/api-response-common-failure'
          description: Argo Analytics for a zone response failure
      security:
        - api_email: []
          api_key: []
        - api_token: []
      summary: Argo Analytics for a zone
      tags:
        - Argo Analytics for Zone
      x-cfPermissionsRequired:
        enum:
          - '#analytics:read'
      x-cfPlanAvailability:
        business: true
        enterprise: true
        free: true
        pro: true
  '/zones/{zone_identifier}/argo/smart_routing':
    get:
      operationId: argo-smart-routing-get-argo-smart-routing-setting
      parameters:
        - in: path
          name: zone_identifier
          required: true
          schema:
            $ref: '#/components/schemas/common_components-schemas-identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas-response_single'
          description: Get Argo Smart Routing setting response
        4xx:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/schemas-response_single'
                  - $ref: '#/components/schemas/api-response-common-failure'
          description: Get Argo Smart Routing setting response failure
      security:
        - api_email: []
          api_key: []
        - api_token: []
      summary: Get Argo Smart Routing setting
      tags:
        - Argo Smart Routing
      x-cfPermissionsRequired:
        enum:
          - '#zone_settings:read'
      x-cfPlanAvailability:
        business: true
        enterprise: true
        free: true
        pro: true
    patch:
      description: Updates enablement of Argo Smart Routing.
      operationId: argo-smart-routing-patch-argo-smart-routing-setting
      parameters:
        - in: path
          name: zone_identifier
          required: true
          schema:
            $ref: '#/components/schemas/common_components-schemas-identifier'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas-response_single'
          description: Patch Argo Smart Routing setting response
        4xx:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/schemas-response_single'
                  - $ref: '#/components/schemas/api-response-common-failure'
          description: Patch Argo Smart Routing setting response failure
      security:
        - api_email: []
          api_key: []
        - api_token: []
      summary: Patch Argo Smart Routing setting
      tags:
        - Argo Smart Routing
      x-cfPermissionsRequired:
        enum:
          - '#zone_settings:read'
          - '#zone_settings:edit'
      x-cfPlanAvailability:
        business: true
        enterprise: true
        free: true
        pro: true
  '/accounts/{account_identifier}/tunnels':
    get:
      deprecated: true
      description: 'List, search and filter an account''s Argo Tunnels.'
      operationId: argo-tunnel-list-argo-tunnels
      parameters:
        - in: path
          name: account_identifier
          required: true
          schema:
            $ref: '#/components/schemas/common_components-schemas-identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tunnel_response_collection'
          description: List Argo Tunnels response
        4xx:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/tunnel_response_collection'
                  - $ref: '#/components/schemas/api-response-common-failure'
          description: List Argo Tunnels response failure
      security:
        - api_email: []
          api_key: []
        - api_token: []
      summary: List Argo Tunnels
      tags:
        - Argo Tunnel
      x-cfDeprecation:
        $ref: '#/components/schemas/argo-tunnel/x-cfDeprecations/argo_tunnel_deprecation'
    post:
      deprecated: true
      description: Create an Argo Tunnel in an account.
      operationId: argo-tunnel-create-argo-tunnel
      parameters:
        - in: path
          name: account_identifier
          required: true
          schema:
            $ref: '#/components/schemas/common_components-schemas-identifier'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  $ref: '#/components/schemas/tunnel_name'
                tunnel_secret:
                  description: '32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel''s password. Anyone wishing to run the tunnel needs this password.'
                  example: AQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIAQIDBAUGBwg=
                  type: string
              required:
                - name
                - tunnel_secret
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tunnel_response_single'
          description: Create Argo Tunnel response
        4xx:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/tunnel_response_single'
                  - $ref: '#/components/schemas/api-response-common-failure'
          description: Create Argo Tunnel response failure
      security:
        - api_email: []
          api_key: []
        - api_token: []
      summary: Create Argo Tunnel
      tags:
        - Argo Tunnel
      x-cfDeprecation:
        $ref: '#/components/schemas/argo-tunnel/x-cfDeprecations/argo_tunnel_deprecation'
  '/accounts/{account_identifier}/tunnels/{tunnel_id}':
    delete:
      deprecated: true
      description: Delete an Argo Tunnel from an account.
      operationId: argo-tunnel-delete-argo-tunnel
      parameters:
        - in: path
          name: tunnel_id
          required: true
          schema:
            $ref: '#/components/schemas/tunnel_id'
        - in: path
          name: account_identifier
          required: true
          schema:
            $ref: '#/components/schemas/common_components-schemas-identifier'
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tunnel_response_single'
          description: Delete Argo Tunnel response
        4xx:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/tunnel_response_single'
                  - $ref: '#/components/schemas/api-response-common-failure'
          description: Delete Argo Tunnel response failure
      security:
        - api_email: []
          api_key: []
        - api_token: []
      summary: Delete Argo Tunnel
      tags:
        - Argo Tunnel
      x-cfDeprecation:
        $ref: '#/components/schemas/argo-tunnel/x-cfDeprecations/argo_tunnel_deprecation'
    get:
      deprecated: true
      description: Get the details of an Argo Tunnel from an account.
      operationId: argo-tunnel-get-argo-tunnel
      parameters:
        - in: path
          name: tunnel_id
          required: true
          schema:
            $ref: '#/components/schemas/tunnel_id'
        - in: path
          name: account_identifier
          required: true
          schema:
            $ref: '#/components/schemas/common_components-schemas-identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tunnel_response_single'
          description: Get Argo Tunnel response
        4xx:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/tunnel_response_single'
                  - $ref: '#/components/schemas/api-response-common-failure'
          description: Get Argo Tunnel response failure
      security:
        - api_email: []
          api_key: []
        - api_token: []
      summary: Get Argo Tunnel
      tags:
        - Argo Tunnel
      x-cfDeprecation:
        $ref: '#/components/schemas/argo-tunnel/x-cfDeprecations/argo_tunnel_deprecation'
  '/accounts/{account_identifier}/tunnels/{tunnel_id}/connections':
    delete:
      deprecated: true
      description: Remove stale connection resources from an Argo Tunnel.
      operationId: argo-tunnel-clean-up-argo-tunnel-connections
      parameters:
        - in: path
          name: tunnel_id
          required: true
          schema:
            $ref: '#/components/schemas/tunnel_id'
        - in: path
          name: account_identifier
          required: true
          schema:
            $ref: '#/components/schemas/common_components-schemas-identifier'
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/argo-tunnel_components-schemas-empty_response'
          description: Clean Up Argo Tunnel Connections response
        4xx:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/argo-tunnel_components-schemas-empty_response'
                  - $ref: '#/components/schemas/api-response-common-failure'
          description: Clean Up Argo Tunnel Connections response failure
      security:
        - api_email: []
          api_key: []
        - api_token: []
      summary: Clean Up Argo Tunnel Connections
      tags:
        - Argo Tunnel
      x-cfDeprecation:
        $ref: '#/components/schemas/argo-tunnel/x-cfDeprecations/argo_tunnel_deprecation'
