openapi: 3.0.0
servers:
- url: https://{organization}.snowflakecomputing.com/
  variables:
    organization:
      default: org-account
info:
  version: 0.0.1
  title: Snowflake Services API
  description: The Snowflake Services API is a REST API that you can use to access,
    update, and perform certain actions on Services resource in a Snowflake database.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/databases/{database}/schemas/{schema}/services:
    get:
      summary: List services
      tags:
      - service
      description: Lists the services under the database and schema.
      operationId: listServices
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/like
      - $ref: common.yaml#/components/parameters/startsWith
      - $ref: common.yaml#/components/parameters/showLimit
      - $ref: common.yaml#/components/parameters/fromName
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    post:
      summary: Create a service
      tags:
      - service
      description: Create a service, with standard create modifiers as query parameters.
        See the Service component definition for what is required to be provided in
        the request body.
      operationId: createService
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - name: createMode
        description: 'Query parameter allowing support for different modes of resource
          creation. Possible values include: - `errorIfExists`: Throws an error if
          you try to create a resource that already exists. - `ifNotExists`: Creates
          a new resource when an alter is requested for a non-existent resource.'
        in: query
        schema:
          type: string
          enum:
          - errorIfExists
          - ifNotExists
          example: errorIfExists
          default: errorIfExists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services:execute-job:
    post:
      summary: Execute a job service
      tags:
      - service
      description: Create and execute a job service. See the JobService component
        definition for what is required to be provided in the request body.
      operationId: executeJobService
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobService'
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}:
    get:
      description: Fetch a service.
      tags:
      - service
      operationId: fetchService
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    put:
      summary: Create a (or alter an existing) service.
      tags:
      - service
      description: Create a (or alter an existing) service. Even if the operation
        is just an alter, the full property set must be provided.
      operationId: createOrAlterService
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Successful request
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                $ref: common.yaml#/components/schemas/SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    delete:
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      summary: Delete a service
      tags:
      - service
      description: Delete a service with the given name. If ifExists is used, the
        operation will succeed even if the object does not exist. Otherwise, there
        will be a failure if the drop is unsuccessful.
      operationId: deleteService
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}/logs:
    get:
      description: Fetch the logs for a given service.
      tags:
      - service
      operationId: fetchServiceLogs
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - in: query
        name: instanceId
        description: ID of the service instance, starting with 0.
        required: true
        schema:
          type: integer
      - in: query
        name: containerName
        description: Container name as specified in the service specification file.
        required: true
        schema:
          type: string
      - in: query
        name: numLines
        schema:
          type: integer
        description: Number of trailing log lines to retrieve.
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: object
                properties:
                  system$get_service_logs:
                    type: string
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}/status:
    get:
      description: Fetch the status for a given service.
      tags:
      - service
      operationId: fetchServiceStatus
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - in: query
        name: timeout
        schema:
          type: integer
        description: Number of seconds to wait for the service to reach a steady state
          (for example, READY) before returning the status. If the service does not
          reach a steady state within the specified time, Snowflake returns the current
          state.
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: object
                properties:
                  system$get_service_status:
                    type: string
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}/containers:
    get:
      description: List all the containers of the service
      tags:
      - service
      operationId: listServiceContainers
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceContainer'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}/instances:
    get:
      description: List all the instances of the service
      tags:
      - service
      operationId: listServiceInstances
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceInstance'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}/roles:
    get:
      description: List all the service roles of the service
      tags:
      - service
      operationId: listServiceRoles
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceRole'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{service}/roles/{name}/grants-of:
    get:
      description: List all the grants of the service role
      tags:
      - service
      operationId: listServiceRoleGrantsOf
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: '#/components/parameters/service'
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GrantOf'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{service}/roles/{name}/grants:
    get:
      description: List all the grants given to the service role
      tags:
      - service
      operationId: listServiceRoleGrantsTo
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: '#/components/parameters/service'
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceRoleGrantTo'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}:resume:
    post:
      description: Resume a service.
      tags:
      - service
      operationId: resumeService
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}:suspend:
    post:
      description: Suspend a service.
      tags:
      - service
      operationId: suspendService
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}/endpoints:
    get:
      summary: List the endpoints in a service.
      description: Lists the endpoints in a Snowpark Container Services service (or
        a job service).
      tags:
      - service
      operationId: showServiceEndpoints
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceEndpoint'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
components:
  parameters:
    service:
      name: service
      description: Name of the service that contains the service role.
      required: true
      in: path
      schema:
        $ref: ./common.yaml#/components/schemas/Identifier
    database:
      name: database
      description: Identifier (i.e. name) for the database to which the resource belongs.
        You can use the `/api/v2/databases` GET request to get a list of available
        databases.
      required: true
      in: path
      schema:
        example: TEST_DB
        $ref: ./common.yaml#/components/schemas/Identifier
    schema:
      name: schema
      description: Identifier (i.e. name) for the schema to which the resource belongs.
        You can use the `/api/v2/databases/{database}/schemas` GET request to get
        a list of available schemas for the specified database.
      required: true
      in: path
      schema:
        example: TEST_SCHEMA
        $ref: ./common.yaml#/components/schemas/Identifier
    application:
      name: application
      description: Identifier (i.e. name) for the application to which the resource
        belongs. You can use the `/api/v2/applications/{application}` GET request
        to get a list of available applications.
      required: true
      in: path
      schema:
        example: TEST_APPLICATION
        $ref: ./common.yaml#/components/schemas/Identifier
    name:
      name: name
      description: Identifier (i.e. name) for the resource.
      required: true
      in: path
      schema:
        example: TEST_NAME
        $ref: ./common.yaml#/components/schemas/Identifier
    nameWithArgs:
      name: nameWithArgs
      description: Function's name with Args
      required: true
      in: path
      schema:
        type: string
        example: foo(a number, b number)
    createMode:
      name: createMode
      description: 'Query parameter allowing support for different modes of resource
        creation. Possible values include:

        - `errorIfExists`: Throws an error if you try to create a resource that already
        exists.

        - `orReplace`: Automatically replaces the existing resource with the current
        one.

        - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent
        resource.'
      in: query
      schema:
        type: string
        enum:
        - errorIfExists
        - orReplace
        - ifNotExists
        example: ifNotExists
        default: errorIfExists
    mode:
      name: mode
      description: 'Query parameter determines whether the revoke operation succeeds
        or fails for the privileges, based on the whether the privileges had been
        re-granted to another role.

        - restrict: If the privilege being revoked has been re-granted to another
        role, the REVOKE command fails.

        - cascade: If the privilege being revoked has been re-granted, the REVOKE
        command recursively revokes these dependent grants. If the same privilege
        on an object has been granted to the target role by a different grantor (parallel
        grant), that grant is not affected and the target role retains the privilege.'
      in: query
      schema:
        type: string
        enum:
        - restrict
        - cascade
        example: restrict
    ifExists:
      name: ifExists
      description: 'Query parameter that specifies how to handle the request for a
        resource that does not exist:

        - `true`: The endpoint does not throw an error if the resource does not exist.
        It returns a 200 success response, but does not take any action on the resource.

        - `false`: The endpoint throws an error if the resource doesn''t exist.'
      in: query
      schema:
        type: boolean
        example: true
        default: false
    like:
      name: like
      description: Query parameter to filter the command output by resource name.
        Uses case-insensitive pattern matching, with support for SQL wildcard characters.
      in: query
      schema:
        type: string
        example: test_%
    pattern:
      name: pattern
      description: A query parameter that filters the command output by a regular
        expression pattern.
      in: query
      schema:
        type: string
        example: .*data_0.*
    startsWith:
      name: startsWith
      description: Query parameter to filter the command output based on the string
        of characters that appear at the beginning of the object name. Uses case-sensitive
        pattern matching.
      in: query
      schema:
        type: string
        example: test
    rootOnly:
      name: rootOnly
      description: Query parameter to filter the command output to return only root
        resources (resources with no predecessors).
      in: query
      schema:
        type: boolean
        example: false
        default: false
    showLimit:
      name: showLimit
      description: Query parameter to limit the maximum number of rows returned by
        a command.
      in: query
      schema:
        type: integer
        example: 10
        minimum: 1
        maximum: 10000
    fromName:
      name: fromName
      description: Query parameter to enable fetching rows only following the first
        row whose object name matches the specified string. Case-sensitive and does
        not have to be the full name.
      in: query
      schema:
        type: string
        example: from_test
    copyGrants:
      name: copyGrants
      description: Query parameter to enable copy grants when creating the object.
      in: query
      schema:
        type: boolean
        example: false
        default: false
    asyncExec:
      name: asyncExec
      in: query
      description: Asynchronous execution enable/disable. Default is disable.
      schema:
        type: boolean
        default: false
    sessionId:
      name: sessionId
      description: Unique ID for the current session.
      required: true
      in: path
      schema:
        type: integer
        format: uuid
        example: 524514326772799
    content-type:
      name: Content-Type
      description: Type of content for the resource. Currently supports `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    accept:
      name: Accept
      description: Type of data format accepted by the resource. Currently supports
        `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    x-snowflake-authorization-token-type:
      name: X-Snowflake-Authorization-Token-Type
      description: Type of the Snowflake authorization token. Currently, keypair-jwt
        (`KEYPAIR_JWT`) and OAuth tokens are supported.
      in: header
      schema:
        type: string
        enum:
        - KEYPAIR_JWT
        - OAUTH
    x-sfc-session:
      name: X-Sfc-Session
      description: Token for the current Snowflake session.
      in: header
      required: false
      schema:
        type: string
        description: Snowflake session token.
        example: ver:3-hint:1000-ABCD=
  schemas:
    ServiceSpecInlineText:
      description: Specifies service specification with inline text.
      allOf:
      - $ref: '#/components/schemas/ServiceSpec'
      properties:
        spec_text:
          type: string
          description: Specifies service specification. You can use a pair of dollar
            signs ($$) to delimit the beginning and ending of the specification string.
      required:
      - spec_text
    ServiceSpecStageFile:
      description: Specifies service specification with a stage file.
      allOf:
      - $ref: '#/components/schemas/ServiceSpec'
      properties:
        stage:
          type: string
          description: Specifies the Snowflake internal stage where the specification
            file is stored; for example, @tutorial_stage.
        spec_file:
          type: string
          description: Specifies the path to the service specification file on the
            stage; for example, 'some-dir/echo_spec.yaml'.
      required:
      - stage
      - spec_file
    ServiceSpec:
      type: object
      description: Specifies service specification.
      properties:
        spec_type:
          type: string
          description: Type of the service specification, can be `from_file` or `from_inline`.
      discriminator:
        propertyName: spec_type
        mapping:
          from_file: ServiceSpecStageFile
          from_inline: ServiceSpecInlineText
      writeOnly: true
    Service:
      allOf:
      - $ref: '#/components/schemas/JobService'
      - type: object
        description: A Snowflake service object.
        properties:
          auto_resume:
            type: boolean
            description: Specifies whether to automatically resume a service when
              a service function or ingress is called.
          current_instances:
            type: integer
            description: The current number of instances for the service.
            readOnly: true
          target_instances:
            type: integer
            description: The target number of service instances that should be running
              as determined by Snowflake.
            readOnly: true
          min_ready_instances:
            type: integer
            description: The minimum number of ready service instances to declare
              the service as READY.
          min_instances:
            type: integer
            description: Specifies the minimum number of service instances to run.
          max_instances:
            type: integer
            description: Specifies the maximum number of service instances to run.
          database_name:
            $ref: ./common.yaml#/components/schemas/Identifier
            description: The name of the parent database for the service.
            readOnly: true
          schema_name:
            $ref: ./common.yaml#/components/schemas/Identifier
            description: The name of the parent schema for the service.
            readOnly: true
          owner:
            type: string
            description: Role that owns the service.
            readOnly: true
          dns_name:
            type: string
            description: Snowflake-assiged DNS name of the service. The DNS name enables
              service-to-service communications.
            readOnly: true
          created_on:
            type: string
            description: Timestamp when the service was created.
            format: date-time
            readOnly: true
          updated_on:
            type: string
            description: Timestamp when the service was last updated.
            format: date-time
            readOnly: true
          resumed_on:
            type: string
            description: Timestamp when the service was last resumed.
            format: date-time
            readOnly: true
          suspended_on:
            type: string
            description: Timestamp when the service was last suspended.
            format: date-time
            readOnly: true
          auto_suspend_secs:
            type: integer
            description: Number of seconds of inactivity after which the service will
              be automatically suspended. The default value is 0 which represents
              the service will not be automatically suspended.
            format: int64
          owner_role_type:
            type: string
            description: The role type of the service owner.
            readOnly: true
          is_job:
            type: boolean
            description: True if the service is a job service; false otherwise.
            readOnly: true
          spec_digest:
            type: string
            description: The unique and immutable identifier representing the service
              spec content.
            readOnly: true
          is_upgrading:
            type: boolean
            description: TRUE, if Snowflake is in the process of upgrading the service.
            readOnly: true
          managing_object_domain:
            type: string
            description: The domain of the managing object (for example, the domain
              of the notebook that manages the service). NULL if the service is not
              managed by a Snowflake entity.
            readOnly: true
          managing_object_name:
            type: string
            description: The name of the managing object (for example, the name of
              the notebook that manages the service). NULL if the service is not managed
              by a Snowflake entity.
            readOnly: true
        example:
          min_ready_instances: 1
          min_instances: 2
          max_instances: 5
          database_name: testdb
          schema_name: testschema
          owner: SYSADMIN
          is_job: false
    JobService:
      type: object
      description: A Snowflake job service object.
      writeOnly: true
      properties:
        name:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: String that specifies the identifier (that is, the name) for
            the service.
        status:
          type: string
          description: The current status of the service.
        compute_pool:
          type: string
          description: Specifies the name of the compute pool in your account on which
            to run the service.
        spec:
          $ref: '#/components/schemas/ServiceSpec'
          description: Specifies service specification.
        external_access_integrations:
          type: array
          description: Specifies the names of the external access integrations that
            allow your service to access external sites.
          items:
            type: string
        query_warehouse:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: Warehouse to use if a service container connects to Snowflake
            to execute a query but does not explicitly specify a warehouse to use.
        comment:
          type: string
          description: Specifies a comment for the service.
        is_async_job:
          type: boolean
          description: True if the service is an async job service; false otherwise.
      required:
      - name
      - compute_pool
      - spec
      example:
        name: service_name
        compute_pool: compute_pool_name
        spec:
          spec_type: from_file
          stage: '@stage_name'
          spec_file: spec_file.yaml
    ServiceEndpoint:
      type: object
      properties:
        name:
          type: string
          description: User-friendly endpoint name that represents the corresponding
            port.
        port:
          type: integer
          description: The network port the service is listening on. NULL, when portRange
            is specified.
        portRange:
          type: string
          description: The network port range the service is listening on. NULL, when
            port is specified.
        protocol:
          type: string
          description: Supported network protocol (TCP, HTTP, or HTTPS).
          default: HTTP
        is_public:
          type: boolean
          description: True, if the endpoint is public, accessible from internet.
          default: false
        ingress_url:
          type: string
          description: Endpoint URL accessible from the internet.
          readOnly: true
      example:
        name: endpoint
        port: 8080
        protocol: HTTPS
        is_public: true
        ingress_url: abcd-org-acc.snowflakecomputing.app
    ServiceContainer:
      type: object
      properties:
        database_name:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: Database in which the service is created.
          readOnly: true
        schema_name:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: Schema in which the service is created.
          readOnly: true
        service_name:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: The name of the service.
          readOnly: true
        service_status:
          type: string
          description: The current status of the service.
          readOnly: true
        instance_id:
          type: string
          description: ID of the service instance (this is the index of the service
            instance starting from 0).
          readOnly: true
        instance_status:
          type: string
          description: The current status of the service instance.
          readOnly: true
        container_name:
          type: string
          description: Name of the container.
          readOnly: true
        status:
          type: string
          description: Service container status.
          readOnly: true
        message:
          type: string
          description: Additional clarification about status.
          readOnly: true
        image_name:
          type: string
          description: Image name used to create the service container.
          readOnly: true
        image_digest:
          type: string
          description: The unique and immutable identifier representing the image
            content.
          readOnly: true
        restart_count:
          type: integer
          description: Number of times Snowflake restarted the service.
          readOnly: true
        start_time:
          type: string
          description: Date and time when the container started.
          readOnly: true
      example:
        database_name: testdb
        schema_name: testschema
        service_name: myservice
        instance_id: '0'
        container_name: main
        status: PENDING
        message: Pending scheduling.
        image_name: /db/schema/repo/image:1.0
        image_digest: abcdefd
        restart_count: 0
        start_time: 2023-01-01 00:00:00+00:00
    ServiceInstance:
      type: object
      properties:
        database_name:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: Database in which the service is created.
          readOnly: true
        schema_name:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: Schema in which the service is created.
          readOnly: true
        service_name:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: The name of the service.
          readOnly: true
        service_status:
          type: string
          description: The current status of the service.
          readOnly: true
        instance_id:
          type: string
          description: ID of the service instance (this is the index of the service
            instance starting from 0).
          readOnly: true
        status:
          type: string
          description: The current status of the service instance.
          readOnly: true
        spec_digest:
          type: string
          description: The unique and immutable identifier that represents the service
            specification content.
          readOnly: true
        creation_time:
          type: string
          description: The time when Snowflake started creating the service instance.
          readOnly: true
        start_time:
          type: string
          description: The time when Snowflake acknowledged the service instance is
            running on a node.
          readOnly: true
      example:
        database_name: testdb
        schema_name: testschema
        service_name: myservice
        instance_id: '0'
        status: PENDING
        spec_digest: abcdefg
        creation_time: 2023-01-01 00:00:00+00:00
        start_time: 2023-01-01 00:00:00+00:00
    ServiceRole:
      type: object
      properties:
        created_on:
          type: string
          format: date-time
          description: Date and time when the service role was created
          readOnly: true
        name:
          type: string
          description: Service role name
          readOnly: true
        comment:
          type: string
          description: Comment, if any, for the service role
          readOnly: true
      example:
        created_on: 2023-01-01 00:00:00+00:00
        name: testrole
        comment: This is a service role.
    GrantOf:
      type: object
      properties:
        created_on:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the grant was created
        role:
          type: string
          readOnly: true
          description: The name of the service role
        granted_to:
          type: string
          readOnly: true
          description: The type of the grantee, can be USER or ROLE
        grantee_name:
          type: string
          readOnly: true
          description: The name of the grantee
        granted_by:
          type: string
          readOnly: true
          description: The name of role that granted the service role to the grantee
      example:
        created_on: 2023-01-01 00:00:00+00:00
        role: db.schema.service.svc_role
        granted_to: role
        grantee_name: test_role
        granted_by: sysadmin
    ServiceRoleGrantTo:
      type: object
      properties:
        created_on:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the grant was created
        privilege:
          type: string
          readOnly: true
          description: The name of the privilege
        granted_on:
          type: string
          readOnly: true
          description: The type of of the securable
        name:
          type: string
          readOnly: true
          description: The name of the securable
        granted_to:
          type: string
          readOnly: true
          description: The type of the grantee
        grantee_name:
          type: string
          readOnly: true
          description: The name of the grantee
      example:
        created_on: 2023-01-01 00:00:00+00:00
        privilege: usage
        granted_on: service_endpoint
        name: db.schema.service!svc_role
        granted_to: service role
        grantee_name: all_endpoints_usage
    description: If the identifier contains spaces or special characters, the entire
      string must be enclosed in double quotes. Identifiers enclosed in double quotes
      are also case-sensitive.
    Identifier:
      type: string
      description: A Snowflake object identifier.
      pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
      example: TEST_NAME
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message returned by the server
        code:
          type: string
          description: Error code.
        error_code:
          type: string
          description: Error code, same as `code` above. This property has been deprecated
            and will be removed in a future release, but is temporarily supported
            for for short-term backward compatibility.
        request_id:
          type: string
          description: Unique request ID.
      example:
        message: Compilation error!
        error_code: '390189'
        request_id: 01afef9d-0607-0550-0001-dd270c3902d7
    SuccessResponse:
      type: object
      description: Schema for all the success responses returned by the server.
      properties:
        status:
          type: string
          description: Message returned by the server.
      example:
        status: Request successfully completed
    SuccessAcceptedResponse:
      type: object
      description: Schema for a request in progress response returned by the server.
      properties:
        code:
          type: string
          description: Message code returned by the server.
        message:
          type: string
          description: Message returned by the server
        resultHandler:
          type: string
          description: Opaque result ID used for checking for request completion through
            one or more subsequent completion check operations.
      example:
        code: '392604'
        message: Request execution in progress. Use the provided location header or
          result handler ID to perform query monitoring and management.
    PointOfTime:
      type: object
      description: Point of time.
      required:
      - point_of_time_type
      properties:
        point_of_time_type:
          description: 'Type of the point of time. Possible values include:

            - `timestamp`: Exact time using the standard timezone format. Example:
            `2023-09-15 10:59:43`. - `offset`: Interval relative to ''now.'' Example:
            `1 day`. - `statement`: ID of a query statement to use as the reference
            point for <a href=https://docs.snowflake.com/en/sql-reference/sql/create-clone#time-travel-parameters>Time
            Travel</a>.

            For more information, see https://docs.snowflake.com/en/sql-reference/data-types-datetime.'
          type: string
          examples:
            timestamp:
              value: '2023-09-15 10:59:43'
            offset:
              value: 20 ms
        reference:
          type: string
          description: Relation to the point of time. Currently, the API supports
            `at` and `before`.
      discriminator:
        propertyName: point_of_time_type
        mapping:
          timestamp: PointOfTimeTimestamp
          offset: PointOfTimeOffset
          statement: PointOfTimeStatement
    PointOfTimeTimestamp:
      description: Point of time identified by a timestamp.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        timestamp:
          type: string
          description: Timestamp of the point of time.
    PointOfTimeOffset:
      description: Point of time identified by an offset in reference to the current
        time, such as `10 min`.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      examples:
        month:
          value: 2 months
        milliseconds:
          value: 20 ms
      properties:
        offset:
          type: string
          description: 'Offset from the point of time. Example: `1 year`'
    PointOfTimeStatement:
      description: Point of time indicating when a statement was executed.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        statement:
          type: string
          description: Statement of the point of time.
    Parameter:
      description: Snowflake parameter defined at the system, account, user, session,
        or object level.
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Parameter name.
        value:
          type: string
          description: Parameter value.
        defaultValue:
          type: string
          description: Default parameter value.
        dataType:
          type: string
          description: Data type of the parameter value. Either BOOLEAN, NUMBER, FLOAT,
            or STRING.
        level:
          type: string
          description: Level at which parameter is defined.
        description:
          type: string
          description: Parameter description.
      example:
        name: SAMPLE_SNOWAPI_PARAM
        value: true
        defaultValue: false
        dataType: boolean
        level: ACCOUNT
        description: Sample snowflake parameter.
    TargetLag:
      type: object
      description: Specifies the schedule for periodically refreshing the dynamic
        table.
      properties:
        type:
          description: Type of lag, can be either USER_DEFINED or DOWNSTREAM.
          type: string
      discriminator:
        propertyName: type
        mapping:
          USER_DEFINED: UserDefinedLag
          DOWNSTREAM: DownstreamLag
    UserDefinedLag:
      description: User-defined target lag.
      allOf:
      - $ref: '#/components/schemas/TargetLag'
      properties:
        seconds:
          type: integer
          format: int64
          description: Target lag time in seconds.
      example:
        seconds: 3600
      required:
      - seconds
    DownstreamLag:
      description: Downstream target lag
      allOf:
      - $ref: '#/components/schemas/TargetLag'
  securitySchemes:
    KeyPair:
      $ref: common.yaml#/components/securitySchemes/KeyPair
    ExternalOAuth:
      $ref: common.yaml#/components/securitySchemes/ExternalOAuth
    SnowflakeOAuth:
      $ref: common.yaml#/components/securitySchemes/SnowflakeOAuth
  headers:
    X-Snowflake-Request-ID:
      description: Unique ID of the API request.
      schema:
        type: string
        format: uuid
    Link:
      description: Links to the page of results (e.g. the first page, the last page,
        etc.). The header can include multiple 'url' entries with different 'rel'
        attribute values that specify the page to return ('first', 'next', 'prev',
        and 'last').
      schema:
        type: string
        example: </api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=0>; rel="first",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=1>;
          rel="next",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=9>;
          rel="last"
  responses:
    200SuccessResponse:
      description: Successful request.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    201SuccessCreatedResponse:
      description: Successfully created a new resource on the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    202SuccessAcceptedResponse:
      headers:
        Location:
          schema:
            type: string
            description: Relative path for checking request status or getting the
              result, if available.
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      description: Successfully accepted the request, but it is not completed yet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessAcceptedResponse'
    400BadRequest:
      description: Bad Request. The request payload is invalid or malformed. This
        happens if the application didn't send the correct request payload. The response
        body may include the error code and message indicating the actual cause. The
        application must reconstruct the request body for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    401Unauthorized:
      description: Unauthorized. The request is not authorized. This happens if the
        attached access token is invalid or missing. The response body may include
        the error code and message indicating the actual cause, e.g., expired, invalid
        token. The application must obtain a new access token for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    403Forbidden:
      description: Forbidden. The request is forbidden. This can also happen if the
        request is made even if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: Not Found. The request endpoint is not valid. This happens if the
        API endpoint does not exist, or if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    405MethodNotAllowed:
      description: Method Not Allowed. The request method doesn't match the supported
        API. This happens, for example, if the application calls the API with GET
        method but the endpoint accepts only POST.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    408RequestTimeout:
      description: Request Timeout. This indicates that the request from the client
        timed out and was not completed by the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    409Conflict:
      description: Conflict. The requested operation could not be performed due to
        a conflicting state that could not be resolved. This usually happens when
        a CREATE request was performed when there is a pre-existing resource with
        the same name, and also without one of the options orReplace/ifNotExists.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    410Gone:
      description: Gone. This error is primarily intended to assist the task of web
        maintenance by notifying the recipient that the resource is intentionally
        unavailable.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    415UnsupportedMediaType:
      description: The request header Content-Type includes an unsupported media type.
        The API supports application/json only. If none specified, the request payload
        is taken as JSON, but if any other media type is specified, this error is
        returned.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    429LimitExceeded:
      description: Limit Exceeded. The number of requests hit the rate limit. The
        application must slow down the frequency of hitting the API endpoints.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500InternalServerError:
      description: Internal Server Error. The server hit an unrecoverable system error.
        The response body may include the error code and message for further guidance.
        The application owner may need to reach out the customer support.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    503ServiceUnavailable:
      description: Service Unavailable. The request was not processed due to server
        side timeouts. The application may retry with backoff. The jittered backoff
        is recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    504GatewayTimeout:
      description: Gateway Timeout. The request was not processed due to server side
        timeouts. The application may retry with backoff. The jittered backoff is
        recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  security:
  - KeyPair: []
  - ExternalOAuth: []
  - SnowflakeOAuth: []
  x-stackQL-resources:
    services:
      methods:
        list_services:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        execute_job_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services:execute-job/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        fetch_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_or_alter_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{name}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        resume_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{name}:resume/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        suspend_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{name}:suspend/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/services/methods/list_services'
        - $ref: '#/components/x-stackQL-resources/services/methods/fetch_service'
        insert:
        - $ref: '#/components/x-stackQL-resources/services/methods/create_service'
        update: []
        delete:
        - $ref: '#/components/x-stackQL-resources/services/methods/delete_service'
        replace:
        - $ref: '#/components/x-stackQL-resources/services/methods/create_or_alter_service'
    logs:
      methods:
        fetch_service_logs:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{name}~1logs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/logs/methods/fetch_service_logs'
        insert: []
        update: []
        delete: []
        replace: []
    status:
      methods:
        fetch_service_status:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{name}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/status/methods/fetch_service_status'
        insert: []
        update: []
        delete: []
        replace: []
    containers:
      methods:
        list_service_containers:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{name}~1containers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/containers/methods/list_service_containers'
        insert: []
        update: []
        delete: []
        replace: []
    instances:
      methods:
        list_service_instances:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{name}~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/instances/methods/list_service_instances'
        insert: []
        update: []
        delete: []
        replace: []
    roles:
      methods:
        list_service_roles:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{name}~1roles/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/roles/methods/list_service_roles'
        insert: []
        update: []
        delete: []
        replace: []
    grants_of:
      methods:
        list_service_role_grants_of:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{service}~1roles~1{name}~1grants-of/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/grants_of/methods/list_service_role_grants_of'
        insert: []
        update: []
        delete: []
        replace: []
    grants:
      methods:
        list_service_role_grants_to:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{service}~1roles~1{name}~1grants/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/grants/methods/list_service_role_grants_to'
        insert: []
        update: []
        delete: []
        replace: []
    endpoints:
      methods:
        show_service_endpoints:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1services~1{name}~1endpoints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/endpoints/methods/show_service_endpoints'
        insert: []
        update: []
        delete: []
        replace: []
security:
- KeyPair: []
- ExternalOAuth: []
- SnowflakeOAuth: []
