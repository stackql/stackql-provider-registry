openapi: 3.0.0
servers:
- url: https://{endpoint}.snowflakecomputing.com
  description: Multi-tenant Snowflake endpoint
  variables:
    endpoint:
      default: orgid-acctid
      description: Organization and Account Name
info:
  version: 0.0.1
  title: Snowflake Table API
  description: The Snowflake Table API is a REST API that you can use to access, update,
    and perform certain actions on Tables resource in a Snowflake database.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables:
    get:
      summary: List tables
      tags:
      - table
      description: Lists the tables under the database and schema.
      operationId: listTables
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/like'
      - $ref: '#/components/parameters/startsWith'
      - $ref: '#/components/parameters/showLimit'
      - $ref: '#/components/parameters/fromName'
      - name: history
        description: Optionally includes dropped tables that have not yet been purged.
        in: query
        required: false
        schema:
          type: boolean
      - name: deep
        description: Optionally includes dependency information of the table.
        in: query
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: '#/components/headers/X-Snowflake-Request-ID'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
    post:
      summary: Create a table (clone and undrop are separate subresources)
      tags:
      - table
      description: Create a table.
      operationId: createTable
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/createMode'
      - $ref: '#/components/parameters/copyGrants'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:as_select:
    post:
      deprecated: true
      summary: Create a table using the result of the specified select query
      tags:
      - table
      description: Create a table as select.
      operationId: createTableAsSelectDeprecated
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/createMode'
      - $ref: '#/components/parameters/copyGrants'
      - name: query
        in: query
        required: true
        description: The SQL select query to run to set up the table values (and possibly
          columns).
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables:as-select:
    post:
      summary: Create a table using the result of the specified select query
      tags:
      - table
      description: Create a table as select.
      operationId: createTableAsSelect
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/createMode'
      - $ref: '#/components/parameters/copyGrants'
      - name: query
        in: query
        required: true
        description: The SQL select query to run to set up the table values (and possibly
          columns).
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableAsSelect'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:using_template:
    post:
      deprecated: true
      summary: Create a table using the templates specified in staged files
      tags:
      - table
      description: Create a table using template.
      operationId: createTableUsingTemplateDeprecated
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/createMode'
      - $ref: '#/components/parameters/copyGrants'
      - name: query
        description: The SQL query that uses INFER_SCHEMA on staged files to set the
          column definitions for the new table.
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables:using-template:
    post:
      summary: Create a table using the templates specified in staged files
      tags:
      - table
      description: Create a table using template.
      operationId: createTableUsingTemplate
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/createMode'
      - $ref: '#/components/parameters/copyGrants'
      - name: query
        description: The SQL query that uses INFER_SCHEMA on staged files to set the
          column definitions for the new table.
        in: query
        required: true
        schema:
          type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableUsingTemplate'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:
    get:
      summary: Fetch a table.
      tags:
      - table
      description: Fetch a Table using the describe command output.
      operationId: fetchTable
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: '#/components/headers/X-Snowflake-Request-ID'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
    put:
      summary: Create a (or alter an existing) table.
      tags:
      - table
      description: Create a (or alter an existing) table. Even if the operation is
        just an alter, the full property set must be provided.
      operationId: createOrAlterTable
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
    delete:
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/ifExists'
      summary: Delete a table
      tags:
      - table
      description: Delete a table with the given name.
      operationId: deleteTable
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:clone:
    post:
      summary: Clone table
      tags:
      - table
      description: Create a new table by cloning from the specified resource
      operationId: cloneTable
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/createMode'
      - $ref: '#/components/parameters/copyGrants'
      - name: targetDatabase
        in: query
        description: Database of the newly created table. Defaults to the source table's
          database.
        schema:
          $ref: '#/components/schemas/Identifier'
      - name: targetSchema
        in: query
        description: Schema of the newly created table. Defaults to the source table's
          schema.
        schema:
          $ref: '#/components/schemas/Identifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableClone'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:create_like:
    post:
      deprecated: true
      summary: Create a table like this existing one
      tags:
      - table
      description: Create a new table like the specified resource, but empty
      operationId: createTableLikeDeprecated
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/createMode'
      - $ref: '#/components/parameters/copyGrants'
      - name: newTableName
        description: The name of the table to be created.
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:create-like:
    post:
      summary: Create a table like this existing one
      tags:
      - table
      description: Create a new table like the specified resource, but empty
      operationId: createTableLike
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/createMode'
      - $ref: '#/components/parameters/copyGrants'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableLike'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:undrop:
    post:
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      summary: Undrop a table
      tags:
      - table
      description: Undrop specified table
      operationId: undropTable
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:suspend_recluster:
    post:
      deprecated: true
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/ifExists'
      summary: Suspend recluster of a table
      tags:
      - table
      description: Suspend recluster of a table
      operationId: suspendReclusterTableDeprecated
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:suspend-recluster:
    post:
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/ifExists'
      summary: Suspend recluster of a table
      tags:
      - table
      description: Suspend recluster of a table
      operationId: suspendReclusterTable
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:resume_recluster:
    post:
      deprecated: true
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/ifExists'
      summary: Resume recluster of a table
      tags:
      - table
      description: Resume recluster of a table
      operationId: resumeReclusterTableDeprecated
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:resume-recluster:
    post:
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/ifExists'
      summary: Resume recluster of a table
      tags:
      - table
      description: Resume recluster of a table
      operationId: resumeReclusterTable
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:swapwith:
    post:
      deprecated: true
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/ifExists'
      - name: targetTableName
        description: The fully-specified name of the target table to be swapped with.
        in: query
        required: true
        schema:
          type: string
      summary: Swap with another table
      tags:
      - table
      description: Swap with another table
      operationId: swapWithTableDeprecated
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/tables/{name}:swap-with:
    post:
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/ifExists'
      - name: targetName
        description: The name of the target table to be swapped with.
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Identifier'
      - name: targetDatabase
        in: query
        description: Database of the target table. Defaults to the source table's
          database.
        schema:
          $ref: '#/components/schemas/Identifier'
      - name: targetSchema
        in: query
        description: Schema of the target table. Defaults to the source table's schema.
        schema:
          $ref: '#/components/schemas/Identifier'
      summary: Swap with another table
      tags:
      - table
      description: Swap with another table
      operationId: swapWithTable
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
components:
  schemas:
    Table:
      type: object
      description: A Snowflake table
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        kind:
          type: string
          enum:
          - PERMANENT
          - TRANSIENT
          - TEMPORARY
          - ''
          - transient
          - temporary
          x-enum-varnames:
          - PERMANENT
          - TRANSIENT
          - TEMPORARY
          - DEPRECATED_PERMANENT
          - DEPRECATED_TRANSIENT
          - DEPRECATED_TEMPORARY
          default: PERMANENT
          description: Table type - permanent, transient, or temporary
        cluster_by:
          type: array
          description: Specifies one or more columns or column expressions in the
            table as the clustering key
          items:
            type: string
        enable_schema_evolution:
          type: boolean
          description: Table has schema evolution enabled or disabled
        change_tracking:
          type: boolean
          description: Change tracking is enabled or disabled
        data_retention_time_in_days:
          type: integer
          description: Specifies the retention period for the table so that Time Travel
            actions SELECT, CLONE, UNDROP can be performed on historical data in the
            table
        max_data_extension_time_in_days:
          type: integer
          description: Specifies the retention period for the table so that Time Travel
            actions SELECT, CLONE, UNDROP can be performed on historical data in the
            table
        default_ddl_collation:
          type: string
          description: Specifies a default collation specification for the columns
            in the table, including columns added to the table in the future
        columns:
          type: array
          items:
            $ref: '#/components/schemas/TableColumn'
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        comment:
          type: string
          description: Comment for the table
        created_on:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the table was created.
        database_name:
          type: string
          readOnly: true
          description: Database in which the table is stored
        schema_name:
          type: string
          readOnly: true
          description: Schema in which the table is stored
        rows:
          type: integer
          format: int64
          readOnly: true
          description: Number of rows in the table. Returns NULL for external tables.
        bytes:
          type: integer
          format: int64
          readOnly: true
          description: Number of bytes that will be scanned if the entire table is
            scanned in a query. Note that this number may be different than the number
            of actual physical bytes stored on-disk for the table
        owner:
          type: string
          readOnly: true
          description: Role that owns the table
        dropped_on:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the table was dropped
        automatic_clustering:
          type: boolean
          readOnly: true
          description: If Automatic Clustering is enabled for your account, specifies
            whether it is explicitly enabled or disabled for the table.
        search_optimization:
          type: boolean
          readOnly: true
          description: If ON, the table has the search optimization service enabled
        search_optimization_progress:
          type: integer
          format: int64
          readOnly: true
          description: Percentage of the table that has been optimized for search.
        search_optimization_bytes:
          type: integer
          format: int64
          readOnly: true
          description: Number of additional bytes of storage that the search optimization
            service consumes for this table
        owner_role_type:
          type: string
          readOnly: true
          description: The type of role that owns the object.
        budget:
          type: string
          readOnly: true
          description: Name of the budget if the object is monitored by a budget
        table_type:
          type: string
          enum:
          - NORMAL
          - DYNAMIC
          - EXTERNAL
          - EVENT
          - HYBRID
          - ICEBERG
          - IMMUTABLE
          readOnly: true
          description: Type of the table
      required:
      - name
    TableColumn:
      type: object
      description: A column in the table
      properties:
        name:
          type: string
          description: Column name
        datatype:
          type: string
          description: The data type for the column
        nullable:
          type: boolean
          default: true
          description: Specifies that the column does allow NULL values or not.
        collate:
          type: string
          description: Specifies the collation to use for column operations such as
            string comparison
        default:
          type: string
          description: Specifies whether a default value is automatically inserted
            in the column if a value is not explicitly specified via an INSERT or
            CREATE TABLE AS SELECT statement
        autoincrement:
          type: boolean
        autoincrement_start:
          type: integer
          description: The default value for the column starts with the specified
            number
        autoincrement_increment:
          type: integer
          description: Each successive value for the column automatically increments
            by the specified amount
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        comment:
          type: string
          description: Specifies a comment for the column
      required:
      - name
      - datatype
    Constraint:
      type: object
      description: Constraints define integrity and consistency rules for data stored
        in tables.
      properties:
        name:
          type: string
          description: Name of the Constraint
        column_names:
          type: array
          items:
            type: string
            description: Column name for the constraint
        constraint_type:
          type: string
          description: Type of the constraint
      discriminator:
        propertyName: constraint_type
        mapping:
          PRIMARY KEY: PrimaryKey
          FOREIGN KEY: ForeignKey
          UNIQUE: UniqueKey
    PrimaryKey:
      allOf:
      - $ref: '#/components/schemas/Constraint'
      type: object
      description: A primary key is the column or columns that contain values that
        uniquely identify each row in a table.
    UniqueKey:
      allOf:
      - $ref: '#/components/schemas/Constraint'
      type: object
      description: Unique keys are columns in a table that uniquely identify items
        in the rows. This sounds a lot like a primary key, but the main difference
        is that unique keys can have NULL values.
    ForeignKey:
      allOf:
      - $ref: '#/components/schemas/Constraint'
      type: object
      description: Foreign keys link data in one table to the data in another table.
      properties:
        referenced_table_name:
          type: string
        referenced_column_names:
          type: array
          items:
            type: string
      required:
      - referenced_table_name
      - referenced_column_names
    TableClone:
      type: object
      description: Clone table
      allOf:
      - $ref: '#/components/schemas/Table'
      properties:
        point_of_time:
          $ref: '#/components/schemas/PointOfTime'
    TableAsSelect:
      type: object
      description: Create table as select
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        columns:
          type: array
          items:
            $ref: '#/components/schemas/TableColumn'
        cluster_by:
          type: array
          description: Specifies one or more columns or column expressions in the
            table as the clustering key
          items:
            type: string
    TableUsingTemplate:
      type: object
      description: Create table using template
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
    TableLike:
      type: object
      description: Create table like an existing table
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
    Identifier:
      type: string
      description: 'A Snowflake object identifier. If the identifier contains spaces
        or special characters,  the entire string must be enclosed in double quotes.  Identifiers
        enclosed in double quotes are also case-sensitive.

        '
      pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
      example: TEST_NAME
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message returned by the server
        code:
          type: string
          description: Error code.
        error_code:
          type: string
          description: Error code, same as `code` above. This property has been deprecated
            and will be removed in a future release, but is temporarily supported
            for for short-term backward compatibility.
        request_id:
          type: string
          description: Unique request ID.
      example:
        message: Compilation error!
        error_code: '390189'
        request_id: 01afef9d-0607-0550-0001-dd270c3902d7
    SuccessResponse:
      type: object
      description: Schema for all the success responses returned by the server.
      properties:
        status:
          type: string
          description: Message returned by the server.
      example:
        status: Request successfully completed
    SuccessAcceptedResponse:
      type: object
      description: Schema for a request in progress response returned by the server.
      properties:
        code:
          type: string
          description: Message code returned by the server.
        message:
          type: string
          description: Message returned by the server
        resultHandler:
          type: string
          description: Opaque result ID used for checking for request completion through
            one or more subsequent completion check operations.
      example:
        code: '392604'
        message: Request execution in progress. Use the provided location header or
          result handler ID to perform query monitoring and management.
    PointOfTime:
      type: object
      description: Point of time.
      required:
      - point_of_time_type
      properties:
        point_of_time_type:
          description: 'Type of the point of time. Possible values include:

            - `timestamp`: Exact time using the standard timezone format. Example:
            `2023-09-15 10:59:43`. - `offset`: Interval relative to ''now.'' Example:
            `1 day`. - `statement`: ID of a query statement to use as the reference
            point for <a href=https://docs.snowflake.com/en/sql-reference/sql/create-clone#time-travel-parameters>Time
            Travel</a>.

            For more information, see https://docs.snowflake.com/en/sql-reference/data-types-datetime.'
          type: string
          examples:
            timestamp:
              value: '2023-09-15 10:59:43'
            offset:
              value: 20 ms
        reference:
          type: string
          description: Relation to the point of time. Currently, the API supports
            `at` and `before`.
      discriminator:
        propertyName: point_of_time_type
        mapping:
          timestamp: PointOfTimeTimestamp
          offset: PointOfTimeOffset
          statement: PointOfTimeStatement
    PointOfTimeTimestamp:
      description: Point of time identified by a timestamp.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        timestamp:
          type: string
          description: Timestamp of the point of time.
    PointOfTimeOffset:
      description: Point of time identified by an offset in reference to the current
        time, such as `10 min`.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      examples:
        month:
          value: 2 months
        milliseconds:
          value: 20 ms
      properties:
        offset:
          type: string
          description: 'Offset from the point of time. Example: `1 year`'
    PointOfTimeStatement:
      description: Point of time indicating when a statement was executed.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        statement:
          type: string
          description: Statement of the point of time.
    Parameter:
      description: Snowflake parameter defined at the system, account, user, session,
        or object level.
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Parameter name.
        value:
          type: string
          description: Parameter value.
        defaultValue:
          type: string
          description: Default parameter value.
        dataType:
          type: string
          description: Data type of the parameter value. Either BOOLEAN, NUMBER, FLOAT,
            or STRING.
        level:
          type: string
          description: Level at which parameter is defined.
        description:
          type: string
          description: Parameter description.
      example:
        name: SAMPLE_SNOWAPI_PARAM
        value: true
        defaultValue: false
        dataType: boolean
        level: ACCOUNT
        description: Sample snowflake parameter.
    TargetLag:
      type: object
      description: Specifies the schedule for periodically refreshing the dynamic
        table.
      properties:
        type:
          description: Type of lag, can be either USER_DEFINED or DOWNSTREAM.
          type: string
      discriminator:
        propertyName: type
        mapping:
          USER_DEFINED: UserDefinedLag
          DOWNSTREAM: DownstreamLag
    UserDefinedLag:
      description: User-defined target lag.
      allOf:
      - $ref: '#/components/schemas/TargetLag'
      properties:
        seconds:
          type: integer
          format: int64
          description: Target lag time in seconds.
      example:
        seconds: 3600
      required:
      - seconds
    DownstreamLag:
      description: Downstream target lag
      allOf:
      - $ref: '#/components/schemas/TargetLag'
  securitySchemes:
    KeyPair:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Set `X-Snowflake-Authorization-Token-Type` to `KEYPAIR_JWT` if
        the token is a key-pair authentication JWT.
    ExternalOAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Configure External Oauth with Snowflake (see <a href=https://docs.snowflake.com/en/user-guide/oauth-ext-overview>External
        OAuth overview</a>.) Set `X-Snowflake-Authorization-Token-Type` to `OAUTH`
        and set the Token to the auth token received from the external Auth server.
    SnowflakeOAuth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: /oauth/authorize
          scopes: {}
      description: Set `X-Snowflake-Authorization-Token-Type` to `OAUTH` if the token
        is snowflakeOAuth
  parameters:
    database_name:
      name: database_name
      description: Identifier (i.e. name) for the database to which the resource belongs.
        You can use the `/api/v2/databases` GET request to get a list of available
        databases.
      required: true
      in: path
      schema:
        example: TEST_DB
        $ref: '#/components/schemas/Identifier'
    schema_name:
      name: schema_name
      description: Identifier (i.e. name) for the schema to which the resource belongs.
        You can use the `/api/v2/databases/{database}/schemas` GET request to get
        a list of available schemas for the specified database.
      required: true
      in: path
      schema:
        example: TEST_SCHEMA
        $ref: '#/components/schemas/Identifier'
    application:
      name: application
      description: Identifier (i.e. name) for the application to which the resource
        belongs. You can use the `/api/v2/applications/{application}` GET request
        to get a list of available applications.
      required: true
      in: path
      schema:
        example: TEST_APPLICATION
        $ref: '#/components/schemas/Identifier'
    name:
      name: name
      description: Identifier (i.e. name) for the resource.
      required: true
      in: path
      schema:
        example: TEST_NAME
        $ref: '#/components/schemas/Identifier'
    nameWithArgs:
      name: nameWithArgs
      description: Function's name with Args
      required: true
      in: path
      schema:
        type: string
        example: foo(a number, b number)
    createMode:
      name: createMode
      description: 'Query parameter allowing support for different modes of resource
        creation. Possible values include:

        - `errorIfExists`: Throws an error if you try to create a resource that already
        exists.

        - `orReplace`: Automatically replaces the existing resource with the current
        one.

        - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent
        resource.'
      in: query
      schema:
        type: string
        enum:
        - errorIfExists
        - orReplace
        - ifNotExists
        example: ifNotExists
        default: errorIfExists
    mode:
      name: mode
      description: 'Query parameter determines whether the revoke operation succeeds
        or fails for the privileges, based on the whether the privileges had been
        re-granted to another role.

        - restrict: If the privilege being revoked has been re-granted to another
        role, the REVOKE command fails.

        - cascade: If the privilege being revoked has been re-granted, the REVOKE
        command recursively revokes these dependent grants. If the same privilege
        on an object has been granted to the target role by a different grantor (parallel
        grant), that grant is not affected and the target role retains the privilege.'
      in: query
      schema:
        type: string
        enum:
        - restrict
        - cascade
        example: restrict
    ifExists:
      name: ifExists
      description: 'Query parameter that specifies how to handle the request for a
        resource that does not exist:

        - `true`: The endpoint does not throw an error if the resource does not exist.
        It returns a 200 success response, but does not take any action on the resource.

        - `false`: The endpoint throws an error if the resource doesn''t exist.'
      in: query
      schema:
        type: boolean
        example: true
        default: false
    like:
      name: like
      description: Query parameter to filter the command output by resource name.
        Uses case-insensitive pattern matching, with support for SQL wildcard characters.
      in: query
      schema:
        type: string
        example: test_%
    pattern:
      name: pattern
      description: A query parameter that filters the command output by a regular
        expression pattern.
      in: query
      schema:
        type: string
        example: .*data_0.*
    startsWith:
      name: startsWith
      description: Query parameter to filter the command output based on the string
        of characters that appear at the beginning of the object name. Uses case-sensitive
        pattern matching.
      in: query
      schema:
        type: string
        example: test
    rootOnly:
      name: rootOnly
      description: Query parameter to filter the command output to return only root
        resources (resources with no predecessors).
      in: query
      schema:
        type: boolean
        example: false
        default: false
    showLimit:
      name: showLimit
      description: Query parameter to limit the maximum number of rows returned by
        a command.
      in: query
      schema:
        type: integer
        example: 10
        minimum: 1
        maximum: 10000
    fromName:
      name: fromName
      description: Query parameter to enable fetching rows only following the first
        row whose object name matches the specified string. Case-sensitive and does
        not have to be the full name.
      in: query
      schema:
        type: string
        example: from_test
    copyGrants:
      name: copyGrants
      description: Query parameter to enable copy grants when creating the object.
      in: query
      schema:
        type: boolean
        example: false
        default: false
    asyncExec:
      name: asyncExec
      in: query
      description: Asynchronous execution enable/disable. Default is disable.
      schema:
        type: boolean
        default: false
    sessionId:
      name: sessionId
      description: Unique ID for the current session.
      required: true
      in: path
      schema:
        type: integer
        format: uuid
        example: 524514326772799
    content-type:
      name: Content-Type
      description: Type of content for the resource. Currently supports `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    accept:
      name: Accept
      description: Type of data format accepted by the resource. Currently supports
        `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    x-snowflake-authorization-token-type:
      name: X-Snowflake-Authorization-Token-Type
      description: Type of the Snowflake authorization token. Currently, keypair-jwt
        (`KEYPAIR_JWT`) and OAuth tokens are supported.
      in: header
      schema:
        type: string
        enum:
        - KEYPAIR_JWT
        - OAUTH
    x-sfc-session:
      name: X-Sfc-Session
      description: Token for the current Snowflake session.
      in: header
      required: false
      schema:
        type: string
        description: Snowflake session token.
        example: ver:3-hint:1000-ABCD=
  headers:
    X-Snowflake-Request-ID:
      description: Unique ID of the API request.
      schema:
        type: string
        format: uuid
    Link:
      description: Links to the page of results (e.g. the first page, the last page,
        etc.). The header can include multiple 'url' entries with different 'rel'
        attribute values that specify the page to return ('first', 'next', 'prev',
        and 'last').
      schema:
        type: string
        example: </api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=0>; rel="first",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=1>;
          rel="next",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=9>;
          rel="last"
  responses:
    200SuccessResponse:
      description: Successful request.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    201SuccessCreatedResponse:
      description: Successfully created a new resource on the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    202SuccessAcceptedResponse:
      headers:
        Location:
          schema:
            type: string
            description: Relative path for checking request status or getting the
              result, if available.
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      description: Successfully accepted the request, but it is not completed yet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessAcceptedResponse'
    400BadRequest:
      description: Bad Request. The request payload is invalid or malformed. This
        happens if the application didn't send the correct request payload. The response
        body may include the error code and message indicating the actual cause. The
        application must reconstruct the request body for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    401Unauthorized:
      description: Unauthorized. The request is not authorized. This happens if the
        attached access token is invalid or missing. The response body may include
        the error code and message indicating the actual cause, e.g., expired, invalid
        token. The application must obtain a new access token for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    403Forbidden:
      description: Forbidden. The request is forbidden. This can also happen if the
        request is made even if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: Not Found. The request endpoint is not valid. This happens if the
        API endpoint does not exist, or if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    405MethodNotAllowed:
      description: Method Not Allowed. The request method doesn't match the supported
        API. This happens, for example, if the application calls the API with GET
        method but the endpoint accepts only POST.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    408RequestTimeout:
      description: Request Timeout. This indicates that the request from the client
        timed out and was not completed by the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    409Conflict:
      description: Conflict. The requested operation could not be performed due to
        a conflicting state that could not be resolved. This usually happens when
        a CREATE request was performed when there is a pre-existing resource with
        the same name, and also without one of the options orReplace/ifNotExists.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    410Gone:
      description: Gone. This error is primarily intended to assist the task of web
        maintenance by notifying the recipient that the resource is intentionally
        unavailable.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    415UnsupportedMediaType:
      description: The request header Content-Type includes an unsupported media type.
        The API supports application/json only. If none specified, the request payload
        is taken as JSON, but if any other media type is specified, this error is
        returned.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    429LimitExceeded:
      description: Limit Exceeded. The number of requests hit the rate limit. The
        application must slow down the frequency of hitting the API endpoints.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500InternalServerError:
      description: Internal Server Error. The server hit an unrecoverable system error.
        The response body may include the error code and message for further guidance.
        The application owner may need to reach out the customer support.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    503ServiceUnavailable:
      description: Service Unavailable. The request was not processed due to server
        side timeouts. The application may retry with backoff. The jittered backoff
        is recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    504GatewayTimeout:
      description: Gateway Timeout. The request was not processed due to server side
        timeouts. The application may retry with backoff. The jittered backoff is
        recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  x-stackQL-resources:
    tables:
      methods:
        list_tables:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_table_as_select_deprecated:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:as_select/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_table_as_select:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables:as-select/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_table_using_template_deprecated:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:using_template/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_table_using_template:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables:using-template/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        fetch_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_or_alter_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}/put'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        delete_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        clone_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:clone/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_table_like_deprecated:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:create_like/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_table_like:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:create-like/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        undrop_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:undrop/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        suspend_recluster_table_deprecated:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:suspend_recluster/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        suspend_recluster_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:suspend-recluster/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        resume_recluster_table_deprecated:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:resume_recluster/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        resume_recluster_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:resume-recluster/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        swap_with_table_deprecated:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:swapwith/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        swap_with_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1tables~1{name}:swap-with/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/tables/methods/list_tables'
        - $ref: '#/components/x-stackQL-resources/tables/methods/fetch_table'
        insert:
        - $ref: '#/components/x-stackQL-resources/tables/methods/create_table'
        - $ref: '#/components/x-stackQL-resources/tables/methods/create_table_as_select_deprecated'
        - $ref: '#/components/x-stackQL-resources/tables/methods/create_table_like_deprecated'
        - $ref: '#/components/x-stackQL-resources/tables/methods/create_table_like'
        update: []
        delete:
        - $ref: '#/components/x-stackQL-resources/tables/methods/delete_table'
        replace:
        - $ref: '#/components/x-stackQL-resources/tables/methods/create_or_alter_table'
      id: snowflake.table.tables
      name: tables
      title: Tables
security:
- KeyPair: []
- ExternalOAuth: []
- SnowflakeOAuth: []
