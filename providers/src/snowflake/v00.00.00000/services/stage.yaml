openapi: 3.0.0
servers:
- url: https://{endpoint}.snowflakecomputing.com
  description: Multi-tenant Snowflake endpoint
  variables:
    endpoint:
      default: orgid-acctid
      description: Organization and Account Name
info:
  version: 0.0.1
  title: Snowflake Stage API
  description: The Snowflake Stage API is a REST API that you can use to access, update,
    and perform certain actions on stage resources in a Snowflake database.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/databases/{database_name}/schemas/{schema_name}/stages:
    get:
      summary: List stages
      tags:
      - stage
      description: Lists stages under the database and schema, with show options as
        query parameters.
      operationId: listStages
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/like'
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: '#/components/headers/X-Snowflake-Request-ID'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stage'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
    post:
      summary: Create a stage
      tags:
      - stage
      description: Create a stage, with standard create modifiers as query parameters.
        See the Stage component definition for what is required to be provided in
        the request body.
      operationId: createStage
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/createMode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stage'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/stages/{name}:
    get:
      summary: Fetch a stage
      tags:
      - stage
      description: Fetch a stage using the describe command output.
      operationId: fetchStage
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: '#/components/headers/X-Snowflake-Request-ID'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
    delete:
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/ifExists'
      summary: Delete a stage
      tags:
      - stage
      description: Delete a stage with the stage name. If ifExists is used, the operation
        will succeed even if the object does not exist. Otherwise, there will be a
        failure if the drop is unsuccessful.
      operationId: deleteStage
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/stages/{name}/files:
    get:
      summary: List files in the stage.
      tags:
      - stage
      description: List files in the stage -- this is equivalent to LIST @stage.
      operationId: listFiles
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/pattern'
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: '#/components/headers/X-Snowflake-Request-ID'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StageFile'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database_name}/schemas/{schema_name}/stages/{name}/files/{filePath}:presigned-url:
    post:
      summary: Generate a presigned url and optionally encryption materials.
      tags:
      - stage
      description: Generate a presigned url and optionally encryption materials for
        uploading and downloading files.
      operationId: getPresignedUrl
      parameters:
      - $ref: '#/components/parameters/database_name'
      - $ref: '#/components/parameters/schema_name'
      - $ref: '#/components/parameters/name'
      - name: filePath
        description: The full stage path of the file.
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresignedUrlRequest'
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: '#/components/headers/X-Snowflake-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTransferMaterial'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
components:
  schemas:
    PresignedUrlRequest:
      type: object
      description: Request object to get presigned url of a file
      properties:
        expiration_time:
          description: Expiration time of the generated presigned url in seconds.
          type: integer
    FileTransferMaterial:
      type: object
      description: Materials for uploading and downloading stage files
      properties:
        presigned_url:
          type: string
          description: Presigned url for file transfer, only works for Server Side
            Encrypted Stages.
    StageFile:
      type: object
      description: A file on a snowflake stage.
      properties:
        name:
          type: string
          description: Name of the file.
        size:
          type: string
          description: Size of the file.
          readOnly: true
        md5:
          type: string
          description: md5 hash of the file.
          readOnly: true
        last_modified:
          type: string
          description: Date and time when the file was last modified.
          readOnly: true
    Stage:
      type: object
      description: A Snowflake stage.
      properties:
        name:
          $ref: '#/components/schemas/Identifier'
          description: String that specifies the identifier (i.e. name) for the stage.
        kind:
          type: string
          enum:
          - PERMANENT
          - TEMPORARY
          default: PERMANENT
          description: Specifies whether the stage is permanent or temporary.
        url:
          type: string
          description: URL for the external stage; blank for an internal stage.
        endpoint:
          type: string
          description: The S3-compatible API endpoint associated with the stage; always
            NULL for stages that are not S3-compatible.
        storage_integration:
          $ref: '#/components/schemas/Identifier'
          description: Storage integration associated with the stage; always NULL
            for an internal stage.
        comment:
          type: string
          description: Specifies a comment for the stage.
        credentials:
          $ref: '#/components/schemas/Credentials'
          writeOnly: true
          description: Credentials of the stage.
        encryption:
          type: object
          description: Encryption parameters of the stage.
          writeOnly: true
          properties:
            type:
              type: string
              enum:
              - SNOWFLAKE_FULL
              - SNOWFLAKE_SSE
              - AWS_CSE
              - AWS_SSE_S3
              - AWS_SSE_KMS
              - GCS_SSE_KMS
              - AZURE_CSE
              - NONE
              description: Specifies the encryption type used.
            master_key:
              type: string
              format: password
              description: Specifies the client-side master key used to encrypt the
                files in the bucket. The master key must be a 128-bit or 256-bit key
                in Base64-encoded form.
            kms_key_id:
              type: string
              description: Optionally specifies the ID for the KMS-managed key used
                to encrypt files unloaded into the bucket.
        directory_table:
          type: object
          description: Directory table parameters of the stage.
          properties:
            enable:
              type: boolean
              default: false
              description: Specifies whether to add a directory table to the stage.
                When the value is TRUE, a directory table is created with the stage.
            refresh_on_create:
              type: boolean
              default: true
              writeOnly: true
              description: Specifies whether to automatically refresh the directory
                table metadata once, immediately after the stage is created.
            auto_refresh:
              type: boolean
              default: false
              writeOnly: true
              description: Specifies whether Snowflake should enable triggering automatic
                refreshes of the directory table metadata when new or updated data
                files are available in the named external stage specified in the URL
                value.
            notification_integration:
              type: string
              writeOnly: true
              description: Specifies the name of the notification integration used
                to automatically refresh the directory table metadata.
        created_on:
          type: string
          description: Date and time when the stage was created.
          format: date-time
          readOnly: true
        has_credentials:
          type: boolean
          description: Indicates that the external stage has access credentials; always
            false for an internal stage.
          readOnly: true
        has_encryption_key:
          type: boolean
          description: Indicates that the external stage contains encrypted files;
            always false for an internal stage.
          readOnly: true
        owner:
          type: string
          description: Role that owns the stage.
          readOnly: true
        owner_role_type:
          type: string
          description: The type of role that owns the object, either ROLE or DATABASE_ROLE.
            If a Snowflake Native App owns the object, the value is APPLICATION. Snowflake
            returns NULL if you delete the object because a deleted object does not
            have an owner role.
          readOnly: true
        region:
          type: string
          description: Region where the stage is located.
          readOnly: true
        cloud:
          type: string
          description: Cloud provider; always NULL for an internal stage.
          readOnly: true
      example:
        name: stage_name
      required:
      - name
    Credentials:
      type: object
      description: Specifies the credentials of the stage.
      properties:
        credential_type:
          description: Type of the credential, can be either AWS or AZURE.
          type: string
      discriminator:
        propertyName: credential_type
        mapping:
          AWS: AwsCredentials
          AZURE: AzureCredentials
    AwsCredentials:
      description: Specifies the AWS credentials of the stage.
      allOf:
      - $ref: '#/components/schemas/Credentials'
      properties:
        aws_key_id:
          type: string
          format: password
          description: Scoped credentials generated by AWS Security Token Service
            (STS).
        aws_secret_key:
          type: string
          format: password
          description: Scoped credentials generated by AWS Security Token Service
            (STS).
        aws_token:
          type: string
          format: password
          description: Scoped credentials generated by AWS Security Token Service
            (STS).
        aws_role:
          type: string
          description: Omit the security credentials and access keys and, instead,
            identify the role using AWS_ROLE and specify the AWS role ARN (Amazon
            Resource Name).
    AzureCredentials:
      description: Specifies the Azure credentials of the stage.
      allOf:
      - $ref: '#/components/schemas/Credentials'
      properties:
        azure_sas_token:
          type: string
          format: password
          description: Specifies the SAS (shared access signature) token for connecting
            to Azure.
    Identifier:
      type: string
      description: 'A Snowflake object identifier. If the identifier contains spaces
        or special characters,  the entire string must be enclosed in double quotes.  Identifiers
        enclosed in double quotes are also case-sensitive.

        '
      pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
      example: TEST_NAME
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message returned by the server
        code:
          type: string
          description: Error code.
        error_code:
          type: string
          description: Error code, same as `code` above. This property has been deprecated
            and will be removed in a future release, but is temporarily supported
            for for short-term backward compatibility.
        request_id:
          type: string
          description: Unique request ID.
      example:
        message: Compilation error!
        error_code: '390189'
        request_id: 01afef9d-0607-0550-0001-dd270c3902d7
    SuccessResponse:
      type: object
      description: Schema for all the success responses returned by the server.
      properties:
        status:
          type: string
          description: Message returned by the server.
      example:
        status: Request successfully completed
    SuccessAcceptedResponse:
      type: object
      description: Schema for a request in progress response returned by the server.
      properties:
        code:
          type: string
          description: Message code returned by the server.
        message:
          type: string
          description: Message returned by the server
        resultHandler:
          type: string
          description: Opaque result ID used for checking for request completion through
            one or more subsequent completion check operations.
      example:
        code: '392604'
        message: Request execution in progress. Use the provided location header or
          result handler ID to perform query monitoring and management.
    PointOfTime:
      type: object
      description: Point of time.
      required:
      - point_of_time_type
      properties:
        point_of_time_type:
          description: 'Type of the point of time. Possible values include:

            - `timestamp`: Exact time using the standard timezone format. Example:
            `2023-09-15 10:59:43`. - `offset`: Interval relative to ''now.'' Example:
            `1 day`. - `statement`: ID of a query statement to use as the reference
            point for <a href=https://docs.snowflake.com/en/sql-reference/sql/create-clone#time-travel-parameters>Time
            Travel</a>.

            For more information, see https://docs.snowflake.com/en/sql-reference/data-types-datetime.'
          type: string
          examples:
            timestamp:
              value: '2023-09-15 10:59:43'
            offset:
              value: 20 ms
        reference:
          type: string
          description: Relation to the point of time. Currently, the API supports
            `at` and `before`.
      discriminator:
        propertyName: point_of_time_type
        mapping:
          timestamp: PointOfTimeTimestamp
          offset: PointOfTimeOffset
          statement: PointOfTimeStatement
    PointOfTimeTimestamp:
      description: Point of time identified by a timestamp.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        timestamp:
          type: string
          description: Timestamp of the point of time.
    PointOfTimeOffset:
      description: Point of time identified by an offset in reference to the current
        time, such as `10 min`.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      examples:
        month:
          value: 2 months
        milliseconds:
          value: 20 ms
      properties:
        offset:
          type: string
          description: 'Offset from the point of time. Example: `1 year`'
    PointOfTimeStatement:
      description: Point of time indicating when a statement was executed.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        statement:
          type: string
          description: Statement of the point of time.
    Parameter:
      description: Snowflake parameter defined at the system, account, user, session,
        or object level.
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Parameter name.
        value:
          type: string
          description: Parameter value.
        defaultValue:
          type: string
          description: Default parameter value.
        dataType:
          type: string
          description: Data type of the parameter value. Either BOOLEAN, NUMBER, FLOAT,
            or STRING.
        level:
          type: string
          description: Level at which parameter is defined.
        description:
          type: string
          description: Parameter description.
      example:
        name: SAMPLE_SNOWAPI_PARAM
        value: true
        defaultValue: false
        dataType: boolean
        level: ACCOUNT
        description: Sample snowflake parameter.
    TargetLag:
      type: object
      description: Specifies the schedule for periodically refreshing the dynamic
        table.
      properties:
        type:
          description: Type of lag, can be either USER_DEFINED or DOWNSTREAM.
          type: string
      discriminator:
        propertyName: type
        mapping:
          USER_DEFINED: UserDefinedLag
          DOWNSTREAM: DownstreamLag
    UserDefinedLag:
      description: User-defined target lag.
      allOf:
      - $ref: '#/components/schemas/TargetLag'
      properties:
        seconds:
          type: integer
          format: int64
          description: Target lag time in seconds.
      example:
        seconds: 3600
      required:
      - seconds
    DownstreamLag:
      description: Downstream target lag
      allOf:
      - $ref: '#/components/schemas/TargetLag'
  securitySchemes:
    KeyPair:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Set `X-Snowflake-Authorization-Token-Type` to `KEYPAIR_JWT` if
        the token is a key-pair authentication JWT.
    ExternalOAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Configure External Oauth with Snowflake (see <a href=https://docs.snowflake.com/en/user-guide/oauth-ext-overview>External
        OAuth overview</a>.) Set `X-Snowflake-Authorization-Token-Type` to `OAUTH`
        and set the Token to the auth token received from the external Auth server.
    SnowflakeOAuth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: /oauth/authorize
          scopes: {}
      description: Set `X-Snowflake-Authorization-Token-Type` to `OAUTH` if the token
        is snowflakeOAuth
  parameters:
    database_name:
      name: database_name
      description: Identifier (i.e. name) for the database to which the resource belongs.
        You can use the `/api/v2/databases` GET request to get a list of available
        databases.
      required: true
      in: path
      schema:
        example: TEST_DB
        $ref: '#/components/schemas/Identifier'
    schema_name:
      name: schema_name
      description: Identifier (i.e. name) for the schema to which the resource belongs.
        You can use the `/api/v2/databases/{database}/schemas` GET request to get
        a list of available schemas for the specified database.
      required: true
      in: path
      schema:
        example: TEST_SCHEMA
        $ref: '#/components/schemas/Identifier'
    application:
      name: application
      description: Identifier (i.e. name) for the application to which the resource
        belongs. You can use the `/api/v2/applications/{application}` GET request
        to get a list of available applications.
      required: true
      in: path
      schema:
        example: TEST_APPLICATION
        $ref: '#/components/schemas/Identifier'
    name:
      name: name
      description: Identifier (i.e. name) for the resource.
      required: true
      in: path
      schema:
        example: TEST_NAME
        $ref: '#/components/schemas/Identifier'
    nameWithArgs:
      name: nameWithArgs
      description: Function's name with Args
      required: true
      in: path
      schema:
        type: string
        example: foo(a number, b number)
    createMode:
      name: createMode
      description: 'Query parameter allowing support for different modes of resource
        creation. Possible values include:

        - `errorIfExists`: Throws an error if you try to create a resource that already
        exists.

        - `orReplace`: Automatically replaces the existing resource with the current
        one.

        - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent
        resource.'
      in: query
      schema:
        type: string
        enum:
        - errorIfExists
        - orReplace
        - ifNotExists
        example: ifNotExists
        default: errorIfExists
    mode:
      name: mode
      description: 'Query parameter determines whether the revoke operation succeeds
        or fails for the privileges, based on the whether the privileges had been
        re-granted to another role.

        - restrict: If the privilege being revoked has been re-granted to another
        role, the REVOKE command fails.

        - cascade: If the privilege being revoked has been re-granted, the REVOKE
        command recursively revokes these dependent grants. If the same privilege
        on an object has been granted to the target role by a different grantor (parallel
        grant), that grant is not affected and the target role retains the privilege.'
      in: query
      schema:
        type: string
        enum:
        - restrict
        - cascade
        example: restrict
    ifExists:
      name: ifExists
      description: 'Query parameter that specifies how to handle the request for a
        resource that does not exist:

        - `true`: The endpoint does not throw an error if the resource does not exist.
        It returns a 200 success response, but does not take any action on the resource.

        - `false`: The endpoint throws an error if the resource doesn''t exist.'
      in: query
      schema:
        type: boolean
        example: true
        default: false
    like:
      name: like
      description: Query parameter to filter the command output by resource name.
        Uses case-insensitive pattern matching, with support for SQL wildcard characters.
      in: query
      schema:
        type: string
        example: test_%
    pattern:
      name: pattern
      description: A query parameter that filters the command output by a regular
        expression pattern.
      in: query
      schema:
        type: string
        example: .*data_0.*
    startsWith:
      name: startsWith
      description: Query parameter to filter the command output based on the string
        of characters that appear at the beginning of the object name. Uses case-sensitive
        pattern matching.
      in: query
      schema:
        type: string
        example: test
    rootOnly:
      name: rootOnly
      description: Query parameter to filter the command output to return only root
        resources (resources with no predecessors).
      in: query
      schema:
        type: boolean
        example: false
        default: false
    showLimit:
      name: showLimit
      description: Query parameter to limit the maximum number of rows returned by
        a command.
      in: query
      schema:
        type: integer
        example: 10
        minimum: 1
        maximum: 10000
    fromName:
      name: fromName
      description: Query parameter to enable fetching rows only following the first
        row whose object name matches the specified string. Case-sensitive and does
        not have to be the full name.
      in: query
      schema:
        type: string
        example: from_test
    copyGrants:
      name: copyGrants
      description: Query parameter to enable copy grants when creating the object.
      in: query
      schema:
        type: boolean
        example: false
        default: false
    asyncExec:
      name: asyncExec
      in: query
      description: Asynchronous execution enable/disable. Default is disable.
      schema:
        type: boolean
        default: false
    sessionId:
      name: sessionId
      description: Unique ID for the current session.
      required: true
      in: path
      schema:
        type: integer
        format: uuid
        example: 524514326772799
    content-type:
      name: Content-Type
      description: Type of content for the resource. Currently supports `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    accept:
      name: Accept
      description: Type of data format accepted by the resource. Currently supports
        `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    x-snowflake-authorization-token-type:
      name: X-Snowflake-Authorization-Token-Type
      description: Type of the Snowflake authorization token. Currently, keypair-jwt
        (`KEYPAIR_JWT`) and OAuth tokens are supported.
      in: header
      schema:
        type: string
        enum:
        - KEYPAIR_JWT
        - OAUTH
    x-sfc-session:
      name: X-Sfc-Session
      description: Token for the current Snowflake session.
      in: header
      required: false
      schema:
        type: string
        description: Snowflake session token.
        example: ver:3-hint:1000-ABCD=
  headers:
    X-Snowflake-Request-ID:
      description: Unique ID of the API request.
      schema:
        type: string
        format: uuid
    Link:
      description: Links to the page of results (e.g. the first page, the last page,
        etc.). The header can include multiple 'url' entries with different 'rel'
        attribute values that specify the page to return ('first', 'next', 'prev',
        and 'last').
      schema:
        type: string
        example: </api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=0>; rel="first",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=1>;
          rel="next",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=9>;
          rel="last"
  responses:
    200SuccessResponse:
      description: Successful request.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    201SuccessCreatedResponse:
      description: Successfully created a new resource on the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    202SuccessAcceptedResponse:
      headers:
        Location:
          schema:
            type: string
            description: Relative path for checking request status or getting the
              result, if available.
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      description: Successfully accepted the request, but it is not completed yet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessAcceptedResponse'
    400BadRequest:
      description: Bad Request. The request payload is invalid or malformed. This
        happens if the application didn't send the correct request payload. The response
        body may include the error code and message indicating the actual cause. The
        application must reconstruct the request body for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    401Unauthorized:
      description: Unauthorized. The request is not authorized. This happens if the
        attached access token is invalid or missing. The response body may include
        the error code and message indicating the actual cause, e.g., expired, invalid
        token. The application must obtain a new access token for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    403Forbidden:
      description: Forbidden. The request is forbidden. This can also happen if the
        request is made even if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: Not Found. The request endpoint is not valid. This happens if the
        API endpoint does not exist, or if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    405MethodNotAllowed:
      description: Method Not Allowed. The request method doesn't match the supported
        API. This happens, for example, if the application calls the API with GET
        method but the endpoint accepts only POST.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    408RequestTimeout:
      description: Request Timeout. This indicates that the request from the client
        timed out and was not completed by the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    409Conflict:
      description: Conflict. The requested operation could not be performed due to
        a conflicting state that could not be resolved. This usually happens when
        a CREATE request was performed when there is a pre-existing resource with
        the same name, and also without one of the options orReplace/ifNotExists.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    410Gone:
      description: Gone. This error is primarily intended to assist the task of web
        maintenance by notifying the recipient that the resource is intentionally
        unavailable.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    415UnsupportedMediaType:
      description: The request header Content-Type includes an unsupported media type.
        The API supports application/json only. If none specified, the request payload
        is taken as JSON, but if any other media type is specified, this error is
        returned.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    429LimitExceeded:
      description: Limit Exceeded. The number of requests hit the rate limit. The
        application must slow down the frequency of hitting the API endpoints.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500InternalServerError:
      description: Internal Server Error. The server hit an unrecoverable system error.
        The response body may include the error code and message for further guidance.
        The application owner may need to reach out the customer support.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    503ServiceUnavailable:
      description: Service Unavailable. The request was not processed due to server
        side timeouts. The application may retry with backoff. The jittered backoff
        is recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    504GatewayTimeout:
      description: Gateway Timeout. The request was not processed due to server side
        timeouts. The application may retry with backoff. The jittered backoff is
        recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  x-stackQL-resources:
    stages:
      methods:
        list_stages:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1stages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_stage:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1stages/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        fetch_stage:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1stages~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_stage:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1stages~1{name}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/stages/methods/list_stages'
        - $ref: '#/components/x-stackQL-resources/stages/methods/fetch_stage'
        insert:
        - $ref: '#/components/x-stackQL-resources/stages/methods/create_stage'
        update: []
        delete:
        - $ref: '#/components/x-stackQL-resources/stages/methods/delete_stage'
        replace: []
      id: snowflake.stage.stages
      name: stages
      title: Stages
    files:
      methods:
        list_files:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1stages~1{name}~1files/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/files/methods/list_files'
        insert: []
        update: []
        delete: []
        replace: []
      id: snowflake.stage.files
      name: files
      title: Files
    presigned_url:
      methods:
        get_presigned_url:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database_name}~1schemas~1{schema_name}~1stages~1{name}~1files~1{filePath}:presigned-url/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/presigned_url/methods/get_presigned_url'
        insert: []
        update: []
        delete: []
        replace: []
      id: snowflake.stage.presigned_url
      name: presigned_url
      title: Presigned Url
security:
- KeyPair: []
- ExternalOAuth: []
- SnowflakeOAuth: []
