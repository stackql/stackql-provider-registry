openapi: 3.0.0
servers:
- url: https://{organization}.snowflakecomputing.com/
  variables:
    organization:
      default: org-account
info:
  version: 0.0.1
  title: Snowflake Task API
  description: The Snowflake Task API is a REST API that you can use to access, update,
    and perform certain actions on task resources in a Snowflake database.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/databases/{database}/schemas/{schema}/tasks:
    get:
      summary: List tasks
      tags:
      - task
      description: Lists tasks under the database and schema, with show options as
        query parameters.
      operationId: listTasks
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/rootOnly
      - $ref: common.yaml#/components/parameters/like
      - $ref: common.yaml#/components/parameters/startsWith
      - $ref: common.yaml#/components/parameters/showLimit
      - $ref: common.yaml#/components/parameters/fromName
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    post:
      summary: Create a task
      tags:
      - task
      description: Create a task, with standard create modifiers as query parameters.
        See the Task component definition for what is required to be provided in the
        request body.
      operationId: createTask
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
            example:
              name: name_example
              warehouse: REGRESS
              schedule:
                schedule_type: MINUTES_TYPE
                minutes: 10
              predecessors:
              - task1
              - task2
              - task3
              comment: test_comment
              definition: select 1
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}:
    get:
      summary: Fetch a task
      tags:
      - task
      description: Fetch a task using the describe command output.
      operationId: fetchTask
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    put:
      summary: Create a (or alter an existing) task
      tags:
      - task
      description: Create a (or alter an existing) task. Even if the operation is
        just an alter, the full property set must be provided.
      operationId: createOrAlterTask
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    delete:
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      summary: Delete a task
      tags:
      - task
      description: Delete a task with the task name. If ifExists is used, the operation
        will succeed even if the object does not exist. Otherwise, there will be a
        failure if the drop is unsuccessful.
      operationId: deleteTask
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}:execute:
    post:
      summary: Execute a task object.
      tags:
      - task
      description: Execute a task -- this is equivalent to EXECUTE IMMEDIATE.
      operationId: executeTask
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/asyncExec
      - name: retryLast
        in: query
        description: Retry the last failed run of the DAG.
        schema:
          type: boolean
          default: false
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}:resume:
    post:
      summary: Resume a suspended task.
      tags:
      - task
      description: Resumes a suspended task object. This is equivalento an ALTER TASK
        ... RESUME.
      operationId: resumeTask
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}:suspend:
    post:
      summary: Suspend a running task.
      tags:
      - task
      description: Suspends a running task. This is equivalent to an ALTER TASK ...
        SUSPEND.
      operationId: suspendTask
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}/dependents:
    get:
      summary: Fetch the dependent tasks of a task
      tags:
      - task
      description: This operation returns a list of the dependent tasks of the task
        with identifier {name}.
      operationId: fetchTaskDependents
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - name: recursive
        in: query
        description: Specifies whether to limit the output to include only direct
          child tasks or to include all recursive child tasks.
        schema:
          type: boolean
          default: true
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}/current_graphs:
    get:
      deprecated: true
      summary: Get the graph runs that are executing or scheduled for the task for
        the next 8 days.
      tags:
      - task
      description: This function returns details for graph runs that are currently
        executing or are next scheduled to run within the next 8 days.
      operationId: getCurrentGraphsDeprecated
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - in: query
        name: resultLimit
        schema:
          type: integer
          description: Number of results to return, at most. Default is 1000, valid
            range is 1 to 10000.
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskRun'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}/current-graphs:
    get:
      summary: Get the graph runs that are executing or scheduled for the task for
        the next 8 days.
      tags:
      - task
      description: This function returns details for graph runs that are currently
        executing or are next scheduled to run within the next 8 days.
      operationId: getCurrentGraphs
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - in: query
        name: resultLimit
        schema:
          type: integer
          description: Number of results to return, at most. Default is 1000, valid
            range is 1 to 10000.
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskRun'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}/complete_graphs:
    get:
      deprecated: true
      summary: Get the graph runs that are completed for the task.
      tags:
      - task
      description: This function returns details for graph runs that are completed.
      operationId: getCompleteGraphsDeprecated
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - in: query
        name: resultLimit
        schema:
          type: integer
        description: Number of results to return, at most. Default is 1000, valid
          range is 1 to 10000.
      - in: query
        name: errorOnly
        schema:
          type: boolean
        description: Whether to only return results for tasks runs that have failed.
          Default is false.
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskRun'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}/complete-graphs:
    get:
      summary: Get the graph runs that are completed for the task.
      tags:
      - task
      description: This function returns details for graph runs that are completed.
      operationId: getCompleteGraphs
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - in: query
        name: resultLimit
        schema:
          type: integer
        description: Number of results to return, at most. Default is 1000, valid
          range is 1 to 10000.
      - in: query
        name: errorOnly
        schema:
          type: boolean
        description: Whether to only return results for tasks runs that have failed.
          Default is false.
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskRun'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
components:
  schemas:
    TaskRun:
      type: object
      description: A task run executing a standalone task or a DAG of tasks starting
        from the root task.
      properties:
        root_task_name:
          type: string
          description: The name of the root task in the current task run.
          readOnly: true
        database_name:
          type: string
          description: The name of the current database for the task run.
          readOnly: true
        schema_name:
          type: string
          description: The name of the current schema for the task run.
          readOnly: true
        state:
          type: string
          description: The current state of the task run.
          enum:
          - SCHEDULED
          - EXECUTING
          - SUCCEEDED
          - FAILED
          - CANCELLED
          - SKIPPED
          readOnly: true
        first_error_task_name:
          type: string
          description: The name of the first task throwing an error in the task run.
          readOnly: true
        first_error_code:
          type: integer
          description: The first error code thrown in the task run.
          readOnly: true
        first_error_message:
          type: string
          description: The first error message thrown in the task run.
          readOnly: true
        scheduled_time:
          type: string
          description: The scheduled time for the task run.
          format: date-time
          readOnly: true
        query_start_time:
          type: string
          description: The start time for the task run query.
          format: date-time
          readOnly: true
        next_scheduled_time:
          type: string
          description: The next upcoming time for the task run.
          format: date-time
          readOnly: true
        completed_time:
          type: string
          description: The time this task run was last completed.
          format: date-time
          readOnly: true
        root_task_id:
          type: string
          description: The unique task ID for the root task.
          readOnly: true
        graph_version:
          type: integer
          description: The current version of the DAG on the task run.
          readOnly: true
        run_id:
          type: integer
          description: The unique ID for the current task run.
          readOnly: true
      example:
        root_task_name: root_task
        database_name: test_db
        schema_name: test_schema
        state: SCHEDULED
        first_error_task_name: test_task
        first_error_code: 0
        first_error_message: ERROR
        scheduled_time: '2024-06-18T01:01:01.111111'
        query_start_time: '2024-06-18T01:01:01.111111'
        next_scheduled_time: '2024-06-18T01:01:01.111111'
        completed_time: '2024-06-18T01:01:01.111111'
        root_task_id: '0'
        graph_version: 0
        run_id: 0
      required:
      - root_task_name
      - database_name
      - schema_name
      - state
      - scheduled_time
      - next_scheduled_time
      - root_task_id
      - graph_version
      - run_id
    Task:
      type: object
      description: A Snowflake task, used to execute SQL code.
      properties:
        name:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: String that specifies the identifier (i.e. name) for the task.
        warehouse:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: Specifies the virtual warehouse that provides compute resources
            for task runs. Omit this parameter to use serverless compute resources
            for runs of this task.
        schedule:
          $ref: '#/components/schemas/TaskSchedule'
          description: Specifies the schedule for periodically running the task.
        comment:
          type: string
          description: Specifies a comment for the task.
        finalize:
          type: string
          description: Specifies the name of the root task that the finalizer task
            is associated with.
        task_auto_retry_attempts:
          type: integer
          description: Root task settable only. Specifies the number of automatic
            task graph retry attempts. Valid range is 0 to 30. When not specified,
            no retry would happen.
          minimum: 0
          maximum: 30
        config:
          type: object
          additionalProperties: true
          description: Task Config
        session_parameters:
          type: object
          additionalProperties: true
          description: Session Parameters for the task at runtime.
        definition:
          type: string
          description: The SQL definition for the task. Any one of single SQL statement,
            call to stored procedure, or procedural logic using Snowflake scripting.
        predecessors:
          type: array
          description: Specifies one or more predecessor tasks for the current task
          items:
            type: string
            description: The identifier for the task.
        task_relations:
          type: string
          description: Displays the relationship between the root task and its corresponding
            finalizer tasks.
          readOnly: true
        user_task_managed_initial_warehouse_size:
          type: string
          description: Specifies the size of the compute resources to provision for
            the first run of the task. This parameter only applies to serverless tasks.
        target_completion_interval:
          $ref: '#/components/schemas/MinutesSchedule'
          description: Specifies the desired task completion time. This parameter
            only applies to serverless tasks.
        serverless_task_min_statement_size:
          type: string
          description: Specifies the minimum allowed warehouse size for the serverless
            task. Minimum XSMALL, Maximum XXLARGE. This parameter only applies to
            serverless tasks.
        serverless_task_max_statement_size:
          type: string
          description: Specifies the maximum allowed warehouse size for the serverless
            task. Minimum XSMALL, Maximum XXLARGE. This parameter only applies to
            serverless tasks.
        user_task_timeout_ms:
          type: integer
          description: Specifies the time limit on a single run of the task before
            it times out (in milliseconds).
        suspend_task_after_num_failures:
          type: integer
          description: Specifies the number of consecutive failed task runs after
            which the current task is suspended automatically.
        condition:
          type: string
          description: Specifies a Boolean SQL expression condition; multiple conditions
            joined with AND/OR are supported
        allow_overlapping_execution:
          type: boolean
          description: Specifies whether to allow multiple instances of the DAG to
            run concurrently.
        error_integration:
          type: string
          description: Specifies the name of the notification integration used to
            communicate with Amazon SNS, MS Azure Event Grid, or Google Pub/Sub.
        created_on:
          type: string
          description: The time the task was created on.
          format: date-time
          readOnly: true
        id:
          type: string
          description: An ID for the current task.
          readOnly: true
        owner:
          type: string
          description: The role that owns the task.
          readOnly: true
        owner_role_type:
          type: string
          description: The role type of the task owner.
          readOnly: true
        state:
          type: string
          description: The state of the task. Must be one of started or suspended.
          readOnly: true
          enum:
          - started
          - suspended
        last_committed_on:
          type: string
          description: The time the task was last committed on.
          readOnly: true
          format: date-time
        last_suspended_on:
          type: string
          description: The time the task was last suspended on.
          readOnly: true
          format: date-time
        database_name:
          type: string
          description: The name of the parent database for the task.
          readOnly: true
        schema_name:
          type: string
          description: The name of the parent schema for the task.
          readOnly: true
      example:
        name: name_example
        schedule:
          schedule_type: MINUTES_TYPE
          minutes: 10
        comment: test_comment
        config:
          output_dir: /temp/test_directory/
          learning_rate: '0.1'
        definition: this task does...
        predecessors:
        - task1
        - task2
        - task3
        user_task_managed_initial_warehouse_size: SMALL
        target_completion_interval:
          schedule_type: MINUTES_TYPE
          minutes: 5
        serverless_task_min_statement_size: XSMALL
        serverless_task_max_statement_size: MEDIUM
        user_task_timeout_ms: 10
        suspend_task_after_num_failures: 3
        condition: select 1
        allow_overlapping_execution: false
        error_integration: my_notification_int
        created_on: '2024-06-18T01:01:01.111111'
        id: task_id
        owner: TASK_ADMIN
        owner_role_type: ADMIN
        state: started
        last_committed_on: '2024-06-18T01:01:01.111111'
        last_suspended_on: '2024-06-18T01:01:01.111111'
        database_name: TESTDB
        schema_name: TESTSCHEMA
      required:
      - name
      - definition
    TaskSchedule:
      type: object
      description: Specifies the schedule for periodically running the task.
      properties:
        schedule_type:
          description: Type of the schedule, can be either CRON_TYPE or MINUTES_TYPE.
          type: string
      discriminator:
        propertyName: schedule_type
        mapping:
          CRON_TYPE: CronSchedule
          MINUTES_TYPE: MinutesSchedule
    CronSchedule:
      description: A cron schedule for executing a task at a specified interval.
      allOf:
      - $ref: '#/components/schemas/TaskSchedule'
      properties:
        cron_expr:
          type: string
          description: A cron expression for the task execution.
        timezone:
          type: string
          description: The time zone for the schedule.
      example:
        cron_expr: '* * * * ? *'
        timezone: america/los_angeles
      required:
      - cron_expr
      - timezone
    MinutesSchedule:
      description: A schedule for executing a task at specified intervals of minutes.
      allOf:
      - $ref: '#/components/schemas/TaskSchedule'
      properties:
        minutes:
          type: integer
          description: The number of minutes between each task run.
      example:
        minutes: 10
      required:
      - minutes
    description: If the identifier contains spaces or special characters, the entire
      string must be enclosed in double quotes. Identifiers enclosed in double quotes
      are also case-sensitive.
    Identifier:
      type: string
      description: A Snowflake object identifier.
      pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
      example: TEST_NAME
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message returned by the server
        code:
          type: string
          description: Error code.
        error_code:
          type: string
          description: Error code, same as `code` above. This property has been deprecated
            and will be removed in a future release, but is temporarily supported
            for for short-term backward compatibility.
        request_id:
          type: string
          description: Unique request ID.
      example:
        message: Compilation error!
        error_code: '390189'
        request_id: 01afef9d-0607-0550-0001-dd270c3902d7
    SuccessResponse:
      type: object
      description: Schema for all the success responses returned by the server.
      properties:
        status:
          type: string
          description: Message returned by the server.
      example:
        status: Request successfully completed
    SuccessAcceptedResponse:
      type: object
      description: Schema for a request in progress response returned by the server.
      properties:
        code:
          type: string
          description: Message code returned by the server.
        message:
          type: string
          description: Message returned by the server
        resultHandler:
          type: string
          description: Opaque result ID used for checking for request completion through
            one or more subsequent completion check operations.
      example:
        code: '392604'
        message: Request execution in progress. Use the provided location header or
          result handler ID to perform query monitoring and management.
    PointOfTime:
      type: object
      description: Point of time.
      required:
      - point_of_time_type
      properties:
        point_of_time_type:
          description: 'Type of the point of time. Possible values include:

            - `timestamp`: Exact time using the standard timezone format. Example:
            `2023-09-15 10:59:43`. - `offset`: Interval relative to ''now.'' Example:
            `1 day`. - `statement`: ID of a query statement to use as the reference
            point for <a href=https://docs.snowflake.com/en/sql-reference/sql/create-clone#time-travel-parameters>Time
            Travel</a>.

            For more information, see https://docs.snowflake.com/en/sql-reference/data-types-datetime.'
          type: string
          examples:
            timestamp:
              value: '2023-09-15 10:59:43'
            offset:
              value: 20 ms
        reference:
          type: string
          description: Relation to the point of time. Currently, the API supports
            `at` and `before`.
      discriminator:
        propertyName: point_of_time_type
        mapping:
          timestamp: PointOfTimeTimestamp
          offset: PointOfTimeOffset
          statement: PointOfTimeStatement
    PointOfTimeTimestamp:
      description: Point of time identified by a timestamp.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        timestamp:
          type: string
          description: Timestamp of the point of time.
    PointOfTimeOffset:
      description: Point of time identified by an offset in reference to the current
        time, such as `10 min`.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      examples:
        month:
          value: 2 months
        milliseconds:
          value: 20 ms
      properties:
        offset:
          type: string
          description: 'Offset from the point of time. Example: `1 year`'
    PointOfTimeStatement:
      description: Point of time indicating when a statement was executed.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        statement:
          type: string
          description: Statement of the point of time.
    Parameter:
      description: Snowflake parameter defined at the system, account, user, session,
        or object level.
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Parameter name.
        value:
          type: string
          description: Parameter value.
        defaultValue:
          type: string
          description: Default parameter value.
        dataType:
          type: string
          description: Data type of the parameter value. Either BOOLEAN, NUMBER, FLOAT,
            or STRING.
        level:
          type: string
          description: Level at which parameter is defined.
        description:
          type: string
          description: Parameter description.
      example:
        name: SAMPLE_SNOWAPI_PARAM
        value: true
        defaultValue: false
        dataType: boolean
        level: ACCOUNT
        description: Sample snowflake parameter.
    TargetLag:
      type: object
      description: Specifies the schedule for periodically refreshing the dynamic
        table.
      properties:
        type:
          description: Type of lag, can be either USER_DEFINED or DOWNSTREAM.
          type: string
      discriminator:
        propertyName: type
        mapping:
          USER_DEFINED: UserDefinedLag
          DOWNSTREAM: DownstreamLag
    UserDefinedLag:
      description: User-defined target lag.
      allOf:
      - $ref: '#/components/schemas/TargetLag'
      properties:
        seconds:
          type: integer
          format: int64
          description: Target lag time in seconds.
      example:
        seconds: 3600
      required:
      - seconds
    DownstreamLag:
      description: Downstream target lag
      allOf:
      - $ref: '#/components/schemas/TargetLag'
  securitySchemes:
    KeyPair:
      $ref: common.yaml#/components/securitySchemes/KeyPair
    ExternalOAuth:
      $ref: common.yaml#/components/securitySchemes/ExternalOAuth
    SnowflakeOAuth:
      $ref: common.yaml#/components/securitySchemes/SnowflakeOAuth
  parameters:
    database:
      name: database
      description: Identifier (i.e. name) for the database to which the resource belongs.
        You can use the `/api/v2/databases` GET request to get a list of available
        databases.
      required: true
      in: path
      schema:
        example: TEST_DB
        $ref: ./common.yaml#/components/schemas/Identifier
    schema:
      name: schema
      description: Identifier (i.e. name) for the schema to which the resource belongs.
        You can use the `/api/v2/databases/{database}/schemas` GET request to get
        a list of available schemas for the specified database.
      required: true
      in: path
      schema:
        example: TEST_SCHEMA
        $ref: ./common.yaml#/components/schemas/Identifier
    application:
      name: application
      description: Identifier (i.e. name) for the application to which the resource
        belongs. You can use the `/api/v2/applications/{application}` GET request
        to get a list of available applications.
      required: true
      in: path
      schema:
        example: TEST_APPLICATION
        $ref: ./common.yaml#/components/schemas/Identifier
    name:
      name: name
      description: Identifier (i.e. name) for the resource.
      required: true
      in: path
      schema:
        example: TEST_NAME
        $ref: ./common.yaml#/components/schemas/Identifier
    nameWithArgs:
      name: nameWithArgs
      description: Function's name with Args
      required: true
      in: path
      schema:
        type: string
        example: foo(a number, b number)
    createMode:
      name: createMode
      description: 'Query parameter allowing support for different modes of resource
        creation. Possible values include:

        - `errorIfExists`: Throws an error if you try to create a resource that already
        exists.

        - `orReplace`: Automatically replaces the existing resource with the current
        one.

        - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent
        resource.'
      in: query
      schema:
        type: string
        enum:
        - errorIfExists
        - orReplace
        - ifNotExists
        example: ifNotExists
        default: errorIfExists
    mode:
      name: mode
      description: 'Query parameter determines whether the revoke operation succeeds
        or fails for the privileges, based on the whether the privileges had been
        re-granted to another role.

        - restrict: If the privilege being revoked has been re-granted to another
        role, the REVOKE command fails.

        - cascade: If the privilege being revoked has been re-granted, the REVOKE
        command recursively revokes these dependent grants. If the same privilege
        on an object has been granted to the target role by a different grantor (parallel
        grant), that grant is not affected and the target role retains the privilege.'
      in: query
      schema:
        type: string
        enum:
        - restrict
        - cascade
        example: restrict
    ifExists:
      name: ifExists
      description: 'Query parameter that specifies how to handle the request for a
        resource that does not exist:

        - `true`: The endpoint does not throw an error if the resource does not exist.
        It returns a 200 success response, but does not take any action on the resource.

        - `false`: The endpoint throws an error if the resource doesn''t exist.'
      in: query
      schema:
        type: boolean
        example: true
        default: false
    like:
      name: like
      description: Query parameter to filter the command output by resource name.
        Uses case-insensitive pattern matching, with support for SQL wildcard characters.
      in: query
      schema:
        type: string
        example: test_%
    pattern:
      name: pattern
      description: A query parameter that filters the command output by a regular
        expression pattern.
      in: query
      schema:
        type: string
        example: .*data_0.*
    startsWith:
      name: startsWith
      description: Query parameter to filter the command output based on the string
        of characters that appear at the beginning of the object name. Uses case-sensitive
        pattern matching.
      in: query
      schema:
        type: string
        example: test
    rootOnly:
      name: rootOnly
      description: Query parameter to filter the command output to return only root
        resources (resources with no predecessors).
      in: query
      schema:
        type: boolean
        example: false
        default: false
    showLimit:
      name: showLimit
      description: Query parameter to limit the maximum number of rows returned by
        a command.
      in: query
      schema:
        type: integer
        example: 10
        minimum: 1
        maximum: 10000
    fromName:
      name: fromName
      description: Query parameter to enable fetching rows only following the first
        row whose object name matches the specified string. Case-sensitive and does
        not have to be the full name.
      in: query
      schema:
        type: string
        example: from_test
    copyGrants:
      name: copyGrants
      description: Query parameter to enable copy grants when creating the object.
      in: query
      schema:
        type: boolean
        example: false
        default: false
    asyncExec:
      name: asyncExec
      in: query
      description: Asynchronous execution enable/disable. Default is disable.
      schema:
        type: boolean
        default: false
    sessionId:
      name: sessionId
      description: Unique ID for the current session.
      required: true
      in: path
      schema:
        type: integer
        format: uuid
        example: 524514326772799
    content-type:
      name: Content-Type
      description: Type of content for the resource. Currently supports `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    accept:
      name: Accept
      description: Type of data format accepted by the resource. Currently supports
        `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    x-snowflake-authorization-token-type:
      name: X-Snowflake-Authorization-Token-Type
      description: Type of the Snowflake authorization token. Currently, keypair-jwt
        (`KEYPAIR_JWT`) and OAuth tokens are supported.
      in: header
      schema:
        type: string
        enum:
        - KEYPAIR_JWT
        - OAUTH
    x-sfc-session:
      name: X-Sfc-Session
      description: Token for the current Snowflake session.
      in: header
      required: false
      schema:
        type: string
        description: Snowflake session token.
        example: ver:3-hint:1000-ABCD=
  headers:
    X-Snowflake-Request-ID:
      description: Unique ID of the API request.
      schema:
        type: string
        format: uuid
    Link:
      description: Links to the page of results (e.g. the first page, the last page,
        etc.). The header can include multiple 'url' entries with different 'rel'
        attribute values that specify the page to return ('first', 'next', 'prev',
        and 'last').
      schema:
        type: string
        example: </api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=0>; rel="first",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=1>;
          rel="next",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=9>;
          rel="last"
  responses:
    200SuccessResponse:
      description: Successful request.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    201SuccessCreatedResponse:
      description: Successfully created a new resource on the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    202SuccessAcceptedResponse:
      headers:
        Location:
          schema:
            type: string
            description: Relative path for checking request status or getting the
              result, if available.
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      description: Successfully accepted the request, but it is not completed yet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessAcceptedResponse'
    400BadRequest:
      description: Bad Request. The request payload is invalid or malformed. This
        happens if the application didn't send the correct request payload. The response
        body may include the error code and message indicating the actual cause. The
        application must reconstruct the request body for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    401Unauthorized:
      description: Unauthorized. The request is not authorized. This happens if the
        attached access token is invalid or missing. The response body may include
        the error code and message indicating the actual cause, e.g., expired, invalid
        token. The application must obtain a new access token for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    403Forbidden:
      description: Forbidden. The request is forbidden. This can also happen if the
        request is made even if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: Not Found. The request endpoint is not valid. This happens if the
        API endpoint does not exist, or if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    405MethodNotAllowed:
      description: Method Not Allowed. The request method doesn't match the supported
        API. This happens, for example, if the application calls the API with GET
        method but the endpoint accepts only POST.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    408RequestTimeout:
      description: Request Timeout. This indicates that the request from the client
        timed out and was not completed by the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    409Conflict:
      description: Conflict. The requested operation could not be performed due to
        a conflicting state that could not be resolved. This usually happens when
        a CREATE request was performed when there is a pre-existing resource with
        the same name, and also without one of the options orReplace/ifNotExists.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    410Gone:
      description: Gone. This error is primarily intended to assist the task of web
        maintenance by notifying the recipient that the resource is intentionally
        unavailable.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    415UnsupportedMediaType:
      description: The request header Content-Type includes an unsupported media type.
        The API supports application/json only. If none specified, the request payload
        is taken as JSON, but if any other media type is specified, this error is
        returned.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    429LimitExceeded:
      description: Limit Exceeded. The number of requests hit the rate limit. The
        application must slow down the frequency of hitting the API endpoints.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500InternalServerError:
      description: Internal Server Error. The server hit an unrecoverable system error.
        The response body may include the error code and message for further guidance.
        The application owner may need to reach out the customer support.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    503ServiceUnavailable:
      description: Service Unavailable. The request was not processed due to server
        side timeouts. The application may retry with backoff. The jittered backoff
        is recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    504GatewayTimeout:
      description: Gateway Timeout. The request was not processed due to server side
        timeouts. The application may retry with backoff. The jittered backoff is
        recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  security:
  - KeyPair: []
  - ExternalOAuth: []
  - SnowflakeOAuth: []
  x-stackQL-resources:
    tasks:
      methods:
        list_tasks:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_task:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        fetch_task:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_or_alter_task:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks~1{name}/put'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        delete_task:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks~1{name}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        execute_task:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks~1{name}:execute/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        resume_task:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks~1{name}:resume/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        suspend_task:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks~1{name}:suspend/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/tasks/methods/list_tasks'
        - $ref: '#/components/x-stackQL-resources/tasks/methods/fetch_task'
        insert:
        - $ref: '#/components/x-stackQL-resources/tasks/methods/create_task'
        update: []
        delete:
        - $ref: '#/components/x-stackQL-resources/tasks/methods/delete_task'
        replace:
        - $ref: '#/components/x-stackQL-resources/tasks/methods/create_or_alter_task'
    dependents:
      methods:
        fetch_task_dependents:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks~1{name}~1dependents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/dependents/methods/fetch_task_dependents'
        insert: []
        update: []
        delete: []
        replace: []
    current_graphs:
      methods:
        get_current_graphs_deprecated:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks~1{name}~1current_graphs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_current_graphs:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks~1{name}~1current-graphs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/current_graphs/methods/get_current_graphs_deprecated'
        - $ref: '#/components/x-stackQL-resources/current_graphs/methods/get_current_graphs'
        insert: []
        update: []
        delete: []
        replace: []
    complete_graphs:
      methods:
        get_complete_graphs_deprecated:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks~1{name}~1complete_graphs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_complete_graphs:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1tasks~1{name}~1complete-graphs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/complete_graphs/methods/get_complete_graphs_deprecated'
        - $ref: '#/components/x-stackQL-resources/complete_graphs/methods/get_complete_graphs'
        insert: []
        update: []
        delete: []
        replace: []
security:
- KeyPair: []
- ExternalOAuth: []
- SnowflakeOAuth: []
externalDocs:
  description: Streams and Tasks Reference
  url: https://docs.snowflake.com/en/sql-reference/commands-stream
