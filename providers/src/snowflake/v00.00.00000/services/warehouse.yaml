openapi: 3.0.0
servers:
- url: https://{endpoint}.snowflakecomputing.com
  description: Multi-tenant Snowflake endpoint
  variables:
    endpoint:
      default: orgid-acctid
      description: Organization and Account Name
info:
  version: 0.0.1
  title: Snowflake Warehouse API
  description: The Snowflake Warehouse API is a REST API that you can use to access,
    customize and manage virtual warehouse in a Snowflake account.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/warehouses:
    post:
      summary: Create or replace warehouse
      description: Create a virtual warehouse. Equivalent to CREATE WAREHOUSE in SQL.
      operationId: createWarehouse
      tags:
      - warehouse
      parameters:
      - $ref: '#/components/parameters/createMode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Warehouse'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
    get:
      summary: List warehouse
      description: Show a list of warehouse filtered by pattern. Equivalent to SHOW
        WAREHOUSE in SQL.
      operationId: listWarehouses
      tags:
      - warehouse
      parameters:
      - $ref: '#/components/parameters/like'
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: '#/components/headers/X-Snowflake-Request-ID'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Warehouse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/warehouses/{name}:
    get:
      summary: Describe warehouse
      description: Describes the warehouse, show information of the chosen warehouse.
        Equivalent to DESCRIBE WAREHOUSE in SQL.
      operationId: fetchWarehouse
      tags:
      - warehouse
      parameters:
      - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: '#/components/headers/X-Snowflake-Request-ID'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warehouse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
    delete:
      summary: Drop warehouse
      description: Removes the specified virtual warehouse from the system. Equivalent
        to DROP WAREHOUSE in SQL.
      operationId: deleteWarehouse
      tags:
      - warehouse
      parameters:
      - $ref: '#/components/parameters/ifExists'
      - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
    put:
      summary: Create a (or alter an existing) warehouse.
      description: Create a (or alter an existing) warehouse. Even if the operation
        is just an alter, the full property set must be provided.
      operationId: createOrAlterWarehouse
      tags:
      - warehouse
      parameters:
      - $ref: '#/components/parameters/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Warehouse'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/warehouses/{name}:resume:
    post:
      summary: Resume warehouse
      description: "Bring current warehouse to a usable \u2018Running\u2019 state\
        \ by provisioning compute resources if current warehouse is suspended."
      operationId: resumeWarehouse
      tags:
      - warehouse
      parameters:
      - $ref: '#/components/parameters/ifExists'
      - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/warehouses/{name}:suspend:
    post:
      summary: Suspend warehouse
      description: "Remove all compute nodes from a warehouse and put the warehouse\
        \ into a \u2018Suspended\u2019 state if current warehouse is not suspended."
      operationId: suspendWarehouse
      tags:
      - warehouse
      parameters:
      - $ref: '#/components/parameters/ifExists'
      - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/warehouses/{name}:rename:
    post:
      summary: Update and rename warehouse
      description: Specifies a new identifier for the warehouse; must be unique for
        current account.
      operationId: renameWarehouse
      tags:
      - warehouse
      parameters:
      - $ref: '#/components/parameters/ifExists'
      - $ref: '#/components/parameters/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Warehouse'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/warehouses/{name}:abort:
    post:
      summary: Abort all queries
      description: Aborts all the queries currently running or queued on the warehouse.
      operationId: abortAllQueriesOnWarehouse
      tags:
      - warehouse
      parameters:
      - $ref: '#/components/parameters/ifExists'
      - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/warehouses/{name}:use:
    post:
      summary: Use current warehouse for session
      description: '[Deprecated] Specifies the active/current warehouse for the session.'
      operationId: useWarehouse
      tags:
      - warehouse
      deprecated: true
      parameters:
      - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/warehouses/{name}:enable:
    post:
      summary: enable adaptive warehouse
      description: "Enable an adaptive warehouse and put the warehouse into a \u2018\
        enabled\u2019 state, if the warehouse is not enabled."
      operationId: enableWarehouse
      tags:
      - warehouse
      parameters:
      - $ref: '#/components/parameters/ifExists'
      - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
  /api/v2/warehouses/{name}:disable:
    post:
      summary: disable adaptive warehouse
      description: "Disable an adaptive warehouse and put the warehouse into a \u2018\
        disabled\u2019 state, if the warehouse is not disabled."
      operationId: disableWarehouse
      tags:
      - warehouse
      parameters:
      - $ref: '#/components/parameters/ifExists'
      - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/200SuccessResponse'
        '202':
          $ref: '#/components/responses/202SuccessAcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '408':
          $ref: '#/components/responses/408RequestTimeout'
        '409':
          $ref: '#/components/responses/409Conflict'
        '410':
          $ref: '#/components/responses/410Gone'
        '429':
          $ref: '#/components/responses/429LimitExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        '504':
          $ref: '#/components/responses/504GatewayTimeout'
components:
  schemas:
    Warehouse:
      type: object
      description: A Snowflake virtual warehouse
      properties:
        name:
          $ref: '#/components/schemas/Identifier'
          description: Name of warehouse
        warehouse_type:
          type: string
          description: 'Type of warehouse, possible types: STANDARD, SNOWPARK-OPTIMIZED'
        warehouse_size:
          type: string
          description: 'Size of warehouse, possible sizes: XSMALL, SMALL, MEDIUM,
            LARGE, XLARGE, XXLARGE, XXXLARGE, X4LARGE, X5LARGE, X6LARGE'
        wait_for_completion:
          type: string
          enum:
          - true
          - false
          description: When resizing a warehouse, you can use this parameter to block
            the return of the ALTER WAREHOUSE command until the resize has finished
            provisioning all its compute resources
        max_cluster_count:
          type: integer
          format: int32
          description: Specifies the maximum number of clusters for a multi-cluster
            warehouse
        min_cluster_count:
          type: integer
          format: int32
          description: Specifies the minimum number of clusters for a multi-cluster
            warehouse
        scaling_policy:
          type: string
          description: 'Scaling policy of warehouse, possible scaling policies: STANDARD,
            ECONOMY'
        auto_suspend:
          type: integer
          format: int32
          description: time in seconds before auto suspend
        auto_resume:
          type: string
          enum:
          - true
          - false
          description: Specifies whether to automatically resume a warehouse when
            a SQL statement is submitted to it
        initially_suspended:
          type: string
          enum:
          - true
          - false
          description: Specifies whether the warehouse is created initially in the
            Suspended state
        resource_monitor:
          $ref: '#/components/schemas/Identifier'
          description: Specifies the name of a resource monitor that is explicitly
            assigned to the warehouse. When a resource monitor is explicitly assigned
            to a warehouse, the monitor controls the monthly credits used by the warehouse
        comment:
          type: string
          format: comment
          description: Specifies a comment for the warehouse
        enable_query_acceleration:
          type: string
          enum:
          - true
          - false
          description: Specifies whether to enable the query acceleration service
            for queries that rely on this warehouse for compute resources
        query_acceleration_max_scale_factor:
          type: integer
          format: int32
          description: Specifies the maximum scale factor for leasing compute resources
            for query acceleration. The scale factor is used as a multiplier based
            on warehouse size
        max_concurrency_level:
          type: integer
          format: int32
          description: Object parameter that specifies the concurrency level for SQL
            statements executed by a warehouse cluster
        statement_queued_timeout_in_seconds:
          type: integer
          format: int32
          description: Object parameter that specifies the time, in seconds, a SQL
            statement can be queued on a warehouse before it is canceled by the system
        statement_timeout_in_seconds:
          type: integer
          format: int32
          description: Object parameter that specifies the time, in seconds, after
            which a running SQL statement  is canceled by the system
        type:
          type: string
          description: '[Deprecated] Type of warehouse, possible types: STANDARD,
            SNOWPARK-OPTIMIZED'
          deprecated: true
        size:
          type: string
          description: '[Deprecated] names of size: X-Small, Small, Medium, Large,
            X-Large, 2X-Large, 3X-Large, 4X-Large, 5X-Large, 6X-Large'
          deprecated: true
        state:
          type: string
          readOnly: true
          description: 'The state of warehouse, possible states: STARTED, STARTING,
            DYNAMIC, SUSPENDED, RESIZING, RESUMING, SUSPENDING'
        started_clusters:
          type: integer
          format: int32
          readOnly: true
          description: Number of clusters currently started.
        running:
          type: integer
          format: int32
          readOnly: true
          description: Number of SQL statements that are being executed by the warehouse.
        queued:
          type: integer
          format: int32
          readOnly: true
          description: Number of SQL statements that are queued for the warehouse.
        is_default:
          type: boolean
          readOnly: true
          description: Whether the warehouse is the default for the current user.
        is_current:
          type: boolean
          readOnly: true
          description: Whether the warehouse is in use for the session. Only one warehouse
            can be in use at a time for a session.  To specify or change the warehouse
            for a session, use the USE WAREHOUSE command.
        available:
          type: string
          format: Percentage
          readOnly: true
          description: Percentage of the warehouse compute resources that are provisioned
            and available.
        provisioning:
          type: string
          format: Percentage
          readOnly: true
          description: Percentage of the warehouse compute resources that are in the
            process of provisioning.
        quiescing:
          type: string
          format: Percentage
          readOnly: true
          description: Percentage of the warehouse compute resources that are executing
            SQL statements,  but will be shut down once the queries complete.
        other:
          type: string
          format: Percentage
          readOnly: true
          description: Percentage of the warehouse compute resources that are in a
            state other than available,  provisioning, or quiescing.
        created_on:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the warehouse was created.
        resumed_on:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the warehouse was last started or restarted.
        updated_on:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the warehouse was last updated,  which includes
            changing any of the properties of the warehouse or changing the state
            (STARTED, SUSPENDED, RESIZING) of the warehouse.
        owner:
          type: string
          format: role name
          readOnly: true
          description: Role that owns the warehouse.
        budget:
          type: string
          readOnly: true
          description: Comment representing budget for warehouse.
        kind:
          type: string
          format: warehouse
          readOnly: true
          deprecated: true
        owner_role_type:
          type: string
          readOnly: true
          description: The type of role that owns the object.
        warehouse_credit_limit:
          type: integer
          format: int64
          description: Credit limit that are can be executed by the warehouse.
        target_statement_size:
          type: string
          description: 'Names of size: X-Small, Small, Medium, Large, X-Large, 2X-Large,
            3X-Large, 4X-Large, 5X-Large, 6X-Large'
      required:
      - name
    Identifier:
      type: string
      description: 'A Snowflake object identifier. If the identifier contains spaces
        or special characters,  the entire string must be enclosed in double quotes.  Identifiers
        enclosed in double quotes are also case-sensitive.

        '
      pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
      example: TEST_NAME
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message returned by the server
        code:
          type: string
          description: Error code.
        error_code:
          type: string
          description: Error code, same as `code` above. This property has been deprecated
            and will be removed in a future release, but is temporarily supported
            for for short-term backward compatibility.
        request_id:
          type: string
          description: Unique request ID.
      example:
        message: Compilation error!
        error_code: '390189'
        request_id: 01afef9d-0607-0550-0001-dd270c3902d7
    SuccessResponse:
      type: object
      description: Schema for all the success responses returned by the server.
      properties:
        status:
          type: string
          description: Message returned by the server.
      example:
        status: Request successfully completed
    SuccessAcceptedResponse:
      type: object
      description: Schema for a request in progress response returned by the server.
      properties:
        code:
          type: string
          description: Message code returned by the server.
        message:
          type: string
          description: Message returned by the server
        resultHandler:
          type: string
          description: Opaque result ID used for checking for request completion through
            one or more subsequent completion check operations.
      example:
        code: '392604'
        message: Request execution in progress. Use the provided location header or
          result handler ID to perform query monitoring and management.
    PointOfTime:
      type: object
      description: Point of time.
      required:
      - point_of_time_type
      properties:
        point_of_time_type:
          description: 'Type of the point of time. Possible values include:

            - `timestamp`: Exact time using the standard timezone format. Example:
            `2023-09-15 10:59:43`. - `offset`: Interval relative to ''now.'' Example:
            `1 day`. - `statement`: ID of a query statement to use as the reference
            point for <a href=https://docs.snowflake.com/en/sql-reference/sql/create-clone#time-travel-parameters>Time
            Travel</a>.

            For more information, see https://docs.snowflake.com/en/sql-reference/data-types-datetime.'
          type: string
          examples:
            timestamp:
              value: '2023-09-15 10:59:43'
            offset:
              value: 20 ms
        reference:
          type: string
          description: Relation to the point of time. Currently, the API supports
            `at` and `before`.
      discriminator:
        propertyName: point_of_time_type
        mapping:
          timestamp: PointOfTimeTimestamp
          offset: PointOfTimeOffset
          statement: PointOfTimeStatement
    PointOfTimeTimestamp:
      description: Point of time identified by a timestamp.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        timestamp:
          type: string
          description: Timestamp of the point of time.
    PointOfTimeOffset:
      description: Point of time identified by an offset in reference to the current
        time, such as `10 min`.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      examples:
        month:
          value: 2 months
        milliseconds:
          value: 20 ms
      properties:
        offset:
          type: string
          description: 'Offset from the point of time. Example: `1 year`'
    PointOfTimeStatement:
      description: Point of time indicating when a statement was executed.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        statement:
          type: string
          description: Statement of the point of time.
    Parameter:
      description: Snowflake parameter defined at the system, account, user, session,
        or object level.
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Parameter name.
        value:
          type: string
          description: Parameter value.
        defaultValue:
          type: string
          description: Default parameter value.
        dataType:
          type: string
          description: Data type of the parameter value. Either BOOLEAN, NUMBER, FLOAT,
            or STRING.
        level:
          type: string
          description: Level at which parameter is defined.
        description:
          type: string
          description: Parameter description.
      example:
        name: SAMPLE_SNOWAPI_PARAM
        value: true
        defaultValue: false
        dataType: boolean
        level: ACCOUNT
        description: Sample snowflake parameter.
    TargetLag:
      type: object
      description: Specifies the schedule for periodically refreshing the dynamic
        table.
      properties:
        type:
          description: Type of lag, can be either USER_DEFINED or DOWNSTREAM.
          type: string
      discriminator:
        propertyName: type
        mapping:
          USER_DEFINED: UserDefinedLag
          DOWNSTREAM: DownstreamLag
    UserDefinedLag:
      description: User-defined target lag.
      allOf:
      - $ref: '#/components/schemas/TargetLag'
      properties:
        seconds:
          type: integer
          format: int64
          description: Target lag time in seconds.
      example:
        seconds: 3600
      required:
      - seconds
    DownstreamLag:
      description: Downstream target lag
      allOf:
      - $ref: '#/components/schemas/TargetLag'
  securitySchemes:
    KeyPair:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Set `X-Snowflake-Authorization-Token-Type` to `KEYPAIR_JWT` if
        the token is a key-pair authentication JWT.
    ExternalOAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Configure External Oauth with Snowflake (see <a href=https://docs.snowflake.com/en/user-guide/oauth-ext-overview>External
        OAuth overview</a>.) Set `X-Snowflake-Authorization-Token-Type` to `OAUTH`
        and set the Token to the auth token received from the external Auth server.
    SnowflakeOAuth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: /oauth/authorize
          scopes: {}
      description: Set `X-Snowflake-Authorization-Token-Type` to `OAUTH` if the token
        is snowflakeOAuth
  parameters:
    database:
      name: database
      description: Identifier (i.e. name) for the database to which the resource belongs.
        You can use the `/api/v2/databases` GET request to get a list of available
        databases.
      required: true
      in: path
      schema:
        example: TEST_DB
        $ref: '#/components/schemas/Identifier'
    schema:
      name: schema
      description: Identifier (i.e. name) for the schema to which the resource belongs.
        You can use the `/api/v2/databases/{database}/schemas` GET request to get
        a list of available schemas for the specified database.
      required: true
      in: path
      schema:
        example: TEST_SCHEMA
        $ref: '#/components/schemas/Identifier'
    application:
      name: application
      description: Identifier (i.e. name) for the application to which the resource
        belongs. You can use the `/api/v2/applications/{application}` GET request
        to get a list of available applications.
      required: true
      in: path
      schema:
        example: TEST_APPLICATION
        $ref: '#/components/schemas/Identifier'
    name:
      name: name
      description: Identifier (i.e. name) for the resource.
      required: true
      in: path
      schema:
        example: TEST_NAME
        $ref: '#/components/schemas/Identifier'
    nameWithArgs:
      name: nameWithArgs
      description: Function's name with Args
      required: true
      in: path
      schema:
        type: string
        example: foo(a number, b number)
    createMode:
      name: createMode
      description: 'Query parameter allowing support for different modes of resource
        creation. Possible values include:

        - `errorIfExists`: Throws an error if you try to create a resource that already
        exists.

        - `orReplace`: Automatically replaces the existing resource with the current
        one.

        - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent
        resource.'
      in: query
      schema:
        type: string
        enum:
        - errorIfExists
        - orReplace
        - ifNotExists
        example: ifNotExists
        default: errorIfExists
    mode:
      name: mode
      description: 'Query parameter determines whether the revoke operation succeeds
        or fails for the privileges, based on the whether the privileges had been
        re-granted to another role.

        - restrict: If the privilege being revoked has been re-granted to another
        role, the REVOKE command fails.

        - cascade: If the privilege being revoked has been re-granted, the REVOKE
        command recursively revokes these dependent grants. If the same privilege
        on an object has been granted to the target role by a different grantor (parallel
        grant), that grant is not affected and the target role retains the privilege.'
      in: query
      schema:
        type: string
        enum:
        - restrict
        - cascade
        example: restrict
    ifExists:
      name: ifExists
      description: 'Query parameter that specifies how to handle the request for a
        resource that does not exist:

        - `true`: The endpoint does not throw an error if the resource does not exist.
        It returns a 200 success response, but does not take any action on the resource.

        - `false`: The endpoint throws an error if the resource doesn''t exist.'
      in: query
      schema:
        type: boolean
        example: true
        default: false
    like:
      name: like
      description: Query parameter to filter the command output by resource name.
        Uses case-insensitive pattern matching, with support for SQL wildcard characters.
      in: query
      schema:
        type: string
        example: test_%
    pattern:
      name: pattern
      description: A query parameter that filters the command output by a regular
        expression pattern.
      in: query
      schema:
        type: string
        example: .*data_0.*
    startsWith:
      name: startsWith
      description: Query parameter to filter the command output based on the string
        of characters that appear at the beginning of the object name. Uses case-sensitive
        pattern matching.
      in: query
      schema:
        type: string
        example: test
    rootOnly:
      name: rootOnly
      description: Query parameter to filter the command output to return only root
        resources (resources with no predecessors).
      in: query
      schema:
        type: boolean
        example: false
        default: false
    showLimit:
      name: showLimit
      description: Query parameter to limit the maximum number of rows returned by
        a command.
      in: query
      schema:
        type: integer
        example: 10
        minimum: 1
        maximum: 10000
    fromName:
      name: fromName
      description: Query parameter to enable fetching rows only following the first
        row whose object name matches the specified string. Case-sensitive and does
        not have to be the full name.
      in: query
      schema:
        type: string
        example: from_test
    copyGrants:
      name: copyGrants
      description: Query parameter to enable copy grants when creating the object.
      in: query
      schema:
        type: boolean
        example: false
        default: false
    asyncExec:
      name: asyncExec
      in: query
      description: Asynchronous execution enable/disable. Default is disable.
      schema:
        type: boolean
        default: false
    sessionId:
      name: sessionId
      description: Unique ID for the current session.
      required: true
      in: path
      schema:
        type: integer
        format: uuid
        example: 524514326772799
    content-type:
      name: Content-Type
      description: Type of content for the resource. Currently supports `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    accept:
      name: Accept
      description: Type of data format accepted by the resource. Currently supports
        `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    x-snowflake-authorization-token-type:
      name: X-Snowflake-Authorization-Token-Type
      description: Type of the Snowflake authorization token. Currently, keypair-jwt
        (`KEYPAIR_JWT`) and OAuth tokens are supported.
      in: header
      schema:
        type: string
        enum:
        - KEYPAIR_JWT
        - OAUTH
    x-sfc-session:
      name: X-Sfc-Session
      description: Token for the current Snowflake session.
      in: header
      required: false
      schema:
        type: string
        description: Snowflake session token.
        example: ver:3-hint:1000-ABCD=
  headers:
    X-Snowflake-Request-ID:
      description: Unique ID of the API request.
      schema:
        type: string
        format: uuid
    Link:
      description: Links to the page of results (e.g. the first page, the last page,
        etc.). The header can include multiple 'url' entries with different 'rel'
        attribute values that specify the page to return ('first', 'next', 'prev',
        and 'last').
      schema:
        type: string
        example: </api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=0>; rel="first",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=1>;
          rel="next",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=9>;
          rel="last"
  responses:
    200SuccessResponse:
      description: Successful request.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    201SuccessCreatedResponse:
      description: Successfully created a new resource on the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    202SuccessAcceptedResponse:
      headers:
        Location:
          schema:
            type: string
            description: Relative path for checking request status or getting the
              result, if available.
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      description: Successfully accepted the request, but it is not completed yet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessAcceptedResponse'
    400BadRequest:
      description: Bad Request. The request payload is invalid or malformed. This
        happens if the application didn't send the correct request payload. The response
        body may include the error code and message indicating the actual cause. The
        application must reconstruct the request body for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    401Unauthorized:
      description: Unauthorized. The request is not authorized. This happens if the
        attached access token is invalid or missing. The response body may include
        the error code and message indicating the actual cause, e.g., expired, invalid
        token. The application must obtain a new access token for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    403Forbidden:
      description: Forbidden. The request is forbidden. This can also happen if the
        request is made even if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: Not Found. The request endpoint is not valid. This happens if the
        API endpoint does not exist, or if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    405MethodNotAllowed:
      description: Method Not Allowed. The request method doesn't match the supported
        API. This happens, for example, if the application calls the API with GET
        method but the endpoint accepts only POST.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    408RequestTimeout:
      description: Request Timeout. This indicates that the request from the client
        timed out and was not completed by the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    409Conflict:
      description: Conflict. The requested operation could not be performed due to
        a conflicting state that could not be resolved. This usually happens when
        a CREATE request was performed when there is a pre-existing resource with
        the same name, and also without one of the options orReplace/ifNotExists.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    410Gone:
      description: Gone. This error is primarily intended to assist the task of web
        maintenance by notifying the recipient that the resource is intentionally
        unavailable.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    415UnsupportedMediaType:
      description: The request header Content-Type includes an unsupported media type.
        The API supports application/json only. If none specified, the request payload
        is taken as JSON, but if any other media type is specified, this error is
        returned.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    429LimitExceeded:
      description: Limit Exceeded. The number of requests hit the rate limit. The
        application must slow down the frequency of hitting the API endpoints.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500InternalServerError:
      description: Internal Server Error. The server hit an unrecoverable system error.
        The response body may include the error code and message for further guidance.
        The application owner may need to reach out the customer support.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    503ServiceUnavailable:
      description: Service Unavailable. The request was not processed due to server
        side timeouts. The application may retry with backoff. The jittered backoff
        is recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    504GatewayTimeout:
      description: Gateway Timeout. The request was not processed due to server side
        timeouts. The application may retry with backoff. The jittered backoff is
        recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  x-stackQL-resources:
    warehouses:
      methods:
        create_warehouse:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        list_warehouses:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        fetch_warehouse:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_warehouse:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses~1{name}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_or_alter_warehouse:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses~1{name}/put'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        resume_warehouse:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses~1{name}:resume/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        suspend_warehouse:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses~1{name}:suspend/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        rename_warehouse:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses~1{name}:rename/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        abort_all_queries_on_warehouse:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses~1{name}:abort/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        use_warehouse:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses~1{name}:use/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        enable_warehouse:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses~1{name}:enable/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        disable_warehouse:
          operation:
            $ref: '#/paths/~1api~1v2~1warehouses~1{name}:disable/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/warehouses/methods/list_warehouses'
        - $ref: '#/components/x-stackQL-resources/warehouses/methods/fetch_warehouse'
        insert:
        - $ref: '#/components/x-stackQL-resources/warehouses/methods/create_warehouse'
        update: []
        delete:
        - $ref: '#/components/x-stackQL-resources/warehouses/methods/delete_warehouse'
        replace:
        - $ref: '#/components/x-stackQL-resources/warehouses/methods/create_or_alter_warehouse'
      id: snowflake.warehouse.warehouses
      name: warehouses
      title: Warehouses
security:
- KeyPair: []
- ExternalOAuth: []
- SnowflakeOAuth: []
