openapi: 3.0.0
servers:
- url: https://{organization}.snowflakecomputing.com/
  variables:
    organization:
      default: org-account
info:
  version: 0.0.1
  title: Snowflake Iceberg Table API
  description: The Snowflake Iceberg Table API is a REST API that you can use to access,
    update, and perform certain actions on Iceberg Table resource in a Snowflake database.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:
    get:
      summary: List iceberg tables
      tags:
      - iceberg-table
      description: "Lists the Apache Iceberg\u2122 tables for which you have access\
        \ privileges."
      operationId: listIcebergTables
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/like
      - $ref: common.yaml#/components/parameters/startsWith
      - $ref: common.yaml#/components/parameters/showLimit
      - $ref: common.yaml#/components/parameters/fromName
      - name: deep
        description: Optionally includes dependency information of the table.
        in: query
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IcebergTable'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    post:
      summary: Create a snowflake managed iceberg table (clone and undrop are separate
        subresources)
      tags:
      - iceberg-table
      description: Create a snowflake managed iceberg table (clone and undrop are
        separate subresources)
      operationId: createSnowflakeManagedIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      - $ref: common.yaml#/components/parameters/copyGrants
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTable'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:as-select:
    post:
      summary: Create a snowflake managed iceberg table as select
      tags:
      - iceberg-table
      description: Create a snowflake managed iceberg table as select
      operationId: createSnowflakeManagedIcebergTableAsSelect
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      - $ref: common.yaml#/components/parameters/copyGrants
      - name: query
        in: query
        required: true
        description: The SQL select query to run to set up the table values (and possibly
          columns).
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableAsSelect'
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:from-aws-glue-catalog:
    post:
      summary: Create an unmanaged iceberg table from AWS Glue catalog
      tags:
      - iceberg-table
      description: Create an unmanaged iceberg table from AWS Glue catalog
      operationId: createUnmanagedIcebergTableFromAWSGlueCatalog
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableFromAWSGlueCatalog'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:from-delta:
    post:
      summary: Create an unmanaged iceberg table from Delta
      tags:
      - iceberg-table
      description: Create an unmanaged iceberg table from Delta
      operationId: createUnmanagedIcebergTableFromDelta
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableFromDelta'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:from-iceberg-files:
    post:
      summary: Create an unmanaged iceberg table from Iceberg files
      tags:
      - iceberg-table
      description: Create an unmanaged iceberg table from Iceberg files
      operationId: createUnmanagedIcebergTableFromIcebergFiles
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableFromIcebergFiles'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:from-iceberg-rest:
    post:
      summary: Create an unmanaged iceberg table from Iceberg REST
      tags:
      - iceberg-table
      description: Create an unmanaged iceberg table from Iceberg REST
      operationId: createUnmanagedIcebergTableFromIcebergRest
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableFromIcebergRest'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:
    get:
      summary: Describe iceberg table
      tags:
      - iceberg-table
      description: Describe an iceberg table
      operationId: fetchIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergTable'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    delete:
      summary: Drop iceberg table
      tags:
      - iceberg-table
      description: Drop an iceberg table
      operationId: dropIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      - name: type
        description: Specifies whether the table can be dropped if foreign keys exist
          that reference the table.
        in: query
        required: false
        schema:
          type: string
          enum:
          - CASCADE
          - RESTRICT
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:resume-recluster:
    post:
      summary: Resume recluster of an iceberg table
      tags:
      - iceberg-table
      description: Resume recluster of an iceberg table (iceberg tables managed by
        an external catalog do not allow clustering)
      operationId: resumeReclusterIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:suspend-recluster:
    post:
      summary: Suspend recluster of an iceberg table
      tags:
      - iceberg-table
      description: Suspend recluster of an iceberg table (iceberg tables managed by
        an external catalog do not allow clustering)
      operationId: suspendReclusterIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:refresh:
    post:
      summary: Refreshes the metadata for an Apache Iceberg table that uses an external
        Iceberg catalog
      tags:
      - iceberg-table
      description: Refreshes the metadata for an Apache Iceberg table that uses an
        external Iceberg catalog
      operationId: refreshIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshIcebergTableRequest'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:convert-to-managed:
    post:
      summary: "Converts an Apache Iceberg\u2122 table that uses an external Iceberg\
        \ catalog into a table that uses Snowflake as the catalog"
      tags:
      - iceberg-table
      description: Convert unmanaged iceberg table to managed iceberg table
      operationId: convertToManagedIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertToManagedIcebergTableRequest'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:undrop:
    post:
      summary: Undrop iceberg table
      tags:
      - iceberg-table
      description: Undrop an iceberg table
      operationId: undropIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:clone:
    post:
      summary: Clone a snowflake managed iceberg table
      tags:
      - iceberg-table
      description: Clone a snowflake managed iceberg table
      operationId: cloneSnowflakeManagedIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/createMode
      - $ref: common.yaml#/components/parameters/copyGrants
      - name: targetDatabase
        in: query
        description: Database of the newly created table. Defaults to the source table's
          database.
        schema:
          $ref: ./common.yaml#/components/schemas/Identifier
      - name: targetSchema
        in: query
        description: Schema of the newly created table. Defaults to the source table's
          schema.
        schema:
          $ref: ./common.yaml#/components/schemas/Identifier
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableClone'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:create-like:
    post:
      summary: Create iceberg table like
      tags:
      - iceberg-table
      description: Creates a new table with the same column definitions as an existing
        table, but without copying data from the existing table.
      operationId: createSnowflakeManagedIcebergTableLike
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/createMode
      - $ref: common.yaml#/components/parameters/copyGrants
      - name: targetDatabase
        in: query
        description: Database of the newly created table. Defaults to the source table's
          database.
        schema:
          $ref: ./common.yaml#/components/schemas/Identifier
      - name: targetSchema
        in: query
        description: Schema of the newly created table. Defaults to the source table's
          schema.
        schema:
          $ref: ./common.yaml#/components/schemas/Identifier
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableLike'
components:
  schemas:
    RefreshIcebergTableRequest:
      type: object
      description: Request model for refreshing iceberg table
      properties:
        metadata_file_relative_path:
          type: string
          description: Specifies a metadata file path for a table created from Iceberg
            files in object storage.
    ConvertToManagedIcebergTableRequest:
      type: object
      description: Request model for convert to managed iceberg table
      properties:
        base_location:
          type: string
          description: The path to a directory where Snowflake can write data and
            metadata files for the table.
        storage_serialization_policy:
          type: string
          description: Specifies the storage serialization policy for the table.
          enum:
          - COMPATIBLE
          - OPTIMIZED
    IcebergTable:
      type: object
      description: A Snowflake iceberg table
      properties:
        name:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          description: Name of the iceberg table
        comment:
          type: string
          description: user comment associated to an object in the dictionary
        change_tracking:
          type: boolean
          description: True if change tracking is enabled, allowing streams and CHANGES
            to be used on the entity.
        max_data_extension_time_in_days:
          type: integer
          description: Maximum number of days to extend data retention beyond the
            retention period to prevent a stream becoming stale.
        external_volume:
          type: string
          description: Name of an external volume that will be used for persisted
            Iceberg metadata and data files.
        data_retention_time_in_days:
          type: integer
          description: number of days to retain the old version of deleted/updated
            data
        catalog_sync:
          type: string
          description: Name of the catalog integration to sync this table
        catalog:
          type: string
          description: Name of the catalog integration to use for iceberg tables
        storage_serialization_policy:
          type: string
          description: Storage serialization policy used for managed Iceberg table.
            This include encodings and compressions
          enum:
          - COMPATIBLE
          - OPTIMIZED
        created_on:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the iceberg table was created.
        database_name:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          readOnly: true
          description: Database in which the iceberg table is stored
        schema_name:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          readOnly: true
          description: Schema in which the iceberg table is stored
        owner:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          readOnly: true
          description: Role that owns the iceberg table
        owner_role_type:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          readOnly: true
          description: The type of role that owns the iceberg table
        iceberg_table_type:
          type: string
          readOnly: true
          description: Type of Iceberg table. UNMANAGED if the table is not managed
            by Snowflake. NOT ICEBERG otherwise.
        catalog_table_name:
          type: string
          description: Name of the table as recognized by the catalog.
        catalog_namespace:
          type: string
          description: "Catalog namespace for the table. The namespace defined when\
            \ the table was created. Otherwise, the default namespace associated with\
            \ the catalog integration used by the table. If you\u2019re syncing the\
            \ table to Snowflake Open Catalog, the default is null."
        can_write_metadata:
          type: string
          readOnly: true
          description: Signifies whether Snowflake can write metadata to the location
            specified by the file_path.
        cluster_by:
          type: array
          items:
            type: string
          description: Specifies one or more columns or column expressions in the
            table as the clustering key.
        columns:
          type: array
          items:
            $ref: '#/components/schemas/IcebergTableColumn'
        base_location:
          type: string
          description: The path to a directory where Snowflake can write data and
            metadata files for the table.
        replace_invalid_characters:
          type: boolean
          description: Specifies whether to replace invalid characters in the column
            names
        auto_refresh:
          readOnly: true
          type: boolean
          description: Specifies whether to automatically refresh the table metadata
        metadata_file_path:
          type: string
          description: Specifies the relative path of the Iceberg metadata file to
            use for column definitions.
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
      required:
      - name
    IcebergTableAsSelect:
      type: object
      description: Create iceberg table as select
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        columns:
          type: array
          items:
            $ref: '#/components/schemas/IcebergTableColumn'
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        cluster_by:
          type: array
          description: Specifies one or more columns or column expressions in the
            table as the clustering key
          items:
            type: string
        base_location:
          type: string
          description: Specifies the path to a directory where Snowflake can write
            data and metadata files for the table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
      - base_location
    IcebergTableLike:
      type: object
      description: Create iceberg table as select
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        cluster_by:
          type: array
          description: Specifies one or more columns or column expressions in the
            table as the clustering key
          items:
            type: string
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        base_location:
          type: string
          description: Specifies the path to a directory where Snowflake can write
            data and metadata files for the table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
    IcebergTableClone:
      type: object
      description: Clone iceberg table
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        point_of_time:
          $ref: common.yaml#/components/schemas/PointOfTime
      required:
      - name
    IcebergTableFromAWSGlueCatalog:
      type: object
      description: Create iceberg table from AWS Glue catalog
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        catalog_table_name:
          type: string
          description: Specifies the table name as recognized by the AWS Glue Data
            Catalog.
        catalog_namespace:
          type: string
          description: Specifies the catalog namespace for the table.
        replace_invalid_characters:
          type: boolean
          description: Specifies whether to replace invalid characters in the column
            names
        auto_refresh:
          type: boolean
          description: Specifies whether to automatically refresh the table metadata
        catalog:
          type: string
          description: Specifies the name of the catalog integration to use for the
            table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
      - catalog_table_name
    IcebergTableFromIcebergFiles:
      type: object
      description: Create iceberg table from Iceberg files
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        replace_invalid_characters:
          type: boolean
          description: Specifies whether to replace invalid characters in the column
            names
        metadata_file_path:
          type: string
          description: Specifies the relative path of the Iceberg metadata file to
            use for column definitions.
        catalog:
          type: string
          description: Specifies the name of the catalog integration to use for the
            table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
      - metadata_file_path
    IcebergTableFromDelta:
      type: object
      description: Create iceberg table from Delta
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        replace_invalid_characters:
          type: boolean
          description: Specifies whether to replace invalid characters in the column
            names
        base_location:
          type: string
          description: "Specifies a relative path from the table\u2019s EXTERNAL_VOLUME\
            \ location to a directory where Snowflake can access your Delta table\
            \ files."
        catalog:
          type: string
          description: Specifies the name of the catalog integration to use for the
            table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
      - base_location
    IcebergTableFromIcebergRest:
      type: object
      description: "Creates or replaces an Apache Iceberg\u2122 table in the current/specified\
        \ schema for an Iceberg REST catalog."
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        catalog_table_name:
          type: string
          description: Specifies the table name as recognized by the AWS Glue Data
            Catalog.
        catalog_namespace:
          type: string
          description: Specifies the catalog namespace for the table.
        replace_invalid_characters:
          type: boolean
          description: Specifies whether to replace invalid characters in the column
            names
        auto_refresh:
          type: boolean
          description: Specifies whether to automatically refresh the table metadata
        catalog:
          type: string
          description: Specifies the name of the catalog integration to use for the
            table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
      - catalog_table_name
    IcebergTableColumn:
      type: object
      description: A column in the snowflake catalog iceberg table
      properties:
        name:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          description: Column name
        datatype:
          type: string
          description: The data type for the column
        comment:
          type: string
          description: Specifies a comment for the column
        nullable:
          type: boolean
          description: Argument null return acceptance criteria
        default_value:
          type: string
          description: Default value for the column
      required:
      - name
      - datatype
    Constraint:
      type: object
      description: Constraints define integrity and consistency rules for data stored
        in tables.
      properties:
        name:
          type: string
          description: Name of the Constraint
        column_names:
          type: array
          items:
            type: string
            description: Column name for the constraint
        constraint_type:
          type: string
          description: Type of the constraint
      discriminator:
        propertyName: constraint_type
        mapping:
          PRIMARY KEY: PrimaryKey
          FOREIGN KEY: ForeignKey
          UNIQUE: UniqueKey
    PrimaryKey:
      allOf:
      - $ref: '#/components/schemas/Constraint'
      type: object
      description: A primary key is the column or columns that contain values that
        uniquely identify each row in a table.
    UniqueKey:
      allOf:
      - $ref: '#/components/schemas/Constraint'
      type: object
      description: Unique keys are columns in a table that uniquely identify items
        in the rows. This sounds a lot like a primary key, but the main difference
        is that unique keys can have NULL values.
    ForeignKey:
      allOf:
      - $ref: '#/components/schemas/Constraint'
      type: object
      description: Foreign keys link data in one table to the data in another table.
      properties:
        referenced_table_name:
          type: string
        referenced_column_names:
          type: array
          items:
            type: string
      required:
      - referenced_table_name
    description: If the identifier contains spaces or special characters, the entire
      string must be enclosed in double quotes. Identifiers enclosed in double quotes
      are also case-sensitive.
    Identifier:
      type: string
      description: A Snowflake object identifier.
      pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
      example: TEST_NAME
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message returned by the server
        code:
          type: string
          description: Error code.
        error_code:
          type: string
          description: Error code, same as `code` above. This property has been deprecated
            and will be removed in a future release, but is temporarily supported
            for for short-term backward compatibility.
        request_id:
          type: string
          description: Unique request ID.
      example:
        message: Compilation error!
        error_code: '390189'
        request_id: 01afef9d-0607-0550-0001-dd270c3902d7
    SuccessResponse:
      type: object
      description: Schema for all the success responses returned by the server.
      properties:
        status:
          type: string
          description: Message returned by the server.
      example:
        status: Request successfully completed
    SuccessAcceptedResponse:
      type: object
      description: Schema for a request in progress response returned by the server.
      properties:
        code:
          type: string
          description: Message code returned by the server.
        message:
          type: string
          description: Message returned by the server
        resultHandler:
          type: string
          description: Opaque result ID used for checking for request completion through
            one or more subsequent completion check operations.
      example:
        code: '392604'
        message: Request execution in progress. Use the provided location header or
          result handler ID to perform query monitoring and management.
    PointOfTime:
      type: object
      description: Point of time.
      required:
      - point_of_time_type
      properties:
        point_of_time_type:
          description: 'Type of the point of time. Possible values include:

            - `timestamp`: Exact time using the standard timezone format. Example:
            `2023-09-15 10:59:43`. - `offset`: Interval relative to ''now.'' Example:
            `1 day`. - `statement`: ID of a query statement to use as the reference
            point for <a href=https://docs.snowflake.com/en/sql-reference/sql/create-clone#time-travel-parameters>Time
            Travel</a>.

            For more information, see https://docs.snowflake.com/en/sql-reference/data-types-datetime.'
          type: string
          examples:
            timestamp:
              value: '2023-09-15 10:59:43'
            offset:
              value: 20 ms
        reference:
          type: string
          description: Relation to the point of time. Currently, the API supports
            `at` and `before`.
      discriminator:
        propertyName: point_of_time_type
        mapping:
          timestamp: PointOfTimeTimestamp
          offset: PointOfTimeOffset
          statement: PointOfTimeStatement
    PointOfTimeTimestamp:
      description: Point of time identified by a timestamp.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        timestamp:
          type: string
          description: Timestamp of the point of time.
    PointOfTimeOffset:
      description: Point of time identified by an offset in reference to the current
        time, such as `10 min`.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      examples:
        month:
          value: 2 months
        milliseconds:
          value: 20 ms
      properties:
        offset:
          type: string
          description: 'Offset from the point of time. Example: `1 year`'
    PointOfTimeStatement:
      description: Point of time indicating when a statement was executed.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        statement:
          type: string
          description: Statement of the point of time.
    Parameter:
      description: Snowflake parameter defined at the system, account, user, session,
        or object level.
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Parameter name.
        value:
          type: string
          description: Parameter value.
        defaultValue:
          type: string
          description: Default parameter value.
        dataType:
          type: string
          description: Data type of the parameter value. Either BOOLEAN, NUMBER, FLOAT,
            or STRING.
        level:
          type: string
          description: Level at which parameter is defined.
        description:
          type: string
          description: Parameter description.
      example:
        name: SAMPLE_SNOWAPI_PARAM
        value: true
        defaultValue: false
        dataType: boolean
        level: ACCOUNT
        description: Sample snowflake parameter.
    TargetLag:
      type: object
      description: Specifies the schedule for periodically refreshing the dynamic
        table.
      properties:
        type:
          description: Type of lag, can be either USER_DEFINED or DOWNSTREAM.
          type: string
      discriminator:
        propertyName: type
        mapping:
          USER_DEFINED: UserDefinedLag
          DOWNSTREAM: DownstreamLag
    UserDefinedLag:
      description: User-defined target lag.
      allOf:
      - $ref: '#/components/schemas/TargetLag'
      properties:
        seconds:
          type: integer
          format: int64
          description: Target lag time in seconds.
      example:
        seconds: 3600
      required:
      - seconds
    DownstreamLag:
      description: Downstream target lag
      allOf:
      - $ref: '#/components/schemas/TargetLag'
  securitySchemes:
    KeyPair:
      $ref: common.yaml#/components/securitySchemes/KeyPair
    ExternalOAuth:
      $ref: common.yaml#/components/securitySchemes/ExternalOAuth
    SnowflakeOAuth:
      $ref: common.yaml#/components/securitySchemes/SnowflakeOAuth
  parameters:
    database:
      name: database
      description: Identifier (i.e. name) for the database to which the resource belongs.
        You can use the `/api/v2/databases` GET request to get a list of available
        databases.
      required: true
      in: path
      schema:
        example: TEST_DB
        $ref: ./common.yaml#/components/schemas/Identifier
    schema:
      name: schema
      description: Identifier (i.e. name) for the schema to which the resource belongs.
        You can use the `/api/v2/databases/{database}/schemas` GET request to get
        a list of available schemas for the specified database.
      required: true
      in: path
      schema:
        example: TEST_SCHEMA
        $ref: ./common.yaml#/components/schemas/Identifier
    application:
      name: application
      description: Identifier (i.e. name) for the application to which the resource
        belongs. You can use the `/api/v2/applications/{application}` GET request
        to get a list of available applications.
      required: true
      in: path
      schema:
        example: TEST_APPLICATION
        $ref: ./common.yaml#/components/schemas/Identifier
    name:
      name: name
      description: Identifier (i.e. name) for the resource.
      required: true
      in: path
      schema:
        example: TEST_NAME
        $ref: ./common.yaml#/components/schemas/Identifier
    nameWithArgs:
      name: nameWithArgs
      description: Function's name with Args
      required: true
      in: path
      schema:
        type: string
        example: foo(a number, b number)
    createMode:
      name: createMode
      description: 'Query parameter allowing support for different modes of resource
        creation. Possible values include:

        - `errorIfExists`: Throws an error if you try to create a resource that already
        exists.

        - `orReplace`: Automatically replaces the existing resource with the current
        one.

        - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent
        resource.'
      in: query
      schema:
        type: string
        enum:
        - errorIfExists
        - orReplace
        - ifNotExists
        example: ifNotExists
        default: errorIfExists
    mode:
      name: mode
      description: 'Query parameter determines whether the revoke operation succeeds
        or fails for the privileges, based on the whether the privileges had been
        re-granted to another role.

        - restrict: If the privilege being revoked has been re-granted to another
        role, the REVOKE command fails.

        - cascade: If the privilege being revoked has been re-granted, the REVOKE
        command recursively revokes these dependent grants. If the same privilege
        on an object has been granted to the target role by a different grantor (parallel
        grant), that grant is not affected and the target role retains the privilege.'
      in: query
      schema:
        type: string
        enum:
        - restrict
        - cascade
        example: restrict
    ifExists:
      name: ifExists
      description: 'Query parameter that specifies how to handle the request for a
        resource that does not exist:

        - `true`: The endpoint does not throw an error if the resource does not exist.
        It returns a 200 success response, but does not take any action on the resource.

        - `false`: The endpoint throws an error if the resource doesn''t exist.'
      in: query
      schema:
        type: boolean
        example: true
        default: false
    like:
      name: like
      description: Query parameter to filter the command output by resource name.
        Uses case-insensitive pattern matching, with support for SQL wildcard characters.
      in: query
      schema:
        type: string
        example: test_%
    pattern:
      name: pattern
      description: A query parameter that filters the command output by a regular
        expression pattern.
      in: query
      schema:
        type: string
        example: .*data_0.*
    startsWith:
      name: startsWith
      description: Query parameter to filter the command output based on the string
        of characters that appear at the beginning of the object name. Uses case-sensitive
        pattern matching.
      in: query
      schema:
        type: string
        example: test
    rootOnly:
      name: rootOnly
      description: Query parameter to filter the command output to return only root
        resources (resources with no predecessors).
      in: query
      schema:
        type: boolean
        example: false
        default: false
    showLimit:
      name: showLimit
      description: Query parameter to limit the maximum number of rows returned by
        a command.
      in: query
      schema:
        type: integer
        example: 10
        minimum: 1
        maximum: 10000
    fromName:
      name: fromName
      description: Query parameter to enable fetching rows only following the first
        row whose object name matches the specified string. Case-sensitive and does
        not have to be the full name.
      in: query
      schema:
        type: string
        example: from_test
    copyGrants:
      name: copyGrants
      description: Query parameter to enable copy grants when creating the object.
      in: query
      schema:
        type: boolean
        example: false
        default: false
    asyncExec:
      name: asyncExec
      in: query
      description: Asynchronous execution enable/disable. Default is disable.
      schema:
        type: boolean
        default: false
    sessionId:
      name: sessionId
      description: Unique ID for the current session.
      required: true
      in: path
      schema:
        type: integer
        format: uuid
        example: 524514326772799
    content-type:
      name: Content-Type
      description: Type of content for the resource. Currently supports `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    accept:
      name: Accept
      description: Type of data format accepted by the resource. Currently supports
        `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    x-snowflake-authorization-token-type:
      name: X-Snowflake-Authorization-Token-Type
      description: Type of the Snowflake authorization token. Currently, keypair-jwt
        (`KEYPAIR_JWT`) and OAuth tokens are supported.
      in: header
      schema:
        type: string
        enum:
        - KEYPAIR_JWT
        - OAUTH
    x-sfc-session:
      name: X-Sfc-Session
      description: Token for the current Snowflake session.
      in: header
      required: false
      schema:
        type: string
        description: Snowflake session token.
        example: ver:3-hint:1000-ABCD=
  headers:
    X-Snowflake-Request-ID:
      description: Unique ID of the API request.
      schema:
        type: string
        format: uuid
    Link:
      description: Links to the page of results (e.g. the first page, the last page,
        etc.). The header can include multiple 'url' entries with different 'rel'
        attribute values that specify the page to return ('first', 'next', 'prev',
        and 'last').
      schema:
        type: string
        example: </api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=0>; rel="first",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=1>;
          rel="next",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=9>;
          rel="last"
  responses:
    200SuccessResponse:
      description: Successful request.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    201SuccessCreatedResponse:
      description: Successfully created a new resource on the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    202SuccessAcceptedResponse:
      headers:
        Location:
          schema:
            type: string
            description: Relative path for checking request status or getting the
              result, if available.
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      description: Successfully accepted the request, but it is not completed yet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessAcceptedResponse'
    400BadRequest:
      description: Bad Request. The request payload is invalid or malformed. This
        happens if the application didn't send the correct request payload. The response
        body may include the error code and message indicating the actual cause. The
        application must reconstruct the request body for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    401Unauthorized:
      description: Unauthorized. The request is not authorized. This happens if the
        attached access token is invalid or missing. The response body may include
        the error code and message indicating the actual cause, e.g., expired, invalid
        token. The application must obtain a new access token for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    403Forbidden:
      description: Forbidden. The request is forbidden. This can also happen if the
        request is made even if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: Not Found. The request endpoint is not valid. This happens if the
        API endpoint does not exist, or if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    405MethodNotAllowed:
      description: Method Not Allowed. The request method doesn't match the supported
        API. This happens, for example, if the application calls the API with GET
        method but the endpoint accepts only POST.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    408RequestTimeout:
      description: Request Timeout. This indicates that the request from the client
        timed out and was not completed by the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    409Conflict:
      description: Conflict. The requested operation could not be performed due to
        a conflicting state that could not be resolved. This usually happens when
        a CREATE request was performed when there is a pre-existing resource with
        the same name, and also without one of the options orReplace/ifNotExists.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    410Gone:
      description: Gone. This error is primarily intended to assist the task of web
        maintenance by notifying the recipient that the resource is intentionally
        unavailable.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    415UnsupportedMediaType:
      description: The request header Content-Type includes an unsupported media type.
        The API supports application/json only. If none specified, the request payload
        is taken as JSON, but if any other media type is specified, this error is
        returned.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    429LimitExceeded:
      description: Limit Exceeded. The number of requests hit the rate limit. The
        application must slow down the frequency of hitting the API endpoints.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500InternalServerError:
      description: Internal Server Error. The server hit an unrecoverable system error.
        The response body may include the error code and message for further guidance.
        The application owner may need to reach out the customer support.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    503ServiceUnavailable:
      description: Service Unavailable. The request was not processed due to server
        side timeouts. The application may retry with backoff. The jittered backoff
        is recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    504GatewayTimeout:
      description: Gateway Timeout. The request was not processed due to server side
        timeouts. The application may retry with backoff. The jittered backoff is
        recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  security:
  - KeyPair: []
  - ExternalOAuth: []
  - SnowflakeOAuth: []
  x-stackQL-resources:
    iceberg_tables:
      methods:
        list_iceberg_tables:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_snowflake_managed_iceberg_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_snowflake_managed_iceberg_table_as_select:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables:as-select/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_unmanaged_iceberg_table_from_aws_glue_catalog:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables:from-aws-glue-catalog/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_unmanaged_iceberg_table_from_delta:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables:from-delta/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_unmanaged_iceberg_table_from_iceberg_files:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables:from-iceberg-files/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_unmanaged_iceberg_table_from_iceberg_rest:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables:from-iceberg-rest/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        fetch_iceberg_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        drop_iceberg_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables~1{name}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        resume_recluster_iceberg_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables~1{name}:resume-recluster/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        suspend_recluster_iceberg_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables~1{name}:suspend-recluster/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        refresh_iceberg_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables~1{name}:refresh/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        convert_to_managed_iceberg_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables~1{name}:convert-to-managed/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        undrop_iceberg_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables~1{name}:undrop/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        clone_snowflake_managed_iceberg_table:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables~1{name}:clone/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        create_snowflake_managed_iceberg_table_like:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1iceberg-tables~1{name}:create-like/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/iceberg_tables/methods/list_iceberg_tables'
        - $ref: '#/components/x-stackQL-resources/iceberg_tables/methods/fetch_iceberg_table'
        insert:
        - $ref: '#/components/x-stackQL-resources/iceberg_tables/methods/create_snowflake_managed_iceberg_table'
        update: []
        delete:
        - $ref: '#/components/x-stackQL-resources/iceberg_tables/methods/drop_iceberg_table'
        replace: []
security:
- KeyPair: []
- ExternalOAuth: []
- SnowflakeOAuth: []
