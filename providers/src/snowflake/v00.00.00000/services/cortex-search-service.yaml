openapi: 3.0.1
info:
  title: Cortex Search REST API
  description: OpenAPI 3.0 specification for the Cortex Search REST API
  version: 0.1.0
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/databases/{database}/schemas/{schema}/cortex-search-services:
    get:
      operationId: listCortexSearchServices
      summary: List cortex search services
      description: Lists the cortex search services under the database and schema.
      tags:
      - cortex-search-service
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/like
      - $ref: common.yaml#/components/parameters/fromName
      - $ref: common.yaml#/components/parameters/showLimit
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CortexSearchService'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    post:
      operationId: createCortexSearchService
      summary: Create a cortex search service
      description: Create a cortex search service, with standard create modifiers
        as query parameters. See the Cortex Search Service component definition for
        what is required to be provided in the request body.
      tags:
      - cortex-search-service
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
              - $ref: '#/components/schemas/CortexSearchService'
              - type: object
              - required:
                - name
                - search_column
                - target_lag
                - warehouse
                - definition
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/cortex-search-services/{name}:
    get:
      operationId: fetchCortexSearchService
      summary: Fetch a cortex search service.
      description: Fetch a Cortex Search Service.
      tags:
      - cortex-search-service
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CortexSearchService'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    delete:
      operationId: deleteCortexSearchService
      summary: Delete a cortex search service
      description: Delete a cortex search service with the given name. If ifExists
        is used, the operation will succeed even if the object does not exist. Otherwise,
        there will be a failure if the drop is unsuccessful.
      tags:
      - cortex search service
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/cortex-search-services/{service_name}:query:
    post:
      operationId: queryCortexSearchService
      summary: Query a Cortex Search Service.
      description: Query a Cortex Search Service to get search results.
      tags:
      - cortex-search-service
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - in: path
        name: service_name
        required: true
        schema:
          type: string
        description: The name of the Cortex Search Service.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/cortex-search-services/{name}:suspend:
    post:
      operationId: suspendCortexSearchService
      summary: Suspend a cortex search service.
      description: Suspends one or both of the indexing or serving targets of a cortex
        search service.
      tags:
      - cortex-search-service
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      - $ref: '#/components/parameters/suspendResumeTarget'
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/cortex-search-services/{name}:resume:
    post:
      operationId: resumeCortexSearchService
      description: Resume the cortex search service
      summary: Resume the cortex search service
      tags:
      - cortex-search-service
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      - $ref: '#/components/parameters/suspendResumeTarget'
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
components:
  parameters:
    suspendResumeTarget:
      name: target
      description: Query parameter that identifies the target to which suspension
        or resumption of the cortex search service should be applied.
      in: query
      schema:
        type: string
        enum:
        - indexing
        - INDEXING
        - serving
        - SERVING
        example: indexing
    database:
      name: database
      description: Identifier (i.e. name) for the database to which the resource belongs.
        You can use the `/api/v2/databases` GET request to get a list of available
        databases.
      required: true
      in: path
      schema:
        example: TEST_DB
        $ref: ./common.yaml#/components/schemas/Identifier
    schema:
      name: schema
      description: Identifier (i.e. name) for the schema to which the resource belongs.
        You can use the `/api/v2/databases/{database}/schemas` GET request to get
        a list of available schemas for the specified database.
      required: true
      in: path
      schema:
        example: TEST_SCHEMA
        $ref: ./common.yaml#/components/schemas/Identifier
    application:
      name: application
      description: Identifier (i.e. name) for the application to which the resource
        belongs. You can use the `/api/v2/applications/{application}` GET request
        to get a list of available applications.
      required: true
      in: path
      schema:
        example: TEST_APPLICATION
        $ref: ./common.yaml#/components/schemas/Identifier
    name:
      name: name
      description: Identifier (i.e. name) for the resource.
      required: true
      in: path
      schema:
        example: TEST_NAME
        $ref: ./common.yaml#/components/schemas/Identifier
    nameWithArgs:
      name: nameWithArgs
      description: Function's name with Args
      required: true
      in: path
      schema:
        type: string
        example: foo(a number, b number)
    createMode:
      name: createMode
      description: 'Query parameter allowing support for different modes of resource
        creation. Possible values include:

        - `errorIfExists`: Throws an error if you try to create a resource that already
        exists.

        - `orReplace`: Automatically replaces the existing resource with the current
        one.

        - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent
        resource.'
      in: query
      schema:
        type: string
        enum:
        - errorIfExists
        - orReplace
        - ifNotExists
        example: ifNotExists
        default: errorIfExists
    mode:
      name: mode
      description: 'Query parameter determines whether the revoke operation succeeds
        or fails for the privileges, based on the whether the privileges had been
        re-granted to another role.

        - restrict: If the privilege being revoked has been re-granted to another
        role, the REVOKE command fails.

        - cascade: If the privilege being revoked has been re-granted, the REVOKE
        command recursively revokes these dependent grants. If the same privilege
        on an object has been granted to the target role by a different grantor (parallel
        grant), that grant is not affected and the target role retains the privilege.'
      in: query
      schema:
        type: string
        enum:
        - restrict
        - cascade
        example: restrict
    ifExists:
      name: ifExists
      description: 'Query parameter that specifies how to handle the request for a
        resource that does not exist:

        - `true`: The endpoint does not throw an error if the resource does not exist.
        It returns a 200 success response, but does not take any action on the resource.

        - `false`: The endpoint throws an error if the resource doesn''t exist.'
      in: query
      schema:
        type: boolean
        example: true
        default: false
    like:
      name: like
      description: Query parameter to filter the command output by resource name.
        Uses case-insensitive pattern matching, with support for SQL wildcard characters.
      in: query
      schema:
        type: string
        example: test_%
    pattern:
      name: pattern
      description: A query parameter that filters the command output by a regular
        expression pattern.
      in: query
      schema:
        type: string
        example: .*data_0.*
    startsWith:
      name: startsWith
      description: Query parameter to filter the command output based on the string
        of characters that appear at the beginning of the object name. Uses case-sensitive
        pattern matching.
      in: query
      schema:
        type: string
        example: test
    rootOnly:
      name: rootOnly
      description: Query parameter to filter the command output to return only root
        resources (resources with no predecessors).
      in: query
      schema:
        type: boolean
        example: false
        default: false
    showLimit:
      name: showLimit
      description: Query parameter to limit the maximum number of rows returned by
        a command.
      in: query
      schema:
        type: integer
        example: 10
        minimum: 1
        maximum: 10000
    fromName:
      name: fromName
      description: Query parameter to enable fetching rows only following the first
        row whose object name matches the specified string. Case-sensitive and does
        not have to be the full name.
      in: query
      schema:
        type: string
        example: from_test
    copyGrants:
      name: copyGrants
      description: Query parameter to enable copy grants when creating the object.
      in: query
      schema:
        type: boolean
        example: false
        default: false
    asyncExec:
      name: asyncExec
      in: query
      description: Asynchronous execution enable/disable. Default is disable.
      schema:
        type: boolean
        default: false
    sessionId:
      name: sessionId
      description: Unique ID for the current session.
      required: true
      in: path
      schema:
        type: integer
        format: uuid
        example: 524514326772799
    content-type:
      name: Content-Type
      description: Type of content for the resource. Currently supports `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    accept:
      name: Accept
      description: Type of data format accepted by the resource. Currently supports
        `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    x-snowflake-authorization-token-type:
      name: X-Snowflake-Authorization-Token-Type
      description: Type of the Snowflake authorization token. Currently, keypair-jwt
        (`KEYPAIR_JWT`) and OAuth tokens are supported.
      in: header
      schema:
        type: string
        enum:
        - KEYPAIR_JWT
        - OAUTH
    x-sfc-session:
      name: X-Sfc-Session
      description: Token for the current Snowflake session.
      in: header
      required: false
      schema:
        type: string
        description: Snowflake session token.
        example: ver:3-hint:1000-ABCD=
  schemas:
    QueryRequest:
      type: object
      description: A search query and additional parameters for search.
      properties:
        query:
          description: Unstructured text query.  Exactly one of 'query' or 'queries'
            must be specified.
          type: string
        queries:
          description: A search query expressed as a collection of multiple column-level
            queries.  Exactly one of 'query' or 'queries' must be specified.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ColumnQuery'
        columns:
          description: List of columns to return.
          type: array
          items:
            type: string
        filter:
          description: Filter query.
          type: object
        limit:
          description: Max number of results to return.
          type: integer
          default: 10
        scoring_config:
          $ref: '#/components/schemas/ScoringConfig'
        experimental:
          description: reserved
          type: object
          additionalProperties: true
      required:
      - columns
    ScoringConfig:
      type: object
      description: reserved
      properties:
        functions:
          $ref: '#/components/schemas/Functions'
        reranker:
          $ref: '#/components/schemas/Reranker'
        weights:
          $ref: '#/components/schemas/Weights'
    Weights:
      type: object
      description: Weights to apply to each scoring component.
      properties:
        texts:
          description: Weight to apply to all text-specific columns.
          type: number
          example: 0.5
        vectors:
          description: Weight to apply to all vector-specific columns.
          type: number
          example: 0.5
        reranker:
          description: Weight to apply to reranker-specific scoring component.
          type: number
          example: 0.5
    Functions:
      type: object
      description: Functions to apply for scoring this request.
      properties:
        numeric_boosts:
          type: array
          items:
            $ref: '#/components/schemas/NumericBoost'
        time_decays:
          type: array
          items:
            $ref: '#/components/schemas/TimeDecay'
        text_boosts:
          type: array
          items:
            $ref: '#/components/schemas/TextBoost'
        vector_boosts:
          type: array
          items:
            $ref: '#/components/schemas/VectorBoost'
    Column:
      type: string
      description: Column to apply this function to.
    NumericBoost:
      type: object
      properties:
        column:
          $ref: '#/components/schemas/Column'
        weight:
          type: number
          description: Weight to apply for boosting this numerical column. It will
            be normalized across all scored columns specified in the scoring config
            so that all weights sum to 1. If a weight is not provided, the weight
            defaults to 1 pre-normalization.
          example: 0.5
      required:
      - column
    TimeDecay:
      type: object
      properties:
        column:
          $ref: '#/components/schemas/Column'
        weight:
          type: number
          description: Weight to apply for decaying this timestamp column. Normalized
            across all scored columns in the scoring config so that all weights sum
            to 1. If a weight is not provided, the weight defaults to 1 pre-normalization.
          example: 0.5
        limit_hours:
          type: number
          description: Optional limit in hours after which the decay does not apply.
          example: 24
        now:
          type: string
          format: date-time
          description: Optional reference timestamp to calculate decay from.
          example: '2022-01-01T00:00:00Z'
      required:
      - column
    TextBoost:
      type: object
      properties:
        column:
          $ref: '#/components/schemas/Column'
        weight:
          description: Weight to apply for boosting this text column.
          type: number
          example: 0.5
    VectorBoost:
      type: object
      properties:
        column:
          $ref: '#/components/schemas/Column'
        weight:
          description: Weight to apply for boosting this vector column.
          type: number
          example: 0.5
    Reranker:
      type: string
      description: Model to use for the reranker, or "none" if the reranker should
        be turned off. If excluded or null, the default reranker is used.
      example: none
    ColumnQuery:
      description: Query specification of a given column. Exactly one of 'text' or
        'vector' must be specified.
      type: object
      properties:
        text:
          description: Unstructured text query for querying a text index.
          type: string
        vector:
          description: Query embedding vector. Must be computed using the same model
            as used for embedding the column being queried.
          type: array
          items:
            type: number
            format: float
    QueryResponse:
      type: object
      description: Search results.
      properties:
        results:
          type: array
          description: List of result rows.
          items:
            type: object
            additionalProperties: true
            description: Map of column names to bytes.
        request_id:
          type: string
          description: ID of the request.
      required:
      - results
      - request_id
    CortexSearchService:
      type: object
      description: A Snowflake cortex search service object.
      properties:
        name:
          type: string
          description: Specifies the name for the cortex search service, must be unique
            for the schema in which the cortex search service is created
        search_column:
          type: string
          description: Specifies the name of the search column for the cortex search
            service.
        columns:
          type: array
          items:
            type: string
          description: Specifies all columns included in the cortex search service
            and that can be returned in search queries.
        attribute_columns:
          type: array
          items:
            type: string
          description: Specifies the attribute columns, which can be referenced in
            filters in search queries to the cortex search service.
        target_lag:
          $ref: common.yaml#/components/schemas/TargetLag
          description: Specifies the schedule for periodically refreshing the cortex
            search service.
        warehouse:
          type: string
          description: Specifies the name of the warehouse that provides the compute
            resources for refreshing the cortex search service
          example: test_wh
        definition:
          type: string
          description: Specifies the definition (source query) used to create the
            cortex search service
          example: SELECT col1, col2 FROM foo
        comment:
          type: string
          description: Specifies a comment for the cortex search service
        created_on:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the cortex search service was created.
        database_name:
          type: string
          readOnly: true
          description: Database in which the cortex search service is stored
        schema_name:
          type: string
          readOnly: true
          description: Schema in which the cortex search service is stored
        source_data_num_rows:
          type: integer
          format: int64
          readOnly: true
          description: Number of rows in the materialized source data feeding into
            the cortex search service.
        data_timestamp:
          type: string
          format: date-time
          readOnly: true
          description: Date and time as of which data existent in base tables is now
            serving.
        indexing_state:
          $ref: '#/components/schemas/SchedulingState'
          description: Current state of the indexing pipeline for the cortex search
            service; one of 'SUSPENDED' or 'ACTIVE'.
        serving_state:
          $ref: '#/components/schemas/SchedulingState'
          description: Whether the cortex search service is currently actively serving;
            one of 'SUSPENDED' or 'ACTIVE'.
        indexing_error:
          type: string
          readOnly: true
          description: Error encountered during the latest indexing pipeline of the
            cortex search service, if any.
        serving_data_bytes:
          type: integer
          format: int64
          readOnly: true
          description: Size of the serving index, in bytes.
    SchedulingState:
      type: string
      enum:
      - ACTIVE
      - SUSPENDED
      - INITIALIZING
    description: If the identifier contains spaces or special characters, the entire
      string must be enclosed in double quotes. Identifiers enclosed in double quotes
      are also case-sensitive.
    Identifier:
      type: string
      description: A Snowflake object identifier.
      pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
      example: TEST_NAME
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message returned by the server
        code:
          type: string
          description: Error code.
        error_code:
          type: string
          description: Error code, same as `code` above. This property has been deprecated
            and will be removed in a future release, but is temporarily supported
            for for short-term backward compatibility.
        request_id:
          type: string
          description: Unique request ID.
      example:
        message: Compilation error!
        error_code: '390189'
        request_id: 01afef9d-0607-0550-0001-dd270c3902d7
    SuccessResponse:
      type: object
      description: Schema for all the success responses returned by the server.
      properties:
        status:
          type: string
          description: Message returned by the server.
      example:
        status: Request successfully completed
    SuccessAcceptedResponse:
      type: object
      description: Schema for a request in progress response returned by the server.
      properties:
        code:
          type: string
          description: Message code returned by the server.
        message:
          type: string
          description: Message returned by the server
        resultHandler:
          type: string
          description: Opaque result ID used for checking for request completion through
            one or more subsequent completion check operations.
      example:
        code: '392604'
        message: Request execution in progress. Use the provided location header or
          result handler ID to perform query monitoring and management.
    PointOfTime:
      type: object
      description: Point of time.
      required:
      - point_of_time_type
      properties:
        point_of_time_type:
          description: 'Type of the point of time. Possible values include:

            - `timestamp`: Exact time using the standard timezone format. Example:
            `2023-09-15 10:59:43`. - `offset`: Interval relative to ''now.'' Example:
            `1 day`. - `statement`: ID of a query statement to use as the reference
            point for <a href=https://docs.snowflake.com/en/sql-reference/sql/create-clone#time-travel-parameters>Time
            Travel</a>.

            For more information, see https://docs.snowflake.com/en/sql-reference/data-types-datetime.'
          type: string
          examples:
            timestamp:
              value: '2023-09-15 10:59:43'
            offset:
              value: 20 ms
        reference:
          type: string
          description: Relation to the point of time. Currently, the API supports
            `at` and `before`.
      discriminator:
        propertyName: point_of_time_type
        mapping:
          timestamp: PointOfTimeTimestamp
          offset: PointOfTimeOffset
          statement: PointOfTimeStatement
    PointOfTimeTimestamp:
      description: Point of time identified by a timestamp.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        timestamp:
          type: string
          description: Timestamp of the point of time.
    PointOfTimeOffset:
      description: Point of time identified by an offset in reference to the current
        time, such as `10 min`.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      examples:
        month:
          value: 2 months
        milliseconds:
          value: 20 ms
      properties:
        offset:
          type: string
          description: 'Offset from the point of time. Example: `1 year`'
    PointOfTimeStatement:
      description: Point of time indicating when a statement was executed.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        statement:
          type: string
          description: Statement of the point of time.
    Parameter:
      description: Snowflake parameter defined at the system, account, user, session,
        or object level.
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Parameter name.
        value:
          type: string
          description: Parameter value.
        defaultValue:
          type: string
          description: Default parameter value.
        dataType:
          type: string
          description: Data type of the parameter value. Either BOOLEAN, NUMBER, FLOAT,
            or STRING.
        level:
          type: string
          description: Level at which parameter is defined.
        description:
          type: string
          description: Parameter description.
      example:
        name: SAMPLE_SNOWAPI_PARAM
        value: true
        defaultValue: false
        dataType: boolean
        level: ACCOUNT
        description: Sample snowflake parameter.
    TargetLag:
      type: object
      description: Specifies the schedule for periodically refreshing the dynamic
        table.
      properties:
        type:
          description: Type of lag, can be either USER_DEFINED or DOWNSTREAM.
          type: string
      discriminator:
        propertyName: type
        mapping:
          USER_DEFINED: UserDefinedLag
          DOWNSTREAM: DownstreamLag
    UserDefinedLag:
      description: User-defined target lag.
      allOf:
      - $ref: '#/components/schemas/TargetLag'
      properties:
        seconds:
          type: integer
          format: int64
          description: Target lag time in seconds.
      example:
        seconds: 3600
      required:
      - seconds
    DownstreamLag:
      description: Downstream target lag
      allOf:
      - $ref: '#/components/schemas/TargetLag'
  securitySchemes:
    KeyPair:
      $ref: common.yaml#/components/securitySchemes/KeyPair
    ExternalOAuth:
      $ref: common.yaml#/components/securitySchemes/ExternalOAuth
    SnowflakeOAuth:
      $ref: common.yaml#/components/securitySchemes/SnowflakeOAuth
  headers:
    X-Snowflake-Request-ID:
      description: Unique ID of the API request.
      schema:
        type: string
        format: uuid
    Link:
      description: Links to the page of results (e.g. the first page, the last page,
        etc.). The header can include multiple 'url' entries with different 'rel'
        attribute values that specify the page to return ('first', 'next', 'prev',
        and 'last').
      schema:
        type: string
        example: </api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=0>; rel="first",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=1>;
          rel="next",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=9>;
          rel="last"
  responses:
    200SuccessResponse:
      description: Successful request.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    201SuccessCreatedResponse:
      description: Successfully created a new resource on the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    202SuccessAcceptedResponse:
      headers:
        Location:
          schema:
            type: string
            description: Relative path for checking request status or getting the
              result, if available.
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      description: Successfully accepted the request, but it is not completed yet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessAcceptedResponse'
    400BadRequest:
      description: Bad Request. The request payload is invalid or malformed. This
        happens if the application didn't send the correct request payload. The response
        body may include the error code and message indicating the actual cause. The
        application must reconstruct the request body for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    401Unauthorized:
      description: Unauthorized. The request is not authorized. This happens if the
        attached access token is invalid or missing. The response body may include
        the error code and message indicating the actual cause, e.g., expired, invalid
        token. The application must obtain a new access token for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    403Forbidden:
      description: Forbidden. The request is forbidden. This can also happen if the
        request is made even if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: Not Found. The request endpoint is not valid. This happens if the
        API endpoint does not exist, or if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    405MethodNotAllowed:
      description: Method Not Allowed. The request method doesn't match the supported
        API. This happens, for example, if the application calls the API with GET
        method but the endpoint accepts only POST.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    408RequestTimeout:
      description: Request Timeout. This indicates that the request from the client
        timed out and was not completed by the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    409Conflict:
      description: Conflict. The requested operation could not be performed due to
        a conflicting state that could not be resolved. This usually happens when
        a CREATE request was performed when there is a pre-existing resource with
        the same name, and also without one of the options orReplace/ifNotExists.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    410Gone:
      description: Gone. This error is primarily intended to assist the task of web
        maintenance by notifying the recipient that the resource is intentionally
        unavailable.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    415UnsupportedMediaType:
      description: The request header Content-Type includes an unsupported media type.
        The API supports application/json only. If none specified, the request payload
        is taken as JSON, but if any other media type is specified, this error is
        returned.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    429LimitExceeded:
      description: Limit Exceeded. The number of requests hit the rate limit. The
        application must slow down the frequency of hitting the API endpoints.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500InternalServerError:
      description: Internal Server Error. The server hit an unrecoverable system error.
        The response body may include the error code and message for further guidance.
        The application owner may need to reach out the customer support.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    503ServiceUnavailable:
      description: Service Unavailable. The request was not processed due to server
        side timeouts. The application may retry with backoff. The jittered backoff
        is recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    504GatewayTimeout:
      description: Gateway Timeout. The request was not processed due to server side
        timeouts. The application may retry with backoff. The jittered backoff is
        recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  security:
  - KeyPair: []
  - ExternalOAuth: []
  - SnowflakeOAuth: []
  x-stackQL-resources:
    search_services:
      methods:
        list_cortex_search_services:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1cortex-search-services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_cortex_search_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1cortex-search-services/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        fetch_cortex_search_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1cortex-search-services~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_cortex_search_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1cortex-search-services~1{name}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        query_cortex_search_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1cortex-search-services~1{service_name}:query/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        suspend_cortex_search_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1cortex-search-services~1{name}:suspend/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        resume_cortex_search_service:
          operation:
            $ref: '#/paths/~1api~1v2~1databases~1{database}~1schemas~1{schema}~1cortex-search-services~1{name}:resume/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
      sqlVerbs:
        select:
        - $ref: '#/components/x-stackQL-resources/search_services/methods/list_cortex_search_services'
        - $ref: '#/components/x-stackQL-resources/search_services/methods/fetch_cortex_search_service'
        - $ref: '#/components/x-stackQL-resources/search_services/methods/query_cortex_search_service'
        insert:
        - $ref: '#/components/x-stackQL-resources/search_services/methods/create_cortex_search_service'
        update: []
        delete:
        - $ref: '#/components/x-stackQL-resources/search_services/methods/delete_cortex_search_service'
        replace: []
security:
- KeyPair: []
- ExternalOAuth: []
- SnowflakeOAuth: []
servers:
- url: https://{organization}.snowflakecomputing.com/
  variables:
    organization:
      default: org-account
