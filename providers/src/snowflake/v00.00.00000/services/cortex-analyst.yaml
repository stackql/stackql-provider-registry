openapi: 3.0.0
servers:
- url: https://{organization}.snowflakecomputing.com/
  variables:
    organization:
      default: org-account
info:
  version: 0.0.1
  title: Cortex Analyst API
  description: The Snowflake Cortex Analyst API is a REST API that allows end user
    to chat with their data leveraging semantic models to generate SQL queries.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/cortex/analyst/feedback:
    post:
      operationId: sendFeedback
      tags:
      - cortex-analyst
      description: Send a user feedback of Cortex Analyst response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendFeedbackRequest'
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/cortex/analyst/message:
    post:
      operationId: sendMessage
      tags:
      - cortex-analyst
      summary: Send a data question to the Cortex Analyst
      description: Send a data question to the Cortex Analyst
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageResponse'
            text/event-stream:
              schema:
                type: string
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
components:
  schemas:
    StatusUpdate:
      type: object
      properties:
        status:
          description: The latest status for processing the request
          type: string
        status_message:
          description: A human readable description on the current request processing
            status
          type: string
        request_id:
          type: string
          description: Unique request ID.
      required:
      - status
    SemanticModelSelection:
      type: object
      properties:
        index:
          description: The index of the selected semantic model
          type: integer
          format: int32
        identifier:
          $ref: '#/components/schemas/SemanticModelObject'
    MessageContentDelta:
      type: object
      properties:
        type:
          type: string
        index:
          type: integer
          description: The index of the content array this delta object represents
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/MessageContentDeltaTextObject'
          sql: '#/components/schemas/MessageContentDeltaSqlObject'
          suggestions: '#/components/schemas/MessageContentDeltaSuggestionsObject'
          chart: '#/components/schemas/MessageContentChartObject'
    MessageContentDeltaTextObject:
      allOf:
      - $ref: '#/components/schemas/MessageContentDelta'
      - title: Text
        type: object
        description: The text content that is part of a message.
        properties:
          text_delta:
            type: string
            description: The delta of the text content, clients should concatenate
              all deltas for the same index
            example: To answer the question "What is the profit per store?" we must
              aggregate sales at the store level
        required:
        - text_delta
    MessageContentDeltaSqlObject:
      allOf:
      - $ref: '#/components/schemas/MessageContentDelta'
      - title: SQL
        type: object
        description: The SQL content that is part of a message.
        properties:
          statement_delta:
            type: string
            description: The delta of the sql statement, clients should concatenate
              all deltas for the same index
            example: SELECT store, SUM(profit) FROM sales GROUP BY store
          confidence:
            $ref: '#/components/schemas/Confidence'
        required:
        - statement_delta
    MessageContentDeltaSuggestionsObject:
      allOf:
      - $ref: '#/components/schemas/MessageContentDelta'
      - title: Suggested Questions
        type: object
        description: If SQL cannot be generated, a list of questions the semantic
          model can generate SQL for.
        properties:
          suggestions_delta:
            $ref: '#/components/schemas/SuggestionDelta'
        required:
        - suggestions_delta
    SuggestionDelta:
      type: object
      properties:
        index:
          type: integer
          description: The index of the suggestions array this delta object represents
        suggestion_delta:
          type: string
          description: The delta of a suggestion text, clients should concatenate
            all deltas for the same index
    StreamingError:
      type: object
      properties:
        message:
          type: string
          description: A description of the error
        code:
          type: string
          description: The Snowflake error code categorizing the error
        request_id:
          type: string
          description: Unique request ID
    SendMessageResponse:
      type: object
      description: The non-streaming response object for the sendMessage
      properties:
        message:
          $ref: '#/components/schemas/MessageObject'
        request_id:
          type: string
          description: Unique request ID
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/Warning'
        semantic_model_selection:
          $ref: '#/components/schemas/SemanticModelSelection'
      required:
      - message
    Warning:
      type: object
      title: The warning object
      description: Represents a warning within a chat.
      properties:
        message:
          type: string
          description: A human-readable message describing the warning
    Warnings:
      type: object
      description: Represents a wrapper schema around Warning for streaming case
      properties:
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/Warning'
    SemanticModelObject:
      type: object
      title: the semantic model object
      description: Represents a semantic model object
      properties:
        semantic_model_file:
          description: The path to a file stored in a Snowflake Stage holding the
            semantic model yaml. Must be a fully qualified stage url
          type: string
          example: '@db.schema.stage/path/to/file.yaml'
        semantic_view:
          description: The name of the Snowflake native semantic model object
          type: string
          example: db.schema.semantic_view
    MessageObject:
      type: object
      title: The message object
      description: Represents a message within a chat.
      properties:
        role:
          description: The entity that produced the message. One of `user` or `analyst`.
          type: string
          enum:
          - user
          - analyst
        content:
          description: The content of the message in array of text or SQL.
          type: array
          items:
            $ref: '#/components/schemas/MessageContent'
      required:
      - content
    MessageContent:
      type: object
      properties:
        type:
          type: string
          enum:
          - text
          - sql
          - suggestions
          - results
          - chart
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/MessageContentTextObject'
          sql: '#/components/schemas/MessageContentSqlObject'
          suggestions: '#/components/schemas/MessageContentSuggestionsObject'
          results: '#/components/schemas/MessageContentResultsObject'
          chart: '#/components/schemas/MessageContentChartObject'
    MessageContentTextObject:
      allOf:
      - $ref: '#/components/schemas/MessageContent'
      - title: Text
        type: object
        description: The text content that is part of a message.
        properties:
          text:
            type: string
            example: To answer the question "What is the profit per store?" we must
              aggregate sales at the store level
        required:
        - text
    MessageContentSqlObject:
      allOf:
      - $ref: '#/components/schemas/MessageContent'
      - title: SQL
        type: object
        description: The SQL content that is part of a message.
        properties:
          statement:
            type: string
            description: The executable SQL statement
            example: SELECT store, SUM(profit) FROM sales GROUP BY store
          confidence:
            $ref: '#/components/schemas/Confidence'
        required:
        - statement
    MessageContentSuggestionsObject:
      allOf:
      - $ref: '#/components/schemas/MessageContent'
      - title: Suggested Questions
        type: object
        description: If SQL cannot be generated, a list of questions the semantic
          model can generate SQL for.
        properties:
          suggestions:
            type: array
            items:
              type: string
              example: What is the lifetime revenue for the top 5 clients?
        required:
        - suggestions
    MessageContentResultsObject:
      allOf:
      - $ref: '#/components/schemas/MessageContent'
      - title: Results
        type: object
        description: Query ID of the executed query
        properties:
          query_id:
            type: string
        required:
        - query_id
    MessageContentChartObject:
      allOf:
      - $ref: '#/components/schemas/MessageContent'
      - title: Chart
        type: object
        description: The chart specification that is part of a message.
        properties:
          chart_spec:
            type: string
        required:
        - chart_spec
    SendMessageRequest:
      type: object
      description: The request object for sendMessage requests
      properties:
        semantic_model_file:
          type: string
          description: The path to a file stored in a Snowflake Stage holding the
            semantic model yaml. Must be a fully qualified stage url
          example: '@db.schema.stage/path/to/file.yaml'
        semantic_model:
          type: string
          description: A string containing the entire semantic model yaml
          example: 'name: my_semantic_model\ntables:\n  - name: orders\n...'
        semantic_view:
          type: string
          description: The name of the Snowflake native semantic model object
          example: db.schema.semantic_view
        semantic_models:
          type: array
          description: A list of semantic model objects. If set, other semantic model
            properties are ignored
          items:
            $ref: '#/components/schemas/SemanticModelObject'
        stream:
          type: boolean
          description: Whether to stream the response or not
          default: false
        operation:
          type: string
          enum:
          - sql_generation
          - answer_generation
          description: Whether to response with SQL or natural language. One of 'sql_generation'
            or 'answer_generation'
          default: sql_generation
        warehouse:
          type: string
          description: Warehouse name to use for result set handling. Only used when
            'operation' is 'answer_generation'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageObject'
        source:
          type: string
          description: an optional field to specify the source of the request. e.g
            "eval", "prod"
        experimental:
          type: string
          description: JSON serialized string of experimental API fields (undocumented).
      required:
      - messages
    Confidence:
      type: object
      description: The verified query the response is based on
      properties:
        verified_query_used:
          $ref: '#/components/schemas/VerifiedQuery'
    VerifiedQuery:
      type: object
      description: VerifiedQuery represents a (question, sql) pair that has been manually
        verified (e.g. by an analyst) to be correct.
      properties:
        name:
          type: string
          description: A name for this verified query. Mainly used for display purposes.
        question:
          type: string
          description: The question being answered.
        sql:
          type: string
          description: The correct SQL query for answering the question.
        verified_at:
          type: integer
          format: int64
          description: Timestamp at which the query was last verified - measures in
            seconds since epoch, in UTC.
        verified_by:
          type: string
          description: Name of the person who verified this query.
    SendFeedbackRequest:
      type: object
      description: The request object for sending user feedback on Cortex Analyst
        responses
      properties:
        request_id:
          type: string
          description: Request id associated with the feedback
        positive:
          type: boolean
          description: Whether the response was good (true) or bad (false)
        feedback_message:
          type: string
          description: The text for the detailed feedback message
      required:
      - request_id
      - positive
    description: If the identifier contains spaces or special characters, the entire
      string must be enclosed in double quotes. Identifiers enclosed in double quotes
      are also case-sensitive.
    Identifier:
      type: string
      description: A Snowflake object identifier.
      pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
      example: TEST_NAME
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message returned by the server
        code:
          type: string
          description: Error code.
        error_code:
          type: string
          description: Error code, same as `code` above. This property has been deprecated
            and will be removed in a future release, but is temporarily supported
            for for short-term backward compatibility.
        request_id:
          type: string
          description: Unique request ID.
      example:
        message: Compilation error!
        error_code: '390189'
        request_id: 01afef9d-0607-0550-0001-dd270c3902d7
    SuccessResponse:
      type: object
      description: Schema for all the success responses returned by the server.
      properties:
        status:
          type: string
          description: Message returned by the server.
      example:
        status: Request successfully completed
    SuccessAcceptedResponse:
      type: object
      description: Schema for a request in progress response returned by the server.
      properties:
        code:
          type: string
          description: Message code returned by the server.
        message:
          type: string
          description: Message returned by the server
        resultHandler:
          type: string
          description: Opaque result ID used for checking for request completion through
            one or more subsequent completion check operations.
      example:
        code: '392604'
        message: Request execution in progress. Use the provided location header or
          result handler ID to perform query monitoring and management.
    PointOfTime:
      type: object
      description: Point of time.
      required:
      - point_of_time_type
      properties:
        point_of_time_type:
          description: 'Type of the point of time. Possible values include:

            - `timestamp`: Exact time using the standard timezone format. Example:
            `2023-09-15 10:59:43`. - `offset`: Interval relative to ''now.'' Example:
            `1 day`. - `statement`: ID of a query statement to use as the reference
            point for <a href=https://docs.snowflake.com/en/sql-reference/sql/create-clone#time-travel-parameters>Time
            Travel</a>.

            For more information, see https://docs.snowflake.com/en/sql-reference/data-types-datetime.'
          type: string
          examples:
            timestamp:
              value: '2023-09-15 10:59:43'
            offset:
              value: 20 ms
        reference:
          type: string
          description: Relation to the point of time. Currently, the API supports
            `at` and `before`.
      discriminator:
        propertyName: point_of_time_type
        mapping:
          timestamp: PointOfTimeTimestamp
          offset: PointOfTimeOffset
          statement: PointOfTimeStatement
    PointOfTimeTimestamp:
      description: Point of time identified by a timestamp.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        timestamp:
          type: string
          description: Timestamp of the point of time.
    PointOfTimeOffset:
      description: Point of time identified by an offset in reference to the current
        time, such as `10 min`.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      examples:
        month:
          value: 2 months
        milliseconds:
          value: 20 ms
      properties:
        offset:
          type: string
          description: 'Offset from the point of time. Example: `1 year`'
    PointOfTimeStatement:
      description: Point of time indicating when a statement was executed.
      allOf:
      - $ref: '#/components/schemas/PointOfTime'
      properties:
        statement:
          type: string
          description: Statement of the point of time.
    Parameter:
      description: Snowflake parameter defined at the system, account, user, session,
        or object level.
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Parameter name.
        value:
          type: string
          description: Parameter value.
        defaultValue:
          type: string
          description: Default parameter value.
        dataType:
          type: string
          description: Data type of the parameter value. Either BOOLEAN, NUMBER, FLOAT,
            or STRING.
        level:
          type: string
          description: Level at which parameter is defined.
        description:
          type: string
          description: Parameter description.
      example:
        name: SAMPLE_SNOWAPI_PARAM
        value: true
        defaultValue: false
        dataType: boolean
        level: ACCOUNT
        description: Sample snowflake parameter.
    TargetLag:
      type: object
      description: Specifies the schedule for periodically refreshing the dynamic
        table.
      properties:
        type:
          description: Type of lag, can be either USER_DEFINED or DOWNSTREAM.
          type: string
      discriminator:
        propertyName: type
        mapping:
          USER_DEFINED: UserDefinedLag
          DOWNSTREAM: DownstreamLag
    UserDefinedLag:
      description: User-defined target lag.
      allOf:
      - $ref: '#/components/schemas/TargetLag'
      properties:
        seconds:
          type: integer
          format: int64
          description: Target lag time in seconds.
      example:
        seconds: 3600
      required:
      - seconds
    DownstreamLag:
      description: Downstream target lag
      allOf:
      - $ref: '#/components/schemas/TargetLag'
  securitySchemes:
    KeyPair:
      $ref: common.yaml#/components/securitySchemes/KeyPair
    ExternalOAuth:
      $ref: common.yaml#/components/securitySchemes/ExternalOAuth
    SnowflakeOAuth:
      $ref: common.yaml#/components/securitySchemes/SnowflakeOAuth
  parameters:
    database:
      name: database
      description: Identifier (i.e. name) for the database to which the resource belongs.
        You can use the `/api/v2/databases` GET request to get a list of available
        databases.
      required: true
      in: path
      schema:
        example: TEST_DB
        $ref: ./common.yaml#/components/schemas/Identifier
    schema:
      name: schema
      description: Identifier (i.e. name) for the schema to which the resource belongs.
        You can use the `/api/v2/databases/{database}/schemas` GET request to get
        a list of available schemas for the specified database.
      required: true
      in: path
      schema:
        example: TEST_SCHEMA
        $ref: ./common.yaml#/components/schemas/Identifier
    application:
      name: application
      description: Identifier (i.e. name) for the application to which the resource
        belongs. You can use the `/api/v2/applications/{application}` GET request
        to get a list of available applications.
      required: true
      in: path
      schema:
        example: TEST_APPLICATION
        $ref: ./common.yaml#/components/schemas/Identifier
    name:
      name: name
      description: Identifier (i.e. name) for the resource.
      required: true
      in: path
      schema:
        example: TEST_NAME
        $ref: ./common.yaml#/components/schemas/Identifier
    nameWithArgs:
      name: nameWithArgs
      description: Function's name with Args
      required: true
      in: path
      schema:
        type: string
        example: foo(a number, b number)
    createMode:
      name: createMode
      description: 'Query parameter allowing support for different modes of resource
        creation. Possible values include:

        - `errorIfExists`: Throws an error if you try to create a resource that already
        exists.

        - `orReplace`: Automatically replaces the existing resource with the current
        one.

        - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent
        resource.'
      in: query
      schema:
        type: string
        enum:
        - errorIfExists
        - orReplace
        - ifNotExists
        example: ifNotExists
        default: errorIfExists
    mode:
      name: mode
      description: 'Query parameter determines whether the revoke operation succeeds
        or fails for the privileges, based on the whether the privileges had been
        re-granted to another role.

        - restrict: If the privilege being revoked has been re-granted to another
        role, the REVOKE command fails.

        - cascade: If the privilege being revoked has been re-granted, the REVOKE
        command recursively revokes these dependent grants. If the same privilege
        on an object has been granted to the target role by a different grantor (parallel
        grant), that grant is not affected and the target role retains the privilege.'
      in: query
      schema:
        type: string
        enum:
        - restrict
        - cascade
        example: restrict
    ifExists:
      name: ifExists
      description: 'Query parameter that specifies how to handle the request for a
        resource that does not exist:

        - `true`: The endpoint does not throw an error if the resource does not exist.
        It returns a 200 success response, but does not take any action on the resource.

        - `false`: The endpoint throws an error if the resource doesn''t exist.'
      in: query
      schema:
        type: boolean
        example: true
        default: false
    like:
      name: like
      description: Query parameter to filter the command output by resource name.
        Uses case-insensitive pattern matching, with support for SQL wildcard characters.
      in: query
      schema:
        type: string
        example: test_%
    pattern:
      name: pattern
      description: A query parameter that filters the command output by a regular
        expression pattern.
      in: query
      schema:
        type: string
        example: .*data_0.*
    startsWith:
      name: startsWith
      description: Query parameter to filter the command output based on the string
        of characters that appear at the beginning of the object name. Uses case-sensitive
        pattern matching.
      in: query
      schema:
        type: string
        example: test
    rootOnly:
      name: rootOnly
      description: Query parameter to filter the command output to return only root
        resources (resources with no predecessors).
      in: query
      schema:
        type: boolean
        example: false
        default: false
    showLimit:
      name: showLimit
      description: Query parameter to limit the maximum number of rows returned by
        a command.
      in: query
      schema:
        type: integer
        example: 10
        minimum: 1
        maximum: 10000
    fromName:
      name: fromName
      description: Query parameter to enable fetching rows only following the first
        row whose object name matches the specified string. Case-sensitive and does
        not have to be the full name.
      in: query
      schema:
        type: string
        example: from_test
    copyGrants:
      name: copyGrants
      description: Query parameter to enable copy grants when creating the object.
      in: query
      schema:
        type: boolean
        example: false
        default: false
    asyncExec:
      name: asyncExec
      in: query
      description: Asynchronous execution enable/disable. Default is disable.
      schema:
        type: boolean
        default: false
    sessionId:
      name: sessionId
      description: Unique ID for the current session.
      required: true
      in: path
      schema:
        type: integer
        format: uuid
        example: 524514326772799
    content-type:
      name: Content-Type
      description: Type of content for the resource. Currently supports `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    accept:
      name: Accept
      description: Type of data format accepted by the resource. Currently supports
        `application/json`.
      in: header
      schema:
        type: string
        enum:
        - application/json
    x-snowflake-authorization-token-type:
      name: X-Snowflake-Authorization-Token-Type
      description: Type of the Snowflake authorization token. Currently, keypair-jwt
        (`KEYPAIR_JWT`) and OAuth tokens are supported.
      in: header
      schema:
        type: string
        enum:
        - KEYPAIR_JWT
        - OAUTH
    x-sfc-session:
      name: X-Sfc-Session
      description: Token for the current Snowflake session.
      in: header
      required: false
      schema:
        type: string
        description: Snowflake session token.
        example: ver:3-hint:1000-ABCD=
  headers:
    X-Snowflake-Request-ID:
      description: Unique ID of the API request.
      schema:
        type: string
        format: uuid
    Link:
      description: Links to the page of results (e.g. the first page, the last page,
        etc.). The header can include multiple 'url' entries with different 'rel'
        attribute values that specify the page to return ('first', 'next', 'prev',
        and 'last').
      schema:
        type: string
        example: </api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=0>; rel="first",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=1>;
          rel="next",</api/v2/results/01b66701-0000-001c-0000-0030000b91521?page=9>;
          rel="last"
  responses:
    200SuccessResponse:
      description: Successful request.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    201SuccessCreatedResponse:
      description: Successfully created a new resource on the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    202SuccessAcceptedResponse:
      headers:
        Location:
          schema:
            type: string
            description: Relative path for checking request status or getting the
              result, if available.
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      description: Successfully accepted the request, but it is not completed yet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessAcceptedResponse'
    400BadRequest:
      description: Bad Request. The request payload is invalid or malformed. This
        happens if the application didn't send the correct request payload. The response
        body may include the error code and message indicating the actual cause. The
        application must reconstruct the request body for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    401Unauthorized:
      description: Unauthorized. The request is not authorized. This happens if the
        attached access token is invalid or missing. The response body may include
        the error code and message indicating the actual cause, e.g., expired, invalid
        token. The application must obtain a new access token for retry.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    403Forbidden:
      description: Forbidden. The request is forbidden. This can also happen if the
        request is made even if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: Not Found. The request endpoint is not valid. This happens if the
        API endpoint does not exist, or if the API is not enabled.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    405MethodNotAllowed:
      description: Method Not Allowed. The request method doesn't match the supported
        API. This happens, for example, if the application calls the API with GET
        method but the endpoint accepts only POST.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    408RequestTimeout:
      description: Request Timeout. This indicates that the request from the client
        timed out and was not completed by the server.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    409Conflict:
      description: Conflict. The requested operation could not be performed due to
        a conflicting state that could not be resolved. This usually happens when
        a CREATE request was performed when there is a pre-existing resource with
        the same name, and also without one of the options orReplace/ifNotExists.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    410Gone:
      description: Gone. This error is primarily intended to assist the task of web
        maintenance by notifying the recipient that the resource is intentionally
        unavailable.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    415UnsupportedMediaType:
      description: The request header Content-Type includes an unsupported media type.
        The API supports application/json only. If none specified, the request payload
        is taken as JSON, but if any other media type is specified, this error is
        returned.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    429LimitExceeded:
      description: Limit Exceeded. The number of requests hit the rate limit. The
        application must slow down the frequency of hitting the API endpoints.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500InternalServerError:
      description: Internal Server Error. The server hit an unrecoverable system error.
        The response body may include the error code and message for further guidance.
        The application owner may need to reach out the customer support.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    503ServiceUnavailable:
      description: Service Unavailable. The request was not processed due to server
        side timeouts. The application may retry with backoff. The jittered backoff
        is recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    504GatewayTimeout:
      description: Gateway Timeout. The request was not processed due to server side
        timeouts. The application may retry with backoff. The jittered backoff is
        recommended.
      headers:
        X-Snowflake-Request-ID:
          $ref: '#/components/headers/X-Snowflake-Request-ID'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  security:
  - KeyPair: []
  - ExternalOAuth: []
  - SnowflakeOAuth: []
  x-stackQL-resources:
    analyst:
      methods:
        send_feedback:
          operation:
            $ref: '#/paths/~1api~1v2~1cortex~1analyst~1feedback/post'
          response:
            mediaType: ''
            openAPIDocKey: '200'
        send_message:
          operation:
            $ref: '#/paths/~1api~1v2~1cortex~1analyst~1message/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
        replace: []
security:
- KeyPair: []
- ExternalOAuth: []
- SnowflakeOAuth: []
