openapi: 3.0.0
info:
  title: account API
  description: digitalocean API
  version: '2.0'
paths:
  /v2/account:
    get:
      operationId: account_get
      summary: Get User Information
      description: >-
        To show information about the current user account, send a GET request
        to `/v2/account`.
      tags:
        - Account
      responses:
        '200':
          $ref: '#/components/responses/account'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/account"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.getenv("$DIGITALOCEAN_TOKEN"))

            account_info = client.account.get()
      security:
        - bearer_auth:
            - account:read
  /v2/actions:
    get:
      operationId: actions_list
      summary: List All Actions
      description: >-
        This will be the entire list of actions taken on your account, so it
        will be quite large. As with any large collection returned by the API,
        the results will be paginated with only 20 on each page by default.
      tags:
        - Actions
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/actions'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/actions?page=1&per_page=1"
        - lang: Go
          source: |-
            import (
              "context"
                "os"

              "github.com/digitalocean/godo"
              )

            func main() {
              token := os.Getenv("DIGITALOCEAN_TOKEN")

              client := godo.NewFromToken(token)
              ctx := context.TODO()

              opt := &godo.ListOptions{
                  Page:    1,
                  PerPage: 200,
              }
              actions, _, err := client.Actions.List(ctx, opt)
              }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            actions = client.actions.all
            actions.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.getenv("$DIGITALOCEAN_TOKEN"))

            list_resp = client.actions.list()
      security:
        - bearer_auth:
            - actions:read
  /v2/actions/{action_id}:
    get:
      operationId: actions_get
      summary: Retrieve an Existing Action
      description: >-
        To retrieve a specific action object, send a GET request to
        `/v2/actions/$ACTION_ID`.
      tags:
        - Actions
      parameters:
        - $ref: '#/components/parameters/action_id'
      responses:
        '200':
          $ref: '#/components/responses/action'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/actions/36804636"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                action, _, err := client.Actions.Get(ctx, 36804636)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.actions.find(id: 36804636)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.getenv("$DIGITALOCEAN_TOKEN"))

            get_resp = client.actions.get(action_id=36804636)
      security:
        - bearer_auth:
            - actions:read
components:
  schemas:
    account:
      type: object
      properties:
        droplet_limit:
          description: >
            The total number of Droplets current user or team may have active at
            one time.

            <br><br>Requires `droplet:read` scope.
          type: integer
          example: 25
        floating_ip_limit:
          description: |
            The total number of Floating IPs the current user or team may have.
            <br><br>Requires `reserved_ip:read` scope.
          type: integer
          example: 5
        email:
          description: >-
            The email address used by the current user to register for
            DigitalOcean.
          type: string
          example: sammy@digitalocean.com
        name:
          description: The display name for the current user.
          type: string
          example: Sammy the Shark
        uuid:
          description: The unique universal identifier for the current user.
          type: string
          example: b6fr89dbf6d9156cace5f3c78dc9851d957381ef
        email_verified:
          description: >-
            If true, the user has verified their account via email. False
            otherwise.
          type: boolean
          default: false
          example: true
        status:
          description: This value is one of "active", "warning" or "locked".
          type: string
          enum:
            - active
            - warning
            - locked
          default: active
          example: active
        status_message:
          description: >-
            A human-readable message giving more details about the status of the
            account.
          type: string
          example: ' '
        team:
          type: object
          description: >-
            When authorized in a team context, includes information about the
            current team.
          properties:
            uuid:
              description: The unique universal identifier for the current team.
              type: string
              example: 5df3e3004a17e242b7c20ca6c9fc25b701a47ece
            name:
              description: The name for the current team.
              type: string
              example: My Team
      required:
        - droplet_limit
        - floating_ip_limit
        - email
        - uuid
        - email_verified
        - status
        - status_message
    error:
      type: object
      properties:
        id:
          description: >-
            A short identifier corresponding to the HTTP status code returned.
            For  example, the ID for a response returning a 404 status code
            would be "not_found."
          type: string
          example: not_found
        message:
          description: >-
            A message providing additional information about the error,
            including  details to help resolve it when possible.
          type: string
          example: The resource you were accessing could not be found.
        request_id:
          description: >-
            Optionally, some endpoints may include a request ID that should be 
            provided when reporting bugs or opening support tickets to help 
            identify the issue.
          type: string
          example: 4d9d8375-3c56-4925-a3e7-eb137fed17e9
      required:
        - id
        - message
    action:
      type: object
      properties:
        id:
          type: integer
          description: >-
            A unique numeric ID that can be used to identify and reference an
            action.
          example: 36804636
        status:
          type: string
          description: >-
            The current status of the action. This can be "in-progress",
            "completed", or "errored".
          enum:
            - in-progress
            - completed
            - errored
          example: completed
          default: in-progress
        type:
          type: string
          description: >-
            This is the type of action that the object represents. For example,
            this could be "transfer" to represent the state of an image transfer
            action.
          example: create
        started_at:
          type: string
          format: date-time
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the action was initiated.
          example: '2020-11-14T16:29:21Z'
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the action was completed.
          example: '2020-11-14T16:30:06Z'
        resource_id:
          type: integer
          nullable: true
          description: >-
            A unique identifier for the resource that the action is associated
            with.
          example: 3164444
        resource_type:
          type: string
          description: The type of resource that the action is associated with.
          example: droplet
        region:
          $ref: '#/components/schemas/region'
        region_slug:
          type: string
          nullable: true
          description: >-
            A human-readable string that is used as a unique identifier for each
            region.
          example: nyc3
    pagination:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/page_links'
    meta:
      type: object
      properties:
        meta:
          allOf:
            - $ref: '#/components/schemas/meta_properties'
            - required:
                - total
      required:
        - meta
    region:
      type: object
      properties:
        name:
          type: string
          description: >-
            The display name of the region.  This will be a full name that is
            used in the control panel and other interfaces.
          example: New York 3
        slug:
          type: string
          description: >-
            A human-readable string that is used as a unique identifier for each
            region.
          example: nyc3
        features:
          type: array
          items:
            type: string
          description: >-
            This attribute is set to an array which contains features available
            in this region
          example:
            - private_networking
            - backups
            - ipv6
            - metadata
            - install_agent
            - storage
            - image_transfer
        available:
          type: boolean
          description: >-
            This is a boolean value that represents whether new Droplets can be
            created in this region.
          example: true
        sizes:
          type: array
          items:
            type: string
          description: >-
            This attribute is set to an array which contains the identifying
            slugs for the sizes available in this region. sizes:read is required
            to view.
          example:
            - s-1vcpu-1gb
            - s-1vcpu-2gb
            - s-1vcpu-3gb
            - s-2vcpu-2gb
            - s-3vcpu-1gb
            - s-2vcpu-4gb
            - s-4vcpu-8gb
            - s-6vcpu-16gb
            - s-8vcpu-32gb
            - s-12vcpu-48gb
            - s-16vcpu-64gb
            - s-20vcpu-96gb
            - s-24vcpu-128gb
            - s-32vcpu-192g
      required:
        - available
        - features
        - name
        - sizes
        - slug
    page_links:
      type: object
      properties:
        pages:
          anyOf:
            - $ref: '#/components/schemas/forward_links'
            - $ref: '#/components/schemas/backward_links'
            - {}
          example:
            pages:
              first: https://api.digitalocean.com/v2/account/keys?page=1
              prev: https://api.digitalocean.com/v2/account/keys?page=2
    meta_properties:
      type: object
      description: Information about the response itself.
      properties:
        total:
          description: Number of objects returned by the request.
          type: integer
          example: 1
    forward_links:
      allOf:
        - $ref: '#/components/schemas/link_to_last_page'
        - $ref: '#/components/schemas/link_to_next_page'
    backward_links:
      allOf:
        - $ref: '#/components/schemas/link_to_first_page'
        - $ref: '#/components/schemas/link_to_prev_page'
    link_to_last_page:
      type: object
      properties:
        last:
          description: URI of the last page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_next_page:
      type: object
      properties:
        next:
          description: URI of the next page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_first_page:
      type: object
      properties:
        first:
          description: URI of the first page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
    link_to_prev_page:
      type: object
      properties:
        prev:
          description: URI of the previous page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
  responses:
    account:
      description: >-
        A JSON object keyed on account with an excerpt of the current user
        account data.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              account:
                $ref: '#/components/schemas/account'
            type: object
    unauthorized:
      description: Authentication failed due to invalid credentials.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unauthorized
            message: Unable to authenticate you.
    too_many_requests:
      description: The API rate limit has been exceeded.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: too_many_requests
            message: API rate limit exceeded.
    server_error:
      description: There was a server error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: server_error
            message: Unexpected server-side error
    unexpected_error:
      description: There was an unexpected error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: example_error
            message: some error message
    actions:
      description: >-
        The results will be returned as a JSON object with an actions key.  This
        will be set to an array filled with action objects containing the
        standard action attributes
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/action'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
    action:
      description: >-
        The result will be a JSON object with an action key.  This will be set
        to an action object containing the standard action attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              action:
                $ref: '#/components/schemas/action'
            type: object
    not_found:
      description: The resource was not found.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: not_found
            message: The resource you requested could not be found.
  parameters:
    per_page:
      in: query
      name: per_page
      required: false
      description: Number of items returned per page
      schema:
        type: integer
        minimum: 1
        default: 20
        maximum: 200
      example: 2
    page:
      in: query
      name: page
      required: false
      description: Which 'page' of paginated results to return.
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1
    action_id:
      in: path
      name: action_id
      description: >-
        A unique numeric ID that can be used to identify and reference an
        action.
      required: true
      schema:
        type: integer
        minimum: 1
      example: 36804636
  headers:
    ratelimit-limit:
      schema:
        type: integer
      example: 5000
      description: >-
        The default limit on number of requests that can be made per hour and
        per minute. Current rate limits are 5000 requests per hour and 250
        requests per minute.
    ratelimit-remaining:
      schema:
        type: integer
      example: 4816
      description: >-
        The number of requests in your hourly quota that remain before you hit
        your request limit. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
    ratelimit-reset:
      schema:
        type: integer
      example: 1444931833
      description: >-
        The time when the oldest request will expire. The value is given in Unix
        epoch time. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
  x-stackQL-resources:
    account:
      id: digitalocean.account.account
      name: account
      title: Account
      methods:
        account_get:
          operation:
            $ref: '#/paths/~1v2~1account/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.account
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/account/methods/account_get'
        insert: []
        update: []
        delete: []
        replace: []
    actions:
      id: digitalocean.account.actions
      name: actions
      title: Actions
      methods:
        actions_list:
          operation:
            $ref: '#/paths/~1v2~1actions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.actions
        actions_get:
          operation:
            $ref: '#/paths/~1v2~1actions~1{action_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.action
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/actions/methods/actions_get'
          - $ref: '#/components/x-stackQL-resources/actions/methods/actions_list'
        insert: []
        update: []
        delete: []
        replace: []
servers:
  - url: https://api.digitalocean.com
