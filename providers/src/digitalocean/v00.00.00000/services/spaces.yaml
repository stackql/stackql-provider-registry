openapi: 3.0.0
info:
  title: spaces API
  description: digitalocean API
  version: '2.0'
paths:
  /v2/spaces/keys:
    get:
      operationId: spacesKey_list
      summary: List Spaces Access Keys
      description: >
        To list Spaces Access Key, send a GET request to `/v2/spaces/keys`. Sort
        parameter must be used with Sort Direction.
      tags:
        - Spaces Keys
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/bucket'
        - $ref: '#/components/parameters/permission'
      responses:
        '200':
          $ref: '#/components/responses/key_list'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/spaces/keys"
      security:
        - bearer_auth:
            - spaces_key:read
    post:
      operationId: spacesKey_create
      summary: Create a New Spaces Access Key
      description: >
        To create a new Spaces Access Key, send a POST request to
        `/v2/spaces/keys`.

        At the moment, you cannot mix a fullaccess permission with scoped
        permissions.

        A fullaccess permission will be prioritized if fullaccess and scoped
        permissions are both added.
      tags:
        - Spaces Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/key'
            examples:
              Read Only Key:
                value:
                  name: read-only-key
                  grants:
                    - bucket: my-bucket
                      permission: read
              Read Write Key:
                value:
                  name: read-write-key
                  grants:
                    - bucket: my-bucket
                      permission: readwrite
              Full Access Key:
                value:
                  name: full-access-key
                  grants:
                    - bucket: ''
                      permission: fullaccess
              Mixed Permissions Key:
                value:
                  name: mixed-permissions-key
                  grants:
                    - bucket: my-bucket
                      permission: read
                    - bucket: my-bucket2
                      permission: readwrite
              No Grant Key:
                value:
                  name: no-grant-key
                  grants: []
      responses:
        '201':
          $ref: '#/components/responses/key_create'
        '400':
          $ref: '#/components/responses/bad_request-2'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "test-key", "grants": [{"bucket": "test-bucket", "permission": "read"}]}' \
              "https://api.digitalocean.com/v2/spaces/keys"
      security:
        - bearer_auth:
            - spaces_key:create_credentials
  /v2/spaces/keys/{access_key}:
    get:
      operationId: spacesKey_get
      summary: Get a Spaces Access Key
      description: >
        To get a Spaces Access Key, send a GET request to
        `/v2/spaces/keys/$ACCESS_KEY`.


        A successful request will return the Access Key.
      tags:
        - Spaces Keys
      parameters:
        - $ref: '#/components/parameters/access_key_id'
      responses:
        '200':
          $ref: '#/components/responses/key_get'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/spaces/keys/DOACCESSKEYEXAMPLE"
      security:
        - bearer_auth:
            - spaces_key:read
    delete:
      operationId: spacesKey_delete
      summary: Delete a Spaces Access Key
      description: >
        To delete a Spaces Access Key, send a DELETE request to
        `/v2/spaces/keys/$ACCESS_KEY`.


        A successful request will return a `204 No Content` status code.
      tags:
        - Spaces Keys
      parameters:
        - $ref: '#/components/parameters/access_key_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/spaces/keys/DOACCESSKEYEXAMPLE"
      security:
        - bearer_auth:
            - spaces_key:delete
    put:
      operationId: spacesKey_update
      summary: Update Spaces Access Keys
      description: >
        To update Spaces Access Key, send a PUT or PATCH request to
        `/v2/spaces/keys/$ACCESS_KEY`. At the moment, you cannot convert a

        fullaccess key to a scoped key or vice versa. You can only update the
        name of the key.
      tags:
        - Spaces Keys
      parameters:
        - $ref: '#/components/parameters/access_key_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/key'
            examples:
              Update Key Name:
                value:
                  name: new-key-name
      responses:
        '200':
          $ref: '#/components/responses/key_update'
        '400':
          $ref: '#/components/responses/bad_request-2'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "new-key-name"}' \
              "https://api.digitalocean.com/v2/spaces/keys/DOACCESSKEYEXAMPLE"
      security:
        - bearer_auth:
            - spaces_key:update
    patch:
      operationId: spacesKey_patch
      summary: Update Spaces Access Keys
      description: >
        To update Spaces Access Key, send a PUT or PATCH request to
        `/v2/spaces/keys/$ACCESS_KEY`. At the moment, you cannot convert a

        fullaccess key to a scoped key or vice versa. You can only update the
        name of the key.
      tags:
        - Spaces Keys
      parameters:
        - $ref: '#/components/parameters/access_key_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/key'
            examples:
              Update Key Name:
                value:
                  name: new-key-name
      responses:
        '200':
          $ref: '#/components/responses/key_update'
        '400':
          $ref: '#/components/responses/bad_request-2'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PATCH \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "new-key-name"}' \
              "https://api.digitalocean.com/v2/spaces/keys/DOACCESSKEYEXAMPLE"
      security:
        - bearer_auth:
            - spaces_key:update
components:
  schemas:
    key:
      type: object
      properties:
        name:
          type: string
          description: The access key's name.
          example: my-access-key
        grants:
          type: array
          description: The list of permissions for the access key.
          items:
            $ref: '#/components/schemas/grant'
          default: []
        access_key:
          type: string
          description: The Access Key ID used to access a bucket.
          example: DOACCESSKEYEXAMPLE
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: The date and time the key was created.
          example: '2018-07-19T15:04:16Z'
          readOnly: true
    pagination:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/page_links'
    meta:
      type: object
      properties:
        meta:
          allOf:
            - $ref: '#/components/schemas/meta_properties'
            - required:
                - total
      required:
        - meta
    error:
      type: object
      properties:
        id:
          description: >-
            A short identifier corresponding to the HTTP status code returned.
            For  example, the ID for a response returning a 404 status code
            would be "not_found."
          type: string
          example: not_found
        message:
          description: >-
            A message providing additional information about the error,
            including  details to help resolve it when possible.
          type: string
          example: The resource you were accessing could not be found.
        request_id:
          description: >-
            Optionally, some endpoints may include a request ID that should be 
            provided when reporting bugs or opening support tickets to help 
            identify the issue.
          type: string
          example: 4d9d8375-3c56-4925-a3e7-eb137fed17e9
      required:
        - id
        - message
    grant:
      type: object
      properties:
        bucket:
          type: string
          description: The name of the bucket.
          example: my-bucket
        permission:
          type: string
          description: >-
            The permission to grant to the user. Possible values are `read`,
            `readwrite`, `fullaccess`, or an empty string.
          example: read
      required:
        - bucket
        - permission
    key_create_response:
      allOf:
        - type: object
          properties:
            secret_key:
              type: string
              description: >-
                The secret key used to access the bucket. We return secret keys
                only once upon creation. Make sure to copy the key and securely
                store it.
              example: DOSECRETKEYEXAMPLE
              readOnly: true
        - $ref: '#/components/schemas/key'
    page_links:
      type: object
      properties:
        pages:
          anyOf:
            - $ref: '#/components/schemas/forward_links'
            - $ref: '#/components/schemas/backward_links'
            - {}
          example:
            pages:
              first: https://api.digitalocean.com/v2/account/keys?page=1
              prev: https://api.digitalocean.com/v2/account/keys?page=2
    meta_properties:
      type: object
      description: Information about the response itself.
      properties:
        total:
          description: Number of objects returned by the request.
          type: integer
          example: 1
    forward_links:
      allOf:
        - $ref: '#/components/schemas/link_to_last_page'
        - $ref: '#/components/schemas/link_to_next_page'
    backward_links:
      allOf:
        - $ref: '#/components/schemas/link_to_first_page'
        - $ref: '#/components/schemas/link_to_prev_page'
    link_to_last_page:
      type: object
      properties:
        last:
          description: URI of the last page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_next_page:
      type: object
      properties:
        next:
          description: URI of the next page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_first_page:
      type: object
      properties:
        first:
          description: URI of the first page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
    link_to_prev_page:
      type: object
      properties:
        prev:
          description: URI of the previous page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
  responses:
    key_list:
      description: A JSON response containing a list of keys.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/key'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              keys:
                - name: my-access-key
                  access_key: DOACCESSKEYEXAMPLE
                  grants:
                    - bucket: my-bucket
                      permission: read
                  created_at: '2018-07-19T15:04:16Z'
              links: {}
              meta:
                total: 1
    unauthorized:
      description: Authentication failed due to invalid credentials.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unauthorized
            message: Unable to authenticate you.
    too_many_requests:
      description: The API rate limit has been exceeded.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: too_many_requests
            message: API rate limit exceeded.
    server_error:
      description: There was a server error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: server_error
            message: Unexpected server-side error
    unexpected_error:
      description: There was an unexpected error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: example_error
            message: some error message
    key_create:
      description: A JSON response containing details about the new key.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              key:
                $ref: '#/components/schemas/key_create_response'
            type: object
          examples:
            Read Only Key:
              value:
                key:
                  name: read-only-key
                  access_key: DOACCESSKEYEXAMPLE
                  secret_key: DOSECRETKEYEXAMPLE
                  grants:
                    - bucket: my-bucket
                      permission: read
                  created_at: '2018-07-19T15:04:16Z'
            Full Access Key:
              value:
                key:
                  name: full-access-key
                  access_key: DOACCESSKEYEXAMPLE
                  secret_key: DOSECRETKEYEXAMPLE
                  grants:
                    - bucket: ''
                      permission: fullaccess
                  created_at: '2018-07-19T15:04:16Z'
            Mixed Permission Access Key:
              value:
                key:
                  name: custom-bucket-key
                  access_key: DOACCESSKEYEXAMPLE
                  secret_key: DOSECRETKEYEXAMPLE
                  grants:
                    - bucket: my-bucket
                      permission: readwrite
                    - bucket: my-other-bucket
                      permission: read
                  created_at: '2018-07-19T15:04:16Z'
    bad_request-2:
      description: Cannot mix fullaccess permission with scoped permissions
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: bad_request
            message: cannot mix fullaccess permission with scoped permissions.
    key_get:
      description: A JSON response containing details about the key.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/key'
          examples:
            Read Only Key:
              value:
                key:
                  name: read-only-key
                  access_key: DOACCESSKEYEXAMPLE
                  grants:
                    - bucket: my-bucket
                      permission: read
                  created_at: '2018-07-19T15:04:16Z'
    not_found:
      description: The resource was not found.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: not_found
            message: The resource you requested could not be found.
    no_content:
      description: The action was successful and the response body is empty.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
    key_update:
      description: The response will be a JSON object
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              key:
                $ref: '#/components/schemas/key'
            type: object
          examples:
            Read Only Key:
              value:
                key:
                  name: new-key-name
                  access_key: DOACCESSKEYEXAMPLE
                  grants:
                    - bucket: my-bucket
                      permission: read
                  created_at: '2018-07-19T15:04:16Z'
  parameters:
    per_page:
      in: query
      name: per_page
      required: false
      description: Number of items returned per page
      schema:
        type: integer
        minimum: 1
        default: 20
        maximum: 200
      example: 2
    page:
      in: query
      name: page
      required: false
      description: Which 'page' of paginated results to return.
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1
    sort:
      in: query
      name: sort
      required: false
      description: The field to sort by.
      schema:
        type: string
        default: created_at
      example: created_at
    sort_direction:
      in: query
      name: sort_direction
      required: false
      description: The direction to sort by. Possible values are `asc` or `desc`.
      schema:
        type: string
        default: desc
      example: desc
    name:
      in: query
      name: name
      required: false
      description: The access key's name.
      schema:
        type: string
      example: my-access-key
    bucket:
      in: query
      name: bucket
      required: false
      description: The bucket's name.
      schema:
        type: string
      example: my-bucket
    permission:
      in: query
      name: permission
      required: false
      description: >-
        The permission of the access key. Possible values are `read`,
        `readwrite`, `fullaccess`, or an empty string.
      schema:
        type: string
      example: read
    access_key_id:
      in: path
      name: access_key
      description: The access key's ID.
      required: true
      schema:
        type: string
      example: DOACCESSKEYEXAMPLE
  headers:
    ratelimit-limit:
      schema:
        type: integer
      example: 5000
      description: >-
        The default limit on number of requests that can be made per hour and
        per minute. Current rate limits are 5000 requests per hour and 250
        requests per minute.
    ratelimit-remaining:
      schema:
        type: integer
      example: 4816
      description: >-
        The number of requests in your hourly quota that remain before you hit
        your request limit. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
    ratelimit-reset:
      schema:
        type: integer
      example: 1444931833
      description: >-
        The time when the oldest request will expire. The value is given in Unix
        epoch time. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
  x-stackQL-resources:
    keys:
      id: digitalocean.spaces.keys
      name: keys
      title: Keys
      methods:
        spaces_key_list:
          operation:
            $ref: '#/paths/~1v2~1spaces~1keys/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.keys
        spaces_key_create:
          operation:
            $ref: '#/paths/~1v2~1spaces~1keys/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        spaces_key_get:
          operation:
            $ref: '#/paths/~1v2~1spaces~1keys~1{access_key}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.keys
        spaces_key_delete:
          operation:
            $ref: '#/paths/~1v2~1spaces~1keys~1{access_key}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        spaces_key_update:
          operation:
            $ref: '#/paths/~1v2~1spaces~1keys~1{access_key}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        spaces_key_patch:
          operation:
            $ref: '#/paths/~1v2~1spaces~1keys~1{access_key}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/keys/methods/spaces_key_get'
          - $ref: '#/components/x-stackQL-resources/keys/methods/spaces_key_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/keys/methods/spaces_key_create'
        update:
          - $ref: '#/components/x-stackQL-resources/keys/methods/spaces_key_patch'
        delete:
          - $ref: '#/components/x-stackQL-resources/keys/methods/spaces_key_delete'
        replace:
          - $ref: '#/components/x-stackQL-resources/keys/methods/spaces_key_update'
servers:
  - url: https://api.digitalocean.com
