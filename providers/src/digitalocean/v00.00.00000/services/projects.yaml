openapi: 3.0.0
info:
  title: projects API
  description: digitalocean API
  version: '2.0'
paths:
  /v2/projects:
    get:
      operationId: projects_list
      summary: List All Projects
      description: To list all your projects, send a GET request to `/v2/projects`.
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/projects_list'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/projects"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                  PerPage: 10,
                  Page:    1,
                }

                client.Projects.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            projects = client.projects.all
            projects.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.projects.list()
      security:
        - bearer_auth:
            - project:read
    post:
      operationId: projects_create
      summary: Create a Project
      description: To create a project, send a POST request to `/v2/projects`.
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/project_base'
              required:
                - name
                - purpose
      responses:
        '201':
          $ref: '#/components/responses/existing_project'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"my-web-api", "description": "My website API", "purpose": "Service or API", "environment": "Production"}' \
              "https://api.digitalocean.com/v2/projects"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createReq := &godo.CreateProjectRequest{
                  Name:        "my-web-api",
                  Description: "My website API",
                  Purpose:     "Service or API",
                  Environment: "Production",
                }

                client.Projects.Create(ctx, createReq)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            project = DropletKit::Project.new(
              name: 'my-api',
              description: 'My website API',
              purpose: 'Service or API',
              environment: 'Production'
            )
            client.projects.create(project)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "my-web-api",
              "description": "My website API",
              "purpose": "Service or API",
              "environment": "Production"
            }

            resp = client.projects.create(body=req)
      security:
        - bearer_auth:
            - project:create
  /v2/projects/default:
    get:
      operationId: projects_get_default
      summary: Retrieve the Default Project
      description: >-
        To get your default project, send a GET request to
        `/v2/projects/default`.
      tags:
        - Projects
      responses:
        '200':
          $ref: '#/components/responses/default_project'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/projects/default"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                client.Projects.GetDefault(ctx)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.projects.find_default
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.projects.get_default()
      security:
        - bearer_auth:
            - project:read
    put:
      operationId: projects_update_default
      summary: Update the Default Project
      description: >-
        To update you default project, send a PUT request to
        `/v2/projects/default`. All of the following attributes must be sent.
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/project'
              required:
                - name
                - description
                - purpose
                - environment
                - is_default
      responses:
        '200':
          $ref: '#/components/responses/existing_project'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"my-web-api", "description": "My website API", "purpose": "Service or API", "environment": "Staging", "is_default": false}' \
              "https://api.digitalocean.com/v2/projects/default"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                updateReq := &godo.UpdateProjectRequest{
                  Name:        "my-web-api",
                  Description: "My website API",
                  Purpose:     "Service or API",
                  Environment: "Staging",
                  IsDefault:   false,
                }

                client.Projects.Update(ctx, godo.DefaultProject, updateReq)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            project = client.projects.find_default
            project.environment = 'Staging'
            client.projects.update(project, id: 'default')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "my-web-api",
              "description": "My website API",
              "purpose": "Service or API",
              "environment": "Production",
              "is_default": False
            }

            resp = client.projects.update_default(body=req)
      security:
        - bearer_auth:
            - project:update
    patch:
      operationId: projects_patch_default
      summary: Patch the Default Project
      description: >-
        To update only specific attributes of your default project, send a PATCH
        request to `/v2/projects/default`. At least one of the following
        attributes needs to be sent.
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
            example:
              name: my-web-api
      responses:
        '200':
          $ref: '#/components/responses/existing_project'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PATCH \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"environment": "Staging"}' \
              "https://api.digitalocean.com/v2/projects/default"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                updateReq := &godo.UpdateProjectRequest{
                  Environment: "Staging",
                }

                client.Projects.Update(ctx, godo.DefaultProject, updateReq)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            project = client.projects.find_default
            project.environment = 'Staging'
            client.projects.update(project, id: 'default')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "my-web-api"
            }

            resp = client.projects.patch_default(body=req)
      security:
        - bearer_auth:
            - project:update
  /v2/projects/{project_id}:
    get:
      operationId: projects_get
      summary: Retrieve an Existing Project
      description: To get a project, send a GET request to `/v2/projects/$PROJECT_ID`.
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        '200':
          $ref: '#/components/responses/existing_project'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/projects/4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                client.Projects.Get(ctx, "4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679")
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            project = client.projects.find(id:
            '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.projects.get(project_id="4e1bfbc3")
      security:
        - bearer_auth:
            - project:read
    put:
      operationId: projects_update
      summary: Update a Project
      description: >-
        To update a project, send a PUT request to `/v2/projects/$PROJECT_ID`.
        All of the following attributes must be sent.
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/project_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/project'
              required:
                - name
                - description
                - purpose
                - environment
                - is_default
      responses:
        '200':
          $ref: '#/components/responses/existing_project'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"my-web-api", "description": "My website API", "purpose": "Service or API", "environment": "Staging", "is_default": false}' \
              "https://api.digitalocean.com/v2/projects/4e1bfbc3\
              -dc3e-41f2-a18f-1b4d7ba71679"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                updateReq := &godo.UpdateProjectRequest{
                  Name:        "my-web-api",
                  Description: "My website API",
                  Purpose:     "Service or API",
                  Environment: "Staging",
                  IsDefault:   false,
                }

                client.Projects.Update(ctx, "4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679", updateReq)

            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            project = client.projects.find(id:
            '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')

            project.environment = 'Staging'

            client.projects.update(project, id:
            '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "my-web-api",
              "description": "My website API",
              "purpose": "Service or API",
              "environment": "Production",
              "is_default": False
            }

            resp = client.projects.update_default(body=req)
      security:
        - bearer_auth:
            - project:update
    patch:
      operationId: projects_patch
      summary: Patch a Project
      description: >-
        To update only specific attributes of a project, send a PATCH request to
        `/v2/projects/$PROJECT_ID`. At least one of the following attributes
        needs to be sent.
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/project_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
            example:
              name: my-web-api
      responses:
        '200':
          $ref: '#/components/responses/existing_project'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PATCH \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"environment": "Staging"}' \
              "https://api.digitalocean.com/v2/projects/4e1bfbc3\
              -dc3e-41f2-a18f-1b4d7ba71679"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                updateReq := &godo.UpdateProjectRequest{
                  Environment: "Staging",
                }

                client.Projects.Update(ctx, "4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679", updateReq)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            project = client.projects.find(id:
            '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')

            project.environment = 'Staging'

            client.projects.update(project, id:
            '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "my-web-api"
            }

            resp = client.projects.patch(project_id="4e1bfbc3", body=req)
      security:
        - bearer_auth:
            - project:update
    delete:
      operationId: projects_delete
      summary: Delete an Existing Project
      description: >
        To delete a project, send a DELETE request to
        `/v2/projects/$PROJECT_ID`. To

        be deleted, a project must not have any resources assigned to it. Any
        existing

        resources must first be reassigned or destroyed, or you will receive a
        412 error.


        A successful request will receive a 204 status code with no body in
        response.

        This indicates that the request was processed successfully.
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/project_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '412':
          $ref: '#/components/responses/precondition_failed'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: >-
            curl -X DELETE -H 'Content-Type: application/json' -H
            "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/projects/4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Projects.Delete(ctx, '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.projects.delete(id: '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679') 
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.projects.delete(project_id="fda9fda")
      security:
        - bearer_auth:
            - project:delete
  /v2/projects/{project_id}/resources:
    get:
      operationId: projects_list_resources
      summary: List Project Resources
      description: >
        To list all your resources in a project, send a GET request to
        `/v2/projects/$PROJECT_ID/resources`.


        This endpoint will only return resources that you are authorized to see.
        For example, to see Droplets in a project, include the `droplet:read`
        scope.
      tags:
        - Project Resources
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/resources_list'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/projects/4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679/resources"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                  PerPage: 10,
                  Page:    1,
                }

                client.Projects.ListResources(ctx, "4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679", opt)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.projects.list_resources(id:
            '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.projects.list_resources(project_id="4e1bfbc3")
      security:
        - bearer_auth:
            - project:read
    post:
      operationId: projects_assign_resources
      summary: Assign Resources to a Project
      description: >
        To assign resources to a project, send a POST request to
        `/v2/projects/$PROJECT_ID/resources`.


        You must have both `project:update` and `<resource>:read` scopes to
        assign new resources. For example, to assign a Droplet to a project,
        include both the `project:update` and `droplet:read` scopes.
      tags:
        - Project Resources
      parameters:
        - $ref: '#/components/parameters/project_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project_assignment'
            examples:
              assign_resources:
                value:
                  resources:
                    - do:droplet:13457723
                    - do:domain:example.com
      responses:
        '200':
          $ref: '#/components/responses/assigned_resources_list'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"resources": ["do:droplet:1", "do:floatingip:192.168.99.100"]}' \
              "https://api.digitalocean.com/v2/projects/4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679/resources"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                res := []interface{}{
                  &godo.Droplet{ID: 1},
                  "do:droplet:42",
                  &godo.FloatingIP{IP: "192.168.99.100"},
                }

                client.Projects.AssignResources(ctx, "4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679", res...)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            resource = DropletKit::ProjectAssignment.new(urn: 'do:droplet:1')

            client.projects.assign_resources([resource], id:
            '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "resources": [
                "do:droplet:13457723",
                "do:domain:example.com"
              ]
            }


            resp = client.projects.assign_resources(project_id="8dafda",
            body=req)
      security:
        - bearer_auth:
            - project:update
  /v2/projects/default/resources:
    get:
      operationId: projects_list_resources_default
      summary: List Default Project Resources
      description: >
        To list all your resources in your default project, send a GET request
        to `/v2/projects/default/resources`.


        Only resources that you are authorized to see will be returned. For
        example, to see Droplets in a project, include the `droplet:read` scope.
      tags:
        - Project Resources
      responses:
        '200':
          $ref: '#/components/responses/resources_list'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/projects/default/resources"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                  PerPage: 10,
                  Page:    1,
                }

                client.Projects.ListResources(ctx, godo.DefaultProject, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.projects.list_resources(id: 'default')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.projects.list_resources_default()
      security:
        - bearer_auth:
            - project:read
    post:
      operationId: projects_assign_resources_default
      summary: Assign Resources to Default Project
      description: >
        To assign resources to your default project, send a POST request to
        `/v2/projects/default/resources`.


        You must have both project:update and <resource>:read scopes to assign
        new resources. For example, to assign a Droplet to the default project,
        include both the `project:update` and `droplet:read` scopes.
      tags:
        - Project Resources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project_assignment'
            examples:
              assign_resources:
                value:
                  resources:
                    - do:droplet:13457723
                    - do:domain:example.com
      responses:
        '200':
          $ref: '#/components/responses/assigned_resources_list'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"resources": ["do:droplet:1", "do:floatingip:192.168.99.100"]}' \
              "https://api.digitalocean.com/v2/projects/default/resources"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                res := []interface{}{
                  &godo.Droplet{ID: 1},
                  "do:droplet:42",
                  &godo.FloatingIP{IP: "192.168.99.100"},
                }

                client.Projects.AssignResources(ctx, godo.DefaultProject, res...)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            resource = DropletKit::ProjectAssignment.new(urn: 'do:droplet:1')
            client.projects.assign_resources([resource], id: 'default')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "resources": [
                "do:droplet:13457723",
                "do:domain:example.com"
              ]
            }

            resp = client.projects.assign_resources_default(body=req)
      security:
        - bearer_auth:
            - project:update
components:
  schemas:
    project_base:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679
          description: The unique universal identifier of this project.
        owner_uuid:
          type: string
          readOnly: true
          example: 99525febec065ca37b2ffe4f852fd2b2581895e7
          description: The unique universal identifier of the project owner.
        owner_id:
          type: integer
          readOnly: true
          example: 258992
          description: The integer id of the project owner.
        name:
          type: string
          maxLength: 175
          example: my-web-api
          description: >-
            The human-readable name for the project. The maximum length is 175
            characters and the name must be unique.
        description:
          type: string
          maxLength: 255
          example: My website API
          description: >-
            The description of the project. The maximum length is 255
            characters.
        purpose:
          type: string
          maxLength: 255
          example: Service or API
          description: >
            The purpose of the project. The maximum length is 255 characters. It
            can

            have one of the following values:


            - Just trying out DigitalOcean

            - Class project / Educational purposes

            - Website or blog

            - Web Application

            - Service or API

            - Mobile Application

            - Machine learning / AI / Data processing

            - IoT

            - Operational / Developer tooling


            If another value for purpose is specified, for example, "your custom
            purpose",

            your purpose will be stored as `Other: your custom purpose`.
        environment:
          type: string
          enum:
            - Development
            - Staging
            - Production
          example: Production
          description: The environment of the project's resources.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2018-09-27T20:10:35Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the project was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          example: '2018-09-27T20:10:35Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the project was updated.
    project:
      allOf:
        - $ref: '#/components/schemas/project_base'
        - type: object
          properties:
            is_default:
              type: boolean
              example: false
              description: >-
                If true, all resources will be added to this project if no
                project is specified.
    project_assignment:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/urn'
          example:
            - do:droplet:13457723
          description: >-
            A list of uniform resource names (URNs) to be added to a project.
            Only resources that you are authorized to see will be returned.
    pagination:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/page_links'
    meta:
      type: object
      properties:
        meta:
          allOf:
            - $ref: '#/components/schemas/meta_properties'
            - required:
                - total
      required:
        - meta
    error:
      type: object
      properties:
        id:
          description: >-
            A short identifier corresponding to the HTTP status code returned.
            For  example, the ID for a response returning a 404 status code
            would be "not_found."
          type: string
          example: not_found
        message:
          description: >-
            A message providing additional information about the error,
            including  details to help resolve it when possible.
          type: string
          example: The resource you were accessing could not be found.
        request_id:
          description: >-
            Optionally, some endpoints may include a request ID that should be 
            provided when reporting bugs or opening support tickets to help 
            identify the issue.
          type: string
          example: 4d9d8375-3c56-4925-a3e7-eb137fed17e9
      required:
        - id
        - message
    resource:
      type: object
      properties:
        urn:
          $ref: '#/components/schemas/urn'
        assigned_at:
          type: string
          format: date-time
          example: '2018-09-28T19:26:37Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the project was created.
        links:
          type: object
          description: >-
            The links object contains the `self` object, which contains the
            resource relationship.
          properties:
            self:
              type: string
              format: uri
              example: https://api.digitalocean.com/v2/droplets/13457723
              description: A URI that can be used to retrieve the resource.
        status:
          type: string
          enum:
            - ok
            - not_found
            - assigned
            - already_assigned
            - service_down
          example: ok
          description: The status of assigning and fetching the resources.
    urn:
      type: string
      pattern: >-
        ^do:(dbaas|domain|droplet|floatingip|loadbalancer|space|volume|kubernetes|vpc):.*
      example: do:droplet:13457723
      description: >-
        The uniform resource name (URN) for the resource in the format
        do:resource_type:resource_id.
    page_links:
      type: object
      properties:
        pages:
          anyOf:
            - $ref: '#/components/schemas/forward_links'
            - $ref: '#/components/schemas/backward_links'
            - {}
          example:
            pages:
              first: https://api.digitalocean.com/v2/account/keys?page=1
              prev: https://api.digitalocean.com/v2/account/keys?page=2
    meta_properties:
      type: object
      description: Information about the response itself.
      properties:
        total:
          description: Number of objects returned by the request.
          type: integer
          example: 1
    forward_links:
      allOf:
        - $ref: '#/components/schemas/link_to_last_page'
        - $ref: '#/components/schemas/link_to_next_page'
    backward_links:
      allOf:
        - $ref: '#/components/schemas/link_to_first_page'
        - $ref: '#/components/schemas/link_to_prev_page'
    link_to_last_page:
      type: object
      properties:
        last:
          description: URI of the last page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_next_page:
      type: object
      properties:
        next:
          description: URI of the next page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_first_page:
      type: object
      properties:
        first:
          description: URI of the first page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
    link_to_prev_page:
      type: object
      properties:
        prev:
          description: URI of the previous page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
  responses:
    projects_list:
      description: >-
        The response will be a JSON object with a key called `projects`. The
        value of this will be an object with the standard project attributes
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/project'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              projects:
                - id: 4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679
                  owner_uuid: 99525febec065ca37b2ffe4f852fd2b2581895e7
                  owner_id: 258992
                  name: my-web-api
                  description: My website API
                  purpose: Service or API
                  environment: Production
                  is_default: false
                  created_at: '2018-09-27T20:10:35Z'
                  updated_at: '2018-09-27T20:10:35Z'
                - id: addb4547-6bab-419a-8542-76263a033cf6
                  owner_uuid: 99525febec065ca37b2ffe4f852fd2b2581895e7
                  owner_id: 258992
                  name: Default
                  description: Default project
                  purpose: Just trying out DigitalOcean
                  environment: Development
                  is_default: true
                  created_at: '2017-10-19T21:44:20Z'
                  updated_at: '2019-11-05T18:50:03Z'
              links:
                pages:
                  first: https://api.digitalocean.com/v2/projects?page=1
                  last: https://api.digitalocean.com/v2/projects?page=1
              meta:
                total: 2
    unauthorized:
      description: Authentication failed due to invalid credentials.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unauthorized
            message: Unable to authenticate you.
    too_many_requests:
      description: The API rate limit has been exceeded.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: too_many_requests
            message: API rate limit exceeded.
    server_error:
      description: There was a server error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: server_error
            message: Unexpected server-side error
    unexpected_error:
      description: There was an unexpected error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: example_error
            message: some error message
    existing_project:
      description: >-
        The response will be a JSON object with a key called `project`. The
        value of this will be an object with the standard project attributes
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              project:
                $ref: '#/components/schemas/project'
            type: object
    default_project:
      description: >-
        The response will be a JSON object with a key called `project`. The
        value of this will be an object with the standard project attributes
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              project:
                $ref: '#/components/schemas/project'
            example:
              project:
                id: addb4547-6bab-419a-8542-76263a033cf6
                owner_uuid: 99525febec065ca37b2ffe4f852fd2b2581895e7
                owner_id: 258992
                name: Default
                description: Default project
                purpose: Just trying out DigitalOcean
                environment: Development
                is_default: true
                created_at: '2017-10-19T21:44:20Z'
                updated_at: '2019-11-05T18:50:03Z'
            type: object
    not_found:
      description: The resource was not found.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: not_found
            message: The resource you requested could not be found.
    no_content:
      description: The action was successful and the response body is empty.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
    precondition_failed:
      description: Only an empty project can be deleted.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: precondition_failed
            message: >-
              cannot delete a project with resources. move or remove the
              resources first
    resources_list:
      description: >
        The response will be a JSON object with a key called `resources`.

        The value of this will be an object with the standard resource
        attributes.


        Only resources that you are authorized to see will be returned.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  resources:
                    description: >-
                      The resources that are assigned to this project. Only
                      resources that you are authorized to see will be returned.
                    type: array
                    items:
                      $ref: '#/components/schemas/resource'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              resources:
                - urn: do:droplet:13457723
                  assigned_at: '2018-09-28T19:26:37Z'
                  links:
                    self: https://api.digitalocean.com/v2/droplets/13457723
                  status: ok
                - urn: do:domain:example.com
                  assigned_at: '2019-03-31T16:24:14Z'
                  links:
                    self: https://api.digitalocean.com/v2/domains/example.com
                  status: ok
              links:
                pages:
                  first: >-
                    https://api.digitalocean.com/v2/projects/4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679/resources?page=1
                  last: >-
                    https://api.digitalocean.com/v2/projects/4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679/resources?page=1
              meta:
                total: 2
    assigned_resources_list:
      description: >
        The response will be a JSON object with a key called `resources`.

        The value of this will be an object with the standard resource
        attributes.


        Only resources that you are authorized to see will be returned.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              resources:
                description: >-
                  All resources, including the ones added in the request, that
                  are assigned to the project. Only resources that you are
                  authorized to see will be returned.
                type: array
                items:
                  $ref: '#/components/schemas/resource'
            example:
              resources:
                - urn: do:droplet:13457723
                  assigned_at: '2018-09-28T19:26:37Z'
                  links:
                    self: https://api.digitalocean.com/v2/droplets/13457723
                  status: ok
                - urn: do:domain:example.com
                  assigned_at: '2019-03-31T16:24:14Z'
                  links:
                    self: https://api.digitalocean.com/v2/domains/example.com
                  status: ok
  parameters:
    per_page:
      in: query
      name: per_page
      required: false
      description: Number of items returned per page
      schema:
        type: integer
        minimum: 1
        default: 20
        maximum: 200
      example: 2
    page:
      in: query
      name: page
      required: false
      description: Which 'page' of paginated results to return.
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1
    project_id:
      in: path
      name: project_id
      description: A unique identifier for a project.
      required: true
      schema:
        type: string
        format: uuid
        minimum: 1
      example: 4de7ac8b-495b-4884-9a69-1050c6793cd6
  headers:
    ratelimit-limit:
      schema:
        type: integer
      example: 5000
      description: >-
        The default limit on number of requests that can be made per hour and
        per minute. Current rate limits are 5000 requests per hour and 250
        requests per minute.
    ratelimit-remaining:
      schema:
        type: integer
      example: 4816
      description: >-
        The number of requests in your hourly quota that remain before you hit
        your request limit. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
    ratelimit-reset:
      schema:
        type: integer
      example: 1444931833
      description: >-
        The time when the oldest request will expire. The value is given in Unix
        epoch time. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
  x-stackQL-resources:
    projects:
      id: digitalocean.projects.projects
      name: projects
      title: Projects
      methods:
        projects_list:
          operation:
            $ref: '#/paths/~1v2~1projects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.projects
        projects_create:
          operation:
            $ref: '#/paths/~1v2~1projects/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        projects_get:
          operation:
            $ref: '#/paths/~1v2~1projects~1{project_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.project
        projects_update:
          operation:
            $ref: '#/paths/~1v2~1projects~1{project_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_patch:
          operation:
            $ref: '#/paths/~1v2~1projects~1{project_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_delete:
          operation:
            $ref: '#/paths/~1v2~1projects~1{project_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/projects/methods/projects_get'
          - $ref: '#/components/x-stackQL-resources/projects/methods/projects_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/projects/methods/projects_create'
        update:
          - $ref: '#/components/x-stackQL-resources/projects/methods/projects_patch'
        delete:
          - $ref: '#/components/x-stackQL-resources/projects/methods/projects_delete'
        replace:
          - $ref: '#/components/x-stackQL-resources/projects/methods/projects_update'
    defaults:
      id: digitalocean.projects.defaults
      name: defaults
      title: Defaults
      methods:
        projects_get_default:
          operation:
            $ref: '#/paths/~1v2~1projects~1default/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.project
        projects_update_default:
          operation:
            $ref: '#/paths/~1v2~1projects~1default/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_patch_default:
          operation:
            $ref: '#/paths/~1v2~1projects~1default/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/defaults/methods/projects_get_default
        insert: []
        update:
          - $ref: >-
              #/components/x-stackQL-resources/defaults/methods/projects_patch_default
        delete: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/defaults/methods/projects_update_default
    resources:
      id: digitalocean.projects.resources
      name: resources
      title: Resources
      methods:
        projects_list_resources:
          operation:
            $ref: '#/paths/~1v2~1projects~1{project_id}~1resources/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.resources
        projects_assign_resources:
          operation:
            $ref: '#/paths/~1v2~1projects~1{project_id}~1resources/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/resources/methods/projects_list_resources
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/resources/methods/projects_assign_resources
        update: []
        delete: []
        replace: []
    default_resources:
      id: digitalocean.projects.default_resources
      name: default_resources
      title: Default Resources
      methods:
        projects_list_resources_default:
          operation:
            $ref: '#/paths/~1v2~1projects~1default~1resources/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.resources
        projects_assign_resources_default:
          operation:
            $ref: '#/paths/~1v2~1projects~1default~1resources/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/default_resources/methods/projects_list_resources_default
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/default_resources/methods/projects_assign_resources_default
        update: []
        delete: []
        replace: []
servers:
  - url: https://api.digitalocean.com
