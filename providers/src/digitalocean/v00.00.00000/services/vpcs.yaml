openapi: 3.0.0
info:
  title: vpcs API
  description: digitalocean API
  version: '2.0'
paths:
  /v2/vpcs:
    get:
      operationId: vpcs_list
      summary: List All VPCs
      description: To list all of the VPCs on your account, send a GET request to `/v2/vpcs`.
      tags:
        - VPCs
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_vpcs'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/vpcs"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opts := &godo.ListOptions{
                 Page:    1,
                 PerPage: 200,
                }

                vpcs, _, err := client.VPCs.List(ctx, opts)
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.vpcs.list()
      security:
        - bearer_auth:
            - vpc:read
    post:
      operationId: vpcs_create
      summary: Create a New VPC
      description: |
        To create a VPC, send a POST request to `/v2/vpcs` specifying the attributes
        in the table below in the JSON body.

        **Note:** If you do not currently have a VPC network in a specific datacenter
        region, the first one that you create will be set as the default for that
        region. The default VPC for a region cannot be changed or deleted.
      tags:
        - VPCs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/vpc_updatable'
                - $ref: '#/components/schemas/vpc_create'
              required:
                - name
                - region
      responses:
        '201':
          $ref: '#/components/responses/existing_vpc'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"my-new-vpc", "region":"nyc1", "ip_range": "10.10.10.0/24"}' \
              "https://api.digitalocean.com/v2/vpcs"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createRequest := &godo.VPCCreateRequest{
                 Name:       "my-new-vpc",
                 RegionSlug: "nyc1",
                 IPRange:    "10.10.10.0/24",
                }

                vpc, _, err := client.VPCs.Create(ctx, createRequest)
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "env.prod-vpc",
              "description": "VPC for production environment",
              "region": "nyc1",
              "ip_range": "10.10.10.0/24"
            }

            resp = client.vpcs.create(body=req)
      security:
        - bearer_auth:
            - vpc:create
  /v2/vpcs/{vpc_id}:
    get:
      operationId: vpcs_get
      summary: Retrieve an Existing VPC
      description: To show information about an existing VPC, send a GET request to `/v2/vpcs/$VPC_ID`.
      tags:
        - VPCs
      parameters:
        - $ref: '#/components/parameters/vpc_id'
      responses:
        '200':
          $ref: '#/components/responses/existing_vpc'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/vpcs/5a4981aa-9653-4bd1-bef5-d6bff52042e4"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                vpc, _, err := client.VPCs.Get(ctx, "5a4981aa-9653-4bd1-bef5-d6bff52042e4")
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.vpcs.get(vpc_id="e0fe0f4d")
      security:
        - bearer_auth:
            - vpc:read
    put:
      operationId: vpcs_update
      summary: Update a VPC
      description: |
        To update information about a VPC, send a PUT request to `/v2/vpcs/$VPC_ID`.
      tags:
        - VPCs
      parameters:
        - $ref: '#/components/parameters/vpc_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/vpc_updatable'
                - $ref: '#/components/schemas/vpc_default'
              required:
                - name
      responses:
        '200':
          $ref: '#/components/responses/existing_vpc'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"renamed-new-vpc", "description": "A new description", "default": true}' \
              "https://api.digitalocean.com/v2/vpcs/5a4981aa-9653-4bd1-bef5-d6bff52042e4"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                updateRequest := &godo.VPCUpdateRequest{
                 Name:        "renamed-new-vpc",
                 Description: "A new description",
                }

                _, _, err := client.VPCs.Update(ctx, "5a4981aa-9653-4bd1-bef5-d6bff52042e4", updateRequest)
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "env.prod-vpc",
              "description": "VPC for production environment",
              "default": True
            }

            resp = client.vpcs.update(vpc_id="8fdsfa", body=req)
      security:
        - bearer_auth:
            - vpc:update
    patch:
      operationId: vpcs_patch
      summary: Partially Update a VPC
      description: |
        To update a subset of information about a VPC, send a PATCH request to
        `/v2/vpcs/$VPC_ID`.
      tags:
        - VPCs
      parameters:
        - $ref: '#/components/parameters/vpc_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/vpc_updatable'
                - $ref: '#/components/schemas/vpc_default'
      responses:
        '200':
          $ref: '#/components/responses/existing_vpc'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PATCH \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"description": "An updated description"}' \
              "https://api.digitalocean.com/v2/vpcs/5a4981aa-9653-4bd1-bef5-d6bff52042e4"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                vpcDesc := "An updated description"
                _, _, err := client.VPCs.Set(ctx, "5a4981aa-9653-4bd1-bef5-d6bff52042e4", godo.VPCSetDescription(vpcDesc))
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "env.prod-vpc",
              "description": "VPC for production environment",
              "default": True
            }

            resp = client.vpcs.patch(vpc_id="8fdsfa", body=req)
      security:
        - bearer_auth:
            - vpc:update
    delete:
      operationId: vpcs_delete
      summary: Delete a VPC
      description: |
        To delete a VPC, send a DELETE request to `/v2/vpcs/$VPC_ID`. A 204 status
        code with no body will be returned in response to a successful request.

        The default VPC for a region can not be deleted. Additionally, a VPC can only
        be deleted if it does not contain any member resources. Attempting to delete
        a region's default VPC or a VPC that still has members will result in a
        403 Forbidden error response.
      tags:
        - VPCs
      parameters:
        - $ref: '#/components/parameters/vpc_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/vpcs/e0fe0f4d-596a-465e-a902-571ce57b79fa"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                resp, err := client.VPCs.Delete(ctx, "5a4981aa-9653-4bd1-bef5-d6bff52042e4")
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.vpcs.delete(vpc_id="e0fe0f4d")
      security:
        - bearer_auth:
            - vpc:delete
  /v2/vpcs/{vpc_id}/members:
    get:
      operationId: vpcs_list_members
      summary: List the Member Resources of a VPC
      description: |
        To list all of the resources that are members of a VPC, send a GET request to
        `/v2/vpcs/$VPC_ID/members`.

        To only list resources of a specific type that are members of the VPC,
        included a `resource_type` query parameter. For example, to only list Droplets
        in the VPC, send a GET request to `/v2/vpcs/$VPC_ID/members?resource_type=droplet`.

        Only resources that you are authorized to see will be returned (e.g. to see Droplets,
        you must have `droplet:read`).
      tags:
        - VPCs
      parameters:
        - $ref: '#/components/parameters/vpc_id'
        - $ref: '#/components/parameters/vpc_resource_type'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/vpc_members'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/vpcs/5a4981aa-9653-4bd1-bef5-d6bff52042e4/members"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.vpcs.list_members(vpc_id="e0fe0f4d")
      security:
        - bearer_auth:
            - vpc:read
  /v2/vpcs/{vpc_id}/peerings:
    get:
      operationId: vpcs_list_peerings
      summary: List the Peerings of a VPC
      description: |
        To list all of a VPC's peerings, send a GET request to
        `/v2/vpcs/$VPC_ID/peerings`.
      tags:
        - VPCs
      parameters:
        - $ref: '#/components/parameters/vpc_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/vpc_peerings'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/vpcs/5a4981aa-9653-4bd1-bef5-d6bff52042e4/peerings"
      security:
        - bearer_auth:
            - vpc_peering:read
    post:
      operationId: vpcs_create_peerings
      summary: Create a Peering with a VPC
      description: |
        To create a new VPC peering for a given VPC, send a POST request to
        `/v2/vpcs/$VPC_ID/peerings`.
      tags:
        - VPCs
      parameters:
        - $ref: '#/components/parameters/vpc_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  pattern: ^[a-zA-Z0-9\-\.]+$
                  example: nyc1-blr1-peering
                  description: The name of the VPC peering. Must be unique and may only contain alphanumeric characters, dashes, and periods.
                vpc_id:
                  type: string
                  format: uuid
                  example: c140286f-e6ce-4131-8b7b-df4590ce8d6a
                  description: The ID of the VPC to peer with.
              required:
                - name
                - vpc_id
      responses:
        '202':
          $ref: '#/components/responses/vpc_peering'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"example-vpc-peering", "vpc_id": "e51aed59-3bb1-4a6a-8de0-9d1329e9c997"}' \
              "https://api.digitalocean.com/v2/vpcs/5a4981aa-9653-4bd1-bef5-d6bff52042e4/peerings"
      security:
        - bearer_auth:
            - vpc_peering:create
  /v2/vpcs/{vpc_id}/peerings/{vpc_peering_id}:
    patch:
      operationId: vpcs_patch_peerings
      summary: Update a VPC Peering
      description: |
        To update the name of a VPC peering in a particular VPC, send a PATCH request 
        to `/v2/vpcs/$VPC_ID/peerings/$VPC_PEERING_ID` with the new `name` in the 
        request body.
      tags:
        - VPCs
      parameters:
        - $ref: '#/components/parameters/vpc_id'
        - $ref: '#/components/parameters/vpc_peering_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/vpc_peering_updatable'
              required:
                - name
      responses:
        '200':
          $ref: '#/components/responses/vpc_peering'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PATCH \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "renamed-my-first-vpc-peering"}' \
              "https://api.digitalocean.com/v2/vpcs/997615ce-132d-4bae-9270-9ee21b395e5d/peerings/6b5c619c-359c-44ca-87e2-47e98170c01d"
      security:
        - bearer_auth:
            - vpc_peering:update
  /v2/vpc_peerings:
    get:
      operationId: vpcPeerings_list
      summary: List All VPC Peerings
      description: To list all of the VPC peerings on your account, send a GET request to `/v2/vpc_peerings`.
      tags:
        - VPC Peerings
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/region'
      responses:
        '200':
          $ref: '#/components/responses/all_vpc_peerings'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/vpc_peerings?region=sfo3&page=1&per_page=20"
      security:
        - bearer_auth:
            - vpc_peering:read
    post:
      operationId: vpcPeerings_create
      summary: Create a New VPC Peering
      description: |
        To create a new VPC Peering, send a POST request to `/v2/vpc_peerings` 
        specifying a name and a list of two VPC IDs to peer. The response code, 202 
        Accepted, does not indicate the success or failure of the operation, just 
        that the request has been accepted for processing.
      tags:
        - VPC Peerings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/vpc_peering_updatable'
                - $ref: '#/components/schemas/vpc_peering_create'
              required:
                - name
                - vpc_ids
      responses:
        '202':
          $ref: '#/components/responses/provisioning_vpc_peering'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "my-first-vpc-peering", "vpc_ids": [ "997615ce-132d-4bae-9270-9ee21b395e5d", "e51aed59-3bb1-4a6a-8de0-9d1329e9c997"]}' \
              "https://api.digitalocean.com/v2/vpc_peerings"
      security:
        - bearer_auth:
            - vpc_peering:create
  /v2/vpc_peerings/{vpc_peering_id}:
    get:
      operationId: vpcPeerings_get
      summary: Retrieve an Existing VPC Peering
      description: |
        To show information about an existing VPC Peering, send a GET request to `/v2/vpc_peerings/$VPC_PEERING_ID`.
      tags:
        - VPC Peerings
      parameters:
        - $ref: '#/components/parameters/vpc_peering_id'
      responses:
        '200':
          $ref: '#/components/responses/active_vpc_peering'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/vpc_peerings/5a4981aa-9653-4bd1-bef5-d6bff52042e4"
      security:
        - bearer_auth:
            - vpc_peering:read
    patch:
      operationId: vpcPeerings_patch
      summary: Update a VPC peering
      description: |
        To update the name of a VPC peering, send a PATCH request to `/v2/vpc_peerings/$VPC_PEERING_ID` with the new `name` in the request body.
      tags:
        - VPC Peerings
      parameters:
        - $ref: '#/components/parameters/vpc_peering_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/vpc_peering_updatable'
              required:
                - name
      responses:
        '200':
          $ref: '#/components/responses/active_vpc_peering'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PATCH \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"renamed-vpc-peering"}' \
              "https://api.digitalocean.com/v2/vpc_peerings/5a4981aa-9653-4bd1-bef5-d6bff52042e4"
      security:
        - bearer_auth:
            - vpc_peering:update
    delete:
      operationId: vpcPeerings_delete
      summary: Delete a VPC peering
      description: |
        To delete a VPC peering, send a DELETE request to `/v2/vpc_peerings/$VPC_PEERING_ID`.
      tags:
        - VPC Peerings
      parameters:
        - $ref: '#/components/parameters/vpc_peering_id'
      responses:
        '202':
          $ref: '#/components/responses/deleting_vpc_peering'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/vpc_peerings/6b5c619c-359c-44ca-87e2-47e98170c01d"
      security:
        - bearer_auth:
            - vpc_peering:delete
components:
  schemas:
    vpc_updatable:
      type: object
      properties:
        name:
          type: string
          pattern: ^[a-zA-Z0-9\-\.]+$
          example: env.prod-vpc
          description: The name of the VPC. Must be unique and may only contain alphanumeric characters, dashes, and periods.
        description:
          type: string
          maxLength: 255
          example: VPC for production environment
          description: A free-form text field for describing the VPC's purpose. It may be a maximum of 255 characters.
    vpc_create:
      type: object
      properties:
        region:
          type: string
          example: nyc1
          description: The slug identifier for the region where the VPC will be created.
        ip_range:
          type: string
          example: 10.10.10.0/24
          description: The range of IP addresses in the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be smaller than `/28` nor larger than `/16`. If no IP range is specified, a `/20` network range is generated that won't conflict with other VPC networks in your account.
    vpc_default:
      type: object
      properties:
        default:
          type: boolean
          example: true
          description: A boolean value indicating whether or not the VPC is the default network for the region. All applicable resources are placed into the default VPC network unless otherwise specified during their creation. The `default` field cannot be unset from `true`. If you want to set a new default VPC network, update the `default` field of another VPC network in the same region. The previous network's `default` field will be set to `false` when a new default VPC has been defined.
    vpc_peering_updatable:
      type: object
      properties:
        name:
          type: string
          pattern: ^[a-zA-Z0-9\-]+$
          example: nyc1-blr1-peering
          description: The name of the VPC peering. Must be unique within the team and may only contain alphanumeric characters and dashes.
    vpc_peering_create:
      type: object
      properties:
        vpc_ids:
          type: array
          items:
            type: string
            format: uuid
          minItems: 2
          maxItems: 2
          example:
            - c140286f-e6ce-4131-8b7b-df4590ce8d6a
            - 994a2735-dc84-11e8-80bc-3cfdfea9fba1
          description: An array of the two peered VPCs IDs.
    vpc:
      type: object
      properties:
        name:
          type: string
          pattern: ^[a-zA-Z0-9\-\.]+$
          example: env.prod-vpc
          description: The name of the VPC. Must be unique and may only contain alphanumeric characters, dashes, and periods.
        description:
          type: string
          maxLength: 255
          example: VPC for production environment
          description: A free-form text field for describing the VPC's purpose. It may be a maximum of 255 characters.
        region:
          type: string
          example: nyc1
          description: The slug identifier for the region where the VPC will be created.
        ip_range:
          type: string
          example: 10.10.10.0/24
          description: The range of IP addresses in the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be smaller than `/28` nor larger than `/16`. If no IP range is specified, a `/20` network range is generated that won't conflict with other VPC networks in your account.
        default:
          type: boolean
          example: true
          description: A boolean value indicating whether or not the VPC is the default network for the region. All applicable resources are placed into the default VPC network unless otherwise specified during their creation. The `default` field cannot be unset from `true`. If you want to set a new default VPC network, update the `default` field of another VPC network in the same region. The previous network's `default` field will be set to `false` when a new default VPC has been defined.
        id:
          type: string
          format: uuid
          readOnly: true
          example: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
          description: A unique ID that can be used to identify and reference the VPC.
        urn:
          type: string
          pattern: ^do:(dbaas|domain|droplet|floatingip|loadbalancer|space|volume|kubernetes|vpc):.*
          example: do:droplet:13457723
          description: The uniform resource name (URN) for the resource in the format do:resource_type:resource_id.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-03-13T19:20:47.442049222Z'
          description: A time value given in ISO8601 combined date and time format.
    pagination:
      type: object
      properties:
        links:
          type: object
          properties:
            pages:
              anyOf:
                - type: object
                  properties:
                    last:
                      description: URI of the last page of the results.
                      type: string
                      example: https://api.digitalocean.com/v2/images?page=2
                    next:
                      description: URI of the next page of the results.
                      type: string
                      example: https://api.digitalocean.com/v2/images?page=2
                - type: object
                  properties:
                    first:
                      description: URI of the first page of the results.
                      type: string
                      example: https://api.digitalocean.com/v2/images?page=1
                    prev:
                      description: URI of the previous page of the results.
                      type: string
                      example: https://api.digitalocean.com/v2/images?page=1
                - {}
              example:
                pages:
                  first: https://api.digitalocean.com/v2/account/keys?page=1
                  prev: https://api.digitalocean.com/v2/account/keys?page=2
    meta:
      type: object
      properties:
        meta:
          type: object
          description: Information about the response itself.
          required:
            - total
          properties:
            total:
              description: Number of objects returned by the request.
              type: integer
              example: 1
      required:
        - meta
    error:
      type: object
      properties:
        id:
          description: A short identifier corresponding to the HTTP status code returned. For  example, the ID for a response returning a 404 status code would be "not_found."
          type: string
          example: not_found
        message:
          description: A message providing additional information about the error, including  details to help resolve it when possible.
          type: string
          example: The resource you were accessing could not be found.
        request_id:
          description: Optionally, some endpoints may include a request ID that should be  provided when reporting bugs or opening support tickets to help  identify the issue.
          type: string
          example: 4d9d8375-3c56-4925-a3e7-eb137fed17e9
      required:
        - id
        - message
    vpc_member:
      type: object
      properties:
        name:
          type: string
          example: nyc1-load-balancer-01
          description: The name of the resource.
        urn:
          type: string
          pattern: ^do:(dbaas|domain|droplet|floatingip|loadbalancer|space|volume|kubernetes|vpc):.*
          example: do:droplet:13457723
          description: The uniform resource name (URN) for the resource in the format do:resource_type:resource_id.
        created_at:
          type: string
          example: '2020-03-13T19:30:48Z'
          description: A time value given in ISO8601 combined date and time format that represents when the resource was created.
    vpc_peering:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
          description: A unique ID that can be used to identify and reference the VPC peering.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-03-13T19:20:47.442049222Z'
          description: A time value given in ISO8601 combined date and time format.
        status:
          type: string
          enum:
            - PROVISIONING
            - ACTIVE
            - DELETING
          readOnly: true
          example: ACTIVE
          description: The current status of the VPC peering.
        vpc_ids:
          type: array
          items:
            type: string
            format: uuid
          minItems: 2
          maxItems: 2
          example:
            - c140286f-e6ce-4131-8b7b-df4590ce8d6a
            - 994a2735-dc84-11e8-80bc-3cfdfea9fba1
          description: An array of the two peered VPCs IDs.
        name:
          type: string
          pattern: ^[a-zA-Z0-9\-]+$
          example: nyc1-blr1-peering
          description: The name of the VPC peering. Must be unique within the team and may only contain alphanumeric characters and dashes.
    region_slug:
      type: string
      description: The slug identifier for the region where the resource will initially be  available.
      enum:
        - ams1
        - ams2
        - ams3
        - blr1
        - fra1
        - lon1
        - nyc1
        - nyc2
        - nyc3
        - sfo1
        - sfo2
        - sfo3
        - sgp1
        - tor1
        - syd1
      example: nyc3
    vpc_base:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
          description: A unique ID that can be used to identify and reference the VPC.
        urn:
          type: string
          pattern: ^do:(dbaas|domain|droplet|floatingip|loadbalancer|space|volume|kubernetes|vpc):.*
          example: do:droplet:13457723
          description: The uniform resource name (URN) for the resource in the format do:resource_type:resource_id.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-03-13T19:20:47.442049222Z'
          description: A time value given in ISO8601 combined date and time format.
    page_links:
      type: object
      properties:
        pages:
          anyOf:
            - type: object
              properties:
                last:
                  description: URI of the last page of the results.
                  type: string
                  example: https://api.digitalocean.com/v2/images?page=2
                next:
                  description: URI of the next page of the results.
                  type: string
                  example: https://api.digitalocean.com/v2/images?page=2
            - type: object
              properties:
                first:
                  description: URI of the first page of the results.
                  type: string
                  example: https://api.digitalocean.com/v2/images?page=1
                prev:
                  description: URI of the previous page of the results.
                  type: string
                  example: https://api.digitalocean.com/v2/images?page=1
            - {}
          example:
            pages:
              first: https://api.digitalocean.com/v2/account/keys?page=1
              prev: https://api.digitalocean.com/v2/account/keys?page=2
    meta_properties:
      type: object
      description: Information about the response itself.
      properties:
        total:
          description: Number of objects returned by the request.
          type: integer
          example: 1
    urn:
      type: string
      pattern: ^do:(dbaas|domain|droplet|floatingip|loadbalancer|space|volume|kubernetes|vpc):.*
      example: do:droplet:13457723
      description: The uniform resource name (URN) for the resource in the format do:resource_type:resource_id.
    vpc_peering_base:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
          description: A unique ID that can be used to identify and reference the VPC peering.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-03-13T19:20:47.442049222Z'
          description: A time value given in ISO8601 combined date and time format.
        status:
          type: string
          enum:
            - PROVISIONING
            - ACTIVE
            - DELETING
          readOnly: true
          example: ACTIVE
          description: The current status of the VPC peering.
    forward_links:
      type: object
      properties:
        last:
          description: URI of the last page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
        next:
          description: URI of the next page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    backward_links:
      type: object
      properties:
        first:
          description: URI of the first page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
        prev:
          description: URI of the previous page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
    link_to_last_page:
      type: object
      properties:
        last:
          description: URI of the last page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_next_page:
      type: object
      properties:
        next:
          description: URI of the next page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_first_page:
      type: object
      properties:
        first:
          description: URI of the first page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
    link_to_prev_page:
      type: object
      properties:
        prev:
          description: URI of the previous page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
  responses:
    all_vpcs:
      description: The response will be a JSON object with a key called `vpcs`. This will be set to an array of objects, each of which will contain the standard attributes associated with a VPC.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  vpcs:
                    type: array
                    items:
                      $ref: '#/components/schemas/vpc'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              vpcs:
                - name: env.prod-vpc
                  description: VPC for production environment
                  region: nyc1
                  ip_range: 10.10.10.0/24
                  id: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
                  urn: do:vpc:5a4981aa-9653-4bd1-bef5-d6bff52042e4
                  default: false
                  created_at: '2020-03-13T19:20:47.442049222Z'
                - id: e0fe0f4d-596a-465e-a902-571ce57b79fa
                  urn: do:vpc:e0fe0f4d-596a-465e-a902-571ce57b79fa
                  name: default-nyc1
                  description: ''
                  region: nyc1
                  ip_range: 10.102.0.0/20
                  created_at: '2020-03-13T19:29:20Z'
                  default: true
                - id: d455e75d-4858-4eec-8c95-da2f0a5f93a7
                  urn: do:vpc:d455e75d-4858-4eec-8c95-da2f0a5f93a7
                  name: default-nyc3
                  description: ''
                  region: nyc3
                  ip_range: 10.100.0.0/20
                  created_at: '2019-11-19T22:19:35Z'
                  default: true
              links: {}
              meta:
                total: 3
    unauthorized:
      description: Authentication failed due to invalid credentials.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unauthorized
            message: Unable to authenticate you.
    not_found:
      description: The resource was not found.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: not_found
            message: The resource you requested could not be found.
    too_many_requests:
      description: The API rate limit has been exceeded.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: too_many_requests
            message: API rate limit exceeded.
    server_error:
      description: There was a server error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: server_error
            message: Unexpected server-side error
    unexpected_error:
      description: There was an unexpected error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: example_error
            message: some error message
    existing_vpc:
      description: The response will be a JSON object with a key called `vpc`. The value of this will be an object that contains the standard attributes associated with a VPC.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              vpc:
                $ref: '#/components/schemas/vpc'
    no_content:
      description: The action was successful and the response body is empty.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
    vpc_members:
      description: |
        The response will be a JSON object with a key called members. This will be set
        to an array of objects, each of which will contain the standard attributes
        associated with a VPC member.

        Only resources that you are authorized to see will be returned (e.g. to see Droplets,
        you must have `droplet:read`).
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  members:
                    type: array
                    items:
                      $ref: '#/components/schemas/vpc_member'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              members:
                - urn: do:loadbalancer:fb294d78-d193-4cb2-8737-ea620993591b
                  name: nyc1-load-balancer-01
                  created_at: '2020-03-13T19:30:48Z'
                - urn: do:dbaas:13f7a2f6-43df-4c4a-8129-8733267ddeea
                  name: db-postgresql-nyc1-55986
                  created_at: '2020-03-13T19:30:18Z'
                - urn: do:kubernetes:da39d893-96e1-4e4d-971d-1fdda33a46b1
                  name: k8s-nyc1-1584127772221
                  created_at: '2020-03-13T19:30:16Z'
                - urn: do:droplet:86e29982-03a7-4946-8a07-a0114dff8754
                  name: ubuntu-s-1vcpu-1gb-nyc1-01
                  created_at: '2020-03-13T19:29:20Z'
              links: {}
              meta:
                total: 4
    vpc_peerings:
      description: The response will be a JSON object with a key called `peerings`. This  will be set to an array of objects, each of which will contain the standard  attributes associated with a VPC peering.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  peerings:
                    type: array
                    items:
                      $ref: '#/components/schemas/vpc_peering'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              peerings:
                - id: 6b5c619c-359c-44ca-87e2-47e98170c01d
                  name: example-vpc-peering
                  vpc_ids:
                    - 997615ce-132d-4bae-9270-9ee21b395e5d
                    - e51aed59-3bb1-4a6a-8de0-9d1329e9c997
                  created_at: '2024-01-09T20:44:32Z'
                  status: ACTIVE
                - id: c212b274-911c-44cc-a117-23b7da4a2922
                  name: another-vpc-peering
                  vpc_ids:
                    - 5a100736-b085-4f69-81fd-feee325784bb
                    - c140286f-e6ce-4131-8b7b-df4590ce8d6a
                  created_at: '2024-01-10T13:29:58Z'
                  status: ACTIVE
              links: {}
              meta:
                total: 2
    vpc_peering:
      description: The response will be a JSON object with a key called `peering`, containing  the standard attributes associated with a VPC peering.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              peering:
                $ref: '#/components/schemas/vpc_peering'
            example:
              peering:
                id: 6b5c619c-359c-44ca-87e2-47e98170c01d
                name: example-vpc-peering
                vpc_ids:
                  - 997615ce-132d-4bae-9270-9ee21b395e5d
                  - e51aed59-3bb1-4a6a-8de0-9d1329e9c997
                created_at: '2024-01-09T20:44:32Z'
                status: PROVISIONING
    all_vpc_peerings:
      description: The response will be a JSON object with a key called `vpc_peerings`. This  will be set to an array of objects, each of which will contain the standard  attributes associated with a VPC peering.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  vpc_peerings:
                    type: array
                    items:
                      $ref: '#/components/schemas/vpc_peering'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              vpc_peerings:
                - id: 6b5c619c-359c-44ca-87e2-47e98170c01d
                  name: example-vpc-peering
                  vpc_ids:
                    - 997615ce-132d-4bae-9270-9ee21b395e5d
                    - e51aed59-3bb1-4a6a-8de0-9d1329e9c997
                  created_at: '2024-01-09T20:44:32Z'
                  status: ACTIVE
                - id: c212b274-911c-44cc-a117-23b7da4a2922
                  name: another-vpc-peering
                  vpc_ids:
                    - 5a100736-b085-4f69-81fd-feee325784bb
                    - c140286f-e6ce-4131-8b7b-df4590ce8d6a
                  created_at: '2024-01-10T13:29:58Z'
                  status: ACTIVE
              links: {}
              meta:
                total: 2
    provisioning_vpc_peering:
      description: The response will be a JSON object with a key called `vpc_peering`. The value of this will be an object that contains the standard attributes associated with a VPC peering.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              vpc_peering:
                $ref: '#/components/schemas/vpc_peering'
            example:
              vpc_peering:
                id: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
                name: example-vpc-peering
                vpc_ids:
                  - 997615ce-132d-4bae-9270-9ee21b395e5d
                  - e51aed59-3bb1-4a6a-8de0-9d1329e9c997
                created_at: '2024-01-09T20:44:32Z'
                status: PROVISIONING
    active_vpc_peering:
      description: The response will be a JSON object with a key called `vpc_peering`. The value of this will be an object that contains the standard attributes associated with a VPC peering.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              vpc_peering:
                $ref: '#/components/schemas/vpc_peering'
            example:
              vpc_peering:
                id: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
                name: example-vpc-peering
                vpc_ids:
                  - 997615ce-132d-4bae-9270-9ee21b395e5d
                  - e51aed59-3bb1-4a6a-8de0-9d1329e9c997
                created_at: '2024-01-09T20:44:32Z'
                status: ACTIVE
    deleting_vpc_peering:
      description: The response will be a JSON object with a key called `vpc_peering`. The value of this will be an object that contains the standard attributes associated with a VPC peering.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              vpc_peering:
                $ref: '#/components/schemas/vpc_peering'
            example:
              vpc_peering:
                id: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
                name: example-vpc-peering
                vpc_ids:
                  - 997615ce-132d-4bae-9270-9ee21b395e5d
                  - e51aed59-3bb1-4a6a-8de0-9d1329e9c997
                created_at: '2024-01-09T20:44:32Z'
                status: DELETING
  parameters:
    per_page:
      in: query
      name: per_page
      required: false
      description: Number of items returned per page
      schema:
        type: integer
        minimum: 1
        default: 20
        maximum: 200
      example: 2
    page:
      in: query
      name: page
      required: false
      description: Which 'page' of paginated results to return.
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1
    vpc_id:
      in: path
      name: vpc_id
      description: A unique identifier for a VPC.
      required: true
      schema:
        type: string
        format: uuid
        minimum: 1
      example: 4de7ac8b-495b-4884-9a69-1050c6793cd6
    vpc_resource_type:
      in: query
      name: resource_type
      description: Used to filter VPC members by a resource type.
      required: false
      schema:
        type: string
      example: droplet
    vpc_peering_id:
      in: path
      name: vpc_peering_id
      description: A unique identifier for a VPC peering.
      required: true
      schema:
        type: string
        format: uuid
      example: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
    region:
      name: region
      in: query
      description: The slug identifier for the region where the resource is available.
      schema:
        $ref: '#/components/schemas/region_slug'
      example: nyc3
  headers:
    ratelimit-limit:
      schema:
        type: integer
      example: 5000
      description: The default limit on number of requests that can be made per hour and per minute. Current rate limits are 5000 requests per hour and 250 requests per minute.
    ratelimit-remaining:
      schema:
        type: integer
      example: 4816
      description: The number of requests in your hourly quota that remain before you hit your request limit. See https://developers.digitalocean.com/documentation/v2/#rate-limit for information about how requests expire.
    ratelimit-reset:
      schema:
        type: integer
      example: 1444931833
      description: The time when the oldest request will expire. The value is given in Unix epoch time. See https://developers.digitalocean.com/documentation/v2/#rate-limit for information about how requests expire.
  x-stackQL-resources:
    vpcs:
      id: digitalocean.vpcs.vpcs
      name: vpcs
      title: Vpcs
      methods:
        vpcs_list:
          operation:
            $ref: '#/paths/~1v2~1vpcs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.vpcs
        vpcs_create:
          operation:
            $ref: '#/paths/~1v2~1vpcs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        vpcs_get:
          operation:
            $ref: '#/paths/~1v2~1vpcs~1{vpc_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.vpc
        vpcs_update:
          operation:
            $ref: '#/paths/~1v2~1vpcs~1{vpc_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        vpcs_patch:
          operation:
            $ref: '#/paths/~1v2~1vpcs~1{vpc_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        vpcs_delete:
          operation:
            $ref: '#/paths/~1v2~1vpcs~1{vpc_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vpcs/methods/vpcs_get'
          - $ref: '#/components/x-stackQL-resources/vpcs/methods/vpcs_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/vpcs/methods/vpcs_create'
        update:
          - $ref: '#/components/x-stackQL-resources/vpcs/methods/vpcs_patch'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpcs/methods/vpcs_delete'
        replace:
          - $ref: '#/components/x-stackQL-resources/vpcs/methods/vpcs_update'
    members:
      id: digitalocean.vpcs.members
      name: members
      title: Members
      methods:
        vpcs_list_members:
          operation:
            $ref: '#/paths/~1v2~1vpcs~1{vpc_id}~1members/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.members
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/members/methods/vpcs_list_members'
        insert: []
        update: []
        delete: []
        replace: []
    peerings:
      id: digitalocean.vpcs.peerings
      name: peerings
      title: Peerings
      methods:
        vpcs_list_peerings:
          operation:
            $ref: '#/paths/~1v2~1vpcs~1{vpc_id}~1peerings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.peerings
        vpcs_create_peerings:
          operation:
            $ref: '#/paths/~1v2~1vpcs~1{vpc_id}~1peerings/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        vpcs_patch_peerings:
          operation:
            $ref: '#/paths/~1v2~1vpcs~1{vpc_id}~1peerings~1{vpc_peering_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/peerings/methods/vpcs_list_peerings'
        insert:
          - $ref: '#/components/x-stackQL-resources/peerings/methods/vpcs_create_peerings'
        update:
          - $ref: '#/components/x-stackQL-resources/peerings/methods/vpcs_patch_peerings'
        delete: []
        replace: []
    vpc_peerings:
      id: digitalocean.vpcs.vpc_peerings
      name: vpc_peerings
      title: Vpc Peerings
      methods:
        vpc_peerings_list:
          operation:
            $ref: '#/paths/~1v2~1vpc_peerings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.vpc_peerings
        vpc_peerings_create:
          operation:
            $ref: '#/paths/~1v2~1vpc_peerings/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        vpc_peerings_get:
          operation:
            $ref: '#/paths/~1v2~1vpc_peerings~1{vpc_peering_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.vpc_peering
        vpc_peerings_patch:
          operation:
            $ref: '#/paths/~1v2~1vpc_peerings~1{vpc_peering_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        vpc_peerings_delete:
          operation:
            $ref: '#/paths/~1v2~1vpc_peerings~1{vpc_peering_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vpc_peerings/methods/vpc_peerings_get'
          - $ref: '#/components/x-stackQL-resources/vpc_peerings/methods/vpc_peerings_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_peerings/methods/vpc_peerings_create'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_peerings/methods/vpc_peerings_patch'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_peerings/methods/vpc_peerings_delete'
        replace: []
servers:
  - url: https://api.digitalocean.com
