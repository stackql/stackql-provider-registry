openapi: 3.0.0
info:
  title: serverless API
  description: digitalocean API
  version: '2.0'
paths:
  /v2/functions/namespaces:
    get:
      operationId: functions_list_namespaces
      summary: List Namespaces
      description: >-
        Returns a list of namespaces associated with the current user. To get
        all namespaces, send a GET request to `/v2/functions/namespaces`.
      tags:
        - Functions
      responses:
        '200':
          $ref: '#/components/responses/list_namespaces'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/functions/namespaces"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.functions.list_namespaces()
      security:
        - bearer_auth:
            - function:read
            - function:admin
    post:
      operationId: functions_create_namespace
      summary: Create Namespace
      description: >-
        Creates a new serverless functions namespace in the desired region and
        associates it with the provided label. A namespace is a collection of
        functions and their associated packages, triggers, and project
        specifications. To create a namespace, send a POST request to
        `/v2/functions/namespaces` with the `region` and `label` properties.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_namespace'
      tags:
        - Functions
      responses:
        '200':
          $ref: '#/components/responses/namespace_created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/namespace_bad_request'
        '422':
          $ref: '#/components/responses/namespace_limit_reached'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"region": "nyc1", "label": "my namespace label"}' \
              "https://api.digitalocean.com/v2/functions/namespaces"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "region": "nyc1",
              "label": "my namespace"
            }

            resp = client.functions.create_namespace(body=req)
      security:
        - bearer_auth:
            - function:create
            - function:admin
  /v2/functions/namespaces/{namespace_id}:
    get:
      operationId: functions_get_namespace
      summary: Get Namespace
      description: >-
        Gets the namespace details for the given namespace UUID. To get
        namespace details, send a GET request to
        `/v2/functions/namespaces/$NAMESPACE_ID` with no parameters.
      tags:
        - Functions
      parameters:
        - $ref: '#/components/parameters/namespace_id'
      responses:
        '200':
          $ref: '#/components/responses/namespace_created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/namespace_not_allowed'
        '404':
          $ref: '#/components/responses/namespace_not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/functions/namespaces/{{namespace_id}}"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.functions.get_namespace(namespace_id="aff93af3")
      security:
        - bearer_auth:
            - function:admin
    delete:
      operationId: functions_delete_namespace
      summary: Delete Namespace
      description: >-
        Deletes the given namespace.  When a namespace is deleted all assets, in
        the namespace are deleted, this includes packages, functions and
        triggers. Deleting a namespace is a destructive operation and assets in
        the namespace are not recoverable after deletion. Some metadata is
        retained, such as activations, or soft deleted for reporting purposes.

        To delete namespace, send a DELETE request to
        `/v2/functions/namespaces/$NAMESPACE_ID`.

        A successful deletion returns a 204 response.
      tags:
        - Functions
      parameters:
        - $ref: '#/components/parameters/namespace_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/namespace_not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/functions/namespaces/{{namespace_id}}"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.functions.delete_namespace(namespace_id="aff93af3")
      security:
        - bearer_auth:
            - function:delete
            - function:admin
  /v2/functions/namespaces/{namespace_id}/triggers:
    get:
      operationId: functions_list_triggers
      summary: List Triggers
      description: >-
        Returns a list of triggers associated with the current user and
        namespace. To get all triggers, send a GET request to
        `/v2/functions/namespaces/$NAMESPACE_ID/triggers`.
      parameters:
        - $ref: '#/components/parameters/namespace_id'
      tags:
        - Functions
      responses:
        '200':
          $ref: '#/components/responses/list_triggers'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/namespace_not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/functions/namespaces/{{namespace_id}}/triggers"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.functions.list_triggers(namespace_id="39f3ca")
      security:
        - bearer_auth:
            - function:read
            - function:admin
    post:
      operationId: functions_create_trigger
      summary: Create Trigger
      description: >-
        Creates a new trigger for a given function in a namespace. To create a
        trigger, send a POST request to
        `/v2/functions/namespaces/$NAMESPACE_ID/triggers` with the `name`,
        `function`, `type`, `is_enabled` and `scheduled_details` properties.
      parameters:
        - $ref: '#/components/parameters/namespace_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_trigger'
      tags:
        - Functions
      responses:
        '200':
          $ref: '#/components/responses/trigger_response'
        '400':
          $ref: '#/components/responses/trigger_bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/namespace_not_found'
        '422':
          $ref: '#/components/responses/trigger_limit_reached'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "my trigger", "function": "hello", "type": "SCHEDULED", "is_enabled": true, "scheduled_details": {"cron": "* * * * *", "body": {"name": "Welcome to DO!"}}}' \
              "https://api.digitalocean.com/v2/functions/namespaces/{{namespace_id}}/triggers"
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
                "name": "my trigger",
                "function": "hello",
                "type": "SCHEDULED",
                "is_enabled": True,
                "scheduled_details": {
                "cron": "* * * * *",
                "body": {
                    "name": "Welcome to DO!"
                }
            }

            }


            resp = client.functions.create_trigger(namespace_id="aff93af3",
            body=req)
      security:
        - bearer_auth:
            - function:create
            - function:admin
  /v2/functions/namespaces/{namespace_id}/triggers/{trigger_name}:
    get:
      operationId: functions_get_trigger
      summary: Get Trigger
      description: >-
        Gets the trigger details. To get the trigger details, send a GET request
        to `/v2/functions/namespaces/$NAMESPACE_ID/triggers/$TRIGGER_NAME`.
      parameters:
        - $ref: '#/components/parameters/namespace_id'
        - $ref: '#/components/parameters/trigger_name'
      tags:
        - Functions
      responses:
        '200':
          $ref: '#/components/responses/trigger_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/trigger_not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/functions/namespaces/{{namespace_id}}/triggers/{{trigger_name}}"
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp = client.functions.get_trigger(namespace_id="aff93af3",
            trigger_name="trig_name")
      security:
        - bearer_auth:
            - function:read
            - function:admin
    put:
      operationId: functions_update_trigger
      summary: Update Trigger
      description: >-
        Updates the details of the given trigger. To update a trigger, send a
        PUT request to
        `/v2/functions/namespaces/$NAMESPACE_ID/triggers/$TRIGGER_NAME` with new
        values for the `is_enabled ` or `scheduled_details` properties.
      parameters:
        - $ref: '#/components/parameters/namespace_id'
        - $ref: '#/components/parameters/trigger_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_trigger'
      tags:
        - Functions
      responses:
        '200':
          $ref: '#/components/responses/trigger_response'
        '400':
          $ref: '#/components/responses/trigger_bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/trigger_not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"is_enabled": true, "scheduled_details": {"cron": "* * * * *", "body": {"name": "Welcome to DO!"}}}' \
              "https://api.digitalocean.com/v2/functions/namespaces/{{namespace_id}}/triggers/{{trigger_name}}"
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "is_enabled": true,
              "scheduled_details": {
                "cron": "* * * * *",
                "body": {
                  "name": "Welcome to DO!"
                }
              }
            }


            resp = client.functions.update_trigger(namespace_id="39f3ca",
            trigger_name="trig_name", body=req)
      security:
        - bearer_auth:
            - function:update
            - function:admin
    delete:
      operationId: functions_delete_trigger
      summary: Delete Trigger
      description: >-
        Deletes the given trigger.

        To delete trigger, send a DELETE request to
        `/v2/functions/namespaces/$NAMESPACE_ID/triggers/$TRIGGER_NAME`.

        A successful deletion returns a 204 response.
      tags:
        - Functions
      parameters:
        - $ref: '#/components/parameters/namespace_id'
        - $ref: '#/components/parameters/trigger_name'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/trigger_not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/functions/namespaces/{{namespace_id}}/triggers/{{trigger_name}}"
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp = client.functions.delete_trigger(namespace_id="aff93af3",
            trigger_name="trig_name")
      security:
        - bearer_auth:
            - function:delete
            - function:admin
components:
  schemas:
    create_namespace:
      type: object
      properties:
        region:
          type: string
          example: nyc1
          description: >-
            The [datacenter
            region](https://docs.digitalocean.com/products/platform/availability-matrix/#available-datacenters)
            in which to create the namespace.
        label:
          type: string
          example: my namespace
          description: The namespace's unique name.
      required:
        - region
        - label
    create_trigger:
      type: object
      properties:
        name:
          type: string
          example: my trigger
          description: The trigger's unique name within the namespace.
        function:
          type: string
          example: hello
          description: Name of function(action) that exists in the given namespace.
        type:
          type: string
          example: SCHEDULED
          description: >-
            One of different type of triggers. Currently only SCHEDULED is
            supported.
        is_enabled:
          type: boolean
          example: true
          description: Indicates weather the trigger is paused or unpaused.
        scheduled_details:
          $ref: '#/components/schemas/scheduled_details'
      required:
        - name
        - function
        - type
        - is_enabled
        - scheduled_details
    update_trigger:
      type: object
      properties:
        is_enabled:
          type: boolean
          example: true
          description: Indicates weather the trigger is paused or unpaused.
        scheduled_details:
          $ref: '#/components/schemas/scheduled_details'
    namespace_info:
      type: object
      properties:
        api_host:
          type: string
          example: https://api_host.io
          description: >-
            The namespace's API hostname. Each function in a namespace is
            provided an endpoint at the namespace's hostname.
        namespace:
          type: string
          example: fn-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
          description: A unique string format of UUID with a prefix fn-.
        created_at:
          type: string
          example: '2022-09-14T04:16:45Z'
          description: UTC time string.
        updated_at:
          type: string
          example: '2022-09-14T04:16:45Z'
          description: UTC time string.
        label:
          type: string
          example: my namespace
          description: The namespace's unique name.
        region:
          type: string
          example: nyc1
          description: The namespace's datacenter region.
        uuid:
          type: string
          example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
          description: The namespace's Universally Unique Identifier.
        key:
          type: string
          example: d1zcd455h01mqjfs4s2eaewyejehi5f2uj4etqq3h7cera8iwkub6xg5of1wdde2
          description: >-
            A random alpha numeric string. This key is used in conjunction with
            the namespace's UUID to authenticate 

            a user to use the namespace via `doctl`, DigitalOcean's official
            CLI.
    error:
      type: object
      properties:
        id:
          description: >-
            A short identifier corresponding to the HTTP status code returned.
            For  example, the ID for a response returning a 404 status code
            would be "not_found."
          type: string
          example: not_found
        message:
          description: >-
            A message providing additional information about the error,
            including  details to help resolve it when possible.
          type: string
          example: The resource you were accessing could not be found.
        request_id:
          description: >-
            Optionally, some endpoints may include a request ID that should be 
            provided when reporting bugs or opening support tickets to help 
            identify the issue.
          type: string
          example: 4d9d8375-3c56-4925-a3e7-eb137fed17e9
      required:
        - id
        - message
    trigger_info:
      type: object
      properties:
        namespace:
          type: string
          example: fn-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
          description: A unique string format of UUID with a prefix fn-.
        name:
          type: string
          example: my trigger
          description: The trigger's unique name within the namespace.
        function:
          type: string
          example: hello
          description: Name of function(action) that exists in the given namespace.
        type:
          type: string
          example: SCHEDULED
          description: String which indicates the type of trigger source like SCHEDULED.
        is_enabled:
          type: boolean
          example: true
          description: Indicates weather the trigger is paused or unpaused.
        created_at:
          type: string
          example: '2022-11-11T04:16:45Z'
          description: UTC time string.
        updated_at:
          type: string
          example: '2022-11-11T04:16:45Z'
          description: UTC time string.
        scheduled_details:
          $ref: '#/components/schemas/scheduled_details'
        scheduled_runs:
          type: object
          properties:
            last_run_at:
              description: >-
                Indicates last run time. null value indicates trigger not run
                yet.
              type: string
              nullable: true
              example: '2022-11-11T04:16:45Z'
            next_run_at:
              description: >-
                Indicates next run time. null value indicates trigger will not
                run.
              type: string
              nullable: true
              example: '2022-11-11T04:16:45Z'
    scheduled_details:
      type: object
      description: |
        Trigger details for SCHEDULED type, where body is optional.
      properties:
        cron:
          description: >-
            valid cron expression string which is required for SCHEDULED type
            triggers.
          type: string
          example: '* * * * *'
        body:
          description: Optional data to be sent to function while triggering the function.
          type: object
          nullable: true
          properties:
            name:
              type: string
              example: Welcome to DO!
      required:
        - cron
  responses:
    list_namespaces:
      description: >-
        An array of JSON objects with a key called `namespaces`.  Each object
        represents a namespace and contains

        the properties associated with it. 
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  namespaces:
                    type: array
                    items:
                      $ref: '#/components/schemas/namespace_info'
    unauthorized:
      description: Authentication failed due to invalid credentials.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unauthorized
            message: Unable to authenticate you.
    too_many_requests:
      description: The API rate limit has been exceeded.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: too_many_requests
            message: API rate limit exceeded.
    server_error:
      description: There was a server error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: server_error
            message: Unexpected server-side error
    unexpected_error:
      description: There was an unexpected error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: example_error
            message: some error message
    namespace_created:
      description: >-
        A JSON response object with a key called `namespace`. The object
        contains the properties associated

        with the namespace.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              namespace:
                $ref: '#/components/schemas/namespace_info'
    namespace_bad_request:
      description: Bad Request.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: bad_request
            message: 'Invalid request payload: missing label field'
            request_id: 4851a473-1621-42ea-b2f9-5071c0ea8414
    namespace_limit_reached:
      description: Limit Reached
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unprocessable_entity
            message: namespace limit reached
            request_id: a3275238-3d04-4405-a123-55c389b406c0
    namespace_not_allowed:
      description: Not Allowed.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: forbidden
            message: not allowed to get namespace
            request_id: b11e45a4-892c-48c9-9001-b6cffe9fe795
    namespace_not_found:
      description: Bad Request.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: not_found
            message: namespace not found
            request_id: 88d17b7a-630b-4083-99ce-5b91045efdb4
    no_content:
      description: The action was successful and the response body is empty.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
    list_triggers:
      description: >-
        An array of JSON objects with a key called `namespaces`.  Each object
        represents a namespace and contains

        the properties associated with it. 
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  triggers:
                    type: array
                    items:
                      $ref: '#/components/schemas/trigger_info'
    trigger_response:
      description: >-
        A JSON response object with a key called `trigger`. The object contains
        the properties associated

        with the trigger.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              trigger:
                $ref: '#/components/schemas/trigger_info'
    trigger_bad_request:
      description: Bad Request.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: bad_request
            message: >-
              validating create trigger: validation error: missing trigger name,
              missing function name, missing source details
            request_id: 4851a473-1621-42ea-b2f9-5071c0ea8414
    trigger_limit_reached:
      description: Limit Reached
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unprocessable_entity
            message: triggers limit reached
            request_id: 7ba99a43-6618-4fe0-9af7-092752ad0d56
    trigger_not_found:
      description: Bad Request.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            namespace not found:
              value:
                id: not_found
                message: namespace not found
                request_id: 88d17b7a-630b-4083-99ce-5b91045efdb4
            trigger not found:
              value:
                id: not_found
                message: trigger not found
                request_id: 88d17b7a-630b-4083-99ce-5b91045efdb4
  parameters:
    namespace_id:
      name: namespace_id
      description: The ID of the namespace to be managed.
      in: path
      schema:
        type: string
      example: fn-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
      required: true
    trigger_name:
      name: trigger_name
      description: The name of the trigger to be managed.
      in: path
      schema:
        type: string
      example: my trigger
      required: true
  headers:
    ratelimit-limit:
      schema:
        type: integer
      example: 5000
      description: >-
        The default limit on number of requests that can be made per hour and
        per minute. Current rate limits are 5000 requests per hour and 250
        requests per minute.
    ratelimit-remaining:
      schema:
        type: integer
      example: 4816
      description: >-
        The number of requests in your hourly quota that remain before you hit
        your request limit. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
    ratelimit-reset:
      schema:
        type: integer
      example: 1444931833
      description: >-
        The time when the oldest request will expire. The value is given in Unix
        epoch time. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
  x-stackQL-resources:
    namespaces:
      id: digitalocean.serverless.namespaces
      name: namespaces
      title: Namespaces
      methods:
        functions_list_namespaces:
          operation:
            $ref: '#/paths/~1v2~1functions~1namespaces/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.namespaces
        functions_create_namespace:
          operation:
            $ref: '#/paths/~1v2~1functions~1namespaces/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        functions_get_namespace:
          operation:
            $ref: '#/paths/~1v2~1functions~1namespaces~1{namespace_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.namespace
        functions_delete_namespace:
          operation:
            $ref: '#/paths/~1v2~1functions~1namespaces~1{namespace_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/namespaces/methods/functions_get_namespace
          - $ref: >-
              #/components/x-stackQL-resources/namespaces/methods/functions_list_namespaces
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/namespaces/methods/functions_create_namespace
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/namespaces/methods/functions_delete_namespace
        replace: []
    triggers:
      id: digitalocean.serverless.triggers
      name: triggers
      title: Triggers
      methods:
        functions_list_triggers:
          operation:
            $ref: '#/paths/~1v2~1functions~1namespaces~1{namespace_id}~1triggers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.triggers
        functions_create_trigger:
          operation:
            $ref: '#/paths/~1v2~1functions~1namespaces~1{namespace_id}~1triggers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        functions_get_trigger:
          operation:
            $ref: >-
              #/paths/~1v2~1functions~1namespaces~1{namespace_id}~1triggers~1{trigger_name}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.trigger
        functions_update_trigger:
          operation:
            $ref: >-
              #/paths/~1v2~1functions~1namespaces~1{namespace_id}~1triggers~1{trigger_name}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        functions_delete_trigger:
          operation:
            $ref: >-
              #/paths/~1v2~1functions~1namespaces~1{namespace_id}~1triggers~1{trigger_name}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/triggers/methods/functions_get_trigger
          - $ref: >-
              #/components/x-stackQL-resources/triggers/methods/functions_list_triggers
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/triggers/methods/functions_create_trigger
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/triggers/methods/functions_delete_trigger
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/triggers/methods/functions_update_trigger
servers:
  - url: https://api.digitalocean.com
