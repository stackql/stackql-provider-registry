openapi: 3.0.0
info:
  title: network API
  description: digitalocean API
  version: '2.0'
paths:
  /v2/floating_ips:
    get:
      operationId: floatingIPs_list
      summary: List All Floating IPs
      description: >-
        To list all of the floating IPs available on your account, send a GET
        request to `/v2/floating_ips`.
      tags:
        - Floating IPs
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/floating_ip_list'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/floating_ips?page=1&per_page=20" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                floatingIPs, _, err := client.FloatingIPs.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            floating_ips = client.floating_ips.all
            floating_ips.each
      security:
        - bearer_auth:
            - reserved_ip:read
    post:
      operationId: floatingIPs_create
      summary: Create a New Floating IP
      description: >-
        On creation, a floating IP must be either assigned to a Droplet or
        reserved to a region.

        * To create a new floating IP assigned to a Droplet, send a POST
          request to `/v2/floating_ips` with the `droplet_id` attribute.

        * To create a new floating IP reserved to a region, send a POST request
        to
          `/v2/floating_ips` with the `region` attribute.

        **Note**:  In addition to the standard rate limiting, only 12 floating
        IPs may be created per 60 seconds.
      tags:
        - Floating IPs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/floating_ip_create'
      responses:
        '202':
          $ref: '#/components/responses/floating_ip_created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"droplet_id": 123456}' \
              "https://api.digitalocean.com/v2/floating_ips" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createRequest := &godo.FloatingIPCreateRequest{
                    DropletID: 123456,

                }
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            floating_ip = DropletKit::FloatingIp.new(droplet_id: 123456)
            client.floating_ips.create(floating_ip) 
      security:
        - bearer_auth:
            - reserved_ip:create
  /v2/floating_ips/{floating_ip}:
    get:
      operationId: floatingIPs_get
      summary: Retrieve an Existing Floating IP
      description: >-
        To show information about a floating IP, send a GET request to
        `/v2/floating_ips/$FLOATING_IP_ADDR`.
      tags:
        - Floating IPs
      parameters:
        - $ref: '#/components/parameters/floating_ip'
      responses:
        '200':
          $ref: '#/components/responses/floating_ip'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/floating_ips/45.55.96.47" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                floatingIP, _, err := client.FloatingIPs.Get(ctx, "45.55.96.47")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.floating_ips.find(ip: '45.55.96.47')
      security:
        - bearer_auth:
            - reserved_ip:read
    delete:
      operationId: floatingIPs_delete
      summary: Delete a Floating IP
      description: >
        To delete a floating IP and remove it from your account, send a DELETE
        request

        to `/v2/floating_ips/$FLOATING_IP_ADDR`.


        A successful request will receive a 204 status code with no body in
        response.

        This indicates that the request was processed successfully.
      tags:
        - Floating IPs
      parameters:
        - $ref: '#/components/parameters/floating_ip'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/floating_ips/45.55.96.47"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.FloatingIPs.Delete(ctx, "45.55.96.34")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.floating_ips.delete(ip: '45.55.96.47') 
      security:
        - bearer_auth:
            - reserved_ip:delete
  /v2/floating_ips/{floating_ip}/actions:
    get:
      operationId: floatingIPsAction_list
      summary: List All Actions for a Floating IP
      description: >-
        To retrieve all actions that have been executed on a floating IP, send a
        GET request to `/v2/floating_ips/$FLOATING_IP/actions`.
      tags:
        - Floating IP Actions
      parameters:
        - $ref: '#/components/parameters/floating_ip'
      responses:
        '200':
          $ref: '#/components/responses/floating_ip_actions'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/floating_ips/45.55.96.47/actions?page=1&per_page=1"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                actions, _, err := client.FloatingIPActions.List(ctx, '45.55.96.47', opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            actions = client.floating_ip_actions.all(ip: '45.55.96.47')
            actions.each
      security:
        - bearer_auth:
            - reserved_ip:read
    post:
      operationId: floatingIPsAction_post
      summary: Initiate a Floating IP Action
      description: >
        To initiate an action on a floating IP send a POST request to

        `/v2/floating_ips/$FLOATING_IP/actions`. In the JSON body to the
        request,

        set the `type` attribute to on of the supported action types:


        | Action     | Details

        |------------|--------

        | `assign`   | Assigns a floating IP to a Droplet

        | `unassign` | Unassign a floating IP from a Droplet
      tags:
        - Floating IP Actions
      parameters:
        - $ref: '#/components/parameters/floating_ip'
      requestBody:
        description: >
          The `type` attribute set in the request body will specify the action
          that

          will be taken on the floating IP.
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/floating_ip_action_unassign'
                - $ref: '#/components/schemas/floating_ip_action_assign'
              discriminator:
                propertyName: type
                mapping:
                  unassign: '#/components/schemas/floating_ip_action_unassign'
                  assign: '#/components/schemas/floating_ip_action_assign'
      responses:
        '201':
          $ref: '#/components/responses/floating_ip_action'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # Assign a Floating IP to a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"assign","droplet_id":8219222}' \
              "https://api.digitalocean.com/v2/floating_ips/45.55.96.47/actions"

            # Unassign a Floating IP
            # curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"unassign"}' \
              "https://api.digitalocean.com/v2/floating_ips/45.55.96.47/actions"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

              // Assign a Floating IP to a Droplet
                action, _, err := client.FloatingIPActions.Assign(ctx, "45.55.96.47", 8219222)

              // Unassign a Floating IP
              // action, _, err := client.FloatingIPActions.Unassign(ctx, "45.55.96.47")  
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            # Assign a Floating IP to a Droplet

            client.floating_ip_actions.assign(ip: '45.55.96.47', droplet_id:
            8219222)


            # Unassign a Floating IP

            # client.floating_ip_actions.unassign(ip: '45.55.96.47')
      security:
        - bearer_auth:
            - reserved_ip:update
  /v2/floating_ips/{floating_ip}/actions/{action_id}:
    get:
      operationId: floatingIPsAction_get
      summary: Retrieve an Existing Floating IP Action
      description: >-
        To retrieve the status of a floating IP action, send a GET request to
        `/v2/floating_ips/$FLOATING_IP/actions/$ACTION_ID`.
      tags:
        - Floating IP Actions
      parameters:
        - $ref: '#/components/parameters/floating_ip'
        - $ref: '#/components/parameters/action_id'
      responses:
        '200':
          $ref: '#/components/responses/floating_ip_action'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/floating_ips/45.55.96.47/actions/72531856"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                action, _, err := client.FloatingIPActions.Get(ctx, "45.55.96.47", 72531856)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.floating_ip_actions.find(ip: '45.55.96.47', id: 72531856)
      security:
        - bearer_auth:
            - reserved_ip:read
  /v2/partner_network_connect/attachments:
    get:
      operationId: partnerAttachments_list
      summary: List all partner attachments
      description: >-
        To list all of the Partner Attachments on your account, send a `GET`
        request to `/v2/partner_network_connect/attachments`.
      tags:
        - Partner Network Connect
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_partner_attachments'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/partner_network_connect/attachments"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                  token := os.Getenv("$DIGITALOCEAN_TOKEN")
                  client := godo.NewFromToken(token)
                  ctx := context.TODO()

                  ListOptions := &godo.ListOptions{ Page: 1, PerPage: 20, WithProjects: true}
                  
                  response, _, err := client.PartnerAttachment.List(ctx, ListOptions)
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("$DIGITALOCEAN_TOKEN"))

            partner_attachment_response = client.partner_attachments.list()
      security:
        - bearer_auth:
            - partner_network_connect:read
    post:
      operationId: partnerAttachments_create
      summary: Create a new partner attachment
      description: >
        To create a new partner attachment, send a `POST` request to

        `/v2/partner_network_connect/attachments` with a JSON object containing
        the

        required configuration details.
      tags:
        - Partner Network Connect
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/partner_attachment_writable'
      responses:
        '202':
          $ref: '#/components/responses/single_partner_attachment'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/unprocessable_entity'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: >-
            curl -X POST \

            -H "Content-Type: application/json" \

            -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \

            -d
            '{"name":"c5pAqd-ped-007","connection_bandwidth_in_mbps":1000,"region":"NYC","naas_provider":"MEGAPORT","vpc_ids":["bafc1c1d-bac1-2412-7f5e-fezc832z213z"],"bgp":{"local_router_ip":"169.254.11.1/29","peer_router_ip":"169.254.11.2/29","peer_router_asn":133938,"auth_key":"0zzyTNuRZa00vqkzIToPG3q"}}'
            \

            "https://api.digitalocean.com/v2/partner_network_connect/attachments"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()
                createReq := &godo.PartnerAttachmentCreateRequest{ 
                    Name:"c5pAqd-ped-007", 
                    ConnectionBandwidthInMbps:1000, 
                    Region:"NYC", 
                    NaaSProvider:"MEGAPORT", 
                    VPCIDs:[]string{"bafc1c1d-bac1-2412-7f5e-fezc832z213z"}, 
                    BGP: godo.BGP{ 
                        LocalRouterIP:"169.254.11.1/29",
                        PeerRouterIP:"169.254.11.2/29",
                        PeerASN:133938,
                        AuthKey:"0zzyTNuRZa00vqkzIToPG3q",
                    },
                }

                response, _, err := client.PartnerAttachment.Create(ctx, createReq)
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.getenv("$DIGITALOCEAN_TOKEN"))

            req = { 
              "connection_bandwidth_in_mbps": 1000,
              "naas_provider": "MEGAPORT",  
              "name": "c5pAqd-ped-007",
              "region": "NYC",
              "vpc_ids": [
                  "bafc1c1d-bac1-2412-7f5e-fezc832z213z"
              ],
              "bgp": {
                  "auth_key": "0zzyTNuRZa00vqkzIToPG3q",
                  "local_router_ip": "169.254.11.1/29",
                  "peer_router_asn": 133938,
                  "peer_router_ip": "169.254.11.2/29"
              },
            }

            resp = client.partner_attachments.create(body=req)
      security:
        - bearer_auth:
            - partner_network_connect:read
  /v2/partner_network_connect/attachments/{pa_id}:
    get:
      operationId: partnerAttachments_get
      summary: Retrieve an existing partner attachment
      description: |
        To get the details of a partner attachment, send a `GET` request to
        `/v2/partner_network_connect/attachments/{pa_id}`.
      tags:
        - Partner Network Connect
      parameters:
        - $ref: '#/components/parameters/pa_id'
      responses:
        '200':
          $ref: '#/components/responses/single_partner_attachment'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/partner_network_connect/attachments/5a4981aa-9653-4bd1-bef5-d6bff52042e4"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                partnerAttachmentResponse, _, err := client.PartnerAttachment.Get(ctx, "5a4981aa-9653-4bd1-bef5-d6bff52042e4")
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.getenv("$DIGITALOCEAN_TOKEN"))


            partner_attachment_response =
            client.partner_attachments.get("5a4981aa-9653-4bd1-bef5-d6bff52042e4")
      security:
        - bearer_auth:
            - partner_network_connect:read
    patch:
      operationId: partnerAttachments_patch
      summary: Update an existing partner attachment
      description: >
        To update an existing partner attachment, send a `PATCH` request to

        `/v2/partner_network_connect/attachments/{pa_id}` with a JSON object
        containing the

        fields to be updated.
      tags:
        - Partner Network Connect
      parameters:
        - $ref: '#/components/parameters/pa_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/partner_attachment_updatable'
      responses:
        '202':
          $ref: '#/components/responses/single_partner_attachment'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PATCH \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/partner_network_connect/attachments/5a4981aa-9653-4bd1-bef5-d6bff52042e4" \
              -d '{ "name": "partner-network-test" }'
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                partnerAttachmentRequest := &godo.PartnerAttachmentUpdateRequest{
                  Name: "partner-network-test-region",
                }

                response, _, err := client.PartnerAttachment.Update(ctx, "5a4981aa-9653-4bd1-bef5-d6bff52042e4", partnerAttachmentRequest)
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.getenv("$DIGITALOCEAN_TOKEN"))

            request = {
                "Name": "partner-network-test"
            }


            print(client.partner_attachments.patch("5a4981aa-9653-4bd1-bef5-d6bff52042e4",
            body = request))
      security:
        - bearer_auth:
            - partner_network_connect:read
    delete:
      operationId: partnerAttachments_delete
      summary: Delete an existing partner attachment
      description: |
        To delete an existing partner attachment, send a `DELETE` request to
        `/v2/partner_network_connect/attachments/{pa_id}`.
      tags:
        - Partner Network Connect
      parameters:
        - $ref: '#/components/parameters/pa_id'
      responses:
        '202':
          $ref: '#/components/responses/single_partner_attachment_deleting'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/partner_network_connect/attachments/5a4981aa-9653-4bd1-bef5-d6bff52042e4"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                response, err := client.PartnerAttachment.Delete(ctx,"5a4981aa-9653-4bd1-bef5-d6bff52042e4")
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.getenv("$DIGITALOCEAN_TOKEN"))


            response =
            client.partner_attachments.delete("5a4981aa-9653-4bd1-bef5-d6bff52042e4")
      security:
        - bearer_auth:
            - partner_network_connect:read
  /v2/partner_network_connect/attachments/{pa_id}/bgp_auth_key:
    get:
      operationId: partnerAttachments_get_bgp_auth_key
      summary: Get current BGP auth key for the partner attachment
      description: >
        To get the current BGP auth key for a partner attachment, send a `GET`
        request to

        `/v2/partner_network_connect/attachments/{pa_id}/bgp_auth_key`.
      tags:
        - Partner Network Connect
      parameters:
        - $ref: '#/components/parameters/pa_id'
      responses:
        '200':
          $ref: '#/components/responses/single_partner_attachment_bgp_auth_key'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/partner_network_connect/attachments/5a4981aa-9653-4bd1-bef5-d6bff52042e4/bgp_auth_key"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                response, _, err := client.PartnerAttachment.GetBGPAuthKey(ctx,"5a4981aa-9653-4bd1-bef5-d6bff52042e4")
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.getenv("$DIGITALOCEAN_TOKEN"))


            response =
            client.partner_attachments.get_bgp_auth_key("5a4981aa-9653-4bd1-bef5-d6bff52042e4")
      security:
        - bearer_auth:
            - partner_network_connect:read
  /v2/partner_network_connect/attachments/{pa_id}/remote_routes:
    get:
      operationId: partnerAttachments_list_remote_routes
      summary: List remote routes for a partner attachment
      description: >
        To list all remote routes associated with a partner attachment, send a
        `GET` request to

        `/v2/partner_network_connect/attachments/{pa_id}/remote_routes`.
      tags:
        - Partner Network Connect
      parameters:
        - $ref: '#/components/parameters/pa_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_partner_attachment_remote_routes'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/partner_network_connect/attachments/9ddccad8-a6d2-42f1-84e7-c92916193978/remote_routes"
      security:
        - bearer_auth:
            - partner_network_connect:read
  /v2/partner_network_connect/attachments/{pa_id}/service_key:
    get:
      operationId: partnerAttachments_get_service_key
      summary: Get the current service key for the partner attachment
      description: >
        To get the current service key for a partner attachment, send a `GET`
        request to

        `/v2/partner_network_connect/attachments/{pa_id}/service_key`.
      tags:
        - Partner Network Connect
      parameters:
        - $ref: '#/components/parameters/pa_id'
      responses:
        '200':
          $ref: '#/components/responses/single_partner_attachment_service_key'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/partner_network_connect/attachments/1cf0aad8-292b-40f8-9d32-1fbde6e04991/service_key"
        - lang: Go
          source: |-
            import (
                "context"
                "os"
                
                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")
                client := godo.NewFromToken(token)
                ctx := context.TODO()
                response, _, err := client.PartnerAttachment.GetServiceKey(ctx, "5a4981aa-9653-4bd1-bef5-d6bff52042e4")
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client

            client = Client(token=os.getenv("$DIGITALOCEAN_TOKEN"))

            response =
            client.partner_attachments.get_service_key("5a4981aa-9653-4bd1-bef5-d6bff52042e4")
      security:
        - bearer_auth:
            - partner_network_connect:read
    post:
      operationId: partnerAttachments_create_service_key
      summary: Regenerate the service key for the partner attachment
      description: >
        This operation generates a new service key for the specified partner
        attachment. The operation is asynchronous, and the response is an empty
        JSON object returned with a 202 status code. To poll for the new service
        key, send a `GET` request to
        `/v2/partner_network_connect/attachments/{pa_id}/service_key`.
      tags:
        - Partner Network Connect
      parameters:
        - $ref: '#/components/parameters/pa_id'
      responses:
        '202':
          $ref: '#/components/responses/empty_json_object'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/partner_network_connect/attachments/1cf0aad8-292b-40f8-9d32-1fbde6e04991/service_key"
        - lang: Go
          source: |-
            import (
                "context"
                "os"
                
                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")
                client := godo.NewFromToken(token)
                ctx := context.TODO()
                response, _, err := client.PartnerAttachment.RegenerateServiceKey(ctx, "5a4981aa-9653-4bd1-bef5-d6bff52042e4")
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client

            client = Client(token=os.getenv("$DIGITALOCEAN_TOKEN"))

            response =
            client.partner_attachments.create_service_key("5a4981aa-9653-4bd1-bef5-d6bff52042e4")
      security:
        - bearer_auth:
            - partner_network_connect:write
  /v2/byoip_prefixes:
    post:
      operationId: byoipPrefixes_create
      summary: Create a BYOIP Prefix
      description: >
        To create a BYOIP prefix, send a POST request to `/v2/byoip_prefixes`.


        A successful request will initiate the process of bringing your BYOIP
        Prefix into your account.

        The response will include the details of the created prefix, including
        its UUID and status.
      tags:
        - BYOIP Prefixes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/byoip_prefix_create'
      responses:
        '202':
          $ref: '#/components/responses/byoip_prefix_create'
        '401':
          $ref: '#/components/responses/unauthorized'
        '422':
          $ref: '#/components/responses/unprocessable_entity'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"prefix": "203.0.113.0/24", "region": "nyc3", "signature": "$SIGNATURE"}' \
              "https://api.digitalocean.com/v2/byoip_prefixes"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")
                client := godo.NewFromToken(token)
                ctx := context.TODO()
                signatureHash := "<signature hash>"

                createRequest := &godo.BYOIPPrefixCreateReq{
                    Prefix:    "203.0.113.0/24",
                    Region:    "nyc3",
                    Signature: signatureHash,
                }

                byoipPrefix, _, err := client.BYOIPPrefixes.Create(ctx, createRequest)
                if err != nil {
                    panic(err)
                }
                // use byoipPrefix
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
                "prefix": "203.0.113.0/24",
                "region": "nyc3",
                "signature": "<sample signature hash>",
            }

            resp = client.byoip_prefixes.create(body=req)
      security:
        - bearer_auth:
            - byoip_prefix:create
    get:
      operationId: byoipPrefixes_list
      summary: List BYOIP Prefixes
      description: >
        To list all BYOIP prefixes, send a GET request to `/v2/byoip_prefixes`.

        A successful response will return a list of all BYOIP prefixes
        associated with the account.
      tags:
        - BYOIP Prefixes
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/byoip_prefix_list'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/byoip_prefixes"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")
                client := godo.NewFromToken(token)
                ctx := context.TODO()

                byoipPrefixes, _, err := client.BYOIPPrefixes.List(ctx, &godo.ListOptions{
                    Page:    1,
                    PerPage: 10,
                })
                if err != nil {
                    panic(err)
                }
                // use byoipPrefixes
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.byoip_prefixes.list()
      security:
        - bearer_auth:
            - byoip_prefix:read
  /v2/byoip_prefixes/{byoip_prefix_uuid}:
    get:
      operationId: byoipPrefixes_get
      summary: Get a BYOIP Prefix
      description: >
        To get a BYOIP prefix, send a GET request to
        `/v2/byoip_prefixes/$byoip_prefix_uuid`. 


        A successful response will return the details of the specified BYOIP
        prefix.
      tags:
        - BYOIP Prefixes
      parameters:
        - $ref: '#/components/parameters/byoip_prefix'
      responses:
        '200':
          $ref: '#/components/responses/byoip_prefix_get'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/unprocessable_entity'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/byoip_prefixes/fa3b-1234-5678-90ab-cdef01234567"
        - lang: Go
          source: |-
            import (
                "context"
                "os"
                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")
                client := godo.NewFromToken(token)
                ctx := context.TODO()

                byoipPrefix, _, err := client.BYOIPPrefixes.Get(ctx, "fa3b-1234-5678-90ab-cdef01234567")
                if err != nil {
                    panic(err)
                }
                // use byoipPrefix
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp =
            client.byoip_prefixes.get(byoip_prefix_uuid="fa3b-1234-5678-90ab-cdef01234567")
      security:
        - bearer_auth:
            - byoip_prefix:read
    delete:
      operationId: byoipPrefixes_delete
      summary: Delete a BYOIP Prefix
      description: >
        To delete a BYOIP prefix and remove it from your account, send a DELETE
        request

        to `/v2/byoip_prefixes/$byoip_prefix_uuid`.


        A successful request will receive a 202 status code with no body in
        response.

        This indicates that the request was accepted and the prefix is being
        deleted.
      tags:
        - BYOIP Prefixes
      parameters:
        - $ref: '#/components/parameters/byoip_prefix'
      responses:
        '202':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/unprocessable_entity'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/byoip_prefixes/fa3b-1234-5678-90ab-cdef01234567"
        - lang: Go
          source: |-
            import (
                "context"
                "os"
                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")
                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.BYOIPPrefixes.Delete(ctx, "fa3b-1234-5678-90ab-cdef01234567")
                if err != nil {
                    panic(err)
                }
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp =
            client.byoip_prefixes.delete(byoip_prefix_uuid="fa3b-1234-5678-90ab-cdef01234567")
      security:
        - bearer_auth:
            - byoip_prefix:delete
    patch:
      operationId: byoipPrefixes_patch
      summary: Update a BYOIP Prefix
      description: >
        To update a BYOIP prefix, send a PATCH request to
        `/v2/byoip_prefixes/$byoip_prefix_uuid`.


        Currently, you can update the advertisement status of the prefix.

        The response will include the updated details of the prefix.
      tags:
        - BYOIP Prefixes
      parameters:
        - in: path
          name: byoip_prefix_uuid
          schema:
            type: string
            format: uuid
          required: true
          description: A unique identifier for a BYOIP prefix.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/byoip_prefix_update'
      responses:
        '202':
          $ref: '#/components/responses/byoip_prefix_update'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/unprocessable_entity'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PATCH \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"advertise": true}' \
              "https://api.digitalocean.com/v2/byoip_prefixes/$BYOIP_PREFIX_UUID"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")
                client := godo.NewFromToken(token)
                ctx := context.TODO()
                byoipPrefixUUID := "f47ac10b-58cc-4372-a567-0e02b2c3d479"
                
                advertise := true
                updateRequest := &godo.BYOIPPrefixUpdateReq{
                    Advertise: &advertise,
                }

                byoipPrefix, _, err := client.BYOIPPrefixes.Update(ctx, byoipPrefixUUID, updateRequest)
                if err != nil {
                    panic(err)
                }
                // use byoipPrefix
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            byoip_prefix_uuid = "f47ac10b-58cc-4372-a567-0e02b2c3d479"


            req = {
                "advertise": True,
            }


            resp =
            client.byoip_prefixes.update(byoip_prefix_uuid=byoip_prefix_uuid,
            body=req)
      security:
        - bearer_auth:
            - byoip_prefix:write
  /v2/byoip_prefixes/{byoip_prefix_uuid}/ips:
    get:
      operationId: byoipPrefixes_list_resources
      summary: List BYOIP Prefix Resources
      description: >
        To list resources associated with BYOIP prefixes, send a GET request to
        `/v2/byoip_prefixes/{byoip_prefix_uuid}/ips`.


        A successful response will return a list of resources associated with
        the specified BYOIP prefix.
      tags:
        - BYOIP Prefixes
      parameters:
        - $ref: '#/components/parameters/byoip_prefix'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/byoip_prefix_list_resources'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/byoip_prefixes/fa3b-1234-5678-90ab-cdef01234567/ips"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")
                client := godo.NewFromToken(token)
                ctx := context.TODO()

                resources, _, err := client.BYOIPPrefixes.GetResources(ctx, "fa3b-1234-5678-90ab-cdef01234567", &godo.ListOptions{
                    Page:    1,
                    PerPage: 20,
                })
                if err != nil {
                    panic(err)
                }
                // use resources
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp =
            client.byoip_prefixes.resources_list(byoip_prefix_uuid="fa3b-1234-5678-90ab-cdef01234567")
      security:
        - bearer_auth:
            - byoip_prefix:read
components:
  schemas:
    floating_ip_create:
      oneOf:
        - title: Assign to Droplet
          type: object
          properties:
            droplet_id:
              type: integer
              example: 2457247
              description: The ID of the Droplet that the floating IP will be assigned to.
          required:
            - droplet_id
        - title: Reserve to Region
          type: object
          properties:
            region:
              type: string
              example: nyc3
              description: >-
                The slug identifier for the region the floating IP will be
                reserved to.
            project_id:
              type: string
              format: uuid
              example: 746c6152-2fa2-11ed-92d3-27aaa54e4988
              description: >-
                The UUID of the project to which the floating IP will be
                assigned.
          required:
            - region
    floating_ip_action_unassign:
      allOf:
        - $ref: '#/components/schemas/floatingIPsAction'
        - type: object
          required:
            - type
    floating_ip_action_assign:
      allOf:
        - $ref: '#/components/schemas/floatingIPsAction'
        - type: object
          required:
            - type
            - droplet_id
          properties:
            droplet_id:
              type: integer
              example: 758604968
              description: The ID of the Droplet that the floating IP will be assigned to.
    partner_attachment_writable:
      type: object
      required:
        - name
        - connection_bandwidth_in_mbps
        - region
        - naas_provider
        - vpc_ids
      properties:
        name:
          type: string
          pattern: ^[a-zA-Z0-9\-\.]+$
          example: env.prod-partner-network-connect
          description: >-
            The name of the partner attachment. Must be unique and may only
            contain alphanumeric characters, dashes, and periods.
        connection_bandwidth_in_mbps:
          type: integer
          description: Bandwidth (in Mbps) of the connection.
          enum:
            - 1000
            - 2000
            - 5000
            - 10000
          example: 1000
        region:
          description: The region to create the partner attachment.
          enum:
            - nyc
            - sfo
            - fra
            - ams
            - sgp
          type: string
          example: nyc
        naas_provider:
          type: string
          example: megaport
        vpc_ids:
          type: array
          items:
            type: string
            format: string
          minItems: 1
          example:
            - c140286f-e6ce-4131-8b7b-df4590ce8d6a
            - 994a2735-dc84-11e8-80bc-3cfdfea9fba1
          description: An array of VPCs IDs.
        parent_uuid:
          type: string
          description: Optional associated partner attachment UUID
          example: d594cf8d-8c79-4bc5-aec1-6f9b211506b3
        bgp:
          type: object
          description: Optional BGP configurations
          required:
            - local_router_ip
            - peer_router_ip
            - peer_router_asn
            - auth_key
          properties:
            local_router_ip:
              type: string
              example: 169.254.0.1/29
              description: IP of the DO router
            peer_router_ip:
              type: string
              example: 169.254.0.6/29
              description: IP of the Naas Provider router
            peer_router_asn:
              type: integer
              example: 64532
              description: ASN of the peer router
            auth_key:
              type: string
              example: 0xsNnb1pwQlowdoMySEfWwk4I
              description: BGP Auth Key
        redundancy_zone:
          type: string
          description: Optional redundancy zone for the partner attachment.
          enum:
            - MEGAPORT_BLUE
            - MEGAPORT_RED
          example: MEGAPORT_BLUE
    partner_attachment_updatable:
      anyOf:
        - title: Name
          required:
            - name
          type: object
          properties:
            name:
              type: string
              pattern: ^[a-zA-Z0-9\-\.]+$
              example: env.prod-partner-network-connect
              description: >-
                The name of the partner attachment. Must be unique and may only
                contain alphanumeric characters, dashes, and periods.
        - title: VPC IDs
          type: object
          required:
            - vpc_ids
          properties:
            vpc_ids:
              type: array
              items:
                type: string
                format: string
              minItems: 1
              example:
                - c140286f-e6ce-4131-8b7b-df4590ce8d6a
                - 994a2735-dc84-11e8-80bc-3cfdfea9fba1
              description: An array of VPCs IDs.
        - title: BGP
          type: object
          properties:
            bgp:
              type: object
              description: BGP configurations
              required:
                - local_router_ip
                - peer_router_ip
                - peer_router_asn
                - auth_key
              properties:
                local_router_ip:
                  type: string
                  example: 169.254.0.1/29
                  description: IP of the DO router
                peer_router_ip:
                  type: string
                  example: 169.254.0.6/29
                  description: IP of the NaaS provider router
                peer_router_asn:
                  type: integer
                  example: 64532
                  description: ASN of the peer router
                auth_key:
                  type: string
                  example: 0xsNnb1pwQlowdoMySEfWwk4I
                  description: BGP Auth Key
    byoip_prefix_create:
      type: object
      properties:
        prefix:
          type: string
          description: The IP prefix in CIDR notation to bring
          example: 203.11.13.0/24
        region:
          type: string
          description: The region where the prefix will be created
          example: nyc3
        signature:
          type: string
          description: The signature hash for the prefix creation request
          example: <sample-signature>
      required:
        - prefix
        - region
        - signature
    byoip_prefix_update:
      type: object
      properties:
        advertise:
          type: boolean
          description: Whether the BYOIP prefix should be advertised
          example: true
    floating_ip:
      type: object
      properties:
        ip:
          type: string
          format: ipv4
          example: 45.55.96.47
          description: >-
            The public IP address of the floating IP. It also serves as its
            identifier.
        region:
          allOf:
            - $ref: '#/components/schemas/region'
            - type: object
              description: >-
                The region that the floating IP is reserved to. When you query a
                floating IP, the entire region object will be returned.
        droplet:
          description: >-
            The Droplet that the floating IP has been assigned to. When you
            query a floating IP, if it is assigned to a Droplet, the entire
            Droplet object will be returned. If it is not assigned, the value
            will be null. <br><br>Requires `droplet:read` scope.
          anyOf:
            - title: 'null'
              type: object
              nullable: true
              description: >-
                If the floating IP is not assigned to a Droplet, the value will
                be null.
            - $ref: '#/components/schemas/droplet'
          example: null
        locked:
          type: boolean
          example: true
          description: >-
            A boolean value indicating whether or not the floating IP has
            pending actions preventing new ones from being submitted.
        project_id:
          type: string
          format: uuid
          example: 746c6152-2fa2-11ed-92d3-27aaa54e4988
          description: >-
            The UUID of the project to which the reserved IP currently
            belongs.<br><br>Requires `project:read` scope.
    pagination:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/page_links'
    meta:
      type: object
      properties:
        meta:
          allOf:
            - $ref: '#/components/schemas/meta_properties'
            - required:
                - total
      required:
        - meta
    error:
      type: object
      properties:
        id:
          description: >-
            A short identifier corresponding to the HTTP status code returned.
            For  example, the ID for a response returning a 404 status code
            would be "not_found."
          type: string
          example: not_found
        message:
          description: >-
            A message providing additional information about the error,
            including  details to help resolve it when possible.
          type: string
          example: The resource you were accessing could not be found.
        request_id:
          description: >-
            Optionally, some endpoints may include a request ID that should be 
            provided when reporting bugs or opening support tickets to help 
            identify the issue.
          type: string
          example: 4d9d8375-3c56-4925-a3e7-eb137fed17e9
      required:
        - id
        - message
    action_link:
      type: object
      description: >-
        The linked actions can be used to check the status of a Droplet's create
        event.
      properties:
        id:
          type: integer
          example: 7515
          description: >-
            A unique numeric ID that can be used to identify and reference an
            action.
        rel:
          type: string
          example: create
          description: A string specifying the type of the related action.
        href:
          type: string
          format: uri
          example: https://api.digitalocean.com/v2/actions/7515
          description: A URL that can be used to access the action.
    action:
      type: object
      properties:
        id:
          type: integer
          description: >-
            A unique numeric ID that can be used to identify and reference an
            action.
          example: 36804636
        status:
          type: string
          description: >-
            The current status of the action. This can be "in-progress",
            "completed", or "errored".
          enum:
            - in-progress
            - completed
            - errored
          example: completed
          default: in-progress
        type:
          type: string
          description: >-
            This is the type of action that the object represents. For example,
            this could be "transfer" to represent the state of an image transfer
            action.
          example: create
        started_at:
          type: string
          format: date-time
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the action was initiated.
          example: '2020-11-14T16:29:21Z'
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the action was completed.
          example: '2020-11-14T16:30:06Z'
        resource_id:
          type: integer
          nullable: true
          description: >-
            A unique identifier for the resource that the action is associated
            with.
          example: 3164444
        resource_type:
          type: string
          description: The type of resource that the action is associated with.
          example: droplet
        region:
          $ref: '#/components/schemas/region'
        region_slug:
          type: string
          nullable: true
          description: >-
            A human-readable string that is used as a unique identifier for each
            region.
          example: nyc3
    floatingIPsAction:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - assign
            - unassign
          description: The type of action to initiate for the floating IP.
      discriminator:
        propertyName: type
        mapping:
          assign: '#/components/schemas/floating_ip_action_assign'
          unassign: '#/components/schemas/floating_ip_action_unassign'
    partner_attachment:
      type: object
      properties:
        id:
          type: string
          format: string
          readOnly: true
          example: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
          description: >-
            A unique ID that can be used to identify and reference the partner
            attachment.
          x-order: 1
        name:
          type: string
          pattern: ^[a-zA-Z0-9\-\.]+$
          example: env.prod-partner-network-connect
          description: >-
            The name of the partner attachment. Must be unique and may only
            contain alphanumeric characters, dashes, and periods.
          x-order: 2
        state:
          type: string
          readOnly: true
          example: active
          description: The current operational state of the attachment.
          x-order: 4
        connection_bandwidth_in_mbps:
          type: integer
          example: 1000
          description: The bandwidth (in Mbps) of the connection.
          x-order: 5
        region:
          type: string
          example: nyc
          description: The region where the partner attachment is located.
          x-order: 6
        naas_provider:
          type: string
          example: megaport
          description: The Network as a Service (NaaS) provider for the partner attachment.
          x-order: 7
        vpc_ids:
          type: array
          items:
            type: string
            format: string
          minItems: 1
          example:
            - c140286f-e6ce-4131-8b7b-df4590ce8d6a
            - 994a2735-dc84-11e8-80bc-3cfdfea9fba1
          description: An array of VPC network IDs.
          x-order: 8
        bgp:
          type: object
          properties:
            local_asn:
              type: integer
              example: 64532
              description: ASN of the local router.
            peer_asn:
              type: integer
              example: 64532
              description: ASN of the peer router
            local_router_ip:
              type: string
              example: 169.254.0.1/29
              description: IP of the DigitalOcean router
            peer_router_ip:
              type: string
              example: 169.254.0.1/29
              description: IP of the peer router
          description: The BGP configuration for the partner attachment.
          x-order: 9
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-03-13T19:20:47.442049222Z'
          description: A time value given in ISO8601 combined date and time format.
          x-order: 10
        parent_uuid:
          type: string
          readOnly: true
          example: 34259a41-0ca6-4a6b-97dd-a22bcab900dd
          description: Associated partner attachment UUID
          x-order: 11
        children:
          type: array
          readOnly: true
          items:
            type: string
            format: string
          minItems: 1
          example:
            - ee1ad867-7026-44a5-bfcc-2587b52e1291
          description: An array of associated partner attachment UUIDs.
          x-order: 12
    partner_attachment_service_key:
      type: object
      properties:
        value:
          type: string
          readOnly: true
          example: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
          x-order: 1
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-03-13T19:20:47.442049222Z'
          description: A time value given in the ISO 8601 combined date and time format.
          x-order: 2
        state:
          type: string
          readOnly: true
          example: CREATED
          x-order: 3
    partner_attachment_remote_route:
      type: object
      properties:
        cidr:
          type: string
          readOnly: true
          example: 10.10.10.0/24
          description: A CIDR block representing a remote route.
    byoip_prefix:
      type: object
      properties:
        uuid:
          type: string
          description: Unique identifier for the BYOIP prefix
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        name:
          type: string
          description: Name of the BYOIP prefix
          example: ''
        prefix:
          type: string
          description: The IP prefix in CIDR notation
          example: 203.0.113.0/24
        status:
          type: string
          description: Status of the BYOIP prefix
          example: active
        region:
          type: string
          description: Region where the BYOIP prefix is located
          example: nyc3
        validations:
          type: array
          description: List of validation statuses for the BYOIP prefix
          items:
            type: object
            properties:
              name:
                type: string
                description: Name of the validation
                example: SIGNATURE HASH
              status:
                type: string
                description: Status of the validation
                example: FAILED
              note:
                type: string
                description: Additional notes or details about the validation
                example: ''
        failure_reason:
          type: string
          description: Reason for failure, if applicable
          example: ''
        locked:
          type: boolean
          description: Whether the BYOIP prefix is locked
          example: false
        advertised:
          type: boolean
          description: Whether the BYOIP prefix is being advertised
          example: true
        project_id:
          type: string
          description: The ID of the project associated with the BYOIP prefix
          example: 12345678-1234-1234-1234-123456789012
    byoip_prefix_resource:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the allocation
          example: 10001
        byoip:
          type: string
          description: The BYOIP prefix UUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        region:
          type: string
          description: Region where the allocation is made
          example: nyc3
        resource:
          type: string
          description: The resource associated with the allocation
          example: do:droplet:fa3c10b-58cc-4372-a567-0e02b2c3d479
        assigned_at:
          type: string
          format: date-time
          description: Time when the allocation was assigned
          example: '2025-06-25T12:00:00Z'
    region:
      type: object
      properties:
        name:
          type: string
          description: >-
            The display name of the region.  This will be a full name that is
            used in the control panel and other interfaces.
          example: New York 3
        slug:
          type: string
          description: >-
            A human-readable string that is used as a unique identifier for each
            region.
          example: nyc3
        features:
          type: array
          items:
            type: string
          description: >-
            This attribute is set to an array which contains features available
            in this region
          example:
            - private_networking
            - backups
            - ipv6
            - metadata
            - install_agent
            - storage
            - image_transfer
        available:
          type: boolean
          description: >-
            This is a boolean value that represents whether new Droplets can be
            created in this region.
          example: true
        sizes:
          type: array
          items:
            type: string
          description: >-
            This attribute is set to an array which contains the identifying
            slugs for the sizes available in this region. sizes:read is required
            to view.
          example:
            - s-1vcpu-1gb
            - s-1vcpu-2gb
            - s-1vcpu-3gb
            - s-2vcpu-2gb
            - s-3vcpu-1gb
            - s-2vcpu-4gb
            - s-4vcpu-8gb
            - s-6vcpu-16gb
            - s-8vcpu-32gb
            - s-12vcpu-48gb
            - s-16vcpu-64gb
            - s-20vcpu-96gb
            - s-24vcpu-128gb
            - s-32vcpu-192g
      required:
        - available
        - features
        - name
        - sizes
        - slug
    droplet:
      type: object
      properties:
        id:
          type: integer
          example: 3164444
          description: >-
            A unique identifier for each Droplet instance. This is automatically
            generated upon Droplet creation.
        name:
          type: string
          example: example.com
          description: The human-readable name set for the Droplet instance.
        memory:
          type: integer
          multipleOf: 8
          example: 1024
          description: Memory of the Droplet in megabytes.
        vcpus:
          type: integer
          example: 1
          description: The number of virtual CPUs.
        disk:
          type: integer
          example: 25
          description: The size of the Droplet's disk in gigabytes.
        disk_info:
          type: array
          description: >-
            An array of objects containing information about the disks available
            to the Droplet.
          items:
            $ref: '#/components/schemas/disk_info'
        locked:
          type: boolean
          example: false
          description: >-
            A boolean value indicating whether the Droplet has been locked,
            preventing actions by users.
        status:
          type: string
          enum:
            - new
            - active
            - 'off'
            - archive
          example: active
          description: >-
            A status string indicating the state of the Droplet instance. This
            may be "new", "active", "off", or "archive".
        kernel:
          $ref: '#/components/schemas/kernel'
        created_at:
          type: string
          format: date-time
          example: '2020-07-21T18:37:44Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the Droplet was created.
        features:
          type: array
          items:
            type: string
          example:
            - backups
            - private_networking
            - ipv6
          description: An array of features enabled on this Droplet.
        backup_ids:
          type: array
          items:
            type: integer
          example:
            - 53893572
          description: >-
            An array of backup IDs of any backups that have been taken of the
            Droplet instance.  Droplet backups are enabled at the time of the
            instance creation.<br>Requires `image:read` scope.
        next_backup_window:
          allOf:
            - $ref: '#/components/schemas/droplet_next_backup_window'
            - description: >-
                The details of the Droplet's backups feature, if backups are
                configured for the Droplet. This object contains keys for the
                start and end times of the window during which the backup will
                start.
        snapshot_ids:
          type: array
          items:
            type: integer
          example:
            - 67512819
          description: >-
            An array of snapshot IDs of any snapshots created from the Droplet
            instance.<br>Requires `image:read` scope.
        image:
          allOf:
            - $ref: '#/components/schemas/image'
            - description: The Droplet's image.<br>Requires `image:read` scope.
        volume_ids:
          type: array
          items:
            type: string
          example:
            - 506f78a4-e098-11e5-ad9f-000f53306ae1
          description: >-
            A flat array including the unique identifier for each Block Storage
            volume attached to the Droplet.<br>Requires `block_storage:read`
            scope.
        size:
          $ref: '#/components/schemas/size'
        size_slug:
          type: string
          example: s-1vcpu-1gb
          description: The unique slug identifier for the size of this Droplet.
        networks:
          type: object
          description: >-
            The details of the network that are configured for the Droplet
            instance.  This is an object that contains keys for IPv4 and IPv6. 
            The value of each of these is an array that contains objects
            describing an individual IP resource allocated to the Droplet. 
            These will define attributes like the IP address, netmask, and
            gateway of the specific network depending on the type of network it
            is.
          properties:
            v4:
              type: array
              items:
                $ref: '#/components/schemas/network_v4'
            v6:
              type: array
              items:
                $ref: '#/components/schemas/network_v6'
        region:
          $ref: '#/components/schemas/region'
        tags:
          type: array
          items:
            type: string
          example:
            - web
            - env:prod
          description: >-
            An array of Tags the Droplet has been tagged with.<br>Requires
            `tag:read` scope.
        vpc_uuid:
          type: string
          example: 760e09ef-dc84-11e8-981e-3cfdfeaae000
          description: >-
            A string specifying the UUID of the VPC to which the Droplet is
            assigned.<br>Requires `vpc:read` scope.
        gpu_info:
          $ref: '#/components/schemas/gpu_info'
      required:
        - id
        - name
        - memory
        - vcpus
        - disk
        - locked
        - status
        - created_at
        - features
        - backup_ids
        - next_backup_window
        - snapshot_ids
        - image
        - volume_ids
        - size
        - size_slug
        - networks
        - region
        - tags
    page_links:
      type: object
      properties:
        pages:
          anyOf:
            - $ref: '#/components/schemas/forward_links'
            - $ref: '#/components/schemas/backward_links'
            - {}
          example:
            pages:
              first: https://api.digitalocean.com/v2/account/keys?page=1
              prev: https://api.digitalocean.com/v2/account/keys?page=2
    meta_properties:
      type: object
      description: Information about the response itself.
      properties:
        total:
          description: Number of objects returned by the request.
          type: integer
          example: 1
    disk_info:
      type: object
      properties:
        type:
          type: string
          enum:
            - local
            - scratch
          description: >-
            The type of disk. All Droplets contain a `local` disk. Additionally,
            GPU Droplets can also have a `scratch` disk for non-persistent data.
          example: local
        size:
          type: object
          properties:
            amount:
              type: integer
              description: The amount of space allocated to the disk.
              example: 25
            unit:
              type: string
              description: The unit of measure for the disk size.
              example: gib
    kernel:
      type: object
      description: >
        **Note**: All Droplets created after March 2017 use internal kernels by
        default.

        These Droplets will have this attribute set to `null`.


        The current
        [kernel](https://docs.digitalocean.com/products/droplets/how-to/kernel/)

        for Droplets with externally managed kernels. This will initially be set
        to

        the kernel of the base image when the Droplet is created.
      nullable: true
      deprecated: true
      properties:
        id:
          type: integer
          example: 7515
          description: A unique number used to identify and reference a specific kernel.
        name:
          type: string
          example: DigitalOcean GrubLoader v0.2 (20160714)
          description: >-
            The display name of the kernel. This is shown in the web UI and is
            generally a descriptive title for the kernel in question.
        version:
          type: string
          example: 2016.07.13-DigitalOcean_loader_Ubuntu
          description: >-
            A standard kernel version string representing the version, patch,
            and release information.
    droplet_next_backup_window:
      type: object
      nullable: true
      properties:
        start:
          type: string
          format: date-time
          example: '2019-12-04T00:00:00Z'
          description: >-
            A time value given in ISO8601 combined date and time format
            specifying the start of the Droplet's backup window.
        end:
          type: string
          format: date-time
          example: '2019-12-04T23:00:00Z'
          description: >-
            A time value given in ISO8601 combined date and time format
            specifying the end of the Droplet's backup window.
    image:
      type: object
      properties:
        id:
          type: integer
          description: >-
            A unique number that can be used to identify and reference a
            specific image.
          example: 7555620
          readOnly: true
        name:
          $ref: '#/components/schemas/image_name'
        type:
          type: string
          description: >-
            Describes the kind of image. It may be one of `base`, `snapshot`,
            `backup`, `custom`, or `admin`. Respectively, this specifies whether
            an image is a DigitalOcean base OS image, user-generated Droplet
            snapshot, automatically created Droplet backup, user-provided
            virtual machine image, or an image used for DigitalOcean managed
            resources (e.g. DOKS worker nodes).
          enum:
            - base
            - snapshot
            - backup
            - custom
            - admin
          example: snapshot
        distribution:
          $ref: '#/components/schemas/distribution'
        slug:
          type: string
          nullable: true
          description: >-
            A uniquely identifying string that is associated with each of the
            DigitalOcean-provided public images. These can be used to reference
            a public image as an alternative to the numeric id.
          example: nifty1
        public:
          type: boolean
          description: >-
            This is a boolean value that indicates whether the image in question
            is public or not. An image that is public is available to all
            accounts. A non-public image is only accessible from your account.
          example: true
        regions:
          $ref: '#/components/schemas/regions_array'
        created_at:
          type: string
          format: date-time
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the image was created.
          example: '2020-05-04T22:23:02Z'
        min_disk_size:
          type: integer
          description: >-
            The minimum disk size in GB required for a Droplet to use this
            image.
          example: 20
          nullable: true
          minimum: 0
        size_gigabytes:
          type: number
          format: float
          nullable: true
          description: The size of the image in gigabytes.
          example: 2.34
        description:
          $ref: '#/components/schemas/image_description'
        tags:
          $ref: '#/components/schemas/tags_array'
        status:
          type: string
          description: >-
            A status string indicating the state of a custom image. This may be
            `NEW`,
             `available`, `pending`, `deleted`, or `retired`.
          enum:
            - NEW
            - available
            - pending
            - deleted
            - retired
          example: NEW
        error_message:
          type: string
          description: >-
            A string containing information about errors that may occur when
            importing
             a custom image.
          example: ' '
    size:
      type: object
      properties:
        slug:
          type: string
          example: s-1vcpu-1gb
          description: A human-readable string that is used to uniquely identify each size.
        memory:
          type: integer
          multipleOf: 8
          minimum: 8
          example: 1024
          description: >-
            The amount of RAM allocated to Droplets created of this size. The
            value is represented in megabytes.
        vcpus:
          type: integer
          example: 1
          description: The number of CPUs allocated to Droplets of this size.
        disk:
          type: integer
          example: 25
          description: >-
            The amount of disk space set aside for Droplets of this size. The
            value is represented in gigabytes.
        transfer:
          type: number
          format: float
          example: 1
          description: >-
            The amount of transfer bandwidth that is available for Droplets
            created in this size. This only counts traffic on the public
            interface. The value is given in terabytes.
        price_monthly:
          type: number
          format: float
          example: 5
          description: >-
            This attribute describes the monthly cost of this Droplet size if
            the Droplet is kept for an entire month. The value is measured in US
            dollars.
        price_hourly:
          type: number
          format: float
          example: 0.00743999984115362
          description: >-
            This describes the price of the Droplet size as measured hourly. The
            value is measured in US dollars.
        regions:
          type: array
          items:
            type: string
          example:
            - ams2
            - ams3
            - blr1
            - fra1
            - lon1
            - nyc1
            - nyc2
            - nyc3
            - sfo1
            - sfo2
            - sfo3
            - sgp1
            - tor1
          description: >-
            An array containing the region slugs where this size is available
            for Droplet creates.
        available:
          type: boolean
          default: true
          example: true
          description: >-
            This is a boolean value that represents whether new Droplets can be
            created with this size.
        description:
          type: string
          example: Basic
          description: >-
            A string describing the class of Droplets created from this size.
            For example: Basic, General Purpose, CPU-Optimized,
            Memory-Optimized, or Storage-Optimized.
        disk_info:
          type: array
          description: >-
            An array of objects containing information about the disks available
            to Droplets created with this size.
          items:
            $ref: '#/components/schemas/disk_info'
        gpu_info:
          $ref: '#/components/schemas/gpu_info'
      required:
        - available
        - disk
        - memory
        - price_hourly
        - price_monthly
        - regions
        - slug
        - transfer
        - vcpus
        - description
    network_v4:
      type: object
      properties:
        ip_address:
          type: string
          format: ipv4
          example: 104.236.32.182
          description: The IP address of the IPv4 network interface.
        netmask:
          type: string
          format: ipv4
          example: 255.255.192.0
          description: The netmask of the IPv4 network interface.
        gateway:
          type: string
          example: 104.236.0.1
          description: >
            The gateway of the specified IPv4 network interface.


            For private interfaces, a gateway is not provided. This is denoted
            by

            returning `nil` as its value.
        type:
          type: string
          enum:
            - public
            - private
          example: public
          description: The type of the IPv4 network interface.
    network_v6:
      type: object
      properties:
        ip_address:
          type: string
          format: ipv6
          example: 2604:a880:0:1010::18a:a001
          description: The IP address of the IPv6 network interface.
        netmask:
          type: integer
          example: 64
          description: The netmask of the IPv6 network interface.
        gateway:
          type: string
          format: ipv6
          example: 2604:a880:0:1010::1
          description: The gateway of the specified IPv6 network interface.
        type:
          type: string
          enum:
            - public
          example: public
          description: |
            The type of the IPv6 network interface.

            **Note**: IPv6 private  networking is not currently supported.
    gpu_info:
      type: object
      description: >-
        An object containing information about the GPU capabilities of Droplets
        created with this size.
      properties:
        count:
          type: integer
          description: The number of GPUs allocated to the Droplet.
          example: 1
        model:
          type: string
          description: The model of the GPU.
          example: nvidia_h100
        vram:
          type: object
          properties:
            amount:
              type: integer
              description: The amount of VRAM allocated to the GPU.
              example: 25
            unit:
              type: string
              description: The unit of measure for the VRAM.
              example: gib
    forward_links:
      allOf:
        - $ref: '#/components/schemas/link_to_last_page'
        - $ref: '#/components/schemas/link_to_next_page'
    backward_links:
      allOf:
        - $ref: '#/components/schemas/link_to_first_page'
        - $ref: '#/components/schemas/link_to_prev_page'
    image_name:
      type: string
      description: >-
        The display name that has been given to an image.  This is what is shown
        in the control panel and is generally a descriptive title for the image
        in question.
      example: Nifty New Snapshot
    distribution:
      type: string
      description: >-
        The name of a custom image's distribution. Currently, the valid values
        are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora
        Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`,
        `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored,
        and `Unknown` will be used in its place.
      enum:
        - Arch Linux
        - CentOS
        - CoreOS
        - Debian
        - Fedora
        - Fedora Atomic
        - FreeBSD
        - Gentoo
        - openSUSE
        - RancherOS
        - Rocky Linux
        - Ubuntu
        - Unknown
      example: Ubuntu
    regions_array:
      type: array
      items:
        $ref: '#/components/schemas/region_slug'
      description: >-
        This attribute is an array of the regions that the image is available
        in. The regions are represented by their identifying slug values.
      example:
        - nyc1
        - nyc2
    image_description:
      type: string
      description: An optional free-form text field to describe an image.
      example: ' '
    tags_array:
      type: array
      items:
        type: string
      nullable: true
      description: >-
        A flat array of tag names as strings to be applied to the resource. Tag
        names may be for either existing or new tags. <br><br>Requires
        `tag:create` scope.
      example:
        - base-image
        - prod
    link_to_last_page:
      type: object
      properties:
        last:
          description: URI of the last page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_next_page:
      type: object
      properties:
        next:
          description: URI of the next page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_first_page:
      type: object
      properties:
        first:
          description: URI of the first page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
    link_to_prev_page:
      type: object
      properties:
        prev:
          description: URI of the previous page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
    region_slug:
      type: string
      description: >-
        The slug identifier for the region where the resource will initially be 
        available.
      enum:
        - ams1
        - ams2
        - ams3
        - blr1
        - fra1
        - lon1
        - nyc1
        - nyc2
        - nyc3
        - sfo1
        - sfo2
        - sfo3
        - sgp1
        - tor1
        - syd1
      example: nyc3
  responses:
    floating_ip_list:
      description: >-
        The response will be a JSON object with a key called `floating_ips`.
        This will be set to an array of floating IP objects, each of which will
        contain the standard floating IP attributes
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  floating_ips:
                    type: array
                    items:
                      $ref: '#/components/schemas/floating_ip'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              floating_ips:
                - ip: 45.55.96.47
                  droplet: null
                  region:
                    name: New York 3
                    slug: nyc3
                    features:
                      - private_networking
                      - backups
                      - ipv6
                      - metadata
                      - install_agent
                      - storage
                      - image_transfer
                    available: true
                    sizes:
                      - s-1vcpu-1gb
                      - s-1vcpu-2gb
                      - s-1vcpu-3gb
                      - s-2vcpu-2gb
                      - s-3vcpu-1gb
                      - s-2vcpu-4gb
                      - s-4vcpu-8gb
                      - s-6vcpu-16gb
                      - s-8vcpu-32gb
                      - s-12vcpu-48gb
                      - s-16vcpu-64gb
                      - s-20vcpu-96gb
                      - s-24vcpu-128gb
                      - s-32vcpu-192g
                  locked: false
                  project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
              links: {}
              meta:
                total: 1
    unauthorized:
      description: Authentication failed due to invalid credentials.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unauthorized
            message: Unable to authenticate you.
    too_many_requests:
      description: The API rate limit has been exceeded.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: too_many_requests
            message: API rate limit exceeded.
    server_error:
      description: There was a server error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: server_error
            message: Unexpected server-side error
    unexpected_error:
      description: There was an unexpected error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: example_error
            message: some error message
    floating_ip_created:
      description: >-
        The response will be a JSON object with a key called `floating_ip`. The
        value of this will be an object that contains the standard attributes
        associated with a floating IP.

        When assigning a floating IP to a Droplet at same time as it created,
        the response's `links` object will contain links to both the Droplet and
        the assignment action. The latter can be used to check the status of the
        action.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              floating_ip:
                $ref: '#/components/schemas/floating_ip'
              links:
                type: object
                properties:
                  droplets:
                    type: array
                    items:
                      $ref: '#/components/schemas/action_link'
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/action_link'
          examples:
            floating_ip_assigning:
              $ref: '#/components/examples/floating_ip_assigning'
            floating_ip_reserving:
              $ref: '#/components/examples/floating_ip_reserving'
    floating_ip:
      description: >-
        The response will be a JSON object with a key called `floating_ip`. The
        value of this will be an object that contains the standard attributes
        associated with a floating IP.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              floating_ip:
                $ref: '#/components/schemas/floating_ip'
          examples:
            floating_ip_assigned:
              $ref: '#/components/examples/floating_ip_assigned'
            floating_ip_reserved:
              $ref: '#/components/examples/floating_ip_reserved'
    not_found:
      description: The resource was not found.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: not_found
            message: The resource you requested could not be found.
    no_content:
      description: The action was successful and the response body is empty.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
    floating_ip_actions:
      description: >-
        The results will be returned as a JSON object with an `actions` key.
        This will be set to an array filled with action objects containing the
        standard floating IP action attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/action'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              actions:
                - id: 72531856
                  status: completed
                  type: reserve_ip
                  started_at: '2015-11-21T21:51:09Z'
                  completed_at: '2015-11-21T21:51:09Z'
                  resource_id: 758604197
                  resource_type: floating_ip
                  region:
                    name: New York 3
                    slug: nyc3
                    sizes:
                      - s-1vcpu-1gb
                      - s-1vcpu-2gb
                      - s-1vcpu-3gb
                      - s-2vcpu-2gb
                      - s-3vcpu-1gb
                      - s-2vcpu-4gb
                      - s-4vcpu-8gb
                      - s-6vcpu-16gb
                      - s-8vcpu-32gb
                      - s-12vcpu-48gb
                      - s-16vcpu-64gb
                      - s-20vcpu-96gb
                      - s-24vcpu-128gb
                      - s-32vcpu-192gb
                    features:
                      - private_networking
                      - backups
                      - ipv6
                      - metadata
                    available: true
                  region_slug: nyc3
              links: {}
              meta:
                total: 1
    floating_ip_action:
      description: >-
        The response will be an object with a key called `action`. The value of
        this will be an object that contains the standard floating IP action
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              action:
                allOf:
                  - $ref: '#/components/schemas/action'
                  - type: object
                    properties:
                      project_id:
                        type: string
                        format: uuid
                        example: 746c6152-2fa2-11ed-92d3-27aaa54e4988
                        description: >-
                          The UUID of the project to which the reserved IP
                          currently belongs.
            example:
              action:
                id: 72531856
                status: completed
                type: assign_ip
                started_at: '2015-11-12T17:51:03Z'
                completed_at: '2015-11-12T17:51:14Z'
                resource_id: 758604968
                resource_type: floating_ip
                region:
                  name: New York 3
                  slug: nyc3
                  sizes:
                    - s-1vcpu-1gb
                    - s-1vcpu-2gb
                    - s-1vcpu-3gb
                    - s-2vcpu-2gb
                    - s-3vcpu-1gb
                    - s-2vcpu-4gb
                    - s-4vcpu-8gb
                    - s-6vcpu-16gb
                    - s-8vcpu-32gb
                    - s-12vcpu-48gb
                    - s-16vcpu-64gb
                    - s-20vcpu-96gb
                    - s-24vcpu-128gb
                    - s-32vcpu-192gb
                  features:
                    - private_networking
                    - backups
                    - ipv6
                    - metadata
                  available: true
                region_slug: nyc3
                project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
            type: object
    all_partner_attachments:
      description: |-
        The response will be a JSON object with a `partner_attachments` key
        that contains an array of all partner attachments
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  partner_attachments:
                    type: array
                    items:
                      $ref: '#/components/schemas/partner_attachment'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              partner_attachments:
                - name: env.prod-partner-network-connect
                  id: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
                  urn: do:partner_attachment:5a4981aa-9653-4bd1-bef5-d6bff52042e4
                  state: active
                  created_at: '2020-03-13T19:20:47.442049222Z'
                  connection_bandwidth_in_mbps: 10000
                  region: nyc
                  naas_provider: MEGAPORT
                  vpc_ids:
                    - 796c6fe3-2a1d-4da2-9f3e-38239827dc91
                  bgp:
                    local_asn: 65432
                    local_router_ip: 169.254.0.1/29
                    peer_asn: 133937
                    peer_router_ip: 169.254.0.6/29
                - id: e0fe0f4d-596a-465e-a902-571ce57b79fa
                  urn: do:partner_attachment:e0fe0f4d-596a-465e-a902-571ce57b79fa
                  state: active
                  name: env.test-partner-network-connect
                  created_at: '2020-03-13T19:29:20Z'
                  connection_bandwidth_in_mbps: 10000
                  region: nyc
                  naas_provider: MEGAPORT
                  vpc_ids:
                    - e9eef79d-eb6f-4de1-a5b2-38d7468c75c0
                    - ac1a3d83-349f-4f67-8214-c2803cec0cff
                  bgp:
                    local_asn: 65432
                    local_router_ip: 169.254.0.9/29
                    peer_asn: 133937
                    peer_router_ip: 169.254.0.14/29
              links: {}
              meta:
                total: 2
    single_partner_attachment:
      description: >-
        The response will be a JSON object with details about the partner
        attachment

        including attached VPC network IDs and BGP configuration information
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  partner_attachment:
                    $ref: '#/components/schemas/partner_attachment'
            example:
              partner_attachment:
                id: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
                name: env.prod-partner-network-connect
                state: CREATED
                created_at: '2025-03-27T13:03:53Z'
                connection_bandwidth_in_mbps: 1000
                region: NYC
                naas_provider: MEGAPORT
                vpc_ids:
                  - 796c6fe3-2a1d-4da2-9f3e-38239827dc91
                bgp:
                  local_asn: 65000
                  local_router_ip: 2.2.2.2/29
                  peer_asn: 65001
                  peer_router_ip: 3.3.3.3/29
    unprocessable_entity:
      description: Unprocessable Entity
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unprocessable_entity
            message: request payload validation failed
            request_id: 4851a473-1621-42ea-b2f9-5071c0ea8414
    single_partner_attachment_deleting:
      description: >-
        The response will be a JSON object with details about the partner
        attachment 

        and `"state": "DELETING"` to indicate that the partner attachment is
        being deleted.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  partner_attachment:
                    $ref: '#/components/schemas/partner_attachment'
            example:
              partner_attachment:
                id: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
                name: env.prod-partner-network-connect
                state: DELETING
                created_at: '2025-03-27T13:03:53Z'
                connection_bandwidth_in_mbps: 1000
                region: NYC
                naas_provider: MEGAPORT
                vpc_ids:
                  - 796c6fe3-2a1d-4da2-9f3e-38239827dc91
                bgp:
                  local_asn: 65000
                  local_router_ip: 2.2.2.2/29
                  peer_asn: 65001
                  peer_router_ip: 3.3.3.3/29
    single_partner_attachment_bgp_auth_key:
      description: >-
        The response will be a JSON object with a `bgp_auth_key` object
        containing a 

        `value` field with the BGP auth key value
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  bgp_auth_key:
                    type: object
                    items:
                      $ref: '#/components/schemas/partner_attachment_service_key'
            example:
              bgp_auth_key:
                value: secret
    all_partner_attachment_remote_routes:
      description: >-
        The response will be a JSON object with a `remote_routes` array
        containing 

        information on all the remote routes associated with the partner
        attachment
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  remote_routes:
                    type: array
                    items:
                      $ref: '#/components/schemas/partner_attachment_remote_route'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              remote_routes:
                - cidr: 10.10.10.0/24
                - cidr: 10.10.10.10/24
              links: {}
              meta:
                total: 2
    single_partner_attachment_service_key:
      description: >-
        The response will be a JSON object with a `service_key` object
        containing 

        the service key value and creation information
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  service_key:
                    type: object
                    items:
                      $ref: '#/components/schemas/partner_attachment_service_key'
            example:
              service_key:
                created_at: '2020-03-13T19:20:47.442049222Z'
                value: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
                state: CREATED
    empty_json_object:
      description: The response is an empty JSON object.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties: {}
          example: {}
    byoip_prefix_create:
      description: >-
        BYOIP prefix request accepted, response will contain the details of the
        created prefix.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          example:
            byoip_prefix:
              uuid: f47ac10b-58cc-4372-a567-0e02b2c3d479
              status: in_progress
              region: nyc3
          schema:
            type: object
            properties:
              uuid:
                type: string
                description: The unique identifier for the BYOIP prefix
                example: 123e4567-e89b-12d3-a456-426614174000
              region:
                type: string
                description: The region where the prefix is created
                example: nyc3
              status:
                type: string
                description: The status of the BYOIP prefix
                example: in_progress
    byoip_prefix_list:
      description: List of BYOIP prefixes as an array of BYOIP prefix JSON objects
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          example:
            byoip_prefixes:
              - uuid: f47ac10b-58cc-4372-a567-0e02b2c3d479
                status: active
                region: nyc3
                prefix: 203.0.113.0/24
                validations: []
                failure_reason: ''
                advertised: true
                locked: false
                project_id: 12345678-1234-1234-1234-123456789012
              - uuid: 123e4567-e89b-12d3-a456-426614174001
                status: in_progress
                region: sfo2
                prefix: 203.1.113.0/24
                validations: []
                failure_reason: ''
                advertised: false
                locked: false
                project_id: 12345678-1234-1234-1234-123456789012
            links: {}
            meta:
              total: 2
          schema:
            allOf:
              - type: object
                properties:
                  byoip_prefixes:
                    type: array
                    items:
                      $ref: '#/components/schemas/byoip_prefix'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
    byoip_prefix_get:
      description: Details of the requested BYOIP prefix
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          example:
            byoip_prefix:
              uuid: f47ac10b-58cc-4372-a567-0e02b2c3d479
              status: active
              region: nyc3
              prefix: 203.0.113.0/24
              validations: []
              failure_reason: ''
              advertised: true
              locked: false
              project_id: 12345678-1234-1234-1234-123456789012
          schema:
            type: object
            properties:
              byoip_prefix:
                $ref: '#/components/schemas/byoip_prefix'
    byoip_prefix_update:
      description: Details of the updated BYOIP prefix
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          example:
            byoip_prefix:
              uuid: f47ac10b-58cc-4372-a567-0e02b2c3d479
              status: active
              region: nyc3
              prefix: 203.0.113.0/24
              validations: []
              failure_reason: ''
              advertised: true
              locked: false
              project_id: 12345678-1234-1234-1234-123456789012
          schema:
            type: object
            properties:
              byoip_prefix:
                $ref: '#/components/schemas/byoip_prefix'
    byoip_prefix_list_resources:
      description: >-
        List of IP addresses assigned to resources (such as Droplets) in a BYOIP
        prefix
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          example:
            ips:
              - id: 11111023
                byoip: 203.0.113.2
                region: nyc3
                resource: do:droplet:fa3c10b-58cc-4372-a567-0e02b2c3d479
                assigned_at: '2025-06-25T12:00:00Z'
              - id: 11111024
                byoip: 203.0.113.3
                region: nyc3
                resource: do:droplet:fa3c10b-58cc-4372-a567-0e02b2c3d480
                assigned_at: '2025-06-25T13:00:00Z'
            links: {}
            meta:
              total: 2
          schema:
            allOf:
              - type: object
                properties:
                  ips:
                    type: array
                    items:
                      $ref: '#/components/schemas/byoip_prefix_resource'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
  parameters:
    per_page:
      in: query
      name: per_page
      required: false
      description: Number of items returned per page
      schema:
        type: integer
        minimum: 1
        default: 20
        maximum: 200
      example: 2
    page:
      in: query
      name: page
      required: false
      description: Which 'page' of paginated results to return.
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1
    floating_ip:
      in: path
      name: floating_ip
      description: A floating IP address.
      required: true
      schema:
        type: string
        format: ipv4
        minimum: 1
      example: 45.55.96.47
    action_id:
      in: path
      name: action_id
      description: >-
        A unique numeric ID that can be used to identify and reference an
        action.
      required: true
      schema:
        type: integer
        minimum: 1
      example: 36804636
    pa_id:
      in: path
      name: pa_id
      description: A unique identifier for a partner attachment.
      required: true
      schema:
        type: string
        format: string
        minimum: 1
      example: 4de7ac8b-495b-4884-9a69-1050c6793cd6
    byoip_prefix:
      in: path
      name: byoip_prefix_uuid
      description: The unique identifier for the BYOIP Prefix.
      required: true
      schema:
        type: string
        format: uuid
        minimum: 1
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
  examples:
    floating_ip_assigning:
      summary: Assigning to Droplet
      value:
        floating_ip:
          ip: 45.55.96.47
          droplet: null
          region:
            name: New York 3
            slug: nyc3
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
              - storage
              - image_transfer
            available: true
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192g
          locked: true
          project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
        links:
          droplets:
            - id: 213939433
              rel: droplet
              href: https://api.digitalocean.com/v2/droplets/213939433
          actions:
            - id: 1088924622
              rel: assign_ip
              href: https://api.digitalocean.com/v2/actions/1088924622
    floating_ip_reserving:
      summary: Reserving to Region
      value:
        floating_ip:
          ip: 45.55.96.47
          droplet: null
          region:
            name: New York 3
            slug: nyc3
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
              - storage
              - image_transfer
            available: true
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192g
          locked: false
          project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
        links: {}
    floating_ip_assigned:
      summary: Assigned to Droplet
      value:
        floating_ip:
          ip: 45.55.96.47
          droplet:
            id: 3164444
            name: example.com
            memory: 1024
            vcpus: 1
            disk: 25
            locked: false
            status: active
            kernel: null
            created_at: '2020-07-21T18:37:44Z'
            features:
              - backups
              - private_networking
              - ipv6
            backup_ids:
              - 53893572
            next_backup_window:
              start: '2020-07-30T00:00:00Z'
              end: '2020-07-30T23:00:00Z'
            snapshot_ids:
              - 67512819
            image:
              id: 63663980
              name: 20.04 (LTS) x64
              type: base
              distribution: Ubuntu
              slug: ubuntu-20-04-x64
              public: true
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              created_at: '2020-05-15T05:47:50Z'
              min_disk_size: 20
              size_gigabytes: 2.36
              description: ''
              tags: []
              status: available
              error_message: ''
            volume_ids: []
            size:
              slug: s-1vcpu-1gb
              memory: 1024
              vcpus: 1
              disk: 25
              transfer: 1
              price_monthly: 5
              price_hourly: 0.00743999984115362
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              available: true
              description: Basic
            size_slug: s-1vcpu-1gb
            networks:
              v4:
                - ip_address: 10.128.192.124
                  netmask: 255.255.0.0
                  gateway: nil
                  type: private
                - ip_address: 192.241.165.154
                  netmask: 255.255.255.0
                  gateway: 192.241.165.1
                  type: public
              v6:
                - ip_address: 2604:a880:0:1010::18a:a001
                  netmask: 64
                  gateway: 2604:a880:0:1010::1
                  type: public
            region:
              name: New York 3
              slug: nyc3
              features:
                - backups
                - ipv6
                - metadata
                - install_agent
                - storage
                - image_transfer
              available: true
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192g
            tags:
              - web
              - env:prod
            vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
          region:
            name: New York 3
            slug: nyc3
            features:
              - backups
              - ipv6
              - metadata
              - install_agent
              - storage
              - image_transfer
            available: true
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192g
          locked: false
          project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
    floating_ip_reserved:
      summary: Reserved to Region
      value:
        floating_ip:
          ip: 45.55.96.47
          droplet: null
          region:
            name: New York 3
            slug: nyc3
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
              - storage
              - image_transfer
            available: true
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192g
          locked: false
          project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
  headers:
    ratelimit-limit:
      schema:
        type: integer
      example: 5000
      description: >-
        The default limit on number of requests that can be made per hour and
        per minute. Current rate limits are 5000 requests per hour and 250
        requests per minute.
    ratelimit-remaining:
      schema:
        type: integer
      example: 4816
      description: >-
        The number of requests in your hourly quota that remain before you hit
        your request limit. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
    ratelimit-reset:
      schema:
        type: integer
      example: 1444931833
      description: >-
        The time when the oldest request will expire. The value is given in Unix
        epoch time. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
  x-stackQL-resources:
    floating_ips:
      id: digitalocean.network.floating_ips
      name: floating_ips
      title: Floating Ips
      methods:
        floating_ips_list:
          operation:
            $ref: '#/paths/~1v2~1floating_ips/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.floating_ips
        floating_ips_create:
          operation:
            $ref: '#/paths/~1v2~1floating_ips/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        floating_ips_get:
          operation:
            $ref: '#/paths/~1v2~1floating_ips~1{floating_ip}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.floating_ip
        floating_ips_delete:
          operation:
            $ref: '#/paths/~1v2~1floating_ips~1{floating_ip}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/floating_ips/methods/floating_ips_get
          - $ref: >-
              #/components/x-stackQL-resources/floating_ips/methods/floating_ips_list
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/floating_ips/methods/floating_ips_create
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/floating_ips/methods/floating_ips_delete
        replace: []
    floating_ip_actions:
      id: digitalocean.network.floating_ip_actions
      name: floating_ip_actions
      title: Floating Ip Actions
      methods:
        floating_ips_action_list:
          operation:
            $ref: '#/paths/~1v2~1floating_ips~1{floating_ip}~1actions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.actions
        floating_ips_action_post:
          operation:
            $ref: '#/paths/~1v2~1floating_ips~1{floating_ip}~1actions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        floating_ips_action_get:
          operation:
            $ref: >-
              #/paths/~1v2~1floating_ips~1{floating_ip}~1actions~1{action_id}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/floating_ip_actions/methods/floating_ips_action_get
          - $ref: >-
              #/components/x-stackQL-resources/floating_ip_actions/methods/floating_ips_action_list
        insert: []
        update: []
        delete: []
        replace: []
    partner_attachments:
      id: digitalocean.network.partner_attachments
      name: partner_attachments
      title: Partner Attachments
      methods:
        partner_attachments_list:
          operation:
            $ref: '#/paths/~1v2~1partner_network_connect~1attachments/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.partner_attachments
        partner_attachments_create:
          operation:
            $ref: '#/paths/~1v2~1partner_network_connect~1attachments/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        partner_attachments_get:
          operation:
            $ref: '#/paths/~1v2~1partner_network_connect~1attachments~1{pa_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.partner_attachment
        partner_attachments_patch:
          operation:
            $ref: '#/paths/~1v2~1partner_network_connect~1attachments~1{pa_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        partner_attachments_delete:
          operation:
            $ref: '#/paths/~1v2~1partner_network_connect~1attachments~1{pa_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/partner_attachments/methods/partner_attachments_get
          - $ref: >-
              #/components/x-stackQL-resources/partner_attachments/methods/partner_attachments_list
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/partner_attachments/methods/partner_attachments_create
        update:
          - $ref: >-
              #/components/x-stackQL-resources/partner_attachments/methods/partner_attachments_patch
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/partner_attachments/methods/partner_attachments_delete
        replace: []
    partner_attachments_bgp_auth_key:
      id: digitalocean.network.partner_attachments_bgp_auth_key
      name: partner_attachments_bgp_auth_key
      title: Partner Attachments Bgp Auth Key
      methods:
        partner_attachments_get_bgp_auth_key:
          operation:
            $ref: >-
              #/paths/~1v2~1partner_network_connect~1attachments~1{pa_id}~1bgp_auth_key/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bgp_auth_key
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/partner_attachments_bgp_auth_key/methods/partner_attachments_get_bgp_auth_key
        insert: []
        update: []
        delete: []
        replace: []
    partner_attachments_remote_routes:
      id: digitalocean.network.partner_attachments_remote_routes
      name: partner_attachments_remote_routes
      title: Partner Attachments Remote Routes
      methods:
        partner_attachments_list_remote_routes:
          operation:
            $ref: >-
              #/paths/~1v2~1partner_network_connect~1attachments~1{pa_id}~1remote_routes/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.remote_routes
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/partner_attachments_remote_routes/methods/partner_attachments_list_remote_routes
        insert: []
        update: []
        delete: []
        replace: []
    partner_attachment_service_keys:
      id: digitalocean.network.partner_attachment_service_keys
      name: partner_attachment_service_keys
      title: Partner Attachment Service Keys
      methods:
        partner_attachments_get_service_key:
          operation:
            $ref: >-
              #/paths/~1v2~1partner_network_connect~1attachments~1{pa_id}~1service_key/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.service_key
        partner_attachments_create_service_key:
          operation:
            $ref: >-
              #/paths/~1v2~1partner_network_connect~1attachments~1{pa_id}~1service_key/post
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/partner_attachment_service_keys/methods/partner_attachments_get_service_key
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/partner_attachment_service_keys/methods/partner_attachments_create_service_key
        update: []
        delete: []
        replace: []
    byoip_prefixes:
      id: digitalocean.network.byoip_prefixes
      name: byoip_prefixes
      title: Byoip Prefixes
      methods:
        byoip_prefixes_create:
          operation:
            $ref: '#/paths/~1v2~1byoip_prefixes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        byoip_prefixes_list:
          operation:
            $ref: '#/paths/~1v2~1byoip_prefixes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.byoip_prefixes
        byoip_prefixes_get:
          operation:
            $ref: '#/paths/~1v2~1byoip_prefixes~1{byoip_prefix_uuid}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.byoip_prefix
        byoip_prefixes_delete:
          operation:
            $ref: '#/paths/~1v2~1byoip_prefixes~1{byoip_prefix_uuid}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        byoip_prefixes_patch:
          operation:
            $ref: '#/paths/~1v2~1byoip_prefixes~1{byoip_prefix_uuid}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/byoip_prefixes/methods/byoip_prefixes_get
          - $ref: >-
              #/components/x-stackQL-resources/byoip_prefixes/methods/byoip_prefixes_list
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/byoip_prefixes/methods/byoip_prefixes_create
        update:
          - $ref: >-
              #/components/x-stackQL-resources/byoip_prefixes/methods/byoip_prefixes_patch
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/byoip_prefixes/methods/byoip_prefixes_delete
        replace: []
    byoip_prefix_resources:
      id: digitalocean.network.byoip_prefix_resources
      name: byoip_prefix_resources
      title: Byoip Prefix Resources
      methods:
        byoip_prefixes_list_resources:
          operation:
            $ref: '#/paths/~1v2~1byoip_prefixes~1{byoip_prefix_uuid}~1ips/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.ips
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/byoip_prefix_resources/methods/byoip_prefixes_list_resources
        insert: []
        update: []
        delete: []
        replace: []
servers:
  - url: https://api.digitalocean.com
