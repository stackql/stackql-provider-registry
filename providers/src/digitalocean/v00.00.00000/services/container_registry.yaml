openapi: 3.0.0
info:
  title: container_registry API
  description: digitalocean API
  version: '2.0'
paths:
  /v2/registries:
    get:
      operationId: registries_list
      summary: '[Public Preview] List All Container Registries'
      description: To get information about any container registry in your account, send a GET request to `/v2/registries/`.
      tags:
        - Container Registries
      responses:
        '200':
          $ref: '#/components/responses/all_registries_info'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.get()
      security:
        - bearer_auth:
            - registry:read
    post:
      operationId: registries_create
      summary: '[Public Preview] Create Container Registry'
      description: |
        To create your container registry, send a POST request to `/v2/registries`.

        The `name` becomes part of the URL for images stored in the registry. For
        example, if your registry is called `example`, an image in it will have the
        URL `registry.digitalocean.com/example/image:tag`.
      tags:
        - Container Registries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/multiregistry_create'
      responses:
        '201':
          $ref: '#/components/responses/multiregistry_info'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "example", "region": "fra1"}' \
              "https://api.digitalocean.com/v2/registries"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "example",
              "region": "fra1"
            }

            resp = client.registries.create(body=req)
      security:
        - bearer_auth:
            - registry:create
  /v2/registries/{registry_name}:
    get:
      operationId: registries_get
      summary: '[Public Preview] Get a Container Registry By Name'
      description: To get information about any container registry in your account, send a GET request to `/v2/registries/{registry_name}`.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/registry_name'
      responses:
        '200':
          $ref: '#/components/responses/multiregistry_info'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.get(registry_name="example")
      security:
        - bearer_auth:
            - registry:read
    delete:
      operationId: registries_delete
      summary: '[Public Preview] Delete Container Registry By Name'
      description: To delete your container registry, destroying all container image data stored in it, send a DELETE request to `/v2/registries/{registry_name}`.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/registry_name'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.delete(registry_name="example")
      security:
        - bearer_auth:
            - registry:delete
  /v2/registries/{registry_name}/docker-credentials:
    get:
      operationId: registries_get_dockerCredentials
      summary: '[Public Preview] Get Docker Credentials By Registry Name'
      description: |
        In order to access your container registry with the Docker client or from a
        Kubernetes cluster, you will need to configure authentication. The necessary
        JSON configuration can be retrieved by sending a GET request to
        `/v2/registries/{registry_name}/docker-credentials`.

        The response will be in the format of a Docker `config.json` file. To use the
        config in your Kubernetes cluster, create a Secret with:

            kubectl create secret generic docr \
              --from-file=.dockerconfigjson=config.json \
              --type=kubernetes.io/dockerconfigjson

        By default, the returned credentials have read-only access to your registry
        and cannot be used to push images. This is appropriate for most Kubernetes
        clusters. To retrieve read/write credentials, suitable for use with the Docker
        client or in a CI system, read_write may be provided as query parameter. For
        example: `/v2/registries/{registry_name}/docker-credentials?read_write=true`

        By default, the returned credentials will not expire. To retrieve credentials
        with an expiry set, expiry_seconds may be provided as a query parameter. For
        example: `/v2/registries/{registry_name}/docker-credentials?expiry_seconds=3600` will return
        credentials that expire after one hour.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/registry_name'
      responses:
        '200':
          $ref: '#/components/responses/docker_credentials'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/docker-credentials"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.get_docker_credentials(registry_name="example")
      security:
        - bearer_auth:
            - registry:read
            - registry:update
  /v2/registries/subscription:
    get:
      operationId: registries_get_subscription
      summary: '[Public Preview] Get Subscription Information'
      description: A subscription is automatically created when you configure your container registry. To get information about your subscription, send a GET request to `/v2/registries/subscription`. It is similar to GET `/v2/registry/subscription` and exists for backward compatibility.
      tags:
        - Container Registries
      responses:
        '200':
          $ref: '#/components/responses/subscription_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/subscription"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.get_subscription()
      security:
        - bearer_auth:
            - registry:read
    post:
      operationId: registries_update_subscription
      summary: '[Public Preview] Update Subscription Tier'
      description: After creating your registry, you can switch to a different subscription tier to better suit your needs. To do this, send a POST request to `/v2/registries/subscription`. It is similar to POST `/v2/registry/subscription` and exists for backward compatibility.
      tags:
        - Container Registries
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tier_slug:
                  type: string
                  enum:
                    - starter
                    - basic
                    - professional
                  example: basic
                  description: The slug of the subscription tier to sign up for.
      responses:
        '200':
          $ref: '#/components/responses/subscription_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"tier_slug": "professional"}' \
              "https://api.digitalocean.com/v2/registries/subscription"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "tier_slug": "basic"
            }

            resp = client.registries.update_subscription(body=req)
      security:
        - bearer_auth:
            - registry:update
  /v2/registries/options:
    get:
      operationId: registries_get_options
      summary: '[Public Preview] List Registry Options (Subscription Tiers and Available Regions)'
      description: |-
        This endpoint serves to provide additional information as to which option values are available when creating a container registry.
        There are multiple subscription tiers available for container registry. Each tier allows a different number of image repositories to be created in your registry, and has a different amount of storage and transfer included.
        There are multiple regions available for container registry and controls where your data is stored.
        To list the available options, send a GET request to `/v2/registries/options`. This is similar to GET `/v2/registry/options` and exists for backward compatibility.
      tags:
        - Container Registries
      responses:
        '200':
          $ref: '#/components/responses/registry_options_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/options"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.get_options()
      security:
        - bearer_auth:
            - registry:read
  /v2/registries/{registry_name}/garbage-collection:
    get:
      operationId: registries_get_garbageCollection
      summary: '[Public Preview] Get Active Garbage Collection'
      description: To get information about the currently-active garbage collection for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collection`.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/registry_name'
      responses:
        '200':
          $ref: '#/components/responses/garbage_collection'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/garbage-collection"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.get_garbage_collection(registry_name="example")
      security:
        - bearer_auth:
            - registry:read
    post:
      operationId: registries_run_garbageCollection
      summary: '[Public Preview] Start Garbage Collection'
      description: |
        Garbage collection enables users to clear out unreferenced blobs (layer &
        manifest data) after deleting one or more manifests from a repository. If
        there are no unreferenced blobs resulting from the deletion of one or more
        manifests, garbage collection is effectively a noop.
        [See here for more information](https://docs.digitalocean.com/products/container-registry/how-to/clean-up-container-registry/)
        about how and why you should clean up your container registry periodically.

        To request a garbage collection run on your registry, send a POST request to
        `/v2/registries/$REGISTRY_NAME/garbage-collection`. This will initiate the
        following sequence of events on your registry.

        * Set the registry to read-only mode, meaning no further write-scoped
          JWTs will be issued to registry clients. Existing write-scoped JWTs will
          continue to work until they expire which can take up to 15 minutes.
        * Wait until all existing write-scoped JWTs have expired.
        * Scan all registry manifests to determine which blobs are unreferenced.
        * Delete all unreferenced blobs from the registry.
        * Record the number of blobs deleted and bytes freed, mark the garbage
          collection status as `success`.
        * Remove the read-only mode restriction from the registry, meaning write-scoped
          JWTs will once again be issued to registry clients.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/registry_name'
      responses:
        '201':
          $ref: '#/components/responses/garbage_collection'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/garbage-collection"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.run_garbage_collection(registry_name="example")
      security:
        - bearer_auth:
            - registry:create
  /v2/registries/{registry_name}/garbage-collections:
    get:
      operationId: registries_list_garbageCollections
      summary: '[Public Preview] List Garbage Collections'
      description: To get information about past garbage collections for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collections`.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/garbage_collections'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/garbage-collections"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.list_garbage_collections(registry_name="example")
      security:
        - bearer_auth:
            - registry:read
  /v2/registries/{registry_name}/garbage-collection/{garbage_collection_uuid}:
    put:
      operationId: registries_update_garbageCollection
      summary: '[Public Preview] Update Garbage Collection'
      description: To cancel the currently-active garbage collection for a registry, send a PUT request to `/v2/registries/$REGISTRY_NAME/garbage-collection/$GC_UUID` and specify one or more of the attributes below. It is similar to PUT `/v2/registries/$REGISTRY_NAME/garbage-collection/$GC_UUID` and exists for backward compatibility.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/garbage_collection_uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_registry'
      responses:
        '200':
          $ref: '#/components/responses/garbage_collection'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/garbage-collection/example-gc-uuid"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.run_garbage_collection(registry_name="example")
      security:
        - bearer_auth:
            - registry:update
  /v2/registries/{registry_name}/repositoriesV2:
    get:
      operationId: registries_list_repositoriesV2
      summary: '[Public Preview] List All Container Registry Repositories (V2)'
      description: To list all repositories in your container registry, send a GET request to `/v2/registries/$REGISTRY_NAME/repositoriesV2`. It is similar to GET `/v2/registry/$REGISTRY_NAME/repositoriesV2` and exists for backward compatibility.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/token_pagination_page'
        - $ref: '#/components/parameters/token_pagination_page_token'
        - $ref: '#/components/parameters/registry_name'
      responses:
        '200':
          $ref: '#/components/responses/all_repositories_v2'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/repositoriesV2?page_size=1"
        - lang: cURL (next page)
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/repositoriesV2?page=2&page_token=JPZmZzZXQiOjB9&per_page=1"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.list_repositories_v2(registry_name="example")
      security:
        - bearer_auth:
            - registry:read
  /v2/registries/{registry_name}/repositories/{repository_name}:
    delete:
      operationId: registries_delete_repository
      summary: '[Public Preview] Delete Container Registry Repository'
      description: |
        To delete a container repository including all of its tags, send a DELETE request to
        `/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME`.

        A successful request will receive a 204 status code with no body in response.
        This indicates that the request was processed successfully.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/registry_repository_name'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/repositories/repo-1"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.delete_repository(registry_name="example", repository_name="repo-1")
      security:
        - bearer_auth:
            - registry:delete
  /v2/registries/{registry_name}/repositories/{repository_name}/tags:
    get:
      operationId: registries_list_repositoryTags
      summary: '[Public Preview] List All Container Registry Repository Tags'
      description: |
        To list all tags in one of your container registry's repository, send a GET
        request to `/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags`.

        Note that if your repository name contains `/` characters, it must be
        URL-encoded in the request URL. For example, to list tags for
        `registry.digitalocean.com/example/my/repo`, the path would be
        `/v2/registry/example/repositories/my%2Frepo/tags`. 

        It is similar to GET `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags` and exists for backward compatibility.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/registry_repository_name'
      responses:
        '200':
          $ref: '#/components/responses/repository_tags'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/repositories/repo-1/tags"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.list_repository_tags(registry_name="example", repository_name="repo01")
      security:
        - bearer_auth:
            - registry:read
  /v2/registries/{registry_name}/repositories/{repository_name}/tags/{repository_tag}:
    delete:
      operationId: registries_delete_repositoryTag
      summary: '[Public Preview] Delete Container Registry Repository Tag'
      description: |
        To delete a container repository tag in on of our container registries, send a DELETE request to
        `/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags/$TAG`.

        Note that if your repository name contains `/` characters, it must be
        URL-encoded in the request URL. For example, to delete
        `registry.digitalocean.com/example/my/repo:mytag`, the path would be
        `/v2/registry/example/repositories/my%2Frepo/tags/mytag`.

        A successful request will receive a 204 status code with no body in response.
        This indicates that the request was processed successfully. It is similar to DELETE `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags/$TAG` and exists for backward compatibility.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/registry_repository_name'
        - $ref: '#/components/parameters/registry_repository_tag'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/repositories/repo-1/tags/mytag"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.delete_repository_tag(registry_name="example", repository_name="repo-1", repository_tag="06a447a")
      security:
        - bearer_auth:
            - registry:delete
  /v2/registries/{registry_name}/repositories/{repository_name}/digests:
    get:
      operationId: registries_list_repositoryManifests
      summary: '[Public Preview] List All Container Registry Repository Manifests'
      description: |
        To list all manifests in your container registry repository, send a GET
        request to `/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests`.

        Note that if your repository name contains `/` characters, it must be
        URL-encoded in the request URL. For example, to list manifests for
        `registry.digitalocean.com/example/my/repo`, the path would be
        `/v2/registry/example/repositories/my%2Frepo/digests`.

        It is similar to `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests` and exists for backward compatibility.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/registry_repository_name'
      responses:
        '200':
          $ref: '#/components/responses/repository_manifests'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/repositories/repo-1/digests"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.list_repository_manifests(registry_name="example", repository_name="repo01")
      security:
        - bearer_auth:
            - registry:read
  /v2/registries/{registry_name}/repositories/{repository_name}/digests/{manifest_digest}:
    delete:
      operationId: registries_delete_repositoryManifest
      summary: '[Public Preview] Delete Container Registry Repository Manifest'
      description: |
        To delete a container repository manifest by digest in one of your registries, send a DELETE request to
        `/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests/$MANIFEST_DIGEST`.

        Note that if your repository name contains `/` characters, it must be
        URL-encoded in the request URL. For example, to delete
        `registry.digitalocean.com/example/my/repo@sha256:abcd`, the path would be
        `/v2/registry/example/repositories/my%2Frepo/digests/sha256:abcd`.

        A successful request will receive a 204 status code with no body in response.
        This indicates that the request was processed successfully.

        It is similar to DELETE `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests/$MANIFEST_DIGEST` and exists for backward compatibility.
      tags:
        - Container Registries
      parameters:
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/registry_repository_name'
        - $ref: '#/components/parameters/registry_manifest_digest'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registries/example/repositories/repo-1/digests/sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registries.delete_repository_manifest(registry_name="example", repository_name="repo-1", manifest_digest="sha256:cb8a924afd")
      security:
        - bearer_auth:
            - registry:delete
  /v2/registries/validate-name:
    post:
      operationId: registries_validate_name
      summary: '[Public Preview] Validate a Container Registry Name'
      description: |
        To validate that a container registry name is available for use, send a POST
        request to `/v2/registries/validate-name`.

        If the name is both formatted correctly and available, the response code will
        be 204 and contain no body. If the name is already in use, the response will
        be a 409 Conflict. 

        It is similar to `/v2/registry/validate-name` and exists for backward compatibility.
      tags:
        - Container Registries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/validate_registry'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '409':
          $ref: '#/components/responses/conflict'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "example"}' \
              "https://api.digitalocean.com/v2/registries/validate-name"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "example"
            }

            resp = client.registries.validate_name(body=req)
      security:
        - bearer_auth:
            - registry:create
  /v2/registry:
    get:
      operationId: registry_get
      summary: Get Container Registry Information
      description: |-
        To get information about your container registry, send a GET request to `/v2/registry`.
        This operation is not compatible with multiple registries in a DO account. You should use `/v2/registries/{registry_name}` instead.
      tags:
        - Container Registry
      responses:
        '200':
          $ref: '#/components/responses/registry_info'
        '401':
          $ref: '#/components/responses/unauthorized'
        '412':
          $ref: '#/components/responses/registries_precondition_fail'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.get()
      security:
        - bearer_auth:
            - registry:read
    post:
      operationId: registry_create
      summary: Create Container Registry
      description: |
        To create your container registry, send a POST request to `/v2/registry`.

        The `name` becomes part of the URL for images stored in the registry. For
        example, if your registry is called `example`, an image in it will have the
        URL `registry.digitalocean.com/example/image:tag`.
      tags:
        - Container Registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registry_create'
      responses:
        '201':
          $ref: '#/components/responses/registry_info'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "example", "subscription_tier_slug": "basic", "region": "fra1"}' \
              "https://api.digitalocean.com/v2/registry"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "example",
              "subscription_tier_slug": "basic",
              "region": "fra1"
            }

            resp = client.registry.create(body=req)
      security:
        - bearer_auth:
            - registry:create
    delete:
      operationId: registry_delete
      summary: Delete Container Registry
      description: |-
        To delete your container registry, destroying all container image data stored in it, send a DELETE request to `/v2/registry`.
        This operation is not compatible with multiple registries in a DO account. You should use `/v2/registries/{registry_name}` instead.
      tags:
        - Container Registry
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '412':
          $ref: '#/components/responses/registries_precondition_fail'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.delete()
      security:
        - bearer_auth:
            - registry:delete
  /v2/registry/subscription:
    get:
      operationId: registry_get_subscription
      summary: Get Subscription Information
      description: A subscription is automatically created when you configure your container registry. To get information about your subscription, send a GET request to `/v2/registry/subscription`.
      tags:
        - Container Registry
      responses:
        '200':
          $ref: '#/components/responses/subscription_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/subscription"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.get_subscription()
      security:
        - bearer_auth:
            - registry:read
    post:
      operationId: registry_update_subscription
      summary: Update Subscription Tier
      description: After creating your registry, you can switch to a different subscription tier to better suit your needs. To do this, send a POST request to `/v2/registry/subscription`.
      tags:
        - Container Registry
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tier_slug:
                  type: string
                  enum:
                    - starter
                    - basic
                    - professional
                  example: basic
                  description: The slug of the subscription tier to sign up for.
      responses:
        '200':
          $ref: '#/components/responses/subscription_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '412':
          $ref: '#/components/responses/registries_over_limit'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"tier_slug": "professional"}' \
              "https://api.digitalocean.com/v2/registry/subscription"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "tier_slug": "basic"
            }

            resp = client.registry.update_subscription(body=req)
      security:
        - bearer_auth:
            - registry:update
  /v2/registry/docker-credentials:
    get:
      operationId: registry_get_dockerCredentials
      summary: Get Docker Credentials for Container Registry
      description: |
        In order to access your container registry with the Docker client or from a
        Kubernetes cluster, you will need to configure authentication. The necessary
        JSON configuration can be retrieved by sending a GET request to
        `/v2/registry/docker-credentials`.

        The response will be in the format of a Docker `config.json` file. To use the
        config in your Kubernetes cluster, create a Secret with:

            kubectl create secret generic docr \
              --from-file=.dockerconfigjson=config.json \
              --type=kubernetes.io/dockerconfigjson

        By default, the returned credentials have read-only access to your registry
        and cannot be used to push images. This is appropriate for most Kubernetes
        clusters. To retrieve read/write credentials, suitable for use with the Docker
        client or in a CI system, read_write may be provided as query parameter. For
        example: `/v2/registry/docker-credentials?read_write=true`

        By default, the returned credentials will not expire. To retrieve credentials
        with an expiry set, expiry_seconds may be provided as a query parameter. For
        example: `/v2/registry/docker-credentials?expiry_seconds=3600` will return
        credentials that expire after one hour.
      tags:
        - Container Registry
      parameters:
        - $ref: '#/components/parameters/registry_expiry_seconds'
        - $ref: '#/components/parameters/registry_read_write'
      responses:
        '200':
          $ref: '#/components/responses/docker_credentials'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/docker-credentials"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.get_docker_credentials()
      security:
        - bearer_auth:
            - registry:read
            - registry:update
  /v2/registry/validate-name:
    post:
      operationId: registry_validate_name
      summary: Validate a Container Registry Name
      description: |
        To validate that a container registry name is available for use, send a POST
        request to `/v2/registry/validate-name`.

        If the name is both formatted correctly and available, the response code will
        be 204 and contain no body. If the name is already in use, the response will
        be a 409 Conflict.
      tags:
        - Container Registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/validate_registry'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '409':
          $ref: '#/components/responses/conflict'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "example"}' \
              "https://api.digitalocean.com/v2/registry/validate-name"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "example"
            }

            resp = client.registry.validate_name(body=req)
      security:
        - bearer_auth:
            - registry:create
  /v2/registry/{registry_name}/repositories:
    get:
      operationId: registry_list_repositories
      deprecated: true
      summary: List All Container Registry Repositories
      description: |
        This endpoint has been deprecated in favor of the _List All Container Registry Repositories [V2]_ endpoint.

        To list all repositories in your container registry, send a GET
        request to `/v2/registry/$REGISTRY_NAME/repositories`.
      tags:
        - Container Registry
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/registry_name'
      responses:
        '200':
          $ref: '#/components/responses/all_repositories'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/example/repositories"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.list_repositories(registry_name="example")
      security:
        - bearer_auth:
            - registry:read
  /v2/registry/{registry_name}/repositoriesV2:
    get:
      operationId: registry_list_repositoriesV2
      summary: List All Container Registry Repositories (V2)
      description: To list all repositories in your container registry, send a GET request to `/v2/registry/$REGISTRY_NAME/repositoriesV2`.
      tags:
        - Container Registry
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/token_pagination_page'
        - $ref: '#/components/parameters/token_pagination_page_token'
        - $ref: '#/components/parameters/registry_name'
      responses:
        '200':
          $ref: '#/components/responses/all_repositories_v2'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/example/repositoriesV2?page_size=1"
        - lang: cURL (next page)
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/example/repositoriesV2?page=2&page_token=JPZmZzZXQiOjB9&per_page=1"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.list_repositories_v2(registry_name="example")
      security:
        - bearer_auth:
            - registry:read
  /v2/registry/{registry_name}/repositories/{repository_name}/tags:
    get:
      operationId: registry_list_repositoryTags
      summary: List All Container Registry Repository Tags
      description: |
        To list all tags in your container registry repository, send a GET
        request to `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags`.

        Note that if your repository name contains `/` characters, it must be
        URL-encoded in the request URL. For example, to list tags for
        `registry.digitalocean.com/example/my/repo`, the path would be
        `/v2/registry/example/repositories/my%2Frepo/tags`.
      tags:
        - Container Registry
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/registry_repository_name'
      responses:
        '200':
          $ref: '#/components/responses/repository_tags'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/example/repositories/repo-1/tags"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.list_repository_tags(registry_name="example", repository_name="repo01")
      security:
        - bearer_auth:
            - registry:read
  /v2/registry/{registry_name}/repositories/{repository_name}/tags/{repository_tag}:
    delete:
      operationId: registry_delete_repositoryTag
      summary: Delete Container Registry Repository Tag
      description: |
        To delete a container repository tag, send a DELETE request to
        `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags/$TAG`.

        Note that if your repository name contains `/` characters, it must be
        URL-encoded in the request URL. For example, to delete
        `registry.digitalocean.com/example/my/repo:mytag`, the path would be
        `/v2/registry/example/repositories/my%2Frepo/tags/mytag`.

        A successful request will receive a 204 status code with no body in response.
        This indicates that the request was processed successfully.
      tags:
        - Container Registry
      parameters:
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/registry_repository_name'
        - $ref: '#/components/parameters/registry_repository_tag'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/example/repositories/repo-1/tags/mytag"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.delete_repository_tag(registry_name="example", repository_name="repo-1", repository_tag="06a447a")
      security:
        - bearer_auth:
            - registry:delete
  /v2/registry/{registry_name}/repositories/{repository_name}/digests:
    get:
      operationId: registry_list_repositoryManifests
      summary: List All Container Registry Repository Manifests
      description: |
        To list all manifests in your container registry repository, send a GET
        request to `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests`.

        Note that if your repository name contains `/` characters, it must be
        URL-encoded in the request URL. For example, to list manifests for
        `registry.digitalocean.com/example/my/repo`, the path would be
        `/v2/registry/example/repositories/my%2Frepo/digests`.
      tags:
        - Container Registry
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/registry_repository_name'
      responses:
        '200':
          $ref: '#/components/responses/repository_manifests'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/example/repositories/repo-1/digests"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.list_repository_manifests(registry_name="example", repository_name="repo01")
      security:
        - bearer_auth:
            - registry:read
  /v2/registry/{registry_name}/repositories/{repository_name}/digests/{manifest_digest}:
    delete:
      operationId: registry_delete_repositoryManifest
      summary: Delete Container Registry Repository Manifest
      description: |
        To delete a container repository manifest by digest, send a DELETE request to
        `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests/$MANIFEST_DIGEST`.

        Note that if your repository name contains `/` characters, it must be
        URL-encoded in the request URL. For example, to delete
        `registry.digitalocean.com/example/my/repo@sha256:abcd`, the path would be
        `/v2/registry/example/repositories/my%2Frepo/digests/sha256:abcd`.

        A successful request will receive a 204 status code with no body in response.
        This indicates that the request was processed successfully.
      tags:
        - Container Registry
      parameters:
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/registry_repository_name'
        - $ref: '#/components/parameters/registry_manifest_digest'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/example/repositories/repo-1/digests/sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.delete_repository_manifest(registry_name="example", repository_name="repo-1", manifest_digest="sha256:cb8a924afd")
      security:
        - bearer_auth:
            - registry:delete
  /v2/registry/{registry_name}/garbage-collection:
    post:
      operationId: registry_run_garbageCollection
      summary: Start Garbage Collection
      description: |
        Garbage collection enables users to clear out unreferenced blobs (layer &
        manifest data) after deleting one or more manifests from a repository. If
        there are no unreferenced blobs resulting from the deletion of one or more
        manifests, garbage collection is effectively a noop.
        [See here for more information](https://docs.digitalocean.com/products/container-registry/how-to/clean-up-container-registry/)
        about how and why you should clean up your container registry periodically.

        To request a garbage collection run on your registry, send a POST request to
        `/v2/registry/$REGISTRY_NAME/garbage-collection`. This will initiate the
        following sequence of events on your registry.

        * Set the registry to read-only mode, meaning no further write-scoped
          JWTs will be issued to registry clients. Existing write-scoped JWTs will
          continue to work until they expire which can take up to 15 minutes.
        * Wait until all existing write-scoped JWTs have expired.
        * Scan all registry manifests to determine which blobs are unreferenced.
        * Delete all unreferenced blobs from the registry.
        * Record the number of blobs deleted and bytes freed, mark the garbage
          collection status as `success`.
        * Remove the read-only mode restriction from the registry, meaning write-scoped
          JWTs will once again be issued to registry clients.
      tags:
        - Container Registry
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registry_run_gc'
      parameters:
        - $ref: '#/components/parameters/registry_name'
      responses:
        '201':
          $ref: '#/components/responses/garbage_collection'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{ "type": "unreferenced blobs only"}' \
              "https://api.digitalocean.com/v2/registry/example/garbage-collection"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
                  "type": "unreferenced blobs only"
                  
            }

            resp = client.registry.run_garbage_collection(registry_name="example",body=req)
      security:
        - bearer_auth:
            - registry:update
    get:
      operationId: registry_get_garbageCollection
      summary: Get Active Garbage Collection
      description: To get information about the currently-active garbage collection for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collection`.
      tags:
        - Container Registry
      parameters:
        - $ref: '#/components/parameters/registry_name'
      responses:
        '200':
          $ref: '#/components/responses/garbage_collection'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/example/garbage-collection"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.get_garbage_collection(registry_name="example")
      security:
        - bearer_auth:
            - registry:read
  /v2/registry/{registry_name}/garbage-collections:
    get:
      operationId: registry_list_garbageCollections
      summary: List Garbage Collections
      description: To get information about past garbage collections for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collections`.
      tags:
        - Container Registry
      parameters:
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/garbage_collections'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/example/garbage-collections"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.list_garbage_collections(registry_name="example")
      security:
        - bearer_auth:
            - registry:read
  /v2/registry/{registry_name}/garbage-collection/{garbage_collection_uuid}:
    put:
      operationId: registry_update_garbageCollection
      summary: Update Garbage Collection
      description: To cancel the currently-active garbage collection for a registry, send a PUT request to `/v2/registry/$REGISTRY_NAME/garbage-collection/$GC_UUID` and specify one or more of the attributes below.
      tags:
        - Container Registry
      parameters:
        - $ref: '#/components/parameters/registry_name'
        - $ref: '#/components/parameters/garbage_collection_uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_registry'
      responses:
        '200':
          $ref: '#/components/responses/garbage_collection'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/example/garbage-collection/example-gc-uuid"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.run_garbage_collection(registry_name="example")
      security:
        - bearer_auth:
            - registry:update
  /v2/registry/options:
    get:
      operationId: registry_get_options
      summary: List Registry Options (Subscription Tiers and Available Regions)
      description: |-
        This endpoint serves to provide additional information as to which option values are available when creating a container registry.
        There are multiple subscription tiers available for container registry. Each tier allows a different number of image repositories to be created in your registry, and has a different amount of storage and transfer included.
        There are multiple regions available for container registry and controls where your data is stored.
        To list the available options, send a GET request to `/v2/registry/options`.
      tags:
        - Container Registry
      responses:
        '200':
          $ref: '#/components/responses/registry_options_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/registry/options"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.registry.get_options()
      security:
        - bearer_auth:
            - registry:read
components:
  schemas:
    multiregistry_create:
      type: object
      properties:
        name:
          type: string
          maxLength: 63
          pattern: ^[a-z0-9-]{1,63}$
          example: example
          description: A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
        subscription_tier_slug:
          type: string
          enum:
            - starter
            - basic
            - professional
          example: basic
          description: The slug of the subscription tier to sign up for. Valid values can be retrieved using the options endpoint.
        region:
          type: string
          enum:
            - nyc3
            - sfo3
            - sfo2
            - ams3
            - sgp1
            - fra1
            - blr1
            - syd1
          example: fra1
          description: Slug of the region where registry data is stored. When not provided, a region will be selected.
      required:
        - name
    update_registry:
      type: object
      properties:
        cancel:
          type: boolean
          example: true
          description: A boolean value indicating that the garbage collection should be cancelled.
    validate_registry:
      type: object
      properties:
        name:
          type: string
          maxLength: 63
          pattern: ^[a-z0-9-]{1,63}$
          example: example
          description: A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
      required:
        - name
    registry_create:
      type: object
      properties:
        name:
          type: string
          maxLength: 63
          pattern: ^[a-z0-9-]{1,63}$
          example: example
          description: A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
        subscription_tier_slug:
          type: string
          enum:
            - starter
            - basic
            - professional
          example: basic
          description: The slug of the subscription tier to sign up for. Valid values can be retrieved using the options endpoint.
        region:
          type: string
          enum:
            - nyc3
            - sfo3
            - ams3
            - sgp1
            - fra1
          example: fra1
          description: Slug of the region where registry data is stored. When not provided, a region will be selected.
      required:
        - name
        - subscription_tier_slug
    registry_run_gc:
      type: object
      properties:
        type:
          type: string
          enum:
            - untagged manifests only
            - unreferenced blobs only
            - untagged manifests and unreferenced blobs
          example: unreferenced blobs only
          description: Type of the garbage collection to run against this registry
    registry:
      type: object
      properties:
        name:
          type: string
          maxLength: 63
          pattern: ^[a-z0-9-]{1,63}$
          example: example
          description: A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-03-21T16:02:37Z'
          description: A time value given in ISO8601 combined date and time format that represents when the registry was created.
        region:
          type: string
          example: fra1
          description: Slug of the region where registry data is stored
        storage_usage_bytes:
          type: integer
          readOnly: true
          example: 29393920
          description: The amount of storage used in the registry in bytes.
        storage_usage_bytes_updated_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-11-04T21:39:49.530562231Z'
          description: The time at which the storage usage was updated. Storage usage is calculated asynchronously, and may not immediately reflect pushes to the registry.
        subscription:
          readOnly: true
          type: object
          properties:
            tier:
              type: object
              properties:
                name:
                  type: string
                  example: Basic
                  description: The name of the subscription tier.
                slug:
                  type: string
                  example: basic
                  description: The slug identifier of the subscription tier.
                included_repositories:
                  type: integer
                  example: 5
                  description: The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories.
                included_storage_bytes:
                  type: integer
                  example: 5368709120
                  description: The amount of storage included in the subscription tier in bytes.
                allow_storage_overage:
                  type: boolean
                  example: true
                  description: A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used.
                included_bandwidth_bytes:
                  type: integer
                  example: 5368709120
                  description: The amount of outbound data transfer included in the subscription tier in bytes.
                monthly_price_in_cents:
                  type: integer
                  example: 500
                  description: The monthly cost of the subscription tier in cents.
                storage_overage_price_in_cents:
                  type: integer
                  example: 2
                  description: The price paid in cents per GiB for additional storage beyond what is included in the subscription plan.
            created_at:
              type: string
              format: date-time
              readOnly: true
              example: '2020-01-23T21:19:12Z'
              description: The time at which the subscription was created.
            updated_at:
              type: string
              format: date-time
              readOnly: true
              example: '2020-11-05T15:53:24Z'
              description: The time at which the subscription was last updated.
    error:
      type: object
      properties:
        id:
          description: A short identifier corresponding to the HTTP status code returned. For  example, the ID for a response returning a 404 status code would be "not_found."
          type: string
          example: not_found
        message:
          description: A message providing additional information about the error, including  details to help resolve it when possible.
          type: string
          example: The resource you were accessing could not be found.
        request_id:
          description: Optionally, some endpoints may include a request ID that should be  provided when reporting bugs or opening support tickets to help  identify the issue.
          type: string
          example: 4d9d8375-3c56-4925-a3e7-eb137fed17e9
      required:
        - id
        - message
    multiregistry:
      type: object
      properties:
        name:
          type: string
          maxLength: 63
          pattern: ^[a-z0-9-]{1,63}$
          example: example
          description: A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-03-21T16:02:37Z'
          description: A time value given in ISO8601 combined date and time format that represents when the registry was created.
        region:
          type: string
          example: fra1
          description: Slug of the region where registry data is stored
        storage_usage_bytes:
          type: integer
          readOnly: true
          example: 29393920
          description: The amount of storage used in the registry in bytes.
        storage_usage_bytes_updated_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-11-04T21:39:49.530562231Z'
          description: The time at which the storage usage was updated. Storage usage is calculated asynchronously, and may not immediately reflect pushes to the registry.
    docker_credentials:
      type: object
      properties:
        auths:
          type: object
          properties:
            registry.digitalocean.com:
              type: object
              properties:
                auth:
                  type: string
                  example: YjdkMDNhNjk0N2IyMTdlZmI2ZjNlYzNiZDM1MDQ1ODI6YjdkMDNhNjk0N2IyMTdlZmI2ZjNlYzNiZDM1MDQ1ODIK
                  description: A base64 encoded string containing credentials for the container registry.
    subscription:
      type: object
      properties:
        tier:
          type: object
          properties:
            name:
              type: string
              example: Basic
              description: The name of the subscription tier.
            slug:
              type: string
              example: basic
              description: The slug identifier of the subscription tier.
            included_repositories:
              type: integer
              example: 5
              description: The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories.
            included_storage_bytes:
              type: integer
              example: 5368709120
              description: The amount of storage included in the subscription tier in bytes.
            allow_storage_overage:
              type: boolean
              example: true
              description: A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used.
            included_bandwidth_bytes:
              type: integer
              example: 5368709120
              description: The amount of outbound data transfer included in the subscription tier in bytes.
            monthly_price_in_cents:
              type: integer
              example: 500
              description: The monthly cost of the subscription tier in cents.
            storage_overage_price_in_cents:
              type: integer
              example: 2
              description: The price paid in cents per GiB for additional storage beyond what is included in the subscription plan.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-01-23T21:19:12Z'
          description: The time at which the subscription was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-11-05T15:53:24Z'
          description: The time at which the subscription was last updated.
    subscription_tier_base:
      type: object
      properties:
        name:
          type: string
          example: Basic
          description: The name of the subscription tier.
        slug:
          type: string
          example: basic
          description: The slug identifier of the subscription tier.
        included_repositories:
          type: integer
          example: 5
          description: The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories.
        included_storage_bytes:
          type: integer
          example: 5368709120
          description: The amount of storage included in the subscription tier in bytes.
        allow_storage_overage:
          type: boolean
          example: true
          description: A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used.
        included_bandwidth_bytes:
          type: integer
          example: 5368709120
          description: The amount of outbound data transfer included in the subscription tier in bytes.
        monthly_price_in_cents:
          type: integer
          example: 500
          description: The monthly cost of the subscription tier in cents.
        storage_overage_price_in_cents:
          type: integer
          example: 2
          description: The price paid in cents per GiB for additional storage beyond what is included in the subscription plan.
    subscription_tier_extended:
      type: object
      properties:
        eligible:
          type: boolean
          example: true
          description: A boolean indicating whether your account it eligible to use a certain subscription tier.
        eligibility_reasons:
          type: array
          items:
            type: string
            enum:
              - OverRepositoryLimit
              - OverStorageLimit
          example:
            - OverRepositoryLimit
          description: If your account is not eligible to use a certain subscription tier, this will include a list of reasons that prevent you from using the tier.
    garbage_collection:
      type: object
      properties:
        uuid:
          type: string
          example: eff0feee-49c7-4e8f-ba5c-a320c109c8a8
          description: A string specifying the UUID of the garbage collection.
        registry_name:
          type: string
          example: example
          description: The name of the container registry.
        status:
          type: string
          enum:
            - requested
            - waiting for write JWTs to expire
            - scanning manifests
            - deleting unreferenced blobs
            - cancelling
            - failed
            - succeeded
            - cancelled
          example: requested
          description: The current status of this garbage collection.
        created_at:
          type: string
          format: date-time
          example: '2020-10-30T21:03:24Z'
          description: The time the garbage collection was created.
        updated_at:
          type: string
          format: date-time
          example: '2020-10-30T21:03:44Z'
          description: The time the garbage collection was last updated.
        blobs_deleted:
          type: integer
          example: 42
          description: The number of blobs deleted as a result of this garbage collection.
        freed_bytes:
          type: integer
          example: 667
          description: The number of bytes freed as a result of this garbage collection.
    repository_v2:
      type: object
      properties:
        registry_name:
          type: string
          example: example
          description: The name of the container registry.
        name:
          type: string
          example: repo-1
          description: The name of the repository.
        latest_manifest:
          type: object
          properties:
            registry_name:
              type: string
              example: example
              description: The name of the container registry.
            repository:
              type: string
              example: repo-1
              description: The name of the repository.
            digest:
              type: string
              example: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
              description: The manifest digest
            compressed_size_bytes:
              type: integer
              example: 2803255
              description: The compressed size of the manifest in bytes.
            size_bytes:
              type: integer
              example: 5861888
              description: The uncompressed size of the manifest in bytes (this size is calculated asynchronously so it may not be immediately available).
            updated_at:
              type: string
              format: date-time
              example: '2020-04-09T23:54:25Z'
              description: The time the manifest was last updated.
            tags:
              type: array
              items:
                type: string
              example:
                - latest
                - v1
                - v2
              description: All tags associated with this manifest
            blobs:
              type: array
              items:
                type: object
                properties:
                  digest:
                    type: string
                    example: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
                    description: The digest of the blob
                  compressed_size_bytes:
                    type: integer
                    example: 2803255
                    description: The compressed size of the blob in bytes.
              description: All blobs associated with this manifest
        tag_count:
          type: integer
          example: 1
          description: The number of tags in the repository.
        manifest_count:
          type: integer
          example: 1
          description: The number of manifests in the repository.
    pagination:
      type: object
      properties:
        links:
          type: object
          properties:
            pages:
              anyOf:
                - type: object
                  properties:
                    last:
                      description: URI of the last page of the results.
                      type: string
                      example: https://api.digitalocean.com/v2/images?page=2
                    next:
                      description: URI of the next page of the results.
                      type: string
                      example: https://api.digitalocean.com/v2/images?page=2
                - type: object
                  properties:
                    first:
                      description: URI of the first page of the results.
                      type: string
                      example: https://api.digitalocean.com/v2/images?page=1
                    prev:
                      description: URI of the previous page of the results.
                      type: string
                      example: https://api.digitalocean.com/v2/images?page=1
                - {}
              example:
                pages:
                  first: https://api.digitalocean.com/v2/account/keys?page=1
                  prev: https://api.digitalocean.com/v2/account/keys?page=2
    meta:
      type: object
      properties:
        meta:
          type: object
          description: Information about the response itself.
          required:
            - total
          properties:
            total:
              description: Number of objects returned by the request.
              type: integer
              example: 1
      required:
        - meta
    repository_tag:
      type: object
      properties:
        registry_name:
          type: string
          example: example
          description: The name of the container registry.
        repository:
          type: string
          example: repo-1
          description: The name of the repository.
        tag:
          type: string
          example: latest
          description: The name of the tag.
        manifest_digest:
          type: string
          example: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
          description: The digest of the manifest associated with the tag.
        compressed_size_bytes:
          type: integer
          example: 2803255
          description: The compressed size of the tag in bytes.
        size_bytes:
          type: integer
          example: 5861888
          description: The uncompressed size of the tag in bytes (this size is calculated asynchronously so it may not be immediately available).
        updated_at:
          type: string
          format: date-time
          example: '2020-04-09T23:54:25Z'
          description: The time the tag was last updated.
    repository_manifest:
      type: object
      properties:
        registry_name:
          type: string
          example: example
          description: The name of the container registry.
        repository:
          type: string
          example: repo-1
          description: The name of the repository.
        digest:
          type: string
          example: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
          description: The manifest digest
        compressed_size_bytes:
          type: integer
          example: 2803255
          description: The compressed size of the manifest in bytes.
        size_bytes:
          type: integer
          example: 5861888
          description: The uncompressed size of the manifest in bytes (this size is calculated asynchronously so it may not be immediately available).
        updated_at:
          type: string
          format: date-time
          example: '2020-04-09T23:54:25Z'
          description: The time the manifest was last updated.
        tags:
          type: array
          items:
            type: string
          example:
            - latest
            - v1
            - v2
          description: All tags associated with this manifest
        blobs:
          type: array
          items:
            type: object
            properties:
              digest:
                type: string
                example: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
                description: The digest of the blob
              compressed_size_bytes:
                type: integer
                example: 2803255
                description: The compressed size of the blob in bytes.
          description: All blobs associated with this manifest
    repository:
      type: object
      properties:
        registry_name:
          type: string
          example: example
          description: The name of the container registry.
        name:
          type: string
          example: repo-1
          description: The name of the repository.
        latest_tag:
          type: object
          properties:
            registry_name:
              type: string
              example: example
              description: The name of the container registry.
            repository:
              type: string
              example: repo-1
              description: The name of the repository.
            tag:
              type: string
              example: latest
              description: The name of the tag.
            manifest_digest:
              type: string
              example: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
              description: The digest of the manifest associated with the tag.
            compressed_size_bytes:
              type: integer
              example: 2803255
              description: The compressed size of the tag in bytes.
            size_bytes:
              type: integer
              example: 5861888
              description: The uncompressed size of the tag in bytes (this size is calculated asynchronously so it may not be immediately available).
            updated_at:
              type: string
              format: date-time
              example: '2020-04-09T23:54:25Z'
              description: The time the tag was last updated.
        tag_count:
          type: integer
          example: 1
          description: The number of tags in the repository.
    registry_base:
      type: object
      properties:
        name:
          type: string
          maxLength: 63
          pattern: ^[a-z0-9-]{1,63}$
          example: example
          description: A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-03-21T16:02:37Z'
          description: A time value given in ISO8601 combined date and time format that represents when the registry was created.
        region:
          type: string
          example: fra1
          description: Slug of the region where registry data is stored
        storage_usage_bytes:
          type: integer
          readOnly: true
          example: 29393920
          description: The amount of storage used in the registry in bytes.
        storage_usage_bytes_updated_at:
          type: string
          format: date-time
          readOnly: true
          example: '2020-11-04T21:39:49.530562231Z'
          description: The time at which the storage usage was updated. Storage usage is calculated asynchronously, and may not immediately reflect pushes to the registry.
    page_links:
      type: object
      properties:
        pages:
          anyOf:
            - type: object
              properties:
                last:
                  description: URI of the last page of the results.
                  type: string
                  example: https://api.digitalocean.com/v2/images?page=2
                next:
                  description: URI of the next page of the results.
                  type: string
                  example: https://api.digitalocean.com/v2/images?page=2
            - type: object
              properties:
                first:
                  description: URI of the first page of the results.
                  type: string
                  example: https://api.digitalocean.com/v2/images?page=1
                prev:
                  description: URI of the previous page of the results.
                  type: string
                  example: https://api.digitalocean.com/v2/images?page=1
            - {}
          example:
            pages:
              first: https://api.digitalocean.com/v2/account/keys?page=1
              prev: https://api.digitalocean.com/v2/account/keys?page=2
    meta_properties:
      type: object
      description: Information about the response itself.
      properties:
        total:
          description: Number of objects returned by the request.
          type: integer
          example: 1
    repository_blob:
      type: object
      properties:
        digest:
          type: string
          example: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
          description: The digest of the blob
        compressed_size_bytes:
          type: integer
          example: 2803255
          description: The compressed size of the blob in bytes.
    forward_links:
      type: object
      properties:
        last:
          description: URI of the last page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
        next:
          description: URI of the next page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    backward_links:
      type: object
      properties:
        first:
          description: URI of the first page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
        prev:
          description: URI of the previous page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
    link_to_last_page:
      type: object
      properties:
        last:
          description: URI of the last page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_next_page:
      type: object
      properties:
        next:
          description: URI of the next page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_first_page:
      type: object
      properties:
        first:
          description: URI of the first page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
    link_to_prev_page:
      type: object
      properties:
        prev:
          description: URI of the previous page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
  responses:
    all_registries_info:
      description: The response will be a JSON object with the key `registry` containing information about your registry.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              registries:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/registry'
            type: object
    unauthorized:
      description: Authentication failed due to invalid credentials.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unauthorized
            message: Unable to authenticate you.
    too_many_requests:
      description: The API rate limit has been exceeded.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: too_many_requests
            message: API rate limit exceeded.
    server_error:
      description: There was a server error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: server_error
            message: Unexpected server-side error
    unexpected_error:
      description: There was an unexpected error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: example_error
            message: some error message
    multiregistry_info:
      description: The response will be a JSON object with the key `registry` containing information about your registry.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              registry:
                $ref: '#/components/schemas/multiregistry'
            type: object
    not_found:
      description: The resource was not found.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: not_found
            message: The resource you requested could not be found.
    no_content:
      description: The action was successful and the response body is empty.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
    docker_credentials:
      description: A Docker `config.json` file for the container registry.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/docker_credentials'
    subscription_response:
      description: The response will be a JSON object with a key called `subscription` containing information about your subscription.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              subscription:
                $ref: '#/components/schemas/subscription'
            type: object
    registry_options_response:
      description: The response will be a JSON object with a key called `options` which contains a key called `subscription_tiers` listing the available tiers.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              options:
                type: object
                properties:
                  available_regions:
                    type: array
                    items:
                      type: string
                    example:
                      - nyc3
                  subscription_tiers:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/subscription_tier_base'
                        - $ref: '#/components/schemas/subscription_tier_extended'
          example:
            options:
              available_regions:
                - nyc3
                - sfo3
                - ams3
                - sgp1
                - fra1
              subscription_tiers:
                - name: Starter
                  slug: starter
                  included_repositories: 1
                  included_storage_bytes: 524288000
                  allow_storage_overage: false
                  included_bandwidth_bytes: 524288000
                  monthly_price_in_cents: 0
                  eligible: false
                  eligibility_reasons:
                    - OverRepositoryLimit
                - name: Basic
                  slug: basic
                  included_repositories: 5
                  included_storage_bytes: 5368709120
                  allow_storage_overage: true
                  included_bandwidth_bytes: 5368709120
                  monthly_price_in_cents: 500
                  eligible: true
                - name: Professional
                  slug: professional
                  included_repositories: 0
                  included_storage_bytes: 107374182400
                  allow_storage_overage: true
                  included_bandwidth_bytes: 107374182400
                  monthly_price_in_cents: 2000
                  eligible: true
    garbage_collection:
      description: The response will be a JSON object with a key of `garbage_collection`. This will be a json object with attributes representing the currently-active garbage collection.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              garbage_collection:
                $ref: '#/components/schemas/garbage_collection'
    garbage_collections:
      description: The response will be a JSON object with a key of `garbage_collections`. This will be set to an array containing objects representing each past garbage collection. Each will contain the standard Garbage Collection attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              garbage_collections:
                type: array
                items:
                  $ref: '#/components/schemas/garbage_collection'
          example:
            garbage_collections:
              - uuid: eff0feee-49c7-4e8f-ba5c-a320c109c8a8
                registry_name: example
                status: requested
                created_at: '2020-10-30T21:03:24.000Z'
                updated_at: '2020-10-30T21:03:44.000Z'
                blobs_deleted: 42
                freed_bytes: 667
            meta:
              total: 1
    all_repositories_v2:
      description: The response body will be a JSON object with a key of `repositories`. This will be set to an array containing objects each representing a repository.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/repository_v2'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              repositories:
                - registry_name: example
                  name: repo-1
                  tag_count: 57
                  manifest_count: 82
                  latest_manifest:
                    digest: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
                    registry_name: example
                    repository: repo-1
                    compressed_size_bytes: 1972332
                    size_bytes: 2816445
                    updated_at: '2021-04-09T23:54:25Z'
                    tags:
                      - v1
                      - v2
                    blobs:
                      - digest: sha256:14119a10abf4669e8cdbdff324a9f9605d99697215a0d21c360fe8dfa8471bab
                        compressed_size_bytes: 1471
                      - digest: sha256:a0d0a0d46f8b52473982a3c466318f479767577551a53ffc9074c9fa7035982e
                        compressed_size_byte: 2814446
                      - digest: sha256:69704ef328d05a9f806b6b8502915e6a0a4faa4d72018dc42343f511490daf8a
                        compressed_size_bytes: 528
              meta:
                total: 5
              links:
                pages:
                  next: https://api.digitalocean.com/v2/registry/example/repositoriesV2?page=2&page_token=JPZmZzZXQiOjB9&per_page=1
                  last: https://api.digitalocean.com/v2/registry/example/repositoriesV2?page=5&per_page=1
    bad_request:
      description: There was an error parsing the request body.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: bad_request
            message: error parsing request body
            request_id: 4851a473-1621-42ea-b2f9-5071c0ea8414
    repository_tags:
      description: The response body will be a JSON object with a key of `tags`. This will be set to an array containing objects each representing a tag.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  tags:
                    type: array
                    items:
                      $ref: '#/components/schemas/repository_tag'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              tags:
                - registry_name: example
                  repository: repo-1
                  tag: latest
                  manifest_digest: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
                  compressed_size_bytes: 2803255
                  size_bytes: 5861888
                  updated_at: '2020-04-09T23:54:25Z'
              meta:
                total: 1
    repository_manifests:
      description: The response body will be a JSON object with a key of `manifests`. This will be set to an array containing objects each representing a manifest.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  manifests:
                    type: array
                    items:
                      $ref: '#/components/schemas/repository_manifest'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              manifests:
                - digest: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
                  registry_name: example
                  repository: repo-1
                  compressed_size_bytes: 1972332
                  size_bytes: 2816445
                  updated_at: '2021-04-09T23:54:25Z'
                  tags:
                    - v1
                    - v2
                  blobs:
                    - digest: sha256:14119a10abf4669e8cdbdff324a9f9605d99697215a0d21c360fe8dfa8471bab
                      compressed_size_bytes: 1471
                    - digest: sha256:a0d0a0d46f8b52473982a3c466318f479767577551a53ffc9074c9fa7035982e
                      compressed_size_byte: 2814446
                    - digest: sha256:69704ef328d05a9f806b6b8502915e6a0a4faa4d72018dc42343f511490daf8a
                      compressed_size_bytes: 528
              meta:
                total: 3
              links:
                pages:
                  first: https://api.digitalocean.com/v2/registry/example/repositories/repo-1/digests?page=1&per_page=1
                  prev: https://api.digitalocean.com/v2/registry/example/repositories/repo-1/digests?page=1&per_page=1
                  next: https://api.digitalocean.com/v2/registry/example/repositories/repo-1/digests?page=3&per_page=1
                  last: https://api.digitalocean.com/v2/registry/example/repositories/repo-1/digests?page=3&per_page=1
    conflict:
      description: The request could not be completed due to a conflict.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: conflict
            message: The request could not be completed due to a conflict.
    registry_info:
      description: The response will be a JSON object with the key `registry` containing information about your registry.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              registry:
                $ref: '#/components/schemas/registry'
            type: object
    registries_precondition_fail:
      description: There are more than one registries in the DO account.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: precondition_failed
            message: |-
              This API is not supported if you have created multiple registries. Please use 
              ‘/v2/registries/{registry_name}’ instead. Refer to 
              https://docs.digitalocean.com/reference/api/digitalocean/#tag/Container-Registry for more info.
    registries_over_limit:
      description: There are more than one registries in the DO account.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: precondition_failed
            message: 'registry is not eligible for tier because: [OverRegistryLimit]'
    all_repositories:
      description: The response body will be a JSON object with a key of `repositories`. This will be set to an array containing objects each representing a repository.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/repository'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              repositories:
                - registry_name: example
                  name: repo-1
                  latest_tag:
                    registry_name: example
                    repository: repo-1
                    tag: latest
                    manifest_digest: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
                    compressed_size_bytes: 2803255
                    size_bytes: 5861888
                    updated_at: '2020-04-09T23:54:25Z'
                  tag_count: 1
              meta:
                total: 1
  parameters:
    registry_name:
      in: path
      name: registry_name
      description: The name of a container registry.
      required: true
      schema:
        type: string
      example: example
    per_page:
      in: query
      name: per_page
      required: false
      description: Number of items returned per page
      schema:
        type: integer
        minimum: 1
        default: 20
        maximum: 200
      example: 2
    page:
      in: query
      name: page
      required: false
      description: Which 'page' of paginated results to return.
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1
    garbage_collection_uuid:
      in: path
      name: garbage_collection_uuid
      description: The UUID of a garbage collection run.
      required: true
      schema:
        type: string
      example: eff0feee-49c7-4e8f-ba5c-a320c109c8a8
    token_pagination_page:
      in: query
      name: page
      required: false
      description: Which 'page' of paginated results to return. Ignored when 'page_token' is provided.
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1
    token_pagination_page_token:
      in: query
      name: page_token
      required: false
      description: Token to retrieve of the next or previous set of results more quickly than using 'page'.
      schema:
        type: string
      example: eyJUb2tlbiI6IkNnZGpiMjlz
    registry_repository_name:
      in: path
      name: repository_name
      description: The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`.
      required: true
      schema:
        type: string
      example: repo-1
    registry_repository_tag:
      in: path
      name: repository_tag
      description: The name of a container registry repository tag.
      required: true
      schema:
        type: string
      example: 06a447a
    registry_manifest_digest:
      in: path
      name: manifest_digest
      description: The manifest digest of a container registry repository tag.
      required: true
      schema:
        type: string
      example: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221
    registry_expiry_seconds:
      in: query
      name: expiry_seconds
      required: false
      description: The duration in seconds that the returned registry credentials will be valid. If not set or 0, the credentials will not expire.
      schema:
        type: integer
        minimum: 0
        default: 0
      example: 3600
    registry_read_write:
      in: query
      name: read_write
      required: false
      description: By default, the registry credentials allow for read-only access. Set this query parameter to `true` to obtain read-write credentials.
      schema:
        type: boolean
        default: false
      example: true
  headers:
    ratelimit-limit:
      schema:
        type: integer
      example: 5000
      description: The default limit on number of requests that can be made per hour and per minute. Current rate limits are 5000 requests per hour and 250 requests per minute.
    ratelimit-remaining:
      schema:
        type: integer
      example: 4816
      description: The number of requests in your hourly quota that remain before you hit your request limit. See https://developers.digitalocean.com/documentation/v2/#rate-limit for information about how requests expire.
    ratelimit-reset:
      schema:
        type: integer
      example: 1444931833
      description: The time when the oldest request will expire. The value is given in Unix epoch time. See https://developers.digitalocean.com/documentation/v2/#rate-limit for information about how requests expire.
  x-stackQL-resources:
    registries:
      id: digitalocean.container_registry.registries
      name: registries
      title: Registries
      methods:
        registries_list:
          operation:
            $ref: '#/paths/~1v2~1registries/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.registries
        registries_create:
          operation:
            $ref: '#/paths/~1v2~1registries/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        registries_get:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.registry
        registries_delete:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        registries_validate_name:
          operation:
            $ref: '#/paths/~1v2~1registries~1validate-name/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        registry_get_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.registry
        registry_create_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        registry_delete_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        registry_validate_name_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1validate-name/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/registries/methods/registries_get'
          - $ref: '#/components/x-stackQL-resources/registries/methods/registries_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/registries/methods/registries_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/registries/methods/registries_delete'
        replace: []
    docker_credentials:
      id: digitalocean.container_registry.docker_credentials
      name: docker_credentials
      title: Docker Credentials
      methods:
        registries_get_docker_credentials:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}~1docker-credentials/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.auths
        registry_get_docker_credentials_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1docker-credentials/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.auths
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/docker_credentials/methods/registries_get_docker_credentials'
        insert: []
        update: []
        delete: []
        replace: []
    subscriptions:
      id: digitalocean.container_registry.subscriptions
      name: subscriptions
      title: Subscriptions
      methods:
        registries_get_subscription:
          operation:
            $ref: '#/paths/~1v2~1registries~1subscription/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.subscription
        registries_update_subscription:
          operation:
            $ref: '#/paths/~1v2~1registries~1subscription/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        registry_get_subscription_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1subscription/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.subscription
        registry_update_subscription_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1subscription/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/subscriptions/methods/registries_get_subscription'
        insert:
          - $ref: '#/components/x-stackQL-resources/subscriptions/methods/registries_update_subscription'
        update: []
        delete: []
        replace: []
    options:
      id: digitalocean.container_registry.options
      name: options
      title: Options
      methods:
        registries_get_options:
          operation:
            $ref: '#/paths/~1v2~1registries~1options/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.options
        registry_get_options_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1options/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.options
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/options/methods/registries_get_options'
        insert: []
        update: []
        delete: []
        replace: []
    active_garbage_collection:
      id: digitalocean.container_registry.active_garbage_collection
      name: active_garbage_collection
      title: Active Garbage Collection
      methods:
        registries_get_garbage_collection:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}~1garbage-collection/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.garbage_collection
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/active_garbage_collection/methods/registries_get_garbage_collection'
        insert: []
        update: []
        delete: []
        replace: []
    garbage_collections:
      id: digitalocean.container_registry.garbage_collections
      name: garbage_collections
      title: Garbage Collections
      methods:
        registries_run_garbage_collection:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}~1garbage-collection/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        registries_list_garbage_collections:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}~1garbage-collections/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.garbage_collections
        registries_update_garbage_collection:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}~1garbage-collection~1{garbage_collection_uuid}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        registry_run_garbage_collection_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1{registry_name}~1garbage-collection/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        registry_get_garbage_collection_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1{registry_name}~1garbage-collection/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        registry_list_garbage_collections_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1{registry_name}~1garbage-collections/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.garbage_collections
        registry_update_garbage_collection_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1{registry_name}~1garbage-collection~1{garbage_collection_uuid}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/garbage_collections/methods/registries_list_garbage_collections'
        insert: []
        update: []
        delete: []
        replace:
          - $ref: '#/components/x-stackQL-resources/garbage_collections/methods/registries_update_garbage_collection'
    repositories:
      id: digitalocean.container_registry.repositories
      name: repositories
      title: Repositories
      methods:
        registries_list_repositories_v2:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}~1repositoriesV2/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.repositories
        registries_delete_repository:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}~1repositories~1{repository_name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        registry_list_repositories_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1{registry_name}~1repositories/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.repositories
        registry_list_repositories_v2_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1{registry_name}~1repositoriesV2/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.repositories
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/registries_list_repositories_v2'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/registries_delete_repository'
        replace: []
    repository_tags:
      id: digitalocean.container_registry.repository_tags
      name: repository_tags
      title: Repository Tags
      methods:
        registries_list_repository_tags:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}~1repositories~1{repository_name}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.tags
        registries_delete_repository_tag:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}~1repositories~1{repository_name}~1tags~1{repository_tag}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        registry_list_repository_tags_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1{registry_name}~1repositories~1{repository_name}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.tags
        registry_delete_repository_tag_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1{registry_name}~1repositories~1{repository_name}~1tags~1{repository_tag}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repository_tags/methods/registries_list_repository_tags'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/repository_tags/methods/registries_delete_repository_tag'
        replace: []
    repository_manifests:
      id: digitalocean.container_registry.repository_manifests
      name: repository_manifests
      title: Repository Manifests
      methods:
        registries_list_repository_manifests:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}~1repositories~1{repository_name}~1digests/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.manifests
        registries_delete_repository_manifest:
          operation:
            $ref: '#/paths/~1v2~1registries~1{registry_name}~1repositories~1{repository_name}~1digests~1{manifest_digest}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        registry_list_repository_manifests_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1{registry_name}~1repositories~1{repository_name}~1digests/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.manifests
        registry_delete_repository_manifest_legacy:
          operation:
            $ref: '#/paths/~1v2~1registry~1{registry_name}~1repositories~1{repository_name}~1digests~1{manifest_digest}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repository_manifests/methods/registries_list_repository_manifests'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/repository_manifests/methods/registries_delete_repository_manifest'
        replace: []
servers:
  - url: https://api.digitalocean.com
