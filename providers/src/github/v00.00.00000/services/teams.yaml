paths:
  /organizations/{org}/team/{team_slug}/external-groups:
    get:
      summary: List a connection between an external group and a team
      description: |-
        Lists a connection between a team and an external group.

        You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
      tags:
        - teams
      operationId: teams/list-linked-external-idp-groups-to-team-for-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-external-idp-group-team-connection
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external-groups'
              examples:
                default:
                  $ref: '#/components/examples/external-groups'
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: true
        category: teams
        subcategory: external-groups
  /orgs/{org}/external-group/{group_id}:
    get:
      summary: Get an external group
      description: |-
        Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.

        You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
      tags:
        - teams
      operationId: teams/external-idp-group-info-for-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#external-idp-group-info-for-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/group-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external-group'
              examples:
                default:
                  $ref: '#/components/examples/external-group'
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: true
        category: teams
        subcategory: external-groups
  /orgs/{org}/external-groups:
    get:
      summary: List external groups in an organization
      description: |-
        Lists external groups available in an organization. You can query the groups using the `display_name` parameter, only groups with a `group_name` containing the text provided in the `display_name` parameter will be returned.  You can also limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."

        You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
      tags:
        - teams
      operationId: teams/list-external-idp-groups-for-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-external-idp-groups-for-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/per-page'
        - name: page
          description: Page token
          in: query
          schema:
            type: integer
        - name: display_name
          description: Limits the list to groups containing the text in the group name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external-groups'
              examples:
                default:
                  $ref: '#/components/examples/external-groups'
          headers:
            Link:
              example: <https://api.github.com/resource?per_page=2&page=url-encoded-next-page-token>; rel="next"
              schema:
                type: string
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: true
        category: teams
        subcategory: external-groups
  /orgs/{org}/team-sync/groups:
    get:
      summary: List IdP groups for an organization
      description: |-
        Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

        List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
      tags:
        - teams
      operationId: teams/list-idp-groups-for-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-idp-groups-for-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/per-page'
        - name: page
          description: Page token
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-mapping'
              examples:
                default:
                  $ref: '#/components/examples/group-mapping-3'
          headers:
            Link:
              example: <https://api.github.com/resource?per_page=2&page=url-encoded-next-page-token>; rel="next"
              schema:
                type: string
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: true
        category: teams
        subcategory: team-sync
  /orgs/{org}/teams:
    get:
      summary: List teams
      description: Lists all teams in an organization that are visible to the authenticated user.
      tags:
        - teams
      operationId: teams/list
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-teams
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
    post:
      summary: Create a team
      description: |-
        To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."

        When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
      tags:
        - teams
      operationId: teams/create
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#create-a-team
      parameters:
        - $ref: '#/components/parameters/org'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the team.
                description:
                  type: string
                  description: The description of the team.
                maintainers:
                  type: array
                  description: List GitHub IDs for organization members who will become team maintainers.
                  items:
                    type: string
                repo_names:
                  type: array
                  description: The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
                  items:
                    type: string
                privacy:
                  type: string
                  description: |-
                    The level of privacy this team should have. The options are:  
                    **For a non-nested team:**  
                    \* `secret` - only visible to organization owners and members of this team.  
                    \* `closed` - visible to all members of this organization.  
                    Default: `secret`  
                    **For a parent or child team:**  
                    \* `closed` - visible to all members of this organization.  
                    Default for child team: `closed`
                  enum:
                    - secret
                    - closed
                permission:
                  type: string
                  description: |-
                    **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
                    \* `pull` - team members can pull, but not push to or administer newly-added repositories.  
                    \* `push` - team members can pull and push, but not administer newly-added repositories.
                  enum:
                    - pull
                    - push
                  default: pull
                parent_team_id:
                  type: integer
                  description: The ID of a team to set as the parent team.
              required:
                - name
            example:
              name: Justice League
              description: A great team
              permission: push
              privacy: closed
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
  /orgs/{org}/teams/{team_slug}:
    get:
      summary: Get a team by name
      description: |-
        Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
      tags:
        - teams
      operationId: teams/get-by-name
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#get-a-team-by-name
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
    patch:
      summary: Update a team
      description: |-
        To edit a team, the authenticated user must either be an organization owner or a team maintainer.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
      tags:
        - teams
      operationId: teams/update-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#update-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the team.
                description:
                  type: string
                  description: The description of the team.
                privacy:
                  type: string
                  description: |-
                    The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
                    **For a non-nested team:**  
                    \* `secret` - only visible to organization owners and members of this team.  
                    \* `closed` - visible to all members of this organization.  
                    **For a parent or child team:**  
                    \* `closed` - visible to all members of this organization.
                  enum:
                    - secret
                    - closed
                permission:
                  type: string
                  description: |-
                    **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
                    \* `pull` - team members can pull, but not push to or administer newly-added repositories.  
                    \* `push` - team members can pull and push, but not administer newly-added repositories.  
                    \* `admin` - team members can pull, push and administer newly-added repositories.
                  enum:
                    - pull
                    - push
                    - admin
                  default: pull
                parent_team_id:
                  type: integer
                  description: The ID of a team to set as the parent team.
                  nullable: true
            example:
              name: new team name
              description: new team description
              privacy: closed
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
    delete:
      summary: Delete a team
      description: |-
        To delete a team, the authenticated user must be an organization owner or team maintainer.

        If you are an organization owner, deleting a parent team will delete all of its child teams as well.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
      tags:
        - teams
      operationId: teams/delete-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#delete-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
  /orgs/{org}/teams/{team_slug}/discussions:
    get:
      summary: List discussions
      description: |-
        List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
      tags:
        - teams
      operationId: teams/list-discussions-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-discussions
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
        - name: pinned
          in: query
          required: false
          description: Pinned discussions only filter
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussions
    post:
      summary: Create a discussion
      description: |-
        Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
      tags:
        - teams
      operationId: teams/create-discussion-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#create-a-discussion
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The discussion post's title.
                body:
                  type: string
                  description: The discussion post's body text.
                private:
                  type: boolean
                  description: Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
                  default: false
              required:
                - title
                - body
            example:
              title: Our first team post
              body: Hi! This is an area for us to collaborate as a team.
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussions
  /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}:
    get:
      summary: Get a discussion
      description: |-
        Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
      tags:
        - teams
      operationId: teams/get-discussion-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#get-a-discussion
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussions
    patch:
      summary: Update a discussion
      description: |-
        Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
      tags:
        - teams
      operationId: teams/update-discussion-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#update-a-discussion
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The discussion post's title.
                body:
                  type: string
                  description: The discussion post's body text.
            example:
              title: Welcome to our first team post
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussions
    delete:
      summary: Delete a discussion
      description: |-
        Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
      tags:
        - teams
      operationId: teams/delete-discussion-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#delete-a-discussion
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussions
  /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments:
    get:
      summary: List discussion comments
      description: |-
        List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
      tags:
        - teams
      operationId: teams/list-discussion-comments-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-discussion-comments
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussion-comments
    post:
      summary: Create a discussion comment
      description: |-
        Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
      tags:
        - teams
      operationId: teams/create-discussion-comment-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#create-a-discussion-comment
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The discussion comment's body text.
              required:
                - body
            example:
              body: Do you like apples?
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussion-comments
  /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}:
    get:
      summary: Get a discussion comment
      description: |-
        Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
      tags:
        - teams
      operationId: teams/get-discussion-comment-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#get-a-discussion-comment
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussion-comments
    patch:
      summary: Update a discussion comment
      description: |-
        Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
      tags:
        - teams
      operationId: teams/update-discussion-comment-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#update-a-discussion-comment
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The discussion comment's body text.
              required:
                - body
            example:
              body: Do you like pineapples?
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussion-comments
    delete:
      summary: Delete a discussion comment
      description: |-
        Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
      tags:
        - teams
      operationId: teams/delete-discussion-comment-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#delete-a-discussion-comment
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussion-comments
  /orgs/{org}/teams/{team_slug}/external-groups:
    patch:
      summary: Update the connection between an external group and a team
      description: |-
        Creates a connection between a team and an external group.  Only one external group can be linked to a team.

        You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
      tags:
        - teams
      operationId: teams/link-external-idp-group-to-team-for-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#link-external-idp-group-team-connection
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: integer
                  description: External Group Id
                  example: 1
              required:
                - group_id
            example:
              group_id: 123
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external-group'
              examples:
                default:
                  $ref: '#/components/examples/external-group'
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: false
        category: teams
        subcategory: external-groups
    delete:
      summary: Remove the connection between an external group and a team
      description: |-
        Deletes a connection between a team and an external group.

        You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      tags:
        - teams
      operationId: teams/unlink-external-idp-group-from-team-for-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#unlink-external-idp-group-team-connection
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: false
        category: teams
        subcategory: external-groups
  /orgs/{org}/teams/{team_slug}/invitations:
    get:
      summary: List pending team invitations
      description: |-
        The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
      tags:
        - teams
      operationId: teams/list-pending-invitations-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-pending-team-invitations
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/organization-invitation'
              examples:
                default:
                  $ref: '#/components/examples/organization-invitation-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: members
  /orgs/{org}/teams/{team_slug}/members:
    get:
      summary: List team members
      description: |-
        Team members will include the members of child teams.

        To list members in a team, the team must be visible to the authenticated user.
      tags:
        - teams
      operationId: teams/list-members-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-team-members
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - name: role
          description: |-
            Filters members returned by their role in the team. Can be one of:  
            \* `member` - normal members of the team.  
            \* `maintainer` - team maintainers.  
            \* `all` - all members of the team.
          in: query
          required: false
          schema:
            type: string
            enum:
              - member
              - maintainer
              - all
            default: all
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: members
  /orgs/{org}/teams/{team_slug}/memberships/{username}:
    get:
      summary: Get team membership for a user
      description: |-
        Team members will include the members of child teams.

        To get a user's membership with a team, the team must be visible to the authenticated user.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.

        **Note:**
        The response contains the `state` of the membership and the member's `role`.

        The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
      tags:
        - teams
      operationId: teams/get-membership-for-user-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-membership'
              examples:
                response-if-user-is-a-team-maintainer:
                  $ref: '#/components/examples/team-membership-response-if-user-is-a-team-maintainer'
        '404':
          description: if user has no team membership
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: members
    put:
      summary: Add or update team membership for a user
      description: |-
        Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

        Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.

        **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

        An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.

        If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
      tags:
        - teams
      operationId: teams/add-or-update-membership-for-user-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/username'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: |-
                    The role that this user should have in the team. Can be one of:  
                    \* `member` - a normal member of the team.  
                    \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
                  enum:
                    - member
                    - maintainer
                  default: member
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-membership'
              examples:
                response-if-users-membership-with-team-is-now-pending:
                  $ref: '#/components/examples/team-membership-response-if-users-membership-with-team-is-now-pending'
        '403':
          description: Forbidden if team synchronization is set up
        '422':
          description: Unprocessable Entity if you attempt to add an organization to a team
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: members
    delete:
      summary: Remove team membership for a user
      description: |-
        Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

        To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.

        **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
      tags:
        - teams
      operationId: teams/remove-membership-for-user-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '403':
          description: Forbidden if team synchronization is set up
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: members
  /orgs/{org}/teams/{team_slug}/projects:
    get:
      summary: List team projects
      description: |-
        Lists the organization projects for a team.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
      tags:
        - teams
      operationId: teams/list-projects-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-team-projects
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-project'
              examples:
                default:
                  $ref: '#/components/examples/team-project-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
  /orgs/{org}/teams/{team_slug}/projects/{project_id}:
    get:
      summary: Check team permissions for a project
      description: |-
        Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      tags:
        - teams
      operationId: teams/check-permissions-for-project-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/project-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-project'
              examples:
                default:
                  $ref: '#/components/examples/team-project'
        '404':
          description: Not Found if project is not managed by this team
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
    put:
      summary: Add or update team project permissions
      description: |-
        Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      tags:
        - teams
      operationId: teams/add-or-update-project-permissions-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/project-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  description: |-
                    The permission to grant to the team for this project. Can be one of:  
                    \* `read` - team members can read, but not write to or administer this project.  
                    \* `write` - team members can read and write, but not administer this project.  
                    \* `admin` - team members can read, write and administer this project.  
                    Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
                  enum:
                    - read
                    - write
                    - admin
              nullable: true
      responses:
        '204':
          description: Response
        '403':
          description: Forbidden if the project is not owned by the organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  documentation_url:
                    type: string
              examples:
                response-if-the-project-is-not-owned-by-the-organization:
                  value:
                    message: Must have admin rights to Repository.
                    documentation_url: https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
    delete:
      summary: Remove a project from a team
      description: |-
        Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      tags:
        - teams
      operationId: teams/remove-project-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/project-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
  /orgs/{org}/teams/{team_slug}/repos:
    get:
      summary: List team repositories
      description: |-
        Lists a team's repositories visible to the authenticated user.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
      tags:
        - teams
      operationId: teams/list-repos-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-team-repositories
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
  /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}:
    get:
      summary: Check team permissions for a repository
      description: |-
        Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.

        You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.

        If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      tags:
        - teams
      operationId: teams/check-permissions-for-repo-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Alternative response with repository permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-repository'
              examples:
                alternative-response-with-repository-permissions:
                  $ref: '#/components/examples/team-repository-alternative-response-with-repository-permissions'
        '204':
          description: Response if team has permission for the repository. This is the response when the repository media type hasn't been provded in the Accept header.
        '404':
          description: Not Found if team does not have permission for the repository
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
    put:
      summary: Add or update team repository permissions
      description: |-
        To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.

        For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
      tags:
        - teams
      operationId: teams/add-or-update-repo-permissions-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  description: |-
                    The permission to grant the team on this repository. Can be one of:  
                    \* `pull` - team members can pull, but not push to or administer this repository.  
                    \* `push` - team members can pull and push, but not administer this repository.  
                    \* `admin` - team members can pull, push and administer this repository.  
                    \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.  
                    \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  
                    \* custom repository role name - A custom repository role if the owning organization has defined any.  
                      
                    If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
                  enum:
                    - pull
                    - push
                    - admin
                    - maintain
                    - triage
                  default: push
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
    delete:
      summary: Remove a repository from a team
      description: |-
        If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      tags:
        - teams
      operationId: teams/remove-repo-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
  /orgs/{org}/teams/{team_slug}/team-sync/group-mappings:
    get:
      summary: List IdP groups for a team
      description: |-
        Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

        List IdP groups connected to a team on GitHub.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
      tags:
        - teams
      operationId: teams/list-idp-groups-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-mapping'
              examples:
                default:
                  $ref: '#/components/examples/group-mapping-3'
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: false
        category: teams
        subcategory: team-sync
    patch:
      summary: Create or update IdP group connections
      description: |-
        Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

        Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
      tags:
        - teams
      operationId: teams/create-or-update-idp-group-connections-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groups:
                  type: array
                  description: The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
                  items:
                    type: object
                    properties:
                      group_id:
                        type: string
                        description: ID of the IdP group.
                      group_name:
                        type: string
                        description: Name of the IdP group.
                      group_description:
                        type: string
                        description: Description of the IdP group.
                    required:
                      - group_id
                      - group_name
                      - group_description
              additionalProperties: false
            example:
              groups:
                - group_id: '123'
                  group_name: Octocat admins
                  group_description: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-mapping'
              examples:
                default:
                  $ref: '#/components/examples/group-mapping'
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: false
        category: teams
        subcategory: team-sync
  /orgs/{org}/teams/{team_slug}/teams:
    get:
      summary: List child teams
      description: |-
        Lists the child teams of the team specified by `{team_slug}`.

        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
      tags:
        - teams
      operationId: teams/list-child-in-org
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-child-teams
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: if child teams exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                response-if-child-teams-exist:
                  $ref: '#/components/examples/team-items-response-if-child-teams-exist'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: null
  /teams/{team_id}:
    get:
      summary: Get a team (Legacy)
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.'
      tags:
        - teams
      operationId: teams/get-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#get-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
    patch:
      summary: Update a team (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.

        To edit a team, the authenticated user must either be an organization owner or a team maintainer.

        **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
      tags:
        - teams
      operationId: teams/update-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#update-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the team.
                description:
                  type: string
                  description: The description of the team.
                privacy:
                  type: string
                  description: |-
                    The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
                    **For a non-nested team:**  
                    \* `secret` - only visible to organization owners and members of this team.  
                    \* `closed` - visible to all members of this organization.  
                    **For a parent or child team:**  
                    \* `closed` - visible to all members of this organization.
                  enum:
                    - secret
                    - closed
                permission:
                  type: string
                  description: |-
                    **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
                    \* `pull` - team members can pull, but not push to or administer newly-added repositories.  
                    \* `push` - team members can pull and push, but not administer newly-added repositories.  
                    \* `admin` - team members can pull, push and administer newly-added repositories.
                  enum:
                    - pull
                    - push
                    - admin
                  default: pull
                parent_team_id:
                  type: integer
                  description: The ID of a team to set as the parent team.
                  nullable: true
              required:
                - name
            example:
              name: new team name
              description: new team description
              privacy: closed
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
    delete:
      summary: Delete a team (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.

        To delete a team, the authenticated user must be an organization owner or team maintainer.

        If you are an organization owner, deleting a parent team will delete all of its child teams as well.
      tags:
        - teams
      operationId: teams/delete-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#delete-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
  /teams/{team_id}/discussions:
    get:
      summary: List discussions (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.

        List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      tags:
        - teams
      operationId: teams/list-discussions-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-discussions-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussions
      deprecated: true
    post:
      summary: Create a discussion (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.

        Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      tags:
        - teams
      operationId: teams/create-discussion-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#create-a-discussion-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The discussion post's title.
                body:
                  type: string
                  description: The discussion post's body text.
                private:
                  type: boolean
                  description: Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
                  default: false
              required:
                - title
                - body
            example:
              title: Our first team post
              body: Hi! This is an area for us to collaborate as a team.
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussions
      deprecated: true
  /teams/{team_id}/discussions/{discussion_number}:
    get:
      summary: Get a discussion (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.

        Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      tags:
        - teams
      operationId: teams/get-discussion-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#get-a-discussion-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussions
      deprecated: true
    patch:
      summary: Update a discussion (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.

        Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      tags:
        - teams
      operationId: teams/update-discussion-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#update-a-discussion-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The discussion post's title.
                body:
                  type: string
                  description: The discussion post's body text.
            example:
              title: Welcome to our first team post
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussions
      deprecated: true
    delete:
      summary: Delete a discussion (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.

        Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      tags:
        - teams
      operationId: teams/delete-discussion-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#delete-a-discussion-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussions
      deprecated: true
  /teams/{team_id}/discussions/{discussion_number}/comments:
    get:
      summary: List discussion comments (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.

        List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      tags:
        - teams
      operationId: teams/list-discussion-comments-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-discussion-comments-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussion-comments
      deprecated: true
    post:
      summary: Create a discussion comment (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.

        Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      tags:
        - teams
      operationId: teams/create-discussion-comment-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#create-a-discussion-comment-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The discussion comment's body text.
              required:
                - body
            example:
              body: Do you like apples?
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussion-comments
      deprecated: true
  /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}:
    get:
      summary: Get a discussion comment (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.

        Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      tags:
        - teams
      operationId: teams/get-discussion-comment-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#get-a-discussion-comment-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussion-comments
      deprecated: true
    patch:
      summary: Update a discussion comment (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.

        Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      tags:
        - teams
      operationId: teams/update-discussion-comment-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#update-a-discussion-comment-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The discussion comment's body text.
              required:
                - body
            example:
              body: Do you like pineapples?
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussion-comments
      deprecated: true
    delete:
      summary: Delete a discussion comment (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.

        Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      tags:
        - teams
      operationId: teams/delete-discussion-comment-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#delete-a-discussion-comment-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussion-comments
      deprecated: true
  /teams/{team_id}/invitations:
    get:
      summary: List pending team invitations (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.

        The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
      tags:
        - teams
      operationId: teams/list-pending-invitations-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-pending-team-invitations-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/organization-invitation'
              examples:
                default:
                  $ref: '#/components/examples/organization-invitation-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
  /teams/{team_id}/members:
    get:
      summary: List team members (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.

        Team members will include the members of child teams.
      tags:
        - teams
      operationId: teams/list-members-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-team-members-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - name: role
          description: |-
            Filters members returned by their role in the team. Can be one of:  
            \* `member` - normal members of the team.  
            \* `maintainer` - team maintainers.  
            \* `all` - all members of the team.
          in: query
          required: false
          schema:
            type: string
            enum:
              - member
              - maintainer
              - all
            default: all
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
  /teams/{team_id}/members/{username}:
    get:
      summary: Get team member (Legacy)
      description: |-
        The "Get team member" endpoint (described below) is deprecated.

        We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.

        To list members in a team, the team must be visible to the authenticated user.
      tags:
        - teams
      operationId: teams/get-member-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#get-team-member-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: if user is a member
        '404':
          description: if user is not a member
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
    put:
      summary: Add team member (Legacy)
      description: |-
        The "Add team member" endpoint (described below) is deprecated.

        We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.

        Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

        To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.

        **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

        Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      tags:
        - teams
      operationId: teams/add-member-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#add-team-member-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Not Found if team synchronization is set up
        '422':
          description: Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
    delete:
      summary: Remove team member (Legacy)
      description: |-
        The "Remove team member" endpoint (described below) is deprecated.

        We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.

        Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

        To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.

        **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      tags:
        - teams
      operationId: teams/remove-member-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#remove-team-member-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '404':
          description: Not Found if team synchronization is setup
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
  /teams/{team_id}/memberships/{username}:
    get:
      summary: Get team membership for a user (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.

        Team members will include the members of child teams.

        To get a user's membership with a team, the team must be visible to the authenticated user.

        **Note:**
        The response contains the `state` of the membership and the member's `role`.

        The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
      tags:
        - teams
      operationId: teams/get-membership-for-user-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-membership'
              examples:
                response-if-user-is-a-team-maintainer:
                  $ref: '#/components/examples/team-membership-response-if-user-is-a-team-maintainer'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
    put:
      summary: Add or update team membership for a user (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.

        Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

        If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.

        **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

        If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.

        If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
      tags:
        - teams
      operationId: teams/add-or-update-membership-for-user-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: |-
                    The role that this user should have in the team. Can be one of:  
                    \* `member` - a normal member of the team.  
                    \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
                  enum:
                    - member
                    - maintainer
                  default: member
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-membership'
              examples:
                response-if-users-membership-with-team-is-now-pending:
                  $ref: '#/components/examples/team-membership-response-if-users-membership-with-team-is-now-pending'
        '403':
          description: Forbidden if team synchronization is set up
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          description: Unprocessable Entity if you attempt to add an organization to a team
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
    delete:
      summary: Remove team membership for a user (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.

        Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

        To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.

        **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      tags:
        - teams
      operationId: teams/remove-membership-for-user-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '403':
          description: if team synchronization is set up
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
  /teams/{team_id}/projects:
    get:
      summary: List team projects (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.

        Lists the organization projects for a team.
      tags:
        - teams
      operationId: teams/list-projects-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#list-team-projects-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-project'
              examples:
                default:
                  $ref: '#/components/examples/team-project-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
  /teams/{team_id}/projects/{project_id}:
    get:
      summary: Check team permissions for a project (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.

        Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
      tags:
        - teams
      operationId: teams/check-permissions-for-project-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-project-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/project-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-project'
              examples:
                default:
                  $ref: '#/components/examples/team-project'
        '404':
          description: Not Found if project is not managed by this team
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
    put:
      summary: Add or update team project permissions (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.

        Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
      tags:
        - teams
      operationId: teams/add-or-update-project-permissions-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#add-or-update-team-project-permissions-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/project-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  description: |-
                    The permission to grant to the team for this project. Can be one of:  
                    \* `read` - team members can read, but not write to or administer this project.  
                    \* `write` - team members can read and write, but not administer this project.  
                    \* `admin` - team members can read, write and administer this project.  
                    Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
                  enum:
                    - read
                    - write
                    - admin
      responses:
        '204':
          description: Response
        '403':
          description: Forbidden if the project is not owned by the organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  documentation_url:
                    type: string
              examples:
                response-if-the-project-is-not-owned-by-the-organization:
                  value:
                    message: Must have admin rights to Repository.
                    documentation_url: https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
    delete:
      summary: Remove a project from a team (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.

        Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
      tags:
        - teams
      operationId: teams/remove-project-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#remove-a-project-from-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/project-id'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
        '415':
          $ref: '#/components/responses/preview_header_missing'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
  /teams/{team_id}/repos:
    get:
      summary: List team repositories (Legacy)
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.'
      tags:
        - teams
      operationId: teams/list-repos-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#list-team-repositories-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
  /teams/{team_id}/repos/{owner}/{repo}:
    get:
      summary: Check team permissions for a repository (Legacy)
      description: |-
        **Note**: Repositories inherited through a parent team will also be checked.

        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.

        You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
      tags:
        - teams
      operationId: teams/check-permissions-for-repo-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Alternative response with extra repository information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-repository'
              examples:
                alternative-response-with-extra-repository-information:
                  $ref: '#/components/examples/team-repository-alternative-response-with-extra-repository-information'
        '204':
          description: Response if repository is managed by this team
        '404':
          description: Not Found if repository is not managed by this team
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
    put:
      summary: Add or update team repository permissions (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.

        To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.

        Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      tags:
        - teams
      operationId: teams/add-or-update-repo-permissions-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  description: |-
                    The permission to grant the team on this repository. Can be one of:  
                    \* `pull` - team members can pull, but not push to or administer this repository.  
                    \* `push` - team members can pull and push, but not administer this repository.  
                    \* `admin` - team members can pull, push and administer this repository.  
                      
                    If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
                  enum:
                    - pull
                    - push
                    - admin
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
    delete:
      summary: Remove a repository from a team (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.

        If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
      tags:
        - teams
      operationId: teams/remove-repo-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
  /teams/{team_id}/team-sync/group-mappings:
    get:
      summary: List IdP groups for a team (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.

        Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

        List IdP groups connected to a team on GitHub.
      tags:
        - teams
      operationId: teams/list-idp-groups-for-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-mapping'
              examples:
                default:
                  $ref: '#/components/examples/group-mapping-3'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: false
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: team-sync
      deprecated: true
    patch:
      summary: Create or update IdP group connections (Legacy)
      description: |-
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.

        Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

        Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
      tags:
        - teams
      operationId: teams/create-or-update-idp-group-connections-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groups:
                  type: array
                  description: The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
                  items:
                    type: object
                    properties:
                      group_id:
                        type: string
                        description: ID of the IdP group.
                      group_name:
                        type: string
                        description: Name of the IdP group.
                      group_description:
                        type: string
                        description: Description of the IdP group.
                      id:
                        type: string
                        example: '"caceab43fc9ffa20081c"'
                      name:
                        type: string
                        example: '"external-team-6c13e7288ef7"'
                      description:
                        type: string
                        example: '"moar cheese pleese"'
                    required:
                      - group_id
                      - group_name
                      - group_description
                synced_at:
                  type: string
                  example: '"I am not a timestamp"'
              required:
                - groups
            example:
              groups:
                - group_id: '123'
                  group_name: Octocat admins
                  description: The people who configure your octoworld.
                  group_description: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-mapping'
              examples:
                default:
                  $ref: '#/components/examples/group-mapping-2'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: false
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: team-sync
      deprecated: true
  /teams/{team_id}/teams:
    get:
      summary: List child teams (Legacy)
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.'
      tags:
        - teams
      operationId: teams/list-child-legacy
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams/#list-child-teams-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: if child teams exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                response-if-child-teams-exist:
                  $ref: '#/components/examples/team-items-response-if-child-teams-exist'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: null
      deprecated: true
  /user/teams:
    get:
      summary: List teams for the authenticated user
      description: List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
      tags:
        - teams
      operationId: teams/list-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/rest/reference/teams#list-teams-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: teams
        subcategory: null
components:
  schemas:
    external-groups:
      title: ExternalGroups
      description: A list of external groups available to be connected to a team
      type: object
      properties:
        groups:
          description: An array of external groups available to be mapped to a team
          example:
            - group_id: 1
              group_name: group-azuread-test
              updated_at: 2021-01-03 22:27:15:000 -700
            - group_id: 2
              group_name: group-azuread-test2
              updated_at: 2021-06-03 22:27:15:000 -700
          type: array
          items:
            type: object
            required:
              - group_id
              - group_name
              - updated_at
            properties:
              group_id:
                description: The internal ID of the group
                example: 1
                type: integer
              group_name:
                description: The display name of the group
                example: group-azuread-test
                type: string
              updated_at:
                description: The time of the last update for this group
                example: 2019-06-03 22:27:15:000 -700
                type: string
    external-group:
      title: ExternalGroup
      description: Information about an external group's usage and its members
      type: object
      required:
        - group_id
        - group_name
        - teams
        - members
      properties:
        group_id:
          description: The internal ID of the group
          example: 1
          type: integer
        group_name:
          description: The display name for the group
          example: group-azuread-test
          type: string
        updated_at:
          description: The date when the group was last updated_at
          example: 2021-01-03 22:27:15:000 -700
          type: string
        teams:
          description: An array of teams linked to this group
          example:
            - team_id: 1
              team_name: team-test
            - team_id: 2
              team_name: team-test2
          type: array
          items:
            type: object
            required:
              - team_id
              - team_name
            properties:
              team_id:
                description: The id for a team
                example: 1
                type: integer
              team_name:
                description: The name of the team
                example: team-test
                type: string
        members:
          description: An array of external members linked to this group
          example:
            - member_id: 1
              member_login: mona-lisa_eocsaxrs
              member_name: Mona Lisa
              member_email: mona_lisa@github.com
            - member_id: 2
              member_login: octo-lisa_eocsaxrs
              member_name: Octo Lisa
              member_email: octo_lisa@github.com
          type: array
          items:
            type: object
            required:
              - member_id
              - member_login
              - member_name
              - member_email
            properties:
              member_id:
                description: The internal user ID of the identity
                example: 1
                type: integer
              member_login:
                description: The handle/login for the user
                example: mona-lisa_eocsaxrs
                type: string
              member_name:
                description: The user display name/profile name
                example: Mona Lisa
                type: string
              member_email:
                description: An email attached to a user
                example: mona_lisa@github.com
                type: string
    group-mapping:
      title: GroupMapping
      description: External Groups to be mapped to a team for membership
      type: object
      properties:
        groups:
          description: Array of groups to be mapped to this team
          example:
            - group_id: 111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa
              group_name: saml-azuread-test
              group_description: A group of Developers working on AzureAD SAML SSO
            - group_id: 2bb2bb2b-bb22-22bb-2bb2-bb2bbb2bb2b2
              group_name: saml-azuread-test2
              group_description: Another group of Developers working on AzureAD SAML SSO
          type: array
          items:
            type: object
            required:
              - group_id
              - group_name
              - group_description
            properties:
              group_id:
                description: The ID of the group
                example: 111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa
                type: string
              group_name:
                description: The name of the group
                example: saml-azuread-test
                type: string
              group_description:
                description: a description of the group
                example: A group of Developers working on AzureAD SAML SSO
                type: string
              status:
                description: synchronization status for this group mapping
                example: unsynced
                type: string
              synced_at:
                description: the time of the last sync for this group-mapping
                example: 2019-06-03 22:27:15:000 -700
                type: string
                nullable: true
    team:
      title: Team
      description: Groups of organization members that gives permissions on specified repositories.
      type: object
      properties:
        id:
          type: integer
        node_id:
          type: string
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        privacy:
          type: string
        permission:
          type: string
        permissions:
          type: object
          properties:
            pull:
              type: boolean
            triage:
              type: boolean
            push:
              type: boolean
            maintain:
              type: boolean
            admin:
              type: boolean
          required:
            - pull
            - triage
            - push
            - maintain
            - admin
        url:
          type: string
          format: uri
        html_url:
          type: string
          format: uri
          example: https://github.com/orgs/rails/teams/core
        members_url:
          type: string
        repositories_url:
          type: string
          format: uri
        parent:
          $ref: '#/components/schemas/nullable-team-simple'
      required:
        - id
        - node_id
        - url
        - members_url
        - name
        - description
        - permission
        - html_url
        - repositories_url
        - slug
        - parent
    nullable-team-simple:
      title: Team Simple
      description: Groups of organization members that gives permissions on specified repositories.
      type: object
      properties:
        id:
          description: Unique identifier of the team
          type: integer
          example: 1
        node_id:
          type: string
          example: MDQ6VGVhbTE=
        url:
          description: URL for the team
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/1
        members_url:
          type: string
          example: https://api.github.com/organizations/1/team/1/members{/member}
        name:
          description: Name of the team
          type: string
          example: Justice League
        description:
          description: Description of the team
          type: string
          nullable: true
          example: A great team.
        permission:
          description: Permission that the team will have for its repositories
          type: string
          example: admin
        privacy:
          description: The level of privacy this team should have
          type: string
          example: closed
        html_url:
          type: string
          format: uri
          example: https://github.com/orgs/rails/teams/core
        repositories_url:
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/1/repos
        slug:
          type: string
          example: justice-league
        ldap_dn:
          description: Distinguished Name (DN) that team maps to within LDAP environment
          example: uid=example,ou=users,dc=github,dc=com
          type: string
      required:
        - id
        - node_id
        - url
        - members_url
        - name
        - description
        - permission
        - html_url
        - repositories_url
        - slug
      nullable: true
    basic-error:
      title: Basic Error
      description: Basic Error
      type: object
      properties:
        message:
          type: string
        documentation_url:
          type: string
        url:
          type: string
        status:
          type: string
    team-full:
      title: Full Team
      description: Groups of organization members that gives permissions on specified repositories.
      type: object
      properties:
        id:
          description: Unique identifier of the team
          example: 42
          type: integer
        node_id:
          type: string
          example: MDQ6VGVhbTE=
        url:
          description: URL for the team
          example: https://api.github.com/organizations/1/team/1
          type: string
          format: uri
        html_url:
          type: string
          format: uri
          example: https://github.com/orgs/rails/teams/core
        name:
          description: Name of the team
          example: Developers
          type: string
        slug:
          type: string
          example: justice-league
        description:
          type: string
          example: A great team.
          nullable: true
        privacy:
          description: The level of privacy this team should have
          type: string
          enum:
            - closed
            - secret
          example: closed
        permission:
          description: Permission that the team will have for its repositories
          example: push
          type: string
        members_url:
          type: string
          example: https://api.github.com/organizations/1/team/1/members{/member}
        repositories_url:
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/1/repos
        parent:
          $ref: '#/components/schemas/nullable-team-simple'
        members_count:
          type: integer
          example: 3
        repos_count:
          type: integer
          example: 10
        created_at:
          type: string
          format: date-time
          example: '2017-07-14T16:53:42Z'
        updated_at:
          type: string
          format: date-time
          example: '2017-08-17T12:37:15Z'
        organization:
          $ref: '#/components/schemas/organization-full'
        ldap_dn:
          description: Distinguished Name (DN) that team maps to within LDAP environment
          example: uid=example,ou=users,dc=github,dc=com
          type: string
      required:
        - id
        - node_id
        - url
        - members_url
        - name
        - description
        - permission
        - html_url
        - repositories_url
        - slug
        - created_at
        - updated_at
        - members_count
        - repos_count
        - organization
    organization-full:
      title: Organization Full
      description: Organization Full
      type: object
      properties:
        login:
          type: string
          example: github
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDEyOk9yZ2FuaXphdGlvbjE=
        url:
          type: string
          format: uri
          example: https://api.github.com/orgs/github
        repos_url:
          type: string
          format: uri
          example: https://api.github.com/orgs/github/repos
        events_url:
          type: string
          format: uri
          example: https://api.github.com/orgs/github/events
        hooks_url:
          type: string
          example: https://api.github.com/orgs/github/hooks
        issues_url:
          type: string
          example: https://api.github.com/orgs/github/issues
        members_url:
          type: string
          example: https://api.github.com/orgs/github/members{/member}
        public_members_url:
          type: string
          example: https://api.github.com/orgs/github/public_members{/member}
        avatar_url:
          type: string
          example: https://github.com/images/error/octocat_happy.gif
        description:
          type: string
          example: A great organization
          nullable: true
        name:
          type: string
          example: github
        company:
          type: string
          example: GitHub
        blog:
          type: string
          format: uri
          example: https://github.com/blog
        location:
          type: string
          example: San Francisco
        email:
          type: string
          format: email
          example: octocat@github.com
        twitter_username:
          type: string
          example: github
          nullable: true
        is_verified:
          type: boolean
          example: true
        has_organization_projects:
          type: boolean
          example: true
        has_repository_projects:
          type: boolean
          example: true
        public_repos:
          type: integer
          example: 2
        public_gists:
          type: integer
          example: 1
        followers:
          type: integer
          example: 20
        following:
          type: integer
          example: 0
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat
        created_at:
          type: string
          format: date-time
          example: '2008-01-14T04:33:35Z'
        type:
          type: string
          example: Organization
        total_private_repos:
          type: integer
          example: 100
        owned_private_repos:
          type: integer
          example: 100
        private_gists:
          type: integer
          example: 81
          nullable: true
        disk_usage:
          type: integer
          example: 10000
          nullable: true
        collaborators:
          type: integer
          example: 8
          nullable: true
        billing_email:
          type: string
          format: email
          example: org@example.com
          nullable: true
        plan:
          type: object
          properties:
            name:
              type: string
            space:
              type: integer
            private_repos:
              type: integer
            filled_seats:
              type: integer
            seats:
              type: integer
          required:
            - name
            - space
            - private_repos
        default_repository_permission:
          type: string
          nullable: true
        members_can_create_repositories:
          type: boolean
          example: true
          nullable: true
        two_factor_requirement_enabled:
          type: boolean
          example: true
          nullable: true
        members_allowed_repository_creation_type:
          type: string
          example: all
        members_can_create_public_repositories:
          type: boolean
          example: true
        members_can_create_private_repositories:
          type: boolean
          example: true
        members_can_create_internal_repositories:
          type: boolean
          example: true
        members_can_create_pages:
          type: boolean
          example: true
        members_can_create_public_pages:
          type: boolean
          example: true
        members_can_create_private_pages:
          type: boolean
          example: true
        members_can_fork_private_repositories:
          type: boolean
          example: false
          nullable: true
        updated_at:
          type: string
          format: date-time
      required:
        - login
        - url
        - id
        - node_id
        - repos_url
        - events_url
        - hooks_url
        - issues_url
        - members_url
        - public_members_url
        - avatar_url
        - description
        - html_url
        - has_organization_projects
        - has_repository_projects
        - public_repos
        - public_gists
        - followers
        - following
        - type
        - created_at
        - updated_at
    validation-error:
      title: Validation Error
      description: Validation Error
      type: object
      required:
        - message
        - documentation_url
      properties:
        message:
          type: string
        documentation_url:
          type: string
        errors:
          type: array
          items:
            type: object
            required:
              - code
            properties:
              resource:
                type: string
              field:
                type: string
              message:
                type: string
              code:
                type: string
              index:
                type: integer
              value:
                oneOf:
                  - type: string
                    nullable: true
                  - type: integer
                    nullable: true
                  - type: array
                    nullable: true
                    items:
                      type: string
    team-discussion:
      title: Team Discussion
      description: A team discussion is a persistent record of a free-form conversation within a team.
      type: object
      properties:
        author:
          $ref: '#/components/schemas/nullable-simple-user'
        body:
          description: The main text of the discussion.
          example: Please suggest improvements to our workflow in comments.
          type: string
        body_html:
          type: string
          example: <p>Hi! This is an area for us to collaborate as a team</p>
        body_version:
          description: The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
          example: 0307116bbf7ced493b8d8a346c650b71
          type: string
        comments_count:
          type: integer
          example: 0
        comments_url:
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/2343027/discussions/1/comments
        created_at:
          type: string
          format: date-time
          example: '2018-01-25T18:56:31Z'
        last_edited_at:
          type: string
          format: date-time
          nullable: true
        html_url:
          type: string
          format: uri
          example: https://github.com/orgs/github/teams/justice-league/discussions/1
        node_id:
          type: string
          example: MDE0OlRlYW1EaXNjdXNzaW9uMQ==
        number:
          description: The unique sequence number of a team discussion.
          example: 42
          type: integer
        pinned:
          description: Whether or not this discussion should be pinned for easy retrieval.
          example: true
          type: boolean
        private:
          description: Whether or not this discussion should be restricted to team members and organization administrators.
          example: true
          type: boolean
        team_url:
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/2343027
        title:
          description: The title of the discussion.
          example: How can we improve our workflow?
          type: string
        updated_at:
          type: string
          format: date-time
          example: '2018-01-25T18:56:31Z'
        url:
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/2343027/discussions/1
        reactions:
          $ref: '#/components/schemas/reaction-rollup'
      required:
        - author
        - body
        - body_html
        - body_version
        - comments_count
        - comments_url
        - created_at
        - last_edited_at
        - html_url
        - pinned
        - private
        - node_id
        - number
        - team_url
        - title
        - updated_at
        - url
    nullable-simple-user:
      title: Simple User
      description: Simple User
      type: object
      properties:
        name:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        login:
          type: string
          example: octocat
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDQ6VXNlcjE=
        avatar_url:
          type: string
          format: uri
          example: https://github.com/images/error/octocat_happy.gif
        gravatar_id:
          type: string
          example: 41d064eb2195891e12d0413f63227ea7
          nullable: true
        url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat
        followers_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/followers
        following_url:
          type: string
          example: https://api.github.com/users/octocat/following{/other_user}
        gists_url:
          type: string
          example: https://api.github.com/users/octocat/gists{/gist_id}
        starred_url:
          type: string
          example: https://api.github.com/users/octocat/starred{/owner}{/repo}
        subscriptions_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/subscriptions
        organizations_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/orgs
        repos_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/repos
        events_url:
          type: string
          example: https://api.github.com/users/octocat/events{/privacy}
        received_events_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/received_events
        type:
          type: string
          example: User
        site_admin:
          type: boolean
        starred_at:
          type: string
          example: '"2020-07-09T00:17:55Z"'
      required:
        - avatar_url
        - events_url
        - followers_url
        - following_url
        - gists_url
        - gravatar_id
        - html_url
        - id
        - node_id
        - login
        - organizations_url
        - received_events_url
        - repos_url
        - site_admin
        - starred_url
        - subscriptions_url
        - type
        - url
      nullable: true
    reaction-rollup:
      title: Reaction Rollup
      type: object
      properties:
        url:
          type: string
          format: uri
        total_count:
          type: integer
        '+1':
          type: integer
        '-1':
          type: integer
        laugh:
          type: integer
        confused:
          type: integer
        heart:
          type: integer
        hooray:
          type: integer
        eyes:
          type: integer
        rocket:
          type: integer
      required:
        - url
        - total_count
        - '+1'
        - '-1'
        - laugh
        - confused
        - heart
        - hooray
        - eyes
        - rocket
    team-discussion-comment:
      title: Team Discussion Comment
      description: A reply to a discussion within a team.
      type: object
      properties:
        author:
          $ref: '#/components/schemas/nullable-simple-user'
        body:
          description: The main text of the comment.
          example: I agree with this suggestion.
          type: string
        body_html:
          type: string
          example: <p>Do you like apples?</p>
        body_version:
          description: The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
          example: 0307116bbf7ced493b8d8a346c650b71
          type: string
        created_at:
          type: string
          format: date-time
          example: '2018-01-15T23:53:58Z'
        last_edited_at:
          type: string
          format: date-time
          nullable: true
        discussion_url:
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/2403582/discussions/1
        html_url:
          type: string
          format: uri
          example: https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
        node_id:
          type: string
          example: MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=
        number:
          description: The unique sequence number of a team discussion comment.
          example: 42
          type: integer
        updated_at:
          type: string
          format: date-time
          example: '2018-01-15T23:53:58Z'
        url:
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1
        reactions:
          $ref: '#/components/schemas/reaction-rollup'
      required:
        - author
        - body
        - body_html
        - body_version
        - created_at
        - last_edited_at
        - discussion_url
        - html_url
        - node_id
        - number
        - updated_at
        - url
    organization-invitation:
      title: Organization Invitation
      description: Organization Invitation
      type: object
      properties:
        id:
          type: integer
        login:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        role:
          type: string
        created_at:
          type: string
        failed_at:
          type: string
          nullable: true
        failed_reason:
          type: string
          nullable: true
        inviter:
          $ref: '#/components/schemas/simple-user'
        team_count:
          type: integer
        node_id:
          type: string
          example: '"MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"'
        invitation_teams_url:
          type: string
          example: '"https://api.github.com/organizations/16/invitations/1/teams"'
      required:
        - id
        - login
        - email
        - role
        - created_at
        - inviter
        - team_count
        - invitation_teams_url
        - node_id
    simple-user:
      title: Simple User
      description: Simple User
      type: object
      properties:
        name:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        login:
          type: string
          example: octocat
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDQ6VXNlcjE=
        avatar_url:
          type: string
          format: uri
          example: https://github.com/images/error/octocat_happy.gif
        gravatar_id:
          type: string
          example: 41d064eb2195891e12d0413f63227ea7
          nullable: true
        url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat
        followers_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/followers
        following_url:
          type: string
          example: https://api.github.com/users/octocat/following{/other_user}
        gists_url:
          type: string
          example: https://api.github.com/users/octocat/gists{/gist_id}
        starred_url:
          type: string
          example: https://api.github.com/users/octocat/starred{/owner}{/repo}
        subscriptions_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/subscriptions
        organizations_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/orgs
        repos_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/repos
        events_url:
          type: string
          example: https://api.github.com/users/octocat/events{/privacy}
        received_events_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/received_events
        type:
          type: string
          example: User
        site_admin:
          type: boolean
        starred_at:
          type: string
          example: '"2020-07-09T00:17:55Z"'
      required:
        - avatar_url
        - events_url
        - followers_url
        - following_url
        - gists_url
        - gravatar_id
        - html_url
        - id
        - node_id
        - login
        - organizations_url
        - received_events_url
        - repos_url
        - site_admin
        - starred_url
        - subscriptions_url
        - type
        - url
    team-membership:
      title: Team Membership
      description: Team Membership
      type: object
      properties:
        url:
          type: string
          format: uri
        role:
          description: The role of the user in the team.
          enum:
            - member
            - maintainer
          default: member
          example: member
          type: string
        state:
          description: The state of the user's membership in the team.
          type: string
          enum:
            - active
            - pending
      required:
        - role
        - state
        - url
    team-project:
      title: Team Project
      description: A team's access to a project.
      type: object
      properties:
        owner_url:
          type: string
        url:
          type: string
        html_url:
          type: string
        columns_url:
          type: string
        id:
          type: integer
        node_id:
          type: string
        name:
          type: string
        body:
          type: string
          nullable: true
        number:
          type: integer
        state:
          type: string
        creator:
          $ref: '#/components/schemas/simple-user'
        created_at:
          type: string
        updated_at:
          type: string
        organization_permission:
          description: The organization permission for this project. Only present when owner is an organization.
          type: string
        private:
          description: Whether the project is private or not. Only present when owner is an organization.
          type: boolean
        permissions:
          type: object
          properties:
            read:
              type: boolean
            write:
              type: boolean
            admin:
              type: boolean
          required:
            - read
            - write
            - admin
      required:
        - owner_url
        - url
        - html_url
        - columns_url
        - id
        - node_id
        - name
        - body
        - number
        - state
        - creator
        - created_at
        - updated_at
        - permissions
    minimal-repository:
      title: Minimal Repository
      description: Minimal Repository
      type: object
      properties:
        id:
          type: integer
          example: 1296269
        node_id:
          type: string
          example: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
        name:
          type: string
          example: Hello-World
        full_name:
          type: string
          example: octocat/Hello-World
        owner:
          $ref: '#/components/schemas/simple-user'
        private:
          type: boolean
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World
        description:
          type: string
          example: This your first repo!
          nullable: true
        fork:
          type: boolean
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World
        archive_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
        assignees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/assignees{/user}
        blobs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
        branches_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/branches{/branch}
        collaborators_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
        comments_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/comments{/number}
        commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/commits{/sha}
        compare_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
        contents_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/contents/{+path}
        contributors_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/contributors
        deployments_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/deployments
        downloads_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/downloads
        events_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/events
        forks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/forks
        git_commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
        git_refs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
        git_tags_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
        git_url:
          type: string
        issue_comment_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
        issue_events_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
        issues_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues{/number}
        keys_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
        labels_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/labels{/name}
        languages_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/languages
        merges_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/merges
        milestones_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/milestones{/number}
        notifications_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
        pulls_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/pulls{/number}
        releases_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/releases{/id}
        ssh_url:
          type: string
        stargazers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/stargazers
        statuses_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
        subscribers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscribers
        subscription_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscription
        tags_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/tags
        teams_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/teams
        trees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
        clone_url:
          type: string
        mirror_url:
          type: string
          nullable: true
        hooks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/hooks
        svn_url:
          type: string
        homepage:
          type: string
          nullable: true
        language:
          type: string
          nullable: true
        forks_count:
          type: integer
        stargazers_count:
          type: integer
        watchers_count:
          type: integer
        size:
          type: integer
        default_branch:
          type: string
        open_issues_count:
          type: integer
        is_template:
          type: boolean
        topics:
          type: array
          items:
            type: string
        has_issues:
          type: boolean
        has_projects:
          type: boolean
        has_wiki:
          type: boolean
        has_pages:
          type: boolean
        has_downloads:
          type: boolean
        archived:
          type: boolean
        disabled:
          type: boolean
        visibility:
          type: string
        pushed_at:
          type: string
          format: date-time
          example: '2011-01-26T19:06:43Z'
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
          nullable: true
        updated_at:
          type: string
          format: date-time
          example: '2011-01-26T19:14:43Z'
          nullable: true
        permissions:
          type: object
          properties:
            admin:
              type: boolean
            maintain:
              type: boolean
            push:
              type: boolean
            triage:
              type: boolean
            pull:
              type: boolean
        role_name:
          type: string
          example: admin
        template_repository:
          $ref: '#/components/schemas/nullable-repository'
        temp_clone_token:
          type: string
        delete_branch_on_merge:
          type: boolean
        subscribers_count:
          type: integer
        network_count:
          type: integer
        code_of_conduct:
          $ref: '#/components/schemas/code-of-conduct'
        license:
          type: object
          properties:
            key:
              type: string
            name:
              type: string
            spdx_id:
              type: string
            url:
              type: string
            node_id:
              type: string
          nullable: true
        forks:
          type: integer
          example: 0
        open_issues:
          type: integer
          example: 0
        watchers:
          type: integer
          example: 0
        allow_forking:
          type: boolean
      required:
        - archive_url
        - assignees_url
        - blobs_url
        - branches_url
        - collaborators_url
        - comments_url
        - commits_url
        - compare_url
        - contents_url
        - contributors_url
        - deployments_url
        - description
        - downloads_url
        - events_url
        - fork
        - forks_url
        - full_name
        - git_commits_url
        - git_refs_url
        - git_tags_url
        - hooks_url
        - html_url
        - id
        - node_id
        - issue_comment_url
        - issue_events_url
        - issues_url
        - keys_url
        - labels_url
        - languages_url
        - merges_url
        - milestones_url
        - name
        - notifications_url
        - owner
        - private
        - pulls_url
        - releases_url
        - stargazers_url
        - statuses_url
        - subscribers_url
        - subscription_url
        - tags_url
        - teams_url
        - trees_url
        - url
    nullable-repository:
      title: Repository
      description: A git repository
      type: object
      properties:
        id:
          description: Unique identifier of the repository
          example: 42
          type: integer
        node_id:
          type: string
          example: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
        name:
          description: The name of the repository.
          type: string
          example: Team Environment
        full_name:
          type: string
          example: octocat/Hello-World
        license:
          $ref: '#/components/schemas/nullable-license-simple'
        organization:
          $ref: '#/components/schemas/nullable-simple-user'
        forks:
          type: integer
        permissions:
          type: object
          properties:
            admin:
              type: boolean
            pull:
              type: boolean
            triage:
              type: boolean
            push:
              type: boolean
            maintain:
              type: boolean
          required:
            - admin
            - pull
            - push
        owner:
          $ref: '#/components/schemas/simple-user'
        private:
          description: Whether the repository is private or public.
          default: false
          type: boolean
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World
        description:
          type: string
          example: This your first repo!
          nullable: true
        fork:
          type: boolean
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World
        archive_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
        assignees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/assignees{/user}
        blobs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
        branches_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/branches{/branch}
        collaborators_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
        comments_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/comments{/number}
        commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/commits{/sha}
        compare_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
        contents_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/contents/{+path}
        contributors_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/contributors
        deployments_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/deployments
        downloads_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/downloads
        events_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/events
        forks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/forks
        git_commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
        git_refs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
        git_tags_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
        git_url:
          type: string
          example: git:github.com/octocat/Hello-World.git
        issue_comment_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
        issue_events_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
        issues_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues{/number}
        keys_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
        labels_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/labels{/name}
        languages_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/languages
        merges_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/merges
        milestones_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/milestones{/number}
        notifications_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
        pulls_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/pulls{/number}
        releases_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/releases{/id}
        ssh_url:
          type: string
          example: git@github.com:octocat/Hello-World.git
        stargazers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/stargazers
        statuses_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
        subscribers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscribers
        subscription_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscription
        tags_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/tags
        teams_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/teams
        trees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
        clone_url:
          type: string
          example: https://github.com/octocat/Hello-World.git
        mirror_url:
          type: string
          format: uri
          example: git:git.example.com/octocat/Hello-World
          nullable: true
        hooks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/hooks
        svn_url:
          type: string
          format: uri
          example: https://svn.github.com/octocat/Hello-World
        homepage:
          type: string
          format: uri
          example: https://github.com
          nullable: true
        language:
          type: string
          nullable: true
        forks_count:
          type: integer
          example: 9
        stargazers_count:
          type: integer
          example: 80
        watchers_count:
          type: integer
          example: 80
        size:
          type: integer
          example: 108
        default_branch:
          description: The default branch of the repository.
          type: string
          example: master
        open_issues_count:
          type: integer
          example: 0
        is_template:
          description: Whether this repository acts as a template that can be used to generate new repositories.
          default: false
          type: boolean
          example: true
        topics:
          type: array
          items:
            type: string
        has_issues:
          description: Whether issues are enabled.
          default: true
          type: boolean
          example: true
        has_projects:
          description: Whether projects are enabled.
          default: true
          type: boolean
          example: true
        has_wiki:
          description: Whether the wiki is enabled.
          default: true
          type: boolean
          example: true
        has_pages:
          type: boolean
        has_downloads:
          description: Whether downloads are enabled.
          default: true
          type: boolean
          example: true
        archived:
          description: Whether the repository is archived.
          default: false
          type: boolean
        disabled:
          type: boolean
          description: Returns whether or not this repository disabled.
        visibility:
          description: 'The repository visibility: public, private, or internal.'
          default: public
          type: string
        pushed_at:
          type: string
          format: date-time
          example: '2011-01-26T19:06:43Z'
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
          nullable: true
        updated_at:
          type: string
          format: date-time
          example: '2011-01-26T19:14:43Z'
          nullable: true
        allow_rebase_merge:
          description: Whether to allow rebase merges for pull requests.
          default: true
          type: boolean
          example: true
        template_repository:
          nullable: true
          type: object
          properties:
            id:
              type: integer
            node_id:
              type: string
            name:
              type: string
            full_name:
              type: string
            owner:
              type: object
              properties:
                login:
                  type: string
                id:
                  type: integer
                node_id:
                  type: string
                avatar_url:
                  type: string
                gravatar_id:
                  type: string
                url:
                  type: string
                html_url:
                  type: string
                followers_url:
                  type: string
                following_url:
                  type: string
                gists_url:
                  type: string
                starred_url:
                  type: string
                subscriptions_url:
                  type: string
                organizations_url:
                  type: string
                repos_url:
                  type: string
                events_url:
                  type: string
                received_events_url:
                  type: string
                type:
                  type: string
                site_admin:
                  type: boolean
            private:
              type: boolean
            html_url:
              type: string
            description:
              type: string
            fork:
              type: boolean
            url:
              type: string
            archive_url:
              type: string
            assignees_url:
              type: string
            blobs_url:
              type: string
            branches_url:
              type: string
            collaborators_url:
              type: string
            comments_url:
              type: string
            commits_url:
              type: string
            compare_url:
              type: string
            contents_url:
              type: string
            contributors_url:
              type: string
            deployments_url:
              type: string
            downloads_url:
              type: string
            events_url:
              type: string
            forks_url:
              type: string
            git_commits_url:
              type: string
            git_refs_url:
              type: string
            git_tags_url:
              type: string
            git_url:
              type: string
            issue_comment_url:
              type: string
            issue_events_url:
              type: string
            issues_url:
              type: string
            keys_url:
              type: string
            labels_url:
              type: string
            languages_url:
              type: string
            merges_url:
              type: string
            milestones_url:
              type: string
            notifications_url:
              type: string
            pulls_url:
              type: string
            releases_url:
              type: string
            ssh_url:
              type: string
            stargazers_url:
              type: string
            statuses_url:
              type: string
            subscribers_url:
              type: string
            subscription_url:
              type: string
            tags_url:
              type: string
            teams_url:
              type: string
            trees_url:
              type: string
            clone_url:
              type: string
            mirror_url:
              type: string
            hooks_url:
              type: string
            svn_url:
              type: string
            homepage:
              type: string
            language:
              type: string
            forks_count:
              type: integer
            stargazers_count:
              type: integer
            watchers_count:
              type: integer
            size:
              type: integer
            default_branch:
              type: string
            open_issues_count:
              type: integer
            is_template:
              type: boolean
            topics:
              type: array
              items:
                type: string
            has_issues:
              type: boolean
            has_projects:
              type: boolean
            has_wiki:
              type: boolean
            has_pages:
              type: boolean
            has_downloads:
              type: boolean
            archived:
              type: boolean
            disabled:
              type: boolean
            visibility:
              type: string
            pushed_at:
              type: string
            created_at:
              type: string
            updated_at:
              type: string
            permissions:
              type: object
              properties:
                admin:
                  type: boolean
                maintain:
                  type: boolean
                push:
                  type: boolean
                triage:
                  type: boolean
                pull:
                  type: boolean
            allow_rebase_merge:
              type: boolean
            temp_clone_token:
              type: string
            allow_squash_merge:
              type: boolean
            allow_auto_merge:
              type: boolean
            delete_branch_on_merge:
              type: boolean
            allow_update_branch:
              type: boolean
            allow_merge_commit:
              type: boolean
            subscribers_count:
              type: integer
            network_count:
              type: integer
        temp_clone_token:
          type: string
        allow_squash_merge:
          description: Whether to allow squash merges for pull requests.
          default: true
          type: boolean
          example: true
        allow_auto_merge:
          description: Whether to allow Auto-merge to be used on pull requests.
          default: false
          type: boolean
          example: false
        delete_branch_on_merge:
          description: Whether to delete head branches when pull requests are merged
          default: false
          type: boolean
          example: false
        allow_merge_commit:
          description: Whether to allow merge commits for pull requests.
          default: true
          type: boolean
          example: true
        allow_forking:
          description: Whether to allow forking this repo
          type: boolean
        subscribers_count:
          type: integer
        network_count:
          type: integer
        open_issues:
          type: integer
        watchers:
          type: integer
        master_branch:
          type: string
        starred_at:
          type: string
          example: '"2020-07-09T00:17:42Z"'
      required:
        - archive_url
        - assignees_url
        - blobs_url
        - branches_url
        - collaborators_url
        - comments_url
        - commits_url
        - compare_url
        - contents_url
        - contributors_url
        - deployments_url
        - description
        - downloads_url
        - events_url
        - fork
        - forks_url
        - full_name
        - git_commits_url
        - git_refs_url
        - git_tags_url
        - hooks_url
        - html_url
        - id
        - node_id
        - issue_comment_url
        - issue_events_url
        - issues_url
        - keys_url
        - labels_url
        - languages_url
        - merges_url
        - milestones_url
        - name
        - notifications_url
        - owner
        - private
        - pulls_url
        - releases_url
        - stargazers_url
        - statuses_url
        - subscribers_url
        - subscription_url
        - tags_url
        - teams_url
        - trees_url
        - url
        - clone_url
        - default_branch
        - forks
        - forks_count
        - git_url
        - has_downloads
        - has_issues
        - has_projects
        - has_wiki
        - has_pages
        - homepage
        - language
        - archived
        - disabled
        - mirror_url
        - open_issues
        - open_issues_count
        - license
        - pushed_at
        - size
        - ssh_url
        - stargazers_count
        - svn_url
        - watchers
        - watchers_count
        - created_at
        - updated_at
      nullable: true
    code-of-conduct:
      title: Code Of Conduct
      description: Code Of Conduct
      type: object
      properties:
        key:
          type: string
          example: contributor_covenant
        name:
          type: string
          example: Contributor Covenant
        url:
          type: string
          format: uri
          example: https://api.github.com/codes_of_conduct/contributor_covenant
        body:
          type: string
          example: |
            # Contributor Covenant Code of Conduct

            ## Our Pledge

            In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.

            ## Our Standards

            Examples of behavior that contributes to creating a positive environment include:

            * Using welcoming and inclusive language
            * Being respectful of differing viewpoints and experiences
            * Gracefully accepting constructive criticism
            * Focusing on what is best for the community
            * Showing empathy towards other community members

            Examples of unacceptable behavior by participants include:

            * The use of sexualized language or imagery and unwelcome sexual attention or advances
            * Trolling, insulting/derogatory comments, and personal or political attacks
            * Public or private harassment
            * Publishing others' private information, such as a physical or electronic address, without explicit permission
            * Other conduct which could reasonably be considered inappropriate in a professional setting

            ## Our Responsibilities

            Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response
                              to any instances of unacceptable behavior.

            Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.

            ## Scope

            This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,
                              posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.

            ## Enforcement

            Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.

            Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.

            ## Attribution

            This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]

            [homepage]: http://contributor-covenant.org
            [version]: http://contributor-covenant.org/version/1/4/
        html_url:
          type: string
          format: uri
          nullable: true
      required:
        - url
        - html_url
        - key
        - name
    nullable-license-simple:
      title: License Simple
      description: License Simple
      type: object
      properties:
        key:
          type: string
          example: mit
        name:
          type: string
          example: MIT License
        url:
          type: string
          nullable: true
          format: uri
          example: https://api.github.com/licenses/mit
        spdx_id:
          type: string
          nullable: true
          example: MIT
        node_id:
          type: string
          example: MDc6TGljZW5zZW1pdA==
        html_url:
          type: string
          format: uri
      required:
        - key
        - name
        - url
        - spdx_id
        - node_id
      nullable: true
    team-repository:
      title: Team Repository
      description: A team's access to a repository.
      type: object
      properties:
        id:
          description: Unique identifier of the repository
          example: 42
          type: integer
        node_id:
          type: string
          example: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
        name:
          description: The name of the repository.
          type: string
          example: Team Environment
        full_name:
          type: string
          example: octocat/Hello-World
        license:
          $ref: '#/components/schemas/nullable-license-simple'
        forks:
          type: integer
        permissions:
          type: object
          properties:
            admin:
              type: boolean
            pull:
              type: boolean
            triage:
              type: boolean
            push:
              type: boolean
            maintain:
              type: boolean
          required:
            - admin
            - pull
            - push
        role_name:
          type: string
          example: admin
        owner:
          $ref: '#/components/schemas/nullable-simple-user'
        private:
          description: Whether the repository is private or public.
          default: false
          type: boolean
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World
        description:
          type: string
          example: This your first repo!
          nullable: true
        fork:
          type: boolean
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World
        archive_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
        assignees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/assignees{/user}
        blobs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
        branches_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/branches{/branch}
        collaborators_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
        comments_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/comments{/number}
        commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/commits{/sha}
        compare_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
        contents_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/contents/{+path}
        contributors_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/contributors
        deployments_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/deployments
        downloads_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/downloads
        events_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/events
        forks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/forks
        git_commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
        git_refs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
        git_tags_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
        git_url:
          type: string
          example: git:github.com/octocat/Hello-World.git
        issue_comment_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
        issue_events_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
        issues_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues{/number}
        keys_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
        labels_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/labels{/name}
        languages_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/languages
        merges_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/merges
        milestones_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/milestones{/number}
        notifications_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
        pulls_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/pulls{/number}
        releases_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/releases{/id}
        ssh_url:
          type: string
          example: git@github.com:octocat/Hello-World.git
        stargazers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/stargazers
        statuses_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
        subscribers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscribers
        subscription_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscription
        tags_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/tags
        teams_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/teams
        trees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
        clone_url:
          type: string
          example: https://github.com/octocat/Hello-World.git
        mirror_url:
          type: string
          format: uri
          example: git:git.example.com/octocat/Hello-World
          nullable: true
        hooks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/hooks
        svn_url:
          type: string
          format: uri
          example: https://svn.github.com/octocat/Hello-World
        homepage:
          type: string
          format: uri
          example: https://github.com
          nullable: true
        language:
          type: string
          nullable: true
        forks_count:
          type: integer
          example: 9
        stargazers_count:
          type: integer
          example: 80
        watchers_count:
          type: integer
          example: 80
        size:
          type: integer
          example: 108
        default_branch:
          description: The default branch of the repository.
          type: string
          example: master
        open_issues_count:
          type: integer
          example: 0
        is_template:
          description: Whether this repository acts as a template that can be used to generate new repositories.
          default: false
          type: boolean
          example: true
        topics:
          type: array
          items:
            type: string
        has_issues:
          description: Whether issues are enabled.
          default: true
          type: boolean
          example: true
        has_projects:
          description: Whether projects are enabled.
          default: true
          type: boolean
          example: true
        has_wiki:
          description: Whether the wiki is enabled.
          default: true
          type: boolean
          example: true
        has_pages:
          type: boolean
        has_downloads:
          description: Whether downloads are enabled.
          default: true
          type: boolean
          example: true
        archived:
          description: Whether the repository is archived.
          default: false
          type: boolean
        disabled:
          type: boolean
          description: Returns whether or not this repository disabled.
        visibility:
          description: 'The repository visibility: public, private, or internal.'
          default: public
          type: string
        pushed_at:
          type: string
          format: date-time
          example: '2011-01-26T19:06:43Z'
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
          nullable: true
        updated_at:
          type: string
          format: date-time
          example: '2011-01-26T19:14:43Z'
          nullable: true
        allow_rebase_merge:
          description: Whether to allow rebase merges for pull requests.
          default: true
          type: boolean
          example: true
        template_repository:
          $ref: '#/components/schemas/nullable-repository'
        temp_clone_token:
          type: string
        allow_squash_merge:
          description: Whether to allow squash merges for pull requests.
          default: true
          type: boolean
          example: true
        allow_auto_merge:
          description: Whether to allow Auto-merge to be used on pull requests.
          default: false
          type: boolean
          example: false
        delete_branch_on_merge:
          description: Whether to delete head branches when pull requests are merged
          default: false
          type: boolean
          example: false
        allow_merge_commit:
          description: Whether to allow merge commits for pull requests.
          default: true
          type: boolean
          example: true
        allow_forking:
          description: Whether to allow forking this repo
          default: false
          type: boolean
          example: false
        subscribers_count:
          type: integer
        network_count:
          type: integer
        open_issues:
          type: integer
        watchers:
          type: integer
        master_branch:
          type: string
      required:
        - archive_url
        - assignees_url
        - blobs_url
        - branches_url
        - collaborators_url
        - comments_url
        - commits_url
        - compare_url
        - contents_url
        - contributors_url
        - deployments_url
        - description
        - downloads_url
        - events_url
        - fork
        - forks_url
        - full_name
        - git_commits_url
        - git_refs_url
        - git_tags_url
        - hooks_url
        - html_url
        - id
        - node_id
        - issue_comment_url
        - issue_events_url
        - issues_url
        - keys_url
        - labels_url
        - languages_url
        - merges_url
        - milestones_url
        - name
        - notifications_url
        - owner
        - private
        - pulls_url
        - releases_url
        - stargazers_url
        - statuses_url
        - subscribers_url
        - subscription_url
        - tags_url
        - teams_url
        - trees_url
        - url
        - clone_url
        - default_branch
        - forks
        - forks_count
        - git_url
        - has_downloads
        - has_issues
        - has_projects
        - has_wiki
        - has_pages
        - homepage
        - language
        - archived
        - disabled
        - mirror_url
        - open_issues
        - open_issues_count
        - license
        - pushed_at
        - size
        - ssh_url
        - stargazers_count
        - svn_url
        - watchers
        - watchers_count
        - created_at
        - updated_at
  parameters:
    org:
      name: org
      in: path
      required: true
      schema:
        type: string
    team-slug:
      name: team_slug
      description: team_slug parameter
      in: path
      required: true
      schema:
        type: string
    group-id:
      name: group_id
      description: group_id parameter
      in: path
      required: true
      schema:
        type: integer
    per-page:
      name: per_page
      description: Results per page (max 100)
      in: query
      schema:
        type: integer
        default: 30
    page:
      name: page
      description: Page number of the results to fetch.
      in: query
      schema:
        type: integer
        default: 1
    direction:
      name: direction
      description: One of `asc` (ascending) or `desc` (descending).
      in: query
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
    discussion-number:
      name: discussion_number
      in: path
      required: true
      schema:
        type: integer
    comment-number:
      name: comment_number
      in: path
      required: true
      schema:
        type: integer
    username:
      name: username
      in: path
      required: true
      schema:
        type: string
    project-id:
      name: project_id
      in: path
      required: true
      schema:
        type: integer
    owner:
      name: owner
      in: path
      required: true
      schema:
        type: string
    repo:
      name: repo
      in: path
      required: true
      schema:
        type: string
    team-id:
      name: team_id
      in: path
      required: true
      schema:
        type: integer
  responses:
    forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/basic-error'
    validation_failed:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/validation-error'
    not_found:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/basic-error'
    preview_header_missing:
      description: Preview header missing
      content:
        application/json:
          schema:
            type: object
            required:
              - message
              - documentation_url
            properties:
              message:
                type: string
              documentation_url:
                type: string
    not_modified:
      description: Not modified
  securitySchemes: {}
  callbacks: {}
  examples:
    external-groups:
      value:
        groups:
          - group_id: '123'
            group_name: Octocat admins
            updated_at: '2021-01-24T11:31:04-06:00'
          - group_id: '456'
            group_name: Octocat docs members
            updated_at: '2021-03-24T11:31:04-06:00'
    external-group:
      value:
        group_id: '123'
        group_name: Octocat admins
        updated_at: '2021-01-24T11:31:04-06:00'
        teams:
          - team_id: 1
            team_name: team-test
          - team_id: 2
            team_name: team-test2
        members:
          - member_id: 1
            member_login: mona-lisa_eocsaxrs
            member_name: Mona Lisa
            member_email: mona_lisa@github.com
          - member_id: 2
            member_login: octo-lisa_eocsaxrs
            member_name: Octo Lisa
            member_email: octo_lisa@github.com
    group-mapping-3:
      value:
        groups:
          - group_id: '123'
            group_name: Octocat admins
            group_description: The people who configure your octoworld.
          - group_id: '456'
            group_name: Octocat docs members
            group_description: The people who make your octoworld come to life.
    team-items:
      value:
        - id: 1
          node_id: MDQ6VGVhbTE=
          url: https://api.github.com/teams/1
          html_url: https://github.com/orgs/github/teams/justice-league
          name: Justice League
          slug: justice-league
          description: A great team.
          privacy: closed
          permission: admin
          members_url: https://api.github.com/teams/1/members{/member}
          repositories_url: https://api.github.com/teams/1/repos
          parent: null
    team-full:
      value:
        id: 1
        node_id: MDQ6VGVhbTE=
        url: https://api.github.com/teams/1
        html_url: https://github.com/orgs/github/teams/justice-league
        name: Justice League
        slug: justice-league
        description: A great team.
        privacy: closed
        permission: admin
        members_url: https://api.github.com/teams/1/members{/member}
        repositories_url: https://api.github.com/teams/1/repos
        parent: null
        members_count: 3
        repos_count: 10
        created_at: '2017-07-14T16:53:42Z'
        updated_at: '2017-08-17T12:37:15Z'
        organization:
          login: github
          id: 1
          node_id: MDEyOk9yZ2FuaXphdGlvbjE=
          url: https://api.github.com/orgs/github
          repos_url: https://api.github.com/orgs/github/repos
          events_url: https://api.github.com/orgs/github/events
          hooks_url: https://api.github.com/orgs/github/hooks
          issues_url: https://api.github.com/orgs/github/issues
          members_url: https://api.github.com/orgs/github/members{/member}
          public_members_url: https://api.github.com/orgs/github/public_members{/member}
          avatar_url: https://github.com/images/error/octocat_happy.gif
          description: A great organization
          name: github
          company: GitHub
          blog: https://github.com/blog
          location: San Francisco
          email: octocat@github.com
          is_verified: true
          has_organization_projects: true
          has_repository_projects: true
          public_repos: 2
          public_gists: 1
          followers: 20
          following: 0
          html_url: https://github.com/octocat
          created_at: '2008-01-14T04:33:35Z'
          updated_at: '2017-08-17T12:37:15Z'
          type: Organization
    team-discussion-items:
      value:
        - author:
            login: octocat
            id: 1
            node_id: MDQ6VXNlcjE=
            avatar_url: https://github.com/images/error/octocat_happy.gif
            gravatar_id: ''
            url: https://api.github.com/users/octocat
            html_url: https://github.com/octocat
            followers_url: https://api.github.com/users/octocat/followers
            following_url: https://api.github.com/users/octocat/following{/other_user}
            gists_url: https://api.github.com/users/octocat/gists{/gist_id}
            starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
            subscriptions_url: https://api.github.com/users/octocat/subscriptions
            organizations_url: https://api.github.com/users/octocat/orgs
            repos_url: https://api.github.com/users/octocat/repos
            events_url: https://api.github.com/users/octocat/events{/privacy}
            received_events_url: https://api.github.com/users/octocat/received_events
            type: User
            site_admin: false
          body: Hi! This is an area for us to collaborate as a team.
          body_html: <p>Hi! This is an area for us to collaborate as a team</p>
          body_version: 0d495416a700fb06133c612575d92bfb
          comments_count: 0
          comments_url: https://api.github.com/teams/2343027/discussions/1/comments
          created_at: '2018-01-25T18:56:31Z'
          last_edited_at: null
          html_url: https://github.com/orgs/github/teams/justice-league/discussions/1
          node_id: MDE0OlRlYW1EaXNjdXNzaW9uMQ==
          number: 1
          pinned: false
          private: false
          team_url: https://api.github.com/teams/2343027
          title: Our first team post
          updated_at: '2018-01-25T18:56:31Z'
          url: https://api.github.com/teams/2343027/discussions/1
          reactions:
            url: https://api.github.com/teams/2343027/discussions/1/reactions
            total_count: 5
            '+1': 3
            '-1': 1
            laugh: 0
            confused: 0
            heart: 1
            hooray: 0
            eyes: 1
            rocket: 1
    team-discussion:
      value:
        author:
          login: octocat
          id: 1
          node_id: MDQ6VXNlcjE=
          avatar_url: https://github.com/images/error/octocat_happy.gif
          gravatar_id: ''
          url: https://api.github.com/users/octocat
          html_url: https://github.com/octocat
          followers_url: https://api.github.com/users/octocat/followers
          following_url: https://api.github.com/users/octocat/following{/other_user}
          gists_url: https://api.github.com/users/octocat/gists{/gist_id}
          starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
          subscriptions_url: https://api.github.com/users/octocat/subscriptions
          organizations_url: https://api.github.com/users/octocat/orgs
          repos_url: https://api.github.com/users/octocat/repos
          events_url: https://api.github.com/users/octocat/events{/privacy}
          received_events_url: https://api.github.com/users/octocat/received_events
          type: User
          site_admin: false
        body: Hi! This is an area for us to collaborate as a team.
        body_html: <p>Hi! This is an area for us to collaborate as a team</p>
        body_version: 0d495416a700fb06133c612575d92bfb
        comments_count: 0
        comments_url: https://api.github.com/teams/2343027/discussions/1/comments
        created_at: '2018-01-25T18:56:31Z'
        last_edited_at: null
        html_url: https://github.com/orgs/github/teams/justice-league/discussions/1
        node_id: MDE0OlRlYW1EaXNjdXNzaW9uMQ==
        number: 1
        pinned: false
        private: false
        team_url: https://api.github.com/teams/2343027
        title: Our first team post
        updated_at: '2018-01-25T18:56:31Z'
        url: https://api.github.com/teams/2343027/discussions/1
        reactions:
          url: https://api.github.com/teams/2343027/discussions/1/reactions
          total_count: 5
          '+1': 3
          '-1': 1
          laugh: 0
          confused: 0
          heart: 1
          hooray: 0
          eyes: 1
          rocket: 1
    team-discussion-2:
      value:
        author:
          login: octocat
          id: 1
          node_id: MDQ6VXNlcjE=
          avatar_url: https://github.com/images/error/octocat_happy.gif
          gravatar_id: ''
          url: https://api.github.com/users/octocat
          html_url: https://github.com/octocat
          followers_url: https://api.github.com/users/octocat/followers
          following_url: https://api.github.com/users/octocat/following{/other_user}
          gists_url: https://api.github.com/users/octocat/gists{/gist_id}
          starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
          subscriptions_url: https://api.github.com/users/octocat/subscriptions
          organizations_url: https://api.github.com/users/octocat/orgs
          repos_url: https://api.github.com/users/octocat/repos
          events_url: https://api.github.com/users/octocat/events{/privacy}
          received_events_url: https://api.github.com/users/octocat/received_events
          type: User
          site_admin: false
        body: Hi! This is an area for us to collaborate as a team.
        body_html: <p>Hi! This is an area for us to collaborate as a team</p>
        body_version: 0d495416a700fb06133c612575d92bfb
        comments_count: 1
        comments_url: https://api.github.com/teams/2343027/discussions/1/comments
        created_at: '2018-01-25T18:56:31Z'
        last_edited_at: '2018-01-26T18:22:20Z'
        html_url: https://github.com/orgs/github/teams/justice-league/discussions/1
        node_id: MDE0OlRlYW1EaXNjdXNzaW9uMQ==
        number: 1
        pinned: false
        private: false
        team_url: https://api.github.com/teams/2343027
        title: Welcome to our first team post
        updated_at: '2018-01-26T18:22:20Z'
        url: https://api.github.com/teams/2343027/discussions/1
        reactions:
          url: https://api.github.com/teams/2343027/discussions/1/reactions
          total_count: 5
          '+1': 3
          '-1': 1
          laugh: 0
          confused: 0
          heart: 1
          hooray: 0
          eyes: 1
          rocket: 1
    team-discussion-comment-items:
      value:
        - author:
            login: octocat
            id: 1
            node_id: MDQ6VXNlcjE=
            avatar_url: https://github.com/images/error/octocat_happy.gif
            gravatar_id: ''
            url: https://api.github.com/users/octocat
            html_url: https://github.com/octocat
            followers_url: https://api.github.com/users/octocat/followers
            following_url: https://api.github.com/users/octocat/following{/other_user}
            gists_url: https://api.github.com/users/octocat/gists{/gist_id}
            starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
            subscriptions_url: https://api.github.com/users/octocat/subscriptions
            organizations_url: https://api.github.com/users/octocat/orgs
            repos_url: https://api.github.com/users/octocat/repos
            events_url: https://api.github.com/users/octocat/events{/privacy}
            received_events_url: https://api.github.com/users/octocat/received_events
            type: User
            site_admin: false
          body: Do you like apples?
          body_html: <p>Do you like apples?</p>
          body_version: 5eb32b219cdc6a5a9b29ba5d6caa9c51
          created_at: '2018-01-15T23:53:58Z'
          last_edited_at: null
          discussion_url: https://api.github.com/teams/2403582/discussions/1
          html_url: https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
          node_id: MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=
          number: 1
          updated_at: '2018-01-15T23:53:58Z'
          url: https://api.github.com/teams/2403582/discussions/1/comments/1
          reactions:
            url: https://api.github.com/teams/2403582/discussions/1/reactions
            total_count: 5
            '+1': 3
            '-1': 1
            laugh: 0
            confused: 0
            heart: 1
            hooray: 0
            eyes: 1
            rocket: 1
    team-discussion-comment:
      value:
        author:
          login: octocat
          id: 1
          node_id: MDQ6VXNlcjE=
          avatar_url: https://github.com/images/error/octocat_happy.gif
          gravatar_id: ''
          url: https://api.github.com/users/octocat
          html_url: https://github.com/octocat
          followers_url: https://api.github.com/users/octocat/followers
          following_url: https://api.github.com/users/octocat/following{/other_user}
          gists_url: https://api.github.com/users/octocat/gists{/gist_id}
          starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
          subscriptions_url: https://api.github.com/users/octocat/subscriptions
          organizations_url: https://api.github.com/users/octocat/orgs
          repos_url: https://api.github.com/users/octocat/repos
          events_url: https://api.github.com/users/octocat/events{/privacy}
          received_events_url: https://api.github.com/users/octocat/received_events
          type: User
          site_admin: false
        body: Do you like apples?
        body_html: <p>Do you like apples?</p>
        body_version: 5eb32b219cdc6a5a9b29ba5d6caa9c51
        created_at: '2018-01-15T23:53:58Z'
        last_edited_at: null
        discussion_url: https://api.github.com/teams/2403582/discussions/1
        html_url: https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
        node_id: MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=
        number: 1
        updated_at: '2018-01-15T23:53:58Z'
        url: https://api.github.com/teams/2403582/discussions/1/comments/1
        reactions:
          url: https://api.github.com/teams/2403582/discussions/1/reactions
          total_count: 5
          '+1': 3
          '-1': 1
          laugh: 0
          confused: 0
          heart: 1
          hooray: 0
          eyes: 1
          rocket: 1
    team-discussion-comment-2:
      value:
        author:
          login: octocat
          id: 1
          node_id: MDQ6VXNlcjE=
          avatar_url: https://github.com/images/error/octocat_happy.gif
          gravatar_id: ''
          url: https://api.github.com/users/octocat
          html_url: https://github.com/octocat
          followers_url: https://api.github.com/users/octocat/followers
          following_url: https://api.github.com/users/octocat/following{/other_user}
          gists_url: https://api.github.com/users/octocat/gists{/gist_id}
          starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
          subscriptions_url: https://api.github.com/users/octocat/subscriptions
          organizations_url: https://api.github.com/users/octocat/orgs
          repos_url: https://api.github.com/users/octocat/repos
          events_url: https://api.github.com/users/octocat/events{/privacy}
          received_events_url: https://api.github.com/users/octocat/received_events
          type: User
          site_admin: false
        body: Do you like pineapples?
        body_html: <p>Do you like pineapples?</p>
        body_version: e6907b24d9c93cc0c5024a7af5888116
        created_at: '2018-01-15T23:53:58Z'
        last_edited_at: '2018-01-26T18:22:20Z'
        discussion_url: https://api.github.com/teams/2403582/discussions/1
        html_url: https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
        node_id: MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=
        number: 1
        updated_at: '2018-01-26T18:22:20Z'
        url: https://api.github.com/teams/2403582/discussions/1/comments/1
        reactions:
          url: https://api.github.com/teams/2403582/discussions/1/reactions
          total_count: 5
          '+1': 3
          '-1': 1
          laugh: 0
          confused: 0
          heart: 1
          hooray: 0
          eyes: 1
          rocket: 1
    organization-invitation-items:
      value:
        - id: 1
          login: monalisa
          node_id: MDQ6VXNlcjE=
          email: octocat@github.com
          role: direct_member
          created_at: '2016-11-30T06:46:10-08:00'
          failed_at: ''
          failed_reason: ''
          inviter:
            login: other_user
            id: 1
            node_id: MDQ6VXNlcjE=
            avatar_url: https://github.com/images/error/other_user_happy.gif
            gravatar_id: ''
            url: https://api.github.com/users/other_user
            html_url: https://github.com/other_user
            followers_url: https://api.github.com/users/other_user/followers
            following_url: https://api.github.com/users/other_user/following{/other_user}
            gists_url: https://api.github.com/users/other_user/gists{/gist_id}
            starred_url: https://api.github.com/users/other_user/starred{/owner}{/repo}
            subscriptions_url: https://api.github.com/users/other_user/subscriptions
            organizations_url: https://api.github.com/users/other_user/orgs
            repos_url: https://api.github.com/users/other_user/repos
            events_url: https://api.github.com/users/other_user/events{/privacy}
            received_events_url: https://api.github.com/users/other_user/received_events
            type: User
            site_admin: false
          team_count: 2
          invitation_teams_url: https://api.github.com/organizations/2/invitations/1/teams
    simple-user-items:
      value:
        - login: octocat
          id: 1
          node_id: MDQ6VXNlcjE=
          avatar_url: https://github.com/images/error/octocat_happy.gif
          gravatar_id: ''
          url: https://api.github.com/users/octocat
          html_url: https://github.com/octocat
          followers_url: https://api.github.com/users/octocat/followers
          following_url: https://api.github.com/users/octocat/following{/other_user}
          gists_url: https://api.github.com/users/octocat/gists{/gist_id}
          starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
          subscriptions_url: https://api.github.com/users/octocat/subscriptions
          organizations_url: https://api.github.com/users/octocat/orgs
          repos_url: https://api.github.com/users/octocat/repos
          events_url: https://api.github.com/users/octocat/events{/privacy}
          received_events_url: https://api.github.com/users/octocat/received_events
          type: User
          site_admin: false
    team-membership-response-if-user-is-a-team-maintainer:
      summary: Response if user is a team maintainer
      value:
        url: https://api.github.com/teams/1/memberships/octocat
        role: maintainer
        state: active
    team-membership-response-if-users-membership-with-team-is-now-pending:
      summary: Response if user's membership with team is now pending
      value:
        url: https://api.github.com/teams/1/memberships/octocat
        role: member
        state: pending
    team-project-items:
      value:
        - owner_url: https://api.github.com/orgs/octocat
          url: https://api.github.com/projects/1002605
          html_url: https://github.com/orgs/api-playground/projects/1
          columns_url: https://api.github.com/projects/1002605/columns
          id: 1002605
          node_id: MDc6UHJvamVjdDEwMDI2MDU=
          name: Organization Roadmap
          body: High-level roadmap for the upcoming year.
          number: 1
          state: open
          creator:
            login: octocat
            id: 1
            node_id: MDQ6VXNlcjE=
            avatar_url: https://github.com/images/error/octocat_happy.gif
            gravatar_id: ''
            url: https://api.github.com/users/octocat
            html_url: https://github.com/octocat
            followers_url: https://api.github.com/users/octocat/followers
            following_url: https://api.github.com/users/octocat/following{/other_user}
            gists_url: https://api.github.com/users/octocat/gists{/gist_id}
            starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
            subscriptions_url: https://api.github.com/users/octocat/subscriptions
            organizations_url: https://api.github.com/users/octocat/orgs
            repos_url: https://api.github.com/users/octocat/repos
            events_url: https://api.github.com/users/octocat/events{/privacy}
            received_events_url: https://api.github.com/users/octocat/received_events
            type: User
            site_admin: false
          created_at: '2011-04-11T20:09:31Z'
          updated_at: '2014-03-04T18:58:10Z'
          organization_permission: write
          private: false
          permissions:
            read: true
            write: true
            admin: false
    team-project:
      value:
        owner_url: https://api.github.com/orgs/octocat
        url: https://api.github.com/projects/1002605
        html_url: https://github.com/orgs/api-playground/projects/1
        columns_url: https://api.github.com/projects/1002605/columns
        id: 1002605
        node_id: MDc6UHJvamVjdDEwMDI2MDU=
        name: Organization Roadmap
        body: High-level roadmap for the upcoming year.
        number: 1
        state: open
        creator:
          login: octocat
          id: 1
          node_id: MDQ6VXNlcjE=
          avatar_url: https://github.com/images/error/octocat_happy.gif
          gravatar_id: ''
          url: https://api.github.com/users/octocat
          html_url: https://github.com/octocat
          followers_url: https://api.github.com/users/octocat/followers
          following_url: https://api.github.com/users/octocat/following{/other_user}
          gists_url: https://api.github.com/users/octocat/gists{/gist_id}
          starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
          subscriptions_url: https://api.github.com/users/octocat/subscriptions
          organizations_url: https://api.github.com/users/octocat/orgs
          repos_url: https://api.github.com/users/octocat/repos
          events_url: https://api.github.com/users/octocat/events{/privacy}
          received_events_url: https://api.github.com/users/octocat/received_events
          type: User
          site_admin: false
        created_at: '2011-04-11T20:09:31Z'
        updated_at: '2014-03-04T18:58:10Z'
        organization_permission: write
        private: false
        permissions:
          read: true
          write: true
          admin: false
    minimal-repository-items:
      value:
        - id: 1296269
          node_id: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
          name: Hello-World
          full_name: octocat/Hello-World
          owner:
            login: octocat
            id: 1
            node_id: MDQ6VXNlcjE=
            avatar_url: https://github.com/images/error/octocat_happy.gif
            gravatar_id: ''
            url: https://api.github.com/users/octocat
            html_url: https://github.com/octocat
            followers_url: https://api.github.com/users/octocat/followers
            following_url: https://api.github.com/users/octocat/following{/other_user}
            gists_url: https://api.github.com/users/octocat/gists{/gist_id}
            starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
            subscriptions_url: https://api.github.com/users/octocat/subscriptions
            organizations_url: https://api.github.com/users/octocat/orgs
            repos_url: https://api.github.com/users/octocat/repos
            events_url: https://api.github.com/users/octocat/events{/privacy}
            received_events_url: https://api.github.com/users/octocat/received_events
            type: User
            site_admin: false
          private: false
          html_url: https://github.com/octocat/Hello-World
          description: This your first repo!
          fork: false
          url: https://api.github.com/repos/octocat/Hello-World
          archive_url: https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
          assignees_url: https://api.github.com/repos/octocat/Hello-World/assignees{/user}
          blobs_url: https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
          branches_url: https://api.github.com/repos/octocat/Hello-World/branches{/branch}
          collaborators_url: https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
          comments_url: https://api.github.com/repos/octocat/Hello-World/comments{/number}
          commits_url: https://api.github.com/repos/octocat/Hello-World/commits{/sha}
          compare_url: https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
          contents_url: https://api.github.com/repos/octocat/Hello-World/contents/{+path}
          contributors_url: https://api.github.com/repos/octocat/Hello-World/contributors
          deployments_url: https://api.github.com/repos/octocat/Hello-World/deployments
          downloads_url: https://api.github.com/repos/octocat/Hello-World/downloads
          events_url: https://api.github.com/repos/octocat/Hello-World/events
          forks_url: https://api.github.com/repos/octocat/Hello-World/forks
          git_commits_url: https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
          git_refs_url: https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
          git_tags_url: https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
          git_url: git:github.com/octocat/Hello-World.git
          issue_comment_url: https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
          issue_events_url: https://api.github.com/repos/octocat/Hello-World/issues/events{/number}
          issues_url: https://api.github.com/repos/octocat/Hello-World/issues{/number}
          keys_url: https://api.github.com/repos/octocat/Hello-World/keys{/key_id}
          labels_url: https://api.github.com/repos/octocat/Hello-World/labels{/name}
          languages_url: https://api.github.com/repos/octocat/Hello-World/languages
          merges_url: https://api.github.com/repos/octocat/Hello-World/merges
          milestones_url: https://api.github.com/repos/octocat/Hello-World/milestones{/number}
          notifications_url: https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
          pulls_url: https://api.github.com/repos/octocat/Hello-World/pulls{/number}
          releases_url: https://api.github.com/repos/octocat/Hello-World/releases{/id}
          ssh_url: git@github.com:octocat/Hello-World.git
          stargazers_url: https://api.github.com/repos/octocat/Hello-World/stargazers
          statuses_url: https://api.github.com/repos/octocat/Hello-World/statuses/{sha}
          subscribers_url: https://api.github.com/repos/octocat/Hello-World/subscribers
          subscription_url: https://api.github.com/repos/octocat/Hello-World/subscription
          tags_url: https://api.github.com/repos/octocat/Hello-World/tags
          teams_url: https://api.github.com/repos/octocat/Hello-World/teams
          trees_url: https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
          clone_url: https://github.com/octocat/Hello-World.git
          mirror_url: git:git.example.com/octocat/Hello-World
          hooks_url: https://api.github.com/repos/octocat/Hello-World/hooks
          svn_url: https://svn.github.com/octocat/Hello-World
          homepage: https://github.com
          language: null
          forks_count: 9
          stargazers_count: 80
          watchers_count: 80
          size: 108
          default_branch: master
          open_issues_count: 0
          is_template: false
          topics:
            - octocat
            - atom
            - electron
            - api
          has_issues: true
          has_projects: true
          has_wiki: true
          has_pages: false
          has_downloads: true
          archived: false
          disabled: false
          visibility: public
          pushed_at: '2011-01-26T19:06:43Z'
          created_at: '2011-01-26T19:01:12Z'
          updated_at: '2011-01-26T19:14:43Z'
          permissions:
            admin: false
            push: false
            pull: true
          template_repository: null
    team-repository-alternative-response-with-repository-permissions:
      value:
        id: 1296269
        node_id: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
        name: Hello-World
        full_name: octocat/Hello-World
        owner:
          login: octocat
          id: 1
          node_id: MDQ6VXNlcjE=
          avatar_url: https://github.com/images/error/octocat_happy.gif
          gravatar_id: ''
          url: https://api.github.com/users/octocat
          html_url: https://github.com/octocat
          followers_url: https://api.github.com/users/octocat/followers
          following_url: https://api.github.com/users/octocat/following{/other_user}
          gists_url: https://api.github.com/users/octocat/gists{/gist_id}
          starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
          subscriptions_url: https://api.github.com/users/octocat/subscriptions
          organizations_url: https://api.github.com/users/octocat/orgs
          repos_url: https://api.github.com/users/octocat/repos
          events_url: https://api.github.com/users/octocat/events{/privacy}
          received_events_url: https://api.github.com/users/octocat/received_events
          type: User
          site_admin: false
        private: false
        html_url: https://github.com/octocat/Hello-World
        description: This your first repo!
        fork: false
        url: https://api.github.com/repos/octocat/Hello-World
        archive_url: https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
        assignees_url: https://api.github.com/repos/octocat/Hello-World/assignees{/user}
        blobs_url: https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
        branches_url: https://api.github.com/repos/octocat/Hello-World/branches{/branch}
        collaborators_url: https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
        comments_url: https://api.github.com/repos/octocat/Hello-World/comments{/number}
        commits_url: https://api.github.com/repos/octocat/Hello-World/commits{/sha}
        compare_url: https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
        contents_url: https://api.github.com/repos/octocat/Hello-World/contents/{+path}
        contributors_url: https://api.github.com/repos/octocat/Hello-World/contributors
        deployments_url: https://api.github.com/repos/octocat/Hello-World/deployments
        downloads_url: https://api.github.com/repos/octocat/Hello-World/downloads
        events_url: https://api.github.com/repos/octocat/Hello-World/events
        forks_url: https://api.github.com/repos/octocat/Hello-World/forks
        git_commits_url: https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
        git_refs_url: https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
        git_tags_url: https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
        git_url: git:github.com/octocat/Hello-World.git
        issue_comment_url: https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
        issue_events_url: https://api.github.com/repos/octocat/Hello-World/issues/events{/number}
        issues_url: https://api.github.com/repos/octocat/Hello-World/issues{/number}
        keys_url: https://api.github.com/repos/octocat/Hello-World/keys{/key_id}
        labels_url: https://api.github.com/repos/octocat/Hello-World/labels{/name}
        languages_url: https://api.github.com/repos/octocat/Hello-World/languages
        merges_url: https://api.github.com/repos/octocat/Hello-World/merges
        milestones_url: https://api.github.com/repos/octocat/Hello-World/milestones{/number}
        notifications_url: https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
        pulls_url: https://api.github.com/repos/octocat/Hello-World/pulls{/number}
        releases_url: https://api.github.com/repos/octocat/Hello-World/releases{/id}
        ssh_url: git@github.com:octocat/Hello-World.git
        stargazers_url: https://api.github.com/repos/octocat/Hello-World/stargazers
        statuses_url: https://api.github.com/repos/octocat/Hello-World/statuses/{sha}
        subscribers_url: https://api.github.com/repos/octocat/Hello-World/subscribers
        subscription_url: https://api.github.com/repos/octocat/Hello-World/subscription
        tags_url: https://api.github.com/repos/octocat/Hello-World/tags
        teams_url: https://api.github.com/repos/octocat/Hello-World/teams
        trees_url: https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
        clone_url: https://github.com/octocat/Hello-World.git
        mirror_url: git:git.example.com/octocat/Hello-World
        hooks_url: https://api.github.com/repos/octocat/Hello-World/hooks
        svn_url: https://svn.github.com/octocat/Hello-World
        homepage: https://github.com
        language: null
        forks_count: 9
        stargazers_count: 80
        watchers_count: 80
        size: 108
        default_branch: master
        open_issues_count: 0
        is_template: false
        topics:
          - octocat
          - atom
          - electron
          - api
        has_issues: true
        has_projects: true
        has_wiki: true
        has_pages: false
        has_downloads: true
        archived: false
        disabled: false
        visibility: public
        pushed_at: '2011-01-26T19:06:43Z'
        created_at: '2011-01-26T19:01:12Z'
        updated_at: '2011-01-26T19:14:43Z'
        permissions:
          admin: false
          maintain: false
          push: false
          triage: false
          pull: true
        role_name: read
        allow_rebase_merge: true
        template_repository:
          id: 1296269
          node_id: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
          name: Hello-World-Template
          full_name: octocat/Hello-World-Template
          owner:
            login: octocat
            id: 1
            node_id: MDQ6VXNlcjE=
            avatar_url: https://github.com/images/error/octocat_happy.gif
            gravatar_id: ''
            url: https://api.github.com/users/octocat
            html_url: https://github.com/octocat
            followers_url: https://api.github.com/users/octocat/followers
            following_url: https://api.github.com/users/octocat/following{/other_user}
            gists_url: https://api.github.com/users/octocat/gists{/gist_id}
            starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
            subscriptions_url: https://api.github.com/users/octocat/subscriptions
            organizations_url: https://api.github.com/users/octocat/orgs
            repos_url: https://api.github.com/users/octocat/repos
            events_url: https://api.github.com/users/octocat/events{/privacy}
            received_events_url: https://api.github.com/users/octocat/received_events
            type: User
            site_admin: false
          private: false
          html_url: https://github.com/octocat/Hello-World-Template
          description: This your first repo!
          fork: false
          url: https://api.github.com/repos/octocat/Hello-World-Template
          archive_url: https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}
          assignees_url: https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}
          blobs_url: https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}
          branches_url: https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}
          collaborators_url: https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}
          comments_url: https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}
          commits_url: https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}
          compare_url: https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}
          contents_url: https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}
          contributors_url: https://api.github.com/repos/octocat/Hello-World-Template/contributors
          deployments_url: https://api.github.com/repos/octocat/Hello-World-Template/deployments
          downloads_url: https://api.github.com/repos/octocat/Hello-World-Template/downloads
          events_url: https://api.github.com/repos/octocat/Hello-World-Template/events
          forks_url: https://api.github.com/repos/octocat/Hello-World-Template/forks
          git_commits_url: https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}
          git_refs_url: https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}
          git_tags_url: https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}
          git_url: git:github.com/octocat/Hello-World-Template.git
          issue_comment_url: https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}
          issue_events_url: https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}
          issues_url: https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}
          keys_url: https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}
          labels_url: https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}
          languages_url: https://api.github.com/repos/octocat/Hello-World-Template/languages
          merges_url: https://api.github.com/repos/octocat/Hello-World-Template/merges
          milestones_url: https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}
          notifications_url: https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}
          pulls_url: https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}
          releases_url: https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}
          ssh_url: git@github.com:octocat/Hello-World-Template.git
          stargazers_url: https://api.github.com/repos/octocat/Hello-World-Template/stargazers
          statuses_url: https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}
          subscribers_url: https://api.github.com/repos/octocat/Hello-World-Template/subscribers
          subscription_url: https://api.github.com/repos/octocat/Hello-World-Template/subscription
          tags_url: https://api.github.com/repos/octocat/Hello-World-Template/tags
          teams_url: https://api.github.com/repos/octocat/Hello-World-Template/teams
          trees_url: https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}
          clone_url: https://github.com/octocat/Hello-World-Template.git
          mirror_url: git:git.example.com/octocat/Hello-World-Template
          hooks_url: https://api.github.com/repos/octocat/Hello-World-Template/hooks
          svn_url: https://svn.github.com/octocat/Hello-World-Template
          homepage: https://github.com
          language: null
          forks: 9
          forks_count: 9
          stargazers_count: 80
          watchers_count: 80
          watchers: 80
          size: 108
          default_branch: master
          open_issues: 0
          open_issues_count: 0
          is_template: true
          license:
            key: mit
            name: MIT License
            url: https://api.github.com/licenses/mit
            spdx_id: MIT
            node_id: MDc6TGljZW5zZW1pdA==
            html_url: https://api.github.com/licenses/mit
          topics:
            - octocat
            - atom
            - electron
            - api
          has_issues: true
          has_projects: true
          has_wiki: true
          has_pages: false
          has_downloads: true
          archived: false
          disabled: false
          visibility: public
          pushed_at: '2011-01-26T19:06:43Z'
          created_at: '2011-01-26T19:01:12Z'
          updated_at: '2011-01-26T19:14:43Z'
          permissions:
            pull: true
            triage: false
            push: false
            maintain: false
            admin: false
          allow_rebase_merge: true
          temp_clone_token: ABTLWHOULUVAXGTRYU7OC2876QJ2O
          allow_squash_merge: true
          allow_auto_merge: false
          delete_branch_on_merge: true
          allow_merge_commit: true
          subscribers_count: 42
          network_count: 0
        temp_clone_token: ABTLWHOULUVAXGTRYU7OC2876QJ2O
        allow_squash_merge: true
        allow_auto_merge: false
        delete_branch_on_merge: true
        allow_merge_commit: true
        subscribers_count: 42
        network_count: 0
        license:
          key: mit
          name: MIT License
          url: https://api.github.com/licenses/mit
          spdx_id: MIT
          node_id: MDc6TGljZW5zZW1pdA==
          html_url: https://api.github.com/licenses/mit
        forks: 1
        open_issues: 1
        watchers: 1
    group-mapping:
      value:
        groups:
          - group_id: '123'
            group_name: Octocat admins
            group_description: The people who configure your octoworld.
          - group_id: '456'
            group_name: Octocat docs members
            group_description: The people who make your octoworld come to life.
    team-items-response-if-child-teams-exist:
      value:
        - id: 2
          node_id: MDQ6VGVhbTI=
          url: https://api.github.com/teams/2
          name: Original Roster
          slug: original-roster
          description: Started it all.
          privacy: closed
          permission: admin
          members_url: https://api.github.com/teams/2/members{/member}
          repositories_url: https://api.github.com/teams/2/repos
          parent:
            id: 1
            node_id: MDQ6VGVhbTE=
            url: https://api.github.com/teams/1
            html_url: https://github.com/orgs/github/teams/justice-league
            name: Justice League
            slug: justice-league
            description: A great team.
            privacy: closed
            permission: admin
            members_url: https://api.github.com/teams/1/members{/member}
            repositories_url: https://api.github.com/teams/1/repos
          html_url: https://github.com/orgs/rails/teams/core
    team-repository-alternative-response-with-extra-repository-information:
      value:
        id: 1296269
        node_id: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
        name: Hello-World
        full_name: octocat/Hello-World
        owner:
          login: octocat
          id: 1
          node_id: MDQ6VXNlcjE=
          avatar_url: https://github.com/images/error/octocat_happy.gif
          gravatar_id: ''
          url: https://api.github.com/users/octocat
          html_url: https://github.com/octocat
          followers_url: https://api.github.com/users/octocat/followers
          following_url: https://api.github.com/users/octocat/following{/other_user}
          gists_url: https://api.github.com/users/octocat/gists{/gist_id}
          starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
          subscriptions_url: https://api.github.com/users/octocat/subscriptions
          organizations_url: https://api.github.com/users/octocat/orgs
          repos_url: https://api.github.com/users/octocat/repos
          events_url: https://api.github.com/users/octocat/events{/privacy}
          received_events_url: https://api.github.com/users/octocat/received_events
          type: User
          site_admin: false
        private: false
        html_url: https://github.com/octocat/Hello-World
        description: This your first repo!
        fork: false
        url: https://api.github.com/repos/octocat/Hello-World
        archive_url: https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
        assignees_url: https://api.github.com/repos/octocat/Hello-World/assignees{/user}
        blobs_url: https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
        branches_url: https://api.github.com/repos/octocat/Hello-World/branches{/branch}
        collaborators_url: https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
        comments_url: https://api.github.com/repos/octocat/Hello-World/comments{/number}
        commits_url: https://api.github.com/repos/octocat/Hello-World/commits{/sha}
        compare_url: https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
        contents_url: https://api.github.com/repos/octocat/Hello-World/contents/{+path}
        contributors_url: https://api.github.com/repos/octocat/Hello-World/contributors
        deployments_url: https://api.github.com/repos/octocat/Hello-World/deployments
        downloads_url: https://api.github.com/repos/octocat/Hello-World/downloads
        events_url: https://api.github.com/repos/octocat/Hello-World/events
        forks_url: https://api.github.com/repos/octocat/Hello-World/forks
        git_commits_url: https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
        git_refs_url: https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
        git_tags_url: https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
        git_url: git:github.com/octocat/Hello-World.git
        issue_comment_url: https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
        issue_events_url: https://api.github.com/repos/octocat/Hello-World/issues/events{/number}
        issues_url: https://api.github.com/repos/octocat/Hello-World/issues{/number}
        keys_url: https://api.github.com/repos/octocat/Hello-World/keys{/key_id}
        labels_url: https://api.github.com/repos/octocat/Hello-World/labels{/name}
        languages_url: https://api.github.com/repos/octocat/Hello-World/languages
        merges_url: https://api.github.com/repos/octocat/Hello-World/merges
        milestones_url: https://api.github.com/repos/octocat/Hello-World/milestones{/number}
        notifications_url: https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
        pulls_url: https://api.github.com/repos/octocat/Hello-World/pulls{/number}
        releases_url: https://api.github.com/repos/octocat/Hello-World/releases{/id}
        ssh_url: git@github.com:octocat/Hello-World.git
        stargazers_url: https://api.github.com/repos/octocat/Hello-World/stargazers
        statuses_url: https://api.github.com/repos/octocat/Hello-World/statuses/{sha}
        subscribers_url: https://api.github.com/repos/octocat/Hello-World/subscribers
        subscription_url: https://api.github.com/repos/octocat/Hello-World/subscription
        tags_url: https://api.github.com/repos/octocat/Hello-World/tags
        teams_url: https://api.github.com/repos/octocat/Hello-World/teams
        trees_url: https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
        clone_url: https://github.com/octocat/Hello-World.git
        mirror_url: git:git.example.com/octocat/Hello-World
        hooks_url: https://api.github.com/repos/octocat/Hello-World/hooks
        svn_url: https://svn.github.com/octocat/Hello-World
        homepage: https://github.com
        language: null
        forks_count: 9
        stargazers_count: 80
        watchers_count: 80
        size: 108
        default_branch: master
        open_issues_count: 0
        is_template: false
        topics:
          - octocat
          - atom
          - electron
          - api
        has_issues: true
        has_projects: true
        has_wiki: true
        has_pages: false
        has_downloads: true
        archived: false
        disabled: false
        visibility: public
        pushed_at: '2011-01-26T19:06:43Z'
        created_at: '2011-01-26T19:01:12Z'
        updated_at: '2011-01-26T19:14:43Z'
        permissions:
          admin: false
          maintain: false
          push: false
          triage: false
          pull: true
        role_name: read
        allow_rebase_merge: true
        template_repository:
          id: 1296269
          node_id: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
          name: Hello-World-Template
          full_name: octocat/Hello-World-Template
          owner:
            login: octocat
            id: 1
            node_id: MDQ6VXNlcjE=
            avatar_url: https://github.com/images/error/octocat_happy.gif
            gravatar_id: ''
            url: https://api.github.com/users/octocat
            html_url: https://github.com/octocat
            followers_url: https://api.github.com/users/octocat/followers
            following_url: https://api.github.com/users/octocat/following{/other_user}
            gists_url: https://api.github.com/users/octocat/gists{/gist_id}
            starred_url: https://api.github.com/users/octocat/starred{/owner}{/repo}
            subscriptions_url: https://api.github.com/users/octocat/subscriptions
            organizations_url: https://api.github.com/users/octocat/orgs
            repos_url: https://api.github.com/users/octocat/repos
            events_url: https://api.github.com/users/octocat/events{/privacy}
            received_events_url: https://api.github.com/users/octocat/received_events
            type: User
            site_admin: false
          private: false
          html_url: https://github.com/octocat/Hello-World-Template
          description: This your first repo!
          fork: false
          url: https://api.github.com/repos/octocat/Hello-World-Template
          archive_url: https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}
          assignees_url: https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}
          blobs_url: https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}
          branches_url: https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}
          collaborators_url: https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}
          comments_url: https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}
          commits_url: https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}
          compare_url: https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}
          contents_url: https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}
          contributors_url: https://api.github.com/repos/octocat/Hello-World-Template/contributors
          deployments_url: https://api.github.com/repos/octocat/Hello-World-Template/deployments
          downloads_url: https://api.github.com/repos/octocat/Hello-World-Template/downloads
          events_url: https://api.github.com/repos/octocat/Hello-World-Template/events
          forks_url: https://api.github.com/repos/octocat/Hello-World-Template/forks
          git_commits_url: https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}
          git_refs_url: https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}
          git_tags_url: https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}
          git_url: git:github.com/octocat/Hello-World-Template.git
          issue_comment_url: https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}
          issue_events_url: https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}
          issues_url: https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}
          keys_url: https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}
          labels_url: https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}
          languages_url: https://api.github.com/repos/octocat/Hello-World-Template/languages
          merges_url: https://api.github.com/repos/octocat/Hello-World-Template/merges
          milestones_url: https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}
          notifications_url: https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}
          pulls_url: https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}
          releases_url: https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}
          ssh_url: git@github.com:octocat/Hello-World-Template.git
          stargazers_url: https://api.github.com/repos/octocat/Hello-World-Template/stargazers
          statuses_url: https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}
          subscribers_url: https://api.github.com/repos/octocat/Hello-World-Template/subscribers
          subscription_url: https://api.github.com/repos/octocat/Hello-World-Template/subscription
          tags_url: https://api.github.com/repos/octocat/Hello-World-Template/tags
          teams_url: https://api.github.com/repos/octocat/Hello-World-Template/teams
          trees_url: https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}
          clone_url: https://github.com/octocat/Hello-World-Template.git
          mirror_url: git:git.example.com/octocat/Hello-World-Template
          hooks_url: https://api.github.com/repos/octocat/Hello-World-Template/hooks
          svn_url: https://svn.github.com/octocat/Hello-World-Template
          homepage: https://github.com
          language: null
          forks: 9
          forks_count: 9
          stargazers_count: 80
          watchers_count: 80
          watchers: 80
          size: 108
          default_branch: master
          open_issues: 0
          open_issues_count: 0
          is_template: true
          license:
            key: mit
            name: MIT License
            url: https://api.github.com/licenses/mit
            spdx_id: MIT
            node_id: MDc6TGljZW5zZW1pdA==
            html_url: https://api.github.com/licenses/mit
          topics:
            - octocat
            - atom
            - electron
            - api
          has_issues: true
          has_projects: true
          has_wiki: true
          has_pages: false
          has_downloads: true
          archived: false
          disabled: false
          visibility: public
          pushed_at: '2011-01-26T19:06:43Z'
          created_at: '2011-01-26T19:01:12Z'
          updated_at: '2011-01-26T19:14:43Z'
          permissions:
            pull: true
            triage: false
            push: false
            maintain: false
            admin: false
          allow_rebase_merge: true
          temp_clone_token: ABTLWHOULUVAXGTRYU7OC2876QJ2O
          allow_squash_merge: true
          allow_auto_merge: false
          delete_branch_on_merge: true
          allow_merge_commit: true
          subscribers_count: 42
          network_count: 0
        temp_clone_token: ABTLWHOULUVAXGTRYU7OC2876QJ2O
        allow_squash_merge: true
        allow_auto_merge: false
        delete_branch_on_merge: true
        allow_merge_commit: true
        subscribers_count: 42
        network_count: 0
        license:
          key: mit
          name: MIT License
          url: https://api.github.com/licenses/mit
          spdx_id: MIT
          node_id: MDc6TGljZW5zZW1pdA==
          html_url: https://api.github.com/licenses/mit
        forks: 1
        open_issues: 1
        watchers: 1
    group-mapping-2:
      value:
        groups:
          - group_id: '123'
            group_name: Octocat admins
            group_description: The people who configure your octoworld.
    team-full-items:
      value:
        - id: 1
          node_id: MDQ6VGVhbTE=
          url: https://api.github.com/teams/1
          html_url: https://github.com/orgs/github/teams/justice-league
          name: Justice League
          slug: justice-league
          description: A great team.
          privacy: closed
          permission: admin
          members_url: https://api.github.com/teams/1/members{/member}
          repositories_url: https://api.github.com/teams/1/repos
          parent: null
          members_count: 3
          repos_count: 10
          created_at: '2017-07-14T16:53:42Z'
          updated_at: '2017-08-17T12:37:15Z'
          organization:
            login: github
            id: 1
            node_id: MDEyOk9yZ2FuaXphdGlvbjE=
            url: https://api.github.com/orgs/github
            repos_url: https://api.github.com/orgs/github/repos
            events_url: https://api.github.com/orgs/github/events
            hooks_url: https://api.github.com/orgs/github/hooks
            issues_url: https://api.github.com/orgs/github/issues
            members_url: https://api.github.com/orgs/github/members{/member}
            public_members_url: https://api.github.com/orgs/github/public_members{/member}
            avatar_url: https://github.com/images/error/octocat_happy.gif
            description: A great organization
            name: github
            company: GitHub
            blog: https://github.com/blog
            location: San Francisco
            email: octocat@github.com
            is_verified: true
            has_organization_projects: true
            has_repository_projects: true
            public_repos: 2
            public_gists: 1
            followers: 20
            following: 0
            html_url: https://github.com/octocat
            created_at: '2008-01-14T04:33:35Z'
            updated_at: '2017-08-17T12:37:15Z'
            type: Organization
  requestBodies: {}
  headers:
    link:
      example: <https://api.github.com/resource?page=2>; rel="next", <https://api.github.com/resource?page=5>; rel="last"
      schema:
        type: string
  links: {}
  x-stackQL-resources:
    external_groups:
      id: github.teams.external_groups
      name: external_groups
      title: External Groups
      methods:
        list_linked_external_idp_groups_to_team_for_org:
          operation:
            $ref: '#/paths/~1organizations~1{org}~1team~1{team_slug}~1external-groups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.groups
        external_idp_group_info_for_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1external-group~1{group_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_external_idp_groups_for_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1external-groups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        link_external_idp_group_to_team_for_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1external-groups/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        unlink_external_idp_group_from_team_for_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1external-groups/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/external_groups/methods/list_linked_external_idp_groups_to_team_for_org'
          - $ref: '#/components/x-stackQL-resources/external_groups/methods/list_external_idp_groups_for_org'
        insert: []
        update: []
        delete: []
    team_sync:
      id: github.teams.team_sync
      name: team_sync
      title: Team Sync Group Mapping
      methods:
        list_idp_groups_for_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1team-sync~1groups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.groups
        list_idp_groups_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1team-sync~1group-mappings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.groups
        create_or_update_idp_group_connections_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1team-sync~1group-mappings/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_idp_groups_for_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1team-sync~1group-mappings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.groups
        create_or_update_idp_group_connections_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1team-sync~1group-mappings/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/team_sync/methods/list_idp_groups_in_org'
          - $ref: '#/components/x-stackQL-resources/team_sync/methods/list_idp_groups_for_org'
          - $ref: '#/components/x-stackQL-resources/team_sync/methods/list_idp_groups_for_legacy'
        insert:
          - $ref: '#/components/x-stackQL-resources/team_sync/methods/create_or_update_idp_group_connections_in_org'
          - $ref: '#/components/x-stackQL-resources/team_sync/methods/create_or_update_idp_group_connections_legacy'
        update: []
        delete: []
    projects:
      id: github.teams.projects
      name: projects
      title: Teams Projects
      methods:
        list_projects_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1projects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        check_permissions_for_project_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1projects~1{project_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        add_or_update_project_permissions_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1projects~1{project_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        remove_project_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1projects~1{project_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/projects/methods/list_projects_in_org'
        insert:
          - $ref: '#/components/x-stackQL-resources/projects/methods/add_or_update_project_permissions_in_org'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/projects/methods/remove_project_in_org'
    repos:
      id: github.teams.repos
      name: repos
      title: Teams Repos
      methods:
        list_repos_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1repos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        check_permissions_for_repo_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1repos~1{owner}~1{repo}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        add_or_update_repo_permissions_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1repos~1{owner}~1{repo}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        remove_repo_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1repos~1{owner}~1{repo}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repos/methods/list_repos_in_org'
        insert:
          - $ref: '#/components/x-stackQL-resources/repos/methods/add_or_update_repo_permissions_in_org'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/repos/methods/remove_repo_in_org'
    child_teams:
      id: github.teams.child_teams
      name: child_teams
      title: Child Teams
      methods:
        list_child_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1teams/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/child_teams/methods/list_child_in_org'
        insert: []
        update: []
        delete: []
    legacy_teams:
      id: github.teams.legacy_teams
      name: legacy_teams
      title: Teams Legacy
      methods:
        get_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/legacy_teams/methods/get_legacy'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/legacy_teams/methods/delete_legacy'
    legacy_child:
      id: github.teams.legacy_child
      name: legacy_child
      title: Teams Legacy Child
      methods:
        list_child_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1teams/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/legacy_child/methods/list_child_legacy'
        insert: []
        update: []
        delete: []
    legacy_projects:
      id: github.teams.legacy_projects
      name: legacy_projects
      title: Teams Legacy Projects
      methods:
        list_projects_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1projects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        check_permissions_for_project_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1projects~1{project_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        add_or_update_project_permissions_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1projects~1{project_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        remove_project_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1projects~1{project_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/legacy_projects/methods/list_projects_legacy'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/legacy_projects/methods/remove_project_legacy'
    legacy_repos:
      id: github.teams.legacy_repos
      name: legacy_repos
      title: Teams Legacy Repos
      methods:
        list_repos_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1repos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        check_permissions_for_repo_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1repos~1{owner}~1{repo}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        add_or_update_repo_permissions_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1repos~1{owner}~1{repo}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        remove_repo_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1repos~1{owner}~1{repo}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/legacy_repos/methods/list_repos_legacy'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/legacy_repos/methods/remove_repo_legacy'
    teams:
      id: github.teams.teams
      name: teams
      title: Teams
      methods:
        list:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_by_name:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        list_for_authenticated_user:
          operation:
            $ref: '#/paths/~1user~1teams/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/teams/methods/get_by_name'
          - $ref: '#/components/x-stackQL-resources/teams/methods/list'
          - $ref: '#/components/x-stackQL-resources/teams/methods/list_for_authenticated_user'
        insert:
          - $ref: '#/components/x-stackQL-resources/teams/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/teams/methods/delete_in_org'
    discussions:
      id: github.teams.discussions
      name: discussions
      title: Discussions
      methods:
        list_discussions_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1discussions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_discussion_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1discussions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_discussion_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1discussions~1{discussion_number}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_discussion_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1discussions~1{discussion_number}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_discussion_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1discussions~1{discussion_number}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        list_discussions_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1discussions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_discussion_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1discussions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_discussion_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1discussions~1{discussion_number}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_discussion_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1discussions~1{discussion_number}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_discussion_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1discussions~1{discussion_number}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/discussions/methods/get_discussion_in_org'
          - $ref: '#/components/x-stackQL-resources/discussions/methods/list_discussions_in_org'
          - $ref: '#/components/x-stackQL-resources/discussions/methods/get_discussion_legacy'
          - $ref: '#/components/x-stackQL-resources/discussions/methods/list_discussions_legacy'
        insert:
          - $ref: '#/components/x-stackQL-resources/discussions/methods/create_discussion_in_org'
          - $ref: '#/components/x-stackQL-resources/discussions/methods/create_discussion_legacy'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/discussions/methods/delete_discussion_in_org'
          - $ref: '#/components/x-stackQL-resources/discussions/methods/delete_discussion_legacy'
    discussion_comments:
      id: github.teams.discussion_comments
      name: discussion_comments
      title: Discussion_comments
      methods:
        list_discussion_comments_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1discussions~1{discussion_number}~1comments/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_discussion_comment_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1discussions~1{discussion_number}~1comments/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_discussion_comment_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1discussions~1{discussion_number}~1comments~1{comment_number}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_discussion_comment_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1discussions~1{discussion_number}~1comments~1{comment_number}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_discussion_comment_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1discussions~1{discussion_number}~1comments~1{comment_number}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        list_discussion_comments_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1discussions~1{discussion_number}~1comments/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_discussion_comment_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1discussions~1{discussion_number}~1comments/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_discussion_comment_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1discussions~1{discussion_number}~1comments~1{comment_number}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_discussion_comment_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1discussions~1{discussion_number}~1comments~1{comment_number}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_discussion_comment_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1discussions~1{discussion_number}~1comments~1{comment_number}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/discussion_comments/methods/get_discussion_comment_in_org'
          - $ref: '#/components/x-stackQL-resources/discussion_comments/methods/list_discussion_comments_in_org'
          - $ref: '#/components/x-stackQL-resources/discussion_comments/methods/get_discussion_comment_legacy'
          - $ref: '#/components/x-stackQL-resources/discussion_comments/methods/list_discussion_comments_legacy'
        insert:
          - $ref: '#/components/x-stackQL-resources/discussion_comments/methods/create_discussion_comment_in_org'
          - $ref: '#/components/x-stackQL-resources/discussion_comments/methods/create_discussion_comment_legacy'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/discussion_comments/methods/delete_discussion_comment_in_org'
          - $ref: '#/components/x-stackQL-resources/discussion_comments/methods/delete_discussion_comment_legacy'
    membership:
      id: github.teams.membership
      name: membership
      title: Team Membership
      methods:
        get_membership_for_user_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1memberships~1{username}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        add_or_update_membership_for_user_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1memberships~1{username}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        remove_membership_for_user_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1memberships~1{username}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_membership_for_user_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1memberships~1{username}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        add_or_update_membership_for_user_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1memberships~1{username}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        remove_membership_for_user_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1memberships~1{username}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/membership/methods/get_membership_for_user_in_org'
          - $ref: '#/components/x-stackQL-resources/membership/methods/get_membership_for_user_legacy'
        insert:
          - $ref: '#/components/x-stackQL-resources/membership/methods/add_or_update_membership_for_user_in_org'
          - $ref: '#/components/x-stackQL-resources/membership/methods/add_or_update_membership_for_user_legacy'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/membership/methods/remove_membership_for_user_in_org'
          - $ref: '#/components/x-stackQL-resources/membership/methods/remove_membership_for_user_legacy'
    pending_invitations:
      id: github.teams.pending_invitations
      name: pending_invitations
      title: Pending Invitations
      methods:
        list_pending_invitations_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1invitations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_pending_invitations_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1invitations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/pending_invitations/methods/list_pending_invitations_in_org'
          - $ref: '#/components/x-stackQL-resources/pending_invitations/methods/list_pending_invitations_legacy'
        insert: []
        update: []
        delete: []
    members:
      id: github.teams.members
      name: members
      title: Members
      methods:
        list_members_in_org:
          operation:
            $ref: '#/paths/~1orgs~1{org}~1teams~1{team_slug}~1members/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_members_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1members/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_member_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1members~1{username}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        add_member_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1members~1{username}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        remove_member_legacy:
          operation:
            $ref: '#/paths/~1teams~1{team_id}~1members~1{username}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/members/methods/list_members_in_org'
          - $ref: '#/components/x-stackQL-resources/members/methods/get_member_legacy'
          - $ref: '#/components/x-stackQL-resources/members/methods/list_members_legacy'
        insert:
          - $ref: '#/components/x-stackQL-resources/members/methods/add_member_legacy'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/members/methods/remove_member_legacy'
openapi: 3.0.3
servers:
  - url: https://api.github.com
tags:
  - name: actions
    description: Endpoints to manage GitHub Actions using the REST API.
  - name: activity
    description: Activity APIs provide access to notifications, subscriptions, and timelines.
  - name: apps
    description: Information for integrations and installations.
  - name: billing
    description: Monitor charges and usage from Actions and Packages.
  - name: checks
    description: Rich interactions with checks run by your integrations.
  - name: code-scanning
    description: Retrieve code scanning alerts from a repository.
  - name: codes-of-conduct
    description: Insight into codes of conduct for your communities.
  - name: codespaces
    description: Endpoints to manage Codespaces using the REST API.
  - name: emojis
    description: List emojis available to use on GitHub.
  - name: enterprise-admin
    description: Administer a GitHub enterprise.
  - name: dependabot
    description: Endpoints to manage Dependabot.
  - name: gists
    description: View, modify your gists.
  - name: git
    description: Raw Git functionality.
  - name: gitignore
    description: View gitignore templates
  - name: interactions
    description: Owner or admin management of users interactions.
  - name: issues
    description: Interact with GitHub Issues.
  - name: licenses
    description: View various OSS licenses.
  - name: markdown
    description: Render GitHub flavored markdown
  - name: meta
    description: Endpoints that give information about the API.
  - name: migrations
    description: Move projects to or from GitHub.
  - name: oauth-authorizations
    description: Manage access of OAuth applications
  - name: orgs
    description: Interact with GitHub Orgs.
  - name: packages
    description: Manage packages for authenticated users and organizations.
  - name: projects
    description: Interact with GitHub Projects.
  - name: pulls
    description: Interact with GitHub Pull Requests.
  - name: rate-limit
    description: Check your current rate limit status
  - name: reactions
    description: Interact with reactions to various GitHub entities.
  - name: repos
    description: Interact with GitHub Repos.
  - name: scim
    description: Provisioning of GitHub organization membership for SCIM-enabled providers.
  - name: search
    description: Look for stuff on GitHub.
  - name: secret-scanning
    description: Retrieve secret scanning alerts from a repository.
  - name: server-statistics
    description: GHES statistics
  - name: teams
    description: Interact with GitHub Teams.
  - name: users
    description: Interact with and view information about users and also current user.
externalDocs:
  description: GitHub v3 REST API
  url: https://docs.github.com/rest/
info:
  version: 1.1.4
  title: GitHub v3 REST API - teams
  description: Interact with GitHub Teams.
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT
  termsOfService: https://docs.github.com/articles/github-terms-of-service
  contact:
    name: Support
    url: https://support.github.com/contact?tags=dotcom-rest-api
