openapi: 3.0.1
servers:
  - url: 'https://api.linode.com/v4'
  - url: 'https://api.linode.com/v4beta'
info:
  version: 4.147.0
  title: Linode API - networking
  description: networking
  contact:
    name: Linode
    url: 'https://linode.com'
    email: support@linode.com
tags:
  - name: Account
    description: 'Use the Account endpoints to manage user settings, billing, and payments. You can also initiate and maintain OAuth client application authentication, enable the Linode Managed service, and create new users on your account.'
  - name: Databases
    description: 'Managed Databases is Linode''s fully-managed, high-performance database service. Use the Managed Databases endpoints to create and manage database clusters.'
  - name: Domains
    description: Use the Domains endpoints to create and manage domains and domain records on your account.
  - name: Images
    description: 'Use the Images endpoints to capture, store, and manage custom Linode images.'
  - name: Linode Instances
    description: 'Use the Linode Instances endpoints to create, configure, and manage your Linode instances. You can also manage the Linode Backup service; maintain and manage configuration profiles; create and maintain disks, intiate a host migration; view Linode Instance statistics; and more.'
  - name: Linode Types
    description: 'Use the Linode Types endpoints to retrieve information about Linode plan types, including pricing information, hardware resources, and network transfer allotment.'
  - name: Linode Kubernetes Engine (LKE)
    description: Linode Kubernetes Engine (LKE) is Linode's managed Kubernetes service. Use the LKE endpoints to create and manage Kubernetes clusters and their associated Node Pools.
  - name: Longview
    description: Longview is Linode's system-level monitoring and graphing service. Use the Longview endpoints to manage your Longview subscription and plan and to create and maintain Longview clients.
  - name: Managed
    description: 'Managed is Linode''s incident response service. Use the Managed endpoints to register a service to be monitored by the Managed Service team, provide secure access to your managed services,  view information about detected issues, and more.'
  - name: Networking
    description: 'Use the Networking endpoints to view all IP addresses on your account, reorganize assigned IPv4 addresses, update RDNS, and configure IP sharing.'
  - name: NodeBalancers
    description: 'NodeBalancers is Linode''s load balancing service. Use the NodeBalancers endpoints to create and manage NodeBalancers. You can also create and maintain configurations; create and maintain nodes, and view statistics.'
  - name: Object Storage
    description: 'Object Storage is Linode''s S3-compatible data storage service. Use the Object Storage endpoints to create and maintaining buckets, add and remove objects from buckets, create and maintain Object Storage keys, and cancel the Object Storage service.'
  - name: Profile
    description: 'Use the Profile endpoints to manage your Linode user profile preferences and security settings. This includes creating and maintaining personal access tokens, creating and maintaining SSH keys, confirming and enabling two-factor authentication, and updating user and profile preferences.'
  - name: Regions
    description: 'Use the Regions endpoints to view information about the various Linode data center regions, including the service capabilities for each region, country, status, and more.'
  - name: StackScripts
    description: Linode StackScripts allow you to create reusable scripts to configure new Linode instances. Use the StackScripts endpoints to create and manage StackScripts on your account.
  - name: Support
    description: 'Use the Support endpoints to open, view, and close Linode Support tickets. You can also create and manage your Support ticket replies.'
  - name: Tags
    description: 'Tags allow you to organize and group your various Linode services. Use the Tags endpoints to create, assign, and delete your account tags.'
  - name: Volumes
    description: 'Volumes is Linode''s block storage service. Use the Volumes endpoints to create, attach, and manage your account Volumes.'
components:
  schemas:
    IPAddress:
      type: object
      description: |
        An IP address that exists in Linode's system, either IPv4 or IPv6.
      properties:
        address:
          type: string
          format: ip
          description: |
            The IP address.
          example: 97.107.143.141
          readOnly: true
          x-linode-cli-display: 1
        gateway:
          type: string
          nullable: true
          format: ip
          description: |
            The default gateway for this address.
          example: 97.107.143.1
          readOnly: true
        subnet_mask:
          type: string
          format: ip
          description: |
            The mask that separates host bits from network bits for this address.
          example: 255.255.255.0
          readOnly: true
        prefix:
          type: integer
          description: |
            The number of bits set in the subnet mask.
          example: 24
          readOnly: true
        type:
          type: string
          enum:
            - ipv4
            - ipv6
            - ipv6/pool
            - ipv6/range
          description: |
            The type of address this is.
          example: ipv4
          readOnly: true
          x-linode-cli-display: 2
        public:
          type: boolean
          description: |
            Whether this is a public or private IP address.
          example: true
          readOnly: true
          x-linode-cli-display: 3
        rdns:
          type: string
          description: |
            The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
          x-linode-cli-display: 4
          example: test.example.org
          nullable: true
        linode_id:
          type: integer
          description: |
            The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.
          example: 123
          readOnly: true
          x-linode-cli-display: 6
        region:
          type: string
          description: |
            The Region this IP address resides in.
          example: us-east
          readOnly: true
          x-linode-filterable: true
          x-linode-cli-display: 5
    PaginationEnvelope:
      type: object
      description: |
        An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.
      properties:
        pages:
          type: integer
          readOnly: true
          description: 'The total number of [pages](/docs/api/#pagination).'
          example: 1
        page:
          type: integer
          readOnly: true
          description: 'The current [page](/docs/api/#pagination).'
          example: 1
        results:
          type: integer
          readOnly: true
          description: The total number of results.
          example: 1
    ErrorObject:
      type: object
      description: |
        An object for describing a single error that occurred during the processing of a request.
      properties:
        reason:
          type: string
          description: |
            What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
          example: fieldname must be a valid value
        field:
          type: string
          description: |
            The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
          example: fieldname
    IPAddressesAssignRequest:
      type: object
      description: Request object for IP Addresses Assign (POST /networking/ips/assign).
      required:
        - region
        - assignments
      properties:
        region:
          type: string
          description: |
            The ID of the Region in which these assignments are to take place. All IPs and Linodes must exist in this Region.
          example: us-east
        assignments:
          type: array
          description: |
            The list of assignments to make. You must have read_write access to all IPs being assigned and all Linodes being assigned to in order for the assignments to succeed.
          required:
            - address
            - linode_id
          items:
            type: object
            properties:
              address:
                type: string
                format: ipv4|ipv6/prefix_length
                description: |
                  The IPv4 address or IPv6 range for this assignment.
                  * Must be an IPv4 address or an IPv6 range you can access in the Region specified.
                  * IPv6 ranges must include a prefix length of `/56` or `/64`, for example: `2001:db8:3c4d:15::/64`.
                  * Assignment of an IPv6 range to a Linode updates the route target of the range to the assigned Linode's SLAAC address.
                  * May be a public or private address.
                example: 192.0.2.1
              linode_id:
                type: integer
                description: |
                  The ID of the Linode to assign this address to. The IP's previous Linode will lose this address, and must end up with at least one public address and no more than one private address once all assignments have been made.
                example: 123
    IPAddressesShareRequest:
      type: object
      description: A request object IP Addresses Share (POST /networking/ips/share)
      required:
        - linode_id
        - ips
      properties:
        linode_id:
          type: integer
          description: |
            The ID of the primary Linode that the addresses will be shared with.
          example: 123
        ips:
          type: array
          items:
            type: string
            format: ip
          example:
            - 192.0.2.1
            - '2001:db8:3c4d:15::'
          description: |
            A list of secondary Linode IPs to share with the primary Linode.
            * Can include both IPv4 addresses and IPv6 ranges (omit /56 and /64 prefix lengths)
            * Can include both private and public IPv4 addresses.
            * You must have access to all of these addresses and they must be in the same Region as the primary Linode.
            * Enter an empty array to remove all shared IP addresses.
    IPv6Pool:
      type: object
      description: |
        An object representing an IPv6 pool.
      properties:
        range:
          type: string
          description: |
            The IPv6 range of addresses in this pool.
          example: '2600:3c01::2:5000:0'
          readOnly: true
          x-linode-cli-display: 1
        prefix:
          type: integer
          description: |
            The prefix length of the address, denoting how many addresses can be assigned from this pool calculated as 2 <sup>128-prefix</sup>.
          example: 124
          x-linode-cli-display: 2
        region:
          type: string
          description: |
            The region for this pool of IPv6 addresses.
          example: us-east
          readOnly: true
          x-linode-cli-display: 3
          x-linode-filterable: true
        route_target:
          type: string
          description: |
            The last address in this block of IPv6 addresses.
          example: '2600:3c01::2:5000:f'
          nullable: true
    IPv6Range:
      type: object
      description: |
        An object representing an IPv6 range.
      properties:
        range:
          type: string
          description: |
            The IPv6 range of addresses in this pool.
          example: '2600:3c01::'
          readOnly: true
          x-linode-cli-display: 1
        prefix:
          type: integer
          description: |
            The prefix length of the address, denoting how many addresses can be assigned from this range calculated as 2 <sup>128-prefix</sup>.
          example: 64
          x-linode-cli-display: 2
        region:
          type: string
          description: |
            The region for this range of IPv6 addresses.
          example: us-east
          readOnly: true
          x-linode-cli-display: 3
        route_target:
          type: string
          description: |
            The last address in this block of IPv6 addresses.
          example: '2600:3c01::ffff:ffff:ffff:ffff'
          nullable: true
    IPv6RangeBGP:
      type: object
      description: |
        An object representing an IPv6 range.
      properties:
        range:
          type: string
          description: |
            The IPv6 range of addresses in this pool.
          example: '2600:3c01::'
          readOnly: true
          x-linode-cli-display: 1
        prefix:
          type: integer
          description: |
            The prefix length of the address, denoting how many addresses can be assigned from this range calculated as 2 <sup>128-prefix</sup>.
          example: 64
          x-linode-cli-display: 2
        region:
          type: string
          description: |
            The region for this range of IPv6 addresses.
          example: us-east
          readOnly: true
          x-linode-cli-display: 3
        is_bgp:
          type: boolean
          description: |
            Whether this IPv6 range is shared.
          example: false
          readOnly: true
        linodes:
          type: array
          items:
            type: integer
          example:
            - 123
          description: |
            A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.
          readOnly: true
          x-linode-cli-display: 4
    Firewall:
      type: object
      description: |
        A resource that controls incoming and outgoing network traffic to a Linode service. Only one Firewall can be attached to a Linode at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a Linode service. Currently, Firewalls can only be assigned to Linode instances.
      properties:
        id:
          x-linode-filterable: true
          type: integer
          readOnly: true
          description: |
            The Firewall's unique ID.
          example: 123
          x-linode-cli-display: 1
        label:
          x-linode-filterable: true
          type: string
          description: |
            The Firewall's label, for display purposes only.

            Firewall labels have the following constraints:

              * Must begin and end with an alphanumeric character.
              * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).
              * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.
              * Must be between 3 and 32 characters.
              * Must be unique.
          example: firewall123
          minLength: 3
          maxLength: 32
          pattern: '^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$'
          x-linode-cli-display: 2
        created:
          x-linode-filterable: true
          type: string
          format: date-time
          readOnly: true
          description: |
            When this Firewall was created.
          example: '2018-01-01T00:01:01'
          x-linode-cli-display: 4
        updated:
          x-linode-filterable: true
          type: string
          format: date-time
          readOnly: true
          description: |
            When this Firewall was last updated.
          example: '2018-01-02T00:01:01'
          x-linode-cli-display: 5
        status:
          type: string
          readOnly: true
          description: |
            The status of this Firewall.

              * When a Firewall is first created its status is `enabled`.
              * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.
              * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.
          enum:
            - enabled
            - disabled
            - deleted
          example: enabled
          x-linode-cli-display: 3
        rules:
          type: object
          description: |
            The inbound and outbound access rules to apply to the Firewall.

            A Firewall may have up to 25 rules across its inbound and outbound rulesets.
          properties:
            inbound:
              type: array
              x-linode-cli-format: json
              description: |
                The inbound rules for the firewall, as a JSON array.
              items:
                $ref: '#/components/schemas/FirewallRuleConfig'
            outbound:
              type: array
              x-linode-cli-format: json
              description: |
                The outbound rules for the firewall, as a JSON array.
              items:
                $ref: '#/components/schemas/FirewallRuleConfig'
            inbound_policy:
              type: string
              enum:
                - ACCEPT
                - DROP
              description: |
                The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.
              example: DROP
            outbound_policy:
              type: string
              enum:
                - ACCEPT
                - DROP
              description: |
                The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.
              example: DROP
        tags:
          x-linode-filterable: true
          description: |
            An array of tags applied to this object. Tags are for organizational purposes only.
          type: array
          items:
            type: string
          example:
            - example tag
            - another example
    FirewallRuleConfig:
      type: object
      description: |
        One of a Firewall's inbound or outbound access rules. The `ports` property can be used to allow traffic on a comma-separated list of different ports.
      properties:
        protocol:
          type: string
          enum:
            - TCP
            - UDP
            - ICMP
            - IPENCAP
          description: |
            The type of network traffic to allow.
          example: TCP
        ports:
          type: string
          description: |
            A string representing the port or ports on which traffic will be allowed:

            - The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.
            - A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.
            - Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.
            - Ports may not be specified if a rule's protocol is `ICMP` or `IPENCAP`.
            - At least one port must be specified if a rule's protocol is `TCP` or `UDP`.
            - The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.
          example: '22-24, 80, 443'
        addresses:
          type: object
          description: |
            Allowed IPv4 or IPv6 addresses. A Rule can have up to 255 addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.
          properties:
            ipv4:
              description: A list of IPv4 addresses or networks. Must be in IP/mask format.
              type: array
              items:
                type: string
              example:
                - 192.0.2.0/24
            ipv6:
              description: A list of IPv6 addresses or networks. Must be in IP/mask format.
              type: array
              items:
                type: string
              example:
                - '2001:DB8::/32'
        action:
          type: string
          enum:
            - ACCEPT
            - DROP
          description: |
            Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.
          example: ACCEPT
        label:
          type: string
          description: |
            Used to identify this rule. For display purposes only.
          example: firewallrule123
          minLength: 3
          maxLength: 32
        description:
          type: string
          description: |
            Used to describe this rule. For display purposes only.
          example: An example firewall rule description.
          minLength: 1
          maxLength: 100
    FirewallDevices:
      type: object
      description: |
        Associates a Firewall with a Linode service. A Firewall can be assigned to a single Linode service at a time. Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.
      properties:
        id:
          x-linode-filterable: true
          type: integer
          description: |
            The Device's unique ID
          example: 123
          x-linode-cli-display: 2
        created:
          x-linode-filterable: true
          type: string
          format: date-time
          readOnly: true
          description: |
            When this Device was created.
          example: '2018-01-01T00:01:01'
          x-linode-cli-display: 3
        updated:
          x-linode-filterable: true
          type: string
          format: date-time
          readOnly: true
          description: |
            When this Device was last updated.
          example: '2018-01-02T00:01:01'
          x-linode-cli-display: 4
        entity:
          type: object
          readOnly: true
          description: |
            The Linode service that this Firewall has been applied to.
          properties:
            id:
              description: The entity's ID
              type: integer
              example: 123
            type:
              description: The entity's type.
              type: string
              enum:
                - linode
              example: linode
            label:
              description: The entity's label.
              type: string
              readOnly: true
              example: my-linode
            url:
              description: |
                The URL you can use to access this entity.
              type: string
              format: url
              readOnly: true
              example: /v4/linode/instances/123
    Vlans:
      type: object
      description: |
        A virtual local area network (VLAN) associated with your Account.
      properties:
        label:
          type: string
          description: The name of this VLAN.
          example: vlan-example
          readOnly: true
          x-linode-cli-display: 2
          x-linode-filterable: true
        region:
          type: string
          description: |
            This VLAN's data center region.

            **Note:** Currently, a VLAN can only be assigned to a Linode
            within the same data center region.
          example: ap-west
          readOnly: true
          x-linode-cli-display: 1
          x-linode-filterable: true
        linodes:
          type: array
          description: |
            An array of Linode IDs attached to this VLAN.
          items:
            type: integer
          x-linode-cli-display: 3
          readOnly: true
          example:
            - 111
            - 222
        created:
          type: string
          format: date-time
          description: |
            The date this VLAN was created.
          example: '2020-01-01T00:01:01'
          readOnly: true
  parameters:
    pageOffset:
      name: page
      in: query
      description: The page of a collection to return.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page_size
      in: query
      description: The number of items to return per page.
      schema:
        type: integer
        minimum: 25
        maximum: 500
        default: 100
  responses:
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorObject'
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://login.linode.com/oauth/authorize'
          tokenUrl: 'https://login.linode.com/oauth/token'
          scopes:
            'account:read_only': Allows access to GET information about your Account.
            'account:read_write': Allows access to all endpoints related to your Account.
            'domains:read_only': Allows access to GET Domains on your Account.
            'domains:read_write': Allows access to all Domain endpoints.
            'events:read_only': Allows access to GET your Events.
            'events:read_write': Allows access to all endpoints related to your Events.
            'firewall:read_only': Allows access to GET information about your Firewalls.
            'firewall:read_write': Allows acces to all Firewall endpoints.
            'images:read_only': Allows access to GET your Images.
            'images:read_write': Allows access to all endpoints related to your Images.
            'ips:read_only': Allows access to GET your ips.
            'ips:read_write': Allows access to all endpoints related to your ips.
            'linodes:read_only': Allows access to GET Linodes on your Account.
            'linodes:read_write': Allow access to all endpoints related to your Linodes.
            'lke:read_only': Allows access to GET LKE Clusters on your Account.
            'lke:read_write': Allows access to all endpoints related to LKE Clusters on your Account.
            'longview:read_only': Allows access to GET your Longview Clients.
            'longview:read_write': Allows access to all endpoints related to your Longview Clients.
            'nodebalancers:read_only': Allows access to GET NodeBalancers on your Account.
            'nodebalancers:read_write': Allows access to all NodeBalancer endpoints.
            'object_storage:read_only': Allows access to GET information related to your Object Storage.
            'object_storage:read_write': Allows access to all Object Storage endpoints.
            'stackscripts:read_only': Allows access to GET your StackScripts.
            'stackscripts:read_write': Allows access to all endpoints related to your StackScripts.
            'volumes:read_only': Allows access to GET your Volumes.
            'volumes:read_write': Allows access to all endpoints related to your Volumes.
  links:
    bootLinode:
      operationId: bootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebootLinode:
      operationId: rebootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    shutdownLinode:
      operationId: shutdownLinodeInstance
      parameters:
        linodeId: $request.body#/id
    updateLinode:
      operationId: updateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    deleteLinode:
      operationId: deleteLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebuildLinode:
      operationId: rebuildLinodeInstance
      parameters:
        linodeId: $request.body#/id
    mutateLinode:
      operationId: mutateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    resizeLinode:
      operationId: resizeLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rescueLinode:
      operationId: rescueLinodeInstance
      parameters:
        linodeId: $request.body#/id
    cloneLinode:
      operationId: cloneLinodeInstance
      parameters:
        linodeId: $request.body#/id
    attachVolume:
      operationId: attachVolume
      parameters:
        volumeID: $request.body#/id
    cloneVolume:
      operationId: cloneVolume
      parameters:
        volumeId: $request.body#/id
    detachVolume:
      operationId: detachVolume
      parameters:
        volumeId: $request.body#/id
    resizeVolume:
      operationId: resizeVolume
      parameters:
        volumeId: $request.body#/id
  x-stackQL-resources:
    ips:
      id: linode.networking.ips
      name: ips
      title: Ips
      methods:
        getIPs:
          operation:
            $ref: '#/paths/~1networking~1ips/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getIPs:
          operation:
            $ref: '#/paths/~1networking~1ips/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        allocateIP:
          operation:
            $ref: '#/paths/~1networking~1ips/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getIP:
          operation:
            $ref: '#/paths/~1networking~1ips~1{address}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getIP:
          operation:
            $ref: '#/paths/~1networking~1ips~1{address}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateIP:
          operation:
            $ref: '#/paths/~1networking~1ips~1{address}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        assignIPs:
          operation:
            $ref: '#/paths/~1networking~1ips~1assign/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        shareIPs:
          operation:
            $ref: '#/paths/~1networking~1ips~1share/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ips/methods/getIPs'
          - $ref: '#/components/x-stackQL-resources/ips/methods/getIP'
        insert: []
        update: []
        delete: []
    assign:
      id: linode.networking.assign
      name: assign
      title: Assign
      methods:
        assignIPv4s:
          operation:
            $ref: '#/paths/~1networking~1ipv4~1assign/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    share:
      id: linode.networking.share
      name: share
      title: Share
      methods:
        shareIPv4s:
          operation:
            $ref: '#/paths/~1networking~1ipv4~1share/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    pools:
      id: linode.networking.pools
      name: pools
      title: Pools
      methods:
        getIPv6Pools:
          operation:
            $ref: '#/paths/~1networking~1ipv6~1pools/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getIPv6Pools:
          operation:
            $ref: '#/paths/~1networking~1ipv6~1pools/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/pools/methods/getIPv6Pools'
        insert: []
        update: []
        delete: []
    ranges:
      id: linode.networking.ranges
      name: ranges
      title: Ranges
      methods:
        getIPv6Ranges:
          operation:
            $ref: '#/paths/~1networking~1ipv6~1ranges/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getIPv6Ranges:
          operation:
            $ref: '#/paths/~1networking~1ipv6~1ranges/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postIPv6Range:
          operation:
            $ref: '#/paths/~1networking~1ipv6~1ranges/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getIPv6Range:
          operation:
            $ref: '#/paths/~1networking~1ipv6~1ranges~1{range}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getIPv6Range:
          operation:
            $ref: '#/paths/~1networking~1ipv6~1ranges~1{range}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteIPv6Range:
          operation:
            $ref: '#/paths/~1networking~1ipv6~1ranges~1{range}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ranges/methods/getIPv6Ranges'
          - $ref: '#/components/x-stackQL-resources/ranges/methods/getIPv6Range'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/ranges/methods/deleteIPv6Range'
    firewalls:
      id: linode.networking.firewalls
      name: firewalls
      title: Firewalls
      methods:
        getFirewalls:
          operation:
            $ref: '#/paths/~1networking~1firewalls/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getFirewalls:
          operation:
            $ref: '#/paths/~1networking~1firewalls/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createFirewalls:
          operation:
            $ref: '#/paths/~1networking~1firewalls/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getFirewall:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getFirewall:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateFirewall:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteFirewall:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/firewalls/methods/getFirewalls'
          - $ref: '#/components/x-stackQL-resources/firewalls/methods/getFirewall'
        insert:
          - $ref: '#/components/x-stackQL-resources/firewalls/methods/createFirewalls'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/firewalls/methods/deleteFirewall'
    firewalls_devices:
      id: linode.networking.firewalls_devices
      name: firewalls_devices
      title: Firewalls Devices
      methods:
        getFirewallDevices:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}~1devices/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getFirewallDevices:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}~1devices/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createFirewallDevice:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}~1devices/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getFirewallDevice:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}~1devices~1{deviceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getFirewallDevice:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}~1devices~1{deviceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteFirewallDevice:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}~1devices~1{deviceId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/firewalls_devices/methods/getFirewallDevices'
          - $ref: '#/components/x-stackQL-resources/firewalls_devices/methods/getFirewallDevice'
        insert:
          - $ref: '#/components/x-stackQL-resources/firewalls_devices/methods/createFirewallDevice'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/firewalls_devices/methods/deleteFirewallDevice'
    firewalls_rules:
      id: linode.networking.firewalls_rules
      name: firewalls_rules
      title: Firewalls Rules
      methods:
        getFirewallRules:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}~1rules/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getFirewallRules:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}~1rules/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateFirewallRules:
          operation:
            $ref: '#/paths/~1networking~1firewalls~1{firewallId}~1rules/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/firewalls_rules/methods/getFirewallRules'
        insert: []
        update: []
        delete: []
    vlans:
      id: linode.networking.vlans
      name: vlans
      title: Vlans
      methods:
        getVLANs:
          operation:
            $ref: '#/paths/~1networking~1vlans/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getVLANs:
          operation:
            $ref: '#/paths/~1networking~1vlans/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vlans/methods/getVLANs'
        insert: []
        update: []
        delete: []
paths:
  /networking/ips:
    get:
      x-linode-grant: read_only
      tags:
        - Networking
      summary: IP Addresses List
      description: |
        Returns a paginated list of IP Addresses on your Account, excluding private addresses.
      operationId: getIPs
      x-linode-cli-action: ips-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_only'
      responses:
        '200':
          description: A paginated list of IP Addresses.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/IPAddress'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/networking/ips
        - lang: CLI
          source: |
            linode-cli networking ips-list
    post:
      x-linode-grant: read_write
      tags:
        - Networking
      summary: IP Address Allocate
      description: |
        Allocates a new IPv4 Address on your Account. The Linode must be configured to support additional addresses - please [open a support ticket](/docs/api/support/#support-ticket-open) requesting additional addresses before attempting allocation.
      operationId: allocateIP
      x-linode-cli-action: ip-add
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_write'
            - 'linodes:read_write'
      requestBody:
        description: Information about the address you are creating.
        required: true
        content:
          application/json:
            schema:
              required:
                - type
                - public
                - linode_id
              properties:
                type:
                  type: string
                  enum:
                    - ipv4
                  description: |
                    The type of address you are requesting. Only IPv4 addresses may be allocated through this endpoint.
                  example: ipv4
                public:
                  type: boolean
                  description: |
                    Whether to create a public or private IPv4 address.
                  example: true
                linode_id:
                  type: integer
                  description: |
                    The ID of a Linode you you have access to that this address will be allocated to.
                  example: 123
      responses:
        '200':
          description: IP Address allocated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPAddress'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "type": "ipv4",
                  "public": true,
                  "linode_id": 123
                }' \
                https://api.linode.com/v4/networking/ips
        - lang: CLI
          source: |
            linode-cli networking ip-add \
              --type ipv4 \
              --public true \
              --linode_id 123
  '/networking/ips/{address}':
    get:
      x-linode-grant: read_only
      tags:
        - Networking
      summary: IP Address View
      description: |
        Returns information about a single IP Address on your Account.
      operationId: getIP
      x-linode-cli-action: ip-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_only'
      responses:
        '200':
          description: The requested IP Address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPAddress'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/networking/ips/97.107.143.141
        - lang: CLI
          source: |
            linode-cli networking ip-view 97.107.143.141
      parameters:
        - name: address
          in: path
          required: true
          description: The address to operate on.
          schema:
            type: string
            format: ip
    put:
      x-linode-grant: read_write
      tags:
        - Networking
      summary: IP Address RDNS Update
      description: |
        Sets RDNS on an IP Address. Forward DNS must already be set up for reverse DNS to be applied. If you set the RDNS to `null` for public IPv4 addresses, it will be reset to the default _ip.linodeusercontent.com_ RDNS value.
      operationId: updateIP
      x-linode-cli-action: ip-update
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_write'
      requestBody:
        description: The information to update.
        required: true
        content:
          application/json:
            schema:
              required:
                - rdns
              type: object
              properties:
                rdns:
                  type: string
                  description: |
                    The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
                  x-linode-cli-display: 4
                  nullable: true
                  example: test.example.org
      responses:
        '200':
          description: RDNS set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPAddress'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "rdns": "test.example.org"
                }' \
                https://api.linode.com/v4/networking/ips/203.0.113.1
        - lang: CLI
          source: |
            linode-cli networking ip-update \
              203.0.113.1 \
              --rdns "test.example.org"
      parameters:
        - name: address
          in: path
          required: true
          description: The address to operate on.
          schema:
            type: string
            format: ip
  /networking/ips/assign:
    post:
      x-linode-grant: read_write
      tags:
        - Networking
      summary: IP Addresses Assign
      description: |
        Assign multiple IPv4 addresses and/or IPv6 ranges to multiple Linodes in one Region. This allows swapping, shuffling, or otherwise reorganizing IPs to your Linodes.

        The following restrictions apply:
        * All Linodes involved must have at least one public IPv4 address after assignment.
        * Linodes may have no more than one assigned private IPv4 address.
        * Linodes may have no more than one assigned IPv6 range.

        [Open a Support Ticket](/docs/api/support/#support-ticket-open) to request additional IPv4 addresses or IPv6 ranges beyond standard account limits.

        **Note**: Removing an IP address that has been set as a Managed Linode's `ssh.ip` causes the Managed Linode's SSH access settings to reset to their default values. To view and configure Managed Linode SSH settings, use the following commands:
        * **Linode's Managed Settings View** ([GET /managed/linode-settings/{linodeId}](/docs/api/managed/#linodes-managed-settings-view))
        * **Linode's Managed Settings Update** ([PUT /managed/linode-settings/{linodeId}](/docs/api/managed/#linodes-managed-settings-update))
      operationId: assignIPs
      x-linode-cli-action: ip-assign
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_write'
            - 'linodes:read_write'
      requestBody:
        description: |
          Information about what IPv4 address or IPv6 range to assign, and to which Linode.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPAddressesAssignRequest'
      responses:
        '200':
          description: All assignments completed successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "region": "us-east",
                  "assignments": [
                    {
                      "address": "192.0.2.1",
                      "linode_id": 123
                    },
                    {
                      "address": "2001:db8:3c4d:15::/64",
                      "linode_id": 234
                    }
                  ]
                }' \
                https://api.linode.com/v4/networking/ips/assign
        - lang: CLI
          source: |
            linode-cli networking ip-assign \
              --region us-east \
              --assignments.address 192.0.2.1 \
              --assignments.linode_id 123 \
              --assignments.address 2001:db8:3c4d:15::/64 \
              --assignments.linode_id 234
  /networking/ips/share:
    post:
      servers:
        - url: 'https://api.linode.com/v4beta'
      x-linode-grant: read_write
      tags:
        - Networking
      summary: IP Addresses Share
      description: |
        Configure shared IPs.

        IP sharing allows IP address reassignment (also referred to as IP failover) from one Linode to another if the primary Linode becomes unresponsive. This means that requests to the primary Linode's IP address can be automatically rerouted to secondary Linodes at the configured shared IP addresses.

        IP failover requires configuration of a failover service (such as [Keepalived](/docs/guides/ip-failover-keepalived)) within the internal system of the primary Linode.
      operationId: shareIPs
      x-linode-cli-action: ip-share
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_write'
            - 'linodes:read_write'
      requestBody:
        description: Information about what IPs to share with which Linode.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPAddressesShareRequest'
      responses:
        '200':
          description: IP Address sharing successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "linode_id": 123,
                  "ips": [
                    "192.0.2.1",
                    "2001:db8:3c4d:15::"
                  ]
                }' \
                https://api.linode.com/v4beta/networking/ips/share
        - lang: CLI
          source: |
            linode-cli networking ip-share \
              --linode_id 123 \
              --ips 192.0.2.1 \
              --ips 2001:db8:3c4d:15::
  /networking/ipv4/assign:
    post:
      x-linode-grant: read_write
      tags:
        - Networking
      summary: Linodes Assign IPv4s
      description: |
        This command is equivalent to **IP Addresses Assign** ([POST /networking/ips/assign](#ip-addresses-assign)).

        Assign multiple IPv4 addresses and/or IPv6 ranges to multiple Linodes in one Region. This allows swapping, shuffling, or otherwise reorganizing IPs to your Linodes.

        The following restrictions apply:
        * All Linodes involved must have at least one public IPv4 address after assignment.
        * Linodes may have no more than one assigned private IPv4 address.
        * Linodes may have no more than one assigned IPv6 range.

        [Open a Support Ticket](/docs/api/support/#support-ticket-open) to request additional IPv4 addresses or IPv6 ranges beyond standard account limits.

        **Note**: Removing an IP address that has been set as a Managed Linode's `ssh.ip` causes the Managed Linode's SSH access settings to reset to their default values. To view and configure Managed Linode SSH settings, use the following commands:
        * **Linode's Managed Settings View** ([GET /managed/linode-settings/{linodeId}](/docs/api/managed/#linodes-managed-settings-view))
        * **Linode's Managed Settings Update** ([PUT /managed/linode-settings/{linodeId}](/docs/api/managed/#linodes-managed-settings-update))
      operationId: assignIPv4s
      x-linode-cli-skip: true
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_write'
            - 'linodes:read_write'
      requestBody:
        description: |
          Information about what IPv4 address to assign, and to which Linode.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPAddressesAssignRequest'
      responses:
        '200':
          description: All assignments completed successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "region": "us-east",
                  "assignments": [
                    {
                      "address": "192.0.2.1",
                      "linode_id": 123
                    },
                    {
                      "address": "2001:db8:3c4d:15::/64",
                      "linode_id": 234
                    }
                  ]
                }' \
                https://api.linode.com/v4/networking/ipv4/assign
        - lang: CLI
          source: |
            linode-cli networking ip-assign \
              --region us-east \
              --assignments.address 192.0.2.1 \
              --assignments.linode_id 123 \
              --assignments.address 2001:db8:3c4d:15::/64 \
              --assignments.linode_id 234
  /networking/ipv4/share:
    post:
      x-linode-grant: read_write
      tags:
        - Networking
      summary: IPv4 Sharing Configure
      description: |
        This command is equivalent to **IP Addresses Share** ([POST /networking/ips/share](#ip-addresses-share)).

        Configure shared IPs.

        IP sharing allows IP address reassignment (also referred to as IP failover) from one Linode to another if the primary Linode becomes unresponsive. This means that requests to the primary Linode's IP address can be automatically rerouted to secondary Linodes at the configured shared IP addresses.

        IP failover requires configuration of a failover service (such as [Keepalived](/docs/guides/ip-failover-keepalived)) within the internal system of the primary Linode.
      operationId: shareIPv4s
      x-linode-cli-skip: true
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_write'
            - 'linodes:read_write'
      requestBody:
        description: Information about what IPs to share with which Linode.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPAddressesShareRequest'
      responses:
        '200':
          description: Sharing configured successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "linode_id": 123,
                  "ips": [
                    "192.0.2.1",
                    "192.0.2.2"
                  ]
                }' \
                https://api.linode.com/v4/networking/ipv4/share
        - lang: CLI
          source: |
            linode-cli networking ip-share \
              --linode_id 123 \
              --ips 192.0.2.1 \
              --ips 192.0.2.2
  /networking/ipv6/pools:
    get:
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Networking
      summary: IPv6 Pools List
      description: |
        Displays the IPv6 pools on your Account. A pool of IPv6 addresses are routed to all of your Linodes in a single [Region](/docs/api/regions/#regions-list). Any Linode on your Account may bring up any address in this pool at any time, with no external configuration required.
      operationId: getIPv6Pools
      x-linode-cli-action: v6-pools
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_only'
      responses:
        '200':
          description: The IPv6 pools on your Account.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/IPv6Pool'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/networking/ipv6/pools
        - lang: CLI
          source: |
            linode-cli networking v6-pools
  /networking/ipv6/ranges:
    get:
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Networking
      summary: IPv6 Ranges List
      description: |
        Displays the IPv6 ranges on your Account.


          * An IPv6 range is a `/64` or `/54` block of IPv6 addresses routed to a single Linode in a given [Region](/docs/api/regions/#regions-list).

          * Your Linode is responsible for routing individual addresses in the range, or handling traffic for all the addresses in the range.

          * Access the IPv6 Range Create ([POST /networking/ipv6/ranges](/docs/api/networking/#ipv6-range-create)) endpoint to add a `/64` or `/56` block of IPv6 addresses to your account.
      operationId: getIPv6Ranges
      x-linode-cli-action: v6-ranges
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_only'
      responses:
        '200':
          description: The IPv6 ranges on your Account.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/IPv6Range'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/networking/ipv6/ranges
        - lang: CLI
          source: |
            linode-cli networking v6-ranges
    post:
      tags:
        - Networking
      summary: IPv6 Range Create
      description: |
        Creates an IPv6 Range and assigns it based on the provided Linode or route target IPv6 SLAAC address. See the `ipv6` property when accessing the Linode View ([GET /linode/instances/{linodeId}](/docs/api/linode-instances/#linode-view)) endpoint to view a Linode's IPv6 SLAAC address.
          * Either `linode_id` or `route_target` is required in a request.
          * `linode_id` and `route_target` are mutually exclusive. Submitting values for both properties in a request results in an error.
          * Upon a successful request, an IPv6 range is created in the [Region](/docs/api/regions/#regions-list) that corresponds to the provided `linode_id` or `route_target`.
          * Your Linode is responsible for routing individual addresses in the range, or handling traffic for all the addresses in the range.
          * Access the IP Addresses Assign ([POST /networking/ips/assign](/docs/api/networking/#ip-addresses-assign)) endpoint to re-assign IPv6 Ranges to your Linodes.

        **Note**: The following restrictions apply:
          * A Linode can only have one IPv6 range targeting its SLAAC address.
          * An account can only have one IPv6 range in each [Region](/docs/api/regions/#regions-list).
          * [Open a Support Ticket](/docs/api/support/#support-ticket-open) to request expansion of these restrictions.
      operationId: postIPv6Range
      x-linode-cli-action: v6-range-create
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_write'
            - 'linodes:read_write'
      requestBody:
        description: |
          Information about the IPv6 range to create.
        required: true
        content:
          application/json:
            schema:
              required:
                - prefix_length
              properties:
                linode_id:
                  type: integer
                  description: |
                    The ID of the Linode to assign this range to. The SLAAC address for the provided Linode is used as the range's `route_target`.

                    * **Required** if `route_target` is omitted from the request.

                    * Mutually exclusive with `route_target`. Submitting values for both properties in a request results in an error.
                  example: 123
                prefix_length:
                  type: integer
                  enum:
                    - 56
                    - 64
                  description: |
                    The prefix length of the IPv6 range.
                route_target:
                  type: string
                  format: ipv6
                  description: |
                    The IPv6 SLAAC address to assign this range to.

                    * **Required** if `linode_id` is omitted from the request.

                    * Mutually exclusive with `linode_id`. Submitting values for both properties in a request results in an error.

                    * **Note**: Omit the `/128` prefix length of the SLAAC address when using this property.
                  example: '2001:0db8::1'
      responses:
        '200':
          description: IPv6 range created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  range:
                    type: string
                    format: ipv6/prefix_length
                    description: |
                      The IPv6 network range, including subnet and prefix length.
                    example: '2001:0db8::/64'
                  route_target:
                    type: string
                    format: ipv6
                    description: |
                      The route target IPV6 SLAAC address for this range. Does not include the prefix length.
                    example: '2001:0db8::1'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                    "linode_id": 123,
                    "prefix_length": 64
                }' \
                https://api.linode.com/v4/networking/ipv6/ranges
        - lang: CLI
          source: |
            linode-cli networking v6-range-create \
              --linode_id 123 \
              --prefix_length 64
  '/networking/ipv6/ranges/{range}':
    get:
      tags:
        - Networking
      summary: IPv6 Range View
      description: |
        View IPv6 range information.
      operationId: getIPv6Range
      x-linode-cli-action: v6-range-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read'
      responses:
        '200':
          description: Returns IPv6 range information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPv6RangeBGP'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" https://api.linode.com/v4/networking/ipv6/ranges/2001:0db8::
        - lang: CLI
          source: |
            linode-cli networking v6-range-view 2001:0db8::
      parameters:
        - name: range
          in: path
          description: |
            The IPv6 range to access. Corresponds to the `range` property of objects returned from the IPv6 Ranges List ([GET /networking/ipv6/ranges](/docs/api/networking/#ipv6-ranges-list)) command.

            **Note**: Omit the prefix length of the IPv6 range.
          required: true
          schema:
            type: string
            format: ipv6
    delete:
      tags:
        - Networking
      summary: IPv6 Range Delete
      description: |
        Removes this IPv6 range from your account and disconnects the range from any assigned Linodes.

        **Note:** Shared IPv6 ranges cannot be deleted at this time. Please contact Customer Support for assistance.
      operationId: deleteIPv6Range
      x-linode-cli-action: v6-range-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'ips:read_write'
      responses:
        '200':
          description: IPv6 Range deleted.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/networking/ipv6/ranges/2001:0db8::
        - lang: CLI
          source: |
            linode-cli networking v6-range-delete 2001:0db8::
      parameters:
        - name: range
          in: path
          description: |
            The IPv6 range to access. Corresponds to the `range` property of objects returned from the IPv6 Ranges List ([GET /networking/ipv6/ranges](/docs/api/networking/#ipv6-ranges-list)) command.

            **Note**: Omit the prefix length of the IPv6 range.
          required: true
          schema:
            type: string
            format: ipv6
  /networking/firewalls:
    get:
      x-linode-grant: read_only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Networking
      summary: Firewalls List
      description: |
        Returns a paginated list of accessible Firewalls.
      operationId: getFirewalls
      x-linode-cli-action:
        - list
        - ls
      security:
        - personalAccessToken: []
        - oauth:
            - 'firewall:read_only'
      responses:
        '200':
          description: Returns an array of Firewalls.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Firewall'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/networking/firewalls
        - lang: CLI
          source: |
            linode-cli firewalls list
    post:
      x-linode-grant: add_firewalls
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Networking
      summary: Firewall Create
      description: |
        Creates a Firewall to filter network traffic.

        * Use the `rules` property to create inbound and outbound access rules.

        * Use the `devices` property to assign the Firewall to a service and apply its Rules to the device. Requires `read_write` [User's Grants](/docs/api/account/#users-grants-view) to the device.
        Currently, Firewalls can only be assigned to Linode instances.

        * A Firewall can be assigned to multiple Linode instances at a time.

        * A Linode instance can have one active, assigned Firewall at a time.
        Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.

        * A `firewall_create` Event is generated when this endpoint returns successfully.
      operationId: createFirewalls
      x-linode-cli-action: create
      security:
        - personalAccessToken: []
        - oauth:
            - 'firewall:read_write'
      requestBody:
        description: Creates a Firewall object that can be applied to a Linode service to filter the service's network traffic.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Firewall'
              required:
                - label
                - rules
              properties:
                devices:
                  type: object
                  description: |
                    Devices to create for this Firewall.
                    When a Device is created, the Firewall is assigned to its associated service.
                    Currently, Devices can only be created for Linode instances.
                  properties:
                    linodes:
                      description: |
                        An array of Linode IDs. A Firewall Device is created for each ID.
                      type: array
                      items:
                        type: integer
                      example:
                        - 123
                        - 456
                rules:
                  required:
                    - inbound_policy
                    - outbound_policy
                  properties:
                    inbound:
                      required:
                        - action
                        - addresses
                        - protocol
                    outbound:
                      required:
                        - action
                        - addresses
                        - protocol
      responses:
        '200':
          description: Returns information about the created Firewall.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firewall'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "label": "firewall123",
                  "rules": {
                    "inbound_policy": "DROP",
                    "inbound": [
                      {
                        "protocol": "TCP",
                        "ports": "22, 80, 443",
                        "addresses": {
                          "ipv4": [
                            "192.0.2.0/24"
                          ],
                          "ipv6": [
                            "2001:DB8::/32"
                          ]
                        },
                      "action": "ACCEPT",
                      "label": "inbound-rule123",
                      "description": "An example inbound rule description."
                      }
                    ],
                    "outbound_policy": "DROP",
                    "outbound": [
                      {
                        "protocol": "TCP",
                        "ports": "49152-65535",
                        "addresses": {
                          "ipv4": [
                            "192.0.2.0/24"
                          ],
                          "ipv6": [
                            "2001:DB8::/32"
                          ]
                        },
                        "action": "ACCEPT",
                        "label": "outbound-rule123",
                        "description": "An example outbound rule description."
                      }
                    ]
                  },
                  "devices": {
                    "linodes": [
                      123
                      ]
                  },
                  "tags": [
                    "example tag",
                    "another example"
                  ]
                }' \
                https://api.linode.com/v4/networking/firewalls
        - lang: CLI
          source: |
            linode-cli firewalls create \
              --label example-firewall \
              --rules.outbound_policy ACCEPT \
              --rules.inbound_policy DROP \
              --rules.inbound '[{"protocol": "TCP", "ports": "22, 80, 8080, 443", "addresses": {"ipv4": ["192.0.2.1", "192.0.2.0/24"], "ipv6": ["2001:DB8::/32"]}, "action": "ACCEPT"}]' \
              --rules.outbound '[{"protocol": "TCP", "ports": "49152-65535", "addresses": {"ipv4": ["192.0.2.0/24"],"ipv6": ["2001:DB8::/32"]}, "action": "DROP", "label": "outbound-rule123", "description": "An example outbound rule description."}]'
  '/networking/firewalls/{firewallId}':
    get:
      x-linode-grant: read_only
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Networking
      summary: Firewall View
      operationId: getFirewall
      x-linode-cli-action: view
      security:
        - personalAccessToken: []
        - oauth:
            - 'firewall:read_only'
      description: |
        Get a specific Firewall resource by its ID. The Firewall's Devices will not be
        returned in the response. Instead, use the
        [List Firewall Devices](/docs/api/networking/#firewall-devices-list)
        endpoint to review them.
      responses:
        '200':
          description: Returns information about this Firewall.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firewall'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/networking/firewalls/123
        - lang: CLI
          source: |
            linode-cli firewalls view 123
      parameters:
        - name: firewallId
          in: path
          description: |
            ID of the Firewall to access.
          required: true
          schema:
            type: integer
    put:
      x-linode-grant: read_write
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Networking
      summary: Firewall Update
      description: |
        Updates information for a Firewall. Some parts of a Firewall's configuration cannot
        be manipulated by this endpoint:

        - A Firewall's Devices cannot be set with this endpoint. Instead, use the
        [Create Firewall Device](/docs/api/networking/#firewall-device-create)
        and [Delete Firewall Device](/docs/api/networking/#firewall-device-delete)
        endpoints to assign and remove this Firewall from Linode services.

        - A Firewall's Rules cannot be changed with this endpoint. Instead, use the
        [Update Firewall Rules](/docs/api/networking/#firewall-rules-update)
        endpoint to update your Rules.

        - A Firewall's status can be set to `enabled` or `disabled` by this endpoint, but it cannot be
        set to `deleted`. Instead, use the
        [Delete Firewall](/docs/api/networking/#firewall-delete)
        endpoint to delete a Firewall.

        If a Firewall's status is changed with this endpoint, a corresponding `firewall_enable` or
        `firewall_disable` Event will be generated.
      operationId: updateFirewall
      x-linode-cli-action: update
      security:
        - personalAccessToken: []
        - oauth:
            - 'firewall:read_write'
      requestBody:
        description: The Firewall information to update.
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/Firewall/properties/tags'
                label:
                  $ref: '#/components/schemas/Firewall/properties/label'
                status:
                  type: string
                  description: |
                    The status to be applied to this Firewall.
                     
                     * When a Firewall is first created its status is `enabled`.
                     * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.
                  enum:
                    - enabled
                    - disabled
                  example: enabled
                  x-linode-cli-display: 3
      responses:
        '200':
          description: Firewall updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firewall'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "status": "disabled"
                }' \
                https://api.linode.com/v4/networking/firewalls/123
        - lang: CLI
          source: |
            linode-cli firewalls update 123 \
              --status disabled
      parameters:
        - name: firewallId
          in: path
          description: |
            ID of the Firewall to access.
          required: true
          schema:
            type: integer
    delete:
      x-linode-grant: read_write
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Networking
      summary: Firewall Delete
      operationId: deleteFirewall
      x-linode-cli-action:
        - delete
        - rm
      security:
        - personalAccessToken: []
        - oauth:
            - 'firewall:read_write'
      description: |
        Delete a Firewall resource by its ID. This will remove all of the Firewall's Rules
        from any Linode services that the Firewall was assigned to.

        A `firewall_delete` Event is generated when this endpoint returns successfully.
      responses:
        '200':
          description: Delete Successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/networking/firewalls/123
        - lang: CLI
          source: |
            linode-cli firewalls delete 123
      parameters:
        - name: firewallId
          in: path
          description: |
            ID of the Firewall to access.
          required: true
          schema:
            type: integer
  '/networking/firewalls/{firewallId}/devices':
    get:
      x-linode-grant: read_only
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Networking
      parameters:
        - name: firewallId
          in: path
          description: |
            ID of the Firewall to access.
          required: true
          schema:
            type: integer
      summary: Firewall Devices List
      description: |
        Returns a paginated list of a Firewall's Devices. A Firewall Device assigns a
        Firewall to a Linode service (referred to as the Device's `entity`). Currently,
        only Devices with an entity of type `linode` are accepted.
      operationId: getFirewallDevices
      x-linode-cli-action: devices-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'firewall:read_only'
      responses:
        '200':
          description: A paginated list of Firewall Devices
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FirewallDevices'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/networking/firewalls/123/devices
        - lang: CLI
          source: |
            linode-cli firewalls devices-list 123
    post:
      x-linode-grant: read_write
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Networking
      summary: Firewall Device Create
      description: |
        Creates a Firewall Device, which assigns a Firewall to a service (referred to
        as the Device's `entity`) and applies the Firewall's Rules to the device.

        * Currently, only Devices with an entity of type `linode` are accepted.

        * A Firewall can be assigned to multiple Linode instances at a time.

        * A Linode instance can have one active, assigned Firewall at a time.
        Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.

        * A `firewall_device_add` Event is generated when the Firewall Device is added successfully.
      operationId: createFirewallDevice
      x-linode-cli-action: device-create
      security:
        - personalAccessToken: []
        - oauth:
            - 'firewall:read_write'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - type
              allOf:
                - $ref: '#/components/schemas/FirewallDevices/properties/entity'
      responses:
        '200':
          description: Returns information about the created Firewall Device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallDevices'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "type": "linode",
                  "id": 123
                }' \
                https://api.linode.com/v4/networking/firewalls/123/devices
        - lang: CLI
          source: |
            linode-cli firewalls device-create 123 \
              --id 456 \
              --type "linode"
      parameters:
        - name: firewallId
          in: path
          description: |
            ID of the Firewall to access.
          required: true
          schema:
            type: integer
  '/networking/firewalls/{firewallId}/devices/{deviceId}':
    get:
      x-linode-grant: read_only
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Networking
      summary: Firewall Device View
      description: |
        Returns information for a Firewall Device, which assigns a Firewall
        to a Linode service (referred to as the Device's `entity`). Currently,
        only Devices with an entity of type `linode` are accepted.
      operationId: getFirewallDevice
      x-linode-cli-action: device-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'firewall:read_only'
      responses:
        '200':
          description: The requested Firewall Device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallDevices'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/networking/firewalls/123/devices/456
        - lang: CLI
          source: |
            linode-cli firewalls device-view \
              123 456
      parameters:
        - name: firewallId
          in: path
          description: |
            ID of the Firewall to access.
          required: true
          schema:
            type: integer
        - name: deviceId
          in: path
          description: |
            ID of the Firewall Device to access.
          required: true
          schema:
            type: integer
    delete:
      x-linode-grant: read_write
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Networking
      summary: Firewall Device Delete
      operationId: deleteFirewallDevice
      x-linode-cli-action: device-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'firewall:read_write'
      description: |
        Removes a Firewall Device, which removes a Firewall from the Linode service it was
        assigned to by the Device. This will remove all of the Firewall's Rules from the Linode
        service. If any other Firewalls have been assigned to the Linode service, then those Rules
        will remain in effect.

        A `firewall_device_remove` Event is generated when the Firewall Device is removed successfully.
      responses:
        '200':
          description: Delete Successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                 -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/networking/firewalls/123/devices/456
        - lang: CLI
          source: |
            linode-cli firewalls device-delete 123 456
      parameters:
        - name: firewallId
          in: path
          description: |
            ID of the Firewall to access.
          required: true
          schema:
            type: integer
        - name: deviceId
          in: path
          description: |
            ID of the Firewall Device to access.
          required: true
          schema:
            type: integer
  '/networking/firewalls/{firewallId}/rules':
    get:
      x-linode-grant: read_only
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Networking
      summary: Firewall Rules List
      description: |
        Returns the inbound and outbound Rules for a Firewall.
      operationId: getFirewallRules
      x-linode-cli-action: rules-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'firewall:read_only'
      responses:
        '200':
          description: The requested Firewall Rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firewall/properties/rules'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/networking/firewalls/123/rules
        - lang: CLI
          source: |
            linode-cli firewalls rules-list 123
      parameters:
        - name: firewallId
          in: path
          description: |
            ID of the Firewall to access.
          required: true
          schema:
            type: integer
    put:
      x-linode-grant: read_write
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Networking
      summary: Firewall Rules Update
      description: |
        Updates the inbound and outbound Rules for a Firewall.

        **Note:** This command replaces all of a Firewall's `inbound` and/or `outbound` rulesets with the values specified in your request.
      operationId: updateFirewallRules
      x-linode-cli-action: rules-update
      security:
        - personalAccessToken: []
        - oauth:
            - 'firewall:read_write'
      requestBody:
        description: The Firewall Rules information to update.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Firewall/properties/rules'
              properties:
                inbound:
                  required:
                    - action
                    - addresses
                    - protocol
                outbound:
                  required:
                    - action
                    - addresses
                    - protocol
      responses:
        '200':
          description: Firewall Rules updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firewall/properties/rules'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                    "inbound_policy": "DROP",
                    "inbound": [
                      {
                        "protocol": "TCP",
                        "ports": "22, 80, 443",
                        "addresses": {
                          "ipv4": [
                            "192.0.2.0/24"
                          ],
                          "ipv6": [
                            "2001:DB8::/32"
                          ]
                        },
                      "action": "ACCEPT",
                      "label": "inbound-rule123",
                      "description": "An example inbound rule description."
                      }
                    ],
                    "outbound_policy": "DROP",
                    "outbound": [
                      {
                        "protocol": "TCP",
                        "ports": "49152-65535",
                        "addresses": {
                          "ipv4": [
                            "192.0.2.0/24"
                          ],
                          "ipv6": [
                            "2001:DB8::/32"
                          ]
                        },
                        "action": "ACCEPT",
                        "label": "outbound-rule123",
                        "description": "An example outbound rule description."
                      }
                    ]
                }' \
                https://api.linode.com/v4/networking/firewalls/123/rules
        - lang: CLI
          source: |
            linode-cli firewalls rules-update 123 \
              --inbound '[{"action":"ACCEPT", "protocol": "TCP", "ports": "22, 80, 8080, 443", "addresses": {"ipv4": ["192.0.2.1/32", "192.0.2.0/24"], "ipv6": ["2001:DB8::/32"]}}]' \
              --outbound '[{"action":"DROP","protocol": "TCP", "ports": "49152-65535", "addresses": {"ipv4": ["192.0.2.1/32", "192.0.2.0/24"], "ipv6": ["2001:DB8::/32"]}}]'
      parameters:
        - name: firewallId
          in: path
          description: |
            ID of the Firewall to access.
          required: true
          schema:
            type: integer
  /networking/vlans:
    get:
      x-linode-grant: read_only
      servers:
        - url: 'https://api.linode.com/v4beta'
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Networking
      summary: VLANs List
      description: |
        Returns a list of all Virtual Local Area Networks (VLANs) on your Account. VLANs provide
        a mechanism for secure communication between two or more Linodes that are assigned to the
        same VLAN and are both within the same Layer 2 broadcast domain.

        VLANs are created and attached to Linodes by using the `interfaces` property for the following endpoints:

        - Linode Create ([POST /linode/instances](/docs/api/linode-instances/#linode-create))
        - Configuration Profile Create ([POST /linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profile-create))
        - Configuration Profile Update ([PUT /linode/instances/{linodeId}/configs/{configId}](/docs/api/linode-instances/#configuration-profile-update))

        There are several ways to detach a VLAN from a Linode:

        - [Update](/docs/api/linode-instances/#configuration-profile-update) the active Configuration Profile to remove the VLAN interface, then [reboot](/docs/api/linode-instances/#linode-reboot) the Linode.
        - [Create](/docs/api/linode-instances/#configuration-profile-create) a new Configuration Profile without the VLAN interface, then [reboot](/docs/api/linode-instances/#linode-reboot) the Linode into the new Configuration Profile.
        - [Delete](/docs/api/linode-instances/#linode-delete) the Linode.

        **Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.
        If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,
        the migration or cloning will not initiate. If a Linode cannot be migrated because of an incompatibility,
        you will be prompted to select a different data center or contact support.

        **Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) to view additional specifications and limitations.
      operationId: getVLANs
      x-linode-cli-action:
        - list
        - ls
      security:
        - personalAccessToken: []
        - oauth:
            - 'linodes:read_only'
      responses:
        '200':
          description: The VLANs available on this Account.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vlans'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4beta/networking/vlans/
        - lang: CLI
          source: |
            linode-cli vlans list
