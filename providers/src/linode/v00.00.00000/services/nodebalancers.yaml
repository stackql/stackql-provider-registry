openapi: 3.0.1
servers:
  - url: 'https://api.linode.com/v4'
  - url: 'https://api.linode.com/v4beta'
info:
  version: 4.147.0
  title: Linode API - nodebalancers
  description: nodebalancers
  contact:
    name: Linode
    url: 'https://linode.com'
    email: support@linode.com
tags:
  - name: Account
    description: 'Use the Account endpoints to manage user settings, billing, and payments. You can also initiate and maintain OAuth client application authentication, enable the Linode Managed service, and create new users on your account.'
  - name: Databases
    description: 'Managed Databases is Linode''s fully-managed, high-performance database service. Use the Managed Databases endpoints to create and manage database clusters.'
  - name: Domains
    description: Use the Domains endpoints to create and manage domains and domain records on your account.
  - name: Images
    description: 'Use the Images endpoints to capture, store, and manage custom Linode images.'
  - name: Linode Instances
    description: 'Use the Linode Instances endpoints to create, configure, and manage your Linode instances. You can also manage the Linode Backup service; maintain and manage configuration profiles; create and maintain disks, intiate a host migration; view Linode Instance statistics; and more.'
  - name: Linode Types
    description: 'Use the Linode Types endpoints to retrieve information about Linode plan types, including pricing information, hardware resources, and network transfer allotment.'
  - name: Linode Kubernetes Engine (LKE)
    description: Linode Kubernetes Engine (LKE) is Linode's managed Kubernetes service. Use the LKE endpoints to create and manage Kubernetes clusters and their associated Node Pools.
  - name: Longview
    description: Longview is Linode's system-level monitoring and graphing service. Use the Longview endpoints to manage your Longview subscription and plan and to create and maintain Longview clients.
  - name: Managed
    description: 'Managed is Linode''s incident response service. Use the Managed endpoints to register a service to be monitored by the Managed Service team, provide secure access to your managed services,  view information about detected issues, and more.'
  - name: Networking
    description: 'Use the Networking endpoints to view all IP addresses on your account, reorganize assigned IPv4 addresses, update RDNS, and configure IP sharing.'
  - name: NodeBalancers
    description: 'NodeBalancers is Linode''s load balancing service. Use the NodeBalancers endpoints to create and manage NodeBalancers. You can also create and maintain configurations; create and maintain nodes, and view statistics.'
  - name: Object Storage
    description: 'Object Storage is Linode''s S3-compatible data storage service. Use the Object Storage endpoints to create and maintaining buckets, add and remove objects from buckets, create and maintain Object Storage keys, and cancel the Object Storage service.'
  - name: Profile
    description: 'Use the Profile endpoints to manage your Linode user profile preferences and security settings. This includes creating and maintaining personal access tokens, creating and maintaining SSH keys, confirming and enabling two-factor authentication, and updating user and profile preferences.'
  - name: Regions
    description: 'Use the Regions endpoints to view information about the various Linode data center regions, including the service capabilities for each region, country, status, and more.'
  - name: StackScripts
    description: Linode StackScripts allow you to create reusable scripts to configure new Linode instances. Use the StackScripts endpoints to create and manage StackScripts on your account.
  - name: Support
    description: 'Use the Support endpoints to open, view, and close Linode Support tickets. You can also create and manage your Support ticket replies.'
  - name: Tags
    description: 'Tags allow you to organize and group your various Linode services. Use the Tags endpoints to create, assign, and delete your account tags.'
  - name: Volumes
    description: 'Volumes is Linode''s block storage service. Use the Volumes endpoints to create, attach, and manage your account Volumes.'
components:
  schemas:
    NodeBalancer:
      type: object
      description: |
        Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.
      properties:
        id:
          type: integer
          description: |
            This NodeBalancer's unique ID.
          example: 12345
          readOnly: true
          x-linode-cli-display: 1
        label:
          x-linode-filterable: true
          type: string
          minLength: 3
          maxLength: 32
          pattern: '[a-zA-Z0-9-_]{3,32}'
          description: |
            This NodeBalancer's label. These must be unique on your Account.
          example: balancer12345
          x-linode-cli-display: 2
        region:
          x-linode-filterable: true
          type: string
          description: |
            The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.
          example: us-east
          readOnly: true
          x-linode-cli-display: 3
        hostname:
          type: string
          description: |
            This NodeBalancer's hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.
          example: 192.0.2.1.ip.linodeusercontent.com
          readOnly: true
          x-linode-cli-display: 4
        ipv4:
          x-linode-filterable: true
          type: string
          format: ip
          description: |
            This NodeBalancer's public IPv4 address.
          example: 203.0.113.1
          readOnly: true
          x-linode-cli-display: 5
        ipv6:
          type: string
          nullable: true
          format: ip
          description: |
            This NodeBalancer's public IPv6 address.
          example: null
          readOnly: true
          x-linode-cli-display: 6
        created:
          type: string
          format: date-time
          description: |
            When this NodeBalancer was created.
          example: 2018-01-01T00:01:01.000Z
          readOnly: true
        updated:
          type: string
          format: date-time
          description: |
            When this NodeBalancer was last updated.
          example: 2018-03-01T00:01:01.000Z
          readOnly: true
        client_conn_throttle:
          type: integer
          minimum: 0
          maximum: 20
          description: |
            Throttle connections per second.  Set to 0 (zero) to disable throttling.
          example: 0
          x-linode-cli-display: 6
        transfer:
          type: object
          readOnly: true
          description: |
            Information about the amount of transfer this NodeBalancer has had so far this month.
          properties:
            total:
              type: number
              nullable: true
              description: |
                The total transfer, in MB, used by this NodeBalancer this month.
              example: 32.46078109741211
              readOnly: true
            out:
              type: number
              nullable: true
              description: |
                The total inbound transfer, in MB, used for this NodeBalancer this month.
              example: 3.5487728118896484
              readOnly: true
            in:
              type: number
              nullable: true
              description: |
                The total outbound transfer, in MB, used for this NodeBalancer this month.
              example: 28.91200828552246
              readOnly: true
        tags:
          x-linode-filterable: true
          description: |
            An array of Tags applied to this object.  Tags are for organizational purposes only.
          type: array
          items:
            type: string
          example:
            - example tag
            - another example
    PaginationEnvelope:
      type: object
      description: |
        An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.
      properties:
        pages:
          type: integer
          readOnly: true
          description: 'The total number of [pages](/docs/api/#pagination).'
          example: 1
        page:
          type: integer
          readOnly: true
          description: 'The current [page](/docs/api/#pagination).'
          example: 1
        results:
          type: integer
          readOnly: true
          description: The total number of results.
          example: 1
    ErrorObject:
      type: object
      description: |
        An object for describing a single error that occurred during the processing of a request.
      properties:
        reason:
          type: string
          description: |
            What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
          example: fieldname must be a valid value
        field:
          type: string
          description: |
            The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
          example: fieldname
    NodeBalancerConfig:
      type: object
      description: |
        A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.

        NodeBalancer configs have a list of backends, called "nodes," that they forward requests between based on their configuration.
      properties:
        id:
          type: integer
          description: This config's unique ID
          example: 4567
          readOnly: true
          x-linode-cli-display: 1
        port:
          type: integer
          minimum: 1
          maximum: 65535
          default: 80
          description: |
            The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
          example: 80
          x-linode-cli-display: 2
        protocol:
          type: string
          enum:
            - http
            - https
            - tcp
          default: http
          description: |
            The protocol this port is configured to serve.

            * The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.

            * The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.

            Review our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.
          example: http
          x-linode-cli-display: 3
        algorithm:
          type: string
          enum:
            - roundrobin
            - leastconn
            - source
          default: roundrobin
          description: |
            What algorithm this NodeBalancer should use for routing traffic to backends.
          example: roundrobin
          x-linode-cli-display: 4
        stickiness:
          type: string
          enum:
            - none
            - table
            - http_cookie
          default: none
          description: |
            Controls how session stickiness is handled on this port.
            * If set to `none` connections will always be assigned a backend based on the algorithm configured.
            * If set to `table` sessions from the same remote address will be routed to the same
              backend.

            * For HTTP or HTTPS clients, `http_cookie` allows sessions to be
              routed to the same backend based on a cookie set by the NodeBalancer.
          example: http_cookie
          x-linode-cli-display: 5
        check:
          type: string
          enum:
            - none
            - connection
            - http
            - http_body
          default: none
          description: |
            The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.
            * If `none` no check is performed.
            * `connection` requires only a connection to the backend to succeed.
            * `http` and `http_body` rely on the backend serving HTTP, and that
              the response returned matches what is expected.
          example: http_body
        check_interval:
          type: integer
          description: |
            How often, in seconds, to check that backends are up and serving requests.

            Must be greater than `check_timeout`.
          example: 90
          default: 31
        check_timeout:
          type: integer
          minimum: 1
          maximum: 30
          default: 30
          description: |
            How long, in seconds, to wait for a check attempt before considering it failed.

            Must be less than `check_interval`.
          example: 10
        check_attempts:
          type: integer
          minimum: 1
          maximum: 30
          default: 3
          description: |
            How many times to attempt a check before considering a backend to be down.
          example: 3
        check_path:
          type: string
          pattern: '^[a-zA-Z0-9\/\-%?&=.]*$'
          description: |
            The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
          example: /test
        check_body:
          type: string
          description: |
            This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.
          example: it works
        check_passive:
          type: boolean
          default: true
          description: |
            If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.
          example: true
          x-linode-cli-display: 6
        proxy_protocol:
          description: |
            ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.

            * If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.
            * If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.
            * If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.
          type: string
          enum:
            - none
            - v1
            - v2
          example: none
          default: none
        cipher_suite:
          type: string
          enum:
            - recommended
            - legacy
          default: recommended
          description: |
            What ciphers to use for SSL connections served by this NodeBalancer.

            * `legacy` is considered insecure and should only be used if necessary.
          example: recommended
          x-linode-cli-display: 7
          x-linode-cli-color:
            legacy: red
            default_: white
        nodebalancer_id:
          type: integer
          description: |
            The ID for the NodeBalancer this config belongs to.
          example: 12345
          readOnly: true
        ssl_commonname:
          type: string
          description: |
            The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
          example: www.example.com
          readOnly: true
          x-linode-cli-display: 8
        ssl_fingerprint:
          type: string
          description: |
            The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
          example: '00:01:02:03:04:05:06:07:08:09:0A:0B:0C:0D:0E:0F:10:11:12:13'
          readOnly: true
          x-linode-cli-display: 9
        ssl_cert:
          type: string
          format: ssl-cert
          nullable: true
          description: |
            The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL
            certificate and Certificate Authority chain) that should be served on this
            NodeBalancerConfig's port.

            Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

            [Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.

            The contents of this field will not be shown in any responses that display
            the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
            appears.

            The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
            response are automatically derived from your certificate. Please refer to these fields to
            verify that the appropriate certificate was assigned to your NodeBalancerConfig.
          example: <REDACTED>
        ssl_key:
          type: string
          format: ssl-key
          nullable: true
          description: |
            The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.

            Line breaks must be represented as "\n" in the string for requests (but not when using the Linode CLI).

            The contents of this field will not be shown in any responses that display
            the NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field
            appears.

            The read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig
            response are automatically derived from your certificate. Please refer to these fields to
            verify that the appropriate certificate was assigned to your NodeBalancerConfig.
          example: <REDACTED>
        nodes_status:
          type: object
          description: |
            A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.
          readOnly: true
          x-linode-cli-display: 10
          properties:
            up:
              type: integer
              description: |
                The number of backends considered to be "UP" and healthy, and that are serving requests.
              example: 4
              readOnly: true
            down:
              type: integer
              description: |
                The number of backends considered to be "DOWN" and unhealthy.  These are not in rotation, and not serving requests.
              example: 0
              readOnly: true
    NodeBalancerNode:
      type: object
      description: |
        A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.
      properties:
        id:
          type: integer
          description: This node's unique ID.
          example: 54321
          readOnly: true
          x-linode-cli-display: 1
        address:
          type: string
          format: ip
          description: |
            The private IP Address where this backend can be reached. This _must_ be a private IP address.
          example: '192.168.210.120:80'
          x-linode-cli-display: 3
        label:
          type: string
          minLength: 3
          maxLength: 32
          pattern: '[a-zA-Z0-9-_.]{3,32}'
          description: |
            The label for this node.  This is for display purposes only.
          example: node54321
          x-linode-cli-display: 2
        status:
          type: string
          enum:
            - unknown
            - UP
            - DOWN
          description: |
            The current status of this node, based on the configured checks of its NodeBalancer Config.
          example: UP
          readOnly: true
          x-linode-cli-display: 4
          x-linode-cli-color:
            UP: green
            unknown: yellow
            DOWN: red
            default_: white
        weight:
          type: integer
          minimum: 1
          maximum: 255
          description: |
            Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
          example: 50
          x-linode-cli-display: 5
        mode:
          type: string
          enum:
            - accept
            - reject
            - drain
            - backup
          description: |
            The mode this NodeBalancer should use when sending traffic to this backend.
            * If set to `accept` this backend is accepting traffic.
            * If set to `reject` this backend will not receive traffic.
            * If set to `drain` this backend will not receive _new_ traffic, but connections already
              pinned to it will continue to be routed to it.

            * If set to `backup`, this backend will only receive traffic if all `accept` nodes
              are down.
          example: accept
          x-linode-cli-display: 6
        config_id:
          type: integer
          description: |
            The NodeBalancer Config ID that this Node belongs to.
          example: 4567
          readOnly: true
        nodebalancer_id:
          type: integer
          description: |
            The NodeBalancer ID that this Node belongs to.
          example: 12345
          readOnly: true
    NodeBalancerStats:
      type: object
      description: |
        Stats for this NodeBalancer.
      properties:
        data:
          type: object
          description: |
            The data returned about this NodeBalancers.
          properties:
            connections:
              type: array
              description: |
                An array of key/value pairs representing unix timestamp and reading for connections to this NodeBalancer.
              items:
                type: number
                example:
                  - 1526391300000
                  - 0
            traffic:
              type: object
              description: |
                Traffic statistics for this NodeBalancer.
              properties:
                in:
                  type: array
                  description: |
                    An array of key/value pairs representing unix timestamp and reading for inbound traffic.
                  items:
                    type: number
                    example:
                      - 1526391300000
                      - 631.21
                out:
                  type: array
                  description: |
                    An array of key/value pairs representing unix timestamp and reading for outbound traffic.
                  items:
                    type: number
                    example:
                      - 1526391300000
                      - 103.44
        title:
          type: string
          description: |
            The title for the statistics generated in this response.
          example: linode.com - balancer12345 (12345) - day (5 min avg)
  parameters:
    pageOffset:
      name: page
      in: query
      description: The page of a collection to return.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page_size
      in: query
      description: The number of items to return per page.
      schema:
        type: integer
        minimum: 25
        maximum: 500
        default: 100
  responses:
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorObject'
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://login.linode.com/oauth/authorize'
          tokenUrl: 'https://login.linode.com/oauth/token'
          scopes:
            'account:read_only': Allows access to GET information about your Account.
            'account:read_write': Allows access to all endpoints related to your Account.
            'domains:read_only': Allows access to GET Domains on your Account.
            'domains:read_write': Allows access to all Domain endpoints.
            'events:read_only': Allows access to GET your Events.
            'events:read_write': Allows access to all endpoints related to your Events.
            'firewall:read_only': Allows access to GET information about your Firewalls.
            'firewall:read_write': Allows acces to all Firewall endpoints.
            'images:read_only': Allows access to GET your Images.
            'images:read_write': Allows access to all endpoints related to your Images.
            'ips:read_only': Allows access to GET your ips.
            'ips:read_write': Allows access to all endpoints related to your ips.
            'linodes:read_only': Allows access to GET Linodes on your Account.
            'linodes:read_write': Allow access to all endpoints related to your Linodes.
            'lke:read_only': Allows access to GET LKE Clusters on your Account.
            'lke:read_write': Allows access to all endpoints related to LKE Clusters on your Account.
            'longview:read_only': Allows access to GET your Longview Clients.
            'longview:read_write': Allows access to all endpoints related to your Longview Clients.
            'nodebalancers:read_only': Allows access to GET NodeBalancers on your Account.
            'nodebalancers:read_write': Allows access to all NodeBalancer endpoints.
            'object_storage:read_only': Allows access to GET information related to your Object Storage.
            'object_storage:read_write': Allows access to all Object Storage endpoints.
            'stackscripts:read_only': Allows access to GET your StackScripts.
            'stackscripts:read_write': Allows access to all endpoints related to your StackScripts.
            'volumes:read_only': Allows access to GET your Volumes.
            'volumes:read_write': Allows access to all endpoints related to your Volumes.
  links:
    bootLinode:
      operationId: bootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebootLinode:
      operationId: rebootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    shutdownLinode:
      operationId: shutdownLinodeInstance
      parameters:
        linodeId: $request.body#/id
    updateLinode:
      operationId: updateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    deleteLinode:
      operationId: deleteLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebuildLinode:
      operationId: rebuildLinodeInstance
      parameters:
        linodeId: $request.body#/id
    mutateLinode:
      operationId: mutateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    resizeLinode:
      operationId: resizeLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rescueLinode:
      operationId: rescueLinodeInstance
      parameters:
        linodeId: $request.body#/id
    cloneLinode:
      operationId: cloneLinodeInstance
      parameters:
        linodeId: $request.body#/id
    attachVolume:
      operationId: attachVolume
      parameters:
        volumeID: $request.body#/id
    cloneVolume:
      operationId: cloneVolume
      parameters:
        volumeId: $request.body#/id
    detachVolume:
      operationId: detachVolume
      parameters:
        volumeId: $request.body#/id
    resizeVolume:
      operationId: resizeVolume
      parameters:
        volumeId: $request.body#/id
  x-stackQL-resources:
    nodebalancers:
      id: linode.nodebalancers.nodebalancers
      name: nodebalancers
      title: Nodebalancers
      methods:
        getNodeBalancers:
          operation:
            $ref: '#/paths/~1nodebalancers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getNodeBalancers:
          operation:
            $ref: '#/paths/~1nodebalancers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createNodeBalancer:
          operation:
            $ref: '#/paths/~1nodebalancers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getNodeBalancer:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getNodeBalancer:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateNodeBalancer:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteNodeBalancer:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/nodebalancers/methods/getNodeBalancers'
          - $ref: '#/components/x-stackQL-resources/nodebalancers/methods/getNodeBalancer'
        insert:
          - $ref: '#/components/x-stackQL-resources/nodebalancers/methods/createNodeBalancer'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/nodebalancers/methods/deleteNodeBalancer'
    configs:
      id: linode.nodebalancers.configs
      name: configs
      title: Configs
      methods:
        getNodeBalancerConfigs:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getNodeBalancerConfigs:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createNodeBalancerConfig:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getNodeBalancerConfig:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getNodeBalancerConfig:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateNodeBalancerConfig:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteNodeBalancerConfig:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        rebuildNodeBalancerConfig:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}~1rebuild/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/configs/methods/getNodeBalancerConfigs'
          - $ref: '#/components/x-stackQL-resources/configs/methods/getNodeBalancerConfig'
        insert:
          - $ref: '#/components/x-stackQL-resources/configs/methods/createNodeBalancerConfig'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/configs/methods/deleteNodeBalancerConfig'
    configs_nodes:
      id: linode.nodebalancers.configs_nodes
      name: configs_nodes
      title: Configs Nodes
      methods:
        getNodeBalancerConfigNodes:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}~1nodes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getNodeBalancerConfigNodes:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}~1nodes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createNodeBalancerNode:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}~1nodes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getNodeBalancerNode:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}~1nodes~1{nodeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getNodeBalancerNode:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}~1nodes~1{nodeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateNodeBalancerNode:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}~1nodes~1{nodeId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteNodeBalancerConfigNode:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1configs~1{configId}~1nodes~1{nodeId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/configs_nodes/methods/getNodeBalancerConfigNodes'
          - $ref: '#/components/x-stackQL-resources/configs_nodes/methods/getNodeBalancerNode'
        insert:
          - $ref: '#/components/x-stackQL-resources/configs_nodes/methods/createNodeBalancerNode'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/configs_nodes/methods/deleteNodeBalancerConfigNode'
    stats:
      id: linode.nodebalancers.stats
      name: stats
      title: Stats
      methods:
        get_nodebalancers__nodeBalancerId_stats:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1stats/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _get_nodebalancers__nodeBalancerId_stats:
          operation:
            $ref: '#/paths/~1nodebalancers~1{nodeBalancerId}~1stats/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/stats/methods/get_nodebalancers__nodeBalancerId_stats'
        insert: []
        update: []
        delete: []
paths:
  /nodebalancers:
    get:
      x-linode-grant: read_only
      tags:
        - NodeBalancers
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      summary: NodeBalancers List
      description: |
        Returns a paginated list of NodeBalancers you have access to.
      operationId: getNodeBalancers
      x-linode-cli-action:
        - list
        - ls
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_only'
      responses:
        '200':
          description: A paginated list of NodeBalancers.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NodeBalancer'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/nodebalancers
        - lang: CLI
          source: |
            linode-cli nodebalancers list
    post:
      x-linode-grant: add_nodebalancers
      tags:
        - NodeBalancers
      summary: NodeBalancer Create
      description: |
        Creates a NodeBalancer in the requested Region.

        NodeBalancers require a port Config with at least one backend Node to start serving requests.

        When using the Linode CLI to create a NodeBalancer, first create a NodeBalancer without any Configs. Then, create Configs and Nodes for that NodeBalancer with the respective [Config Create](/docs/api/nodebalancers/#config-create) and [Node Create](/docs/api/nodebalancers/#node-create) commands.
      operationId: createNodeBalancer
      x-linode-cli-action: create
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_write'
      requestBody:
        description: Information about the NodeBalancer to create.
        required: true
        x-linode-cli-allowed-defaults:
          - region
        content:
          application/json:
            schema:
              required:
                - region
              properties:
                region:
                  type: string
                  description: |
                    The ID of the Region to create this NodeBalancer in.
                  example: us-east
                label:
                  $ref: '#/components/schemas/NodeBalancer/properties/label'
                client_conn_throttle:
                  $ref: '#/components/schemas/NodeBalancer/properties/client_conn_throttle'
                configs:
                  type: array
                  description: |
                    The port Config(s) to create for this NodeBalancer.

                    Each Config must have a unique port and at least one Node.
                  required:
                    - nodes
                  items:
                    type: object
                    description: 'A request object representing a NodeBalancer Config, including Nodes.'
                    properties:
                      port:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/port'
                      protocol:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/protocol'
                      algorithm:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/algorithm'
                      stickiness:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/stickiness'
                      check:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/check'
                      check_interval:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/check_interval'
                      check_timeout:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/check_timeout'
                      check_attempts:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/check_attempts'
                      check_path:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/check_path'
                      check_body:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/check_body'
                      check_passive:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/check_passive'
                      proxy_protocol:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/proxy_protocol'
                      cipher_suite:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/cipher_suite'
                      ssl_cert:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/ssl_cert'
                      ssl_key:
                        $ref: '#/components/schemas/NodeBalancerConfig/properties/ssl_key'
                      nodes:
                        type: array
                        description: |
                          The NodeBalancer Node(s) that serve this Config.
                        items:
                          $ref: '#/components/schemas/NodeBalancerNode'
      responses:
        '200':
          description: NodeBalancer created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeBalancer'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "region": "us-east",
                  "label": "balancer12345",
                  "client_conn_throttle": 0,
                  "configs": [
                    {
                      "port": 443,
                      "protocol": "https",
                      "algorithm": "roundrobin",
                      "stickiness": "http_cookie",
                      "check": "http_body",
                      "check_interval": 90,
                      "check_timeout": 10,
                      "check_attempts": 3,
                      "check_path": "/test",
                      "check_body": "it works",
                      "check_passive": true,
                      "proxy_protocol": "none",
                      "cipher_suite": "recommended",
                      "ssl_cert": "-----BEGIN CERTIFICATE-----\nCERTIFICATE_INFORMATION\n-----END CERTIFICATE-----",
                      "ssl_key": "-----BEGIN PRIVATE KEY-----\nPRIVATE_KEY_INFORMATION\n-----END PRIVATE KEY-----",
                      "nodes": [
                        {
                          "address": "192.168.210.120:80",
                          "label": "node1",
                          "weight": 50,
                          "mode": "accept"
                        },
                        {
                          "address": "192.168.210.122:81",
                          "label": "node2",
                          "weight": 50,
                          "mode": "accept"
                        }
                      ]
                    }
                  ]
                }' \
                https://api.linode.com/v4/nodebalancers
        - lang: CLI
          source: |
            linode-cli nodebalancers create \
              --region us-east \
              --label balancer12345 \
              --client_conn_throttle 0
  '/nodebalancers/{nodeBalancerId}':
    get:
      x-linode-grant: read_only
      tags:
        - NodeBalancers
      summary: NodeBalancer View
      description: |
        Returns a single NodeBalancer you can access.
      operationId: getNodeBalancer
      x-linode-cli-action: view
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_only'
      responses:
        '200':
          description: The requested NodeBalancer object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeBalancer'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/nodebalancers/12345
        - lang: CLI
          source: |
            linode-cli nodebalancers view 12345
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
    put:
      x-linode-grant: read_write
      tags:
        - NodeBalancers
      summary: NodeBalancer Update
      description: |
        Updates information about a NodeBalancer you can access.
      operationId: updateNodeBalancer
      x-linode-cli-action: update
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_write'
      requestBody:
        description: The information to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBalancer'
      responses:
        '200':
          description: NodeBalancer updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeBalancer'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "label": "balancer12345",
                  "client_conn_throttle": 0
                }' \
                https://api.linode.com/v4/nodebalancers/12345
        - lang: CLI
          source: |
            linode-cli nodebalancers update 12345 \
              --label balancer12345 \
              --client_conn_throttle 0
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
    delete:
      x-linode-grant: read_write
      tags:
        - NodeBalancers
      summary: NodeBalancer Delete
      description: |
        Deletes a NodeBalancer.

        **This is a destructive action and cannot be undone.**

        Deleting a NodeBalancer will also delete all associated Configs and Nodes, although the backend servers represented by the Nodes will not be changed or removed. Deleting a NodeBalancer will cause you to lose access to the IP Addresses assigned to this NodeBalancer.
      operationId: deleteNodeBalancer
      x-linode-cli-action:
        - delete
        - rm
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_write'
      responses:
        '200':
          description: NodeBalancer deleted successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/nodebalancers/12345
        - lang: CLI
          source: |
            linode-cli nodebalancers delete 12345
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
  '/nodebalancers/{nodeBalancerId}/configs':
    get:
      x-linode-grant: read_only
      tags:
        - NodeBalancers
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
      summary: Configs List
      description: |
        Returns a paginated list of NodeBalancer Configs associated with this NodeBalancer. NodeBalancer Configs represent individual ports that this NodeBalancer will accept traffic on, one Config per port.

        For example, if you wanted to accept standard HTTP traffic, you would need a Config listening on port 80.
      operationId: getNodeBalancerConfigs
      x-linode-cli-action: configs-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_only'
      responses:
        '200':
          description: A paginted list of NodeBalancer Configs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NodeBalancerConfig'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/nodebalancers/12345/configs
        - lang: CLI
          source: |
            linode-cli nodebalancers configs-list 12345
    post:
      x-linode-grant: read_write
      tags:
        - NodeBalancers
      summary: Config Create
      description: |
        Creates a NodeBalancer Config, which allows the NodeBalancer to accept traffic on a new port. You will need to add NodeBalancer Nodes to the new Config before it can actually serve requests.
      operationId: createNodeBalancerConfig
      x-linode-cli-action: config-create
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_write'
      requestBody:
        description: Information about the port to configure.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBalancerConfig'
      responses:
        '200':
          description: Config created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeBalancerConfig'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "port": 443,
                  "protocol": "https",
                  "algorithm": "roundrobin",
                  "stickiness": "http_cookie",
                  "check": "http_body",
                  "check_interval": 90,
                  "check_timeout": 10,
                  "check_attempts": 3,
                  "check_path": "/test",
                  "check_body": "it works",
                  "check_passive": true,
                  "proxy_protocol": "none",
                  "ssl_cert": "-----BEGIN CERTIFICATE-----\nCERTIFICATE_INFORMATION\n-----END CERTIFICATE-----",
                  "ssl_key": "-----BEGIN PRIVATE KEY-----\nPRIVATE_KEY_INFORMATION\n-----END PRIVATE KEY-----",
                  "cipher_suite": "recommended"
                }' \
                https://api.linode.com/v4/nodebalancers/12345/configs
        - lang: CLI
          source: |
            linode-cli nodebalancers config-create 12345 \
              --port 443 \
              --protocol https \
              --algorithm roundrobin \
              --stickiness http_cookie \
              --check http_body \
              --check_interval 90 \
              --check_timeout 10 \
              --check_attempts 3 \
              --check_path "/test" \
              --check_body "it works" \
              --check_passive true \
              --proxy_protocol "none" \
              --ssl_cert "-----BEGIN CERTIFICATE-----
                          CERTIFICATE_INFORMATION
                          -----END CERTIFICATE-----" \
              --ssl_key "-----BEGIN PRIVATE KEY-----
                         PRIVATE_KEY_INFORMATION
                         -----END PRIVATE KEY-----" \
              --cipher_suite recommended
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
  '/nodebalancers/{nodeBalancerId}/configs/{configId}':
    get:
      x-linode-grant: read_only
      tags:
        - NodeBalancers
      summary: Config View
      description: |
        Returns configuration information for a single port of this NodeBalancer.
      operationId: getNodeBalancerConfig
      x-linode-cli-action: config-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_only'
      responses:
        '200':
          description: The requested NodeBalancer config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeBalancerConfig'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/nodebalancers/12345/configs/4567
        - lang: CLI
          source: |
            linode-cli nodebalancers config-view \
              12345 4567
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
        - name: configId
          in: path
          description: The ID of the config to access.
          required: true
          schema:
            type: integer
    put:
      x-linode-grant: read_write
      tags:
        - NodeBalancers
      summary: Config Update
      description: |
        Updates the configuration for a single port on a NodeBalancer.
      operationId: updateNodeBalancerConfig
      x-linode-cli-action: config-update
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_write'
      requestBody:
        description: The fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBalancerConfig'
      responses:
        '200':
          description: Config updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeBalancerConfig'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "port": 443,
                  "protocol": "https",
                  "algorithm": "roundrobin",
                  "stickiness": "http_cookie",
                  "check": "http_body",
                  "check_interval": 90,
                  "check_timeout": 10,
                  "check_attempts": 3,
                  "check_path": "/test",
                  "check_body": "it works",
                  "check_passive": true,
                  "proxy_protocol": "none",
                  "ssl_cert": "-----BEGIN CERTIFICATE-----\nCERTIFICATE_INFORMATION\n-----END CERTIFICATE-----",
                  "ssl_key": "-----BEGIN PRIVATE KEY-----\nPRIVATE_KEY_INFORMATION\n-----END PRIVATE KEY-----",
                  "cipher_suite": "recommended"
                }' \
                https://api.linode.com/v4/nodebalancers/12345/configs/4567
        - lang: CLI
          source: |
            linode-cli nodebalancers config-update \
              12345 4567 \
              --port 443 \
              --protocol https \
              --algorithm roundrobin \
              --stickiness http_cookie \
              --check http_body \
              --check_interval 90 \
              --check_timeout 10 \
              --check_attempts 3 \
              --check_path "/test" \
              --check_body "it works" \
              --check_passive true \
              --proxy_protocol "none" \
              --ssl_cert "-----BEGIN CERTIFICATE-----
                          CERTIFICATE_INFORMATION
                          -----END CERTIFICATE-----" \
              --ssl_key "-----BEGIN PRIVATE KEY-----
                         PRIVATE_KEY_INFORMATION
                         -----END PRIVATE KEY-----" \
              --cipher_suite recommended
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
        - name: configId
          in: path
          description: The ID of the config to access.
          required: true
          schema:
            type: integer
    delete:
      x-linode-grant: read_write
      tags:
        - NodeBalancers
      summary: Config Delete
      description: |
        Deletes the Config for a port of this NodeBalancer.

        **This cannot be undone.**

        Once completed, this NodeBalancer will no longer respond to requests on the given port. This also deletes all associated NodeBalancerNodes, but the Linodes they were routing traffic to will be unchanged and will not be removed.
      operationId: deleteNodeBalancerConfig
      x-linode-cli-action: config-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_write'
      responses:
        '200':
          description: NodeBalancer Config deleted successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/nodebalancers/12345/configs/4567
        - lang: CLI
          source: |
            linode-cli nodebalancers config-delete \
              12345 4567
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
        - name: configId
          in: path
          description: The ID of the config to access.
          required: true
          schema:
            type: integer
  '/nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild':
    post:
      x-linode-grant: add_nodebalancers
      tags:
        - NodeBalancers
      summary: Config Rebuild
      description: |
        Rebuilds a NodeBalancer Config and its Nodes that you have permission to modify.

        Use this command to update a NodeBalancer's Config and Nodes with a single request.
      operationId: rebuildNodeBalancerConfig
      x-linode-cli-action: config-rebuild
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_write'
      requestBody:
        description: |
          Information about the NodeBalancer Config to rebuild.
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/NodeBalancerConfig'
                - type: object
                  required:
                    - nodes
                  properties:
                    nodes:
                      type: array
                      description: |
                        The NodeBalancer Node(s) that serve this Config.

                        Some considerations for Nodes when rebuilding a config:
                          * Current Nodes excluded from the request body will be deleted from the Config.
                          * Current Nodes (identified by their Node ID) will be updated.
                          * New Nodes (included without a Node ID) will be created.
                      items:
                        type: object
                        description: NodeBalancer Node request object including ID.
                        properties:
                          id:
                            type: integer
                            description: The unique ID of the Node to update.
                            example: 54321
                          address:
                            $ref: '#/components/schemas/NodeBalancerNode/properties/address'
                          label:
                            $ref: '#/components/schemas/NodeBalancerNode/properties/label'
                          weight:
                            $ref: '#/components/schemas/NodeBalancerNode/properties/weight'
                          mode:
                            $ref: '#/components/schemas/NodeBalancerNode/properties/mode'
      responses:
        '200':
          description: NodeBalancer created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeBalancerConfig'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "port": 1234,
                  "protocol": "https",
                  "algorithm": "roundrobin",
                  "stickiness": "http_cookie",
                  "check": "http_body",
                  "check_interval": 90,
                  "check_timeout": 10,
                  "check_attempts": 3,
                  "check_path": "/test",
                  "check_body": "it works",
                  "check_passive": true,
                  "proxy_protocol": "none",
                  "cipher_suite": "recommended",
                  "ssl_cert": "-----BEGIN CERTIFICATE-----\nCERTIFICATE_INFORMATION\n-----END CERTIFICATE-----",
                  "ssl_key": "-----BEGIN PRIVATE KEY-----\nPRIVATE_KEY_INFORMATION\n-----END PRIVATE KEY-----",
                  "nodes": [
                    {
                      "id": 54321,
                      "address": "192.168.210.120:80",
                      "label": "node1",
                      "weight": 50,
                      "mode": "accept"
                    },
                    {
                      "address": "192.168.210.122:81",
                      "label": "node2",
                      "weight": 50,
                      "mode": "accept"
                    }
                  ]
                }' \
                https://api.linode.com/v4/nodebalancers/12345/configs/4567/rebuild
        - lang: CLI
          source: |
            linode-cli nodebalancers config-rebuild \
              12345 4567 \
              --port 443 \
              --protocol https \
              --algorithm roundrobin \
              --stickiness http_cookie \
              --check http_body \
              --check_interval 90 \
              --check_timeout 10 \
              --check_attempts 3 \
              --check_path "/test" \
              --check_body "it works" \
              --check_passive true \
              --proxy_protocol "none" \
              --ssl_cert "-----BEGIN CERTIFICATE-----
                          CERTIFICATE_INFORMATION
                          -----END CERTIFICATE-----" \
              --ssl_key "-----BEGIN PRIVATE KEY-----
                         PRIVATE_KEY_INFORMATION
                         -----END PRIVATE KEY-----" \
              --cipher_suite recommended \
              --nodes '{"address":"192.168.210.120:80","label":"node1","weight":50,"mode":"accept"}' \
              --nodes '{"address":"192.168.210.122:80","label":"node2","weight":50,"mode":"accept"}'
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
        - name: configId
          in: path
          description: The ID of the Config to access.
          required: true
          schema:
            type: integer
  '/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes':
    get:
      x-linode-grant: read_only
      tags:
        - NodeBalancers
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
        - name: configId
          in: path
          description: The ID of the NodeBalancer config to access.
          required: true
          schema:
            type: integer
      summary: Nodes List
      description: |
        Returns a paginated list of NodeBalancer nodes associated with this Config. These are the backends that will be sent traffic for this port.
      operationId: getNodeBalancerConfigNodes
      x-linode-cli-action: nodes-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_only'
      responses:
        '200':
          description: A paginated list of NodeBalancer nodes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NodeBalancerNode'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/nodebalancers/12345/configs/4567/nodes
        - lang: CLI
          source: |
            linode-cli nodebalancers nodes-list 12345 4567
    post:
      x-linode-grant: read_write
      tags:
        - NodeBalancers
      summary: Node Create
      description: |
        Creates a NodeBalancer Node, a backend that can accept traffic for this NodeBalancer Config. Nodes are routed requests on the configured port based on their status.
      operationId: createNodeBalancerNode
      x-linode-cli-action: node-create
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_write'
      requestBody:
        description: Information about the Node to create.
        required: true
        content:
          application/json:
            schema:
              required:
                - label
                - address
              allOf:
                - $ref: '#/components/schemas/NodeBalancerNode'
      responses:
        '200':
          description: Node created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeBalancerNode'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "address": "192.168.210.120:80",
                  "label": "node54321",
                  "weight": 50,
                  "mode": "accept"
                }' \
                https://api.linode.com/v4/nodebalancers/12345/configs/4567/nodes
        - lang: CLI
          source: |
            linode-cli nodebalancers node-update \
              12345 4567 \
              --address 192.168.210.120:80 \
              --label node54321 \
              --weight 50 \
              --mode accept
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
        - name: configId
          in: path
          description: The ID of the NodeBalancer config to access.
          required: true
          schema:
            type: integer
  '/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes/{nodeId}':
    get:
      x-linode-grant: read_only
      tags:
        - NodeBalancers
      summary: Node View
      description: |
        Returns information about a single Node, a backend for this NodeBalancer's configured port.
      operationId: getNodeBalancerNode
      x-linode-cli-action: node-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_write'
      responses:
        '200':
          description: A paginated list of NodeBalancer nodes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeBalancerNode'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/nodebalancers/12345/configs/4567/nodes/54321
        - lang: CLI
          source: |
            linode-cli nodebalancers node-view 12345 4567 54321
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
        - name: configId
          in: path
          description: The ID of the Config to access
          required: true
          schema:
            type: integer
        - name: nodeId
          in: path
          description: The ID of the Node to access
          required: true
          schema:
            type: integer
    put:
      x-linode-grant: read_write
      tags:
        - NodeBalancers
      summary: Node Update
      description: |
        Updates information about a Node, a backend for this NodeBalancer's configured port.
      operationId: updateNodeBalancerNode
      x-linode-cli-action: node-update
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_write'
      requestBody:
        description: The fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBalancerNode'
      responses:
        '200':
          description: Node updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeBalancerNode'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "address": "192.168.210.120:80",
                  "label": "node54321",
                  "weight": 50,
                  "mode": "accept"
                }' \
                https://api.linode.com/v4/nodebalancers/12345/configs/4567/nodes/54321
        - lang: CLI
          source: |
            linode-cli nodebalancers node-create \
              12345 4567 54321 \
              --address 192.168.210.120:80 \
              --label node54321 \
              --weight 50 \
              --mode accept
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
        - name: configId
          in: path
          description: The ID of the Config to access
          required: true
          schema:
            type: integer
        - name: nodeId
          in: path
          description: The ID of the Node to access
          required: true
          schema:
            type: integer
    delete:
      x-linode-grant: read_write
      tags:
        - NodeBalancers
      summary: Node Delete
      description: |
        Deletes a Node from this Config. This backend will no longer receive traffic for the configured port of this NodeBalancer.

        This does not change or remove the Linode whose address was used in the creation of this Node.
      operationId: deleteNodeBalancerConfigNode
      x-linode-cli-action: node-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_write'
      responses:
        '200':
          description: Node deleted successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/nodebalancers/12345/configs/4567/nodes/54321
        - lang: CLI
          source: |
            linode-cli nodebalancers node-delete \
              12345 4567 54321
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
        - name: configId
          in: path
          description: The ID of the Config to access
          required: true
          schema:
            type: integer
        - name: nodeId
          in: path
          description: The ID of the Node to access
          required: true
          schema:
            type: integer
  '/nodebalancers/{nodeBalancerId}/stats':
    get:
      x-linode-grant: read_only
      tags:
        - NodeBalancers
      summary: NodeBalancer Statistics View
      description: |
        Returns detailed statistics about the requested NodeBalancer.
      x-linode-cli-action: stats
      x-linode-cli-skip: true
      security:
        - personalAccessToken: []
        - oauth:
            - 'nodebalancers:read_only'
      responses:
        '200':
          description: The requested stats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeBalancerStats'
        default:
          $ref: '#/components/responses/ErrorResponse'
      parameters:
        - name: nodeBalancerId
          in: path
          description: The ID of the NodeBalancer to access.
          required: true
          schema:
            type: integer
