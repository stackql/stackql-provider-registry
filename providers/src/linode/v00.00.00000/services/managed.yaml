openapi: 3.0.1
servers:
  - url: 'https://api.linode.com/v4'
  - url: 'https://api.linode.com/v4beta'
info:
  version: 4.147.0
  title: Linode API - managed
  description: managed
  contact:
    name: Linode
    url: 'https://linode.com'
    email: support@linode.com
tags:
  - name: Account
    description: 'Use the Account endpoints to manage user settings, billing, and payments. You can also initiate and maintain OAuth client application authentication, enable the Linode Managed service, and create new users on your account.'
  - name: Databases
    description: 'Managed Databases is Linode''s fully-managed, high-performance database service. Use the Managed Databases endpoints to create and manage database clusters.'
  - name: Domains
    description: Use the Domains endpoints to create and manage domains and domain records on your account.
  - name: Images
    description: 'Use the Images endpoints to capture, store, and manage custom Linode images.'
  - name: Linode Instances
    description: 'Use the Linode Instances endpoints to create, configure, and manage your Linode instances. You can also manage the Linode Backup service; maintain and manage configuration profiles; create and maintain disks, intiate a host migration; view Linode Instance statistics; and more.'
  - name: Linode Types
    description: 'Use the Linode Types endpoints to retrieve information about Linode plan types, including pricing information, hardware resources, and network transfer allotment.'
  - name: Linode Kubernetes Engine (LKE)
    description: Linode Kubernetes Engine (LKE) is Linode's managed Kubernetes service. Use the LKE endpoints to create and manage Kubernetes clusters and their associated Node Pools.
  - name: Longview
    description: Longview is Linode's system-level monitoring and graphing service. Use the Longview endpoints to manage your Longview subscription and plan and to create and maintain Longview clients.
  - name: Managed
    description: 'Managed is Linode''s incident response service. Use the Managed endpoints to register a service to be monitored by the Managed Service team, provide secure access to your managed services,  view information about detected issues, and more.'
  - name: Networking
    description: 'Use the Networking endpoints to view all IP addresses on your account, reorganize assigned IPv4 addresses, update RDNS, and configure IP sharing.'
  - name: NodeBalancers
    description: 'NodeBalancers is Linode''s load balancing service. Use the NodeBalancers endpoints to create and manage NodeBalancers. You can also create and maintain configurations; create and maintain nodes, and view statistics.'
  - name: Object Storage
    description: 'Object Storage is Linode''s S3-compatible data storage service. Use the Object Storage endpoints to create and maintaining buckets, add and remove objects from buckets, create and maintain Object Storage keys, and cancel the Object Storage service.'
  - name: Profile
    description: 'Use the Profile endpoints to manage your Linode user profile preferences and security settings. This includes creating and maintaining personal access tokens, creating and maintaining SSH keys, confirming and enabling two-factor authentication, and updating user and profile preferences.'
  - name: Regions
    description: 'Use the Regions endpoints to view information about the various Linode data center regions, including the service capabilities for each region, country, status, and more.'
  - name: StackScripts
    description: Linode StackScripts allow you to create reusable scripts to configure new Linode instances. Use the StackScripts endpoints to create and manage StackScripts on your account.
  - name: Support
    description: 'Use the Support endpoints to open, view, and close Linode Support tickets. You can also create and manage your Support ticket replies.'
  - name: Tags
    description: 'Tags allow you to organize and group your various Linode services. Use the Tags endpoints to create, assign, and delete your account tags.'
  - name: Volumes
    description: 'Volumes is Linode''s block storage service. Use the Volumes endpoints to create, attach, and manage your account Volumes.'
components:
  schemas:
    ManagedContact:
      type: object
      description: |
        Information about someone Linode's special forces may contact in case an issue is detected with a manager service.
      properties:
        id:
          type: integer
          description: |
            This Contact's unique ID.
          example: 567
          readOnly: true
          x-linode-cli-display: 1
        name:
          type: string
          minLength: 2
          maxLength: 64
          pattern: '[a-zA-Z0-9-_ ]{2,64}'
          description: |
            The name of this Contact.
          example: John Doe
          x-linode-cli-display: 2
        email:
          type: string
          format: email
          description: |
            The address to email this Contact to alert them of issues.
          example: john.doe@example.org
          x-linode-cli-display: 3
        phone:
          type: object
          description: |
            Information about how to reach this Contact by phone.
          x-linode-cli-display: 4
          properties:
            primary:
              type: string
              nullable: true
              format: phone
              description: |
                This Contact's primary phone number.
              example: 123-456-7890
            secondary:
              type: string
              nullable: true
              format: phone
              description: |
                This Contact's secondary phone number.
              example: null
        group:
          x-linode-filterable: true
          nullable: true
          type: string
          minLength: 2
          maxLength: 50
          description: |
            A grouping for this Contact. This is for display purposes only.
          example: on-call
          x-linode-cli-display: 5
        updated:
          type: string
          format: date-time
          description: |
            When this Contact was last updated.
          example: '2018-01-01T00:01:01'
          readOnly: true
    PaginationEnvelope:
      type: object
      description: |
        An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.
      properties:
        pages:
          type: integer
          readOnly: true
          description: 'The total number of [pages](/docs/api/#pagination).'
          example: 1
        page:
          type: integer
          readOnly: true
          description: 'The current [page](/docs/api/#pagination).'
          example: 1
        results:
          type: integer
          readOnly: true
          description: The total number of results.
          example: 1
    ErrorObject:
      type: object
      description: |
        An object for describing a single error that occurred during the processing of a request.
      properties:
        reason:
          type: string
          description: |
            What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
          example: fieldname must be a valid value
        field:
          type: string
          description: |
            The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
          example: fieldname
    ManagedCredential:
      type: object
      description: |
        A securely-stored Credential that allows Linode's special forces to access a Managed server to respond to Issues.
      properties:
        id:
          type: integer
          description: |
            This Credential's unique ID.
          example: 9991
          readOnly: true
          x-linode-cli-display: 1
        label:
          type: string
          minLength: 2
          maxLength: 75
          pattern: '[a-zA-Z0-9-_ \.]{2,75}'
          description: |
            The unique label for this Credential. This is for display purposes only.
          example: prod-password-1
          x-linode-cli-display: 2
        last_decrypted:
          type: string
          format: date-time
          description: |
            The date this Credential was last decrypted by a member of Linode special forces.
          readOnly: true
          example: '2018-01-01T00:01:01'
          x-linode-cli-display: 3
    ManagedIssue:
      type: object
      description: |
        An Issue that was detected with a service Linode is managing.
      properties:
        id:
          type: integer
          description: |
            This Issue's unique ID.
          example: 823
          readOnly: true
          x-linode-cli-display: 1
        created:
          type: string
          format: date-time
          description: |
            When this Issue was created. Issues are created in response to issues detected with Managed Services, so this is also when the Issue was detected.
          example: '2018-01-01T00:01:01'
          readOnly: true
          x-linode-cli-display: 2
        services:
          type: array
          items:
            type: integer
            example: 654
          description: |
            An array of Managed Service IDs that were affected by this Issue.
          readOnly: true
          x-linode-cli-display: 3
        entity:
          type: object
          description: |
            The ticket this Managed Issue opened.
          readOnly: true
          x-linode-cli-display: 4
          properties:
            id:
              type: integer
              description: |
                This ticket's ID
              example: 98765
              readOnly: true
            type:
              type: string
              enum:
                - ticket
              description: |
                The type of entity this is. In this case, it is always a Ticket.
              example: ticket
              readOnly: true
            label:
              type: string
              description: |
                The summary for this Ticket.
              example: Managed Issue opened!
              readOnly: true
            url:
              type: string
              format: url
              description: |
                The relative URL where you can access this Ticket.
              example: /support/tickets/98765
              readOnly: true
    ManagedLinodeSettings:
      type: object
      description: |
        Settings for a specific Linode related to Managed Services. There is one ManagedLinodeSettings object for each Linode on your Account.
      properties:
        id:
          type: integer
          description: |
            The ID of the Linode these Settings are for.
          example: 123
          readOnly: true
          x-linode-cli-display: 1
        label:
          type: string
          description: |
            The label of the Linode these Settings are for.
          example: linode123
          readOnly: true
          x-linode-cli-display: 2
        group:
          deprecated: true
          type: string
          description: |
            The group of the Linode these Settings are for. This is for display purposes only.
          example: linodes
          readOnly: true
          x-linode-cli-display: 3
        ssh:
          type: object
          description: |
            The SSH settings for this Linode.
          x-linode-cli-display: 4
          properties:
            access:
              type: boolean
              description: |
                If true, Linode special forces may access this Linode over ssh to respond to Issues.
              example: true
              default: true
            user:
              type: string
              minLength: 0
              maxLength: 32
              description: |
                The specific user, if any, Linode's special forces should use when accessing this
                Linode to respond to an issue.

                The default `null` value corresponds to the root user.
              example: linode
              default: null
              nullable: true
            ip:
              type: string
              format: ip
              description: |
                The IP Linode special forces should use to access this Linode
                when responding to an Issue.

                By default, any of a Linode's IP addresses can be used for incident response access.
              example: 203.0.113.1
              default: any
            port:
              type: integer
              minimum: 1
              maximum: 65535
              description: |
                The port Linode special forces should use to access this Linode
                over ssh to respond to an Issue.

                The default `null` value corresponds to port 22.
              example: 22
              nullable: true
              default: null
    ManagedService:
      type: object
      description: |
        A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.
      properties:
        id:
          type: integer
          description: |
            This Service's unique ID.
          example: 9944
          readOnly: true
          x-linode-cli-display: 1
        status:
          type: string
          enum:
            - disabled
            - pending
            - ok
            - problem
          description: |
            The current status of this Service.
          example: ok
          readOnly: true
          x-linode-cli-display: 2
          x-linode-cli-color:
            ok: green
            disabled: red
            default_: yellow
        service_type:
          type: string
          enum:
            - url
            - tcp
          description: |
            How this Service is monitored.
          example: url
          x-linode-cli-display: 3
        label:
          type: string
          minLength: 3
          maxLength: 64
          pattern: '[a-zA-Z0-9-_ \.]{3,64}'
          description: |
            The label for this Service. This is for display purposes only.
          example: prod-1
          x-linode-cli-display: 4
        address:
          type: string
          format: url
          minLength: 3
          maxLength: 100
          description: |
            The URL at which this Service is monitored.

            URL parameters such as `?no-cache=1` are preserved.

            URL fragments/anchors such as `#monitor` are **not** preserved.
          example: 'https://example.org'
          x-linode-cli-display: 5
        timeout:
          type: integer
          minimum: 1
          maximum: 255
          description: |
            How long to wait, in seconds, for a response before considering the Service to be down.
          example: 30
        body:
          type: string
          nullable: true
          minLength: 0
          maxLength: 100
          description: |
            What to expect to find in the response body for the Service to be considered up.
          example: it worked
        consultation_group:
          type: string
          minLength: 0
          maxLength: 50
          description: |
            The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
          example: on-call
          x-linode-cli-display: 6
        notes:
          type: string
          nullable: true
          description: |
            Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
          example: The service name is my-cool-application
        region:
          type: string
          description: |
            The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
          example: null
        credentials:
          type: array
          items:
            type: integer
            example: 9991
          description: |
            An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
        created:
          type: string
          format: date-time
          description: When this Managed Service was created.
          example: '2018-01-01T00:01:01'
          readOnly: true
        updated:
          type: string
          format: date-time
          description: When this Managed Service was last updated.
          example: '2018-03-01T00:01:01'
          readOnly: true
    StatsDataAvailable:
      type: object
      description: |
        A collection of graph data returned for managed stats.
      properties:
        cpu:
          type: array
          description: CPU usage stats from the last 24 hours.
          items:
            $ref: '#/components/schemas/StatsData'
        disk:
          type: array
          description: Disk usage stats from the last 24 hours.
          items:
            $ref: '#/components/schemas/StatsData'
        swap:
          type: array
          description: Swap usage stats from the last 24 hours.
          items:
            $ref: '#/components/schemas/StatsData'
        net_in:
          type: array
          description: Inbound network traffic stats from the last 24 hours.
          items:
            $ref: '#/components/schemas/StatsData'
        net_out:
          type: array
          description: Outbound network traffic stats from the last 24 hours.
          items:
            $ref: '#/components/schemas/StatsData'
    StatsDataUnavailable:
      type: array
      readOnly: true
      description: |
        An array of error messages if managed stats are unavaliable.
      items:
        type: string
        example: Graphs are not yet available.
    StatsData:
      type: object
      description: |
        A stat data point.
      properties:
        x:
          type: integer
          readOnly: true
          description: |
            A stats graph data point.
          example: 11513761600000
        'y':
          type: integer
          readOnly: true
          description: |
            A stats graph data point.
          example: 29.94
  parameters:
    pageOffset:
      name: page
      in: query
      description: The page of a collection to return.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page_size
      in: query
      description: The number of items to return per page.
      schema:
        type: integer
        minimum: 25
        maximum: 500
        default: 100
  responses:
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorObject'
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://login.linode.com/oauth/authorize'
          tokenUrl: 'https://login.linode.com/oauth/token'
          scopes:
            'account:read_only': Allows access to GET information about your Account.
            'account:read_write': Allows access to all endpoints related to your Account.
            'domains:read_only': Allows access to GET Domains on your Account.
            'domains:read_write': Allows access to all Domain endpoints.
            'events:read_only': Allows access to GET your Events.
            'events:read_write': Allows access to all endpoints related to your Events.
            'firewall:read_only': Allows access to GET information about your Firewalls.
            'firewall:read_write': Allows acces to all Firewall endpoints.
            'images:read_only': Allows access to GET your Images.
            'images:read_write': Allows access to all endpoints related to your Images.
            'ips:read_only': Allows access to GET your ips.
            'ips:read_write': Allows access to all endpoints related to your ips.
            'linodes:read_only': Allows access to GET Linodes on your Account.
            'linodes:read_write': Allow access to all endpoints related to your Linodes.
            'lke:read_only': Allows access to GET LKE Clusters on your Account.
            'lke:read_write': Allows access to all endpoints related to LKE Clusters on your Account.
            'longview:read_only': Allows access to GET your Longview Clients.
            'longview:read_write': Allows access to all endpoints related to your Longview Clients.
            'nodebalancers:read_only': Allows access to GET NodeBalancers on your Account.
            'nodebalancers:read_write': Allows access to all NodeBalancer endpoints.
            'object_storage:read_only': Allows access to GET information related to your Object Storage.
            'object_storage:read_write': Allows access to all Object Storage endpoints.
            'stackscripts:read_only': Allows access to GET your StackScripts.
            'stackscripts:read_write': Allows access to all endpoints related to your StackScripts.
            'volumes:read_only': Allows access to GET your Volumes.
            'volumes:read_write': Allows access to all endpoints related to your Volumes.
  links:
    bootLinode:
      operationId: bootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebootLinode:
      operationId: rebootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    shutdownLinode:
      operationId: shutdownLinodeInstance
      parameters:
        linodeId: $request.body#/id
    updateLinode:
      operationId: updateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    deleteLinode:
      operationId: deleteLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebuildLinode:
      operationId: rebuildLinodeInstance
      parameters:
        linodeId: $request.body#/id
    mutateLinode:
      operationId: mutateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    resizeLinode:
      operationId: resizeLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rescueLinode:
      operationId: rescueLinodeInstance
      parameters:
        linodeId: $request.body#/id
    cloneLinode:
      operationId: cloneLinodeInstance
      parameters:
        linodeId: $request.body#/id
    attachVolume:
      operationId: attachVolume
      parameters:
        volumeID: $request.body#/id
    cloneVolume:
      operationId: cloneVolume
      parameters:
        volumeId: $request.body#/id
    detachVolume:
      operationId: detachVolume
      parameters:
        volumeId: $request.body#/id
    resizeVolume:
      operationId: resizeVolume
      parameters:
        volumeId: $request.body#/id
  x-stackQL-resources:
    contacts:
      id: linode.managed.contacts
      name: contacts
      title: Contacts
      methods:
        getManagedContacts:
          operation:
            $ref: '#/paths/~1managed~1contacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getManagedContacts:
          operation:
            $ref: '#/paths/~1managed~1contacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createManagedContact:
          operation:
            $ref: '#/paths/~1managed~1contacts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getManagedContact:
          operation:
            $ref: '#/paths/~1managed~1contacts~1{contactId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getManagedContact:
          operation:
            $ref: '#/paths/~1managed~1contacts~1{contactId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateManagedContact:
          operation:
            $ref: '#/paths/~1managed~1contacts~1{contactId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteManagedContact:
          operation:
            $ref: '#/paths/~1managed~1contacts~1{contactId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/contacts/methods/getManagedContacts'
          - $ref: '#/components/x-stackQL-resources/contacts/methods/getManagedContact'
        insert:
          - $ref: '#/components/x-stackQL-resources/contacts/methods/createManagedContact'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/contacts/methods/deleteManagedContact'
    credentials:
      id: linode.managed.credentials
      name: credentials
      title: Credentials
      methods:
        getManagedCredentials:
          operation:
            $ref: '#/paths/~1managed~1credentials/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getManagedCredentials:
          operation:
            $ref: '#/paths/~1managed~1credentials/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createManagedCredential:
          operation:
            $ref: '#/paths/~1managed~1credentials/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getManagedCredential:
          operation:
            $ref: '#/paths/~1managed~1credentials~1{credentialId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getManagedCredential:
          operation:
            $ref: '#/paths/~1managed~1credentials~1{credentialId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateManagedCredential:
          operation:
            $ref: '#/paths/~1managed~1credentials~1{credentialId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateManagedCredentialUsernamePassword:
          operation:
            $ref: '#/paths/~1managed~1credentials~1{credentialId}~1update/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteManagedCredential:
          operation:
            $ref: '#/paths/~1managed~1credentials~1{credentialId}~1revoke/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        viewManagedSSHKey:
          operation:
            $ref: '#/paths/~1managed~1credentials~1sshkey/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _viewManagedSSHKey:
          operation:
            $ref: '#/paths/~1managed~1credentials~1sshkey/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/credentials/methods/getManagedCredentials'
          - $ref: '#/components/x-stackQL-resources/credentials/methods/getManagedCredential'
        insert:
          - $ref: '#/components/x-stackQL-resources/credentials/methods/createManagedCredential'
        update: []
        delete: []
    issues:
      id: linode.managed.issues
      name: issues
      title: Issues
      methods:
        getManagedIssues:
          operation:
            $ref: '#/paths/~1managed~1issues/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getManagedIssues:
          operation:
            $ref: '#/paths/~1managed~1issues/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getManagedIssue:
          operation:
            $ref: '#/paths/~1managed~1issues~1{issueId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getManagedIssue:
          operation:
            $ref: '#/paths/~1managed~1issues~1{issueId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/issues/methods/getManagedIssues'
          - $ref: '#/components/x-stackQL-resources/issues/methods/getManagedIssue'
        insert: []
        update: []
        delete: []
    linode_settings:
      id: linode.managed.linode_settings
      name: linode_settings
      title: Linode Settings
      methods:
        getManagedLinodeSettings:
          operation:
            $ref: '#/paths/~1managed~1linode-settings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getManagedLinodeSettings:
          operation:
            $ref: '#/paths/~1managed~1linode-settings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getManagedLinodeSetting:
          operation:
            $ref: '#/paths/~1managed~1linode-settings~1{linodeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getManagedLinodeSetting:
          operation:
            $ref: '#/paths/~1managed~1linode-settings~1{linodeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateManagedLinodeSetting:
          operation:
            $ref: '#/paths/~1managed~1linode-settings~1{linodeId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/linode_settings/methods/getManagedLinodeSettings'
          - $ref: '#/components/x-stackQL-resources/linode_settings/methods/getManagedLinodeSetting'
        insert: []
        update: []
        delete: []
    services:
      id: linode.managed.services
      name: services
      title: Services
      methods:
        getManagedServices:
          operation:
            $ref: '#/paths/~1managed~1services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getManagedServices:
          operation:
            $ref: '#/paths/~1managed~1services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createManagedService:
          operation:
            $ref: '#/paths/~1managed~1services/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getManagedService:
          operation:
            $ref: '#/paths/~1managed~1services~1{serviceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getManagedService:
          operation:
            $ref: '#/paths/~1managed~1services~1{serviceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateManagedService:
          operation:
            $ref: '#/paths/~1managed~1services~1{serviceId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteManagedService:
          operation:
            $ref: '#/paths/~1managed~1services~1{serviceId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        disableManagedService:
          operation:
            $ref: '#/paths/~1managed~1services~1{serviceId}~1disable/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        enableManagedService:
          operation:
            $ref: '#/paths/~1managed~1services~1{serviceId}~1enable/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/services/methods/getManagedServices'
          - $ref: '#/components/x-stackQL-resources/services/methods/getManagedService'
        insert:
          - $ref: '#/components/x-stackQL-resources/services/methods/createManagedService'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/services/methods/deleteManagedService'
    stats:
      id: linode.managed.stats
      name: stats
      title: Stats
      methods:
        getManagedStats:
          operation:
            $ref: '#/paths/~1managed~1stats/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getManagedStats:
          operation:
            $ref: '#/paths/~1managed~1stats/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  /managed/contacts:
    get:
      x-linode-grant: unrestricted only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Managed
      summary: Managed Contacts List
      description: |
        Returns a paginated list of Managed Contacts on your Account.

        This command can only be accessed by the unrestricted users of an account.
      operationId: getManagedContacts
      x-linode-cli-action: contacts-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: A paginated list of ManagedContacts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ManagedContact'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/contacts
        - lang: CLI
          source: |
            linode-cli managed contacts-list
    post:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Contact Create
      description: |
        Creates a Managed Contact.  A Managed Contact is someone Linode
        special forces can contact in the course of attempting to resolve an issue
        with a Managed Service.

        This command can only be accessed by the unrestricted users of an account.
      operationId: createManagedContact
      x-linode-cli-action: contact-create
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: Information about the contact to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedContact'
      responses:
        '200':
          description: Contact created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedContact'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "name": "John Doe",
                  "email": "john.doe@example.org",
                  "phone": {
                    "primary": "123-456-7890",
                    "secondary": null
                  },
                  "group": "on-call"
                }' \
                https://api.linode.com/v4/managed/contacts
        - lang: CLI
          source: |
            linode-cli managed contact-create \
              --name "John Doe" \
              --email "john.doe@example.org" \
              --phone.primary "123-456-7890"
  '/managed/contacts/{contactId}':
    get:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Contact View
      description: |
        Returns a single Managed Contact.

        This command can only be accessed by the unrestricted users of an account.
      operationId: getManagedContact
      x-linode-cli-action: contact-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: The requested Managed Contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedContact'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/contacts/567
        - lang: CLI
          source: |
            linode-cli managed contact-view 567
      parameters:
        - name: contactId
          in: path
          required: true
          description: The ID of the contact to access.
          schema:
            type: integer
    put:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Contact Update
      description: |
        Updates information about a Managed Contact.
        This command can only be accessed by the unrestricted users of an account.
      operationId: updateManagedContact
      x-linode-cli-action: contact-update
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: The fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedContact'
      responses:
        '200':
          description: Contact updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedContact'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "name": "John Doe",
                  "email": "john.doe@example.org",
                  "phone": {
                    "primary": "123-456-7890",
                    "secondary": null
                  },
                  "group": "on-call"
                }' \
                https://api.linode.com/v4/managed/contacts/567
        - lang: CLI
          source: |
            linode-cli managed contact-update 567 \
              --name "John Doe" \
              --email "john.doe@example.org" \
              --phone.primary "123-456-7890"
      parameters:
        - name: contactId
          in: path
          required: true
          description: The ID of the contact to access.
          schema:
            type: integer
    delete:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Contact Delete
      description: |
        Deletes a Managed Contact.

        This command can only be accessed by the unrestricted users of an account.
      operationId: deleteManagedContact
      x-linode-cli-action: contact-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: Contact deleted successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/managed/contacts/567
        - lang: CLI
          source: |
            linode-cli managed contact-delete 567
      parameters:
        - name: contactId
          in: path
          required: true
          description: The ID of the contact to access.
          schema:
            type: integer
  /managed/credentials:
    get:
      x-linode-grant: unrestricted only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Managed
      summary: Managed Credentials List
      description: |
        Returns a paginated list of Managed Credentials on your Account.

        This command can only be accessed by the unrestricted users of an account.
      operationId: getManagedCredentials
      x-linode-cli-action: credentials-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: A paginated list of ManagedCredentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ManagedCredential'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/credentials
        - lang: CLI
          source: |
            linode-cli managed credentials-list
    post:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Credential Create
      description: |
        Creates a Managed Credential. A Managed Credential is stored securely
        to allow Linode special forces to access your Managed Services and resolve
        issues.

        This command can only be accessed by the unrestricted users of an account.
      operationId: createManagedCredential
      x-linode-cli-action: credential-create
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: Information about the Credential to create.
        content:
          application/json:
            schema:
              required:
                - label
                - password
              allOf:
                - $ref: '#/components/schemas/ManagedCredential'
                - type: object
                  properties:
                    username:
                      type: string
                      minLength: 0
                      maxLength: 5000
                      description: |
                        The username to use when accessing the Managed Service.
                      example: johndoe
                    password:
                      type: string
                      description: |
                        The password to use when accessing the Managed Service.
                      example: s3cur3P@ssw0rd
      responses:
        '200':
          description: Credential created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedCredential'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "label": "prod-password-1",
                  "username": "johndoe",
                  "password": "s3cur3P@ssw0rd"
                }' \
                https://api.linode.com/v4/managed/credentials
        - lang: CLI
          source: |
            linode-cli managed credential-create \
              --label prod-password-1 \
              --username johndoe \
              --password s3cur3P@ssw0rd
  '/managed/credentials/{credentialId}':
    get:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Credential View
      description: |
        Returns a single Managed Credential.

        This command can only be accessed by the unrestricted users of an account.
      operationId: getManagedCredential
      x-linode-cli-action: credential-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: The requested Managed Credential.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedCredential'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/credentials/9991
        - lang: CLI
          source: |
            linode-cli managed credential-view 9991
      parameters:
        - name: credentialId
          in: path
          required: true
          description: The ID of the Credential to access.
          schema:
            type: integer
    put:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Credential Update
      description: |
        Updates the label of a Managed Credential. This endpoint does not update the username and password for a Managed Credential. To do this, use the Managed Credential Username and Password Update ([POST /managed/credentials/{credentialId}/update](/docs/api/managed/#managed-credential-username-and-password-update)) endpoint instead.
        This command can only be accessed by the unrestricted users of an account.
      operationId: updateManagedCredential
      x-linode-cli-action: credential-update
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: The fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedCredential'
      responses:
        '200':
          description: Credential updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedCredential'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "label": "prod-password-1"
                }' \
                https://api.linode.com/v4/managed/credentials/9991
        - lang: CLI
          source: |
            linode-cli managed credential-update 9991 \
              --label prod-password-1
      parameters:
        - name: credentialId
          in: path
          required: true
          description: The ID of the Credential to access.
          schema:
            type: integer
  '/managed/credentials/{credentialId}/update':
    post:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Credential Username and Password Update
      description: |
        Updates the username and password for a Managed Credential.

        This command can only be accessed by the unrestricted users of an account.
      operationId: updateManagedCredentialUsernamePassword
      x-linode-cli-action: credential-update-username-password
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: |
          The new username and password to assign to the Managed Credential.
        content:
          application/json:
            schema:
              required:
                - password
              properties:
                username:
                  type: string
                  minLength: 0
                  maxLength: 5000
                  description: |
                    The username to use when accessing the Managed Service.
                  example: johndoe
                password:
                  type: string
                  description: |
                    The password to use when accessing the Managed Service.
                  example: s3cur3P@ssw0rd
      responses:
        '200':
          description: Credential username and password updated.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "username": "johndoe",
                  "password": "s3cur3P@ssw0rd"
                }' \
                https://api.linode.com/v4/managed/credentials/9991/update
        - lang: CLI
          source: |
            linode-cli managed credential-update-username-password 9991 \
              --username johndoe \
              --password s3cur3P@ssw0rd
      parameters:
        - name: credentialId
          in: path
          required: true
          description: The ID of the Credential to update.
          schema:
            type: integer
  '/managed/credentials/{credentialId}/revoke':
    post:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Credential Delete
      description: |
        Deletes a Managed Credential.  Linode special forces will no longer
        have access to this Credential when attempting to resolve issues.

        This command can only be accessed by the unrestricted users of an account.
      operationId: deleteManagedCredential
      x-linode-cli-action: credential-revoke
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: Credential deleted successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/managed/credentials/9991
        - lang: CLI
          source: |
            linode-cli managed credential-revoke 9991
      parameters:
        - name: credentialId
          in: path
          required: true
          description: The ID of the Credential to access.
          schema:
            type: integer
  /managed/credentials/sshkey:
    get:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed SSH Key View
      description: |
        Returns the unique SSH public key assigned to your Linode account's
        Managed service. If you [add this public key](/docs/guides/linode-managed/#adding-the-public-key) to a Linode on your account,
        Linode special forces will be able to log in to the Linode with this key
        when attempting to resolve issues.

        This command can only be accessed by the unrestricted users of an account.
      operationId: viewManagedSSHKey
      x-linode-cli-action: credential-sshkey-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: The requested Managed SSH public key.
          content:
            application/json:
              schema:
                type: object
                description: |
                  A unique SSH public key that allows Linode's special forces to access a Managed server to respond to Issues.
                properties:
                  ssh_key:
                    type: string
                    description: |
                      The unique SSH public key assigned to your Linode account's Managed service.
                    example: ssh-rsa AAAAB...oD2ZQ== managedservices@linode
                    readOnly: true
                    x-linode-cli-display: 1
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/credentials/sshkey
        - lang: CLI
          source: |
            linode-cli managed credential-sshkey-view
  /managed/issues:
    get:
      x-linode-grant: unrestricted only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Managed
      summary: Managed Issues List
      description: |
        Returns a paginated list of recent and ongoing issues detected on your
        Managed Services.

        This command can only be accessed by the unrestricted users of an account.
      operationId: getManagedIssues
      x-linode-cli-action: issues-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: |
            A paginated list of open or ongoing Managed Issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ManagedIssue'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/issues
        - lang: CLI
          source: |
            linode-cli managed issues-list
  '/managed/issues/{issueId}':
    get:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Issue View
      description: |
        Returns a single Issue that is impacting or did impact one of your
        Managed Services.

        This command can only be accessed by the unrestricted users of an account.
      operationId: getManagedIssue
      x-linode-cli-action: issue-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: The requested issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedIssue'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/issues/823
        - lang: CLI
          source: |
            linode-cli managed issue-view 823
      parameters:
        - name: issueId
          in: path
          required: true
          description: The Issue to look up.
          schema:
            type: integer
  /managed/linode-settings:
    get:
      x-linode-grant: unrestricted only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Managed
      summary: Managed Linode Settings List
      description: |
        Returns a paginated list of Managed Settings for your Linodes. There will
        be one entry per Linode on your Account.

        This command can only be accessed by the unrestricted users of an account.
      operationId: getManagedLinodeSettings
      x-linode-cli-action: linode-settings-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: |
            A paginated list of Managed settings for your Linodes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ManagedLinodeSettings'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/linode-settings
        - lang: CLI
          source: |
            linode-cli managed linode-settings-list
  '/managed/linode-settings/{linodeId}':
    get:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Linode's Managed Settings View
      description: |
        Returns a single Linode's Managed settings.

        This command can only be accessed by the unrestricted users of an account.
      operationId: getManagedLinodeSetting
      x-linode-cli-action: linode-setting-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: The requested Linode's Managed settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedLinodeSettings'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/linode-settings/123
        - lang: CLI
          source: |
            linode-cli managed linode-setting-view 123
      parameters:
        - name: linodeId
          in: path
          required: true
          description: The Linode ID whose settings we are accessing.
          schema:
            type: integer
    put:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Linode's Managed Settings Update
      description: |
        Updates a single Linode's Managed settings.
        This command can only be accessed by the unrestricted users of an account.
      operationId: updateManagedLinodeSetting
      x-linode-cli-action: linode-setting-update
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: The settings to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedLinodeSettings'
      responses:
        '200':
          description: Settings updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedLinodeSettings'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "ssh": {
                    "access": true,
                    "user": "linode",
                    "ip": "203.0.113.1",
                    "port": 22
                  }
                }' \
                https://api.linode.com/v4/managed/linode-settings/123
        - lang: CLI
          source: |
            linode-cli managed linode-setting-update \
              7833234 \
              --ssh.access true \
              --ssh.user linode \
              --ssh.port 22 \
              --ssh.ip 203.0.113.1
      parameters:
        - name: linodeId
          in: path
          required: true
          description: The Linode ID whose settings we are accessing.
          schema:
            type: integer
  /managed/services:
    get:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Services List
      description: |
        Returns a paginated list of Managed Services on your Account. These
        are the services Linode Managed is monitoring and will report and attempt
        to resolve issues with.

        This command can only be accessed by the unrestricted users of an account.
      operationId: getManagedServices
      x-linode-cli-action: services-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: A paginated list of Managed Services
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ManagedService'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/services
        - lang: CLI
          source: |
            linode-cli managed services-list
    post:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Service Create
      description: |
        Creates a Managed Service. Linode Managed will begin monitoring this
        service and reporting and attempting to resolve any Issues.

        This command can only be accessed by the unrestricted users of an account.
      operationId: createManagedService
      x-linode-cli-action: service-create
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: Information about the service to monitor.
        content:
          application/json:
            schema:
              required:
                - label
                - service_type
                - address
                - timeout
              allOf:
                - $ref: '#/components/schemas/ManagedService'
      responses:
        '200':
          description: Service created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedService'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "service_type": "url",
                  "label": "prod-1",
                  "address": "https://example.org",
                  "timeout": 30,
                  "body": "it worked",
                  "consultation_group": "on-call",
                  "notes": "The service name is my-cool-application",
                  "credentials": [
                    9991
                  ]
                }' \
                https://api.linode.com/v4/managed/services
        - lang: CLI
          source: |
            linode-cli managed service-create \
              --service_type url \
              --label prod-1 \
              --address "https://example.org" \
              --timeout 30 \
              --body "it worked" \
              --consultation_group on-call \
              --notes "The service name is \
                my-cool-application" \
              --credentials 9991
  '/managed/services/{serviceId}':
    get:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Service View
      description: |
        Returns information about a single Managed Service on your Account.

        This command can only be accessed by the unrestricted users of an account.
      operationId: getManagedService
      x-linode-cli-action: service-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: The requested Managed Service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedService'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/services/9994
        - lang: CLI
          source: |
            linode-cli managed service-view 9994
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The ID of the Managed Service to access.
          schema:
            type: integer
    put:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Service Update
      description: |
        Updates information about a Managed Service.

        This command can only be accessed by the unrestricted users of an account.
      operationId: updateManagedService
      x-linode-cli-action: service-update
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: The fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedService'
      responses:
        '200':
          description: Service updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedService'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "service_type": "url",
                  "label": "prod-1",
                  "address": "https://example.org",
                  "timeout": 30,
                  "body": "it worked",
                  "consultation_group": "on-call",
                  "notes": "The service name is my-cool-application",
                  "credentials": [
                    9991
                  ]
                }' \
                https://api.linode.com/v4/managed/services/9994
        - lang: CLI
          source: |
            linode-cli managed service-update 9994 \
              --service_type url \
              --label prod-1 \
              --address "https://example.org" \
              --timeout 30 \
              --body "it worked" \
              --consultation_group on-call \
              --notes "The service name is my-cool-application" \
              --credentials 9991
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The ID of the Managed Service to access.
          schema:
            type: integer
    delete:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Service Delete
      description: |
        Deletes a Managed Service.  This service will no longer be monitored by
        Linode Managed.

        This command can only be accessed by the unrestricted users of an account.
      operationId: deleteManagedService
      x-linode-cli-action: service-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: Service deleted successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/managed/services/9994
        - lang: CLI
          source: |
            linode-cli managed service-delete 9994
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The ID of the Managed Service to access.
          schema:
            type: integer
  '/managed/services/{serviceId}/disable':
    post:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Service Disable
      description: |
        Temporarily disables monitoring of a Managed Service.

        This command can only be accessed by the unrestricted users of an account.
      operationId: disableManagedService
      x-linode-cli-action: service-disable
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: Service disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedService'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST \
                https://api.linode.com/v4/managed/services/9994/disable
        - lang: CLI
          source: |
            linode-cli managed service-disable 9994
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The ID of the Managed Service to disable.
          schema:
            type: integer
  '/managed/services/{serviceId}/enable':
    post:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Service Enable
      description: |
        Enables monitoring of a Managed Service.

        This command can only be accessed by the unrestricted users of an account.
      operationId: enableManagedService
      x-linode-cli-action: service-enable
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: Service enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedService'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST \
                https://api.linode.com/v4/managed/services/9994/enable
        - lang: CLI
          source: |
            linode-cli managed service-enable 9994
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The ID of the Managed Service to enable.
          schema:
            type: integer
  /managed/stats:
    get:
      x-linode-grant: unrestricted only
      tags:
        - Managed
      summary: Managed Stats List
      description: |
        Returns a list of Managed Stats on your Account in the form of x and y data points.
        You can use these data points to plot your own graph visualizations. These stats
        reflect the last 24 hours of combined usage across all managed Linodes on your account
        giving you a high-level snapshot of data for the following:


        * cpu
        * disk
        * swap
        * network in
        * network out

        This command can only be accessed by the unrestricted users of an account.
      operationId: getManagedStats
      x-linode-cli-action: stats-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: A list of Managed Stats from the last 24 hours.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    oneOf:
                      - x-linode-ref-name: Stats Available
                        $ref: '#/components/schemas/StatsDataAvailable'
                      - x-linode-ref-name: Stats Unavailable
                        $ref: '#/components/schemas/StatsDataUnavailable'
                    discriminator:
                      propertyName: x-linode-ref-name
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/managed/stats
        - lang: CLI
          source: |
            linode-cli managed stats-list
