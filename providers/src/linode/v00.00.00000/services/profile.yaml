openapi: 3.0.1
servers:
  - url: 'https://api.linode.com/v4'
  - url: 'https://api.linode.com/v4beta'
info:
  version: 4.147.0
  title: Linode API - profile
  description: profile
  contact:
    name: Linode
    url: 'https://linode.com'
    email: support@linode.com
tags:
  - name: Account
    description: 'Use the Account endpoints to manage user settings, billing, and payments. You can also initiate and maintain OAuth client application authentication, enable the Linode Managed service, and create new users on your account.'
  - name: Databases
    description: 'Managed Databases is Linode''s fully-managed, high-performance database service. Use the Managed Databases endpoints to create and manage database clusters.'
  - name: Domains
    description: Use the Domains endpoints to create and manage domains and domain records on your account.
  - name: Images
    description: 'Use the Images endpoints to capture, store, and manage custom Linode images.'
  - name: Linode Instances
    description: 'Use the Linode Instances endpoints to create, configure, and manage your Linode instances. You can also manage the Linode Backup service; maintain and manage configuration profiles; create and maintain disks, intiate a host migration; view Linode Instance statistics; and more.'
  - name: Linode Types
    description: 'Use the Linode Types endpoints to retrieve information about Linode plan types, including pricing information, hardware resources, and network transfer allotment.'
  - name: Linode Kubernetes Engine (LKE)
    description: Linode Kubernetes Engine (LKE) is Linode's managed Kubernetes service. Use the LKE endpoints to create and manage Kubernetes clusters and their associated Node Pools.
  - name: Longview
    description: Longview is Linode's system-level monitoring and graphing service. Use the Longview endpoints to manage your Longview subscription and plan and to create and maintain Longview clients.
  - name: Managed
    description: 'Managed is Linode''s incident response service. Use the Managed endpoints to register a service to be monitored by the Managed Service team, provide secure access to your managed services,  view information about detected issues, and more.'
  - name: Networking
    description: 'Use the Networking endpoints to view all IP addresses on your account, reorganize assigned IPv4 addresses, update RDNS, and configure IP sharing.'
  - name: NodeBalancers
    description: 'NodeBalancers is Linode''s load balancing service. Use the NodeBalancers endpoints to create and manage NodeBalancers. You can also create and maintain configurations; create and maintain nodes, and view statistics.'
  - name: Object Storage
    description: 'Object Storage is Linode''s S3-compatible data storage service. Use the Object Storage endpoints to create and maintaining buckets, add and remove objects from buckets, create and maintain Object Storage keys, and cancel the Object Storage service.'
  - name: Profile
    description: 'Use the Profile endpoints to manage your Linode user profile preferences and security settings. This includes creating and maintaining personal access tokens, creating and maintaining SSH keys, confirming and enabling two-factor authentication, and updating user and profile preferences.'
  - name: Regions
    description: 'Use the Regions endpoints to view information about the various Linode data center regions, including the service capabilities for each region, country, status, and more.'
  - name: StackScripts
    description: Linode StackScripts allow you to create reusable scripts to configure new Linode instances. Use the StackScripts endpoints to create and manage StackScripts on your account.
  - name: Support
    description: 'Use the Support endpoints to open, view, and close Linode Support tickets. You can also create and manage your Support ticket replies.'
  - name: Tags
    description: 'Tags allow you to organize and group your various Linode services. Use the Tags endpoints to create, assign, and delete your account tags.'
  - name: Volumes
    description: 'Volumes is Linode''s block storage service. Use the Volumes endpoints to create, attach, and manage your account Volumes.'
components:
  schemas:
    Profile:
      type: object
      description: |
        A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.
      properties:
        uid:
          type: integer
          description: |
            Your unique ID in our system. This value will never change, and can safely be used to identify your User.
          example: 1234
          readOnly: true
        username:
          type: string
          description: |
            Your username, used for logging in to our system.
          example: exampleUser
          readOnly: true
          x-linode-cli-display: 1
        email:
          type: string
          format: email
          description: |
            Your email address.  This address will be used for communication with Linode as necessary.
          example: example-user@gmail.com
          x-linode-cli-display: 2
        verified_phone_number:
          type: string
          format: phone
          readOnly: true
          description: |
            The phone number verified for this Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.

            `null` if this Profile has no verified phone number.
          example: '+5555555555'
        timezone:
          type: string
          description: |
            The timezone you prefer to see times in. This is not used by the API directly. It is provided for the benefit of clients such as the Linode Cloud Manager and other clients built on the API. All times returned by the API are in UTC.
          example: US/Eastern
        email_notifications:
          type: boolean
          description: |
            If true, you will receive email notifications about account activity.  If false, you may still receive business-critical communications through email.
          example: true
        referrals:
          type: object
          description: |
            Information about your status in our referral program.

            This information becomes accessible after this Profile's Account has established at least $25.00 USD of total payments.
          readOnly: true
          properties:
            code:
              type: string
              description: |
                Your referral code.  If others use this when signing up for Linode, you will receive account credit.
              example: 871be32f49c1411b14f29f618aaf0c14637fb8d3
              readOnly: true
            url:
              type: string
              format: url
              description: |
                Your referral url, used to direct others to sign up for Linode with your referral code.
              example: 'https://www.linode.com/?r=871be32f49c1411b14f29f618aaf0c14637fb8d3'
              readOnly: true
            total:
              type: integer
              description: |
                The number of users who have signed up with your referral code.
              example: 0
              readOnly: true
            completed:
              type: integer
              description: |
                The number of completed signups with your referral code.
              example: 0
              readOnly: true
            pending:
              type: integer
              description: |
                The number of pending signups with your referral code.  You will not receive credit for these signups until they are completed.
              example: 0
              readOnly: true
            credit:
              type: integer
              description: |
                The amount of account credit in US Dollars issued to you through the referral program.
              example: 0
              readOnly: true
        ip_whitelist_enabled:
          deprecated: true
          type: boolean
          description: |
            If true, logins for your User will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.

            If you disable this setting, you will not be able to re-enable it.
          example: false
        lish_auth_method:
          type: string
          enum:
            - password_keys
            - keys_only
            - disabled
          description: |
            The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](/docs/guides/lish/).
            * `keys_only` is the most secure if you intend to use Lish.
            * `disabled` is recommended if you do not intend to use Lish at all.
            * If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [View Profile](/docs/api/profile/#profile-view) endpoint.
          example: keys_only
        authorized_keys:
          type: array
          nullable: true
          items:
            type: string
            format: ssh-key
          description: |
            The list of SSH Keys authorized to use Lish for your User. This value is ignored if `lish_auth_method` is "disabled."
          example: null
        two_factor_auth:
          type: boolean
          description: |
            If true, logins from untrusted computers will require Two Factor Authentication.  See [/profile/tfa-enable](/docs/api/profile/#two-factor-secret-create) to enable Two Factor Authentication.
          example: true
          x-linode-cli-display: 4
        restricted:
          type: boolean
          description: |
            If true, your User has restrictions on what can be accessed on your Account. To get details on what entities/actions you can access/perform, see [/profile/grants](/docs/api/profile/#grants-list).
          example: false
          x-linode-cli-display: 3
        authentication_type:
          type: string
          enum:
            - password
            - github
          description: |
            This account's Cloud Manager authentication type. Authentication types are chosen through
            Cloud Manager and authorized when logging into your account. These authentication types are either
            the user's password (in conjunction with their username), or the name of their
            indentity provider such as GitHub. For example, if a user:

            - Has never used Third-Party Authentication, their authentication type will be `password`.
            - Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`).
            - Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.


            **Note:** This functionality may not yet be available in Cloud Manager.
            See the [Cloud Manager Changelog](/changelog/cloud-manager/) for the latest updates.
          example: password
          readOnly: true
    ErrorObject:
      type: object
      description: |
        An object for describing a single error that occurred during the processing of a request.
      properties:
        reason:
          type: string
          description: |
            What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
          example: fieldname must be a valid value
        field:
          type: string
          description: |
            The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
          example: fieldname
    AuthorizedApp:
      type: object
      description: |
        An application you have authorized access to your Account through OAuth.
      properties:
        id:
          type: integer
          description: |
            This authorization's ID, used for revoking access.
          example: 123
          readOnly: true
          x-linode-cli-display: 1
        label:
          type: string
          description: |
            The name of the application you've authorized.
          example: example-app
          readOnly: true
          x-linode-cli-display: 2
        thumbnail_url:
          type: string
          format: url
          description: |
            The URL at which this app's thumbnail may be accessed.
          example: null
          readOnly: true
        scopes:
          type: string
          format: oauth-scopes
          description: |
            The OAuth scopes this app was authorized with.  This defines what parts of your Account the app is allowed to access.
          example: 'linodes:read_only'
          readOnly: true
          x-linode-cli-display: 3
        created:
          type: string
          format: date-time
          description: When this app was authorized.
          example: '2018-01-01T00:01:01'
          readOnly: true
          x-linode-filterable: true
          x-linode-cli-display: 5
        expiry:
          type: string
          format: date-time
          description: |
            When the app's access to your account expires. If `null`, the app's access must be revoked manually.
          example: '2018-01-15T00:01:01'
          readOnly: true
          x-linode-cli-display: 6
          x-linode-filterable: true
          nullable: true
        website:
          type: string
          format: url
          description: |
            The website where you can get more information about this app.
          example: example.org
          readOnly: true
          x-linode-cli-display: 4
    PaginationEnvelope:
      type: object
      description: |
        An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.
      properties:
        pages:
          type: integer
          readOnly: true
          description: 'The total number of [pages](/docs/api/#pagination).'
          example: 1
        page:
          type: integer
          readOnly: true
          description: 'The current [page](/docs/api/#pagination).'
          example: 1
        results:
          type: integer
          readOnly: true
          description: The total number of results.
          example: 1
    GrantsResponse:
      type: object
      description: |
        A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the `/profile/grants` endpoint, entities to which a User has no access will be omitted.
      properties:
        global:
          type: object
          description: |
            A structure containing the Account-level grants a User has.
          properties:
            add_linodes:
              type: boolean
              description: 'If true, this User may create Linodes.'
              example: true
            add_longview:
              type: boolean
              description: 'If true, this User may create Longview clients and view the current plan.'
              example: true
            longview_subscription:
              type: boolean
              description: 'If true, this User may manage the Account''s Longview subscription.'
              example: true
            account_access:
              type: string
              nullable: true
              enum:
                - read_only
                - read_write
              description: |
                The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
              example: read_only
            cancel_account:
              type: boolean
              description: 'If true, this User may cancel the entire Account.'
              example: false
            add_domains:
              type: boolean
              description: 'If true, this User may add Domains.'
              example: true
            add_stackscripts:
              type: boolean
              description: 'If true, this User may add StackScripts.'
              example: true
            add_nodebalancers:
              type: boolean
              description: 'If true, this User may add NodeBalancers.'
              example: true
            add_images:
              type: boolean
              description: 'If true, this User may add Images.'
              example: true
            add_volumes:
              type: boolean
              description: 'If true, this User may add Volumes.'
              example: true
            add_firewalls:
              type: boolean
              description: 'If true, this User may add Firewalls.'
              example: true
            add_databases:
              type: boolean
              description: 'if true, this User may add Managed Databases.'
              example: true
        linode:
          type: array
          items:
            $ref: '#/components/schemas/Grant'
          description: |
            The grants this User has for each Linode that is owned by this Account.
        database:
          type: array
          items:
            $ref: '#/components/schemas/Grant'
          description: |
            The grants this User has for each Database that is owned by this Account.
        domain:
          type: array
          items:
            $ref: '#/components/schemas/Grant'
          description: |
            The grants this User has for each Domain that is owned by this Account.
        nodebalancer:
          type: array
          items:
            $ref: '#/components/schemas/Grant'
          description: |
            The grants this User has for each NodeBalancer that is owned by this Account.
        image:
          type: array
          items:
            $ref: '#/components/schemas/Grant'
          description: |
            The grants this User has for each Image that is owned by this Account.
        longview:
          type: array
          items:
            $ref: '#/components/schemas/Grant'
          description: |
            The grants this User has for each Longview Client that is owned by this Account.
        stackscript:
          type: array
          items:
            $ref: '#/components/schemas/Grant'
          description: |
            The grants this User has for each StackScript that is owned by this Account.
        volume:
          type: array
          items:
            $ref: '#/components/schemas/Grant'
          description: |
            The grants this User has for each Block Storage Volume that is owned by this Account.
    Grant:
      type: object
      description: |
        Represents the level of access a restricted User has to a specific resource on the Account.
      properties:
        id:
          type: integer
          description: |
            The ID of the entity this grant applies to.
          example: 123
        permissions:
          type: string
          nullable: true
          enum:
            - read_only
            - read_write
          description: |
            The level of access this User has to this entity.  If null, this User has no access.
          example: read_only
        label:
          type: string
          description: |
            The current label of the entity this grant applies to, for display purposes.
          example: example-entity
          readOnly: true
    PersonalAccessToken:
      type: object
      description: |
        A Personal Access Token is a token generated manually to access the API without going through an OAuth login.  Personal Access Tokens can have scopes just like OAuth tokens do, and are commonly used to give access to command-line tools like the Linode CLI, or when writing your own integrations.
      properties:
        id:
          type: integer
          description: |
            This token's unique ID, which can be used to revoke it.
          example: 123
          readOnly: true
          x-linode-cli-display: 1
        scopes:
          type: string
          format: oauth-scopes
          description: |
            The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the <a target="_top" href="https://github.com/linode/linode-cli">Linode CLI</a>, require tokens with access to `*`. Tokens with more restrictive scopes are generally more secure.
          example: '*'
          readOnly: true
          x-linode-cli-display: 3
        created:
          type: string
          format: date-time
          description: |
            The date and time this token was created.
          x-linode-filterable: true
          example: 2018-01-01T00:01:01.000Z
          readOnly: true
          x-linode-cli-display: 4
        label:
          type: string
          minLength: 1
          maxLength: 100
          description: |
            This token's label.  This is for display purposes only, but can be used to more easily track what you're using each token for.
          x-linode-filterable: true
          example: linode-cli
          x-linode-cli-display: 2
        token:
          type: string
          description: |
            The token used to access the API.  When the token is created, the full token is returned here.  Otherwise, only the first 16 characters are returned.
          example: abcdefghijklmnop
          readOnly: true
          x-linode-cli-display: 5
        expiry:
          type: string
          format: date-time
          description: |
            When this token will expire.  Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated.  Tokens may be created with "null" as their expiry and will never expire unless revoked.
          x-linode-cli-display: 6
          example: '2018-01-01T13:46:32'
          readOnly: true
    Login:
      type: object
      description: |
        An object representing a previous successful login for a User.
      properties:
        id:
          type: integer
          description: |
            The unique ID of this login object.
          example: 1234
          readOnly: true
          x-linode-cli-display: 1
        datetime:
          type: string
          format: date-time
          description: |
            When the login was initiated.
          example: '2018-01-01T00:01:01'
          readOnly: true
          x-linode-cli-display: 2
        ip:
          type: string
          format: ip
          description: |
            The remote IP address that requested the login.
          example: 192.0.2.0
          readOnly: true
          x-linode-cli-display: 3
        username:
          type: string
          description: |
            The username of the User that attempted the login.
          example: example_user
          readOnly: true
          x-linode-cli-display: 4
        status:
          type: string
          enum:
            - successful
            - failed
          description: |
            Whether the login attempt succeeded or failed.
          example: successful
          readOnly: true
          x-linode-cli-display: 5
        restricted:
          type: boolean
          description: |
            True if the User that attempted the login was a restricted User, false otherwise.
          example: true
          readOnly: true
          x-linode-cli-display: 6
    TrustedDevice:
      type: object
      description: |
        A trusted device object represents an active Remember Me session with <a target="_top" href="https://login.linode.com">login.linode.com</a>.
      properties:
        id:
          type: integer
          description: The unique ID for this TrustedDevice
          example: 123
          readOnly: true
        created:
          type: string
          format: date-time
          description: |
            When this Remember Me session was started.  This corresponds to the time of login with the "Remember Me" box checked.
          example: '2018-01-01T01:01:01'
          readOnly: true
        expiry:
          type: string
          format: date-time
          description: |
            When this TrustedDevice session expires.  Sessions typically last 30 days.
          example: '2018-01-31T01:01:01'
          readOnly: true
        user_agent:
          type: string
          description: |
            The User Agent of the browser that created this TrustedDevice session.
          example: |
            Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36 Vivaldi/2.1.1337.36
          readOnly: true
        last_authenticated:
          type: string
          format: date-time
          description: |
            The last time this TrustedDevice was successfully used to authenticate to <a target="_top" href="https://login.linode.com">login.linode.com</a>.
          example: '2018-01-05T12:57:12'
          readOnly: true
        last_remote_addr:
          type: string
          description: |
            The last IP Address to successfully authenticate with this TrustedDevice.
          example: 203.0.113.1
          readOnly: true
    SecurityQuestionsGet:
      type: object
      description: Security questions and responses object for GET operation.
      properties:
        security_questions:
          type: array
          items:
            type: object
            description: Single security question and response object for GET operation.
            properties:
              id:
                $ref: '#/components/schemas/SecurityQuestion/properties/id'
              question:
                $ref: '#/components/schemas/SecurityQuestion/properties/question'
              response:
                $ref: '#/components/schemas/SecurityQuestion/properties/response'
    SecurityQuestion:
      type: object
      description: Single security question and response object.
      properties:
        id:
          type: integer
          description: The ID representing the security question.
          example: 1
        question:
          type: string
          readOnly: true
          description: The security question.
          example: In what city were you born?
        response:
          type: string
          minLength: 3
          maxLength: 17
          description: |
            The security question response.
          example: Gotham City
    SecurityQuestionsPost:
      type: object
      description: Security questions and responses object for POST operation.
      properties:
        security_questions:
          type: array
          items:
            type: object
            description: Single security question and response object for POST operation.
            properties:
              question_id:
                $ref: '#/components/schemas/SecurityQuestion/properties/id'
              response:
                $ref: '#/components/schemas/SecurityQuestion/properties/response'
              security_question:
                $ref: '#/components/schemas/SecurityQuestion/properties/question'
    SSHKey:
      type: object
      description: |
        A credential object for authenticating a User's secure shell connection to a Linode.
      properties:
        id:
          type: integer
          description: |
            The unique identifier of an SSH Key object.
          example: 42
          readOnly: true
        label:
          type: string
          description: |
            A label for the SSH Key.
          example: My SSH Key
          minLength: 0
          maxLength: 64
        ssh_key:
          type: string
          format: ssh-key
          description: |
            The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.

            Accepted formats:
            * ssh-dss
            * ssh-rsa
            * ecdsa-sha2-nistp
            * ssh-ed25519
            * sk-ecdsa-sha2-nistp256 (Akamai-specific)
          example: ssh-rsa AAAA_valid_public_ssh_key_123456785== user@their-computer
        created:
          type: string
          format: date-time
          description: |
            The date this key was added.
          example: '2018-01-01T00:01:01'
          readOnly: true
  parameters:
    pageOffset:
      name: page
      in: query
      description: The page of a collection to return.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page_size
      in: query
      description: The number of items to return per page.
      schema:
        type: integer
        minimum: 25
        maximum: 500
        default: 100
  responses:
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorObject'
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://login.linode.com/oauth/authorize'
          tokenUrl: 'https://login.linode.com/oauth/token'
          scopes:
            'account:read_only': Allows access to GET information about your Account.
            'account:read_write': Allows access to all endpoints related to your Account.
            'domains:read_only': Allows access to GET Domains on your Account.
            'domains:read_write': Allows access to all Domain endpoints.
            'events:read_only': Allows access to GET your Events.
            'events:read_write': Allows access to all endpoints related to your Events.
            'firewall:read_only': Allows access to GET information about your Firewalls.
            'firewall:read_write': Allows acces to all Firewall endpoints.
            'images:read_only': Allows access to GET your Images.
            'images:read_write': Allows access to all endpoints related to your Images.
            'ips:read_only': Allows access to GET your ips.
            'ips:read_write': Allows access to all endpoints related to your ips.
            'linodes:read_only': Allows access to GET Linodes on your Account.
            'linodes:read_write': Allow access to all endpoints related to your Linodes.
            'lke:read_only': Allows access to GET LKE Clusters on your Account.
            'lke:read_write': Allows access to all endpoints related to LKE Clusters on your Account.
            'longview:read_only': Allows access to GET your Longview Clients.
            'longview:read_write': Allows access to all endpoints related to your Longview Clients.
            'nodebalancers:read_only': Allows access to GET NodeBalancers on your Account.
            'nodebalancers:read_write': Allows access to all NodeBalancer endpoints.
            'object_storage:read_only': Allows access to GET information related to your Object Storage.
            'object_storage:read_write': Allows access to all Object Storage endpoints.
            'stackscripts:read_only': Allows access to GET your StackScripts.
            'stackscripts:read_write': Allows access to all endpoints related to your StackScripts.
            'volumes:read_only': Allows access to GET your Volumes.
            'volumes:read_write': Allows access to all endpoints related to your Volumes.
  links:
    bootLinode:
      operationId: bootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebootLinode:
      operationId: rebootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    shutdownLinode:
      operationId: shutdownLinodeInstance
      parameters:
        linodeId: $request.body#/id
    updateLinode:
      operationId: updateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    deleteLinode:
      operationId: deleteLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebuildLinode:
      operationId: rebuildLinodeInstance
      parameters:
        linodeId: $request.body#/id
    mutateLinode:
      operationId: mutateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    resizeLinode:
      operationId: resizeLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rescueLinode:
      operationId: rescueLinodeInstance
      parameters:
        linodeId: $request.body#/id
    cloneLinode:
      operationId: cloneLinodeInstance
      parameters:
        linodeId: $request.body#/id
    attachVolume:
      operationId: attachVolume
      parameters:
        volumeID: $request.body#/id
    cloneVolume:
      operationId: cloneVolume
      parameters:
        volumeId: $request.body#/id
    detachVolume:
      operationId: detachVolume
      parameters:
        volumeId: $request.body#/id
    resizeVolume:
      operationId: resizeVolume
      parameters:
        volumeId: $request.body#/id
  x-stackQL-resources:
    profile:
      id: linode.profile.profile
      name: profile
      title: Profile
      methods:
        getProfile:
          operation:
            $ref: '#/paths/~1profile/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getProfile:
          operation:
            $ref: '#/paths/~1profile/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateProfile:
          operation:
            $ref: '#/paths/~1profile/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/profile/methods/getProfile'
        insert: []
        update: []
        delete: []
    apps:
      id: linode.profile.apps
      name: apps
      title: Apps
      methods:
        getProfileApps:
          operation:
            $ref: '#/paths/~1profile~1apps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getProfileApps:
          operation:
            $ref: '#/paths/~1profile~1apps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getProfileApp:
          operation:
            $ref: '#/paths/~1profile~1apps~1{appId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getProfileApp:
          operation:
            $ref: '#/paths/~1profile~1apps~1{appId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteProfileApp:
          operation:
            $ref: '#/paths/~1profile~1apps~1{appId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/apps/methods/getProfileApps'
          - $ref: '#/components/x-stackQL-resources/apps/methods/getProfileApp'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/apps/methods/deleteProfileApp'
    grants:
      id: linode.profile.grants
      name: grants
      title: Grants
      methods:
        getProfileGrants:
          operation:
            $ref: '#/paths/~1profile~1grants/get'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
            objectKey: $.data
        _getProfileGrants:
          operation:
            $ref: '#/paths/~1profile~1grants/get'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    tfa_disable:
      id: linode.profile.tfa_disable
      name: tfa_disable
      title: Tfa Disable
      methods:
        tfaDisable:
          operation:
            $ref: '#/paths/~1profile~1tfa-disable/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    tfa_enable:
      id: linode.profile.tfa_enable
      name: tfa_enable
      title: Tfa Enable
      methods:
        tfaEnable:
          operation:
            $ref: '#/paths/~1profile~1tfa-enable/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    tfa_enable_confirm:
      id: linode.profile.tfa_enable_confirm
      name: tfa_enable_confirm
      title: Tfa Enable Confirm
      methods:
        tfaConfirm:
          operation:
            $ref: '#/paths/~1profile~1tfa-enable-confirm/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    tokens:
      id: linode.profile.tokens
      name: tokens
      title: Tokens
      methods:
        getPersonalAccessTokens:
          operation:
            $ref: '#/paths/~1profile~1tokens/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getPersonalAccessTokens:
          operation:
            $ref: '#/paths/~1profile~1tokens/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createPersonalAccessToken:
          operation:
            $ref: '#/paths/~1profile~1tokens/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getPersonalAccessToken:
          operation:
            $ref: '#/paths/~1profile~1tokens~1{tokenId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getPersonalAccessToken:
          operation:
            $ref: '#/paths/~1profile~1tokens~1{tokenId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updatePersonalAccessToken:
          operation:
            $ref: '#/paths/~1profile~1tokens~1{tokenId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deletePersonalAccessToken:
          operation:
            $ref: '#/paths/~1profile~1tokens~1{tokenId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tokens/methods/getPersonalAccessTokens'
          - $ref: '#/components/x-stackQL-resources/tokens/methods/getPersonalAccessToken'
        insert:
          - $ref: '#/components/x-stackQL-resources/tokens/methods/createPersonalAccessToken'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tokens/methods/deletePersonalAccessToken'
    logins:
      id: linode.profile.logins
      name: logins
      title: Logins
      methods:
        getProfileLogins:
          operation:
            $ref: '#/paths/~1profile~1logins/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getProfileLogins:
          operation:
            $ref: '#/paths/~1profile~1logins/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getProfileLogin:
          operation:
            $ref: '#/paths/~1profile~1logins~1{loginId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getProfileLogin:
          operation:
            $ref: '#/paths/~1profile~1logins~1{loginId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/logins/methods/getProfileLogins'
          - $ref: '#/components/x-stackQL-resources/logins/methods/getProfileLogin'
        insert: []
        update: []
        delete: []
    devices:
      id: linode.profile.devices
      name: devices
      title: Devices
      methods:
        getDevices:
          operation:
            $ref: '#/paths/~1profile~1devices/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDevices:
          operation:
            $ref: '#/paths/~1profile~1devices/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getTrustedDevice:
          operation:
            $ref: '#/paths/~1profile~1devices~1{deviceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getTrustedDevice:
          operation:
            $ref: '#/paths/~1profile~1devices~1{deviceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        revokeTrustedDevice:
          operation:
            $ref: '#/paths/~1profile~1devices~1{deviceId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/devices/methods/getDevices'
          - $ref: '#/components/x-stackQL-resources/devices/methods/getTrustedDevice'
        insert: []
        update: []
        delete: []
    security_questions:
      id: linode.profile.security_questions
      name: security_questions
      title: Security Questions
      methods:
        getSecurityQuestions:
          operation:
            $ref: '#/paths/~1profile~1security-questions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getSecurityQuestions:
          operation:
            $ref: '#/paths/~1profile~1security-questions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postSecurityQuestions:
          operation:
            $ref: '#/paths/~1profile~1security-questions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/security_questions/methods/getSecurityQuestions'
        insert: []
        update: []
        delete: []
    sshkeys:
      id: linode.profile.sshkeys
      name: sshkeys
      title: Sshkeys
      methods:
        getSSHKeys:
          operation:
            $ref: '#/paths/~1profile~1sshkeys/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getSSHKeys:
          operation:
            $ref: '#/paths/~1profile~1sshkeys/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        addSSHKey:
          operation:
            $ref: '#/paths/~1profile~1sshkeys/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getSSHKey:
          operation:
            $ref: '#/paths/~1profile~1sshkeys~1{sshKeyId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getSSHKey:
          operation:
            $ref: '#/paths/~1profile~1sshkeys~1{sshKeyId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateSSHKey:
          operation:
            $ref: '#/paths/~1profile~1sshkeys~1{sshKeyId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteSSHKey:
          operation:
            $ref: '#/paths/~1profile~1sshkeys~1{sshKeyId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sshkeys/methods/getSSHKeys'
          - $ref: '#/components/x-stackQL-resources/sshkeys/methods/getSSHKey'
        insert:
          - $ref: '#/components/x-stackQL-resources/sshkeys/methods/addSSHKey'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/sshkeys/methods/deleteSSHKey'
    phone_number:
      id: linode.profile.phone_number
      name: phone_number
      title: Phone Number
      methods:
        deleteProfilePhoneNumber:
          operation:
            $ref: '#/paths/~1profile~1phone-number/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postProfilePhoneNumber:
          operation:
            $ref: '#/paths/~1profile~1phone-number/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postProfilePhoneNumberVerify:
          operation:
            $ref: '#/paths/~1profile~1phone-number~1verify/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/phone_number/methods/deleteProfilePhoneNumber'
    preferences:
      id: linode.profile.preferences
      name: preferences
      title: Preferences
      methods:
        getUserPreferences:
          operation:
            $ref: '#/paths/~1profile~1preferences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getUserPreferences:
          operation:
            $ref: '#/paths/~1profile~1preferences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateUserPreferences:
          operation:
            $ref: '#/paths/~1profile~1preferences/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/preferences/methods/getUserPreferences'
        insert: []
        update: []
        delete: []
paths:
  /profile:
    get:
      tags:
        - Profile
      summary: Profile View
      description: |
        Returns information about the current User. This can be used to see who is acting in applications where more than one token is managed. For example, in third-party OAuth applications.

        This endpoint is always accessible, no matter what OAuth scopes the acting token has.
      operationId: getProfile
      x-linode-cli-action: view
      security:
        - personalAccessToken: []
        - oauth: []
      responses:
        '200':
          description: Profile response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile
        - lang: CLI
          source: |
            linode-cli profile view
    put:
      tags:
        - Profile
      summary: Profile Update
      description: |
        Update information in your Profile.  This endpoint requires the "account:read_write" OAuth Scope.
      operationId: updateProfile
      x-linode-cli-action: update
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: The fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: Profile updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "email": "example-user@gmail.com",
                  "timezone": "US/Eastern",
                  "email_notifications": true,
                  "lish_auth_method": "keys_only",
                  "authorized_keys": null,
                  "two_factor_auth": true,
                  "restricted": false
                }' \
                https://api.linode.com/v4/profile
        - lang: CLI
          source: |
            linode-cli profile update \
              --email example-user@gmail.com \
              --timezone US/Eastern \
              --email_notifications true \
              --list_auth_method keys_only \
              --two_factor_auth true \
              --restricted false
  /profile/apps:
    get:
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Profile
      summary: Authorized Apps List
      description: |
        This is a collection of OAuth apps that you've given access to your Account, and includes the level of access granted.
      operationId: getProfileApps
      x-linode-cli-action: apps-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: |
            A paginated list of apps you've authorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuthorizedApp'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/apps
        - lang: CLI
          source: |
            linode-cli profile apps-list
  '/profile/apps/{appId}':
    get:
      tags:
        - Profile
      summary: Authorized App View
      description: |
        Returns information about a single app you've authorized to access your Account.
      operationId: getProfileApp
      x-linode-cli-action: app-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: The app requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedApp'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/apps/123
        - lang: CLI
          source: |
            linode-cli profile app-view 1234
      parameters:
        - name: appId
          in: path
          required: true
          description: The authorized app ID to manage.
          schema:
            type: integer
    delete:
      tags:
        - Profile
      summary: App Access Revoke
      description: |
        Expires this app token. This token may no longer be used to access your Account.
      operationId: deleteProfileApp
      x-linode-cli-action: app-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: App's authorization has been revoked.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/profile/apps/123
        - lang: CLI
          source: |
            linode-cli profile app-delete 123
      parameters:
        - name: appId
          in: path
          required: true
          description: The authorized app ID to manage.
          schema:
            type: integer
  /profile/grants:
    get:
      tags:
        - Profile
      summary: Grants List
      description: |
        This returns a GrantsResponse describing what the acting User has been granted access to.  For unrestricted users, this will return a  204 and no body because unrestricted users have access to everything without grants.  This will not return information about entities you do not have access to.  This endpoint is useful when writing third-party OAuth applications to see what options you should present to the acting User.

        For example, if they do not have `global.add_linodes`, you might not display a button to deploy a new Linode.

        Any client may access this endpoint; no OAuth scopes are required.
      operationId: getProfileGrants
      x-linode-cli-action: grants
      x-linode-cli-skip: true
      security:
        - personalAccessToken: []
        - oauth: []
      responses:
        '200':
          description: GrantsResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrantsResponse'
        '204':
          description: |
            This is an unrestricted User, who has no grants. This User can access everything on the Account.
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/grants
  /profile/tfa-disable:
    post:
      tags:
        - Profile
      summary: Two Factor Authentication Disable
      description: |
        Disables Two Factor Authentication for your User. Once successful, login attempts from untrusted computers will only require a password before being successful. This is less secure, and is discouraged.
      operationId: tfaDisable
      x-linode-cli-action: tfa-disable
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: TFA disabled.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST \
                https://api.linode.com/v4/profile/tfa-disable
        - lang: CLI
          source: |
            linode-cli profile tfa-disable
  /profile/tfa-enable:
    post:
      tags:
        - Profile
      summary: Two Factor Secret Create
      description: |
        Generates a Two Factor secret for your User. To enable TFA for your User, enter the secret obtained from this command with the **Two Factor Authentication Confirm/Enable** ([POST /profile/tfa-enable-confirm](/docs/api/profile/#two-factor-authentication-confirmenable)) command.
        Once enabled, logins from untrusted computers are required to provide
        a TFA code before they are successful.

        **Note**: Before you can enable TFA, security questions must be answered for your User by accessing the **Security Questions Answer** ([POST /profile/security-questions](/docs/api/profile/#security-questions-answer)) command.
      operationId: tfaEnable
      x-linode-cli-action: tfa-enable
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: Two Factor secret generated
          content:
            application/json:
              schema:
                properties:
                  secret:
                    type: string
                    description: |
                      Your Two Factor secret. This is used to generate time-based two factor codes required for logging in. Doing this will be required to confirm TFA an actually enable it.
                    example: 5FXX6KLACOC33GTC
                  expiry:
                    type: string
                    format: date-time
                    description: |
                      When this Two Factor secret expires.
                    example: '2018-03-01T00:01:01.000Z'
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST \
                https://api.linode.com/v4/profile/tfa-enable
        - lang: CLI
          source: |
            linode-cli profile tfa-enable
  /profile/tfa-enable-confirm:
    post:
      tags:
        - Profile
      summary: Two Factor Authentication Confirm/Enable
      description: |
        Confirms that you can successfully generate Two Factor codes and enables TFA on your Account. Once this is complete, login attempts from untrusted computers will be required to provide a Two Factor code before they are successful.
      operationId: tfaConfirm
      x-linode-cli-action: tfa-confirm
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: The Two Factor code you generated with your Two Factor secret.
        required: true
        content:
          application/json:
            schema:
              properties:
                tfa_code:
                  type: string
                  description: |
                    The Two Factor code you generated with your Two Factor secret. These codes are time-based, so be sure it is current.
                  example: '213456'
      responses:
        '200':
          description: TFA enabled successfully
          content:
            application/json:
              schema:
                properties:
                  scratch:
                    type: string
                    description: |
                      A one-use code that can be used in place of your Two Factor code, in case you are unable to generate one.  Keep this in a safe place to avoid being locked out of your Account.
                    example: sample two factor scratch
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "tfa_code": "213456"
                }' \
                https://api.linode.com/v4/profile/tfa-enable-confirm
        - lang: CLI
          source: |
            linode-cli profile tfa-confirm \
              --tfa_code 213456
  /profile/tokens:
    get:
      tags:
        - Profile
      summary: Personal Access Tokens List
      description: |
        Returns a paginated list of Personal Access Tokens currently active for your User.
      operationId: getPersonalAccessTokens
      x-linode-cli-action: tokens-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: A paginated list of active tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PersonalAccessToken'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/tokens
        - lang: CLI
          source: |
            linode-cli profile tokens-list
    post:
      tags:
        - Profile
      summary: Personal Access Token Create
      description: |
        Creates a Personal Access Token for your User. The raw token will be returned in the response, but will never be returned again afterward so be sure to take note of it. You may create a token with _at most_ the scopes of your current token. The created token will be able to access your Account until the given expiry, or until it is revoked.
      operationId: createPersonalAccessToken
      x-linode-cli-action: token-create
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: Information about the requested token.
        required: true
        content:
          application/json:
            schema:
              properties:
                scopes:
                  type: string
                  format: oauth-scope
                  description: |
                    The scopes to create the token with.  These cannot be changed after creation, and may not exceed the scopes of the acting token. If omitted, the new token will have the same scopes as the acting token.
                  example: '*'
                expiry:
                  type: string
                  format: date-time
                  description: |
                    When this token should be valid until.  If omitted, the new token will be valid until it is manually revoked.
                  example: null
                label:
                  $ref: '#/components/schemas/PersonalAccessToken/properties/label'
      responses:
        '200':
          description: Token created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalAccessToken'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "scopes": "*",
                  "expiry": "2018-01-01T13:46:32",
                  "label": "linode-cli"
                }' \
                https://api.linode.com/v4/profile/tokens
        - lang: CLI
          source: |
            linode-cli profile token-create \
              --scopes '*' \
              --expiry '2018-01-01T13:46:32' \
              --label linode-cli
  '/profile/tokens/{tokenId}':
    get:
      tags:
        - Profile
      summary: Personal Access Token View
      description: |
        Returns a single Personal Access Token.
      operationId: getPersonalAccessToken
      x-linode-cli-action: token-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: The requested token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalAccessToken'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/tokens/123
        - lang: CLI
          source: |
            linode-cli profile token-view 123
      parameters:
        - name: tokenId
          in: path
          description: The ID of the token to access.
          required: true
          schema:
            type: integer
    put:
      tags:
        - Profile
      summary: Personal Access Token Update
      description: |
        Updates a Personal Access Token.
      operationId: updatePersonalAccessToken
      x-linode-cli-action: token-update
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: The fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalAccessToken'
      responses:
        '200':
          description: Token updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalAccessToken'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "label": "linode-cli"
                }' \
                https://api.linode.com/v4/profile/tokens/123
        - lang: CLI
          source: |
            linode-cli profile token-update 123 \
              --label linode-cli
      parameters:
        - name: tokenId
          in: path
          description: The ID of the token to access.
          required: true
          schema:
            type: integer
    delete:
      tags:
        - Profile
      summary: Personal Access Token Revoke
      description: |
        Revokes a Personal Access Token. The token will be invalidated immediately, and requests using that token will fail with a 401. It is possible to revoke access to the token making the request to revoke a token, but keep in mind that doing so could lose you access to the api and require you to create a new token through some other means.
      operationId: deletePersonalAccessToken
      x-linode-cli-action: token-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: Token revoked successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/profile/tokens/123
        - lang: CLI
          source: |
            linode-cli profile token-delete 123
      parameters:
        - name: tokenId
          in: path
          description: The ID of the token to access.
          required: true
          schema:
            type: integer
  /profile/logins:
    get:
      tags:
        - Profile
      summary: Logins List
      description: |
        Returns a collection of successful account logins from this user during the last 90 days.
      operationId: getProfileLogins
      x-linode-cli-action: logins-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: |
            An array of successful account logins from this user during the last 90 days.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Login'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/logins
        - lang: CLI
          source: |
            linode-cli profile logins-list
  '/profile/logins/{loginId}':
    get:
      tags:
        - Profile
      summary: Login View
      description: |
        Returns a login object displaying information about a successful account login from this user.
      operationId: getProfileLogin
      x-linode-cli-action: login-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: The requested login object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/logins/1234
        - lang: CLI
          source: |
            linode-cli profile login-view 1234
      parameters:
        - name: loginId
          in: path
          description: The ID of the login object to access.
          required: true
          schema:
            type: integer
  /profile/devices:
    get:
      tags:
        - Profile
      summary: Trusted Devices List
      description: |
        Returns a paginated list of active TrustedDevices for your User. Browsers with an active Remember Me Session are logged into your account until the session expires or is revoked.
      operationId: getDevices
      x-linode-cli-action: devices-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: Returns a paginated list of TrustedDevice objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TrustedDevice'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/devices
        - lang: CLI
          source: |
            linode-cli profile devices-list
  '/profile/devices/{deviceId}':
    get:
      tags:
        - Profile
      summary: Trusted Device View
      description: |
        Returns a single active TrustedDevice for your User.
      operationId: getTrustedDevice
      x-linode-cli-action: device-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: The requested TrustedDevice object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedDevice'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/devices/123
        - lang: CLI
          source: |
            linode-cli profile device-view 123
      parameters:
        - name: deviceId
          in: path
          description: The ID of the TrustedDevice
          required: true
          schema:
            type: integer
    delete:
      tags:
        - Profile
      summary: Trusted Device Revoke
      description: |
        Revoke an active TrustedDevice for your User.  Once a TrustedDevice is revoked, this device will have to log in again before accessing your Linode account.
      operationId: revokeTrustedDevice
      x-linode-cli-action: device-revoke
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: Session revoked successfully
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/profile/devices/123
        - lang: CLI
          source: |
            linode-cli profile device-revoke 123
      parameters:
        - name: deviceId
          in: path
          description: The ID of the TrustedDevice
          required: true
          schema:
            type: integer
  /profile/security-questions:
    get:
      x-linode-grant: read_only
      servers:
        - url: 'https://api.linode.com/v4'
      tags:
        - Profile
      summary: Security Questions List
      description: |
        Returns a collection of security questions and their responses, if any, for your User Profile.
      operationId: getSecurityQuestions
      x-linode-cli-action:
        - list
        - ls
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: Returns a list of security questions.
          content:
            application/json:
              x-linode-cli-nested-list: security_questions
              x-linode-cli-use-schema:
                type: object
                properties:
                  security_questions.id:
                    x-linode-cli-display: 1
                  security_questions.question:
                    x-linode-cli-display: 2
                  security_questions.response:
                    x-linode-cli-display: 3
              schema:
                $ref: '#/components/schemas/SecurityQuestionsGet'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/security-questions
        - lang: CLI
          source: |
            linode-cli security-questions list
    post:
      tags:
        - Profile
      summary: Security Questions Answer
      description: |
        Adds security question responses for your User.

        Requires exactly three unique questions.

        Previous responses are overwritten if answered or reset to `null` if unanswered.

        **Note**: Security questions must be answered for your User prior to accessing the **Two Factor Secret Create** ([POST /profile/tfa-enable](/docs/api/profile/#two-factor-secret-create)) command.
      operationId: postSecurityQuestions
      x-linode-cli-action: answer
      x-linode-cli-skip: true
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: Answer Security Questions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityQuestionsPost'
      responses:
        '200':
          description: Security Questions answered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityQuestionsPost'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                    "security_questions": [
                        {
                            "question_id": 1,
                            "response": "secret answer 1"
                        },
                        {
                            "question_id": 2,
                            "response": "secret answer 2"
                        },
                        {
                            "question_id": 11,
                            "response": "secret answer 3"
                        }
                    ]
                }' \
                https://api.linode.com/v4/profile/security-questions
  /profile/sshkeys:
    get:
      x-linode-grant: read_only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Profile
      summary: SSH Keys List
      description: |
        Returns a collection of SSH Keys you've added to your Profile.
      operationId: getSSHKeys
      x-linode-cli-action:
        - list
        - ls
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: Returns a paginated list of SSH Key objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SSHKey'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/sshkeys
        - lang: CLI
          source: |
            linode-cli sshkeys list
    post:
      tags:
        - Profile
      summary: SSH Key Add
      description: |
        Adds an SSH Key to your Account profile.
      operationId: addSSHKey
      x-linode-cli-action: create
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: Add SSH Key
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SSHKey'
      responses:
        '200':
          description: SSH Key associated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SSHKey'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                    "label": "My SSH Key",
                    "ssh_key": "ssh-rsa AAAA_valid_public_ssh_key_123456785== user@their-computer"
                }' \
                https://api.linode.com/v4/profile/sshkeys
        - lang: CLI
          source: |
            linode-cli sshkeys create \
              --label "My SSH Key" \
              --ssh_key "ssh-rsa AAAA_valid_public_ssh_key_123456785== user@their-computer"
  '/profile/sshkeys/{sshKeyId}':
    get:
      tags:
        - Profile
      summary: SSH Key View
      description: |
        Returns a single SSH Key object identified by `id` that you have access to view.
      operationId: getSSHKey
      x-linode-cli-action: view
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: An SSH Key object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SSHKey'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/sshkeys/42
        - lang: CLI
          source: |
            linode-cli sshkeys view 42
      parameters:
        - name: sshKeyId
          in: path
          description: The ID of the SSHKey
          required: true
          schema:
            type: integer
    put:
      tags:
        - Profile
      summary: SSH Key Update
      description: |
        Updates an SSH Key that you have permission to `read_write`.

        Only SSH key labels can be updated.
      operationId: updateSSHKey
      x-linode-cli-action: update
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: |
          The fields to update.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  $ref: '#/components/schemas/SSHKey/properties/label'
      responses:
        '200':
          description: SSH Key updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SSHKey'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "label": "my laptop"
                }' \
                https://api.linode.com/v4/profile/sshkeys/42
        - lang: CLI
          source: |
            linode-cli sshkeys update 42 \
              --label "my laptop"
      parameters:
        - name: sshKeyId
          in: path
          description: The ID of the SSHKey
          required: true
          schema:
            type: integer
    delete:
      tags:
        - Profile
      summary: SSH Key Delete
      description: |
        Deletes an SSH Key you have access to.

        **Note:** deleting an SSH Key will *not* remove it from any Linode or Disk that was deployed with `authorized_keys`. In those cases, the keys must be manually deleted on the Linode or Disk. This endpoint will only delete the key's association from your Profile.
      operationId: deleteSSHKey
      x-linode-cli-action:
        - delete
        - rm
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: SSH Key deleted successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authoriztion: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/profile/sshkeys/42
        - lang: CLI
          source: |
            linode-cli sshkeys delete 42
      parameters:
        - name: sshKeyId
          in: path
          description: The ID of the SSHKey
          required: true
          schema:
            type: integer
  /profile/phone-number:
    delete:
      x-linode-grant: read_write
      tags:
        - Profile
      summary: Phone Number Delete
      description: |
        Delete the verified phone number for the User making this request.

        Use this command to opt out of SMS messages for the requesting User after a phone number has been verified with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.
      operationId: deleteProfilePhoneNumber
      x-linode-cli-action: delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      responses:
        '200':
          description: |
            Phone number deletion request successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
              -X DELETE \
              https://api.linode.com/v4/profile/phone-number
        - lang: CLI
          source: |
            linode-cli phone delete
    post:
      x-linode-grant: read_write
      tags:
        - Profile
      summary: Phone Number Verification Code Send
      description: |
        Send a one-time verification code via SMS message to the submitted phone number. Providing your phone number helps ensure you can securely access your Account in case other ways to connect are lost. Your phone number is only used to verify your identity by sending an SMS message. Standard carrier messaging fees may apply.

        * By accessing this command you are opting in to receive SMS messages. You can opt out of SMS messages by using the **Phone Number Delete** ([DELETE /profile/phone-number](/docs/api/profile/#phone-number-delete)) command after your phone number is verified.

        * Verification codes are valid for 10 minutes after they are sent.

        * Subsequent requests made prior to code expiration result in sending the same code.

        Once a verification code is received, verify your phone number with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.
      operationId: postProfilePhoneNumber
      x-linode-cli-action: sms-code-send
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: Enter a phone number and country code for verification.
        content:
          application/json:
            schema:
              required:
                - iso_code
                - phone_number
              type: object
              properties:
                iso_code:
                  type: string
                  description: The two-letter ISO 3166 country code associated with the phone number.
                  example: US
                phone_number:
                  type: string
                  description: A valid phone number.
                  format: phone
                  example: 555-555-5555
      responses:
        '200':
          description: |
            Phone number verification code request successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
              -H "Authorization: Bearer $TOKEN" \
              -X POST -d '{
                "iso_code": "US",
                "phone_number": "555-555-5555"
              }' \
              https://api.linode.com/v4/profile/phone-number
        - lang: CLI
          source: |
            linode-cli phone sms-code-send \
              --iso-code US \
              --phone-number 555-555-5555
  /profile/phone-number/verify:
    post:
      x-linode-grant: read_write
      tags:
        - Profile
      summary: Phone Number Verify
      description: |
        Verify a phone number by confirming the one-time code received via SMS message after accessing the **Phone Verification Code Send** ([POST /profile/phone-number](/docs/api/profile/#phone-number-verification-code-send)) command.

        * Verification codes are valid for 10 minutes after they are sent.

        * Only the same User that made the verification code request can use that code with this command.

        Once completed, the verified phone number is assigned to the User making the request. To change the verified phone number for a User, first use the **Phone Number Delete** ([DELETE /profile/phone-number](/docs/api/profile/#phone-number-delete)) command, then begin the verification process again with the **Phone Verification Code Send** ([POST /profile/phone-number](/docs/api/profile/#phone-number-verification-code-send)) command.
      operationId: postProfilePhoneNumberVerify
      x-linode-cli-action: verify
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: Enter a phone verification code for confirmation.
        content:
          application/json:
            schema:
              required:
                - otp_code
              type: object
              properties:
                otp_code:
                  type: string
                  description: 'The one-time code received via SMS message after accessing the **Phone Verification Code Send** ([POST /profile/phone-number](/docs/api/profile/#phone-number-verification-code-send)) command.'
                  example: US
      responses:
        '200':
          description: |
            Phone number verification successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
              -H "Authorization: Bearer $TOKEN" \
              -X POST -d '{
                "otp_code": "123456"
              }' \
              https://api.linode.com/v4/profile/phone-number/verify
        - lang: CLI
          source: |
            linode-cli phone verify \
              --otp_code 123456
  /profile/preferences:
    get:
      x-linode-grant: read_only
      tags:
        - Profile
      summary: User Preferences View
      description: |
        View a list of user preferences tied to the OAuth client that generated
        the token making the request. The user preferences endpoints allow
        consumers of the API to store arbitrary JSON data, such as a user's font
        size preference or preferred display name. User preferences are available
        for each OAuth client registered to your account, and as such an account can
        have multiple user preferences.
      operationId: getUserPreferences
      x-linode-cli-action: preferences-view
      x-linode-cli-skip: true
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_only'
      responses:
        '200':
          description: Returns an object of user preferences.
          content:
            application/json:
              schema:
                type: object
                description: A dictionary of user preferences.
                example:
                  key1: value1
                  key2: value2
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/profile/preferences
    put:
      tags:
        - Profile
      summary: User Preferences Update
      description: |
        Updates a user's preferences. These preferences are tied to the OAuth client that generated the token making the request. The user preferences endpoints allow consumers of the API to store arbitrary JSON data, such as a user's font size preference or preferred display name. An account may have multiple preferences. Preferences, and the pertaining request body, may contain any arbitrary JSON data that the user would like to store.
      operationId: updateUserPreferences
      x-linode-cli-action: preferences-update
      x-linode-cli-skip: true
      security:
        - personalAccessToken: []
        - oauth:
            - 'account:read_write'
      requestBody:
        description: |
          The user preferences to update or store.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                Arbitrary JSON of your choosing. Overwrites any existing preferences for this user.

                Total length cannot exceed 65,535 characters.
              maxLength: 65535
      responses:
        '200':
          description: Returns an object of user preferences.
          content:
            application/json:
              schema:
                type: object
                description: An object of user preferences.
                example:
                  key1: value1
                  key2: value2
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "key1": "value1",
                  "key2": "value2"
                }' \
                https://api.linode.com/v4/profile/preferences
