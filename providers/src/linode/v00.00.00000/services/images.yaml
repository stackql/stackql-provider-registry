openapi: 3.0.1
servers:
  - url: 'https://api.linode.com/v4'
  - url: 'https://api.linode.com/v4beta'
info:
  version: 4.147.0
  title: Linode API - images
  description: images
  contact:
    name: Linode
    url: 'https://linode.com'
    email: support@linode.com
tags:
  - name: Account
    description: 'Use the Account endpoints to manage user settings, billing, and payments. You can also initiate and maintain OAuth client application authentication, enable the Linode Managed service, and create new users on your account.'
  - name: Databases
    description: 'Managed Databases is Linode''s fully-managed, high-performance database service. Use the Managed Databases endpoints to create and manage database clusters.'
  - name: Domains
    description: Use the Domains endpoints to create and manage domains and domain records on your account.
  - name: Images
    description: 'Use the Images endpoints to capture, store, and manage custom Linode images.'
  - name: Linode Instances
    description: 'Use the Linode Instances endpoints to create, configure, and manage your Linode instances. You can also manage the Linode Backup service; maintain and manage configuration profiles; create and maintain disks, intiate a host migration; view Linode Instance statistics; and more.'
  - name: Linode Types
    description: 'Use the Linode Types endpoints to retrieve information about Linode plan types, including pricing information, hardware resources, and network transfer allotment.'
  - name: Linode Kubernetes Engine (LKE)
    description: Linode Kubernetes Engine (LKE) is Linode's managed Kubernetes service. Use the LKE endpoints to create and manage Kubernetes clusters and their associated Node Pools.
  - name: Longview
    description: Longview is Linode's system-level monitoring and graphing service. Use the Longview endpoints to manage your Longview subscription and plan and to create and maintain Longview clients.
  - name: Managed
    description: 'Managed is Linode''s incident response service. Use the Managed endpoints to register a service to be monitored by the Managed Service team, provide secure access to your managed services,  view information about detected issues, and more.'
  - name: Networking
    description: 'Use the Networking endpoints to view all IP addresses on your account, reorganize assigned IPv4 addresses, update RDNS, and configure IP sharing.'
  - name: NodeBalancers
    description: 'NodeBalancers is Linode''s load balancing service. Use the NodeBalancers endpoints to create and manage NodeBalancers. You can also create and maintain configurations; create and maintain nodes, and view statistics.'
  - name: Object Storage
    description: 'Object Storage is Linode''s S3-compatible data storage service. Use the Object Storage endpoints to create and maintaining buckets, add and remove objects from buckets, create and maintain Object Storage keys, and cancel the Object Storage service.'
  - name: Profile
    description: 'Use the Profile endpoints to manage your Linode user profile preferences and security settings. This includes creating and maintaining personal access tokens, creating and maintaining SSH keys, confirming and enabling two-factor authentication, and updating user and profile preferences.'
  - name: Regions
    description: 'Use the Regions endpoints to view information about the various Linode data center regions, including the service capabilities for each region, country, status, and more.'
  - name: StackScripts
    description: Linode StackScripts allow you to create reusable scripts to configure new Linode instances. Use the StackScripts endpoints to create and manage StackScripts on your account.
  - name: Support
    description: 'Use the Support endpoints to open, view, and close Linode Support tickets. You can also create and manage your Support ticket replies.'
  - name: Tags
    description: 'Tags allow you to organize and group your various Linode services. Use the Tags endpoints to create, assign, and delete your account tags.'
  - name: Volumes
    description: 'Volumes is Linode''s block storage service. Use the Volumes endpoints to create, attach, and manage your account Volumes.'
components:
  schemas:
    Image:
      type: object
      description: Image object
      properties:
        id:
          type: string
          description: The unique ID of this Image.
          example: linode/debian11
          readOnly: true
          x-linode-cli-display: 1
        label:
          x-linode-filterable: true
          type: string
          description: |
            A short description of the Image.
          example: Debian 11
          x-linode-cli-display: 2
        created:
          type: string
          format: date-time
          description: When this Image was created.
          example: '2021-08-14T22:44:02'
          readOnly: true
        updated:
          type: string
          format: date-time
          description: When this Image was last updated.
          example: '2021-08-14T22:44:02'
          readOnly: true
        created_by:
          type: string
          description: |
            The name of the User who created this Image, or "linode" for public Images.
          example: linode
          readOnly: true
        deprecated:
          x-linode-filterable: true
          type: boolean
          description: |
            Whether or not this Image is deprecated. Will only be true for deprecated public Images.
          example: false
          readOnly: true
        description:
          type: string
          description: A detailed description of this Image.
          example: Example Image description.
          nullable: true
          minLength: 1
          maxLength: 65000
          x-linode-cli-display: 4
          x-linode-cli-color:
            None: black
            default_: white
        is_public:
          x-linode-filterable: true
          description: True if the Image is a public distribution image. False if Image is private Account-specific Image.
          type: boolean
          example: true
          readOnly: true
          x-linode-cli-display: 5
        size:
          x-linode-filterable: true
          type: integer
          description: |
            The minimum size this Image needs to deploy. Size is in MB.
          example: 2500
          readOnly: true
          x-linode-cli-display: 6
        type:
          type: string
          x-linode-filterable: true
          description: |
            How the Image was created.

            "Manual" Images can be created at any time.

            "Automatic" Images are created automatically from a deleted Linode.
          enum:
            - manual
            - automatic
          example: manual
          readOnly: true
        expiry:
          type: string
          format: date-time
          nullable: true
          description: |
            Only Images created automatically from a deleted Linode (type=automatic) will expire.
          example: null
          readOnly: true
        eol:
          type: string
          format: date-time
          description: |
            The date of the public Image's planned end of life. `None` for private Images.
          example: '2026-07-01T04:00:00'
          readOnly: true
        vendor:
          x-linode-filterable: true
          type: string
          description: |
            The upstream distribution vendor. `None` for private Images.
          example: Debian
          readOnly: true
          x-linode-cli-display: 3
          x-linode-cli-color:
            None: black
            default_: white
        status:
          x-linode-cli-display: 7
          type: string
          readOnly: true
          x-linode-filterable: true
          enum:
            - creating
            - pending_upload
            - available
          description: |
            The current status of this Image.

            Only Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.

            The "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.
          example: available
    PaginationEnvelope:
      type: object
      description: |
        An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.
      properties:
        pages:
          type: integer
          readOnly: true
          description: 'The total number of [pages](/docs/api/#pagination).'
          example: 1
        page:
          type: integer
          readOnly: true
          description: 'The current [page](/docs/api/#pagination).'
          example: 1
        results:
          type: integer
          readOnly: true
          description: The total number of results.
          example: 1
    ErrorObject:
      type: object
      description: |
        An object for describing a single error that occurred during the processing of a request.
      properties:
        reason:
          type: string
          description: |
            What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
          example: fieldname must be a valid value
        field:
          type: string
          description: |
            The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
          example: fieldname
  parameters:
    pageOffset:
      name: page
      in: query
      description: The page of a collection to return.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page_size
      in: query
      description: The number of items to return per page.
      schema:
        type: integer
        minimum: 25
        maximum: 500
        default: 100
  responses:
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorObject'
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://login.linode.com/oauth/authorize'
          tokenUrl: 'https://login.linode.com/oauth/token'
          scopes:
            'account:read_only': Allows access to GET information about your Account.
            'account:read_write': Allows access to all endpoints related to your Account.
            'domains:read_only': Allows access to GET Domains on your Account.
            'domains:read_write': Allows access to all Domain endpoints.
            'events:read_only': Allows access to GET your Events.
            'events:read_write': Allows access to all endpoints related to your Events.
            'firewall:read_only': Allows access to GET information about your Firewalls.
            'firewall:read_write': Allows acces to all Firewall endpoints.
            'images:read_only': Allows access to GET your Images.
            'images:read_write': Allows access to all endpoints related to your Images.
            'ips:read_only': Allows access to GET your ips.
            'ips:read_write': Allows access to all endpoints related to your ips.
            'linodes:read_only': Allows access to GET Linodes on your Account.
            'linodes:read_write': Allow access to all endpoints related to your Linodes.
            'lke:read_only': Allows access to GET LKE Clusters on your Account.
            'lke:read_write': Allows access to all endpoints related to LKE Clusters on your Account.
            'longview:read_only': Allows access to GET your Longview Clients.
            'longview:read_write': Allows access to all endpoints related to your Longview Clients.
            'nodebalancers:read_only': Allows access to GET NodeBalancers on your Account.
            'nodebalancers:read_write': Allows access to all NodeBalancer endpoints.
            'object_storage:read_only': Allows access to GET information related to your Object Storage.
            'object_storage:read_write': Allows access to all Object Storage endpoints.
            'stackscripts:read_only': Allows access to GET your StackScripts.
            'stackscripts:read_write': Allows access to all endpoints related to your StackScripts.
            'volumes:read_only': Allows access to GET your Volumes.
            'volumes:read_write': Allows access to all endpoints related to your Volumes.
  links:
    bootLinode:
      operationId: bootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebootLinode:
      operationId: rebootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    shutdownLinode:
      operationId: shutdownLinodeInstance
      parameters:
        linodeId: $request.body#/id
    updateLinode:
      operationId: updateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    deleteLinode:
      operationId: deleteLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebuildLinode:
      operationId: rebuildLinodeInstance
      parameters:
        linodeId: $request.body#/id
    mutateLinode:
      operationId: mutateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    resizeLinode:
      operationId: resizeLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rescueLinode:
      operationId: rescueLinodeInstance
      parameters:
        linodeId: $request.body#/id
    cloneLinode:
      operationId: cloneLinodeInstance
      parameters:
        linodeId: $request.body#/id
    attachVolume:
      operationId: attachVolume
      parameters:
        volumeID: $request.body#/id
    cloneVolume:
      operationId: cloneVolume
      parameters:
        volumeId: $request.body#/id
    detachVolume:
      operationId: detachVolume
      parameters:
        volumeId: $request.body#/id
    resizeVolume:
      operationId: resizeVolume
      parameters:
        volumeId: $request.body#/id
  x-stackQL-resources:
    images:
      id: linode.images.images
      name: images
      title: Images
      methods:
        getImages:
          operation:
            $ref: '#/paths/~1images/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getImages:
          operation:
            $ref: '#/paths/~1images/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createImage:
          operation:
            $ref: '#/paths/~1images/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getImage:
          operation:
            $ref: '#/paths/~1images~1{imageId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getImage:
          operation:
            $ref: '#/paths/~1images~1{imageId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateImage:
          operation:
            $ref: '#/paths/~1images~1{imageId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteImage:
          operation:
            $ref: '#/paths/~1images~1{imageId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/images/methods/getImages'
          - $ref: '#/components/x-stackQL-resources/images/methods/getImage'
        insert:
          - $ref: '#/components/x-stackQL-resources/images/methods/createImage'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/images/methods/deleteImage'
paths:
  /images:
    get:
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Images
      summary: Images List
      description: |
        Returns a paginated list of Images.

        * **Public** Images have IDs that begin with "linode/". These distribution images are generally available to
        all users.

        * **Private** Images have IDs that begin with "private/". These Images are Account-specific and only
        accessible to Users with appropriate [Grants](/docs/api/account/#users-grants-view).

        * To view only public Images, call this endpoint with or without authentication. To view private Images as well, call this endpoint with authentication.
      x-linode-redoc-load-ids: true
      operationId: getImages
      x-linode-cli-action:
        - list
        - ls
      security:
        - personalAccessToken: []
        - oauth:
            - 'images:read_only'
      responses:
        '200':
          description: A paginated list of Images.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            # Returns public Images only
            curl https://api.linode.com/v4/images

            # Returns private and public Images
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/images
        - lang: CLI
          source: |
            linode-cli images list
    post:
      x-linode-grant: add_images
      tags:
        - Images
      summary: Image Create
      description: |
        Captures a private gold-master Image from a Linode Disk.
      operationId: createImage
      x-linode-cli-action: create
      security:
        - personalAccessToken: []
        - oauth:
            - 'images:read_write'
            - 'linodes:read_only'
      requestBody:
        description: Information about the Image to create.
        content:
          application/json:
            schema:
              required:
                - disk_id
              properties:
                disk_id:
                  type: integer
                  description: |
                    The ID of the Linode Disk that this Image will be created from.
                  example: 42
                label:
                  type: string
                  description: |
                    A short title of this Image. Defaults to the label of the Disk it is being created from if not provided.
                description:
                  type: string
                  description: |
                    A detailed description of this Image.
      responses:
        '200':
          description: New private Image created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "disk_id": 123,
                  "label": "this_is_a_label",
                  "description": "A longer description of the image"
                }' \
                https://api.linode.com/v4/images
        - lang: CLI
          source: |
            linode-cli images create \
              --label this_is_a_label \
              --description "A longer description \
                of the image" \
              --disk_id 123
  /images/upload:
    post:
      x-linode-grant: add_images
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      tags:
        - Images
      summary: Image Upload
      description: |
        Initiates an Image upload.

        This endpoint creates a new private Image object and returns it along
        with the URL to which image data can be uploaded.

        - Image data must be uploaded within 24 hours of creation or the
        upload will be cancelled and the image deleted.

        - Image uploads should be made as an HTTP PUT request to the URL returned in the `upload_to`
        response parameter, with a `Content-type: application/octet-stream` header included in the
        request. For example:

              curl -v \
                -H "Content-Type: application/octet-stream" \
                --upload-file example.img.gz \
                $UPLOAD_URL \
                --progress-bar \
                --output /dev/null

        - Uploaded image data should be compressed in gzip (`.gz`) format. The uncompressed disk should be in raw
        disk image (`.img`) format. A maximum compressed file size of 5GB is supported for upload at this time.

        **Note:** To initiate and complete an Image upload in a single step, see our guide on how to [Upload an Image](/docs/products/tools/images/guides/upload-an-image/) using Cloud Manager or the Linode CLI `image-upload` plugin.
      x-linode-cli-action: upload
      security:
        - personalAccessToken: []
        - oauth:
            - 'images:read_write'
      requestBody:
        description: The uploaded Image details.
        x-linode-cli-allowed-defaults:
          - region
        content:
          application/json:
            schema:
              type: object
              required:
                - label
                - region
              properties:
                region:
                  type: string
                  description: |
                    The region to upload to. Once uploaded, the Image can be used in any region.
                  example: eu-central
                label:
                  type: string
                  description: Label for the uploaded Image.
                  example: my-image-label
                description:
                  type: string
                  description: Description for the uploaded Image.
                  example: This is an example image in the docs.
      responses:
        '200':
          description: Image Upload object including the upload URL and Image object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  upload_to:
                    type: string
                    description: The URL to upload the Image to.
                    x-linode-cli-display: 1
                  image:
                    $ref: '#/components/schemas/Image'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "description": "Optional details about the Image",
                  "label": "Example Image",
                  "region": "us-east"
                }' \
                https://api.linode.com/v4/images/upload
        - lang: CLI
          source: |
            # Upload the Image file in a single step
            linode-cli image-upload \
              --description "Optional details about the Image" \
              --label "Example Image" \
              --region us-east \
              /path/to/image-file.img.gz

            # Returns the upload_to URL
            linode-cli images upload \
              --description "Optional details about the Image" \
              --label "Example Image" \
              --region us-east
  '/images/{imageId}':
    get:
      tags:
        - Images
      summary: Image View
      description: |
        Get information about a single Image.

        * **Public** Images have IDs that begin with "linode/". These distribution images are generally available to
        all users.

        * **Private** Images have IDs that begin with "private/". These Images are Account-specific and only
        accessible to Users with appropriate [Grants](/docs/api/account/#users-grants-view).

        * To view a public Image, call this endpoint with or without authentication. To view a private Image, call this endpoint with authentication.
      operationId: getImage
      x-linode-cli-action: view
      security:
        - personalAccessToken: []
        - oauth:
            - 'images:read_only'
      responses:
        '200':
          description: A single Image object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            # Public Image
            curl https://api.linode.com/v4/images/linode/debian11

            # Private Image
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/images/private/12345
        - lang: CLI
          source: |
            linode-cli images view linode/debian9
      parameters:
        - name: imageId
          in: path
          description: ID of the Image to look up.
          required: true
          schema:
            type: string
    put:
      x-linode-grant: read_write
      tags:
        - Images
      summary: Image Update
      description: |
        Updates a private Image that you have permission to `read_write`.
      operationId: updateImage
      x-linode-cli-action: update
      security:
        - personalAccessToken: []
        - oauth:
            - 'images:read_write'
      requestBody:
        description: |
          The fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        '200':
          description: The updated image.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "label": "My gold-master image",
                  "description": "The detailed description of my Image."
                }' \
                https://api.linode.com/v4/images/private/12345
        - lang: CLI
          source: |
            linode-cli images update private/12345 \
              --label "My gold-master image" \
              --description "The detailed description \
                of my Image."
      parameters:
        - name: imageId
          in: path
          description: ID of the Image to look up.
          required: true
          schema:
            type: string
    delete:
      x-linode-grant: read_write
      tags:
        - Images
      summary: Image Delete
      description: |
        Deletes a private Image you have permission to `read_write`.


        **Deleting an Image is a destructive action and cannot be undone.**
      operationId: deleteImage
      x-linode-cli-action:
        - delete
        - rm
      security:
        - personalAccessToken: []
        - oauth:
            - 'images:read_write'
      responses:
        '200':
          description: Delete successful
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/images/private/12345
        - lang: CLI
          source: |
            linode-cli images delete 12345
      parameters:
        - name: imageId
          in: path
          description: ID of the Image to look up.
          required: true
          schema:
            type: string
