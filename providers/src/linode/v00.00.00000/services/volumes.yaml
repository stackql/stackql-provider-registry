openapi: 3.0.1
servers:
  - url: 'https://api.linode.com/v4'
  - url: 'https://api.linode.com/v4beta'
info:
  version: 4.147.0
  title: Linode API - volumes
  description: volumes
  contact:
    name: Linode
    url: 'https://linode.com'
    email: support@linode.com
tags:
  - name: Account
    description: 'Use the Account endpoints to manage user settings, billing, and payments. You can also initiate and maintain OAuth client application authentication, enable the Linode Managed service, and create new users on your account.'
  - name: Databases
    description: 'Managed Databases is Linode''s fully-managed, high-performance database service. Use the Managed Databases endpoints to create and manage database clusters.'
  - name: Domains
    description: Use the Domains endpoints to create and manage domains and domain records on your account.
  - name: Images
    description: 'Use the Images endpoints to capture, store, and manage custom Linode images.'
  - name: Linode Instances
    description: 'Use the Linode Instances endpoints to create, configure, and manage your Linode instances. You can also manage the Linode Backup service; maintain and manage configuration profiles; create and maintain disks, intiate a host migration; view Linode Instance statistics; and more.'
  - name: Linode Types
    description: 'Use the Linode Types endpoints to retrieve information about Linode plan types, including pricing information, hardware resources, and network transfer allotment.'
  - name: Linode Kubernetes Engine (LKE)
    description: Linode Kubernetes Engine (LKE) is Linode's managed Kubernetes service. Use the LKE endpoints to create and manage Kubernetes clusters and their associated Node Pools.
  - name: Longview
    description: Longview is Linode's system-level monitoring and graphing service. Use the Longview endpoints to manage your Longview subscription and plan and to create and maintain Longview clients.
  - name: Managed
    description: 'Managed is Linode''s incident response service. Use the Managed endpoints to register a service to be monitored by the Managed Service team, provide secure access to your managed services,  view information about detected issues, and more.'
  - name: Networking
    description: 'Use the Networking endpoints to view all IP addresses on your account, reorganize assigned IPv4 addresses, update RDNS, and configure IP sharing.'
  - name: NodeBalancers
    description: 'NodeBalancers is Linode''s load balancing service. Use the NodeBalancers endpoints to create and manage NodeBalancers. You can also create and maintain configurations; create and maintain nodes, and view statistics.'
  - name: Object Storage
    description: 'Object Storage is Linode''s S3-compatible data storage service. Use the Object Storage endpoints to create and maintaining buckets, add and remove objects from buckets, create and maintain Object Storage keys, and cancel the Object Storage service.'
  - name: Profile
    description: 'Use the Profile endpoints to manage your Linode user profile preferences and security settings. This includes creating and maintaining personal access tokens, creating and maintaining SSH keys, confirming and enabling two-factor authentication, and updating user and profile preferences.'
  - name: Regions
    description: 'Use the Regions endpoints to view information about the various Linode data center regions, including the service capabilities for each region, country, status, and more.'
  - name: StackScripts
    description: Linode StackScripts allow you to create reusable scripts to configure new Linode instances. Use the StackScripts endpoints to create and manage StackScripts on your account.
  - name: Support
    description: 'Use the Support endpoints to open, view, and close Linode Support tickets. You can also create and manage your Support ticket replies.'
  - name: Tags
    description: 'Tags allow you to organize and group your various Linode services. Use the Tags endpoints to create, assign, and delete your account tags.'
  - name: Volumes
    description: 'Volumes is Linode''s block storage service. Use the Volumes endpoints to create, attach, and manage your account Volumes.'
components:
  schemas:
    Volume:
      type: object
      description: |
        A Block Storage Volume associated with your Account.
      properties:
        id:
          type: integer
          description: The unique ID of this Volume.
          example: 12345
          readOnly: true
          x-linode-cli-display: 1
        label:
          x-linode-filterable: true
          type: string
          description: |
            The Volume's label is for display purposes only.
          example: my-volume
          minLength: 1
          maxLength: 32
          pattern: '^[a-zA-Z]((?!--|__)[a-zA-Z0-9-_])+$'
          x-linode-cli-display: 2
        filesystem_path:
          type: string
          description: |
            The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
          example: /dev/disk/by-id/scsi-0Linode_Volume_my-volume
          readOnly: true
        status:
          type: string
          description: |
            The current status of the volume.  Can be one of:

              * `creating` - the Volume is being created and is not yet available
                for use.
              * `active` - the Volume is online and available for use.
              * `resizing` - the Volume is in the process of upgrading
                its current capacity.
          enum:
            - creating
            - active
            - resizing
          example: active
          readOnly: true
          x-linode-cli-display: 3
          x-linode-cli-color:
            active: green
            contact_support: red
            default_: yellow
        size:
          type: integer
          description: |
            The Volume's size, in GiB.
          maximum: 10240
          x-linode-cli-display: 4
          example: 30
        region:
          $ref: '#/components/schemas/Region/properties/id'
          x-linode-cli-display: 5
        linode_id:
          type: integer
          nullable: true
          description: |
            If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
          example: 12346
          x-linode-cli-display: 6
        linode_label:
          type: string
          nullable: true
          description: |
            If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.
          example: linode123
          x-linode-cli-display: 7
          readOnly: true
        created:
          type: string
          format: date-time
          description: When this Volume was created.
          example: '2018-01-01T00:01:01'
          readOnly: true
        updated:
          type: string
          format: date-time
          description: When this Volume was last updated.
          example: '2018-01-01T00:01:01'
          readOnly: true
        tags:
          x-linode-filterable: true
          description: |
            An array of Tags applied to this object.  Tags are for organizational purposes only.
          type: array
          items:
            type: string
          example:
            - example tag
            - another example
        hardware_type:
          type: string
          enum:
            - hdd
            - nvme
          description: The storage type of this Volume.
          example: nvme
          readOnly: true
    PaginationEnvelope:
      type: object
      description: |
        An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.
      properties:
        pages:
          type: integer
          readOnly: true
          description: 'The total number of [pages](/docs/api/#pagination).'
          example: 1
        page:
          type: integer
          readOnly: true
          description: 'The current [page](/docs/api/#pagination).'
          example: 1
        results:
          type: integer
          readOnly: true
          description: The total number of results.
          example: 1
    Region:
      type: object
      description: An area where Linode services are available.
      properties:
        id:
          readOnly: true
          type: string
          description: The unique ID of this Region.
          example: us-east
          x-linode-cli-display: 1
        label:
          type: string
          description: 'Detailed location information for this Region, including city, state or region, and country.'
          example: 'Newark, NJ, USA'
          readOnly: true
          x-linode-cli-display: 2
        country:
          type: string
          description: The country where this Region resides.
          example: us
          readOnly: true
          x-linode-cli-display: 3
        capabilities:
          type: array
          items:
            type: string
          description: |
            A list of capabilities of this region.
          example:
            - Linodes
            - NodeBalancers
            - Block Storage
            - Object Storage
          readOnly: true
          x-linode-cli-display: 4
        status:
          type: string
          description: |
            This region's current operational status.
          example: ok
          enum:
            - ok
            - outage
          readOnly: true
          x-linode-cli-display: 5
        resolvers:
          type: object
          readOnly: true
          x-linode-cli-display: 6
          properties:
            ipv4:
              type: string
              description: |
                The IPv4 addresses for this region's DNS resolvers, separated by commas.
              example: '192.0.2.0,192.0.2.1'
              readOnly: true
            ipv6:
              type: string
              description: |
                The IPv6 addresses for this region's DNS resolvers, separated by commas.
              example: '2001:0db8::,2001:0db8::1'
              readOnly: true
    ErrorObject:
      type: object
      description: |
        An object for describing a single error that occurred during the processing of a request.
      properties:
        reason:
          type: string
          description: |
            What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
          example: fieldname must be a valid value
        field:
          type: string
          description: |
            The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
          example: fieldname
  parameters:
    pageOffset:
      name: page
      in: query
      description: The page of a collection to return.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page_size
      in: query
      description: The number of items to return per page.
      schema:
        type: integer
        minimum: 25
        maximum: 500
        default: 100
  responses:
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorObject'
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://login.linode.com/oauth/authorize'
          tokenUrl: 'https://login.linode.com/oauth/token'
          scopes:
            'account:read_only': Allows access to GET information about your Account.
            'account:read_write': Allows access to all endpoints related to your Account.
            'domains:read_only': Allows access to GET Domains on your Account.
            'domains:read_write': Allows access to all Domain endpoints.
            'events:read_only': Allows access to GET your Events.
            'events:read_write': Allows access to all endpoints related to your Events.
            'firewall:read_only': Allows access to GET information about your Firewalls.
            'firewall:read_write': Allows acces to all Firewall endpoints.
            'images:read_only': Allows access to GET your Images.
            'images:read_write': Allows access to all endpoints related to your Images.
            'ips:read_only': Allows access to GET your ips.
            'ips:read_write': Allows access to all endpoints related to your ips.
            'linodes:read_only': Allows access to GET Linodes on your Account.
            'linodes:read_write': Allow access to all endpoints related to your Linodes.
            'lke:read_only': Allows access to GET LKE Clusters on your Account.
            'lke:read_write': Allows access to all endpoints related to LKE Clusters on your Account.
            'longview:read_only': Allows access to GET your Longview Clients.
            'longview:read_write': Allows access to all endpoints related to your Longview Clients.
            'nodebalancers:read_only': Allows access to GET NodeBalancers on your Account.
            'nodebalancers:read_write': Allows access to all NodeBalancer endpoints.
            'object_storage:read_only': Allows access to GET information related to your Object Storage.
            'object_storage:read_write': Allows access to all Object Storage endpoints.
            'stackscripts:read_only': Allows access to GET your StackScripts.
            'stackscripts:read_write': Allows access to all endpoints related to your StackScripts.
            'volumes:read_only': Allows access to GET your Volumes.
            'volumes:read_write': Allows access to all endpoints related to your Volumes.
  links:
    bootLinode:
      operationId: bootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebootLinode:
      operationId: rebootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    shutdownLinode:
      operationId: shutdownLinodeInstance
      parameters:
        linodeId: $request.body#/id
    updateLinode:
      operationId: updateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    deleteLinode:
      operationId: deleteLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebuildLinode:
      operationId: rebuildLinodeInstance
      parameters:
        linodeId: $request.body#/id
    mutateLinode:
      operationId: mutateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    resizeLinode:
      operationId: resizeLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rescueLinode:
      operationId: rescueLinodeInstance
      parameters:
        linodeId: $request.body#/id
    cloneLinode:
      operationId: cloneLinodeInstance
      parameters:
        linodeId: $request.body#/id
    attachVolume:
      operationId: attachVolume
      parameters:
        volumeID: $request.body#/id
    cloneVolume:
      operationId: cloneVolume
      parameters:
        volumeId: $request.body#/id
    detachVolume:
      operationId: detachVolume
      parameters:
        volumeId: $request.body#/id
    resizeVolume:
      operationId: resizeVolume
      parameters:
        volumeId: $request.body#/id
  x-stackQL-resources:
    volumes:
      id: linode.volumes.volumes
      name: volumes
      title: Volumes
      methods:
        getVolumes:
          operation:
            $ref: '#/paths/~1volumes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getVolumes:
          operation:
            $ref: '#/paths/~1volumes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createVolume:
          operation:
            $ref: '#/paths/~1volumes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getVolume:
          operation:
            $ref: '#/paths/~1volumes~1{volumeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getVolume:
          operation:
            $ref: '#/paths/~1volumes~1{volumeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateVolume:
          operation:
            $ref: '#/paths/~1volumes~1{volumeId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteVolume:
          operation:
            $ref: '#/paths/~1volumes~1{volumeId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        attachVolume:
          operation:
            $ref: '#/paths/~1volumes~1{volumeId}~1attach/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cloneVolume:
          operation:
            $ref: '#/paths/~1volumes~1{volumeId}~1clone/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        detachVolume:
          operation:
            $ref: '#/paths/~1volumes~1{volumeId}~1detach/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        resizeVolume:
          operation:
            $ref: '#/paths/~1volumes~1{volumeId}~1resize/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/volumes/methods/getVolumes'
          - $ref: '#/components/x-stackQL-resources/volumes/methods/getVolume'
        insert:
          - $ref: '#/components/x-stackQL-resources/volumes/methods/createVolume'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/volumes/methods/deleteVolume'
paths:
  /volumes:
    get:
      x-linode-grant: read_only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      summary: Volumes List
      description: |
        Returns a paginated list of Volumes you have permission to view.
      tags:
        - Volumes
      operationId: getVolumes
      x-linode-cli-action:
        - list
        - ls
      security:
        - personalAccessToken: []
        - oauth:
            - 'volumes:read_only'
      responses:
        '200':
          description: Returns an array of all Volumes on your Account.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Volume'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/volumes
        - lang: CLI
          source: |
            linode-cli volumes list
    post:
      x-linode-charge: true
      x-linode-grant: add_volumes
      summary: Volume Create
      description: |
        Creates a Volume on your Account. In order for this to complete successfully, your User must have the `add_volumes` grant. Creating a new Volume will start accruing additional charges on your account.
      tags:
        - Volumes
      operationId: createVolume
      x-linode-cli-action: create
      security:
        - personalAccessToken: []
        - oauth:
            - 'volumes:read_write'
      requestBody:
        description: The requested initial state of a new Volume.
        required: true
        x-linode-cli-allowed-defaults:
          - region
        content:
          application/json:
            schema:
              type: object
              required:
                - label
              properties:
                region:
                  type: string
                  description: |
                    The Region to deploy this Volume in. This is only required if a linode_id is not given.
                  example: null
                linode_id:
                  type: integer
                  description: |
                    The Linode this volume should be attached to upon creation. If not given, the volume will be created without an attachment.
                  example: 123
                size:
                  type: integer
                  description: |
                    The initial size of this volume, in GB.  Be aware that volumes may only be resized up after creation.
                  example: 20
                  default: 20
                label:
                  type: string
                  description: |
                    The Volume's label, which is also used in the `filesystem_path` of the resulting volume.
                  example: my-volume
                  minLength: 1
                  maxLength: 32
                  pattern: '^[a-zA-Z]((?!--|__)[a-zA-Z0-9-_])+$'
                config_id:
                  type: integer
                  description: |
                    When creating a Volume attached to a Linode, the ID of the Linode Config to include the new Volume in. This Config must belong to the Linode referenced by `linode_id`. Must _not_ be provided if `linode_id` is not sent. If a `linode_id` is sent without a `config_id`, the volume will be attached:

                      * to the Linode's only config if it only has one config.
                      * to the Linode's last used config, if possible.

                    If no config can be selected for attachment, an error will be returned.
                  example: 23456
                tags:
                  x-linode-filterable: true
                  description: |
                    An array of Tags applied to this object.  Tags are for organizational purposes only.
                  type: array
                  items:
                    type: string
                  example:
                    - example tag
                    - another example
      responses:
        '200':
          description: |
            Creating Volume.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "label": "my-volume",
                  "size": 20,
                  "linode_id": 12346
                }' \
                https://api.linode.com/v4/volumes
        - lang: CLI
          source: |
            linode-cli volumes create \
              --label my-volume \
              --size 20 \
              --linode_id 12346 \
              --no-defaults
  '/volumes/{volumeId}':
    get:
      x-linode-grant: read_only
      parameters:
        - name: volumeId
          in: path
          description: ID of the Volume to look up.
          required: true
          schema:
            type: integer
      tags:
        - Volumes
      summary: Volume View
      description: |
        Get information about a single Volume.
      operationId: getVolume
      x-linode-cli-action: view
      security:
        - personalAccessToken: []
        - oauth:
            - 'volumes:read_only'
      responses:
        '200':
          description: Returns a single Volume object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
          links:
            attach:
              $ref: '#/components/links/attachVolume'
            clone:
              $ref: '#/components/links/cloneVolume'
            detach:
              $ref: '#/components/links/detachVolume'
            resize:
              $ref: '#/components/links/resizeVolume'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/volumes/12345
        - lang: CLI
          source: |
            linode-cli volumes view 12345
    put:
      x-linode-grant: read_write
      tags:
        - Volumes
      summary: Volume Update
      description: |
        Updates a Volume that you have permission to `read_write`.
      operationId: updateVolume
      x-linode-cli-action: update
      security:
        - personalAccessToken: []
        - oauth:
            - 'volumes:read_write'
      requestBody:
        description: |
          If any updated field fails to pass validation, the Volume will not be updated.
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Volume'
                - type: object
                  properties:
                    size:
                      readOnly: true
                    linode_id:
                      readOnly: true
      responses:
        '200':
          description: The updated Volume.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "label": "my-volume"
                }' \
                https://api.linode.com/v4/volumes/12345
        - lang: CLI
          source: |
            linode-cli volumes update 12345 \
              --label my_volume
      parameters:
        - name: volumeId
          in: path
          description: ID of the Volume to look up.
          required: true
          schema:
            type: integer
    delete:
      x-linode-grant: read_write
      tags:
        - Volumes
      summary: Volume Delete
      description: |
        Deletes a Volume you have permission to `read_write`.

        * **Deleting a Volume is a destructive action and cannot be undone.**

        * Deleting stops billing for the Volume. You will be billed for time used within
        the billing period the Volume was active.

        * Volumes that are migrating cannot be deleted until the migration is finished.
      operationId: deleteVolume
      x-linode-cli-action:
        - delete
        - rm
      security:
        - personalAccessToken: []
        - oauth:
            - 'volumes:read_write'
      responses:
        '200':
          description: Volume deletion successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/volumes/12345
        - lang: CLI
          source: |
            linode-cli volumes delete 12345
      parameters:
        - name: volumeId
          in: path
          description: ID of the Volume to look up.
          required: true
          schema:
            type: integer
  '/volumes/{volumeId}/attach':
    post:
      summary: Volume Attach
      description: |
        Attaches a Volume on your Account to an existing Linode on your Account. In order for this request to complete successfully, your User must have `read_only` or `read_write` permission to the Volume and `read_write` permission to the Linode. Additionally, the Volume and Linode must be located in the same Region.
      tags:
        - Volumes
      operationId: attachVolume
      x-linode-cli-action: attach
      security:
        - personalAccessToken: []
        - oauth:
            - 'volumes:read_write'
            - 'linodes:read_write'
      requestBody:
        description: Volume to attach to a Linode.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - linode_id
              properties:
                linode_id:
                  type: integer
                  description: The ID of the Linode to attach the volume to.
                config_id:
                  type: integer
                  description: |
                    The ID of the Linode Config to include this Volume in. Must belong to the Linode referenced by `linode_id`. If not given, the last booted Config will be chosen.
                  example: 23456
                persist_across_boots:
                  type: boolean
                  description: |
                    Defaults to true, if false is provided, the Volume will not be attached to the Linode Config. In this case more than 8 Volumes may be attached to a Linode if a Linode has 16GB of RAM or more. The number of volumes that can be attached is equal to the number of GB of RAM that the Linode has, up to a maximum of 64. `config_id` should not be passed if this is set to false and linode_id must be passed. The Linode must be running.
      responses:
        '200':
          description: Volume was attached to a Linode.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "linode_id": 12346,
                  "config_id": 23456
                }' \
                https://api.linode.com/v4/volumes/12345/attach
        - lang: CLI
          source: |
            linode-cli volumes attach 12345 \
              --linode_id 12346 \
              --config_id 23456
      parameters:
        - name: volumeId
          in: path
          description: ID of the Volume to attach.
          required: true
          schema:
            type: integer
  '/volumes/{volumeId}/clone':
    post:
      x-linode-charge: true
      x-linode-grant: add_volumes
      summary: Volume Clone
      description: |
        Creates a Volume on your Account. In order for this request to complete successfully, your User must have the `add_volumes` grant. The new Volume will have the same size and data as the source Volume. Creating a new Volume will incur a charge on your Account.
        * Only Volumes with a `status` of "active" can be cloned.
      tags:
        - Volumes
      operationId: cloneVolume
      x-linode-cli-action: clone
      security:
        - personalAccessToken: []
        - oauth:
            - 'volumes:read_write'
      requestBody:
        description: The requested state your Volume will be cloned into.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - label
              properties:
                label:
                  $ref: '#/components/schemas/Volume/properties/label'
      responses:
        '200':
          description: Clone started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "label": "my-volume"
                }' \
                https://api.linode.com/v4/volumes/12345/clone
        - lang: CLI
          source: |
            linode-cli volumes clone 12345 \
              --label my-volume
      parameters:
        - name: volumeId
          in: path
          description: ID of the Volume to clone.
          required: true
          schema:
            type: integer
  '/volumes/{volumeId}/detach':
    post:
      summary: Volume Detach
      description: |
        Detaches a Volume on your Account from a Linode on your Account. In order for this request to complete successfully, your User must have `read_write` access to the Volume and `read_write` access to the Linode.
      tags:
        - Volumes
      operationId: detachVolume
      x-linode-cli-action: detach
      security:
        - personalAccessToken: []
        - oauth:
            - 'volumes:read_write'
            - 'linodes:read_write'
      responses:
        '200':
          description: Volume was detached from a Linode.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST \
                https://api.linode.com/v4/volumes/12345/detach
        - lang: CLI
          source: |
            linode-cli volumes detach 12345
      parameters:
        - name: volumeId
          in: path
          description: ID of the Volume to detach.
          required: true
          schema:
            type: integer
  '/volumes/{volumeId}/resize':
    post:
      x-linode-charge: true
      summary: Volume Resize
      description: |
        Resize an existing Volume on your Account. In order for this request to complete successfully, your User must have the `read_write` permissions to the Volume.
        * Volumes can only be resized up.
        * Only Volumes with a `status` of "active" can be resized.
      tags:
        - Volumes
      operationId: resizeVolume
      x-linode-cli-action: resize
      security:
        - personalAccessToken: []
        - oauth:
            - 'volumes:read_write'
      requestBody:
        description: The requested size to increase your Volume to.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - size
              properties:
                size:
                  $ref: '#/components/schemas/Volume/properties/size'
      responses:
        '200':
          description: Volume resize started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "size": 30
                }' \
                https://api.linode.com/v4/volumes/12345/resize
        - lang: CLI
          source: |
            linode-cli volumes resize 12345 \
              --size 30
      parameters:
        - name: volumeId
          in: path
          description: ID of the Volume to resize.
          required: true
          schema:
            type: integer
