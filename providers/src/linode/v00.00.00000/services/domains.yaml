openapi: 3.0.1
servers:
  - url: 'https://api.linode.com/v4'
  - url: 'https://api.linode.com/v4beta'
info:
  version: 4.147.0
  title: Linode API - domains
  description: domains
  contact:
    name: Linode
    url: 'https://linode.com'
    email: support@linode.com
tags:
  - name: Account
    description: 'Use the Account endpoints to manage user settings, billing, and payments. You can also initiate and maintain OAuth client application authentication, enable the Linode Managed service, and create new users on your account.'
  - name: Databases
    description: 'Managed Databases is Linode''s fully-managed, high-performance database service. Use the Managed Databases endpoints to create and manage database clusters.'
  - name: Domains
    description: Use the Domains endpoints to create and manage domains and domain records on your account.
  - name: Images
    description: 'Use the Images endpoints to capture, store, and manage custom Linode images.'
  - name: Linode Instances
    description: 'Use the Linode Instances endpoints to create, configure, and manage your Linode instances. You can also manage the Linode Backup service; maintain and manage configuration profiles; create and maintain disks, intiate a host migration; view Linode Instance statistics; and more.'
  - name: Linode Types
    description: 'Use the Linode Types endpoints to retrieve information about Linode plan types, including pricing information, hardware resources, and network transfer allotment.'
  - name: Linode Kubernetes Engine (LKE)
    description: Linode Kubernetes Engine (LKE) is Linode's managed Kubernetes service. Use the LKE endpoints to create and manage Kubernetes clusters and their associated Node Pools.
  - name: Longview
    description: Longview is Linode's system-level monitoring and graphing service. Use the Longview endpoints to manage your Longview subscription and plan and to create and maintain Longview clients.
  - name: Managed
    description: 'Managed is Linode''s incident response service. Use the Managed endpoints to register a service to be monitored by the Managed Service team, provide secure access to your managed services,  view information about detected issues, and more.'
  - name: Networking
    description: 'Use the Networking endpoints to view all IP addresses on your account, reorganize assigned IPv4 addresses, update RDNS, and configure IP sharing.'
  - name: NodeBalancers
    description: 'NodeBalancers is Linode''s load balancing service. Use the NodeBalancers endpoints to create and manage NodeBalancers. You can also create and maintain configurations; create and maintain nodes, and view statistics.'
  - name: Object Storage
    description: 'Object Storage is Linode''s S3-compatible data storage service. Use the Object Storage endpoints to create and maintaining buckets, add and remove objects from buckets, create and maintain Object Storage keys, and cancel the Object Storage service.'
  - name: Profile
    description: 'Use the Profile endpoints to manage your Linode user profile preferences and security settings. This includes creating and maintaining personal access tokens, creating and maintaining SSH keys, confirming and enabling two-factor authentication, and updating user and profile preferences.'
  - name: Regions
    description: 'Use the Regions endpoints to view information about the various Linode data center regions, including the service capabilities for each region, country, status, and more.'
  - name: StackScripts
    description: Linode StackScripts allow you to create reusable scripts to configure new Linode instances. Use the StackScripts endpoints to create and manage StackScripts on your account.
  - name: Support
    description: 'Use the Support endpoints to open, view, and close Linode Support tickets. You can also create and manage your Support ticket replies.'
  - name: Tags
    description: 'Tags allow you to organize and group your various Linode services. Use the Tags endpoints to create, assign, and delete your account tags.'
  - name: Volumes
    description: 'Volumes is Linode''s block storage service. Use the Volumes endpoints to create, attach, and manage your account Volumes.'
components:
  schemas:
    Domain:
      type: object
      description: |
        A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.
      properties:
        id:
          type: integer
          description: This Domain's unique ID
          example: 1234
          readOnly: true
          x-linode-cli-display: 1
        type:
          type: string
          enum:
            - master
            - slave
          description: |
            Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").
          example: master
          x-linode-cli-display: 3
        domain:
          type: string
          pattern: '\A(\*\.)?([a-zA-Z0-9-_]{1,63}\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|xn--[a-zA-Z0-9]+)\Z'
          minLength: 1
          maxLength: 253
          description: |
            The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
          example: example.org
          x-linode-filterable: true
          x-linode-cli-display: 2
        group:
          deprecated: true
          type: string
          description: |
            The group this Domain belongs to.  This is for display purposes only.
          example: null
          minLength: 1
          maxLength: 50
          x-linode-filterable: true
        status:
          type: string
          enum:
            - disabled
            - active
          default: active
          description: |
            Used to control whether this Domain is currently being rendered.
          example: active
          x-linode-cli-display: 4
          x-linode-cli-color:
            active: green
            disabled: yellow
            edit_mode: yellow
            default_: red
        description:
          type: string
          minLength: 1
          maxLength: 253
          description: |
            A description for this Domain. This is for display purposes only.
          example: null
        soa_email:
          type: string
          format: email
          description: |
            Start of Authority email address. This is required for `type` master Domains.
          example: admin@example.org
          x-linode-cli-display: 5
        retry_sec:
          type: integer
          default: 0
          description: |
            The interval, in seconds, at which a failed refresh should be retried.

            * Valid values are
            0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

            * Any other value is rounded up to the nearest valid value.

            * A value of 0 is equivalent to the default value of 14400.
          example: 300
        master_ips:
          type: array
          items:
            type: string
            format: ip
          description: |
            The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
          example: []
        axfr_ips:
          type: array
          items:
            type: string
            format: ip
          description: |
            The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.

            **Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.
          example: []
        expire_sec:
          type: integer
          default: 0
          description: |
            The amount of time in seconds that may pass before this Domain is no longer
            authoritative.

            * Valid values are
            0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

            * Any other value is rounded up to the nearest valid value.

            * A value of 0 is equivalent to the default value of 1209600.
          example: 300
        refresh_sec:
          type: integer
          default: 0
          description: |
            The amount of time in seconds before this Domain should be refreshed.

            * Valid values are
            0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.

            * Any other value is rounded up to the nearest valid value.

            * A value of 0 is equivalent to the default value of 14400.
          example: 300
        ttl_sec:
          type: integer
          default: 0
          description: |
            "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
            * Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.
            * Any other value is rounded up to the nearest valid value.
            * A value of 0 is equivalent to the default value of 86400.
          example: 300
        tags:
          x-linode-filterable: true
          description: |
            An array of tags applied to this object.  Tags are for organizational purposes only.
          type: array
          items:
            type: string
          example:
            - example tag
            - another example
    PaginationEnvelope:
      type: object
      description: |
        An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.
      properties:
        pages:
          type: integer
          readOnly: true
          description: 'The total number of [pages](/docs/api/#pagination).'
          example: 1
        page:
          type: integer
          readOnly: true
          description: 'The current [page](/docs/api/#pagination).'
          example: 1
        results:
          type: integer
          readOnly: true
          description: The total number of results.
          example: 1
    ErrorObject:
      type: object
      description: |
        An object for describing a single error that occurred during the processing of a request.
      properties:
        reason:
          type: string
          description: |
            What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
          example: fieldname must be a valid value
        field:
          type: string
          description: |
            The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
          example: fieldname
    DomainRecord:
      type: object
      description: |
        A single record on a Domain.
      properties:
        id:
          type: integer
          description: This Record's unique ID.
          example: 123456
          readOnly: true
          x-linode-cli-display: 1
        type:
          type: string
          enum:
            - A
            - AAAA
            - NS
            - MX
            - CNAME
            - TXT
            - SRV
            - PTR
            - CAA
          description: |
            The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).
          example: A
          x-linode-filterable: true
          x-linode-cli-display: 2
        name:
          type: string
          description: |
            The name of this Record. For requests, this property's actual usage and whether it is required depends
            on the type of record this represents:

            `A` and `AAAA`: The hostname or FQDN of the Record.

            `NS`: The subdomain, if any, to use with the Domain of the Record. Wildcard NS records (`*`) are not supported.

            `MX`: The mail subdomain. For example, `sub` for the address `user@sub.example.com` under the `example.com`
            Domain. Must be an empty string (`""`) for a Null MX Record.

            `CNAME`: The hostname. Must be unique. Required.

            `TXT`: The hostname.

            `SRV`: Unused. Use the `service` property to set the service name for this record.

            `CAA`: The subdomain. Omit or enter an empty string (`""`) to apply to the entire Domain.

            `PTR`: See our guide on how to [Configure Your Linode for Reverse DNS
            (rDNS)](/docs/guides/configure-rdns/).
          minLength: 1
          maxLength: 100
          example: test
          x-linode-filterable: true
          x-linode-cli-display: 3
        target:
          type: string
          description: |
            The target for this Record. For requests, this property's actual usage and whether it is required depends
            on the type of record this represents:

            `A` and `AAAA`: The IP address. Use `[remote_addr]` to submit the IPv4 address of the request. Required.

            `NS`: The name server. Must be a valid domain. Required.

            `MX`: The mail server. Must be a valid domain unless creating a Null MX Record. To create a
            [Null MX Record](https://datatracker.ietf.org/doc/html/rfc7505), first
            [remove](/docs/api/domains/#domain-record-delete) any additional MX records, create an MX record with empty strings
            (`""`) for the `target` and `name`. If a Domain has a Null MX record, new MX records cannot be created. Required.

            `CNAME`: The alias. Must be a valid domain. Required.

            `TXT`: The value. Required.

            `SRV`: The target domain or subdomain. If a subdomain is entered, it is automatically used with the Domain.
            To configure for a different domain, enter a valid FQDN. For example, the value `www` with a Domain for
            `example.com` results in a target set to `www.example.com`, whereas the value `sample.com` results in a
            target set to `sample.com`. Required.

            `CAA`: The value. For `issue` or `issuewild` tags, the domain of your certificate issuer. For the `iodef`
            tag, a contact or submission URL (domain, http, https, or mailto). Requirements depend on the tag for this record:
              * `issue`: The domain of your certificate issuer. Must be a valid domain.
              * `issuewild`: The domain of your wildcard certificate issuer. Must be a valid domain and must not start with an asterisk (`*`).
              * `iodef`: Must be either (1) a valid domain, (2) a valid domain prepended with `http://` or `https://`, or (3) a valid email address prepended with `mailto:`.

            `PTR`: Required. See our guide on how to [Configure Your Linode for Reverse DNS
            (rDNS)](/docs/guides/configure-rdns/).

            With the exception of A, AAAA, and CAA records, this field accepts a trailing period.
          example: 192.0.2.0
          x-linode-filterable: true
          x-linode-cli-display: 4
          maxLength: 65535
        priority:
          type: integer
          minimum: 0
          maximum: 255
          description: |
            The priority of the target host for this Record. Lower values are preferred. Only valid for
            MX and SRV record requests. Required for SRV record requests.

            Defaults to `0` for MX record requests. Must be `0` for Null MX records.
          example: 50
          x-linode-cli-display: 6
        weight:
          type: integer
          description: |
            The relative weight of this Record used in the case of identical priority. Higher values are preferred. Only valid and required for SRV record requests.
          example: 50
          minimum: 0
          maximum: 65535
          x-linode-cli-display: 7
        port:
          type: integer
          description: |
            The port this Record points to. Only valid and required for SRV record requests.
          example: 80
          minimum: 0
          maximum: 65535
        service:
          type: string
          nullable: true
          description: |
            The name of the service. An underscore (`_`) is prepended and a period (`.`) is appended automatically to the submitted value for this property. Only valid and required for SRV record requests.
          example: null
        protocol:
          type: string
          nullable: true
          description: |
            The protocol this Record's service communicates with. An underscore (`_`) is prepended automatically to the submitted value for this property. Only valid for SRV record requests.
          example: null
        ttl_sec:
          type: integer
          description: |
            "Time to Live" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
          example: 604800
          x-linode-cli-display: 5
        tag:
          type: string
          enum:
            - issue
            - issuewild
            - iodef
          nullable: true
          description: |
            The tag portion of a CAA record. Only valid and required for CAA record requests.
          example: null
          x-linode-filterable: true
        created:
          type: string
          format: date-time
          description: When this Domain Record was created.
          example: '2018-01-01T00:01:01'
          readOnly: true
        updated:
          type: string
          format: date-time
          description: When this Domain Record was last updated.
          example: '2018-01-01T00:01:01'
          readOnly: true
  parameters:
    pageOffset:
      name: page
      in: query
      description: The page of a collection to return.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page_size
      in: query
      description: The number of items to return per page.
      schema:
        type: integer
        minimum: 25
        maximum: 500
        default: 100
  responses:
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorObject'
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://login.linode.com/oauth/authorize'
          tokenUrl: 'https://login.linode.com/oauth/token'
          scopes:
            'account:read_only': Allows access to GET information about your Account.
            'account:read_write': Allows access to all endpoints related to your Account.
            'domains:read_only': Allows access to GET Domains on your Account.
            'domains:read_write': Allows access to all Domain endpoints.
            'events:read_only': Allows access to GET your Events.
            'events:read_write': Allows access to all endpoints related to your Events.
            'firewall:read_only': Allows access to GET information about your Firewalls.
            'firewall:read_write': Allows acces to all Firewall endpoints.
            'images:read_only': Allows access to GET your Images.
            'images:read_write': Allows access to all endpoints related to your Images.
            'ips:read_only': Allows access to GET your ips.
            'ips:read_write': Allows access to all endpoints related to your ips.
            'linodes:read_only': Allows access to GET Linodes on your Account.
            'linodes:read_write': Allow access to all endpoints related to your Linodes.
            'lke:read_only': Allows access to GET LKE Clusters on your Account.
            'lke:read_write': Allows access to all endpoints related to LKE Clusters on your Account.
            'longview:read_only': Allows access to GET your Longview Clients.
            'longview:read_write': Allows access to all endpoints related to your Longview Clients.
            'nodebalancers:read_only': Allows access to GET NodeBalancers on your Account.
            'nodebalancers:read_write': Allows access to all NodeBalancer endpoints.
            'object_storage:read_only': Allows access to GET information related to your Object Storage.
            'object_storage:read_write': Allows access to all Object Storage endpoints.
            'stackscripts:read_only': Allows access to GET your StackScripts.
            'stackscripts:read_write': Allows access to all endpoints related to your StackScripts.
            'volumes:read_only': Allows access to GET your Volumes.
            'volumes:read_write': Allows access to all endpoints related to your Volumes.
  links:
    bootLinode:
      operationId: bootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebootLinode:
      operationId: rebootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    shutdownLinode:
      operationId: shutdownLinodeInstance
      parameters:
        linodeId: $request.body#/id
    updateLinode:
      operationId: updateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    deleteLinode:
      operationId: deleteLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebuildLinode:
      operationId: rebuildLinodeInstance
      parameters:
        linodeId: $request.body#/id
    mutateLinode:
      operationId: mutateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    resizeLinode:
      operationId: resizeLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rescueLinode:
      operationId: rescueLinodeInstance
      parameters:
        linodeId: $request.body#/id
    cloneLinode:
      operationId: cloneLinodeInstance
      parameters:
        linodeId: $request.body#/id
    attachVolume:
      operationId: attachVolume
      parameters:
        volumeID: $request.body#/id
    cloneVolume:
      operationId: cloneVolume
      parameters:
        volumeId: $request.body#/id
    detachVolume:
      operationId: detachVolume
      parameters:
        volumeId: $request.body#/id
    resizeVolume:
      operationId: resizeVolume
      parameters:
        volumeId: $request.body#/id
  x-stackQL-resources:
    domains:
      id: linode.domains.domains
      name: domains
      title: Domains
      methods:
        getDomains:
          operation:
            $ref: '#/paths/~1domains/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDomains:
          operation:
            $ref: '#/paths/~1domains/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createDomain:
          operation:
            $ref: '#/paths/~1domains/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDomain:
          operation:
            $ref: '#/paths/~1domains~1{domainId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDomain:
          operation:
            $ref: '#/paths/~1domains~1{domainId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateDomain:
          operation:
            $ref: '#/paths/~1domains~1{domainId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteDomain:
          operation:
            $ref: '#/paths/~1domains~1{domainId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        importDomain:
          operation:
            $ref: '#/paths/~1domains~1import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cloneDomain:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1clone/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/domains/methods/getDomains'
          - $ref: '#/components/x-stackQL-resources/domains/methods/getDomain'
        insert:
          - $ref: '#/components/x-stackQL-resources/domains/methods/createDomain'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/domains/methods/deleteDomain'
    zone_file:
      id: linode.domains.zone_file
      name: zone_file
      title: Zone File
      methods:
        getDomainZone:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1zone-file/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getDomainZone:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1zone-file/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/zone_file/methods/getDomainZone'
        insert: []
        update: []
        delete: []
    records:
      id: linode.domains.records
      name: records
      title: Records
      methods:
        getDomainRecords:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1records/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDomainRecords:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1records/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createDomainRecord:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1records/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDomainRecord:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1records~1{recordId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDomainRecord:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1records~1{recordId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateDomainRecord:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1records~1{recordId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteDomainRecord:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1records~1{recordId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/records/methods/getDomainRecords'
          - $ref: '#/components/x-stackQL-resources/records/methods/getDomainRecord'
        insert:
          - $ref: '#/components/x-stackQL-resources/records/methods/createDomainRecord'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/records/methods/deleteDomainRecord'
paths:
  /domains:
    get:
      x-linode-grant: read_only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - Domains
      summary: Domains List
      description: |
        This is a collection of Domains that you have registered in Linode's DNS Manager.  Linode is not a registrar, and in order for these to work you must own the domains and point your registrar at Linode's nameservers.
      operationId: getDomains
      x-linode-cli-action:
        - list
        - ls
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_only'
      responses:
        '200':
          description: A paginated list of Domains you have registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Domain'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/domains
        - lang: CLI
          source: |
            linode-cli domains list
    post:
      x-linode-grant: add_domains
      tags:
        - Domains
      summary: Domain Create
      description: |
        Adds a new Domain to Linode's DNS Manager. Linode is not a registrar, and you must own the domain before adding it here. Be sure to point your registrar to Linode's nameservers so that the records hosted here are used.
      operationId: createDomain
      x-linode-cli-action: create
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_write'
      requestBody:
        description: Information about the domain you are registering.
        required: true
        content:
          application/json:
            schema:
              required:
                - domain
                - type
              allOf:
                - $ref: '#/components/schemas/Domain'
      responses:
        '200':
          description: |
            Domain added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                    "domain": "example.com",
                    "type": "master",
                    "soa_email": "admin@example.com",
                    "description": "Example Description",
                    "refresh_sec": 14400,
                    "retry_sec": 3600,
                    "expire_sec": 604800,
                    "ttl_sec": 3600,
                    "status": "active",
                    "master_ips": ["127.0.0.1","255.255.255.1","123.123.123.7"],
                    "axfr_ips": ["44.55.66.77"],
                    "group": "Example Display Group",
                    "tags": ["tag1","tag2"]
                }' \
                https://api.linode.com/v4/domains
        - lang: CLI
          source: |
            linode-cli domains create \
              --type master \
              --domain example.org \
              --soa_email admin@example.org
  '/domains/{domainId}':
    get:
      x-linode-grant: read_only
      tags:
        - Domains
      summary: Domain View
      description: |
        This is a single Domain that you have registered in Linode's DNS Manager. Linode is not a registrar, and in order for this Domain record to work you must own the domain and point your registrar at Linode's nameservers.
      operationId: getDomain
      x-linode-cli-action: view
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_only'
      responses:
        '200':
          description: |
            A single Domain in Linode's DNS Manager.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/domains/123
        - lang: CLI
          source: |
            linode-cli domains view 123
      parameters:
        - name: domainId
          in: path
          description: The ID of the Domain to access.
          required: true
          schema:
            type: integer
    put:
      x-linode-grant: read_write
      tags:
        - Domains
      summary: Domain Update
      description: |
        Update information about a Domain in Linode's DNS Manager.
      operationId: updateDomain
      x-linode-cli-action: update
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_write'
      requestBody:
        description: The Domain information to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
      responses:
        '200':
          description: Domain update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                    "domain": "example.com",
                    "type": "master",
                    "soa_email": "admin@example.com",
                    "description": "Example Description",
                    "refresh_sec": 14400,
                    "retry_sec": 3600,
                    "expire_sec": 604800,
                    "ttl_sec": 3600,
                    "status": "active",
                    "master_ips": ["127.0.0.1","255.255.255.1","123.123.123.7"],
                    "axfr_ips": ["44.55.66.77"],
                    "group": "Example Display Group",
                    "tags": ["tag1","tag2"]
                }' \
                https://api.linode.com/v4/domains/123
        - lang: CLI
          source: |
            linode-cli domains update 1234 \
              --retry_sec 7200 \
              --ttl_sec 300
      parameters:
        - name: domainId
          in: path
          description: The ID of the Domain to access.
          required: true
          schema:
            type: integer
    delete:
      x-linode-grant: read_write
      tags:
        - Domains
      summary: Domain Delete
      description: |
        Deletes a Domain from Linode's DNS Manager. The Domain will be removed from Linode's nameservers shortly after this operation completes. This also deletes all associated Domain Records.
      operationId: deleteDomain
      x-linode-cli-action:
        - delete
        - rm
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_write'
      responses:
        '200':
          description: Domain deleted successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/domains/1234
        - lang: CLI
          source: |
            linode-cli domains delete 1234
      parameters:
        - name: domainId
          in: path
          description: The ID of the Domain to access.
          required: true
          schema:
            type: integer
  '/domains/{domainId}/zone-file':
    get:
      x-linode-grant: read_only
      tags:
        - Domains
      summary: Domain Zone File View
      description: |
        Returns the zone file for the last rendered zone for the specified domain.
      operationId: getDomainZone
      x-linode-cli-action: zone-file
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_only'
      responses:
        '200':
          description: |
            An array containing the lines of the domain zone file.
          content:
            application/json:
              schema:
                properties:
                  zone_file:
                    type: array
                    items:
                      type: string
                    example:
                      - '; example.com [123]'
                      - $TTL 864000
                      - '@  IN  SOA  ns1.linode.com. user.example.com. 2021000066 14400 14400 1209600 86400'
                      - '@    NS  ns1.linode.com.'
                      - '@    NS  ns2.linode.com.'
                      - '@    NS  ns3.linode.com.'
                      - '@    NS  ns4.linode.com.'
                      - '@    NS  ns5.linode.com.'
                    description: |
                      The lines of the zone file for the last rendered zone for this domain.
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
              https://api.linode.com/v4/domains/123/zone-file
        - lang: CLI
          source: |
            linode-cli domains zone-file 123
      parameters:
        - name: domainId
          in: path
          description: ID of the Domain.
          required: true
          schema:
            type: string
  /domains/import:
    post:
      x-linode-grant: read_write
      x-linode-cli-command: domains
      tags:
        - Domains
      summary: Domain Import
      description: |
        Imports a domain zone from a remote nameserver.
        Your nameserver must allow zone transfers (AXFR) from the following IPs:

          - 96.126.114.97
          - 96.126.114.98
          - 2600:3c00::5e
          - 2600:3c00::5f
      operationId: importDomain
      x-linode-cli-action: import
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_write'
      requestBody:
        description: Information about the Domain to import.
        content:
          application/json:
            schema:
              required:
                - domain
                - remote_nameserver
              properties:
                domain:
                  type: string
                  description: |
                    The domain to import.
                  example: example.com
                remote_nameserver:
                  type: string
                  description: |
                    The remote nameserver that allows zone transfers (AXFR).
                  example: examplenameserver.com
      responses:
        '200':
          description: |
            A single Domain in Linode's DNS Manager.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "domain": "example.com",
                  "remote_nameserver": "examplenameserver.com"
                }' \
                https://api.linode.com/v4/domains/import
        - lang: CLI
          source: |
            linode-cli domains import --domain example.com --remote_nameserver examplenameserver.com
  '/domains/{domainId}/clone':
    post:
      x-linode-grant: read_write
      tags:
        - Domains
      summary: Domain Clone
      description: |
        Clones a Domain and all associated DNS records from a Domain that is registered in Linode's DNS manager.
      operationId: cloneDomain
      x-linode-cli-action: clone
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_write'
      requestBody:
        description: Information about the Domain to clone.
        required: true
        content:
          application/json:
            schema:
              required:
                - domain
              type: object
              properties:
                domain:
                  type: string
                  pattern: '\A(\*\.)?([a-zA-Z0-9-_]{1,63}\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|xn--[a-zA-Z0-9]+)\Z'
                  minLength: 1
                  maxLength: 253
                  description: |
                    The new domain for the clone. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
                  example: example.org
                  x-linode-filterable: true
      responses:
        '200':
          description: |
            A new Domain in Linode's DNS Manager, based on a cloned Domain.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
              -H "Authorization: Bearer $TOKEN" \
              -X POST -d '{
              "domain": "example.com"
            }' \ https://api.linode.com/v4/domains/123/clone
        - lang: CLI
          source: |
            linode-cli domains clone 123 --domain example.com
      parameters:
        - name: domainId
          in: path
          description: ID of the Domain to clone.
          required: true
          schema:
            type: string
  '/domains/{domainId}/records':
    get:
      x-linode-grant: read_only
      tags:
        - Domains
      parameters:
        - name: domainId
          in: path
          description: The ID of the Domain we are accessing Records for.
          required: true
          schema:
            type: integer
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_only'
      summary: Domain Records List
      description: |
        Returns a paginated list of Records configured on a Domain in Linode's
        DNS Manager.
      operationId: getDomainRecords
      x-linode-cli-action: records-list
      responses:
        '200':
          description: A list of Domain Records.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DomainRecord'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/domains/1234/records
        - lang: CLI
          source: |
            linode-cli domains records-list 1234
    post:
      x-linode-grant: read_write
      tags:
        - Domains
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_write'
      summary: Domain Record Create
      description: |
        Adds a new Domain Record to the zonefile this Domain represents.

        Each domain can have up to 12,000 active records.
      operationId: createDomainRecord
      x-linode-cli-action: records-create
      requestBody:
        description: |
          Information about the new Record to add.
        required: true
        content:
          application/json:
            schema:
              required:
                - type
              allOf:
                - $ref: '#/components/schemas/DomainRecord'
      responses:
        '200':
          description: Domain Record created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRecord'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "type": "A",
                  "name": "test",
                  "target": "203.0.113.1",
                  "priority": 50,
                  "weight": 50,
                  "port": 80,
                  "service": null,
                  "protocol": null,
                  "ttl_sec": 604800
                }' \
                https://api.linode.com/v4/domains/123/records
        - lang: CLI
          source: |
            linode-cli domains records-create 123 \
              --type A \
              --name test \
              --target 203.0.113.1 \
              --priority 50 \
              --weight 50 \
              --port 80 \
              --ttl_sec 604800
      parameters:
        - name: domainId
          in: path
          description: The ID of the Domain we are accessing Records for.
          required: true
          schema:
            type: integer
  '/domains/{domainId}/records/{recordId}':
    get:
      x-linode-grant: read_only
      tags:
        - Domains
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_only'
      summary: Domain Record View
      description: |
        View a single Record on this Domain.
      operationId: getDomainRecord
      x-linode-cli-action: records-view
      responses:
        '200':
          description: A Domain Record object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRecord'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/domains/123/records/234
        - lang: CLI
          source: |
            linode-cli domains records-view 123 234
      parameters:
        - name: domainId
          in: path
          description: The ID of the Domain whose Record you are accessing.
          required: true
          schema:
            type: integer
        - name: recordId
          in: path
          description: The ID of the Record you are accessing.
          required: true
          schema:
            type: integer
    put:
      x-linode-grant: read_write
      tags:
        - Domains
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_write'
      summary: Domain Record Update
      description: |
        Updates a single Record on this Domain.
      operationId: updateDomainRecord
      x-linode-cli-action: records-update
      requestBody:
        description: The values to change.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: A Domain Record Update request object.
              properties:
                name:
                  $ref: '#/components/schemas/DomainRecord/properties/name'
                target:
                  $ref: '#/components/schemas/DomainRecord/properties/target'
                priority:
                  $ref: '#/components/schemas/DomainRecord/properties/priority'
                weight:
                  $ref: '#/components/schemas/DomainRecord/properties/weight'
                port:
                  $ref: '#/components/schemas/DomainRecord/properties/port'
                service:
                  $ref: '#/components/schemas/DomainRecord/properties/service'
                protocol:
                  $ref: '#/components/schemas/DomainRecord/properties/protocol'
                ttl_sec:
                  $ref: '#/components/schemas/DomainRecord/properties/ttl_sec'
                tag:
                  $ref: '#/components/schemas/DomainRecord/properties/tag'
      responses:
        '200':
          description: Domain Record updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRecord'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                  "name": "test",
                  "target": "203.0.113.1",
                  "priority": 50,
                  "weight": 50,
                  "port": 80,
                  "service": null,
                  "protocol": null,
                  "ttl_sec": 604800,
                  "tag": null
                }' \
                https://api.linode.com/v4/domains/123/records/234
        - lang: CLI
          source: |
            linode-cli domains records-update 123 234 \
              --name test \
              --target 203.0.113.1 \
              --priority 50 \
              --weight 50 \
              --port 80 \
              --ttl_sec 604800
      parameters:
        - name: domainId
          in: path
          description: The ID of the Domain whose Record you are accessing.
          required: true
          schema:
            type: integer
        - name: recordId
          in: path
          description: The ID of the Record you are accessing.
          required: true
          schema:
            type: integer
    delete:
      x-linode-grant: read_write
      tags:
        - Domains
      security:
        - personalAccessToken: []
        - oauth:
            - 'domains:read_write'
      summary: Domain Record Delete
      description: |
        Deletes a Record on this Domain.
      operationId: deleteDomainRecord
      x-linode-cli-action: records-delete
      responses:
        '200':
          description: Record deleted successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/domains/123/records/234
        - lang: CLI
          source: |
            linode-cli domains records-delete 123 234
      parameters:
        - name: domainId
          in: path
          description: The ID of the Domain whose Record you are accessing.
          required: true
          schema:
            type: integer
        - name: recordId
          in: path
          description: The ID of the Record you are accessing.
          required: true
          schema:
            type: integer
