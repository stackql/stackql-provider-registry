openapi: 3.0.1
servers:
  - url: 'https://api.linode.com/v4'
  - url: 'https://api.linode.com/v4beta'
info:
  version: 4.147.0
  title: Linode API - databases
  description: databases
  contact:
    name: Linode
    url: 'https://linode.com'
    email: support@linode.com
tags:
  - name: Account
    description: 'Use the Account endpoints to manage user settings, billing, and payments. You can also initiate and maintain OAuth client application authentication, enable the Linode Managed service, and create new users on your account.'
  - name: Databases
    description: 'Managed Databases is Linode''s fully-managed, high-performance database service. Use the Managed Databases endpoints to create and manage database clusters.'
  - name: Domains
    description: Use the Domains endpoints to create and manage domains and domain records on your account.
  - name: Images
    description: 'Use the Images endpoints to capture, store, and manage custom Linode images.'
  - name: Linode Instances
    description: 'Use the Linode Instances endpoints to create, configure, and manage your Linode instances. You can also manage the Linode Backup service; maintain and manage configuration profiles; create and maintain disks, intiate a host migration; view Linode Instance statistics; and more.'
  - name: Linode Types
    description: 'Use the Linode Types endpoints to retrieve information about Linode plan types, including pricing information, hardware resources, and network transfer allotment.'
  - name: Linode Kubernetes Engine (LKE)
    description: Linode Kubernetes Engine (LKE) is Linode's managed Kubernetes service. Use the LKE endpoints to create and manage Kubernetes clusters and their associated Node Pools.
  - name: Longview
    description: Longview is Linode's system-level monitoring and graphing service. Use the Longview endpoints to manage your Longview subscription and plan and to create and maintain Longview clients.
  - name: Managed
    description: 'Managed is Linode''s incident response service. Use the Managed endpoints to register a service to be monitored by the Managed Service team, provide secure access to your managed services,  view information about detected issues, and more.'
  - name: Networking
    description: 'Use the Networking endpoints to view all IP addresses on your account, reorganize assigned IPv4 addresses, update RDNS, and configure IP sharing.'
  - name: NodeBalancers
    description: 'NodeBalancers is Linode''s load balancing service. Use the NodeBalancers endpoints to create and manage NodeBalancers. You can also create and maintain configurations; create and maintain nodes, and view statistics.'
  - name: Object Storage
    description: 'Object Storage is Linode''s S3-compatible data storage service. Use the Object Storage endpoints to create and maintaining buckets, add and remove objects from buckets, create and maintain Object Storage keys, and cancel the Object Storage service.'
  - name: Profile
    description: 'Use the Profile endpoints to manage your Linode user profile preferences and security settings. This includes creating and maintaining personal access tokens, creating and maintaining SSH keys, confirming and enabling two-factor authentication, and updating user and profile preferences.'
  - name: Regions
    description: 'Use the Regions endpoints to view information about the various Linode data center regions, including the service capabilities for each region, country, status, and more.'
  - name: StackScripts
    description: Linode StackScripts allow you to create reusable scripts to configure new Linode instances. Use the StackScripts endpoints to create and manage StackScripts on your account.
  - name: Support
    description: 'Use the Support endpoints to open, view, and close Linode Support tickets. You can also create and manage your Support ticket replies.'
  - name: Tags
    description: 'Tags allow you to organize and group your various Linode services. Use the Tags endpoints to create, assign, and delete your account tags.'
  - name: Volumes
    description: 'Volumes is Linode''s block storage service. Use the Volumes endpoints to create, attach, and manage your account Volumes.'
components:
  schemas:
    PaginationEnvelope:
      type: object
      description: |
        An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.
      properties:
        pages:
          type: integer
          readOnly: true
          description: 'The total number of [pages](/docs/api/#pagination).'
          example: 1
        page:
          type: integer
          readOnly: true
          description: 'The current [page](/docs/api/#pagination).'
          example: 1
        results:
          type: integer
          readOnly: true
          description: The total number of results.
          example: 1
    DatabaseEngine:
      type: object
      description: Managed Database engine object.
      properties:
        id:
          type: string
          example: mysql/8.0.26
          description: The Managed Database engine ID in engine/version format.
          x-linode-cli-display: 1
        engine:
          type: string
          example: mysql
          description: The Managed Database engine type.
          x-linode-filterable: true
          x-linode-cli-display: 2
        version:
          type: string
          example: 8.0.26
          description: The Managed Database engine version.
          x-linode-filterable: true
          x-linode-cli-display: 3
    ErrorObject:
      type: object
      description: |
        An object for describing a single error that occurred during the processing of a request.
      properties:
        reason:
          type: string
          description: |
            What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
          example: fieldname must be a valid value
        field:
          type: string
          description: |
            The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
          example: fieldname
    Database:
      type: object
      description: A general Managed Database instance object containing properties that are identical for all database types.
      properties:
        id:
          type: integer
          description: A unique ID that can be used to identify and reference the Managed Database.
          example: 123
          x-linode-cli-display: 1
          readOnly: true
        label:
          type: string
          maxLength: 32
          minLength: 3
          x-linode-filterable: true
          example: example-db
          description: 'A unique, user-defined string referring to the Managed Database.'
          x-linode-cli-display: 2
        type:
          type: string
          description: The Linode Instance type used by the Managed Database for its nodes.
          example: g6-dedicated-2
          x-linode-filterable: true
          x-linode-cli-display: 4
        engine:
          type: string
          enum:
            - mongodb
            - mysql
            - postgresql
          description: The Managed Database engine type.
          example: mysql
          x-linode-filterable: true
          x-linode-cli-display: 6
          readOnly: true
        version:
          type: string
          description: The Managed Database engine version.
          example: 8.0.26
          x-linode-filterable: true
          x-linode-cli-display: 7
          readOnly: true
        region:
          type: string
          description: 'The [Region](/docs/api/regions/) ID for the Managed Database.'
          example: us-east
          x-linode-filterable: true
          x-linode-cli-display: 3
        status:
          type: string
          enum:
            - provisioning
            - active
            - suspending
            - suspended
            - resuming
            - restoring
            - failed
            - degraded
            - updating
            - backing_up
          description: The operating status of the Managed Database.
          example: active
          x-linode-filterable: true
          x-linode-cli-display: 100
          x-linode-cli-color:
            provisioning: yellow
            active: green
            resuming: yellow
            restoring: yellow
            failed: red
            degraded: red
            updating: yellow
            default_: white
          readOnly: true
        encrypted:
          type: boolean
          default: false
          description: Whether the Managed Databases is encrypted.
          example: false
        allow_list:
          type: array
          example:
            - 203.0.113.1/32
            - 192.0.1.0/24
          description: |
            A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.

            By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.

            If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
          items:
            type: string
            format: ipv4/prefix_length
            pattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
        cluster_size:
          type: integer
          enum:
            - 1
            - 3
          example: 3
          default: 1
          description: |
            The number of Linode Instance nodes deployed to the Managed Database.

            Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
          x-linode-cli-display: 5
        hosts:
          type: object
          readOnly: true
          description: The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
          properties:
            primary:
              type: string
              description: The primary host for the Managed Database.
              example: lin-123-456-mysql-mysql-primary.servers.linodedb.net
              nullable: true
            secondary:
              type: string
              description: |
                The secondary/private network host for the Managed Database.

                A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

                **Note**: The secondary hostname is publicly viewable and accessible.
              example: lin-123-456-mysql-primary-private.servers.linodedb.net
              nullable: true
        created:
          type: string
          format: date-time
          description: When this Managed Database was created.
          example: '2022-01-01T00:01:01'
          readOnly: true
        updated:
          type: string
          format: date-time
          description: When this Managed Database was last updated.
          example: '2022-01-01T00:01:01'
          readOnly: true
        updates:
          type: object
          description: Configuration settings for automated patch update maintenance for the Managed Database.
          properties:
            frequency:
              type: string
              default: weekly
              enum:
                - weekly
                - monthly
              description: Whether maintenance occurs on a weekly or monthly basis.
              example: weekly
            duration:
              type: integer
              minimum: 1
              maximum: 3
              description: The maximum maintenance window time in hours.
              example: 3
            hour_of_day:
              type: integer
              minimum: 0
              maximum: 23
              description: The hour to begin maintenance based in UTC time.
              example: 0
            day_of_week:
              type: integer
              minimum: 1
              maximum: 7
              description: 'The day to perform maintenance. 1=Monday, 2=Tuesday, etc.'
              example: 1
            week_of_month:
              type: integer
              minimum: 1
              maximum: 4
              nullable: true
              description: |
                The week of the month to perform `monthly` frequency updates. Defaults to `null`.

                * Required for `monthly` frequency updates.

                * Must be `null` for `weekly` frequency updates.
              example: null
        instance_uri:
          type: string
          example: /v4/databases/mysql/instances/123
          description: |
            Append this to `https://api.linode.com` to run commands for the Managed Database.
          readOnly: true
    DatabaseMongoDB:
      type: object
      description: Managed MongoDB Databases object.
      properties:
        id:
          $ref: '#/components/schemas/Database/properties/id'
          x-linode-cli-display: 1
        label:
          $ref: '#/components/schemas/Database/properties/label'
          x-linode-cli-display: 2
        type:
          $ref: '#/components/schemas/Database/properties/type'
          x-linode-cli-display: 4
        engine:
          type: string
          description: The Managed Database engine type.
          example: mongodb
          x-linode-filterable: true
          x-linode-cli-display: 6
          readOnly: true
        version:
          type: string
          description: The Managed Database engine version.
          example: 4.4.10
          x-linode-filterable: true
          x-linode-cli-display: 7
          readOnly: true
        region:
          $ref: '#/components/schemas/Database/properties/region'
          x-linode-cli-display: 3
        status:
          $ref: '#/components/schemas/Database/properties/status'
          x-linode-cli-display: 100
          x-linode-cli-color:
            provisioning: yellow
            active: green
            resuming: yellow
            restoring: yellow
            failed: red
            degraded: red
            default_: white
        encrypted:
          $ref: '#/components/schemas/Database/properties/encrypted'
        allow_list:
          $ref: '#/components/schemas/Database/properties/allow_list'
        cluster_size:
          $ref: '#/components/schemas/Database/properties/cluster_size'
          x-linode-cli-display: 5
        hosts:
          type: object
          readOnly: true
          description: The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
          properties:
            primary:
              type: string
              description: The primary host for the Managed Database.
              example: lin-0000-0000.servers.linodedb.net
              nullable: true
            secondary:
              type: string
              description: |
                The secondary/private network host for the Managed Database.

                A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

                **Note**: The secondary hostname is publicly viewable and accessible.
              example: null
              nullable: true
        peers:
          type: array
          description: |
            An array of peer addresses for this Database.
          items:
            type: string
            description: |
              The peer address of a Managed MongoDB Database cluster node. Each node in a cluster has its own unique peer address.
          example:
            - lin-0000-0000.servers.linodedb.net
            - lin-0000-0001.servers.linodedb.net
            - lin-0000-0002.servers.linodedb.net
        replica_set:
          nullable: true
          default: null
          type: string
          maxLength: 64
          description: |
            Label for configuring a MongoDB [replica set](https://www.mongodb.com/docs/manual/replication/). Choose the same label on multiple Databases to include them in the same replica set.

            If `null`, the Database is not included in any replica set.
          example: null
        ssl_connection:
          type: boolean
          default: true
          example: true
          description: |
            Whether to require SSL credentials to establish a connection to the Managed Database.

            Use the **Managed MongoDB Database Credentials View** ([GET /databases/mongodb/instances/{instanceId}/credentials](/docs/api/databases/#managed-mongodb-database-credentials-view)) command for access information.
        compression_type:
          type: string
          enum:
            - none
            - snappy
            - zlip
          default: none
          example: none
          description: |
            The type of data compression for this Database.

            Snappy has a lower comparative compression ratio and resource consumption rate.

            Zlip has a higher comparative compression ratio and resource consumption rate.
          x-linode-cli-display: 99
        storage_engine:
          type: string
          enum:
            - mmapv1
            - wiredtiger
          default: wiredtiger
          example: wiredtiger
          description: |
            The type of storage engine for this Database.

            **Note:** MMAPV1 is not available for MongoDB versions 4.0 and above.
        port:
          type: integer
          description: The access port for this Managed Database.
          example: 27017
          x-linode-cli-display: 98
        created:
          $ref: '#/components/schemas/Database/properties/created'
        updated:
          $ref: '#/components/schemas/Database/properties/updated'
        updates:
          $ref: '#/components/schemas/Database/properties/updates'
    DatabaseMongoDBRequest:
      type: object
      description: Managed MongoDB Database request object.
      required:
        - label
        - type
        - engine
        - region
      properties:
        label:
          $ref: '#/components/schemas/DatabaseMongoDB/properties/label'
        type:
          $ref: '#/components/schemas/DatabaseMongoDB/properties/type'
        engine:
          type: string
          example: mongodb/4.4.10
          description: The Managed Database engine in engine/version format.
        region:
          $ref: '#/components/schemas/DatabaseMongoDB/properties/region'
        encrypted:
          $ref: '#/components/schemas/DatabaseMongoDB/properties/encrypted'
        allow_list:
          $ref: '#/components/schemas/DatabaseMongoDB/properties/allow_list'
        cluster_size:
          $ref: '#/components/schemas/DatabaseMongoDB/properties/cluster_size'
        replica_set:
          $ref: '#/components/schemas/DatabaseMongoDB/properties/replica_set'
        ssl_connection:
          $ref: '#/components/schemas/DatabaseMongoDB/properties/ssl_connection'
        compression_type:
          $ref: '#/components/schemas/DatabaseMongoDB/properties/compression_type'
        storage_engine:
          $ref: '#/components/schemas/DatabaseMongoDB/properties/storage_engine'
    DatabaseBackup:
      type: object
      description: A database backup object.
      properties:
        id:
          type: integer
          description: The ID of the database backup object.
          example: 123
          x-linode-cli-display: 1
        type:
          type: string
          enum:
            - snapshot
            - auto
          description: 'The type of database backup, determined by how the backup was created.'
          example: auto
          x-linode-filterable: true
          x-linode-cli-display: 3
        label:
          type: string
          maxLength: 30
          description: |
            The database backup's label, for display purposes only.

            Must include only ASCII letters or numbers.
          example: 'Scheduled - 02/04/22 11:11 UTC-XcCRmI'
          x-linode-cli-display: 2
        created:
          type: string
          format: datetime
          example: '2022-01-01T00:01:01'
          description: A time value given in a combined date and time format that represents when the database backup was created.
          x-linode-filterable: true
          x-linode-cli-display: 4
    DatabaseBackupSnapshot:
      type: object
      description: Managed Database request object for snapshot backup.
      required:
        - label
      properties:
        label:
          type: string
          minLength: 1
          maxLength: 30
          description: |
            The label for the Database snapshot backup.

            * Must include only ASCII letters or numbers.
            * Must be unique among other backup labels for this Database.
          example: db-snapshot
        target:
          type: string
          enum:
            - primary
            - secondary
          default: primary
          description: |
            The Database cluster target.
            If the Database is a high availability cluster, choosing `secondary` creates a snapshot backup of a replica node.
          example: primary
    DatabaseCredentials:
      type: object
      description: Managed Database object for database credentials.
      properties:
        username:
          type: string
          readOnly: true
          description: The root username for the Managed Database instance.
          example: linroot
          x-linode-cli-display: 1
        password:
          type: string
          readOnly: true
          description: The randomly-generated root password for the Managed Database instance.
          example: s3cur3P@ssw0rd
          x-linode-cli-display: 2
    DatabaseSSL:
      type: object
      description: Managed Database SSL object.
      properties:
        ca_certificate:
          type: string
          format: base64
          description: The base64-encoded SSL CA certificate for the Managed Database instance.
          example: LS0tLS1CRUdJ...==
          x-linode-cli-display: 1
    DatabaseMySQL:
      type: object
      description: Managed MySQL Databases object.
      properties:
        id:
          $ref: '#/components/schemas/Database/properties/id'
          x-linode-cli-display: 1
        label:
          $ref: '#/components/schemas/Database/properties/label'
          x-linode-cli-display: 2
        type:
          $ref: '#/components/schemas/Database/properties/type'
          x-linode-cli-display: 4
        engine:
          type: string
          description: The Managed Database engine type.
          example: mysql
          x-linode-filterable: true
          x-linode-cli-display: 6
          readOnly: true
        version:
          type: string
          description: The Managed Database engine version.
          example: 8.0.26
          x-linode-filterable: true
          x-linode-cli-display: 7
          readOnly: true
        region:
          $ref: '#/components/schemas/Database/properties/region'
          x-linode-cli-display: 3
        status:
          $ref: '#/components/schemas/Database/properties/status'
          x-linode-cli-display: 100
          x-linode-cli-color:
            provisioning: yellow
            active: green
            resuming: yellow
            restoring: yellow
            failed: red
            degraded: red
            default_: white
        encrypted:
          $ref: '#/components/schemas/Database/properties/encrypted'
        allow_list:
          $ref: '#/components/schemas/Database/properties/allow_list'
        cluster_size:
          $ref: '#/components/schemas/Database/properties/cluster_size'
          x-linode-cli-display: 5
        hosts:
          $ref: '#/components/schemas/Database/properties/hosts'
        ssl_connection:
          type: boolean
          default: true
          example: true
          description: |
            Whether to require SSL credentials to establish a connection to the Managed Database.

            Use the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command for access information.
        replication_type:
          type: string
          enum:
            - none
            - asynch
            - semi_synch
          example: semi_synch
          description: |
            The replication method used for the Managed Database.

            Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

            Must be `none` for a single node cluster.

            Must be `asynch` or `semi_synch` for a high availability cluster.
          x-linode-cli-display: 99
        port:
          type: integer
          description: The access port for this Managed Database.
          example: 3306
          x-linode-cli-display: 98
        created:
          $ref: '#/components/schemas/Database/properties/created'
        updated:
          $ref: '#/components/schemas/Database/properties/updated'
        updates:
          $ref: '#/components/schemas/Database/properties/updates'
    DatabaseMySQLRequest:
      type: object
      description: Managed MySQL Database request object.
      required:
        - label
        - type
        - engine
        - region
      properties:
        label:
          $ref: '#/components/schemas/DatabaseMySQL/properties/label'
        type:
          $ref: '#/components/schemas/DatabaseMySQL/properties/type'
        engine:
          type: string
          example: mysql/8.0.26
          description: The Managed Database engine in engine/version format.
        region:
          $ref: '#/components/schemas/DatabaseMySQL/properties/region'
        encrypted:
          $ref: '#/components/schemas/DatabaseMySQL/properties/encrypted'
        allow_list:
          $ref: '#/components/schemas/DatabaseMySQL/properties/allow_list'
        cluster_size:
          $ref: '#/components/schemas/DatabaseMySQL/properties/cluster_size'
        ssl_connection:
          $ref: '#/components/schemas/DatabaseMySQL/properties/ssl_connection'
        replication_type:
          $ref: '#/components/schemas/DatabaseMySQL/properties/replication_type'
    DatabasePostgreSQL:
      type: object
      description: Managed PostgreSQL Databases object.
      properties:
        id:
          $ref: '#/components/schemas/Database/properties/id'
          x-linode-cli-display: 1
        label:
          $ref: '#/components/schemas/Database/properties/label'
          x-linode-cli-display: 2
        type:
          $ref: '#/components/schemas/Database/properties/type'
          x-linode-cli-display: 4
        engine:
          type: string
          description: The Managed Database engine type.
          example: postgresql
          x-linode-filterable: true
          x-linode-cli-display: 6
          readOnly: true
        version:
          type: string
          description: The Managed Database engine version.
          example: '13.2'
          x-linode-filterable: true
          x-linode-cli-display: 7
          readOnly: true
        region:
          $ref: '#/components/schemas/Database/properties/region'
          x-linode-cli-display: 3
        status:
          $ref: '#/components/schemas/Database/properties/status'
          x-linode-cli-display: 100
          x-linode-cli-color:
            provisioning: yellow
            active: green
            resuming: yellow
            restoring: yellow
            failed: red
            degraded: red
            default_: white
        encrypted:
          $ref: '#/components/schemas/Database/properties/encrypted'
        allow_list:
          $ref: '#/components/schemas/Database/properties/allow_list'
        cluster_size:
          $ref: '#/components/schemas/Database/properties/cluster_size'
          x-linode-cli-display: 5
        hosts:
          type: object
          readOnly: true
          description: The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.
          properties:
            primary:
              type: string
              description: The primary host for the Managed Database.
              example: lin-0000-000-pgsql-primary.servers.linodedb.net
              nullable: true
            secondary:
              type: string
              description: |
                The secondary/private network host for the Managed Database.

                A private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.

                **Note**: The secondary hostname is publicly viewable and accessible.
              example: lin-0000-000-pgsql-primary-private.servers.linodedb.net
              nullable: true
        ssl_connection:
          type: boolean
          default: true
          example: true
          description: |
            Whether to require SSL credentials to establish a connection to the Managed Database.

            Use the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command for access information.
        replication_type:
          type: string
          enum:
            - none
            - asynch
            - semi_synch
          example: semi_synch
          description: |
            The replication method used for the Managed Database.

            Defaults to `none` for a single cluster and `semi_synch` for a high availability cluster.

            Must be `none` for a single node cluster.

            Must be `asynch` or `semi_synch` for a high availability cluster.
          x-linode-cli-display: 99
        replication_commit_type:
          type: string
          enum:
            - 'on'
            - local
            - remote_write
            - remote_apply
            - 'off'
          default: local
          example: local
          description: |
            The synchronization level of the replicating server.

            Must be `local` or `off` for the `asynch` replication type.

            Must be `on`, `remote_write`, or `remote_apply` for the `semi_synch` replication type.
          x-linode-cli-display: 100
        port:
          type: integer
          description: The access port for this Managed Database.
          example: 3306
          x-linode-cli-display: 98
        created:
          $ref: '#/components/schemas/Database/properties/created'
        updated:
          $ref: '#/components/schemas/Database/properties/updated'
        updates:
          $ref: '#/components/schemas/Database/properties/updates'
    DatabasePostgreSQLRequest:
      type: object
      description: Managed PostgreSQL Database request object.
      required:
        - label
        - type
        - engine
        - region
      properties:
        label:
          $ref: '#/components/schemas/DatabasePostgreSQL/properties/label'
        type:
          $ref: '#/components/schemas/DatabasePostgreSQL/properties/type'
        engine:
          type: string
          example: postgresql/13.2
          description: The Managed Database engine in engine/version format.
        region:
          $ref: '#/components/schemas/DatabasePostgreSQL/properties/region'
        encrypted:
          $ref: '#/components/schemas/DatabasePostgreSQL/properties/encrypted'
        allow_list:
          $ref: '#/components/schemas/DatabasePostgreSQL/properties/allow_list'
        cluster_size:
          $ref: '#/components/schemas/DatabasePostgreSQL/properties/cluster_size'
        ssl_connection:
          $ref: '#/components/schemas/DatabasePostgreSQL/properties/ssl_connection'
        replication_type:
          $ref: '#/components/schemas/DatabasePostgreSQL/properties/replication_type'
        replication_commit_type:
          $ref: '#/components/schemas/DatabasePostgreSQL/properties/replication_commit_type'
    DatabaseType:
      type: object
      description: Managed Database plan type object.
      properties:
        id:
          type: string
          description: The ID representing the Managed Database node plan type.
          readOnly: true
          example: g6-nanode-1
          x-linode-cli-display: 1
        label:
          type: string
          description: A human-readable string that describes each plan type. For display purposes only.
          readOnly: true
          example: DBaaS - Nanode 1GB
          x-linode-cli-display: 2
        engines:
          type: object
          properties:
            mysql:
              type: array
              description: Pricing details for MySQL Managed Databases.
              items:
                $ref: '#/components/schemas/DatabaseTypeEngine'
            postgresql:
              type: array
              description: Pricing details for PostgreSQL Managed Databases.
              items:
                $ref: '#/components/schemas/DatabaseTypeEngine'
            mongodb:
              type: array
              description: Pricing details for MongoDB Managed Databases.
              items:
                $ref: '#/components/schemas/DatabaseTypeEngine'
        memory:
          type: integer
          description: The amount of RAM allocated to Database created of this plan type. The value is represented in megabytes.
          example: 1024
          x-linode-cli-display: 3
        disk:
          type: integer
          description: The amount of disk space set aside for Databases of this plan type. The value is represented in megabytes.
          example: 25600
          x-linode-cli-display: 4
        vcpus:
          type: integer
          description: The integer of number CPUs allocated to databases of this plan type.
          example: 1
          x-linode-cli-display: 5
        deprecated:
          type: boolean
          description: Whether this Database plan type has been deprecated and is no longer available.
          example: false
          x-linode-filterable: true
          x-linode-cli-display: 6
        class:
          type: string
          description: The compute class category.
          example: nanode
    DatabaseTypeEngine:
      type: object
      properties:
        quantity:
          type: integer
          enum:
            - 1
            - 2
            - 3
          description: The number of nodes for the Managed Database cluster for this subscription tier.
          example: 1
        price:
          type: object
          description: 'Cost in US dollars, broken down into hourly and monthly charges.'
          properties:
            hourly:
              type: number
              description: Cost (in US dollars) per hour for this subscription tier.
              example: 0.03
            monthly:
              type: number
              description: Maximum cost (in US dollars) per month for this subscription tier.
              example: 20
  parameters:
    pageOffset:
      name: page
      in: query
      description: The page of a collection to return.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page_size
      in: query
      description: The number of items to return per page.
      schema:
        type: integer
        minimum: 25
        maximum: 500
        default: 100
  responses:
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorObject'
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://login.linode.com/oauth/authorize'
          tokenUrl: 'https://login.linode.com/oauth/token'
          scopes:
            'account:read_only': Allows access to GET information about your Account.
            'account:read_write': Allows access to all endpoints related to your Account.
            'domains:read_only': Allows access to GET Domains on your Account.
            'domains:read_write': Allows access to all Domain endpoints.
            'events:read_only': Allows access to GET your Events.
            'events:read_write': Allows access to all endpoints related to your Events.
            'firewall:read_only': Allows access to GET information about your Firewalls.
            'firewall:read_write': Allows acces to all Firewall endpoints.
            'images:read_only': Allows access to GET your Images.
            'images:read_write': Allows access to all endpoints related to your Images.
            'ips:read_only': Allows access to GET your ips.
            'ips:read_write': Allows access to all endpoints related to your ips.
            'linodes:read_only': Allows access to GET Linodes on your Account.
            'linodes:read_write': Allow access to all endpoints related to your Linodes.
            'lke:read_only': Allows access to GET LKE Clusters on your Account.
            'lke:read_write': Allows access to all endpoints related to LKE Clusters on your Account.
            'longview:read_only': Allows access to GET your Longview Clients.
            'longview:read_write': Allows access to all endpoints related to your Longview Clients.
            'nodebalancers:read_only': Allows access to GET NodeBalancers on your Account.
            'nodebalancers:read_write': Allows access to all NodeBalancer endpoints.
            'object_storage:read_only': Allows access to GET information related to your Object Storage.
            'object_storage:read_write': Allows access to all Object Storage endpoints.
            'stackscripts:read_only': Allows access to GET your StackScripts.
            'stackscripts:read_write': Allows access to all endpoints related to your StackScripts.
            'volumes:read_only': Allows access to GET your Volumes.
            'volumes:read_write': Allows access to all endpoints related to your Volumes.
  links:
    bootLinode:
      operationId: bootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebootLinode:
      operationId: rebootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    shutdownLinode:
      operationId: shutdownLinodeInstance
      parameters:
        linodeId: $request.body#/id
    updateLinode:
      operationId: updateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    deleteLinode:
      operationId: deleteLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebuildLinode:
      operationId: rebuildLinodeInstance
      parameters:
        linodeId: $request.body#/id
    mutateLinode:
      operationId: mutateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    resizeLinode:
      operationId: resizeLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rescueLinode:
      operationId: rescueLinodeInstance
      parameters:
        linodeId: $request.body#/id
    cloneLinode:
      operationId: cloneLinodeInstance
      parameters:
        linodeId: $request.body#/id
    attachVolume:
      operationId: attachVolume
      parameters:
        volumeID: $request.body#/id
    cloneVolume:
      operationId: cloneVolume
      parameters:
        volumeId: $request.body#/id
    detachVolume:
      operationId: detachVolume
      parameters:
        volumeId: $request.body#/id
    resizeVolume:
      operationId: resizeVolume
      parameters:
        volumeId: $request.body#/id
  x-stackQL-resources:
    engines:
      id: linode.databases.engines
      name: engines
      title: Engines
      methods:
        getDatabasesEngines:
          operation:
            $ref: '#/paths/~1databases~1engines/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesEngines:
          operation:
            $ref: '#/paths/~1databases~1engines/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDatabasesEngine:
          operation:
            $ref: '#/paths/~1databases~1engines~1{engineId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesEngine:
          operation:
            $ref: '#/paths/~1databases~1engines~1{engineId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/engines/methods/getDatabasesEngines'
          - $ref: '#/components/x-stackQL-resources/engines/methods/getDatabasesEngine'
        insert: []
        update: []
        delete: []
    instances:
      id: linode.databases.instances
      name: instances
      title: Instances
      methods:
        getDatabasesInstances:
          operation:
            $ref: '#/paths/~1databases~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesInstances:
          operation:
            $ref: '#/paths/~1databases~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/instances/methods/getDatabasesInstances'
        insert: []
        update: []
        delete: []
    mongodb_instances:
      id: linode.databases.mongodb_instances
      name: mongodb_instances
      title: Mongodb Instances
      methods:
        getDatabasesMongoDBInstances:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesMongoDBInstances:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDatabasesMongoDBInstance:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesMongoDBInstance:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteDatabasesMongoDBInstance:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        putDatabasesMongoDBInstance:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesMongoDBInstancePatch:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1patch/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/mongodb_instances/methods/getDatabasesMongoDBInstances'
          - $ref: '#/components/x-stackQL-resources/mongodb_instances/methods/getDatabasesMongoDBInstance'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/mongodb_instances/methods/deleteDatabasesMongoDBInstance'
    mongodb_instances_backups:
      id: linode.databases.mongodb_instances_backups
      name: mongodb_instances_backups
      title: Mongodb Instances Backups
      methods:
        getDatabasesMongoDBInstanceBackups:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1backups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesMongoDBInstanceBackups:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1backups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesMongoDBInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1backups/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDatabasesMongoDBInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1backups~1{backupId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesMongoDBInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1backups~1{backupId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteDatabaseMongoDBInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1backups~1{backupId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesMongoDBInstanceBackupRestore:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1backups~1{backupId}~1restore/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/mongodb_instances_backups/methods/getDatabasesMongoDBInstanceBackups'
          - $ref: '#/components/x-stackQL-resources/mongodb_instances_backups/methods/getDatabasesMongoDBInstanceBackup'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/mongodb_instances_backups/methods/deleteDatabaseMongoDBInstanceBackup'
    mongodb_instances_credentials:
      id: linode.databases.mongodb_instances_credentials
      name: mongodb_instances_credentials
      title: Mongodb Instances Credentials
      methods:
        getDatabasesMongoDBInstanceCredentials:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1credentials/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getDatabasesMongoDBInstanceCredentials:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1credentials/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesMongoDBInstanceCredentialsReset:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1credentials~1reset/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/mongodb_instances_credentials/methods/getDatabasesMongoDBInstanceCredentials'
        insert: []
        update: []
        delete: []
    mongodb_instances_ssl:
      id: linode.databases.mongodb_instances_ssl
      name: mongodb_instances_ssl
      title: Mongodb Instances Ssl
      methods:
        getDatabasesMongoDBInstanceSSL:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1ssl/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getDatabasesMongoDBInstanceSSL:
          operation:
            $ref: '#/paths/~1databases~1mongodb~1instances~1{instanceId}~1ssl/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/mongodb_instances_ssl/methods/getDatabasesMongoDBInstanceSSL'
        insert: []
        update: []
        delete: []
    mysql_instances:
      id: linode.databases.mysql_instances
      name: mysql_instances
      title: Mysql Instances
      methods:
        getDatabasesMySQLInstances:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesMySQLInstances:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesMySQLInstances:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDatabasesMySQLInstance:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesMySQLInstance:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteDatabasesMySQLInstance:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        putDatabasesMySQLInstance:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesMySQLInstancePatch:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1patch/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/mysql_instances/methods/getDatabasesMySQLInstances'
          - $ref: '#/components/x-stackQL-resources/mysql_instances/methods/getDatabasesMySQLInstance'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/mysql_instances/methods/deleteDatabasesMySQLInstance'
    mysql_instances_backups:
      id: linode.databases.mysql_instances_backups
      name: mysql_instances_backups
      title: Mysql Instances Backups
      methods:
        getDatabasesMySQLInstanceBackups:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1backups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesMySQLInstanceBackups:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1backups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesMySQLInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1backups/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDatabasesMySQLInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1backups~1{backupId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesMySQLInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1backups~1{backupId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteDatabaseMySQLInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1backups~1{backupId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesMySQLInstanceBackupRestore:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1backups~1{backupId}~1restore/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/mysql_instances_backups/methods/getDatabasesMySQLInstanceBackups'
          - $ref: '#/components/x-stackQL-resources/mysql_instances_backups/methods/getDatabasesMySQLInstanceBackup'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/mysql_instances_backups/methods/deleteDatabaseMySQLInstanceBackup'
    mysql_instances_credentials:
      id: linode.databases.mysql_instances_credentials
      name: mysql_instances_credentials
      title: Mysql Instances Credentials
      methods:
        getDatabasesMySQLInstanceCredentials:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1credentials/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getDatabasesMySQLInstanceCredentials:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1credentials/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesMySQLInstanceCredentialsReset:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1credentials~1reset/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/mysql_instances_credentials/methods/getDatabasesMySQLInstanceCredentials'
        insert: []
        update: []
        delete: []
    mysql_instances_ssl:
      id: linode.databases.mysql_instances_ssl
      name: mysql_instances_ssl
      title: Mysql Instances Ssl
      methods:
        getDatabasesMySQLInstanceSSL:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1ssl/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getDatabasesMySQLInstanceSSL:
          operation:
            $ref: '#/paths/~1databases~1mysql~1instances~1{instanceId}~1ssl/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/mysql_instances_ssl/methods/getDatabasesMySQLInstanceSSL'
        insert: []
        update: []
        delete: []
    postgresql_instances:
      id: linode.databases.postgresql_instances
      name: postgresql_instances
      title: Postgresql Instances
      methods:
        getDatabasesPostgreSQLInstances:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesPostgreSQLInstances:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesPostgreSQLInstances:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDatabasesPostgreSQLInstance:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesPostgreSQLInstance:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteDatabasesPostgreSQLInstance:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        putDatabasesPostgreSQLInstance:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesPostgreSQLInstancePatch:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1patch/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/postgresql_instances/methods/getDatabasesPostgreSQLInstances'
          - $ref: '#/components/x-stackQL-resources/postgresql_instances/methods/getDatabasesPostgreSQLInstance'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/postgresql_instances/methods/deleteDatabasesPostgreSQLInstance'
    postgresql_instances_backups:
      id: linode.databases.postgresql_instances_backups
      name: postgresql_instances_backups
      title: Postgresql Instances Backups
      methods:
        getDatabasesPostgreSQLInstanceBackups:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1backups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesPostgreSQLInstanceBackups:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1backups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesPostgreSQLInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1backups/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDatabasesPostgreSQLInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1backups~1{backupId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesPostgreSQLInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1backups~1{backupId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteDatabasePostgreSQLInstanceBackup:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1backups~1{backupId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesPostgreSQLInstanceBackupRestore:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1backups~1{backupId}~1restore/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/postgresql_instances_backups/methods/getDatabasesPostgreSQLInstanceBackups'
          - $ref: '#/components/x-stackQL-resources/postgresql_instances_backups/methods/getDatabasesPostgreSQLInstanceBackup'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/postgresql_instances_backups/methods/deleteDatabasePostgreSQLInstanceBackup'
    postgresql_instances_credentials:
      id: linode.databases.postgresql_instances_credentials
      name: postgresql_instances_credentials
      title: Postgresql Instances Credentials
      methods:
        getDatabasesPostgreSQLInstanceCredentials:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1credentials/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getDatabasesPostgreSQLInstanceCredentials:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1credentials/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postDatabasesPostgreSQLInstanceCredentialsReset:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1credentials~1reset/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/postgresql_instances_credentials/methods/getDatabasesPostgreSQLInstanceCredentials'
        insert: []
        update: []
        delete: []
    postgresql_instances_ssl:
      id: linode.databases.postgresql_instances_ssl
      name: postgresql_instances_ssl
      title: Postgresql Instances Ssl
      methods:
        getDatabasesPostgreSQLInstanceSSL:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1ssl/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getDatabasesPostgreSQLInstanceSSL:
          operation:
            $ref: '#/paths/~1databases~1postgresql~1instances~1{instanceId}~1ssl/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/postgresql_instances_ssl/methods/getDatabasesPostgreSQLInstanceSSL'
        insert: []
        update: []
        delete: []
    types:
      id: linode.databases.types
      name: types
      title: Types
      methods:
        getDatabasesTypes:
          operation:
            $ref: '#/paths/~1databases~1types/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesTypes:
          operation:
            $ref: '#/paths/~1databases~1types/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDatabasesType:
          operation:
            $ref: '#/paths/~1databases~1types~1{typeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getDatabasesType:
          operation:
            $ref: '#/paths/~1databases~1types~1{typeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/types/methods/getDatabasesTypes'
          - $ref: '#/components/x-stackQL-resources/types/methods/getDatabasesType'
        insert: []
        update: []
        delete: []
paths:
  /databases/engines:
    get:
      tags:
        - Databases
      summary: Managed Database Engines List
      operationId: getDatabasesEngines
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: engines
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      description: |
        Display all available Managed Database engine types and versions. Engine IDs are used when creating new Managed Databases.
      responses:
        '200':
          description: Returns a paginated list of all available Managed Database engines and versions.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationEnvelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseEngine'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl https://api.linode.com/v4/databases/engines/
        - lang: CLI
          source: |
            linode-cli databases engines
  '/databases/engines/{engineId}':
    get:
      tags:
        - Databases
      summary: Managed Database Engine View
      operationId: getDatabasesEngine
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: engine-view
      parameters:
        - name: engineId
          in: path
          description: The ID of the Managed Database engine.
          required: true
          schema:
            type: string
      description: |
        Display information for a single Managed Database engine type and version.
      responses:
        '200':
          description: Returns information for a single Managed Database engine type and version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseEngine'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl https://api.linode.com/v4/databases/engines/mysql/5.7.30
        - lang: CLI
          source: |
            linode-cli databases engine-view mysql/5.7.30
  /databases/instances:
    get:
      tags:
        - Databases
      summary: Managed Databases List All
      operationId: getDatabasesInstances
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action:
        - list
        - ls
      x-linode-grant: read_only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      description: |
        Display all Managed Databases that are accessible by your User, regardless of engine type.

        For more detailed information on a particular Database instance, make a request to its `instance_uri`.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Returns a paginated list of all accessible Managed Databases on your Account.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationEnvelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Database'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/instances
        - lang: CLI
          source: |
            linode-cli databases list
  /databases/mongodb/instances:
    get:
      tags:
        - Databases
      summary: Managed MongoDB Databases List
      operationId: getDatabasesMongoDBInstances
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-list
      x-linode-grant: read_only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      description: |
        Display all accessible Managed MongoDB Databases.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Returns a paginated list of all accessible Managed MongoDB Databases on your Account.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationEnvelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseMongoDB'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mongodb/instances/
        - lang: CLI
          source: |
            linode-cli databases mongodb-list
  '/databases/mongodb/instances/{instanceId}':
    get:
      tags:
        - Databases
      summary: Managed MongoDB Database View
      operationId: getDatabasesMongoDBInstance
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-view
      x-linode-grant: read_only
      description: |
        Display information for a single, accessible Managed MongoDB Database.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Returns information for a single Managed MongoDB Database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseMongoDB'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mongodb/instances/123
        - lang: CLI
          source: |
            linode-cli databases mongodb-view 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
    delete:
      tags:
        - Databases
      summary: Managed MongoDB Database Delete
      operationId: deleteDatabasesMongoDBInstance
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-delete
      x-linode-grant: read_write
      description: |
        Remove a Managed MongoDB Database from your Account.

        Requires `read_write` access to the Database.

        The Database must have an `active`, `failed`, or `degraded` status to perform this command.

        Only unrestricted Users can access this command, and have access regardless of the acting token's OAuth scopes.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Managed MongoDB Database successfully deleted.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/databases/mongodb/instances/123
        - lang: CLI
          source: |
            linode-cli databases mongodb-delete 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
    put:
      tags:
        - Databases
      summary: Managed MongoDB Database Update
      operationId: putDatabasesMongoDBInstance
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-update
      x-linode-grant: read_write
      description: |
        Update a Managed MongoDB Database.

        Requires `read_write` access to the Database.

        The Database must have an `active` status to perform this command.

        Updating addresses in the `allow_list` overwrites any existing addresses.

        * IP addresses and ranges on this list can access the Managed Database. All other sources are blocked.

        * If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.

        * Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.

        * **Note**: Updates to the `allow_list` may take a short period of time to complete, making this command inappropriate for rapid successive updates to this property.

        All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed MongoDB Database. The maintenance window for these updates is configured with the Managed Database's `updates` property.

        * If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.

        * **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      requestBody:
        description: Updated information for the Managed MongoDB Database.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Updated information for the Managed MongoDB Database.
              properties:
                label:
                  $ref: '#/components/schemas/DatabaseMongoDBRequest/properties/label'
                allow_list:
                  $ref: '#/components/schemas/DatabaseMongoDBRequest/properties/allow_list'
                updates:
                  $ref: '#/components/schemas/DatabaseMongoDB/properties/updates'
      responses:
        '200':
          description: Managed Database updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseMongoDB'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                    "label": "example-db",
                    "allow_list": [
                      "203.0.113.1",
                      "192.0.1.0/24"
                    ],
                    "updates" = {
                      "frequency": "monthly",
                      "duration": 3,
                      "hour_of_day": 12,
                      "day_of_week": 4,
                      "week_of_month": 3,
                    }
                }' \
                https://api.linode.com/v4/databases/mongodb/instances/123
        - lang: CLI
          source: |
            linode-cli databases mongodb-update 123 \
              --label example-db \
              --allow_list 203.0.113.1 \
              --allow_list 192.0.1.0/24 \
              --updates.frequency monthly \
              --updates.duration 3 \
              --updates.hour_of_day 12 \
              --updates.day_of_week 4 \
              --updates.week_of_month 3
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
  '/databases/mongodb/instances/{instanceId}/backups':
    get:
      tags:
        - Databases
      summary: Managed MongoDB Database Backups List
      operationId: getDatabasesMongoDBInstanceBackups
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-backups-list
      x-linode-grant: read_only
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
      description: |
        Display all backups for an accessible Managed MongoDB Database.

        The Database must not be provisioning to perform this command.

        Database `auto` type backups are created every 24 hours at 0:00 UTC. Each `auto` backup is retained for 7 days.

        Database `snapshot` type backups are created by accessing the **Managed MongoDB Database Backup Snapshot Create** ([POST /databases/mongodb/instances/{instanceId}/backups](/docs/api/databases/#managed-mongodb-database-backup-snapshot-create)) command.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Returns a paginated list of backups for the Managed MongoDB Database.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationEnvelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseBackup'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mongodb/instances/123/backups
        - lang: CLI
          source: |
            linode-cli databases mongodb-backups-list 123
    post:
      tags:
        - Databases
      summary: Managed MongoDB Database Backup Snapshot Create
      operationId: postDatabasesMongoDBInstanceBackup
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-backup-snapshot
      x-linode-grant: read_write
      description: |
        Creates a snapshot backup of a Managed MongoDB Database.

        Requires `read_write` access to the Database.

        Up to 3 snapshot backups for each Database can be stored at a time. If 3 snapshots have been created for a Database, one must be deleted before another can be made.

        Backups generated by this command have the type `snapshot`. Snapshot backups may take several minutes to complete, after which they will be accessible to view or restore.

        The Database must have an `active` status to perform this command. If another backup is in progress, it must complete before a new backup can be initiated.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      requestBody:
        description: Information about the snapshot backup to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseBackupSnapshot'
      responses:
        '200':
          description: Database snapshot backup request successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                -X POST -d '{
                    "label": "snapshot1",
                    "target": "primary"
                }' \
                https://api.linode.com/v4/databases/mongodb/instances/123/backups/
        - lang: CLI
          source: |
            linode-cli databases mongodb-backup-snapshot 123 \
              --label snapshot1 \
              --target primary
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
  '/databases/mongodb/instances/{instanceId}/backups/{backupId}':
    get:
      tags:
        - Databases
      summary: Managed MongoDB Database Backup View
      operationId: getDatabasesMongoDBInstanceBackup
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-backup-view
      x-linode-grant: read_only
      description: |
        Display information for a single backup for an accessible Managed MongoDB Database.

        The Database must not be provisioning to perform this command.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Returns a single backup for the Managed MongoDB Database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseBackup'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mongodb/instances/123/backups/456
        - lang: CLI
          source: |
            linode-cli databases mongodb-backup-view 123 456
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
        - name: backupId
          in: path
          description: The ID of the Managed MongoDB Database backup.
          required: true
          schema:
            type: integer
    delete:
      tags:
        - Databases
      summary: Managed MongoDB Database Backup Delete
      operationId: deleteDatabaseMongoDBInstanceBackup
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-backup-delete
      description: |
        Delete a single backup for an accessible Managed MongoDB Database.

        Requires `read_write` access to the Database.

        The Database must not be provisioning to perform this command.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Request to delete Database backup successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/databases/mongodb/instances/123/backups/456
        - lang: CLI
          source: |
            linode-cli databases mongodb-backup-delete 123 456
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
        - name: backupId
          in: path
          description: The ID of the Managed MongoDB Database backup.
          required: true
          schema:
            type: integer
  '/databases/mongodb/instances/{instanceId}/backups/{backupId}/restore':
    post:
      tags:
        - Databases
      summary: Managed MongoDB Database Backup Restore
      operationId: postDatabasesMongoDBInstanceBackupRestore
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-backup-restore
      x-linode-grant: read_write
      description: |
        Restore a backup to a Managed MongoDB Database on your Account.

        Requires `read_write` access to the Database.

        The Database must have an `active` status to perform this command.

        **Note**: Restoring from a backup will erase all existing data on the database instance and replace it with backup data.

        **Note**: Currently, restoring a backup after resetting Managed Database credentials results in a failed cluster. Please contact Customer Support if this occurs.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Request to restore backup successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X POST https://api.linode.com/v4/databases/mongodb/instances/123/backups/456/restore
        - lang: CLI
          source: |
            linode-cli databases mongodb-backup-restore 123 456
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
        - name: backupId
          in: path
          description: The ID of the Managed MongoDB Database backup.
          required: true
          schema:
            type: integer
  '/databases/mongodb/instances/{instanceId}/credentials':
    get:
      tags:
        - Databases
      summary: Managed MongoDB Database Credentials View
      operationId: getDatabasesMongoDBInstanceCredentials
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-creds-view
      x-linode-grant: read_only
      description: |
        Display the root username and password for an accessible Managed MongoDB Database.

        The Database must have an `active` status to perform this command.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Managed Database root username and password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseCredentials'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mongodb/instances/123/credentials/
        - lang: CLI
          source: |
            linode-cli databases mongodb-creds-view 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
  '/databases/mongodb/instances/{instanceId}/credentials/reset':
    post:
      tags:
        - Databases
      summary: Managed MongoDB Database Credentials Reset
      operationId: postDatabasesMongoDBInstanceCredentialsReset
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-creds-reset
      x-linode-grant: read_write
      description: |
        Reset the root password for a Managed MongoDB Database.

        Requires `read_write` access to the Database.

        A new root password is randomly generated and accessible with the **Managed MongoDB Database Credentials View** ([GET /databases/mongodb/instances/{instanceId}/credentials](/docs/api/databases/#managed-mongodb-database-credentials-view)) command.

        Only unrestricted Users can access this command, and have access regardless of the acting token's OAuth scopes.

        **Note**: Note that it may take several seconds for credentials to reset.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Managed Database instance credentials successfully reset.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X POST https://api.linode.com/v4/databases/mongodb/instances/123/credentials/reset
        - lang: CLI
          source: |
            linode-cli databases mongodb-creds-reset 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
  '/databases/mongodb/instances/{instanceId}/ssl':
    get:
      tags:
        - Databases
      summary: Managed MongoDB Database SSL Certificate View
      operationId: getDatabasesMongoDBInstanceSSL
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-ssl-cert
      x-linode-grant: read_only
      description: |
        Display the SSL CA certificate for an accessible Managed MongoDB Database.

        The Database must have an `active` status to perform this command.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Returns the SSL CA certificate of a single Managed MongoDB Database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSSL'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mongodb/instances/123/ssl
        - lang: CLI
          source: |
            linode-cli databases mongodb-ssl-cert 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
  '/databases/mongodb/instances/{instanceId}/patch':
    post:
      tags:
        - Databases
      summary: Managed MongoDB Database Patch
      operationId: postDatabasesMongoDBInstancePatch
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mongodb-patch
      x-linode-grant: read_write
      description: |
        Apply security patches and updates to the underlying operating system of the Managed MongoDB Database. This function runs during regular maintenance windows, which are configurable with the **Managed MongoDB Database Update** ([PUT /databases/mongodb/instances/{instanceId}](/docs/api/databases/#managed-mongodb-database-update)) command.
        Requires `read_write` access to the Database.

        The Database must have an `active` status to perform this command.

        **Note**:

        * If your database cluster is configured with a single node, you will experience downtime during this maintenance. Consider upgrading to a high availability plan to avoid any downtime due to maintenance.

        * **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.

        **Note**: New MongoDB Databases cannot currently be created.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Managed Database instance patch request successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X POST https://api.linode.com/v4/databases/mongodb/instances/123/patch
        - lang: CLI
          source: |
            linode-cli databases mongodb-patch 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MongoDB Database.
          required: true
          schema:
            type: integer
  /databases/mysql/instances:
    get:
      tags:
        - Databases
      summary: Managed MySQL Databases List
      operationId: getDatabasesMySQLInstances
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-list
      x-linode-grant: read_only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      description: |
        Display all accessible Managed MySQL Databases.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Returns a paginated list of all accessible Managed MySQL Databases on your Account.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationEnvelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseMySQL'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mysql/instances/
        - lang: CLI
          source: |
            linode-cli databases mysql-list
    post:
      tags:
        - Databases
      summary: Managed MySQL Database Create
      operationId: postDatabasesMySQLInstances
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-create
      x-linode-grant: add_databases
      description: |
        Provision a Managed MySQL Database.

        Restricted Users must have the `add_databases` grant to use this command.

        New instances can take approximately 15 to 30 minutes to provision.

        The `allow_list` is used to control access to the Managed Database.

        * IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.

        * If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.

        * Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.

        All Managed Databases include automatic, daily backups. Up to seven backups are automatically stored for each Managed Database, providing restore points for each day of the past week.

        All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed MySQL Database during configurable maintenance windows.

        * If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.

        * **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.

        * To modify update the maintenance window for a Database, use the **Managed MySQL Database Update** ([PUT /databases/mysql/instances/{instanceId}](/docs/api/databases/#managed-mysql-database-update)) command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      requestBody:
        description: Information about the Managed MySQL Database you are creating.
        x-linode-cli-allowed-defaults:
          - region
          - type
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseMySQLRequest'
      responses:
        '200':
          description: A new Managed MySQL Database is provisioning.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseMySQL'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                    "label": "example-db",
                    "region": "us-east",
                    "type": "g6-dedicated-2",
                    "cluster_size": 3,
                    "engine": "mysql/8.0.26",
                    "encrypted": false,
                    "ssl_connection": true,
                    "replication_type": "semi_synch",
                    "allow_list": [
                      "203.0.113.1",
                      "192.0.1.0/24"
                    ]
                }' \
                https://api.linode.com/v4/databases/mysql/instances
        - lang: CLI
          source: |
            linode-cli databases mysql-create \
              --label example-db1 \
              --region us-east \
              --type g6-dedicated-2 \
              --cluster_size 3 \
              --engine mysql/8.0.26 \
              --encrypted false \
              --ssl_connection false \
              --replication_type semi_synch \
              --allow_list 203.0.113.1 \
              --allow_list 192.0.1.0/24
  '/databases/mysql/instances/{instanceId}':
    get:
      tags:
        - Databases
      summary: Managed MySQL Database View
      operationId: getDatabasesMySQLInstance
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-view
      x-linode-grant: read_only
      description: |
        Display information for a single, accessible Managed MySQL Database.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Returns information for a single Managed MySQL Database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseMySQL'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mysql/instances/123
        - lang: CLI
          source: |
            linode-cli databases mysql-view 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
    delete:
      tags:
        - Databases
      summary: Managed MySQL Database Delete
      operationId: deleteDatabasesMySQLInstance
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-delete
      x-linode-grant: read_write
      description: |
        Remove a Managed MySQL Database from your Account.

        Requires `read_write` access to the Database.

        The Database must have an `active`, `failed`, or `degraded` status to perform this command.

        Only unrestricted Users can access this command, and have access regardless of the acting token's OAuth scopes.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Managed MySQL Database successfully deleted.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/databases/mysql/instances/123
        - lang: CLI
          source: |
            linode-cli databases mysql-delete 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
    put:
      tags:
        - Databases
      summary: Managed MySQL Database Update
      operationId: putDatabasesMySQLInstance
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-update
      x-linode-grant: read_write
      description: |
        Update a Managed MySQL Database.

        Requires `read_write` access to the Database.

        The Database must have an `active` status to perform this command.

        Updating addresses in the `allow_list` overwrites any existing addresses.

        * IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.

        * If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.

        * Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.

        * **Note**: Updates to the `allow_list` may take a short period of time to complete, making this command inappropriate for rapid successive updates to this property.

        All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed MySQL Database. The maintenance window for these updates is configured with the Managed Database's `updates` property.

        * If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.

        * **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      requestBody:
        description: Updated information for the Managed MySQL Database.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Updated information for the Managed MySQL Database.
              properties:
                label:
                  $ref: '#/components/schemas/DatabaseMySQLRequest/properties/label'
                allow_list:
                  $ref: '#/components/schemas/DatabaseMySQLRequest/properties/allow_list'
                updates:
                  $ref: '#/components/schemas/DatabaseMySQL/properties/updates'
      responses:
        '200':
          description: Managed Database updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseMySQL'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                    "label": "example-db",
                    "allow_list": [
                      "203.0.113.1",
                      "192.0.1.0/24"
                    ],
                    "updates" = {
                      "frequency": "monthly",
                      "duration": 3,
                      "hour_of_day": 12,
                      "day_of_week": 4,
                      "week_of_month": 3,
                    }
                }' \
                https://api.linode.com/v4/databases/mysql/instances/123
        - lang: CLI
          source: |
            linode-cli databases mysql-update 123 \
              --label example-db \
              --allow_list 203.0.113.1 \
              --allow_list 192.0.1.0/24 \
              --updates.frequency monthly \
              --updates.duration 3 \
              --updates.hour_of_day 12 \
              --updates.day_of_week 4 \
              --updates.week_of_month 3
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
  '/databases/mysql/instances/{instanceId}/backups':
    get:
      tags:
        - Databases
      summary: Managed MySQL Database Backups List
      operationId: getDatabasesMySQLInstanceBackups
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-backups-list
      x-linode-grant: read_only
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
      description: |
        Display all backups for an accessible Managed MySQL Database.

        The Database must not be provisioning to perform this command.

        Database `auto` type backups are created every 24 hours at 0:00 UTC. Each `auto` backup is retained for 7 days.

        Database `snapshot` type backups are created by accessing the **Managed MySQL Database Backup Snapshot Create** ([POST /databases/mysql/instances/{instanceId}/backups](/docs/api/databases/#managed-mysql-database-backup-snapshot-create)) command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Returns a paginated list of backups for the Managed MySQL Database.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationEnvelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseBackup'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mysql/instances/123/backups
        - lang: CLI
          source: |
            linode-cli databases mysql-backups-list 123
    post:
      tags:
        - Databases
      summary: Managed MySQL Database Backup Snapshot Create
      operationId: postDatabasesMySQLInstanceBackup
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-backup-snapshot
      x-linode-grant: read_write
      description: |
        Creates a snapshot backup of a Managed MySQL Database.

        Requires `read_write` access to the Database.

        Up to 3 snapshot backups for each Database can be stored at a time. If 3 snapshots have been created for a Database, one must be deleted before another can be made.

        Backups generated by this command have the type `snapshot`. Snapshot backups may take several minutes to complete, after which they will be accessible to view or restore.

        The Database must have an `active` status to perform this command. If another backup is in progress, it must complete before a new backup can be initiated.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      requestBody:
        description: Information about the snapshot backup to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseBackupSnapshot'
      responses:
        '200':
          description: Database snapshot backup request successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                -X POST -d '{
                    "label": "snapshot1",
                    "target": "primary"
                }' \
                https://api.linode.com/v4/databases/mysql/instances/123/backups/
        - lang: CLI
          source: |
            linode-cli databases mysql-backup-snapshot 123 \
              --label snapshot1 \
              --target primary
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
  '/databases/mysql/instances/{instanceId}/backups/{backupId}':
    get:
      tags:
        - Databases
      summary: Managed MySQL Database Backup View
      operationId: getDatabasesMySQLInstanceBackup
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-backup-view
      x-linode-grant: read_only
      description: |
        Display information for a single backup for an accessible Managed MySQL Database.

        The Database must not be provisioning to perform this command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Returns a single backup for the Managed MySQL Database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseBackup'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mysql/instances/123/backups/456
        - lang: CLI
          source: |
            linode-cli databases mysql-backup-view 123 456
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
        - name: backupId
          in: path
          description: The ID of the Managed MySQL Database backup.
          required: true
          schema:
            type: integer
    delete:
      tags:
        - Databases
      summary: Managed MySQL Database Backup Delete
      operationId: deleteDatabaseMySQLInstanceBackup
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-backup-delete
      description: |
        Delete a single backup for an accessible Managed MySQL Database.

        Requires `read_write` access to the Database.

        The Database must not be provisioning to perform this command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Request to delete Database backup successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/databases/mysql/instances/123/backups/456
        - lang: CLI
          source: |
            linode-cli databases mysql-backup-delete 123 456
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
        - name: backupId
          in: path
          description: The ID of the Managed MySQL Database backup.
          required: true
          schema:
            type: integer
  '/databases/mysql/instances/{instanceId}/backups/{backupId}/restore':
    post:
      tags:
        - Databases
      summary: Managed MySQL Database Backup Restore
      operationId: postDatabasesMySQLInstanceBackupRestore
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-backup-restore
      x-linode-grant: read_write
      description: |
        Restore a backup to a Managed MySQL Database on your Account.

        Requires `read_write` access to the Database.

        The Database must have an `active` status to perform this command.

        **Note**: Restoring from a backup will erase all existing data on the database instance and replace it with backup data.

        **Note**: Currently, restoring a backup after resetting Managed Database credentials results in a failed cluster. Please contact Customer Support if this occurs.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Request to restore backup successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X POST https://api.linode.com/v4/databases/mysql/instances/123/backups/456/restore
        - lang: CLI
          source: |
            linode-cli databases mysql-backup-restore 123 456
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
        - name: backupId
          in: path
          description: The ID of the Managed MySQL Database backup.
          required: true
          schema:
            type: integer
  '/databases/mysql/instances/{instanceId}/credentials':
    get:
      tags:
        - Databases
      summary: Managed MySQL Database Credentials View
      operationId: getDatabasesMySQLInstanceCredentials
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-creds-view
      x-linode-grant: read_only
      description: |
        Display the root username and password for an accessible Managed MySQL Database.

        The Database must have an `active` status to perform this command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Managed Database root username and password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseCredentials'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mysql/instances/123/credentials/
        - lang: CLI
          source: |
            linode-cli databases mysql-creds-view 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
  '/databases/mysql/instances/{instanceId}/credentials/reset':
    post:
      tags:
        - Databases
      summary: Managed MySQL Database Credentials Reset
      operationId: postDatabasesMySQLInstanceCredentialsReset
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-creds-reset
      x-linode-grant: read_write
      description: |
        Reset the root password for a Managed MySQL Database.

        Requires `read_write` access to the Database.

        A new root password is randomly generated and accessible with the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command.

        Only unrestricted Users can access this command, and have access regardless of the acting token's OAuth scopes.

        **Note**: Note that it may take several seconds for credentials to reset.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Managed Database instance credentials successfully reset.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X POST https://api.linode.com/v4/databases/mysql/instances/123/credentials/reset
        - lang: CLI
          source: |
            linode-cli databases mysql-creds-reset 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
  '/databases/mysql/instances/{instanceId}/ssl':
    get:
      tags:
        - Databases
      summary: Managed MySQL Database SSL Certificate View
      operationId: getDatabasesMySQLInstanceSSL
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-ssl-cert
      x-linode-grant: read_only
      description: |
        Display the SSL CA certificate for an accessible Managed MySQL Database.

        The Database must have an `active` status to perform this command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Returns the SSL CA certificate of a single Managed MySQL Database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSSL'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/mysql/instances/123/ssl
        - lang: CLI
          source: |
            linode-cli databases mysql-ssl-cert 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
  '/databases/mysql/instances/{instanceId}/patch':
    post:
      tags:
        - Databases
      summary: Managed MySQL Database Patch
      operationId: postDatabasesMySQLInstancePatch
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: mysql-patch
      x-linode-grant: read_write
      description: |
        Apply security patches and updates to the underlying operating system of the Managed MySQL Database. This function runs during regular maintenance windows, which are configurable with the **Managed MySQL Database Update** ([PUT /databases/mysql/instances/{instanceId}](/docs/api/databases/#managed-mysql-database-update)) command.

        Requires `read_write` access to the Database.

        The Database must have an `active` status to perform this command.

        **Note**

        * If your database cluster is configured with a single node, you will experience downtime during this maintenance. Consider upgrading to a high availability plan to avoid any downtime due to maintenance.

        * **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then [migrate your databases](/docs/products/databases/managed-databases/guides/migrate-mysql/) from the original Managed Database cluster to the new one.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Managed Database instance patch request successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X POST https://api.linode.com/v4/databases/mysql/instances/123/patch
        - lang: CLI
          source: |
            linode-cli databases mysql-patch 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed MySQL Database.
          required: true
          schema:
            type: integer
  /databases/postgresql/instances:
    get:
      tags:
        - Databases
      summary: Managed PostgreSQL Databases List
      operationId: getDatabasesPostgreSQLInstances
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-list
      x-linode-grant: read_only
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      description: |
        Display all accessible Managed PostgreSQL Databases.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Returns a paginated list of all accessible Managed PostgreSQL Databases on your Account.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationEnvelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabasePostgreSQL'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/postgresql/instances/
        - lang: CLI
          source: |
            linode-cli databases postgresql-list
    post:
      tags:
        - Databases
      summary: Managed PostgreSQL Database Create
      operationId: postDatabasesPostgreSQLInstances
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-create
      x-linode-grant: add_databases
      description: |
        Provision a Managed PostgreSQL Database.

        Restricted Users must have the `add_databases` grant to use this command.

        New instances can take approximately 15 to 30 minutes to provision.

        The `allow_list` is used to control access to the Managed Database.

        * IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.

        * If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.

        * Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.

        All Managed Databases include automatic, daily backups. Up to seven backups are automatically stored for each Managed Database, providing restore points for each day of the past week.

        All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database during configurable maintenance windows.

        * If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.

        * **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.

        * To modify update the maintenance window for a Database, use the **Managed PostgreSQL Database Update** ([PUT /databases/postgresql/instances/{instanceId}](/docs/api/databases/#managed-postgresql-database-update)) command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      requestBody:
        description: Information about the Managed PostgreSQL Database you are creating.
        x-linode-cli-allowed-defaults:
          - region
          - type
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasePostgreSQLRequest'
      responses:
        '200':
          description: A new Managed PostgreSQL Database is provisioning.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabasePostgreSQL'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \ -H "Authorization: Bearer $TOKEN" \ -X POST -d '{
                "label": "example-db",
                "region": "us-east",
                "type": "g6-dedicated-2",
                "cluster_size": 3,
                "engine": "postgresql/13.2",
                "encrypted": false,
                "ssl_connection": false,
                "replication_type": "asynch",
                "replication_commit_type": "local",
                "allow_list": [
                  "203.0.113.1",
                  "192.0.1.0/24"
                ]
            }' \ https://api.linode.com/v4/databases/postgresql/instances
        - lang: CLI
          source: |
            linode-cli databases postgresql-create \
              --label example-db \
              --region us-east \
              --type g6-dedicated-2 \
              --cluster_size 3 \
              --engine postgresql/13.2 \
              --encrypted false \
              --ssl_connection false \
              --replication_type asynch \
              --replication_commit_type local \
              --allow_list 203.0.113.1 \
              --allow_list 192.0.1.0/24
  '/databases/postgresql/instances/{instanceId}':
    get:
      tags:
        - Databases
      summary: Managed PostgreSQL Database View
      operationId: getDatabasesPostgreSQLInstance
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-view
      x-linode-grant: read_only
      description: |
        Display information for a single, accessible Managed PostgreSQL Database.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Returns information for a single Managed PostgreSQL Database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabasePostgreSQL'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/postgresql/instances/123
        - lang: CLI
          source: |
            linode-cli databases postgresql-view 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
    delete:
      tags:
        - Databases
      summary: Managed PostgreSQL Database Delete
      operationId: deleteDatabasesPostgreSQLInstance
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-delete
      x-linode-grant: read_write
      description: |
        Remove a Managed PostgreSQL Database from your Account.

        Requires `read_write` access to the Database.

        The Database must have an `active`, `failed`, or `degraded` status to perform this command.

        Only unrestricted Users can access this command, and have access regardless of the acting token's OAuth scopes.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Managed PostgreSQL Database successfully deleted.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/databases/postgresql/instances/123
        - lang: CLI
          source: |
            linode-cli databases postgresql-delete 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
    put:
      tags:
        - Databases
      summary: Managed PostgreSQL Database Update
      operationId: putDatabasesPostgreSQLInstance
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-update
      x-linode-grant: read_write
      description: |
        Update a Managed PostgreSQL Database.

        Requires `read_write` access to the Database.

        The Database must have an `active` status to perform this command.

        Updating addresses in the `allow_list` overwrites any existing addresses.

        * IP addresses and ranges in this list can access the Managed Database. All other sources are blocked.

        * If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.

        * Entering an empty array (`[]`) blocks all connections (both public and private) to the Managed Database.

        * **Note**: Updates to the `allow_list` may take a short period of time to complete, making this command inappropriate for rapid successive updates to this property.

        All Managed Databases include automatic patch updates, which apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database. The maintenance window for these updates is configured with the Managed Database's `updates` property.

        * If your database cluster is configured with a single node, you will experience downtime during this maintenance window when any updates occur. It's recommended that you adjust this window to match a time that will be the least disruptive for your application and users. You may also want to consider upgrading to a high availability plan to avoid any downtime due to maintenance.

        * **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      requestBody:
        description: Updated information for the Managed PostgreSQL Database.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Updated information for the Managed PostgreSQL Database.
              properties:
                label:
                  $ref: '#/components/schemas/DatabasePostgreSQLRequest/properties/label'
                allow_list:
                  $ref: '#/components/schemas/DatabasePostgreSQLRequest/properties/allow_list'
                updates:
                  $ref: '#/components/schemas/DatabasePostgreSQL/properties/updates'
      responses:
        '200':
          description: Managed Database updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabasePostgreSQL'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{
                    "label": "example-db",
                    "allow_list": [
                      "203.0.113.1",
                      "192.0.1.0/24"
                    ],
                    "updates" = {
                      "frequency": "monthly",
                      "duration": 3,
                      "hour_of_day": 12,
                      "day_of_week": 4,
                      "week_of_month": 3,
                    }
                }' \
                https://api.linode.com/v4/databases/postgresql/instances/123
        - lang: CLI
          source: |
            linode-cli databases postgresql-update 123 \
              --label example-db \
              --allow_list 203.0.113.1 \
              --allow_list 192.0.1.0/24 \
              --updates.frequency monthly \
              --updates.duration 3 \
              --updates.hour_of_day 12 \
              --updates.day_of_week 4 \
              --updates.week_of_month 3
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
  '/databases/postgresql/instances/{instanceId}/backups':
    get:
      tags:
        - Databases
      summary: Managed PostgreSQL Database Backups List
      operationId: getDatabasesPostgreSQLInstanceBackups
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-backups-list
      x-linode-grant: read_only
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
      description: |
        Display all backups for an accessible Managed PostgreSQL Database.

        The Database must not be provisioning to perform this command.

        Database `auto` type backups are created every 24 hours at 0:00 UTC. Each `auto` backup is retained for 7 days.

        Database `snapshot` type backups are created by accessing the **Managed PostgreSQL Database Backup Snapshot Create** ([POST /databases/postgresql/instances/{instanceId}/backups](/docs/api/databases/#managed-postgresql-database-backup-snapshot-create)) command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Returns a paginated list of backups for the Managed PostgreSQL Database.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationEnvelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseBackup'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/postgresql/instances/123/backups
        - lang: CLI
          source: |
            linode-cli databases postgresql-backups-list 123
    post:
      tags:
        - Databases
      summary: Managed PostgreSQL Database Backup Snapshot Create
      operationId: postDatabasesPostgreSQLInstanceBackup
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-backup-snapshot
      x-linode-grant: read_write
      description: |
        Creates a snapshot backup of a Managed PostgreSQL Database.

        Requires `read_write` access to the Database.

        Up to 3 snapshot backups for each Database can be stored at a time. If 3 snapshots have been created for a Database, one must be deleted before another can be made.

        Backups generated by this command have the type `snapshot`. Snapshot backups may take several minutes to complete, after which they will be accessible to view or restore.

        The Database must have an `active` status to perform this command. If another backup is in progress, it must complete before a new backup can be initiated.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      requestBody:
        description: Information about the snapshot backup to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseBackupSnapshot'
      responses:
        '200':
          description: Database snapshot backup request successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                -X POST -d '{
                    "label": "snapshot1",
                    "target": "primary"
                }' \
                https://api.linode.com/v4/databases/postgresql/instances/123/backups/
        - lang: CLI
          source: |
            linode-cli databases postgresql-backup-snapshot 123 \
              --label snapshot1 \
              --target primary
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
  '/databases/postgresql/instances/{instanceId}/backups/{backupId}':
    get:
      tags:
        - Databases
      summary: Managed PostgreSQL Database Backup View
      operationId: getDatabasesPostgreSQLInstanceBackup
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-backup-view
      x-linode-grant: read_only
      description: |
        Display information for a single backup for an accessible Managed PostgreSQL Database.

        The Database must not be provisioning to perform this command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Returns a single backup for the Managed PostgreSQL Database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseBackup'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/postgresql/instances/123/backups/456
        - lang: CLI
          source: |
            linode-cli databases postgresql-backup-view 123 456
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
        - name: backupId
          in: path
          description: The ID of the Managed PostgreSQL Database backup.
          required: true
          schema:
            type: integer
    delete:
      tags:
        - Databases
      summary: Managed PostgreSQL Database Backup Delete
      operationId: deleteDatabasePostgreSQLInstanceBackup
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-backup-delete
      description: |
        Delete a single backup for an accessible Managed PostgreSQL Database.

        Requires `read_write` access to the Database.

        The Database must not be provisioning to perform this command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Request to delete Database backup successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://api.linode.com/v4/databases/postgresql/instances/123/backups/456
        - lang: CLI
          source: |
            linode-cli databases postgresql-backup-delete 123 456
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
        - name: backupId
          in: path
          description: The ID of the Managed PostgreSQL Database backup.
          required: true
          schema:
            type: integer
  '/databases/postgresql/instances/{instanceId}/backups/{backupId}/restore':
    post:
      tags:
        - Databases
      summary: Managed PostgreSQL Database Backup Restore
      operationId: postDatabasesPostgreSQLInstanceBackupRestore
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-backup-restore
      x-linode-grant: read_write
      description: |
        Restore a backup to a Managed PostgreSQL Database on your Account.

        Requires `read_write` access to the Database.

        The Database must have an `active` status to perform this command.

        **Note**: Restoring from a backup will erase all existing data on the database instance and replace it with backup data.

        **Note**: Currently, restoring a backup after resetting Managed Database credentials results in a failed cluster. Please contact Customer Support if this occurs.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Request to restore backup successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X POST https://api.linode.com/v4/databases/postgresql/instances/123/backups/456/restore
        - lang: CLI
          source: |
            linode-cli databases postgresql-backup-restore 123 456
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
        - name: backupId
          in: path
          description: The ID of the Managed PostgreSQL Database backup.
          required: true
          schema:
            type: integer
  '/databases/postgresql/instances/{instanceId}/credentials':
    get:
      tags:
        - Databases
      summary: Managed PostgreSQL Database Credentials View
      operationId: getDatabasesPostgreSQLInstanceCredentials
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-creds-view
      x-linode-grant: read_only
      description: |
        Display the root username and password for an accessible Managed PostgreSQL Database.

        The Database must have an `active` status to perform this command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Managed Database root username and password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseCredentials'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/postgresql/instances/123/credentials/
        - lang: CLI
          source: |
            linode-cli databases postgresql-creds-view 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
  '/databases/postgresql/instances/{instanceId}/credentials/reset':
    post:
      tags:
        - Databases
      summary: Managed PostgreSQL Database Credentials Reset
      operationId: postDatabasesPostgreSQLInstanceCredentialsReset
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-creds-reset
      x-linode-grant: read_write
      description: |
        Reset the root password for a Managed PostgreSQL Database.

        Requires `read_write` access to the Database.

        A new root password is randomly generated and accessible with the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command.

        Only unrestricted Users can access this command, and have access regardless of the acting token's OAuth scopes.

        **Note**: Note that it may take several seconds for credentials to reset.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Managed Database instance credentials successfully reset.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X POST https://api.linode.com/v4/databases/postgresql/instances/123/credentials/reset
        - lang: CLI
          source: |
            linode-cli databases postgresql-creds-reset 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
  '/databases/postgresql/instances/{instanceId}/ssl':
    get:
      tags:
        - Databases
      summary: Managed PostgreSQL Database SSL Certificate View
      operationId: getDatabasesPostgreSQLInstanceSSL
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-ssl-cert
      x-linode-grant: read_only
      description: |
        Display the SSL CA certificate for an accessible Managed PostgreSQL Database.

        The Database must have an `active` status to perform this command.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_only'
      responses:
        '200':
          description: Returns the SSL CA certificate of a single Managed PostgreSQL Database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSSL'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://api.linode.com/v4/databases/postgresql/instances/123/ssl
        - lang: CLI
          source: |
            linode-cli databases postgresql-ssl-cert 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
  '/databases/postgresql/instances/{instanceId}/patch':
    post:
      tags:
        - Databases
      summary: Managed PostgreSQL Database Patch
      operationId: postDatabasesPostgreSQLInstancePatch
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: postgresql-patch
      x-linode-grant: read_write
      description: |
        Apply security patches and updates to the underlying operating system of the Managed PostgreSQL Database. This function runs during regular maintenance windows, which are configurable with the **Managed PostgreSQL Database Update** ([PUT /databases/postgresql/instances/{instanceId}](/docs/api/databases/#managed-postgresql-database-update)) command.

        Requires `read_write` access to the Database.

        The Database must have an `active` status to perform this command.

        **Note**

        * If your database cluster is configured with a single node, you will experience downtime during this maintenance. Consider upgrading to a high availability plan to avoid any downtime due to maintenance.

        * **The database software is not updated automatically.** To upgrade to a new database engine version, consider deploying a new Managed Database with your preferred version. You can then migrate your databases from the original Managed Database cluster to the new one.
      security:
        - personalAccessToken: []
        - oauth:
            - 'databases:read_write'
      responses:
        '200':
          description: Managed Database instance patch request successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X POST https://api.linode.com/v4/databases/postgresql/instances/123/patch
        - lang: CLI
          source: |
            linode-cli databases postgresql-patch 123
      parameters:
        - name: instanceId
          in: path
          description: The ID of the Managed PostgreSQL Database.
          required: true
          schema:
            type: integer
  /databases/types:
    get:
      tags:
        - Databases
      summary: Managed Database Types List
      operationId: getDatabasesTypes
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: types
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageSize'
      description: |
        Display all Managed Database node types. The type and number of nodes determine the resources and price of a Managed Database instance.

        Each Managed Database can have one node type. In the case of a high availabilty Database, all nodes are provisioned according to the chosen type.
      responses:
        '200':
          description: Returns a paginated list of all Managed Database types.
          content:
            application/json:
              x-linode-cli-nested-list: 'engines.mysql, engines.postgresql, engines.mongodb'
              x-linode-cli-use-schema:
                type: object
                properties:
                  id:
                    x-linode-cli-display: 1
                  label:
                    x-linode-cli-display: 2
                  _split:
                    x-linode-cli-display: 2.5
                  engines:
                    properties:
                      quantity:
                        x-linode-cli-display: 3
                      price:
                        properties:
                          hourly:
                            x-linode-cli-display: 4
                          monthly:
                            x-linode-cli-display: 5
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationEnvelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseType'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl https://api.linode.com/v4/databases/types
        - lang: CLI
          source: |
            linode-cli databases types
  '/databases/types/{typeId}':
    get:
      tags:
        - Databases
      summary: Managed Database Type View
      operationId: getDatabasesType
      servers:
        - url: 'https://api.linode.com/v4'
        - url: 'https://api.linode.com/v4beta'
      x-linode-cli-action: type-view
      parameters:
        - name: typeId
          in: path
          description: The ID of the Managed Database type.
          required: true
          schema:
            type: string
      description: |
        Display the details of a single Managed Database type. The type and number of nodes determine the resources and price of a Managed Database instance.
      responses:
        '200':
          description: Returns a single Managed Database type.
          content:
            application/json:
              x-linode-cli-nested-list: 'engines.mysql, engines.postgresql, engines.mongodb'
              x-linode-cli-use-schema:
                type: object
                properties:
                  id:
                    x-linode-cli-display: 1
                  label:
                    x-linode-cli-display: 2
                  _split:
                    x-linode-cli-display: 2.5
                  engines:
                    properties:
                      quantity:
                        x-linode-cli-display: 3
                      price:
                        properties:
                          hourly:
                            x-linode-cli-display: 4
                          monthly:
                            x-linode-cli-display: 5
              schema:
                $ref: '#/components/schemas/DatabaseType'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl https://api.linode.com/v4/databases/types/g6-nanode-1
        - lang: CLI
          source: |
            linode-cli databases type-view g6-nanode-1
