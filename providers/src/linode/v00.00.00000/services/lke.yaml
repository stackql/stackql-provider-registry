openapi: 3.0.1
servers:
  - url: 'https://api.linode.com/v4'
  - url: 'https://api.linode.com/v4beta'
info:
  version: 4.147.0
  title: Linode API - lke
  description: lke
  contact:
    name: Linode
    url: 'https://linode.com'
    email: support@linode.com
tags:
  - name: Account
    description: 'Use the Account endpoints to manage user settings, billing, and payments. You can also initiate and maintain OAuth client application authentication, enable the Linode Managed service, and create new users on your account.'
  - name: Databases
    description: 'Managed Databases is Linode''s fully-managed, high-performance database service. Use the Managed Databases endpoints to create and manage database clusters.'
  - name: Domains
    description: Use the Domains endpoints to create and manage domains and domain records on your account.
  - name: Images
    description: 'Use the Images endpoints to capture, store, and manage custom Linode images.'
  - name: Linode Instances
    description: 'Use the Linode Instances endpoints to create, configure, and manage your Linode instances. You can also manage the Linode Backup service; maintain and manage configuration profiles; create and maintain disks, intiate a host migration; view Linode Instance statistics; and more.'
  - name: Linode Types
    description: 'Use the Linode Types endpoints to retrieve information about Linode plan types, including pricing information, hardware resources, and network transfer allotment.'
  - name: Linode Kubernetes Engine (LKE)
    description: Linode Kubernetes Engine (LKE) is Linode's managed Kubernetes service. Use the LKE endpoints to create and manage Kubernetes clusters and their associated Node Pools.
  - name: Longview
    description: Longview is Linode's system-level monitoring and graphing service. Use the Longview endpoints to manage your Longview subscription and plan and to create and maintain Longview clients.
  - name: Managed
    description: 'Managed is Linode''s incident response service. Use the Managed endpoints to register a service to be monitored by the Managed Service team, provide secure access to your managed services,  view information about detected issues, and more.'
  - name: Networking
    description: 'Use the Networking endpoints to view all IP addresses on your account, reorganize assigned IPv4 addresses, update RDNS, and configure IP sharing.'
  - name: NodeBalancers
    description: 'NodeBalancers is Linode''s load balancing service. Use the NodeBalancers endpoints to create and manage NodeBalancers. You can also create and maintain configurations; create and maintain nodes, and view statistics.'
  - name: Object Storage
    description: 'Object Storage is Linode''s S3-compatible data storage service. Use the Object Storage endpoints to create and maintaining buckets, add and remove objects from buckets, create and maintain Object Storage keys, and cancel the Object Storage service.'
  - name: Profile
    description: 'Use the Profile endpoints to manage your Linode user profile preferences and security settings. This includes creating and maintaining personal access tokens, creating and maintaining SSH keys, confirming and enabling two-factor authentication, and updating user and profile preferences.'
  - name: Regions
    description: 'Use the Regions endpoints to view information about the various Linode data center regions, including the service capabilities for each region, country, status, and more.'
  - name: StackScripts
    description: Linode StackScripts allow you to create reusable scripts to configure new Linode instances. Use the StackScripts endpoints to create and manage StackScripts on your account.
  - name: Support
    description: 'Use the Support endpoints to open, view, and close Linode Support tickets. You can also create and manage your Support ticket replies.'
  - name: Tags
    description: 'Tags allow you to organize and group your various Linode services. Use the Tags endpoints to create, assign, and delete your account tags.'
  - name: Volumes
    description: 'Volumes is Linode''s block storage service. Use the Volumes endpoints to create, attach, and manage your account Volumes.'
components:
  schemas:
    LKECluster:
      type: object
      description: A Kubernetes cluster.
      properties:
        id:
          type: integer
          description: This Kubernetes cluster's unique ID.
          readOnly: true
          x-linode-cli-display: 1
          example: 1234
        created:
          type: string
          format: date-time
          description: When this Kubernetes cluster was created.
          example: '2019-09-12T21:25:30Z'
          readOnly: true
        updated:
          type: string
          format: date-time
          description: When this Kubernetes cluster was updated.
          example: '2019-09-13T21:24:16Z'
          readOnly: true
        label:
          type: string
          description: |
            This Kubernetes cluster's unique label for display purposes only.
            Labels have the following constraints:

              * UTF-8 characters will be returned by the API using escape
                sequences of their Unicode code points. For example, the
                Japanese character *„Åã* is 3 bytes in UTF-8 (`0xE382AB`). Its
                Unicode code point is 2 bytes (`0x30AB`). APIv4 supports this
                character and the API will return it as the escape sequence
                using six 1 byte characters which represent 2 bytes of Unicode
                code point (`"\u30ab"`).
              * 4 byte UTF-8 characters are not supported.
              * If the label is entirely composed of UTF-8 characters, the API
                response will return the code points using up to 193 1 byte
                characters.
          minLength: 1
          maxLength: 32
          x-linode-filterable: true
          x-linode-cli-display: 2
          example: lkecluster12345
        region:
          type: string
          description: This Kubernetes cluster's location.
          x-linode-filterable: true
          x-linode-cli-display: 3
          example: us-central
        k8s_version:
          type: string
          description: |
            The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version will be deployed.
          x-linode-filterable: true
          x-linode-cli-display: 4
          example: '1.25'
        control_plane:
          type: object
          description: |
            Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.
          properties:
            high_availability:
              type: boolean
              description: |
                Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to `false`.
              x-linode-cli-display: 5
              example: true
        tags:
          x-linode-filterable: true
          type: array
          description: |
            An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
          items:
            type: string
          example:
            - ecomm
            - blogs
    PaginationEnvelope:
      type: object
      description: |
        An envelope for paginated response. When accessing a collection through a GET endpoint, the results are wrapped in this envelope which includes metadata about those results. Results are presented within a `data` array. See [Pagination](/docs/api/#pagination) for more information.
      properties:
        pages:
          type: integer
          readOnly: true
          description: 'The total number of [pages](/docs/api/#pagination).'
          example: 1
        page:
          type: integer
          readOnly: true
          description: 'The current [page](/docs/api/#pagination).'
          example: 1
        results:
          type: integer
          readOnly: true
          description: The total number of results.
          example: 1
    ErrorObject:
      type: object
      description: |
        An object for describing a single error that occurred during the processing of a request.
      properties:
        reason:
          type: string
          description: |
            What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.
          example: fieldname must be a valid value
        field:
          type: string
          description: |
            The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.
          example: fieldname
    LKENodePoolRequestBody:
      type: object
      description: |
        Specifies a collection of Linodes which will be members of a Kubernetes cluster.
      properties:
        autoscaler:
          type: object
          description: |
            When enabled, the number of nodes autoscales within the defined minimum and maximum values.

            When making a request, `max` and `min` require each other.
          properties:
            enabled:
              type: boolean
              description: Whether autoscaling is enabled for this Node Pool. Defaults to `false`.
              example: true
            max:
              type: integer
              minimum: 1
              maximum: 100
              description: |
                The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`. Defaults to the value provided by the `count` field.
              example: 12
            min:
              type: integer
              minimum: 1
              maximum: 100
              description: The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`.
              example: 3
        type:
          $ref: '#/components/schemas/LKENodePool/properties/type'
        count:
          $ref: '#/components/schemas/LKENodePool/properties/count'
        disks:
          type: array
          x-linode-cli-format: json
          description: |
            **Note**: This field should be omitted except for special use cases. The disks specified here are
            partitions in *addition* to the primary partition and reduce the size of the primary partition,
            which can lead to stability problems for the Node.

            This Node Pool's custom disk layout. Each item in this array will create a new disk
            partition for each node in this Node Pool.

              * The custom disk layout is applied to each node in this Node Pool.
              * The maximum number of custom disk partitions that can be configured is 7.
              * Once the requested disk paritions are allocated, the remaining disk space is allocated to the node's boot disk.
              * A Node Pool's custom disk layout is immutable over the lifetime of the Node Pool.
          items:
            $ref: '#/components/schemas/LKENodePool/properties/disks/items'
        tags:
          $ref: '#/components/schemas/LKENodePool/properties/tags'
    LKENodePool:
      type: object
      description: |
        The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.
      properties:
        autoscaler:
          type: object
          description: |
            When enabled, the number of nodes autoscales within the defined minimum and maximum values.
          properties:
            enabled:
              type: boolean
              description: Whether autoscaling is enabled for this Node Pool. Defaults to `false`.
              example: true
            max:
              type: integer
              minimum: 1
              maximum: 100
              description: The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`.
              example: 12
            min:
              type: integer
              minimum: 1
              maximum: 100
              description: The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`.
              example: 3
        type:
          type: string
          description: The Linode Type for all of the nodes in the Node Pool.
          example: g6-standard-4
        count:
          type: integer
          description: The number of nodes in the Node Pool.
          minimum: 1
          maximum: 100
          example: 6
        disks:
          type: array
          x-linode-cli-format: json
          description: |
            This Node Pool's custom disk layout.
          items:
            type: object
            description: |
              The values to assign to each partition in this Node Pool's custom disk layout.
            properties:
              size:
                description: |
                  The size of this custom disk partition in MB.

                    * The size of this disk partition must not exceed the capacity of the node's plan type.
                type: integer
                example: 1024
              type:
                description: |
                  This custom disk partition's filesystem type.
                type: string
                enum:
                  - raw
                  - ext4
                example: ext-4
        id:
          type: integer
          description: |
            This Node Pool's unique ID.
          x-linode-filterable: true
          example: 456
        nodes:
          type: array
          description: |
            Status information for the Nodes which are members of this Node Pool. If a Linode has not been provisioned for a given Node slot, the instance_id will be returned as null.
          items:
            $ref: '#/components/schemas/LKENodeStatus'
        tags:
          x-linode-filterable: true
          description: |
            An array of tags applied to this object. Tags are for organizational purposes only.
          type: array
          items:
            type: string
          example:
            - example tag
            - another example
    LKENodeStatus:
      type: object
      description: |
        Status information for a Node which is a member of a Kubernetes cluster.
      readOnly: true
      properties:
        id:
          type: string
          description: |
            The Node's ID.
          example: '123456'
        instance_id:
          type: string
          description: |
            The Linode's ID. When no Linode is currently provisioned for this Node, this will be null.
          example: 123458
        status:
          type: string
          description: |
            The Node's status as it pertains to being a Kubernetes node.
          enum:
            - ready
            - not_ready
          example: ready
    LKEVersion:
      type: object
      description: |
        LKE versions
      readOnly: true
      properties:
        id:
          type: string
          description: |
            A Kubernetes version number available for deployment to a Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version.
          example: '1.25'
  parameters:
    pageOffset:
      name: page
      in: query
      description: The page of a collection to return.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page_size
      in: query
      description: The number of items to return per page.
      schema:
        type: integer
        minimum: 25
        maximum: 500
        default: 100
  responses:
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorObject'
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://login.linode.com/oauth/authorize'
          tokenUrl: 'https://login.linode.com/oauth/token'
          scopes:
            'account:read_only': Allows access to GET information about your Account.
            'account:read_write': Allows access to all endpoints related to your Account.
            'domains:read_only': Allows access to GET Domains on your Account.
            'domains:read_write': Allows access to all Domain endpoints.
            'events:read_only': Allows access to GET your Events.
            'events:read_write': Allows access to all endpoints related to your Events.
            'firewall:read_only': Allows access to GET information about your Firewalls.
            'firewall:read_write': Allows acces to all Firewall endpoints.
            'images:read_only': Allows access to GET your Images.
            'images:read_write': Allows access to all endpoints related to your Images.
            'ips:read_only': Allows access to GET your ips.
            'ips:read_write': Allows access to all endpoints related to your ips.
            'linodes:read_only': Allows access to GET Linodes on your Account.
            'linodes:read_write': Allow access to all endpoints related to your Linodes.
            'lke:read_only': Allows access to GET LKE Clusters on your Account.
            'lke:read_write': Allows access to all endpoints related to LKE Clusters on your Account.
            'longview:read_only': Allows access to GET your Longview Clients.
            'longview:read_write': Allows access to all endpoints related to your Longview Clients.
            'nodebalancers:read_only': Allows access to GET NodeBalancers on your Account.
            'nodebalancers:read_write': Allows access to all NodeBalancer endpoints.
            'object_storage:read_only': Allows access to GET information related to your Object Storage.
            'object_storage:read_write': Allows access to all Object Storage endpoints.
            'stackscripts:read_only': Allows access to GET your StackScripts.
            'stackscripts:read_write': Allows access to all endpoints related to your StackScripts.
            'volumes:read_only': Allows access to GET your Volumes.
            'volumes:read_write': Allows access to all endpoints related to your Volumes.
  links:
    bootLinode:
      operationId: bootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebootLinode:
      operationId: rebootLinodeInstance
      parameters:
        linodeId: $request.body#/id
    shutdownLinode:
      operationId: shutdownLinodeInstance
      parameters:
        linodeId: $request.body#/id
    updateLinode:
      operationId: updateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    deleteLinode:
      operationId: deleteLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rebuildLinode:
      operationId: rebuildLinodeInstance
      parameters:
        linodeId: $request.body#/id
    mutateLinode:
      operationId: mutateLinodeInstance
      parameters:
        linodeId: $request.body#/id
    resizeLinode:
      operationId: resizeLinodeInstance
      parameters:
        linodeId: $request.body#/id
    rescueLinode:
      operationId: rescueLinodeInstance
      parameters:
        linodeId: $request.body#/id
    cloneLinode:
      operationId: cloneLinodeInstance
      parameters:
        linodeId: $request.body#/id
    attachVolume:
      operationId: attachVolume
      parameters:
        volumeID: $request.body#/id
    cloneVolume:
      operationId: cloneVolume
      parameters:
        volumeId: $request.body#/id
    detachVolume:
      operationId: detachVolume
      parameters:
        volumeId: $request.body#/id
    resizeVolume:
      operationId: resizeVolume
      parameters:
        volumeId: $request.body#/id
  x-stackQL-resources:
    clusters:
      id: linode.lke.clusters
      name: clusters
      title: Clusters
      methods:
        getLKEClusters:
          operation:
            $ref: '#/paths/~1lke~1clusters/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getLKEClusters:
          operation:
            $ref: '#/paths/~1lke~1clusters/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createLKECluster:
          operation:
            $ref: '#/paths/~1lke~1clusters/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getLKECluster:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getLKECluster:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        putLKECluster:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteLKECluster:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postLKEClusterRecycle:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1recycle/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postLKEClusterRegenerate:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1regenerate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postLKECServiceTokenDelete:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1servicetoken/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/getLKEClusters'
          - $ref: '#/components/x-stackQL-resources/clusters/methods/getLKECluster'
        insert:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/createLKECluster'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/deleteLKECluster'
    clusters_pools:
      id: linode.lke.clusters_pools
      name: clusters_pools
      title: Clusters Pools
      methods:
        getLKEClusterPools:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1pools/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getLKEClusterPools:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1pools/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postLKEClusterPools:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1pools/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getLKENodePool:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1pools~1{poolId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getLKENodePool:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1pools~1{poolId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        putLKENodePool:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1pools~1{poolId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteLKENodePool:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1pools~1{poolId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postLKEClusterPoolRecycle:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1pools~1{poolId}~1recycle/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/clusters_pools/methods/getLKEClusterPools'
          - $ref: '#/components/x-stackQL-resources/clusters_pools/methods/getLKENodePool'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/clusters_pools/methods/deleteLKENodePool'
    clusters_nodes:
      id: linode.lke.clusters_nodes
      name: clusters_nodes
      title: Clusters Nodes
      methods:
        getLKEClusterNode:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1nodes~1{nodeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getLKEClusterNode:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1nodes~1{nodeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteLKEClusterNode:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1nodes~1{nodeId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        postLKEClusterNodeRecycle:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1nodes~1{nodeId}~1recycle/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/clusters_nodes/methods/getLKEClusterNode'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/clusters_nodes/methods/deleteLKEClusterNode'
    clusters_api_endpoints:
      id: linode.lke.clusters_api_endpoints
      name: clusters_api_endpoints
      title: Clusters Api Endpoints
      methods:
        getLKEClusterAPIEndpoints:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1api-endpoints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getLKEClusterAPIEndpoints:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1api-endpoints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/clusters_api_endpoints/methods/getLKEClusterAPIEndpoints'
        insert: []
        update: []
        delete: []
    clusters_dashboard:
      id: linode.lke.clusters_dashboard
      name: clusters_dashboard
      title: Clusters Dashboard
      methods:
        getLKEClusterDashboard:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1dashboard/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getLKEClusterDashboard:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1dashboard/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/clusters_dashboard/methods/getLKEClusterDashboard'
        insert: []
        update: []
        delete: []
    clusters_kubeconfig:
      id: linode.lke.clusters_kubeconfig
      name: clusters_kubeconfig
      title: Clusters Kubeconfig
      methods:
        getLKEClusterKubeconfig:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1kubeconfig/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $
        _getLKEClusterKubeconfig:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1kubeconfig/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteLKEClusterKubeconfig:
          operation:
            $ref: '#/paths/~1lke~1clusters~1{clusterId}~1kubeconfig/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/clusters_kubeconfig/methods/getLKEClusterKubeconfig'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/clusters_kubeconfig/methods/deleteLKEClusterKubeconfig'
    versions:
      id: linode.lke.versions
      name: versions
      title: Versions
      methods:
        getLKEVersions:
          operation:
            $ref: '#/paths/~1lke~1versions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getLKEVersions:
          operation:
            $ref: '#/paths/~1lke~1versions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getLKEVersion:
          operation:
            $ref: '#/paths/~1lke~1versions~1{version}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _getLKEVersion:
          operation:
            $ref: '#/paths/~1lke~1versions~1{version}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/versions/methods/getLKEVersions'
          - $ref: '#/components/x-stackQL-resources/versions/methods/getLKEVersion'
        insert: []
        update: []
        delete: []
paths:
  /lke/clusters:
    get:
      operationId: getLKEClusters
      x-linode-cli-action: clusters-list
      x-linode-grant: read_only
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_only'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubernetes Clusters List
      description: |
        Lists current Kubernetes clusters available on your account.
      responses:
        '200':
          description: Returns an array of all Kubernetes clusters on your Account.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LKECluster'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  https://api.linode.com/v4/lke/clusters
        - lang: CLI
          source: |
            linode-cli lke clusters-list
    post:
      operationId: createLKECluster
      x-linode-cli-action: cluster-create
      x-linode-charge: true
      x-linode-grant: add_clusters
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubernetes Cluster Create
      description: |
        Creates a Kubernetes cluster. The Kubernetes cluster will be created
        asynchronously. You can use the events system to determine when the
        Kubernetes cluster is ready to use. Please note that it often takes 2-5 minutes before the
        [Kubernetes API server endpoint](/docs/api/linode-kubernetes-engine-lke/#kubernetes-api-endpoints-list) and
        the [Kubeconfig file](/docs/api/linode-kubernetes-engine-lke/#kubeconfig-view) for the new cluster
        are ready.
      requestBody:
        description: Configuration for the Kubernetes cluster
        x-linode-cli-allowed-defaults:
          - region
        content:
          application/json:
            schema:
              type: object
              required:
                - label
                - region
                - k8s_version
                - node_pools
              properties:
                label:
                  $ref: '#/components/schemas/LKECluster/properties/label'
                region:
                  $ref: '#/components/schemas/LKECluster/properties/region'
                k8s_version:
                  $ref: '#/components/schemas/LKECluster/properties/k8s_version'
                tags:
                  $ref: '#/components/schemas/LKECluster/properties/tags'
                node_pools:
                  type: array
                  required:
                    - type
                    - count
                  items:
                    $ref: '#/components/schemas/LKENodePoolRequestBody'
                control_plane:
                  type: object
                  description: |
                    Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Availability for LKE is an **irreversible** change.
                  properties:
                    high_availability:
                      type: boolean
                      description: |
                        Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to `false`.
                      example: true
      responses:
        '200':
          description: Kubernetes cluster creation has started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LKECluster'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $TOKEN" \
                  -X POST -d '{
                    "label": "cluster12345",
                    "region": "us-central",
                    "k8s_version": "1.25",
                    "tags": ["ecomm", "blogs"],
                    "control_plane": {
                        "high_availability": true
                      },
                    "node_pools": [
                      {
                        "type": "g6-standard-4",
                        "count": 6,
                        "autoscaler": {
                          "enabled": true,
                          "max": 12,
                          "min": 3
                        }
                      },
                      {
                        "type": "g6-standard-8",
                        "count": 3
                      }
                    ]
                  }' \
                  https://api.linode.com/v4/lke/clusters
        - lang: CLI
          source: |
            linode-cli lke cluster-create \
              --label cluster12345 \
              --region us-central \
              --k8s_version 1.25 \
              --control_plane.high_availability true \
              --node_pools.type g6-standard-4 --node_pools.count 6 \
              --node_pools.type g6-standard-8 --node_pools.count 3 \
              --node_pools.autoscaler.enabled true \
              --node_pools.autoscaler.max 12 \
              --node_pools.autoscaler.min 3 \
              --tags ecomm
  '/lke/clusters/{clusterId}':
    get:
      operationId: getLKECluster
      x-linode-cli-action: cluster-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_only'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubernetes Cluster View
      description: |
        Get a specific Cluster by ID.
      responses:
        '200':
          description: Returns a single Kubernetes cluster.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LKECluster'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  https://api.linode.com/v4/lke/clusters/12345
        - lang: CLI
          source: linode-cli lke cluster-view 12345
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
    put:
      operationId: putLKECluster
      x-linode-cli-action: cluster-update
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubernetes Cluster Update
      description: |
        Updates a Kubernetes cluster.
      requestBody:
        description: The fields to update the Kubernetes cluster.
        content:
          application/json:
            schema:
              properties:
                label:
                  $ref: '#/components/schemas/LKECluster/properties/label'
                tags:
                  type: array
                  items:
                    type: string
                  example:
                    - prod
                    - monitoring
                    - ecomm
                    - blog
                  description: |
                    An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only. To delete a tag, exclude it from your `tags` array.
                k8s_version:
                  type: string
                  description: |
                    The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;. New and recycled Nodes in this cluster will be installed with the latest available patch for the Cluster's Kubernetes version.

                    When upgrading the Kubernetes version, only the next latest minor version following the current version can be deployed. For example, a cluster with Kubernetes version 1.19 can be upgraded to version 1.20, but not directly to 1.21.

                    The Kubernetes version of a cluster can not be downgraded.
                control_plane:
                  type: object
                  description: |
                    Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components.

                    Enabling High Availability for LKE is an **irreversible** change.

                    When upgrading pre-existing LKE clusters to use the HA Control Plane, the following changes will additionally occur:

                    - All nodes will be deleted and new nodes will be created to replace them.

                    - Any local storage (such as `hostPath` volumes) will be erased.

                    - The upgrade process may take several minutes to complete, as nodes will be replaced on a rolling basis.
                  properties:
                    high_availability:
                      type: boolean
                      description: |
                        Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to `false`.
                      example: true
      responses:
        '200':
          description: Returns a single Kubernetes cluster.
          content:
            application/json:
              schema:
                properties:
                  label:
                    $ref: '#/components/schemas/LKECluster/properties/label'
                  tags:
                    type: array
                    items:
                      type: string
                    example:
                      - prod
                      - monitoring
                      - ecomm
                      - blog
                    description: |
                      An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only. To delete a tag, exclude it from your `tags` array.
                  created:
                    $ref: '#/components/schemas/LKECluster/properties/created'
                  updated:
                    $ref: '#/components/schemas/LKECluster/properties/updated'
                  region:
                    $ref: '#/components/schemas/LKECluster/properties/region'
                  k8s_version:
                    $ref: '#/components/schemas/LKECluster/properties/k8s_version'
                type: object
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $TOKEN" \
                  -X PUT -d '{
                    "label": "lkecluster54321"
                    "tags" : ["ecomm", "blog", "prod", "monitoring"]
                    "control_plane": {
                        "high_availability": true
                      },
                    "k8s_version": "1.17"
                  }' \
                  https://api.linode.com/v4/lke/clusters/12345
        - lang: CLI
          source: |
            linode-cli lke cluster-update 12345 \
              --label lkecluster54321 \
              --control_plane.high_availability true \
              --k8s_version 1.25 \
              --tags ecomm \
              --tags blog \
              --tags prod \
              --tags monitoring
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
    delete:
      operationId: deleteLKECluster
      x-linode-cli-action: cluster-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubernetes Cluster Delete
      description: |
        Deletes a Cluster you have permission to `read_write`.

        **Deleting a Cluster is a destructive action and cannot be undone.**

        Deleting a Cluster:
          - Deletes all Linodes in all pools within this Kubernetes cluster
          - Deletes all supporting Kubernetes services for this Kubernetes
            cluster (API server, etcd, etc)
          - Deletes all NodeBalancers created by this Kubernetes cluster
          - Does not delete any of the volumes created by this Kubernetes
            cluster
      responses:
        '200':
          description: Delete successful
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  -X DELETE \
                  https://api.linode.com/v4/lke/clusters/12345
        - lang: CLI
          source: |
            linode-cli lke cluster-delete 12345
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
  '/lke/clusters/{clusterId}/pools':
    get:
      operationId: getLKEClusterPools
      x-linode-cli-action: pools-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_only'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Node Pools List
      description: |
        Returns all active Node Pools on a Kubernetes cluster.
      responses:
        '200':
          description: Returns an array of all Pools in this Kubernetes cluster.
          content:
            application/json:
              x-linode-cli-nested-list: nodes
              x-linode-cli-use-schema:
                type: object
                properties:
                  id:
                    x-linode-cli-display: 1
                  type:
                    x-linode-cli-display: 2
                  nodes.id:
                    x-linode-cli-display: 3
                  nodes.instance_id:
                    x-linode-cli-display: 4
                  nodes.status:
                    x-linode-cli-display: 5
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LKENodePool'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  https://api.linode.com/v4/lke/clusters/12345/pools
        - lang: CLI
          source: |
            linode-cli lke pools-list 12345
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
    post:
      operationId: postLKEClusterPools
      x-linode-cli-action: pool-create
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Node Pool Create
      description: |
        Creates a new Node Pool for the designated Kubernetes cluster.
      requestBody:
        description: Configuration for the Node Pool
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - count
              allOf:
                - $ref: '#/components/schemas/LKENodePoolRequestBody'
      responses:
        '200':
          description: Node Pool has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LKENodePool'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $TOKEN" \
                  -X POST -d '{
                    "type": "g6-standard-4",
                    "count": 6,
                    "tags": ["example-tag"],
                    "autoscaler": {
                      "enabled": true,
                      "max": 12,
                      "min": 3
                    }
                  }' \
                  https://api.linode.com/v4/lke/clusters/12345/pools
        - lang: CLI
          source: |
            linode-cli lke pool-create 12345 \
              --type g6-standard-4 \
              --count 6 \
              --tags example-tag \
              --autoscaler.enabled true \
              --autoscaler.max 12 \
              --autoscaler.min 3
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
  '/lke/clusters/{clusterId}/recycle':
    post:
      operationId: postLKEClusterRecycle
      x-linode-cli-action: cluster-nodes-recycle
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Cluster Nodes Recycle
      description: |
        Recycles all nodes in all pools of a designated Kubernetes Cluster. All Linodes within the Cluster will be deleted
        and replaced with new Linodes on a rolling basis, which may take several minutes. Replacement Nodes are
        installed with the latest available [patch version](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/release/versioning.md#kubernetes-release-versioning) for the Cluster's current Kubernetes minor release.

        **Any local storage on deleted Linodes (such as "hostPath" and "emptyDir" volumes, or "local" PersistentVolumes) will be erased.**
      responses:
        '200':
          description: Recycle request succeeded and is in progress.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $TOKEN" \
                  -X POST \
                  https://api.linode.com/v4/lke/clusters/12345/recycle
        - lang: CLI
          source: |
            linode-cli lke cluster-nodes-recycle 12345
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster which contains nodes to be recycled.
          required: true
          schema:
            type: integer
  '/lke/clusters/{clusterId}/pools/{poolId}':
    get:
      operationId: getLKENodePool
      x-linode-cli-action: pool-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_only'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Node Pool View
      description: |
        Get a specific Node Pool by ID.
      responses:
        '200':
          description: Returns the requested Node Pool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LKENodePool'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  https://api.linode.com/v4/lke/clusters/12345/pools/456
        - lang: CLI
          source: |
            linode-cli lke pool-view 12345 456
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
        - name: poolId
          in: path
          description: ID of the Pool to look up
          required: true
          schema:
            type: integer
    put:
      operationId: putLKENodePool
      x-linode-cli-action: pool-update
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Node Pool Update
      description: |
        Updates a Node Pool's count and autoscaler configuration.

        Linodes will be created or deleted to match changes to the Node Pool's count.

        **Any local storage on deleted Linodes (such as "hostPath" and "emptyDir" volumes, or "local" PersistentVolumes) will be erased.**
      requestBody:
        description: The fields to update
        content:
          application/json:
            schema:
              properties:
                count:
                  $ref: '#/components/schemas/LKENodePoolRequestBody/properties/count'
                autoscaler:
                  $ref: '#/components/schemas/LKENodePoolRequestBody/properties/autoscaler'
      responses:
        '200':
          description: Node Pool was successfully modified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LKENodePool'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $TOKEN" \
                  -X PUT -d '{
                    "count": 6,
                    "autoscaler": {
                      "enabled": true,
                      "max": 12,
                      "min": 3
                  }' \
                  https://api.linode.com/v4/lke/clusters/12345/pools/456
        - lang: CLI
          source: |
            linode-cli lke pool-update 12345 456 \
              --count 6 \
              --autoscaler.enabled true \
              --autoscaler.max 12 \
              --autoscaler.min 3
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
        - name: poolId
          in: path
          description: ID of the Pool to look up
          required: true
          schema:
            type: integer
    delete:
      operationId: deleteLKENodePool
      x-linode-cli-action: pool-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Node Pool Delete
      description: |
        Delete a specific Node Pool from a Kubernetes cluster.

        **Deleting a Node Pool is a destructive action and cannot be undone.**

        Deleting a Node Pool will delete all Linodes within that Pool.
      responses:
        '200':
          description: Delete successful
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  -X DELETE \
                  https://api.linode.com/v4/lke/clusters/12345/pools/456
        - lang: CLI
          source: |
            linode-cli lke pool-delete 12345 456
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
        - name: poolId
          in: path
          description: ID of the Pool to look up
          required: true
          schema:
            type: integer
  '/lke/clusters/{clusterId}/pools/{poolId}/recycle':
    post:
      operationId: postLKEClusterPoolRecycle
      x-linode-cli-action: pool-recycle
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Node Pool Recycle
      description: |
        Recycles a Node Pool for the designated Kubernetes Cluster. All Linodes within the Node Pool will be deleted
        and replaced with new Linodes on a rolling basis, which may take several minutes. Replacement Nodes are
        installed with the latest available patch for the Cluster's Kubernetes Version.

        **Any local storage on deleted Linodes (such as "hostPath" and "emptyDir" volumes, or "local" PersistentVolumes) will be erased.**
      responses:
        '200':
          description: Recycle request succeeded and is in progress.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $TOKEN" \
                  -X POST \
                  https://api.linode.com/v4/lke/clusters/12345/pools/456/recycle
        - lang: CLI
          source: |
            linode-cli lke pool-recycle 12345 456
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster this Node Pool is attached to.
          required: true
          schema:
            type: integer
        - name: poolId
          in: path
          description: ID of the Node Pool to be recycled.
          required: true
          schema:
            type: integer
  '/lke/clusters/{clusterId}/nodes/{nodeId}':
    get:
      operationId: getLKEClusterNode
      x-linode-cli-action: node-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Node View
      description: |
        Returns the values for a specified node object.
      responses:
        '200':
          description: Returns the values of a node object in the form that it appears currently in the node pool array.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    readOnly: true
                    description: |
                      The Node's ID.
                    example: 12345-6aa78910bc
                  instance_id:
                    type: integer
                    description: |
                      The Linode's ID. If no Linode is currently provisioned for this Node, this is `null`.
                    example: 123456
                  status:
                    type: string
                    description: |
                      The creation status of this Node. This status is distinct from this Node's readiness as a Kubernetes Node Object as determined by the command `kubectl get nodes`.

                      `not_ready` indicates that the Linode is still being created.

                      `ready` indicates that the Linode has successfully been created and is running Kubernetes software.
                    enum:
                      - ready
                      - not_ready
                    example: ready
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  https://api.linode.com/v4/lke/clusters/12345/nodes/12345-6aa78910bc
        - lang: CLI
          source: |
            linode-cli lke node-view 123456 12345-6aa78910bc
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster containing the Node.
          required: true
          schema:
            type: integer
        - name: nodeId
          in: path
          description: ID of the Node to look up.
          required: true
          schema:
            type: string
    delete:
      operationId: deleteLKEClusterNode
      x-linode-cli-action: node-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Node Delete
      description: |
        Deletes a specific Node from a Node Pool.

        **Deleting a Node is a destructive action and cannot be undone.**

        Deleting a Node will reduce the size of the Node Pool it belongs to.
      responses:
        '200':
          description: Delete successful
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  -X DELETE \
                  https://api.linode.com/v4/lke/clusters/12345/nodes/12345-6aa78910bc
        - lang: CLI
          source: |
            linode-cli lke node-delete 12345 12345-6aa78910bc
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster containing the Node.
          required: true
          schema:
            type: integer
        - name: nodeId
          in: path
          description: ID of the Node to look up.
          required: true
          schema:
            type: string
  '/lke/clusters/{clusterId}/nodes/{nodeId}/recycle':
    post:
      operationId: postLKEClusterNodeRecycle
      x-linode-cli-action: node-recycle
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Node Recycle
      description: |
        Recycles an individual Node in the designated Kubernetes Cluster. The Node will be deleted
        and replaced with a new Linode, which may take a few minutes. Replacement Nodes are
        installed with the latest available patch for the Cluster's Kubernetes Version.

        **Any local storage on deleted Linodes (such as "hostPath" and "emptyDir" volumes, or "local" PersistentVolumes) will be erased.**
      responses:
        '200':
          description: Recycle request succeeded and is in progress.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $TOKEN" \
                  -X POST \
                  https://api.linode.com/v4/lke/clusters/12345/nodes/12345-6aa78910bc/recycle
        - lang: CLI
          source: |
            linode-cli lke node-recycle 12345 12345-6aa78910bc
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster containing the Node.
          required: true
          schema:
            type: integer
        - name: nodeId
          in: path
          description: ID of the Node to be recycled.
          required: true
          schema:
            type: string
  '/lke/clusters/{clusterId}/api-endpoints':
    get:
      operationId: getLKEClusterAPIEndpoints
      x-linode-cli-action: api-endpoints-list
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_only'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubernetes API Endpoints List
      description: |
        List the Kubernetes API server endpoints for this cluster. Please note that it often takes 2-5 minutes before the endpoint is ready after first [creating a new cluster](/docs/api/linode-kubernetes-engine-lke/#kubernetes-cluster-create).
      responses:
        '200':
          description: Returns the Kubernetes API server endpoints for this cluster.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      description: |
                        The Kubernetes API server endpoints for this cluster.
                      properties:
                        endpoint:
                          type: string
                          readOnly: true
                          description: |
                            A Kubernetes API server endpoint for this cluster.
                          example: 'https://192.0.2.1:6443'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  https://api.linode.com/v4/lke/clusters/12345/api-endpoints
        - lang: CLI
          source: |
            linode-cli lke api-endpoints-list 12345
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
  '/lke/clusters/{clusterId}/dashboard':
    get:
      operationId: getLKEClusterDashboard
      x-linode-cli-action: cluster-dashboard-url
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_only'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubernetes Cluster Dashboard URL View
      description: |
        Get a [Kubernetes Dashboard](https://github.com/kubernetes/dashboard) access URL for this Cluster, which enables performance of administrative tasks through a web interface.

        Dashboards are installed for Clusters by default.

        To access the Cluster Dashboard login prompt, enter the URL in a web browser. Select either **Token** or **Kubeconfig** authentication, then select **Sign in**.

        For additional guidance on using the Cluster Dashboard, see the [Navigating the Cluster Dashboard](/docs/guides/using-the-kubernetes-dashboard-on-lke/#navigating-the-cluster-dashboard) section of our guide on [Using the Kubernetes Dashboard on LKE](/docs/guides/using-the-kubernetes-dashboard-on-lke/).
      responses:
        '200':
          description: Returns a Kubernetes Cluster Dashboard URL.
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: 'https://example.dashboard.linodelke.net'
                    description: The Cluster Dashboard access URL.
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  https://api.linode.com/v4/lke/clusters/12345/dashboard
        - lang: CLI
          source: linode-cli lke cluster-dashboard-url 12345
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
  '/lke/clusters/{clusterId}/kubeconfig':
    get:
      operationId: getLKEClusterKubeconfig
      x-linode-cli-action: kubeconfig-view
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubeconfig View
      description: |
        Get the Kubeconfig file for a Cluster. Please note that it often takes 2-5 minutes before
        the Kubeconfig file is ready after first [creating a new cluster](/docs/api/linode-kubernetes-engine-lke/#kubernetes-cluster-create).
      responses:
        '200':
          description: Returns the Base64-encoded Kubeconfig file for this Kubernetes cluster.
          content:
            application/json:
              schema:
                type: object
                properties:
                  kubeconfig:
                    type: string
                    readOnly: true
                    description: |
                      The Base64-encoded Kubeconfig file for this Cluster.
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  https://api.linode.com/v4/lke/clusters/12345/kubeconfig
        - lang: CLI
          source: |
            linode-cli lke kubeconfig-view 12345
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
    delete:
      operationId: deleteLKEClusterKubeconfig
      x-linode-cli-action: kubeconfig-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubeconfig Delete
      description: |
        Delete and regenerate the Kubeconfig file for a Cluster.
      responses:
        '200':
          description: Kubeconfig file deleted and regenerated successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  -X DELETE \
                  https://api.linode.com/v4/lke/clusters/12345/kubeconfig
        - lang: CLI
          source: |
            linode-cli lke kubeconfig-delete 12345
      parameters:
        - name: clusterId
          in: path
          description: ID of the Kubernetes cluster to look up.
          required: true
          schema:
            type: integer
  '/lke/clusters/{clusterId}/regenerate':
    post:
      operationId: postLKEClusterRegenerate
      x-linode-cli-action: regenerate
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubernetes Cluster Regenerate
      description: |
        Regenerate the Kubeconfig file and/or the service account token for a Cluster.

        This is a helper command that allows performing both the [Kubeconfig Delete](#kubeconfig-delete) and the [Service Token Delete](#service-token-delete) actions with a single request.

        When using this command, at least one of `kubeconfig` or `servicetoken` is required.

        **Note**: When regenerating a service account token, the Cluster's control plane components and Linode CSI drivers are also restarted and configured with the new token. High Availability Clusters should not experience any disruption, while standard Clusters may experience brief control plane downtime while components are restarted.
      requestBody:
        description: The Kubernetes Cluster Regenerate request object.
        content:
          application/json:
            schema:
              properties:
                kubeconfig:
                  type: boolean
                  default: false
                  example: true
                  description: |
                    Whether to delete and regenerate the Kubeconfig file for this Cluster.
                servicetoken:
                  type: boolean
                  default: false
                  example: true
                  description: |
                    Whether to delete and regenerate the service access token for this Cluster.
      responses:
        '200':
          description: Regenerate request successful.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $TOKEN" \
                  -X POST -d '{
                    "kubeconfig": true;
                    "servicetoken": true
                  }' \
                  https://api.linode.com/v4/lke/clusters/12345/regenerate
        - lang: CLI
          source: |
            linode-cli lke regenerate 12345 \
                --kubeconfig true \
                --servicetoken true
      parameters:
        - name: clusterId
          in: path
          description: ID of the target Kubernetes cluster.
          required: true
          schema:
            type: integer
  '/lke/clusters/{clusterId}/servicetoken':
    delete:
      operationId: postLKECServiceTokenDelete
      x-linode-cli-action: service-token-delete
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_write'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Service Token Delete
      description: |
        Delete and regenerate the service account token for a Cluster.

        **Note**: When regenerating a service account token, the Cluster's control plane components and Linode CSI drivers are also restarted and configured with the new token. High Availability Clusters should not experience any disruption, while standard Clusters may experience brief control plane downtime while components are restarted.
      responses:
        '200':
          description: Service token deleted and regenerated successfully.
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  -X DELETE \
                  https://api.linode.com/v4/lke/clusters/12345/servicetoken
        - lang: CLI
          source: |
            linode-cli lke service-token-delete 12345
      parameters:
        - name: clusterId
          in: path
          description: ID of the target Kubernetes cluster.
          required: true
          schema:
            type: integer
  /lke/versions:
    get:
      operationId: getLKEVersions
      x-linode-cli-action: versions-list
      x-linode-grant: read_only
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_only'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubernetes Versions List
      description: |
        List the Kubernetes versions available for deployment to a Kubernetes cluster.
      responses:
        '200':
          description: |
            Returns a list of Kubernetes versions available for deployment to a Kubernetes cluster.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LKEVersion'
                  page:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/page'
                  pages:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/pages'
                  results:
                    $ref: '#/components/schemas/PaginationEnvelope/properties/results'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  https://api.linode.com/v4/lke/versions
        - lang: CLI
          source: |
            linode-cli lke versions-list
  '/lke/versions/{version}':
    get:
      operationId: getLKEVersion
      x-linode-cli-action: version-view
      x-linode-grant: read_only
      security:
        - personalAccessToken: []
        - oauth:
            - 'lke:read_only'
      tags:
        - Linode Kubernetes Engine (LKE)
      summary: Kubernetes Version View
      description: |
        View a Kubernetes version available for deployment to a Kubernetes cluster.
      responses:
        '200':
          description: |
            Returns a Kubernetes version object that is available for deployment to a Kubernetes cluster.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LKEVersion'
        default:
          $ref: '#/components/responses/ErrorResponse'
      x-code-samples:
        - lang: Shell
          source: |
            curl -H "Authorization: Bearer $TOKEN" \
                  https://api.linode.com/v4/lke/versions/1.25
        - lang: CLI
          source: |
            linode-cli lke version-view 1.25
      parameters:
        - name: version
          in: path
          required: true
          description: The LKE version to view.
          schema:
            type: string
