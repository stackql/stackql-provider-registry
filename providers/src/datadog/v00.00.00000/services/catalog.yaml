openapi: 3.0.0
info:
  title: catalog API
  description: datadog catalog API
  version: '1.0'
paths:
  /api/v2/apicatalog/api:
    get:
      deprecated: true
      description: List APIs and their IDs.
      operationId: ListAPIs
      parameters:
        - description: Filter APIs by name
          in: query
          name: query
          required: false
          schema:
            example: payments
            type: string
        - description: Number of items per page.
          in: query
          name: page[limit]
          required: false
          schema:
            default: 20
            format: int64
            minimum: 1
            type: integer
        - description: Offset for pagination.
          in: query
          name: page[offset]
          required: false
          schema:
            default: 0
            format: int64
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAPIsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_api_catalog_read
      summary: List APIs
      tags:
        - API Management
      x-permission:
        operator: OR
        permissions:
          - apm_api_catalog_read
      x-unstable: '**Note**: This endpoint is deprecated.'
  /api/v2/apicatalog/api/{id}:
    delete:
      deprecated: true
      description: Delete a specific API by ID.
      operationId: DeleteOpenAPI
      parameters:
        - description: ID of the API to delete
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ApiID'
      responses:
        '204':
          description: API deleted successfully
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: API not found error
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_api_catalog_write
      summary: Delete an API
      tags:
        - API Management
      x-permission:
        operator: OR
        permissions:
          - apm_api_catalog_write
      x-unstable: '**Note**: This endpoint is deprecated.'
  /api/v2/apicatalog/api/{id}/openapi:
    get:
      deprecated: true
      description: >-
        Retrieve information about a specific API in
        [OpenAPI](https://spec.openapis.org/oas/latest.html) format file.
      operationId: GetOpenAPI
      parameters:
        - description: ID of the API to retrieve
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ApiID'
      responses:
        '200':
          content:
            multipart/form-data:
              schema:
                format: binary
                type: string
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: API not found error
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_api_catalog_read
      summary: Get an API
      tags:
        - API Management
      x-permission:
        operator: OR
        permissions:
          - apm_api_catalog_read
      x-unstable: '**Note**: This endpoint is deprecated.'
    put:
      deprecated: true
      description: >
        Update information about a specific API. The given content will replace
        all API content of the given ID.

        The ID is returned by the create API, or can be found in the URL in the
        API catalog UI.
      operationId: UpdateOpenAPI
      parameters:
        - description: ID of the API to modify
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ApiID'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OpenAPIFile'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOpenAPIResponse'
          description: API updated successfully
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: API not found error
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_api_catalog_write
      summary: Update an API
      tags:
        - API Management
      x-permission:
        operator: OR
        permissions:
          - apm_api_catalog_write
      x-unstable: '**Note**: This endpoint is deprecated.'
  /api/v2/apicatalog/openapi:
    post:
      deprecated: true
      description: >
        Create a new API from the
        [OpenAPI](https://spec.openapis.org/oas/latest.html) specification
        given.

        See the [API Catalog
        documentation](https://docs.datadoghq.com/api_catalog/add_metadata/) for
        additional

        information about the possible metadata.

        It returns the created API ID.
      operationId: CreateOpenAPI
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OpenAPIFile'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOpenAPIResponse'
          description: API created successfully
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_api_catalog_write
      summary: Create a new API
      tags:
        - API Management
      x-permission:
        operator: OR
        permissions:
          - apm_api_catalog_write
      x-unstable: '**Note**: This endpoint is deprecated.'
  /api/v2/catalog/entity:
    get:
      description: Get a list of entities from Software Catalog.
      operationId: ListCatalogEntity
      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - description: Maximum number of entities in the response.
          example: 100
          in: query
          name: page[limit]
          required: false
          schema:
            default: 100
            format: int64
            type: integer
        - $ref: '#/components/parameters/FilterByID'
        - $ref: '#/components/parameters/FilterByRef'
        - $ref: '#/components/parameters/FilterByName'
        - $ref: '#/components/parameters/FilterByKind'
        - $ref: '#/components/parameters/FilterByOwner'
        - $ref: '#/components/parameters/FilterByRelationType'
        - $ref: '#/components/parameters/FilterByExcludeSnapshot'
        - $ref: '#/components/parameters/Include'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEntityCatalogResponse'
          description: OK
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_service_catalog_read
      summary: Get a list of entities
      tags:
        - Software Catalog
      x-pagination:
        limitParam: page[limit]
        pageOffsetParam: page[offset]
        resultsPath: data
    post:
      description: Create or update entities in Software Catalog.
      operationId: UpsertCatalogEntity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCatalogEntityRequest'
        description: Entity YAML or JSON.
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCatalogEntityResponse'
          description: ACCEPTED
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_service_catalog_write
      summary: Create or update entities
      tags:
        - Software Catalog
      x-codegen-request-body-name: body
  /api/v2/catalog/entity/{entity_id}:
    delete:
      description: Delete a single entity in Software Catalog.
      operationId: DeleteCatalogEntity
      parameters:
        - $ref: '#/components/parameters/EntityID'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_service_catalog_write
      summary: Delete a single entity
      tags:
        - Software Catalog
  /api/v2/catalog/kind:
    get:
      description: Get a list of entity kinds from Software Catalog.
      operationId: ListCatalogKind
      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - description: Maximum number of kinds in the response.
          example: 100
          in: query
          name: page[limit]
          required: false
          schema:
            default: 100
            format: int64
            type: integer
        - $ref: '#/components/parameters/FilterByID'
        - $ref: '#/components/parameters/FilterByName'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListKindCatalogResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_service_catalog_read
      summary: Get a list of entity kinds
      tags:
        - Software Catalog
      x-pagination:
        limitParam: page[limit]
        pageOffsetParam: page[offset]
        resultsPath: data
    post:
      description: Create or update kinds in Software Catalog.
      operationId: UpsertCatalogKind
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCatalogKindRequest'
        description: Kind YAML or JSON.
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCatalogKindResponse'
          description: ACCEPTED
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_service_catalog_write
      summary: Create or update kinds
      tags:
        - Software Catalog
      x-codegen-request-body-name: body
  /api/v2/catalog/kind/{kind_id}:
    delete:
      description: Delete a single kind in Software Catalog.
      operationId: DeleteCatalogKind
      parameters:
        - $ref: '#/components/parameters/KindID'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_service_catalog_write
      summary: Delete a single kind
      tags:
        - Software Catalog
  /api/v2/catalog/relation:
    get:
      description: Get a list of entity relations from Software Catalog.
      operationId: ListCatalogRelation
      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - description: Maximum number of relations in the response.
          example: 100
          in: query
          name: page[limit]
          required: false
          schema:
            default: 100
            format: int64
            type: integer
        - $ref: '#/components/parameters/FilterRelationByType'
        - $ref: '#/components/parameters/FilterRelationByFromRef'
        - $ref: '#/components/parameters/FilterRelationByToRef'
        - $ref: '#/components/parameters/RelationInclude'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRelationCatalogResponse'
          description: OK
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_service_catalog_read
      summary: Get a list of entity relations
      tags:
        - Software Catalog
      x-pagination:
        limitParam: page[limit]
        pageOffsetParam: page[offset]
        resultsPath: data
components:
  schemas:
    ListAPIsResponse:
      description: Response for `ListAPIs`.
      properties:
        data:
          description: List of API items.
          items:
            $ref: '#/components/schemas/ListAPIsResponseData'
          type: array
        meta:
          $ref: '#/components/schemas/ListAPIsResponseMeta'
      type: object
    JSONAPIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          items:
            $ref: '#/components/schemas/JSONAPIErrorItem'
          type: array
      required:
        - errors
      type: object
    ApiID:
      description: API identifier.
      example: 90646597-5fdb-4a17-a240-647003f8c028
      format: uuid
      type: string
    OpenAPIFile:
      description: Object for API data in an `OpenAPI` format as a file.
      properties:
        openapi_spec_file:
          description: Binary `OpenAPI` spec file
          format: binary
          type: string
      type: object
    UpdateOpenAPIResponse:
      description: Response for `UpdateOpenAPI`.
      properties:
        data:
          $ref: '#/components/schemas/UpdateOpenAPIResponseData'
      type: object
    CreateOpenAPIResponse:
      description: Response for `CreateOpenAPI` operation.
      properties:
        data:
          $ref: '#/components/schemas/CreateOpenAPIResponseData'
      type: object
    ListEntityCatalogResponse:
      description: List entity response.
      properties:
        data:
          $ref: '#/components/schemas/EntityResponseData'
        included:
          $ref: '#/components/schemas/ListEntityCatalogResponseIncluded'
        links:
          $ref: '#/components/schemas/ListEntityCatalogResponseLinks'
        meta:
          $ref: '#/components/schemas/EntityResponseMeta'
      type: object
    UpsertCatalogEntityRequest:
      description: Create or update entity request.
      oneOf:
        - $ref: '#/components/schemas/EntityV3'
        - $ref: '#/components/schemas/EntityRaw'
    UpsertCatalogEntityResponse:
      description: Upsert entity response.
      properties:
        data:
          $ref: '#/components/schemas/EntityResponseData'
        included:
          $ref: '#/components/schemas/UpsertCatalogEntityResponseIncluded'
        meta:
          $ref: '#/components/schemas/EntityResponseMeta'
      type: object
    ListKindCatalogResponse:
      description: List kind response.
      properties:
        data:
          $ref: '#/components/schemas/KindResponseData'
        meta:
          $ref: '#/components/schemas/KindResponseMeta'
      type: object
    UpsertCatalogKindRequest:
      description: Create or update kind request.
      oneOf:
        - $ref: '#/components/schemas/KindObj'
        - $ref: '#/components/schemas/KindRaw'
    UpsertCatalogKindResponse:
      description: Upsert kind response.
      properties:
        data:
          $ref: '#/components/schemas/KindResponseData'
        meta:
          $ref: '#/components/schemas/KindResponseMeta'
      type: object
    ListRelationCatalogResponse:
      description: List entity relation response.
      properties:
        data:
          $ref: '#/components/schemas/RelationResponseData'
        included:
          $ref: '#/components/schemas/ListRelationCatalogResponseIncluded'
        links:
          $ref: '#/components/schemas/ListRelationCatalogResponseLinks'
        meta:
          $ref: '#/components/schemas/RelationResponseMeta'
      type: object
    ListAPIsResponseData:
      description: Data envelope for `ListAPIsResponse`.
      properties:
        attributes:
          $ref: '#/components/schemas/ListAPIsResponseDataAttributes'
        id:
          $ref: '#/components/schemas/ApiID'
      type: object
    ListAPIsResponseMeta:
      description: Metadata for `ListAPIsResponse`.
      properties:
        pagination:
          $ref: '#/components/schemas/ListAPIsResponseMetaPagination'
      type: object
    JSONAPIErrorItem:
      description: API error response body
      properties:
        detail:
          description: >-
            A human-readable explanation specific to this occurrence of the
            error.
          example: Missing required attribute in body
          type: string
        meta:
          additionalProperties: {}
          description: Non-standard meta-information about the error
          type: object
        source:
          $ref: '#/components/schemas/JSONAPIErrorItemSource'
        status:
          description: Status code of the response.
          example: '400'
          type: string
        title:
          description: Short human-readable summary of the error.
          example: Bad Request
          type: string
      type: object
    APIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          example:
            - Bad Request
          items:
            description: A list of items.
            example: Bad Request
            type: string
          type: array
      required:
        - errors
      type: object
    UpdateOpenAPIResponseData:
      description: Data envelope for `UpdateOpenAPIResponse`.
      properties:
        attributes:
          $ref: '#/components/schemas/UpdateOpenAPIResponseAttributes'
        id:
          $ref: '#/components/schemas/ApiID'
      type: object
    CreateOpenAPIResponseData:
      description: Data envelope for `CreateOpenAPIResponse`.
      properties:
        attributes:
          $ref: '#/components/schemas/CreateOpenAPIResponseAttributes'
        id:
          $ref: '#/components/schemas/ApiID'
      type: object
    RelationType:
      description: Supported relation types.
      enum:
        - RelationTypeOwns
        - RelationTypeOwnedBy
        - RelationTypeDependsOn
        - RelationTypeDependencyOf
        - RelationTypePartsOf
        - RelationTypeHasPart
        - RelationTypeOtherOwns
        - RelationTypeOtherOwnedBy
        - RelationTypeImplementedBy
        - RelationTypeImplements
      type: string
      x-enum-varnames:
        - RELATIONTYPEOWNS
        - RELATIONTYPEOWNEDBY
        - RELATIONTYPEDEPENDSON
        - RELATIONTYPEDEPENDENCYOF
        - RELATIONTYPEPARTSOF
        - RELATIONTYPEHASPART
        - RELATIONTYPEOTHEROWNS
        - RELATIONTYPEOTHEROWNEDBY
        - RELATIONTYPEIMPLEMENTEDBY
        - RELATIONTYPEIMPLEMENTS
    IncludeType:
      description: Supported include types.
      enum:
        - schema
        - raw_schema
        - oncall
        - incident
        - relation
      type: string
      x-enum-varnames:
        - SCHEMA
        - RAW_SCHEMA
        - ONCALL
        - INCIDENT
        - RELATION
    EntityResponseData:
      description: List of entity data.
      items:
        $ref: '#/components/schemas/EntityData'
      type: array
    ListEntityCatalogResponseIncluded:
      description: List entity response included.
      items:
        $ref: '#/components/schemas/ListEntityCatalogResponseIncludedItem'
      type: array
    ListEntityCatalogResponseLinks:
      description: List entity response links.
      properties:
        next:
          description: Next link.
          type: string
        previous:
          description: Previous link.
          type: string
        self:
          description: Current link.
          type: string
      type: object
    EntityResponseMeta:
      description: Entity metadata.
      properties:
        count:
          description: Total entities count.
          format: int64
          type: integer
        includeCount:
          description: Total included data count.
          format: int64
          type: integer
      type: object
    EntityV3:
      description: Entity schema v3.
      oneOf:
        - $ref: '#/components/schemas/EntityV3Service'
        - $ref: '#/components/schemas/EntityV3Datastore'
        - $ref: '#/components/schemas/EntityV3Queue'
        - $ref: '#/components/schemas/EntityV3System'
        - $ref: '#/components/schemas/EntityV3API'
    EntityRaw:
      description: Entity definition in raw JSON or YAML representation.
      example: |
        apiVersion: v3
        kind: service
        metadata:
          name: myservice
      type: string
    UpsertCatalogEntityResponseIncluded:
      description: Upsert entity response included.
      items:
        $ref: '#/components/schemas/UpsertCatalogEntityResponseIncludedItem'
      type: array
    KindResponseData:
      description: List of kind responses.
      items:
        $ref: '#/components/schemas/KindData'
      type: array
    KindResponseMeta:
      description: Kind response metadata.
      properties:
        count:
          description: Total kinds count.
          format: int64
          type: integer
      type: object
    KindObj:
      description: Schema for kind.
      properties:
        description:
          description: Short description of the kind.
          type: string
        displayName:
          description: >-
            The display name of the kind. Automatically generated if not
            provided.
          type: string
        kind:
          description: >-
            The name of the kind to create or update. This must be in kebab-case
            format.
          example: my-job
          type: string
      required:
        - kind
      type: object
    KindRaw:
      description: Kind definition in raw JSON or YAML representation.
      example: |
        kind: service
        displayName: Service
        description: A service entity in the catalog.
      type: string
    RelationIncludeType:
      description: Supported include types for relations.
      enum:
        - entity
        - schema
      type: string
      x-enum-varnames:
        - ENTITY
        - SCHEMA
    RelationResponseData:
      description: Array of relation responses
      items:
        $ref: '#/components/schemas/RelationResponse'
      type: array
    ListRelationCatalogResponseIncluded:
      description: List relation response included entities.
      items:
        $ref: '#/components/schemas/EntityData'
      type: array
    ListRelationCatalogResponseLinks:
      description: List relation response links.
      properties:
        next:
          description: Next link.
          example: >-
            /api/v2/catalog/relation?filter[from_ref]=service:service-catalog&include=entity&page[limit]=2&page[offset]=2
          type: string
        previous:
          description: Previous link.
          type: string
        self:
          description: Current link.
          example: >-
            /api/v2/catalog/relation?filter[from_ref]=service:service-catalog&include=entity&page[limit]=2&page[offset]=0
          type: string
      type: object
    RelationResponseMeta:
      description: Relation response metadata.
      properties:
        count:
          description: Total relations count.
          format: int64
          type: integer
        includeCount:
          description: Total included data count.
          format: int64
          type: integer
      type: object
    ListAPIsResponseDataAttributes:
      description: Attributes for `ListAPIsResponseData`.
      properties:
        name:
          description: API name.
          example: Payments API
          type: string
      type: object
    ListAPIsResponseMetaPagination:
      description: Pagination metadata information for `ListAPIsResponse`.
      properties:
        limit:
          description: Number of items in the current page.
          example: 20
          format: int64
          type: integer
        offset:
          description: Offset for pagination.
          example: 0
          format: int64
          type: integer
        total_count:
          description: Total number of items.
          example: 35
          format: int64
          type: integer
      type: object
    JSONAPIErrorItemSource:
      description: References to the source of the error.
      properties:
        header:
          description: >-
            A string indicating the name of a single request header which caused
            the error.
          example: Authorization
          type: string
        parameter:
          description: A string indicating which URI query parameter caused the error.
          example: limit
          type: string
        pointer:
          description: >-
            A JSON pointer to the value in the request document that caused the
            error.
          example: /data/attributes/title
          type: string
      type: object
    UpdateOpenAPIResponseAttributes:
      description: Attributes for `UpdateOpenAPI`.
      properties:
        failed_endpoints:
          description: List of endpoints which couldn't be parsed.
          items:
            $ref: '#/components/schemas/OpenAPIEndpoint'
          type: array
      type: object
    CreateOpenAPIResponseAttributes:
      description: Attributes for `CreateOpenAPI`.
      properties:
        failed_endpoints:
          description: List of endpoints which couldn't be parsed.
          items:
            $ref: '#/components/schemas/OpenAPIEndpoint'
          type: array
      type: object
    EntityData:
      description: Entity data.
      properties:
        attributes:
          $ref: '#/components/schemas/EntityAttributes'
        id:
          description: Entity ID.
          type: string
        meta:
          $ref: '#/components/schemas/EntityMeta'
        relationships:
          $ref: '#/components/schemas/EntityRelationships'
        type:
          description: Entity.
          type: string
      type: object
    ListEntityCatalogResponseIncludedItem:
      description: List entity response included item.
      oneOf:
        - $ref: '#/components/schemas/EntityResponseIncludedSchema'
        - $ref: '#/components/schemas/EntityResponseIncludedRawSchema'
        - $ref: '#/components/schemas/EntityResponseIncludedRelatedEntity'
        - $ref: '#/components/schemas/EntityResponseIncludedOncall'
        - $ref: '#/components/schemas/EntityResponseIncludedIncident'
    EntityV3Service:
      additionalProperties: false
      description: Schema for service entities.
      properties:
        apiVersion:
          $ref: '#/components/schemas/EntityV3APIVersion'
        datadog:
          $ref: '#/components/schemas/EntityV3ServiceDatadog'
        extensions:
          additionalProperties: {}
          description: >-
            Custom extensions. This is the free-formed field to send client-side
            metadata. No Datadog features are affected by this field.
          type: object
        integrations:
          $ref: '#/components/schemas/EntityV3Integrations'
        kind:
          $ref: '#/components/schemas/EntityV3ServiceKind'
        metadata:
          $ref: '#/components/schemas/EntityV3Metadata'
        spec:
          $ref: '#/components/schemas/EntityV3ServiceSpec'
      required:
        - apiVersion
        - kind
        - metadata
      type: object
    EntityV3Datastore:
      additionalProperties: false
      description: Schema for datastore entities.
      properties:
        apiVersion:
          $ref: '#/components/schemas/EntityV3APIVersion'
        datadog:
          $ref: '#/components/schemas/EntityV3DatastoreDatadog'
        extensions:
          additionalProperties: {}
          description: >-
            Custom extensions. This is the free-formed field to send client side
            metadata. No Datadog features are affected by this field.
          type: object
        integrations:
          $ref: '#/components/schemas/EntityV3Integrations'
        kind:
          $ref: '#/components/schemas/EntityV3DatastoreKind'
        metadata:
          $ref: '#/components/schemas/EntityV3Metadata'
        spec:
          $ref: '#/components/schemas/EntityV3DatastoreSpec'
      required:
        - apiVersion
        - kind
        - metadata
      type: object
    EntityV3Queue:
      additionalProperties: false
      description: Schema for queue entities.
      properties:
        apiVersion:
          $ref: '#/components/schemas/EntityV3APIVersion'
        datadog:
          $ref: '#/components/schemas/EntityV3QueueDatadog'
        extensions:
          additionalProperties: {}
          description: >-
            Custom extensions. This is the free-formed field to send client-side
            metadata. No Datadog features are affected by this field.
          type: object
        integrations:
          $ref: '#/components/schemas/EntityV3Integrations'
        kind:
          $ref: '#/components/schemas/EntityV3QueueKind'
        metadata:
          $ref: '#/components/schemas/EntityV3Metadata'
        spec:
          $ref: '#/components/schemas/EntityV3QueueSpec'
      required:
        - apiVersion
        - kind
        - metadata
      type: object
    EntityV3System:
      additionalProperties: false
      description: Schema for system entities.
      properties:
        apiVersion:
          $ref: '#/components/schemas/EntityV3APIVersion'
        datadog:
          $ref: '#/components/schemas/EntityV3SystemDatadog'
        extensions:
          additionalProperties: {}
          description: >-
            Custom extensions. This is the free-formed field to send client-side
            metadata. No Datadog features are affected by this field.
          type: object
        integrations:
          $ref: '#/components/schemas/EntityV3Integrations'
        kind:
          $ref: '#/components/schemas/EntityV3SystemKind'
        metadata:
          $ref: '#/components/schemas/EntityV3Metadata'
        spec:
          $ref: '#/components/schemas/EntityV3SystemSpec'
      required:
        - apiVersion
        - kind
        - metadata
      type: object
    EntityV3API:
      additionalProperties: false
      description: Schema for API entities.
      properties:
        apiVersion:
          $ref: '#/components/schemas/EntityV3APIVersion'
        datadog:
          $ref: '#/components/schemas/EntityV3APIDatadog'
        extensions:
          additionalProperties: {}
          description: >-
            Custom extensions. This is the free-formed field to send client-side
            metadata. No Datadog features are affected by this field.
          type: object
        integrations:
          $ref: '#/components/schemas/EntityV3Integrations'
        kind:
          $ref: '#/components/schemas/EntityV3APIKind'
        metadata:
          $ref: '#/components/schemas/EntityV3Metadata'
        spec:
          $ref: '#/components/schemas/EntityV3APISpec'
      required:
        - apiVersion
        - kind
        - metadata
      type: object
    UpsertCatalogEntityResponseIncludedItem:
      description: Upsert entity response included item.
      oneOf:
        - $ref: '#/components/schemas/EntityResponseIncludedSchema'
    KindData:
      description: >-
        Schema that defines the structure of a Kind object in the Software
        Catalog.
      properties:
        attributes:
          $ref: '#/components/schemas/KindAttributes'
        id:
          description: >-
            A read-only globally unique identifier for the entity generated by
            Datadog.  User supplied values are ignored.
          example: 4b163705-23c0-4573-b2fb-f6cea2163fcb
          minLength: 1
          type: string
        meta:
          $ref: '#/components/schemas/KindMetadata'
        type:
          description: Kind.
          type: string
      type: object
    RelationResponse:
      description: Relation response data.
      properties:
        attributes:
          $ref: '#/components/schemas/RelationAttributes'
        id:
          description: Relation ID.
          type: string
        meta:
          $ref: '#/components/schemas/RelationMeta'
        relationships:
          $ref: '#/components/schemas/RelationRelationships'
        subtype:
          description: Relation subtype.
          type: string
        type:
          $ref: '#/components/schemas/RelationResponseType'
      type: object
    OpenAPIEndpoint:
      description: Endpoint info extracted from an `OpenAPI` specification.
      properties:
        method:
          description: The endpoint method.
          type: string
        path:
          description: The endpoint path.
          type: string
      type: object
    EntityAttributes:
      description: Entity attributes.
      properties:
        apiVersion:
          description: The API version.
          type: string
        description:
          description: The description.
          type: string
        displayName:
          description: The display name.
          type: string
        kind:
          description: The kind.
          type: string
        name:
          description: The name.
          type: string
        namespace:
          description: The namespace.
          type: string
        owner:
          description: The owner.
          type: string
        tags:
          description: The tags.
          items:
            type: string
          type: array
      type: object
    EntityMeta:
      description: Entity metadata.
      properties:
        createdAt:
          description: The creation time.
          type: string
        ingestionSource:
          description: The ingestion source.
          type: string
        modifiedAt:
          description: The modification time.
          type: string
        origin:
          description: The origin.
          type: string
      type: object
    EntityRelationships:
      description: Entity relationships.
      properties:
        incidents:
          $ref: '#/components/schemas/EntityToIncidents'
        oncall:
          $ref: '#/components/schemas/EntityToOncalls'
        rawSchema:
          $ref: '#/components/schemas/EntityToRawSchema'
        relatedEntities:
          $ref: '#/components/schemas/EntityToRelatedEntities'
        schema:
          $ref: '#/components/schemas/EntityToSchema'
      type: object
    EntityResponseIncludedSchema:
      description: Included detail entity schema.
      properties:
        attributes:
          $ref: '#/components/schemas/EntityResponseIncludedSchemaAttributes'
        id:
          description: Entity ID.
          type: string
        type:
          $ref: '#/components/schemas/EntityResponseIncludedSchemaType'
      type: object
    EntityResponseIncludedRawSchema:
      description: Included raw schema.
      properties:
        attributes:
          $ref: '#/components/schemas/EntityResponseIncludedRawSchemaAttributes'
        id:
          description: Raw schema ID.
          type: string
        type:
          $ref: '#/components/schemas/EntityResponseIncludedRawSchemaType'
      type: object
    EntityResponseIncludedRelatedEntity:
      description: Included related entity.
      properties:
        attributes:
          $ref: '#/components/schemas/EntityResponseIncludedRelatedEntityAttributes'
        id:
          description: Entity UUID.
          type: string
        meta:
          $ref: '#/components/schemas/EntityResponseIncludedRelatedEntityMeta'
        type:
          $ref: '#/components/schemas/EntityResponseIncludedRelatedEntityType'
      type: object
    EntityResponseIncludedOncall:
      description: Included oncall.
      properties:
        attributes:
          $ref: '#/components/schemas/EntityResponseIncludedRelatedOncallAttributes'
        id:
          description: Oncall ID.
          type: string
        type:
          $ref: '#/components/schemas/EntityResponseIncludedOncallType'
      type: object
    EntityResponseIncludedIncident:
      description: Included incident.
      properties:
        attributes:
          $ref: '#/components/schemas/EntityResponseIncludedRelatedIncidentAttributes'
        id:
          description: Incident ID.
          type: string
        type:
          $ref: '#/components/schemas/EntityResponseIncludedIncidentType'
      type: object
    EntityV3APIVersion:
      description: >-
        The version of the schema data that was used to populate this entity's
        data. This could be via the API, Terraform, or YAML file in a
        repository. The field is known as schema-version in the previous
        version.
      enum:
        - v3
        - v2.2
        - v2.1
        - v2
      example: v3
      type: string
      x-enum-varnames:
        - V3
        - V2_2
        - V2_1
        - V2
    EntityV3ServiceDatadog:
      additionalProperties: false
      description: Datadog product integrations for the service entity.
      properties:
        codeLocations:
          $ref: '#/components/schemas/EntityV3DatadogCodeLocations'
        events:
          $ref: '#/components/schemas/EntityV3DatadogEvents'
        logs:
          $ref: '#/components/schemas/EntityV3DatadogLogs'
        performanceData:
          $ref: '#/components/schemas/EntityV3DatadogPerformance'
        pipelines:
          $ref: '#/components/schemas/EntityV3DatadogPipelines'
      type: object
    EntityV3Integrations:
      additionalProperties: false
      description: A base schema for defining third-party integrations.
      properties:
        opsgenie:
          $ref: '#/components/schemas/EntityV3DatadogIntegrationOpsgenie'
        pagerduty:
          $ref: '#/components/schemas/EntityV3DatadogIntegrationPagerduty'
      type: object
    EntityV3ServiceKind:
      description: The definition of Entity V3 Service Kind object.
      enum:
        - service
      example: service
      type: string
      x-enum-varnames:
        - SERVICE
    EntityV3Metadata:
      additionalProperties: false
      description: The definition of Entity V3 Metadata object.
      properties:
        additionalOwners:
          additionalProperties: false
          description: The additional owners of the entity, usually a team.
          items:
            $ref: '#/components/schemas/EntityV3MetadataAdditionalOwnersItems'
          type: array
        contacts:
          additionalProperties: false
          description: A list of contacts for the entity.
          items:
            $ref: '#/components/schemas/EntityV3MetadataContactsItems'
          type: array
        description:
          description: >-
            Short description of the entity. The UI can leverage the description
            for display.
          type: string
        displayName:
          description: >-
            User friendly name of the entity. The UI can leverage the display
            name for display.
          type: string
        id:
          description: >-
            A read-only globally unique identifier for the entity generated by
            Datadog.  User supplied values are ignored.
          example: 4b163705-23c0-4573-b2fb-f6cea2163fcb
          minLength: 1
          type: string
        inheritFrom:
          description: The entity reference from which to inherit metadata
          example: application:default/myapp
          type: string
        links:
          additionalProperties: false
          description: A list of links for the entity.
          items:
            $ref: '#/components/schemas/EntityV3MetadataLinksItems'
          type: array
        managed:
          additionalProperties: {}
          description: >-
            A read-only set of Datadog managed attributes generated by Datadog. 
            User supplied values are ignored.
          type: object
        name:
          description: Unique name given to an entity under the kind/namespace.
          example: myService
          minLength: 1
          type: string
        namespace:
          description: >-
            Namespace is a part of unique identifier. It has a default value of
            'default'.
          example: default
          minLength: 1
          type: string
        owner:
          description: The owner of the entity, usually a team.
          type: string
        tags:
          description: A set of custom tags.
          example:
            - this:tag
            - that:tag
          items:
            type: string
          type: array
      required:
        - name
      type: object
    EntityV3ServiceSpec:
      additionalProperties: false
      description: The definition of Entity V3 Service Spec object.
      properties:
        componentOf:
          description: A list of components the service is a part of
          items:
            type: string
          type: array
        dependsOn:
          description: A list of components the service depends on.
          items:
            type: string
          type: array
        languages:
          description: The service's programming language.
          items:
            type: string
          type: array
        lifecycle:
          description: The lifecycle state of the component.
          minLength: 1
          type: string
        tier:
          description: The importance of the component.
          minLength: 1
          type: string
        type:
          description: The type of service.
          type: string
      type: object
    EntityV3DatastoreDatadog:
      additionalProperties: false
      description: Datadog product integrations for the datastore entity.
      properties:
        events:
          $ref: '#/components/schemas/EntityV3DatadogEvents'
        logs:
          $ref: '#/components/schemas/EntityV3DatadogLogs'
        performanceData:
          $ref: '#/components/schemas/EntityV3DatadogPerformance'
      type: object
    EntityV3DatastoreKind:
      description: The definition of Entity V3 Datastore Kind object.
      enum:
        - datastore
      example: datastore
      type: string
      x-enum-varnames:
        - DATASTORE
    EntityV3DatastoreSpec:
      additionalProperties: false
      description: The definition of Entity V3 Datastore Spec object.
      properties:
        componentOf:
          description: A list of components the datastore is a part of
          items:
            type: string
          type: array
        lifecycle:
          description: The lifecycle state of the datastore.
          minLength: 1
          type: string
        tier:
          description: The importance of the datastore.
          minLength: 1
          type: string
        type:
          description: The type of datastore.
          type: string
      type: object
    EntityV3QueueDatadog:
      additionalProperties: false
      description: Datadog product integrations for the datastore entity.
      properties:
        events:
          $ref: '#/components/schemas/EntityV3DatadogEvents'
        logs:
          $ref: '#/components/schemas/EntityV3DatadogLogs'
        performanceData:
          $ref: '#/components/schemas/EntityV3DatadogPerformance'
      type: object
    EntityV3QueueKind:
      description: The definition of Entity V3 Queue Kind object.
      enum:
        - queue
      example: queue
      type: string
      x-enum-varnames:
        - QUEUE
    EntityV3QueueSpec:
      additionalProperties: false
      description: The definition of Entity V3 Queue Spec object.
      properties:
        componentOf:
          description: A list of components the queue is a part of
          items:
            type: string
          type: array
        lifecycle:
          description: The lifecycle state of the queue.
          minLength: 1
          type: string
        tier:
          description: The importance of the queue.
          minLength: 1
          type: string
        type:
          description: The type of queue.
          type: string
      type: object
    EntityV3SystemDatadog:
      additionalProperties: false
      description: Datadog product integrations for the service entity.
      properties:
        events:
          $ref: '#/components/schemas/EntityV3DatadogEvents'
        logs:
          $ref: '#/components/schemas/EntityV3DatadogLogs'
        performanceData:
          $ref: '#/components/schemas/EntityV3DatadogPerformance'
        pipelines:
          $ref: '#/components/schemas/EntityV3DatadogPipelines'
      type: object
    EntityV3SystemKind:
      description: The definition of Entity V3 System Kind object.
      enum:
        - system
      example: system
      type: string
      x-enum-varnames:
        - SYSTEM
    EntityV3SystemSpec:
      additionalProperties: false
      description: The definition of Entity V3 System Spec object.
      properties:
        components:
          description: A list of components belongs to the system.
          items:
            type: string
          type: array
        lifecycle:
          description: The lifecycle state of the component.
          minLength: 1
          type: string
        tier:
          description: An entity reference to the owner of the component.
          minLength: 1
          type: string
      type: object
    EntityV3APIDatadog:
      additionalProperties: false
      description: Datadog product integrations for the API entity.
      properties:
        codeLocations:
          $ref: '#/components/schemas/EntityV3DatadogCodeLocations'
        events:
          $ref: '#/components/schemas/EntityV3DatadogEvents'
        logs:
          $ref: '#/components/schemas/EntityV3DatadogLogs'
        performanceData:
          $ref: '#/components/schemas/EntityV3DatadogPerformance'
        pipelines:
          $ref: '#/components/schemas/EntityV3DatadogPipelines'
      type: object
    EntityV3APIKind:
      description: The definition of Entity V3 API Kind object.
      enum:
        - api
      example: api
      type: string
      x-enum-varnames:
        - API
    EntityV3APISpec:
      additionalProperties: false
      description: The definition of Entity V3 API Spec object.
      properties:
        implementedBy:
          description: Services which implemented the API.
          items:
            type: string
          type: array
        interface:
          $ref: '#/components/schemas/EntityV3APISpecInterface'
        lifecycle:
          description: The lifecycle state of the component.
          minLength: 1
          type: string
        tier:
          description: The importance of the component.
          minLength: 1
          type: string
        type:
          description: The type of API.
          type: string
      type: object
    KindAttributes:
      description: Kind attributes.
      properties:
        description:
          description: Short description of the kind.
          type: string
        displayName:
          description: User friendly name of the kind.
          type: string
        name:
          description: The kind name.
          example: my-job
          minLength: 1
          type: string
      type: object
    KindMetadata:
      description: Kind metadata.
      properties:
        createdAt:
          description: The creation time.
          type: string
        modifiedAt:
          description: The modification time.
          type: string
      type: object
    RelationAttributes:
      description: Relation attributes.
      properties:
        from:
          $ref: '#/components/schemas/RelationEntity'
        to:
          $ref: '#/components/schemas/RelationEntity'
        type:
          $ref: '#/components/schemas/RelationType'
      type: object
    RelationMeta:
      description: Relation metadata.
      properties:
        createdAt:
          description: Relation creation time.
          format: date-time
          type: string
        definedBy:
          description: Relation defined by.
          type: string
        modifiedAt:
          description: Relation modification time.
          format: date-time
          type: string
        source:
          description: Relation source.
          type: string
      type: object
    RelationRelationships:
      description: Relation relationships.
      properties:
        fromEntity:
          $ref: '#/components/schemas/RelationToEntity'
        toEntity:
          $ref: '#/components/schemas/RelationToEntity'
      type: object
    RelationResponseType:
      description: Relation type.
      enum:
        - relation
      type: string
      x-enum-varnames:
        - RELATION
    EntityToIncidents:
      description: Entity to incidents relationship.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipArray'
      type: object
    EntityToOncalls:
      description: Entity to oncalls relationship.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipArray'
      type: object
    EntityToRawSchema:
      description: Entity to raw schema relationship.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipItem'
      type: object
    EntityToRelatedEntities:
      description: Entity to related entities relationship.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipArray'
      type: object
    EntityToSchema:
      description: Entity to detail schema relationship.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipItem'
      type: object
    EntityResponseIncludedSchemaAttributes:
      description: Included schema.
      properties:
        schema:
          $ref: '#/components/schemas/EntityV3'
      type: object
    EntityResponseIncludedSchemaType:
      description: Schema type.
      enum:
        - schema
      type: string
      x-enum-varnames:
        - SCHEMA
    EntityResponseIncludedRawSchemaAttributes:
      description: Included raw schema attributes.
      properties:
        rawSchema:
          description: Schema from user input in base64 encoding.
          type: string
      type: object
    EntityResponseIncludedRawSchemaType:
      description: Raw schema type.
      enum:
        - rawSchema
      type: string
      x-enum-varnames:
        - RAW_SCHEMA
    EntityResponseIncludedRelatedEntityAttributes:
      description: Related entity attributes.
      properties:
        kind:
          description: Entity kind.
          type: string
        name:
          description: Entity name.
          type: string
        namespace:
          description: Entity namespace.
          type: string
        type:
          description: Entity relation type to the associated entity.
          type: string
      type: object
    EntityResponseIncludedRelatedEntityMeta:
      description: Included related entity meta.
      properties:
        createdAt:
          description: Entity creation time.
          format: date-time
          type: string
        defined_by:
          description: Entity relation defined by.
          type: string
        modifiedAt:
          description: Entity modification time.
          format: date-time
          type: string
        source:
          description: Entity relation source.
          type: string
      type: object
    EntityResponseIncludedRelatedEntityType:
      description: Related entity.
      enum:
        - relatedEntity
      type: string
      x-enum-varnames:
        - RELATED_ENTITY
    EntityResponseIncludedRelatedOncallAttributes:
      description: Included related oncall attributes.
      properties:
        escalations:
          $ref: '#/components/schemas/EntityResponseIncludedRelatedOncallEscalations'
        provider:
          description: Oncall provider.
          type: string
      type: object
    EntityResponseIncludedOncallType:
      description: Oncall type.
      enum:
        - oncall
      type: string
      x-enum-varnames:
        - ONCALL
    EntityResponseIncludedRelatedIncidentAttributes:
      description: Incident attributes.
      properties:
        createdAt:
          description: Incident creation time.
          format: date-time
          type: string
        htmlURL:
          description: Incident URL.
          type: string
        provider:
          description: Incident provider.
          type: string
        status:
          description: Incident status.
          type: string
        title:
          description: Incident title.
          type: string
      type: object
    EntityResponseIncludedIncidentType:
      description: Incident description.
      enum:
        - incident
      type: string
      x-enum-varnames:
        - INCIDENT
    EntityV3DatadogCodeLocations:
      additionalProperties: false
      description: Schema for mapping source code locations to an entity.
      items:
        $ref: '#/components/schemas/EntityV3DatadogCodeLocationItem'
      type: array
    EntityV3DatadogEvents:
      additionalProperties: false
      description: Events associations.
      items:
        $ref: '#/components/schemas/EntityV3DatadogEventItem'
      type: array
    EntityV3DatadogLogs:
      additionalProperties: false
      description: Logs association.
      items:
        $ref: '#/components/schemas/EntityV3DatadogLogItem'
      type: array
    EntityV3DatadogPerformance:
      additionalProperties: false
      description: Performance stats association.
      properties:
        tags:
          description: >-
            A list of APM entity tags that associates the APM Stats data with
            the entity.
          items:
            type: string
          type: array
      type: object
    EntityV3DatadogPipelines:
      additionalProperties: false
      description: CI Pipelines association.
      properties:
        fingerprints:
          description: >-
            A list of CI Fingerprints that associate CI Pipelines with the
            entity.
          items:
            type: string
          type: array
      type: object
    EntityV3DatadogIntegrationOpsgenie:
      additionalProperties: false
      description: An Opsgenie integration schema.
      properties:
        region:
          description: The region for the Opsgenie integration.
          minLength: 1
          type: string
        serviceURL:
          description: The service URL for the Opsgenie integration.
          example: https://www.opsgenie.com/service/shopping-cart
          minLength: 1
          type: string
      required:
        - serviceURL
      type: object
    EntityV3DatadogIntegrationPagerduty:
      additionalProperties: false
      description: A PagerDuty integration schema.
      properties:
        serviceURL:
          description: The service URL for the PagerDuty integration.
          example: https://www.pagerduty.com/service-directory/Pshopping-cart
          minLength: 1
          type: string
      required:
        - serviceURL
      type: object
    EntityV3MetadataAdditionalOwnersItems:
      description: The definition of Entity V3 Metadata Additional Owners Items object.
      properties:
        name:
          description: Team name.
          example: ''
          type: string
        type:
          description: Team type.
          type: string
      required:
        - name
      type: object
    EntityV3MetadataContactsItems:
      additionalProperties: false
      description: The definition of Entity V3 Metadata Contacts Items object.
      properties:
        contact:
          description: Contact value.
          example: https://slack/
          type: string
        name:
          description: Contact name.
          minLength: 2
          type: string
        type:
          description: Contact type.
          example: slack
          type: string
      required:
        - type
        - contact
      type: object
    EntityV3MetadataLinksItems:
      additionalProperties: false
      description: The definition of Entity V3 Metadata Links Items object.
      properties:
        name:
          description: Link name.
          example: mylink
          type: string
        provider:
          description: Link provider.
          type: string
        type:
          default: other
          description: Link type.
          example: link
          type: string
        url:
          description: Link URL.
          example: https://mylink
          type: string
      required:
        - name
        - type
        - url
      type: object
    EntityV3APISpecInterface:
      additionalProperties: false
      description: The API definition.
      oneOf:
        - $ref: '#/components/schemas/EntityV3APISpecInterfaceFileRef'
        - $ref: '#/components/schemas/EntityV3APISpecInterfaceDefinition'
    RelationEntity:
      description: Relation entity reference.
      properties:
        kind:
          description: Entity kind.
          type: string
        name:
          description: Entity name.
          type: string
        namespace:
          description: Entity namespace.
          type: string
      type: object
    RelationToEntity:
      description: Relation to entity.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipItem'
        meta:
          $ref: '#/components/schemas/EntityMeta'
      type: object
    RelationshipArray:
      description: Relationships.
      items:
        $ref: '#/components/schemas/RelationshipItem'
      type: array
    RelationshipItem:
      description: Relationship entry.
      properties:
        id:
          description: Associated data ID.
          type: string
        type:
          description: Relationship type.
          type: string
      type: object
    EntityResponseIncludedRelatedOncallEscalations:
      description: Oncall escalations.
      items:
        $ref: '#/components/schemas/EntityResponseIncludedRelatedOncallEscalationItem'
      type: array
    EntityV3DatadogCodeLocationItem:
      additionalProperties: false
      description: Code location item.
      properties:
        paths:
          description: The paths (glob) to the source code of the service.
          items:
            type: string
          type: array
        repositoryURL:
          description: The repository path of the source code of the entity.
          type: string
      type: object
    EntityV3DatadogEventItem:
      additionalProperties: false
      description: Events association item.
      properties:
        name:
          description: The name of the query.
          type: string
        query:
          description: The query to run.
          type: string
      type: object
    EntityV3DatadogLogItem:
      additionalProperties: false
      description: Log association item.
      properties:
        name:
          description: The name of the query.
          type: string
        query:
          description: The query to run.
          type: string
      type: object
    EntityV3APISpecInterfaceFileRef:
      additionalProperties: false
      description: The definition of `EntityV3APISpecInterfaceFileRef` object.
      properties:
        fileRef:
          description: The reference to the API definition file.
          type: string
      type: object
    EntityV3APISpecInterfaceDefinition:
      additionalProperties: false
      description: The definition of `EntityV3APISpecInterfaceDefinition` object.
      properties:
        definition:
          description: The API definition.
          type: object
      type: object
    EntityResponseIncludedRelatedOncallEscalationItem:
      description: Oncall escalation.
      properties:
        email:
          description: Oncall email.
          type: string
        escalationLevel:
          description: Oncall level.
          format: int64
          type: integer
        name:
          description: Oncall name.
          type: string
      type: object
  responses:
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Too many requests
    ForbiddenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Forbidden
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
  parameters:
    PageOffset:
      description: Specific offset to use as the beginning of the returned page.
      in: query
      name: page[offset]
      required: false
      schema:
        default: 0
        example: 0
        format: int64
        type: integer
    FilterByID:
      description: Filter entities by UUID.
      explode: true
      in: query
      name: filter[id]
      required: false
      schema:
        type: string
    FilterByRef:
      description: Filter entities by reference
      example: service:shopping-cart
      explode: true
      in: query
      name: filter[ref]
      required: false
      schema:
        type: string
    FilterByName:
      description: Filter entities by name.
      explode: true
      in: query
      name: filter[name]
      required: false
      schema:
        type: string
    FilterByKind:
      description: Filter entities by kind.
      explode: true
      in: query
      name: filter[kind]
      required: false
      schema:
        type: string
    FilterByOwner:
      description: Filter entities by owner.
      explode: true
      in: query
      name: filter[owner]
      required: false
      schema:
        type: string
    FilterByRelationType:
      description: Filter entities by relation type.
      explode: true
      in: query
      name: filter[relation][type]
      required: false
      schema:
        $ref: '#/components/schemas/RelationType'
    FilterByExcludeSnapshot:
      description: Filter entities by excluding snapshotted entities.
      in: query
      name: filter[exclude_snapshot]
      required: false
      schema:
        type: string
    Include:
      description: Include relationship data.
      explode: true
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncludeType'
    EntityID:
      description: UUID or Entity Ref.
      in: path
      name: entity_id
      required: true
      schema:
        example: service:myservice
        type: string
    KindID:
      description: Entity kind.
      in: path
      name: kind_id
      required: true
      schema:
        example: my-job
        type: string
    FilterRelationByType:
      description: Filter relations by type.
      explode: true
      in: query
      name: filter[type]
      required: false
      schema:
        $ref: '#/components/schemas/RelationType'
    FilterRelationByFromRef:
      description: Filter relations by the reference of the first entity in the relation.
      example: service:shopping-cart
      explode: true
      in: query
      name: filter[from_ref]
      required: false
      schema:
        type: string
    FilterRelationByToRef:
      description: Filter relations by the reference of the second entity in the relation.
      example: service:shopping-cart
      explode: true
      in: query
      name: filter[to_ref]
      required: false
      schema:
        type: string
    RelationInclude:
      description: Include relationship data.
      explode: true
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/RelationIncludeType'
  x-stackQL-resources:
    apis:
      id: datadog.catalog.apis
      name: apis
      title: Apis
      methods:
        list_apis:
          operation:
            $ref: '#/paths/~1api~1v2~1apicatalog~1api/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        delete_open_api:
          operation:
            $ref: '#/paths/~1api~1v2~1apicatalog~1api~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_open_api:
          operation:
            $ref: '#/paths/~1api~1v2~1apicatalog~1api~1{id}~1openapi/get'
          response:
            mediaType: multipart/form-data
            openAPIDocKey: '200'
        update_open_api:
          operation:
            $ref: '#/paths/~1api~1v2~1apicatalog~1api~1{id}~1openapi/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_open_api:
          operation:
            $ref: '#/paths/~1api~1v2~1apicatalog~1openapi/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/apis/methods/list_apis'
        insert:
          - $ref: '#/components/x-stackQL-resources/apis/methods/create_open_api'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/apis/methods/delete_open_api'
        replace:
          - $ref: '#/components/x-stackQL-resources/apis/methods/update_open_api'
    catalog_entities:
      id: datadog.catalog.catalog_entities
      name: catalog_entities
      title: Catalog Entities
      methods:
        list_catalog_entity:
          operation:
            $ref: '#/paths/~1api~1v2~1catalog~1entity/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        upsert_catalog_entity:
          operation:
            $ref: '#/paths/~1api~1v2~1catalog~1entity/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        delete_catalog_entity:
          operation:
            $ref: '#/paths/~1api~1v2~1catalog~1entity~1{entity_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/catalog_entities/methods/list_catalog_entity
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/catalog_entities/methods/upsert_catalog_entity
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/catalog_entities/methods/delete_catalog_entity
        replace: []
    catalog_kinds:
      id: datadog.catalog.catalog_kinds
      name: catalog_kinds
      title: Catalog Kinds
      methods:
        list_catalog_kind:
          operation:
            $ref: '#/paths/~1api~1v2~1catalog~1kind/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        upsert_catalog_kind:
          operation:
            $ref: '#/paths/~1api~1v2~1catalog~1kind/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        delete_catalog_kind:
          operation:
            $ref: '#/paths/~1api~1v2~1catalog~1kind~1{kind_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/catalog_kinds/methods/list_catalog_kind
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/catalog_kinds/methods/upsert_catalog_kind
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/catalog_kinds/methods/delete_catalog_kind
        replace: []
    catalog_relations:
      id: datadog.catalog.catalog_relations
      name: catalog_relations
      title: Catalog Relations
      methods:
        list_catalog_relation:
          operation:
            $ref: '#/paths/~1api~1v2~1catalog~1relation/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/catalog_relations/methods/list_catalog_relation
        insert: []
        update: []
        delete: []
        replace: []
servers:
  - url: >-
      https://{region:^(?:[^\:/]+(?:\:[0-9]+)?|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(?:\:[0-9]+)?)$}/
    variables:
      region:
        default: datadoghq.com
