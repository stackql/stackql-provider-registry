openapi: 3.0.0
info:
  title: software_delivery API
  description: datadog software_delivery API
  version: '1.0'
paths:
  /api/v2/ci/pipeline:
    post:
      description: >-
        Send your pipeline event to your Datadog platform over HTTP. For details
        about how pipeline executions are modeled and what execution types we
        support, see [Pipeline Data Model And Execution
        Types](https://docs.datadoghq.com/continuous_integration/guides/pipeline_data_model/).


        Multiple events can be sent in an array (up to 1000).


        Pipeline events can be submitted with a timestamp that is up to 18 hours
        in the past.
      operationId: CreateCIAppPipelineEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIAppCreatePipelineEventRequest'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                type: object
          description: Request accepted for processing
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Forbidden
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Request Timeout
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Payload Too Large
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Too Many Requests
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Internal Server Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Service Unavailable
      security:
        - apiKeyAuth: []
      summary: Send pipeline event
      tags:
        - CI Visibility Pipelines
      x-codegen-request-body-name: body
  /api/v2/ci/pipelines/analytics/aggregate:
    post:
      description: >-
        Use this API endpoint to aggregate CI Visibility pipeline events into
        buckets of computed metrics and timeseries.
      operationId: AggregateCIAppPipelineEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIAppPipelinesAggregateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppPipelinesAnalyticsAggregateResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
      summary: Aggregate pipelines events
      tags:
        - CI Visibility Pipelines
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - ci_visibility_read
  /api/v2/ci/pipelines/events:
    get:
      description: >-
        List endpoint returns CI Visibility pipeline events that match a [search
        query](https://docs.datadoghq.com/continuous_integration/explorer/search_syntax/).

        [Results are paginated similarly to
        logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).


        Use this endpoint to see your latest pipeline events.
      operationId: ListCIAppPipelineEvents
      parameters:
        - description: Search query following log syntax.
          example: '@ci.provider.name:github @ci.pipeline.name:Pull Request Labeler'
          in: query
          name: filter[query]
          required: false
          schema:
            type: string
        - description: Minimum timestamp for requested events.
          example: '2019-01-02T09:42:36.320Z'
          in: query
          name: filter[from]
          required: false
          schema:
            format: date-time
            type: string
        - description: Maximum timestamp for requested events.
          example: '2019-01-03T09:42:36.320Z'
          in: query
          name: filter[to]
          required: false
          schema:
            format: date-time
            type: string
        - description: Order of events in results.
          in: query
          name: sort
          required: false
          schema:
            $ref: '#/components/schemas/CIAppSort'
        - description: List following results with a cursor provided in the previous query.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          in: query
          name: page[cursor]
          required: false
          schema:
            type: string
        - description: Maximum number of events in the response.
          example: 25
          in: query
          name: page[limit]
          required: false
          schema:
            default: 10
            format: int32
            maximum: 1000
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppPipelineEventsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
      summary: Get a list of pipelines events
      tags:
        - CI Visibility Pipelines
      x-pagination:
        cursorParam: page[cursor]
        cursorPath: meta.page.after
        limitParam: page[limit]
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - ci_visibility_read
  /api/v2/ci/pipelines/events/search:
    post:
      description: >-
        List endpoint returns CI Visibility pipeline events that match a [search
        query](https://docs.datadoghq.com/continuous_integration/explorer/search_syntax/).

        [Results are paginated similarly to
        logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).


        Use this endpoint to build complex events filtering and search.
      operationId: SearchCIAppPipelineEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIAppPipelineEventsRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppPipelineEventsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
      summary: Search pipelines events
      tags:
        - CI Visibility Pipelines
      x-codegen-request-body-name: body
      x-pagination:
        cursorParam: body.page.cursor
        cursorPath: meta.page.after
        limitParam: body.page.limit
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - ci_visibility_read
  /api/v2/ci/tests/analytics/aggregate:
    post:
      description: >-
        The API endpoint to aggregate CI Visibility test events into buckets of
        computed metrics and timeseries.
      operationId: AggregateCIAppTestEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIAppTestsAggregateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppTestsAnalyticsAggregateResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
        - AuthZ:
            - test_optimization_read
      summary: Aggregate tests events
      tags:
        - CI Visibility Tests
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - ci_visibility_read
          - test_optimization_read
  /api/v2/ci/tests/events:
    get:
      description: >-
        List endpoint returns CI Visibility test events that match a [search
        query](https://docs.datadoghq.com/continuous_integration/explorer/search_syntax/).

        [Results are paginated similarly to
        logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).


        Use this endpoint to see your latest test events.
      operationId: ListCIAppTestEvents
      parameters:
        - description: Search query following log syntax.
          example: '@test.name:test_foo @test.suite:github.com/DataDog/dd-go/model'
          in: query
          name: filter[query]
          required: false
          schema:
            type: string
        - description: Minimum timestamp for requested events.
          example: '2019-01-02T09:42:36.320Z'
          in: query
          name: filter[from]
          required: false
          schema:
            format: date-time
            type: string
        - description: Maximum timestamp for requested events.
          example: '2019-01-03T09:42:36.320Z'
          in: query
          name: filter[to]
          required: false
          schema:
            format: date-time
            type: string
        - description: Order of events in results.
          in: query
          name: sort
          required: false
          schema:
            $ref: '#/components/schemas/CIAppSort'
        - description: List following results with a cursor provided in the previous query.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          in: query
          name: page[cursor]
          required: false
          schema:
            type: string
        - description: Maximum number of events in the response.
          example: 25
          in: query
          name: page[limit]
          required: false
          schema:
            default: 10
            format: int32
            maximum: 1000
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppTestEventsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
        - AuthZ:
            - test_optimization_read
      summary: Get a list of tests events
      tags:
        - CI Visibility Tests
      x-pagination:
        cursorParam: page[cursor]
        cursorPath: meta.page.after
        limitParam: page[limit]
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - ci_visibility_read
          - test_optimization_read
  /api/v2/ci/tests/events/search:
    post:
      description: >-
        List endpoint returns CI Visibility test events that match a [search
        query](https://docs.datadoghq.com/continuous_integration/explorer/search_syntax/).

        [Results are paginated similarly to
        logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).


        Use this endpoint to build complex events filtering and search.
      operationId: SearchCIAppTestEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIAppTestEventsRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppTestEventsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
        - AuthZ:
            - test_optimization_read
      summary: Search tests events
      tags:
        - CI Visibility Tests
      x-codegen-request-body-name: body
      x-pagination:
        cursorParam: body.page.cursor
        cursorPath: meta.page.after
        limitParam: body.page.limit
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - ci_visibility_read
          - test_optimization_read
  /api/v2/dora/deployment:
    post:
      description: >-
        Use this API endpoint to provide data about deployments for DORA
        metrics.


        This is necessary for:

        - Deployment Frequency

        - Change Lead Time

        - Change Failure Rate
      operationId: CreateDORADeployment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DORADeploymentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DORADeploymentResponse'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DORADeploymentResponse'
          description: OK - but delayed due to incident
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
      summary: Send a deployment event for DORA Metrics
      tags:
        - DORA Metrics
      x-codegen-request-body-name: body
  /api/v2/dora/deployments:
    post:
      description: Use this API endpoint to get a list of deployment events.
      operationId: ListDORADeployments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DORAListDeploymentsRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DORAListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
      summary: Get a list of deployment events
      tags:
        - DORA Metrics
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - dora_metrics_read
  /api/v2/dora/deployments/{deployment_id}:
    get:
      description: Use this API endpoint to get a deployment event.
      operationId: GetDORADeployment
      parameters:
        - description: The ID of the deployment event.
          in: path
          name: deployment_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DORAFetchResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
        - appKeyAuth: []
      summary: Get a deployment event
      tags:
        - DORA Metrics
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - dora_metrics_read
  /api/v2/dora/failure:
    post:
      description: |-
        Use this API endpoint to provide failure data for DORA metrics.

        This is necessary for:
        - Change Failure Rate
        - Time to Restore
      operationId: CreateDORAFailure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DORAFailureRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DORAFailureResponse'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DORAFailureResponse'
          description: OK - but delayed due to incident
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
      summary: Send a failure event for DORA Metrics
      tags:
        - DORA Metrics
      x-codegen-request-body-name: body
  /api/v2/dora/failures:
    post:
      description: Use this API endpoint to get a list of failure events.
      operationId: ListDORAFailures
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DORAListFailuresRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DORAListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
      summary: Get a list of failure events
      tags:
        - DORA Metrics
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - dora_metrics_read
  /api/v2/dora/failures/{failure_id}:
    get:
      description: Use this API endpoint to get a failure event.
      operationId: GetDORAFailure
      parameters:
        - description: The ID of the failure event.
          in: path
          name: failure_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DORAFetchResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
        - appKeyAuth: []
      summary: Get a failure event
      tags:
        - DORA Metrics
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - dora_metrics_read
  /api/v2/dora/incident:
    post:
      deprecated: true
      description: >-
        **Note**: This endpoint is deprecated. Please use `/api/v2/dora/failure`
        instead.


        Use this API endpoint to provide failure data for DORA metrics.


        This is necessary for:

        - Change Failure Rate

        - Time to Restore
      operationId: CreateDORAIncident
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DORAFailureRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DORAFailureResponse'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DORAFailureResponse'
          description: OK - but delayed due to incident
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
      summary: Send an incident event for DORA Metrics
      tags:
        - DORA Metrics
      x-codegen-request-body-name: body
  /api/v2/workflows:
    post:
      description: >-
        Create a new workflow, returning the workflow ID. This API requires a
        [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: CreateWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkflowResponse'
          description: Successfully created a workflow.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Too many requests
      summary: Create a Workflow
      tags:
        - Workflow Automation
      x-permission:
        operator: OR
        permissions:
          - workflows_write
  /api/v2/workflows/{workflow_id}:
    delete:
      description: >-
        Delete a workflow by ID. This API requires a [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: DeleteWorkflow
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
      responses:
        '204':
          description: Successfully deleted a workflow.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Not found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Too many requests
      summary: Delete an existing Workflow
      tags:
        - Workflow Automation
      x-permission:
        operator: OR
        permissions:
          - workflows_write
    get:
      description: >-
        Get a workflow by ID. This API requires a [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: GetWorkflow
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowResponse'
          description: Successfully got a workflow.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Not found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Too many requests
      summary: Get an existing Workflow
      tags:
        - Workflow Automation
      x-permission:
        operator: OR
        permissions:
          - workflows_read
    patch:
      description: >-
        Update a workflow by ID. This API requires a [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: UpdateWorkflow
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkflowRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateWorkflowResponse'
          description: Successfully updated a workflow.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Not found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Too many requests
      summary: Update an existing Workflow
      tags:
        - Workflow Automation
      x-permission:
        operator: OR
        permissions:
          - workflows_write
  /api/v2/workflows/{workflow_id}/instances:
    get:
      description: >-
        List all instances of a given workflow. This API requires a [registered
        application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: ListWorkflowInstances
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowListInstancesResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - workflows_read
      summary: List workflow instances
      tags:
        - Workflow Automation
      x-permission:
        operator: OR
        permissions:
          - workflows_read
    post:
      description: >-
        Execute the given workflow. This API requires a [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: CreateWorkflowInstance
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowInstanceCreateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowInstanceCreateResponse'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - workflows_run
      summary: Execute a workflow
      tags:
        - Workflow Automation
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - workflows_run
  /api/v2/workflows/{workflow_id}/instances/{instance_id}:
    get:
      description: >-
        Get a specific execution of a given workflow. This API requires a
        [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: GetWorkflowInstance
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
        - $ref: '#/components/parameters/InstanceId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklflowGetInstanceResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - workflows_read
      summary: Get a workflow instance
      tags:
        - Workflow Automation
      x-permission:
        operator: OR
        permissions:
          - workflows_read
  /api/v2/workflows/{workflow_id}/instances/{instance_id}/cancel:
    put:
      description: >-
        Cancels a specific execution of a given workflow. This API requires a
        [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: CancelWorkflowInstance
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
        - $ref: '#/components/parameters/InstanceId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklflowCancelInstanceResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Cancel a workflow instance
      tags:
        - Workflow Automation
      x-permission:
        operator: OR
        permissions:
          - workflows_run
components:
  schemas:
    CIAppCreatePipelineEventRequest:
      description: Request object.
      properties:
        data:
          $ref: >-
            #/components/schemas/CIAppCreatePipelineEventRequestDataSingleOrArray
      type: object
    HTTPCIAppErrors:
      description: Errors occurred.
      properties:
        errors:
          description: Structured errors.
          items:
            $ref: '#/components/schemas/HTTPCIAppError'
          type: array
      type: object
    CIAppPipelinesAggregateRequest:
      description: >-
        The object sent with the request to retrieve aggregation buckets of
        pipeline events from your organization.
      properties:
        compute:
          description: >-
            The list of metrics or timeseries to compute for the retrieved
            buckets.
          items:
            $ref: '#/components/schemas/CIAppCompute'
          type: array
        filter:
          $ref: '#/components/schemas/CIAppPipelinesQueryFilter'
        group_by:
          description: The rules for the group-by.
          items:
            $ref: '#/components/schemas/CIAppPipelinesGroupBy'
          type: array
        options:
          $ref: '#/components/schemas/CIAppQueryOptions'
      type: object
    CIAppPipelinesAnalyticsAggregateResponse:
      description: The response object for the pipeline events aggregate API endpoint.
      properties:
        data:
          $ref: '#/components/schemas/CIAppPipelinesAggregationBucketsResponse'
        links:
          $ref: '#/components/schemas/CIAppResponseLinks'
        meta:
          $ref: '#/components/schemas/CIAppResponseMetadata'
      type: object
    CIAppSort:
      description: Sort parameters when querying events.
      enum:
        - timestamp
        - '-timestamp'
      type: string
      x-enum-varnames:
        - TIMESTAMP_ASCENDING
        - TIMESTAMP_DESCENDING
    CIAppPipelineEventsResponse:
      description: >-
        Response object with all pipeline events matching the request and
        pagination information.
      properties:
        data:
          description: Array of events matching the request.
          items:
            $ref: '#/components/schemas/CIAppPipelineEvent'
          type: array
        links:
          $ref: '#/components/schemas/CIAppResponseLinks'
        meta:
          $ref: '#/components/schemas/CIAppResponseMetadataWithPagination'
      type: object
    CIAppPipelineEventsRequest:
      description: The request for a pipelines search.
      properties:
        filter:
          $ref: '#/components/schemas/CIAppPipelinesQueryFilter'
        options:
          $ref: '#/components/schemas/CIAppQueryOptions'
        page:
          $ref: '#/components/schemas/CIAppQueryPageOptions'
        sort:
          $ref: '#/components/schemas/CIAppSort'
      type: object
    CIAppTestsAggregateRequest:
      description: >-
        The object sent with the request to retrieve aggregation buckets of test
        events from your organization.
      properties:
        compute:
          description: >-
            The list of metrics or timeseries to compute for the retrieved
            buckets.
          items:
            $ref: '#/components/schemas/CIAppCompute'
          type: array
        filter:
          $ref: '#/components/schemas/CIAppTestsQueryFilter'
        group_by:
          description: The rules for the group-by.
          items:
            $ref: '#/components/schemas/CIAppTestsGroupBy'
          type: array
        options:
          $ref: '#/components/schemas/CIAppQueryOptions'
      type: object
    CIAppTestsAnalyticsAggregateResponse:
      description: The response object for the test events aggregate API endpoint.
      properties:
        data:
          $ref: '#/components/schemas/CIAppTestsAggregationBucketsResponse'
        links:
          $ref: '#/components/schemas/CIAppResponseLinks'
        meta:
          $ref: '#/components/schemas/CIAppResponseMetadataWithPagination'
      type: object
    CIAppTestEventsResponse:
      description: >-
        Response object with all test events matching the request and pagination
        information.
      properties:
        data:
          description: Array of events matching the request.
          items:
            $ref: '#/components/schemas/CIAppTestEvent'
          type: array
        links:
          $ref: '#/components/schemas/CIAppResponseLinks'
        meta:
          $ref: '#/components/schemas/CIAppResponseMetadataWithPagination'
      type: object
    CIAppTestEventsRequest:
      description: The request for a tests search.
      properties:
        filter:
          $ref: '#/components/schemas/CIAppTestsQueryFilter'
        options:
          $ref: '#/components/schemas/CIAppQueryOptions'
        page:
          $ref: '#/components/schemas/CIAppQueryPageOptions'
        sort:
          $ref: '#/components/schemas/CIAppSort'
      type: object
    DORADeploymentRequest:
      description: Request to create a DORA deployment event.
      properties:
        data:
          $ref: '#/components/schemas/DORADeploymentRequestData'
      required:
        - data
      type: object
    DORADeploymentResponse:
      description: Response after receiving a DORA deployment event.
      properties:
        data:
          $ref: '#/components/schemas/DORADeploymentResponseData'
      required:
        - data
      type: object
    JSONAPIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          items:
            $ref: '#/components/schemas/JSONAPIErrorItem'
          type: array
      required:
        - errors
      type: object
    DORAListDeploymentsRequest:
      description: Request to get a list of deployments.
      properties:
        data:
          $ref: '#/components/schemas/DORAListDeploymentsRequestData'
      required:
        - data
      type: object
    DORAListResponse:
      description: Response for the DORA list endpoints.
      properties:
        data:
          description: The list of DORA events.
          items:
            $ref: '#/components/schemas/DORAEvent'
          type: array
      type: object
    DORAFetchResponse:
      description: Response for the DORA fetch endpoints.
      properties:
        data:
          $ref: '#/components/schemas/DORAEvent'
      type: object
    DORAFailureRequest:
      description: Request to create a DORA failure event.
      properties:
        data:
          $ref: '#/components/schemas/DORAFailureRequestData'
      required:
        - data
      type: object
    DORAFailureResponse:
      description: Response after receiving a DORA failure event.
      properties:
        data:
          $ref: '#/components/schemas/DORAFailureResponseData'
      required:
        - data
      type: object
    DORAListFailuresRequest:
      description: Request to get a list of failures.
      properties:
        data:
          $ref: '#/components/schemas/DORAListFailuresRequestData'
      required:
        - data
      type: object
    CreateWorkflowRequest:
      description: A request object for creating a new workflow.
      example:
        data:
          attributes:
            description: A sample workflow.
            name: Example Workflow
            published: true
            spec:
              annotations:
                - display:
                    bounds:
                      height: 150
                      width: 300
                      x: -375
                      'y': -0.5
                  id: 99999999-9999-9999-9999-999999999999
                  markdownTextAnnotation:
                    text: Example annotation.
              connectionEnvs:
                - connections:
                    - connectionId: 11111111-1111-1111-1111-111111111111
                      label: INTEGRATION_DATADOG
                  env: default
              handle: my-handle
              inputSchema:
                parameters:
                  - defaultValue: default
                    name: input
                    type: STRING
              outputSchema:
                parameters:
                  - name: output
                    type: ARRAY_OBJECT
                    value: '{{ Steps.Step1 }}'
              steps:
                - actionId: com.datadoghq.dd.monitor.listMonitors
                  connectionLabel: INTEGRATION_DATADOG
                  name: Step1
                  outboundEdges:
                    - branchName: main
                      nextStepName: Step2
                  parameters:
                    - name: tags
                      value: service:monitoring
                - actionId: com.datadoghq.core.noop
                  name: Step2
              triggers:
                - monitorTrigger:
                    rateLimit:
                      count: 1
                      interval: 3600s
                  startStepNames:
                    - Step1
                - githubWebhookTrigger: {}
                  startStepNames:
                    - Step1
            tags:
              - team:infra
              - service:monitoring
              - foo:bar
          type: workflows
      properties:
        data:
          $ref: '#/components/schemas/WorkflowData'
      required:
        - data
      type: object
    CreateWorkflowResponse:
      description: The response object after creating a new workflow.
      properties:
        data:
          $ref: '#/components/schemas/WorkflowData'
      required:
        - data
      type: object
    GetWorkflowResponse:
      description: The response object after getting a workflow.
      properties:
        data:
          $ref: '#/components/schemas/WorkflowData'
      type: object
    UpdateWorkflowRequest:
      description: A request object for updating an existing workflow.
      example:
        data:
          attributes:
            description: A sample workflow.
            name: Example Workflow
            published: true
            spec:
              annotations:
                - display:
                    bounds:
                      height: 150
                      width: 300
                      x: -375
                      'y': -0.5
                  id: 99999999-9999-9999-9999-999999999999
                  markdownTextAnnotation:
                    text: Example annotation.
              connectionEnvs:
                - connections:
                    - connectionId: 11111111-1111-1111-1111-111111111111
                      label: INTEGRATION_DATADOG
                  env: default
              handle: my-handle
              inputSchema:
                parameters:
                  - defaultValue: default
                    name: input
                    type: STRING
              outputSchema:
                parameters:
                  - name: output
                    type: ARRAY_OBJECT
                    value: '{{ Steps.Step1 }}'
              steps:
                - actionId: com.datadoghq.dd.monitor.listMonitors
                  connectionLabel: INTEGRATION_DATADOG
                  name: Step1
                  outboundEdges:
                    - branchName: main
                      nextStepName: Step2
                  parameters:
                    - name: tags
                      value: service:monitoring
                - actionId: com.datadoghq.core.noop
                  name: Step2
              triggers:
                - monitorTrigger:
                    rateLimit:
                      count: 1
                      interval: 3600s
                  startStepNames:
                    - Step1
                - githubWebhookTrigger: {}
                  startStepNames:
                    - Step1
            tags:
              - team:infra
              - service:monitoring
              - foo:bar
          id: 22222222-2222-2222-2222-222222222222
          type: workflows
      properties:
        data:
          $ref: '#/components/schemas/WorkflowDataUpdate'
      required:
        - data
      type: object
    UpdateWorkflowResponse:
      description: The response object after updating a workflow.
      properties:
        data:
          $ref: '#/components/schemas/WorkflowDataUpdate'
      type: object
    WorkflowListInstancesResponse:
      additionalProperties: {}
      description: Response returned when listing workflow instances.
      properties:
        data:
          description: A list of workflow instances.
          items:
            $ref: '#/components/schemas/WorkflowInstanceListItem'
          type: array
        meta:
          $ref: '#/components/schemas/WorkflowListInstancesResponseMeta'
      type: object
    WorkflowInstanceCreateRequest:
      description: Request used to create a workflow instance.
      properties:
        meta:
          $ref: '#/components/schemas/WorkflowInstanceCreateMeta'
      type: object
    WorkflowInstanceCreateResponse:
      additionalProperties: {}
      description: Response returned upon successful workflow instance creation.
      properties:
        data:
          $ref: '#/components/schemas/WorkflowInstanceCreateResponseData'
      type: object
    WorklflowGetInstanceResponse:
      additionalProperties: {}
      description: The state of the given workflow instance.
      properties:
        data:
          $ref: '#/components/schemas/WorklflowGetInstanceResponseData'
      type: object
    WorklflowCancelInstanceResponse:
      description: Information about the canceled instance.
      properties:
        data:
          $ref: '#/components/schemas/WorklflowCancelInstanceResponseData'
      type: object
    CIAppCreatePipelineEventRequestDataSingleOrArray:
      description: Data of the pipeline events to create.
      oneOf:
        - $ref: '#/components/schemas/CIAppCreatePipelineEventRequestData'
        - $ref: '#/components/schemas/CIAppCreatePipelineEventRequestDataArray'
    HTTPCIAppError:
      description: List of errors.
      properties:
        detail:
          description: Error message.
          example: Malformed payload
          type: string
        status:
          description: Error code.
          example: '400'
          type: string
        title:
          description: Error title.
          example: Bad Request
          type: string
      type: object
    CIAppCompute:
      description: A compute rule to compute metrics or timeseries.
      properties:
        aggregation:
          $ref: '#/components/schemas/CIAppAggregationFunction'
        interval:
          description: |-
            The time buckets' size (only used for type=timeseries)
            Defaults to a resolution of 150 points.
          example: 5m
          type: string
        metric:
          description: The metric to use.
          example: '@duration'
          type: string
        type:
          $ref: '#/components/schemas/CIAppComputeType'
      required:
        - aggregation
      type: object
    CIAppPipelinesQueryFilter:
      description: The search and filter query settings.
      properties:
        from:
          default: now-15m
          description: >-
            The minimum time for the requested events; supports date, math, and
            regular timestamps (in milliseconds).
          example: now-15m
          type: string
        query:
          default: '*'
          description: The search query following the CI Visibility Explorer search syntax.
          example: '@ci.provider.name:github AND @ci.status:error'
          type: string
        to:
          default: now
          description: >-
            The maximum time for the requested events, supports date, math, and
            regular timestamps (in milliseconds).
          example: now
          type: string
      type: object
    CIAppPipelinesGroupBy:
      description: A group-by rule.
      properties:
        facet:
          description: The name of the facet to use (required).
          example: '@ci.status'
          type: string
        histogram:
          $ref: '#/components/schemas/CIAppGroupByHistogram'
        limit:
          default: 10
          description: The maximum buckets to return for this group-by.
          format: int64
          type: integer
        missing:
          $ref: '#/components/schemas/CIAppGroupByMissing'
        sort:
          $ref: '#/components/schemas/CIAppAggregateSort'
        total:
          $ref: '#/components/schemas/CIAppGroupByTotal'
      required:
        - facet
      type: object
    CIAppQueryOptions:
      description: >-
        Global query options that are used during the query.

        Only supply timezone or time offset, not both. Otherwise, the query
        fails.
      properties:
        time_offset:
          description: The time offset (in seconds) to apply to the query.
          format: int64
          type: integer
        timezone:
          default: UTC
          description: >-
            The timezone can be specified as GMT, UTC, an offset from UTC (like
            UTC+1), or as a Timezone Database identifier (like
            America/New_York).
          example: GMT
          type: string
      type: object
    CIAppPipelinesAggregationBucketsResponse:
      description: The query results.
      properties:
        buckets:
          description: The list of matching buckets, one item per bucket.
          items:
            $ref: '#/components/schemas/CIAppPipelinesBucketResponse'
          type: array
      type: object
    CIAppResponseLinks:
      description: Links attributes.
      properties:
        next:
          description: >-
            Link for the next set of results. The request can also be made using
            the

            POST endpoint.
          example: >-
            https://app.datadoghq.com/api/v2/ci/tests/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
      type: object
    CIAppResponseMetadata:
      description: The metadata associated with a request.
      properties:
        elapsed:
          description: The time elapsed in milliseconds.
          example: 132
          format: int64
          type: integer
        request_id:
          description: The identifier of the request.
          example: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
          type: string
        status:
          $ref: '#/components/schemas/CIAppResponseStatus'
        warnings:
          description: >-
            A list of warnings (non-fatal errors) encountered. Partial results
            may return if

            warnings are present in the response.
          items:
            $ref: '#/components/schemas/CIAppWarning'
          type: array
      type: object
    APIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          example:
            - Bad Request
          items:
            description: A list of items.
            example: Bad Request
            type: string
          type: array
      required:
        - errors
      type: object
    CIAppPipelineEvent:
      description: >-
        Object description of a pipeline event after being processed and stored
        by Datadog.
      properties:
        attributes:
          $ref: '#/components/schemas/CIAppPipelineEventAttributes'
        id:
          description: Unique ID of the event.
          example: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
          type: string
        type:
          $ref: '#/components/schemas/CIAppPipelineEventTypeName'
      type: object
    CIAppResponseMetadataWithPagination:
      description: The metadata associated with a request.
      properties:
        elapsed:
          description: The time elapsed in milliseconds.
          example: 132
          format: int64
          type: integer
        page:
          $ref: '#/components/schemas/CIAppResponsePage'
        request_id:
          description: The identifier of the request.
          example: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
          type: string
        status:
          $ref: '#/components/schemas/CIAppResponseStatus'
        warnings:
          description: >-
            A list of warnings (non-fatal errors) encountered. Partial results
            may return if

            warnings are present in the response.
          items:
            $ref: '#/components/schemas/CIAppWarning'
          type: array
      type: object
    CIAppQueryPageOptions:
      description: Paging attributes for listing events.
      properties:
        cursor:
          description: List following results with a cursor provided in the previous query.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
        limit:
          default: 10
          description: Maximum number of events in the response.
          example: 25
          format: int32
          maximum: 1000
          type: integer
      type: object
    CIAppTestsQueryFilter:
      description: The search and filter query settings.
      properties:
        from:
          default: now-15m
          description: >-
            The minimum time for the requested events; supports date, math, and
            regular timestamps (in milliseconds).
          example: now-15m
          type: string
        query:
          default: '*'
          description: The search query following the CI Visibility Explorer search syntax.
          example: '@test.service:web-ui-tests AND @test.status:fail'
          type: string
        to:
          default: now
          description: >-
            The maximum time for the requested events, supports date, math, and
            regular timestamps (in milliseconds).
          example: now
          type: string
      type: object
    CIAppTestsGroupBy:
      description: A group-by rule.
      properties:
        facet:
          description: The name of the facet to use (required).
          example: '@test.service'
          type: string
        histogram:
          $ref: '#/components/schemas/CIAppGroupByHistogram'
        limit:
          default: 10
          description: The maximum buckets to return for this group-by.
          format: int64
          type: integer
        missing:
          $ref: '#/components/schemas/CIAppGroupByMissing'
        sort:
          $ref: '#/components/schemas/CIAppAggregateSort'
        total:
          $ref: '#/components/schemas/CIAppGroupByTotal'
      required:
        - facet
      type: object
    CIAppTestsAggregationBucketsResponse:
      description: The query results.
      properties:
        buckets:
          description: The list of matching buckets, one item per bucket.
          items:
            $ref: '#/components/schemas/CIAppTestsBucketResponse'
          type: array
      type: object
    CIAppTestEvent:
      description: >-
        Object description of test event after being processed and stored by
        Datadog.
      properties:
        attributes:
          $ref: '#/components/schemas/CIAppEventAttributes'
        id:
          description: Unique ID of the event.
          example: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
          type: string
        type:
          $ref: '#/components/schemas/CIAppTestEventTypeName'
      type: object
    DORADeploymentRequestData:
      description: The JSON:API data.
      properties:
        attributes:
          $ref: '#/components/schemas/DORADeploymentRequestAttributes'
      required:
        - attributes
      type: object
    DORADeploymentResponseData:
      description: The JSON:API data.
      properties:
        id:
          description: The ID of the received DORA deployment event.
          example: 4242fcdd31586083
          type: string
        type:
          $ref: '#/components/schemas/DORADeploymentType'
      required:
        - id
      type: object
    JSONAPIErrorItem:
      description: API error response body
      properties:
        detail:
          description: >-
            A human-readable explanation specific to this occurrence of the
            error.
          example: Missing required attribute in body
          type: string
        meta:
          additionalProperties: {}
          description: Non-standard meta-information about the error
          type: object
        source:
          $ref: '#/components/schemas/JSONAPIErrorItemSource'
        status:
          description: Status code of the response.
          example: '400'
          type: string
        title:
          description: Short human-readable summary of the error.
          example: Bad Request
          type: string
      type: object
    DORAListDeploymentsRequestData:
      description: The JSON:API data.
      properties:
        attributes:
          $ref: '#/components/schemas/DORAListDeploymentsRequestAttributes'
        type:
          $ref: '#/components/schemas/DORAListDeploymentsRequestDataType'
      required:
        - attributes
      type: object
    DORAEvent:
      description: A DORA event.
      properties:
        attributes:
          description: The attributes of the event.
          type: object
        id:
          description: The ID of the event.
          type: string
        type:
          description: The type of the event.
          type: string
      type: object
    DORAFailureRequestData:
      description: The JSON:API data.
      properties:
        attributes:
          $ref: '#/components/schemas/DORAFailureRequestAttributes'
      required:
        - attributes
      type: object
    DORAFailureResponseData:
      description: Response after receiving a DORA failure event.
      properties:
        id:
          description: The ID of the received DORA failure event.
          example: 4242fcdd31586083
          type: string
        type:
          $ref: '#/components/schemas/DORAFailureType'
      required:
        - id
      type: object
    DORAListFailuresRequestData:
      description: The JSON:API data.
      properties:
        attributes:
          $ref: '#/components/schemas/DORAListFailuresRequestAttributes'
        type:
          $ref: '#/components/schemas/DORAListFailuresRequestDataType'
      required:
        - attributes
      type: object
    WorkflowData:
      description: Data related to the workflow.
      properties:
        attributes:
          $ref: '#/components/schemas/WorkflowDataAttributes'
        id:
          description: The workflow identifier
          readOnly: true
          type: string
        relationships:
          $ref: '#/components/schemas/WorkflowDataRelationships'
        type:
          $ref: '#/components/schemas/WorkflowDataType'
      required:
        - type
        - attributes
      type: object
    WorkflowDataUpdate:
      description: Data related to the workflow being updated.
      properties:
        attributes:
          $ref: '#/components/schemas/WorkflowDataUpdateAttributes'
        id:
          description: The workflow identifier
          type: string
        relationships:
          $ref: '#/components/schemas/WorkflowDataRelationships'
        type:
          $ref: '#/components/schemas/WorkflowDataType'
      required:
        - type
        - attributes
      type: object
    WorkflowInstanceListItem:
      additionalProperties: {}
      description: An item in the workflow instances list.
      properties:
        id:
          description: The ID of the workflow instance
          type: string
      type: object
    WorkflowListInstancesResponseMeta:
      additionalProperties: {}
      description: Metadata about the instances list
      properties:
        page:
          $ref: '#/components/schemas/WorkflowListInstancesResponseMetaPage'
      type: object
    WorkflowInstanceCreateMeta:
      description: Additional information for creating a workflow instance.
      properties:
        payload:
          additionalProperties: {}
          description: The input parameters to the workflow.
          type: object
      type: object
    WorkflowInstanceCreateResponseData:
      additionalProperties: {}
      description: Data about the created workflow instance.
      properties:
        id:
          description: >-
            The ID of the workflow execution. It can be used to fetch the
            execution status.
          type: string
      type: object
    WorklflowGetInstanceResponseData:
      additionalProperties: {}
      description: The data of the instance response.
      properties:
        attributes:
          $ref: '#/components/schemas/WorklflowGetInstanceResponseDataAttributes'
      type: object
    WorklflowCancelInstanceResponseData:
      description: Data about the canceled instance.
      properties:
        id:
          description: The id of the canceled instance
          type: string
      type: object
    CIAppCreatePipelineEventRequestData:
      description: Data of the pipeline event to create.
      properties:
        attributes:
          $ref: '#/components/schemas/CIAppCreatePipelineEventRequestAttributes'
        type:
          $ref: '#/components/schemas/CIAppCreatePipelineEventRequestDataType'
      type: object
    CIAppCreatePipelineEventRequestDataArray:
      description: Array of pipeline events to create in batch.
      items:
        $ref: '#/components/schemas/CIAppCreatePipelineEventRequestData'
      type: array
    CIAppAggregationFunction:
      description: An aggregation function.
      enum:
        - count
        - cardinality
        - pc75
        - pc90
        - pc95
        - pc98
        - pc99
        - sum
        - min
        - max
        - avg
        - median
        - latest
        - earliest
        - most_frequent
        - delta
      example: pc90
      type: string
      x-enum-varnames:
        - COUNT
        - CARDINALITY
        - PERCENTILE_75
        - PERCENTILE_90
        - PERCENTILE_95
        - PERCENTILE_98
        - PERCENTILE_99
        - SUM
        - MIN
        - MAX
        - AVG
        - MEDIAN
        - LATEST
        - EARLIEST
        - MOST_FREQUENT
        - DELTA
    CIAppComputeType:
      default: total
      description: The type of compute.
      enum:
        - timeseries
        - total
      type: string
      x-enum-varnames:
        - TIMESERIES
        - TOTAL
    CIAppGroupByHistogram:
      description: >-
        Used to perform a histogram computation (only for measure facets).

        At most, 100 buckets are allowed, the number of buckets is `(max -
        min)/interval`.
      properties:
        interval:
          description: The bin size of the histogram buckets.
          example: 10
          format: double
          type: number
        max:
          description: |-
            The maximum value for the measure used in the histogram
            (values greater than this one are filtered out).
          example: 100
          format: double
          type: number
        min:
          description: |-
            The minimum value for the measure used in the histogram
            (values smaller than this one are filtered out).
          example: 50
          format: double
          type: number
      required:
        - interval
        - min
        - max
      type: object
    CIAppGroupByMissing:
      description: The value to use for logs that don't have the facet used to group-by.
      oneOf:
        - $ref: '#/components/schemas/CIAppGroupByMissingString'
        - $ref: '#/components/schemas/CIAppGroupByMissingNumber'
    CIAppAggregateSort:
      description: >-
        A sort rule. The `aggregation` field is required when `type` is
        `measure`.
      example:
        aggregation: count
        order: asc
      properties:
        aggregation:
          $ref: '#/components/schemas/CIAppAggregationFunction'
        metric:
          description: The metric to sort by (only used for `type=measure`).
          example: '@duration'
          type: string
        order:
          $ref: '#/components/schemas/CIAppSortOrder'
        type:
          $ref: '#/components/schemas/CIAppAggregateSortType'
      type: object
    CIAppGroupByTotal:
      default: false
      description: >-
        A resulting object to put the given computes in over all the matching
        records.
      oneOf:
        - $ref: '#/components/schemas/CIAppGroupByTotalBoolean'
        - $ref: '#/components/schemas/CIAppGroupByTotalString'
        - $ref: '#/components/schemas/CIAppGroupByTotalNumber'
    CIAppPipelinesBucketResponse:
      description: Bucket values.
      properties:
        by:
          additionalProperties:
            description: The values for each group-by.
          description: The key-value pairs for each group-by.
          example:
            '@ci.provider.name': gitlab
            '@ci.status': success
          type: object
        computes:
          $ref: '#/components/schemas/CIAppComputes'
      type: object
    CIAppResponseStatus:
      description: The status of the response.
      enum:
        - done
        - timeout
      example: done
      type: string
      x-enum-varnames:
        - DONE
        - TIMEOUT
    CIAppWarning:
      description: A warning message indicating something that went wrong with the query.
      properties:
        code:
          description: A unique code for this type of warning.
          example: unknown_index
          type: string
        detail:
          description: A detailed explanation of this specific warning.
          example: 'indexes: foo, bar'
          type: string
        title:
          description: A short human-readable summary of the warning.
          example: >-
            One or several indexes are missing or invalid, results hold data
            from the other indexes
          type: string
      type: object
    CIAppPipelineEventAttributes:
      description: JSON object containing all event attributes and their associated values.
      properties:
        attributes:
          additionalProperties: {}
          description: JSON object of attributes from CI Visibility pipeline events.
          example:
            customAttribute: 123
            duration: 2345
          type: object
        ci_level:
          $ref: '#/components/schemas/CIAppPipelineLevel'
        tags:
          $ref: '#/components/schemas/TagsEventAttribute'
      type: object
    CIAppPipelineEventTypeName:
      description: Type of the event.
      enum:
        - cipipeline
      example: cipipeline
      type: string
      x-enum-varnames:
        - CIPIPELINE
    CIAppResponsePage:
      description: Paging attributes.
      properties:
        after:
          description: >-
            The cursor to use to get the next results, if any. To make the next
            request, use the same parameters with the addition of
            `page[cursor]`.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
      type: object
    CIAppTestsBucketResponse:
      description: Bucket values.
      properties:
        by:
          additionalProperties:
            description: The values for each group-by.
          description: The key-value pairs for each group-by.
          example:
            '@test.service': web-ui-tests
            '@test.status': skip
          type: object
        computes:
          $ref: '#/components/schemas/CIAppComputes'
      type: object
    CIAppEventAttributes:
      description: JSON object containing all event attributes and their associated values.
      properties:
        attributes:
          additionalProperties: {}
          description: JSON object of attributes from CI Visibility test events.
          example:
            customAttribute: 123
            duration: 2345
          type: object
        tags:
          $ref: '#/components/schemas/TagsEventAttribute'
        test_level:
          $ref: '#/components/schemas/CIAppTestLevel'
      type: object
    CIAppTestEventTypeName:
      description: Type of the event.
      enum:
        - citest
      example: citest
      type: string
      x-enum-varnames:
        - CITEST
    DORADeploymentRequestAttributes:
      description: Attributes to create a DORA deployment event.
      properties:
        custom_tags:
          $ref: '#/components/schemas/DORACustomTags'
        env:
          description: Environment name to where the service was deployed.
          example: staging
          type: string
        finished_at:
          description: >-
            Unix timestamp when the deployment finished. It must be in
            nanoseconds, milliseconds, or seconds, and it should not be older
            than 1 hour.
          example: 1693491984000000000
          format: int64
          type: integer
        git:
          $ref: '#/components/schemas/DORAGitInfo'
        id:
          description: Deployment ID.
          type: string
        service:
          description: Service name.
          example: shopist
          type: string
        started_at:
          description: >-
            Unix timestamp when the deployment started. It must be in
            nanoseconds, milliseconds, or seconds.
          example: 1693491974000000000
          format: int64
          type: integer
        team:
          description: >-
            Name of the team owning the deployed service. If not provided, this
            is automatically populated with the team associated with the service
            in the Service Catalog.
          example: backend
          type: string
        version:
          description: >-
            Version to correlate with [APM Deployment
            Tracking](https://docs.datadoghq.com/tracing/services/deployment_tracking/).
          example: v1.12.07
          type: string
      required:
        - service
        - started_at
        - finished_at
      type: object
    DORADeploymentType:
      default: dora_deployment
      description: JSON:API type for DORA deployment events.
      enum:
        - dora_deployment
      example: dora_deployment
      type: string
      x-enum-varnames:
        - DORA_DEPLOYMENT
    JSONAPIErrorItemSource:
      description: References to the source of the error.
      properties:
        header:
          description: >-
            A string indicating the name of a single request header which caused
            the error.
          example: Authorization
          type: string
        parameter:
          description: A string indicating which URI query parameter caused the error.
          example: limit
          type: string
        pointer:
          description: >-
            A JSON pointer to the value in the request document that caused the
            error.
          example: /data/attributes/title
          type: string
      type: object
    DORAListDeploymentsRequestAttributes:
      description: Attributes to get a list of deployments.
      properties:
        from:
          description: Minimum timestamp for requested events.
          format: date-time
          type: string
        limit:
          default: 10
          description: Maximum number of events in the response.
          format: int32
          maximum: 1000
          type: integer
        query:
          description: Search query with event platform syntax.
          type: string
        sort:
          description: Sort order (prefixed with `-` for descending).
          type: string
        to:
          description: Maximum timestamp for requested events.
          format: date-time
          type: string
      type: object
    DORAListDeploymentsRequestDataType:
      description: The definition of `DORAListDeploymentsRequestDataType` object.
      enum:
        - dora_deployments_list_request
      type: string
      x-enum-varnames:
        - DORA_DEPLOYMENTS_LIST_REQUEST
    DORAFailureRequestAttributes:
      description: Attributes to create a DORA failure event.
      properties:
        custom_tags:
          $ref: '#/components/schemas/DORACustomTags'
        env:
          description: Environment name that was impacted by the failure.
          example: staging
          type: string
        finished_at:
          description: >-
            Unix timestamp when the failure finished. It must be in nanoseconds,
            milliseconds, or seconds.
          example: 1693491984000000000
          format: int64
          type: integer
        git:
          $ref: '#/components/schemas/DORAGitInfo'
        id:
          description: >-
            Failure ID. Must have at least 16 characters. Required to update a
            previously sent failure.
          type: string
        name:
          description: Failure name.
          example: Webserver is down failing all requests.
          type: string
        services:
          description: >-
            Service names impacted by the failure. If possible, use names
            registered in the Service Catalog. Required when the team field is
            not provided.
          example:
            - shopist
          items:
            type: string
          type: array
        severity:
          description: Failure severity.
          example: High
          type: string
        started_at:
          description: >-
            Unix timestamp when the failure started. It must be in nanoseconds,
            milliseconds, or seconds.
          example: 1693491974000000000
          format: int64
          type: integer
        team:
          description: >-
            Name of the team owning the services impacted. If possible, use team
            handles registered in Datadog. Required when the services field is
            not provided.
          example: backend
          type: string
        version:
          description: >-
            Version to correlate with [APM Deployment
            Tracking](https://docs.datadoghq.com/tracing/services/deployment_tracking/).
          example: v1.12.07
          type: string
      required:
        - started_at
      type: object
    DORAFailureType:
      default: dora_failure
      description: JSON:API type for DORA failure events.
      enum:
        - dora_failure
      example: dora_failure
      type: string
      x-enum-varnames:
        - DORA_FAILURE
    DORAListFailuresRequestAttributes:
      description: Attributes to get a list of failures.
      properties:
        from:
          description: Minimum timestamp for requested events.
          format: date-time
          type: string
        limit:
          default: 10
          description: Maximum number of events in the response.
          format: int32
          maximum: 1000
          type: integer
        query:
          description: Search query with event platform syntax.
          type: string
        sort:
          description: Sort order (prefixed with `-` for descending).
          type: string
        to:
          description: Maximum timestamp for requested events.
          format: date-time
          type: string
      type: object
    DORAListFailuresRequestDataType:
      description: The definition of `DORAListFailuresRequestDataType` object.
      enum:
        - dora_failures_list_request
      type: string
      x-enum-varnames:
        - DORA_FAILURES_LIST_REQUEST
    WorkflowDataAttributes:
      description: The definition of `WorkflowDataAttributes` object.
      properties:
        createdAt:
          description: When the workflow was created.
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the workflow.
          type: string
        name:
          description: Name of the workflow.
          example: ''
          type: string
        published:
          description: >-
            Set the workflow to published or unpublished. Workflows in an
            unpublished state will only be executable via manual runs. Automatic
            triggers such as Schedule will not execute the workflow until it is
            published.
          type: boolean
        spec:
          $ref: '#/components/schemas/Spec'
        tags:
          description: Tags of the workflow.
          items:
            type: string
          type: array
        updatedAt:
          description: When the workflow was last updated.
          format: date-time
          readOnly: true
          type: string
        webhookSecret:
          description: >-
            If a Webhook trigger is defined on this workflow, a webhookSecret is
            required and should be provided here.
          type: string
          writeOnly: true
      required:
        - name
        - spec
      type: object
    WorkflowDataRelationships:
      description: The definition of `WorkflowDataRelationships` object.
      properties:
        creator:
          $ref: '#/components/schemas/WorkflowUserRelationship'
        owner:
          $ref: '#/components/schemas/WorkflowUserRelationship'
      readOnly: true
      type: object
    WorkflowDataType:
      description: The definition of `WorkflowDataType` object.
      enum:
        - workflows
      example: workflows
      type: string
      x-enum-varnames:
        - WORKFLOWS
    WorkflowDataUpdateAttributes:
      description: The definition of `WorkflowDataUpdateAttributes` object.
      properties:
        createdAt:
          description: When the workflow was created.
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the workflow.
          type: string
        name:
          description: Name of the workflow.
          type: string
        published:
          description: >-
            Set the workflow to published or unpublished. Workflows in an
            unpublished state will only be executable via manual runs. Automatic
            triggers such as Schedule will not execute the workflow until it is
            published.
          type: boolean
        spec:
          $ref: '#/components/schemas/Spec'
        tags:
          description: Tags of the workflow.
          items:
            type: string
          type: array
        updatedAt:
          description: When the workflow was last updated.
          format: date-time
          readOnly: true
          type: string
        webhookSecret:
          description: >-
            If a Webhook trigger is defined on this workflow, a webhookSecret is
            required and should be provided here.
          type: string
          writeOnly: true
      type: object
    WorkflowListInstancesResponseMetaPage:
      additionalProperties: {}
      description: Page information for the list instances response.
      properties:
        totalCount:
          description: The total count of items.
          format: int64
          type: integer
      type: object
    WorklflowGetInstanceResponseDataAttributes:
      additionalProperties: {}
      description: The attributes of the instance response data.
      properties:
        id:
          description: The id of the instance.
          type: string
      type: object
    CIAppCreatePipelineEventRequestAttributes:
      description: Attributes of the pipeline event to create.
      properties:
        env:
          description: The Datadog environment.
          type: string
        provider_name:
          description: The name of the CI provider. By default, this is "custom".
          type: string
        resource:
          $ref: >-
            #/components/schemas/CIAppCreatePipelineEventRequestAttributesResource
        service:
          description: >-
            If the CI provider is SaaS, use this to differentiate between
            instances.
          type: string
      required:
        - resource
      type: object
    CIAppCreatePipelineEventRequestDataType:
      default: cipipeline_resource_request
      description: Type of the event.
      enum:
        - cipipeline_resource_request
      example: cipipeline_resource_request
      type: string
      x-enum-varnames:
        - CIPIPELINE_RESOURCE_REQUEST
    CIAppGroupByMissingString:
      description: The missing value to use if there is a string valued facet.
      type: string
    CIAppGroupByMissingNumber:
      description: The missing value to use if there is a number valued facet.
      format: double
      type: number
    CIAppSortOrder:
      description: The order to use, ascending or descending.
      enum:
        - asc
        - desc
      example: asc
      type: string
      x-enum-varnames:
        - ASCENDING
        - DESCENDING
    CIAppAggregateSortType:
      default: alphabetical
      description: The type of sorting algorithm.
      enum:
        - alphabetical
        - measure
      type: string
      x-enum-varnames:
        - ALPHABETICAL
        - MEASURE
    CIAppGroupByTotalBoolean:
      description: If set to true, creates an additional bucket labeled "$facet_total".
      type: boolean
    CIAppGroupByTotalString:
      description: A string to use as the key value for the total bucket.
      type: string
    CIAppGroupByTotalNumber:
      description: A number to use as the key value for the total bucket.
      format: double
      type: number
    CIAppComputes:
      additionalProperties:
        $ref: '#/components/schemas/CIAppAggregateBucketValue'
      description: >-
        A map of the metric name to value for regular compute, or a list of
        values for a timeseries.
      type: object
    CIAppPipelineLevel:
      description: Pipeline execution level.
      enum:
        - pipeline
        - stage
        - job
        - step
        - custom
      example: pipeline
      type: string
      x-enum-varnames:
        - PIPELINE
        - STAGE
        - JOB
        - STEP
        - CUSTOM
    TagsEventAttribute:
      description: Array of tags associated with your event.
      example:
        - team:A
      items:
        description: Tag associated with your event.
        type: string
      type: array
    CIAppTestLevel:
      description: Test run level.
      enum:
        - session
        - module
        - suite
        - test
      example: test
      type: string
      x-enum-varnames:
        - SESSION
        - MODULE
        - SUITE
        - TEST
    DORACustomTags:
      description: >-
        A list of user-defined tags. The tags must follow the `key:value`
        pattern. Up to 100 may be added per event.
      example:
        - language:java
        - department:engineering
      items:
        description: Tags in the form of `key:value`.
        type: string
      nullable: true
      type: array
    DORAGitInfo:
      description: Git info for DORA Metrics events.
      properties:
        commit_sha:
          $ref: '#/components/schemas/GitCommitSHA'
        repository_url:
          $ref: '#/components/schemas/GitRepositoryURL'
      required:
        - repository_url
        - commit_sha
      type: object
    Spec:
      description: The spec defines what the workflow does.
      properties:
        annotations:
          description: >-
            A list of annotations used in the workflow. These are like sticky
            notes for your workflow!
          items:
            $ref: '#/components/schemas/Annotation'
          type: array
        connectionEnvs:
          description: A list of connections or connection groups used in the workflow.
          items:
            $ref: '#/components/schemas/ConnectionEnv'
          type: array
        handle:
          description: >-
            Unique identifier used to trigger workflows automatically in
            Datadog.
          type: string
        inputSchema:
          $ref: '#/components/schemas/InputSchema'
        outputSchema:
          $ref: '#/components/schemas/OutputSchema'
        steps:
          description: >-
            A `Step` is a sub-component of a workflow. Each `Step` performs an
            action.
          items:
            $ref: '#/components/schemas/Step'
          type: array
        triggers:
          description: >-
            The list of triggers that activate this workflow. At least one
            trigger is required, and each trigger type may appear at most once.
          items:
            $ref: '#/components/schemas/Trigger'
          type: array
      type: object
    WorkflowUserRelationship:
      description: The definition of `WorkflowUserRelationship` object.
      properties:
        data:
          $ref: '#/components/schemas/WorkflowUserRelationshipData'
      type: object
    CIAppCreatePipelineEventRequestAttributesResource:
      description: Details of the CI pipeline event.
      example: Details TBD
      oneOf:
        - $ref: '#/components/schemas/CIAppPipelineEventPipeline'
        - $ref: '#/components/schemas/CIAppPipelineEventStage'
        - $ref: '#/components/schemas/CIAppPipelineEventJob'
        - $ref: '#/components/schemas/CIAppPipelineEventStep'
    CIAppAggregateBucketValue:
      description: A bucket value, can either be a timeseries or a single value.
      oneOf:
        - $ref: '#/components/schemas/CIAppAggregateBucketValueSingleString'
        - $ref: '#/components/schemas/CIAppAggregateBucketValueSingleNumber'
        - $ref: '#/components/schemas/CIAppAggregateBucketValueTimeseries'
    GitCommitSHA:
      description: Git Commit SHA.
      example: 66adc9350f2cc9b250b69abddab733dd55e1a588
      pattern: ^[a-fA-F0-9]{40,}$
      type: string
    GitRepositoryURL:
      description: Git Repository URL
      example: https://github.com/organization/example-repository
      type: string
    Annotation:
      description: >-
        A list of annotations used in the workflow. These are like sticky notes
        for your workflow!
      properties:
        display:
          $ref: '#/components/schemas/AnnotationDisplay'
        id:
          description: The `Annotation` `id`.
          example: ''
          type: string
        markdownTextAnnotation:
          $ref: '#/components/schemas/AnnotationMarkdownTextAnnotation'
      required:
        - id
        - display
        - markdownTextAnnotation
      type: object
    ConnectionEnv:
      description: A list of connections or connection groups used in the workflow.
      properties:
        connectionGroups:
          description: The `ConnectionEnv` `connectionGroups`.
          items:
            $ref: '#/components/schemas/ConnectionGroup'
          type: array
        connections:
          description: The `ConnectionEnv` `connections`.
          items:
            $ref: '#/components/schemas/Connection'
          type: array
        env:
          $ref: '#/components/schemas/ConnectionEnvEnv'
      required:
        - env
      type: object
    InputSchema:
      description: >-
        A list of input parameters for the workflow. These can be used as
        dynamic runtime values in your workflow.
      properties:
        parameters:
          description: The `InputSchema` `parameters`.
          items:
            $ref: '#/components/schemas/InputSchemaParameters'
          type: array
      type: object
    OutputSchema:
      description: A list of output parameters for the workflow.
      properties:
        parameters:
          description: The `OutputSchema` `parameters`.
          items:
            $ref: '#/components/schemas/OutputSchemaParameters'
          type: array
      type: object
    Step:
      description: A Step is a sub-component of a workflow. Each Step performs an action.
      properties:
        actionId:
          description: The unique identifier of an action.
          example: ''
          type: string
        completionGate:
          $ref: '#/components/schemas/CompletionGate'
        connectionLabel:
          description: The unique identifier of a connection defined in the spec.
          type: string
        display:
          $ref: '#/components/schemas/StepDisplay'
        errorHandlers:
          description: The `Step` `errorHandlers`.
          items:
            $ref: '#/components/schemas/ErrorHandler'
          type: array
        name:
          description: Name of the step.
          example: ''
          type: string
        outboundEdges:
          description: A list of subsequent actions to run.
          items:
            $ref: '#/components/schemas/OutboundEdge'
          type: array
        parameters:
          description: A list of inputs for an action.
          items:
            $ref: '#/components/schemas/Parameter'
          type: array
        readinessGate:
          $ref: '#/components/schemas/ReadinessGate'
      required:
        - name
        - actionId
      type: object
    Trigger:
      description: One of the triggers that can start the execution of a workflow.
      oneOf:
        - $ref: '#/components/schemas/APITriggerWrapper'
        - $ref: '#/components/schemas/AppTriggerWrapper'
        - $ref: '#/components/schemas/CaseTriggerWrapper'
        - $ref: '#/components/schemas/ChangeEventTriggerWrapper'
        - $ref: '#/components/schemas/DatabaseMonitoringTriggerWrapper'
        - $ref: '#/components/schemas/DashboardTriggerWrapper'
        - $ref: '#/components/schemas/GithubWebhookTriggerWrapper'
        - $ref: '#/components/schemas/IncidentTriggerWrapper'
        - $ref: '#/components/schemas/MonitorTriggerWrapper'
        - $ref: '#/components/schemas/NotebookTriggerWrapper'
        - $ref: '#/components/schemas/ScheduleTriggerWrapper'
        - $ref: '#/components/schemas/SecurityTriggerWrapper'
        - $ref: '#/components/schemas/SelfServiceTriggerWrapper'
        - $ref: '#/components/schemas/SlackTriggerWrapper'
        - $ref: '#/components/schemas/SoftwareCatalogTriggerWrapper'
        - $ref: '#/components/schemas/WorkflowTriggerWrapper'
    WorkflowUserRelationshipData:
      description: The definition of `WorkflowUserRelationshipData` object.
      properties:
        id:
          description: The user identifier
          example: ''
          type: string
        type:
          $ref: '#/components/schemas/WorkflowUserRelationshipType'
      required:
        - type
        - id
      type: object
    CIAppPipelineEventPipeline:
      description: Details of the top level pipeline, build, or workflow of your CI.
      oneOf:
        - $ref: '#/components/schemas/CIAppPipelineEventFinishedPipeline'
        - $ref: '#/components/schemas/CIAppPipelineEventInProgressPipeline'
    CIAppPipelineEventStage:
      description: Details of a CI stage.
      properties:
        dependencies:
          description: A list of stage IDs that this stage depends on.
          example:
            - f7e6a006-a029-46c3-b0cc-742c9d7d363b
            - c8a69849-3c3b-4721-8b33-3e8ec2df1ebe
          items:
            description: A list of stage IDs.
            type: string
          nullable: true
          type: array
        end:
          description: Time when the stage run finished. The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        error:
          $ref: '#/components/schemas/CIAppCIError'
        git:
          $ref: '#/components/schemas/CIAppGitInfo'
        id:
          description: >-
            UUID for the stage. It has to be unique at least in the pipeline
            scope.
          example: 562bdbbb-7cab-48c8-851c-b24ca14628bf
          type: string
        level:
          $ref: '#/components/schemas/CIAppPipelineEventStageLevel'
        metrics:
          $ref: '#/components/schemas/CIAppPipelineEventMetrics'
        name:
          description: The name for the stage.
          example: build
          type: string
        node:
          $ref: '#/components/schemas/CIAppHostInfo'
        parameters:
          $ref: '#/components/schemas/CIAppPipelineEventParameters'
        pipeline_name:
          description: The parent pipeline name.
          example: Build
          type: string
        pipeline_unique_id:
          description: The parent pipeline UUID.
          example: 76b572af-a078-42b2-a08a-cc28f98b944f
          type: string
        queue_time:
          description: The queue time in milliseconds, if applicable.
          example: 1004
          format: int64
          minimum: 0
          nullable: true
          type: integer
        start:
          description: >-
            Time when the stage run started (it should not include any queue
            time). The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/CIAppPipelineEventStageStatus'
        tags:
          $ref: '#/components/schemas/CIAppPipelineEventTags'
      required:
        - level
        - id
        - name
        - pipeline_unique_id
        - pipeline_name
        - start
        - end
        - status
      type: object
    CIAppPipelineEventJob:
      description: Details of a CI job.
      properties:
        dependencies:
          description: A list of job IDs that this job depends on.
          example:
            - f7e6a006-a029-46c3-b0cc-742c9d7d363b
            - c8a69849-3c3b-4721-8b33-3e8ec2df1ebe
          items:
            description: A list of job IDs.
            type: string
          nullable: true
          type: array
        end:
          description: Time when the job run finished. The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        error:
          $ref: '#/components/schemas/CIAppCIError'
        git:
          $ref: '#/components/schemas/CIAppGitInfo'
        id:
          description: >-
            The UUID for the job. It has to be unique within each pipeline
            execution.
          example: c865bad4-de82-44b8-ade7-2c987528eb54
          type: string
        level:
          $ref: '#/components/schemas/CIAppPipelineEventJobLevel'
        metrics:
          $ref: '#/components/schemas/CIAppPipelineEventMetrics'
        name:
          description: The name for the job.
          example: test
          type: string
        node:
          $ref: '#/components/schemas/CIAppHostInfo'
        parameters:
          $ref: '#/components/schemas/CIAppPipelineEventParameters'
        pipeline_name:
          description: The parent pipeline name.
          example: Build
          type: string
        pipeline_unique_id:
          description: The parent pipeline UUID.
          example: 76b572af-a078-42b2-a08a-cc28f98b944f
          type: string
        queue_time:
          description: The queue time in milliseconds, if applicable.
          example: 1004
          format: int64
          minimum: 0
          nullable: true
          type: integer
        stage_id:
          description: The parent stage UUID (if applicable).
          nullable: true
          type: string
        stage_name:
          description: The parent stage name (if applicable).
          nullable: true
          type: string
        start:
          description: >-
            Time when the job run instance started (it should not include any
            queue time). The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/CIAppPipelineEventJobStatus'
        tags:
          $ref: '#/components/schemas/CIAppPipelineEventTags'
        url:
          description: The URL to look at the job in the CI provider UI.
          example: https://ci-platform.com/job/your-job-name/build/123
          type: string
      required:
        - level
        - id
        - name
        - pipeline_unique_id
        - pipeline_name
        - start
        - end
        - status
        - url
      type: object
    CIAppPipelineEventStep:
      description: Details of a CI step.
      properties:
        end:
          description: Time when the step run finished. The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        error:
          $ref: '#/components/schemas/CIAppCIError'
        git:
          $ref: '#/components/schemas/CIAppGitInfo'
        id:
          description: >-
            UUID for the step. It has to be unique within each pipeline
            execution.
          example: c2d517a8-4f3a-4b41-b4ae-69df0c864c79
          type: string
        job_id:
          description: The parent job UUID (if applicable).
          nullable: true
          type: string
        job_name:
          description: The parent job name (if applicable).
          nullable: true
          type: string
        level:
          $ref: '#/components/schemas/CIAppPipelineEventStepLevel'
        metrics:
          $ref: '#/components/schemas/CIAppPipelineEventMetrics'
        name:
          description: The name for the step.
          example: test-server
          type: string
        node:
          $ref: '#/components/schemas/CIAppHostInfo'
        parameters:
          $ref: '#/components/schemas/CIAppPipelineEventParameters'
        pipeline_name:
          description: The parent pipeline name.
          example: Build
          type: string
        pipeline_unique_id:
          description: The parent pipeline UUID.
          example: 76b572af-a078-42b2-a08a-cc28f98b944f
          type: string
        stage_id:
          description: The parent stage UUID (if applicable).
          nullable: true
          type: string
        stage_name:
          description: The parent stage name (if applicable).
          nullable: true
          type: string
        start:
          description: Time when the step run started. The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/CIAppPipelineEventStepStatus'
        tags:
          $ref: '#/components/schemas/CIAppPipelineEventTags'
        url:
          description: The URL to look at the step in the CI provider UI.
          nullable: true
          type: string
      required:
        - level
        - id
        - name
        - pipeline_unique_id
        - pipeline_name
        - start
        - end
        - status
      type: object
    CIAppAggregateBucketValueSingleString:
      description: A single string value.
      type: string
    CIAppAggregateBucketValueSingleNumber:
      description: A single number value.
      format: double
      type: number
    CIAppAggregateBucketValueTimeseries:
      description: A timeseries array.
      items:
        $ref: '#/components/schemas/CIAppAggregateBucketValueTimeseriesPoint'
      type: array
      x-generate-alias-as-model: true
    AnnotationDisplay:
      description: The definition of `AnnotationDisplay` object.
      properties:
        bounds:
          $ref: '#/components/schemas/AnnotationDisplayBounds'
      type: object
    AnnotationMarkdownTextAnnotation:
      description: The definition of `AnnotationMarkdownTextAnnotation` object.
      properties:
        text:
          description: The `markdownTextAnnotation` `text`.
          type: string
      type: object
    ConnectionGroup:
      description: The definition of `ConnectionGroup` object.
      properties:
        connectionGroupId:
          description: The `ConnectionGroup` `connectionGroupId`.
          example: ''
          type: string
        label:
          description: The `ConnectionGroup` `label`.
          example: ''
          type: string
        tags:
          description: The `ConnectionGroup` `tags`.
          example:
            - ''
          items:
            type: string
          type: array
      required:
        - connectionGroupId
        - label
        - tags
      type: object
    Connection:
      description: The definition of `Connection` object.
      properties:
        connectionId:
          description: The `Connection` `connectionId`.
          example: ''
          type: string
        label:
          description: The `Connection` `label`.
          example: ''
          type: string
      required:
        - connectionId
        - label
      type: object
    ConnectionEnvEnv:
      description: The definition of `ConnectionEnvEnv` object.
      enum:
        - default
      example: default
      type: string
      x-enum-varnames:
        - DEFAULT
    InputSchemaParameters:
      description: The definition of `InputSchemaParameters` object.
      properties:
        defaultValue:
          description: The `InputSchemaParameters` `defaultValue`.
        description:
          description: The `InputSchemaParameters` `description`.
          type: string
        label:
          description: The `InputSchemaParameters` `label`.
          type: string
        name:
          description: The `InputSchemaParameters` `name`.
          example: ''
          type: string
        type:
          $ref: '#/components/schemas/InputSchemaParametersType'
      required:
        - name
        - type
      type: object
    OutputSchemaParameters:
      description: The definition of `OutputSchemaParameters` object.
      properties:
        defaultValue:
          description: The `OutputSchemaParameters` `defaultValue`.
        description:
          description: The `OutputSchemaParameters` `description`.
          type: string
        label:
          description: The `OutputSchemaParameters` `label`.
          type: string
        name:
          description: The `OutputSchemaParameters` `name`.
          example: ''
          type: string
        type:
          $ref: '#/components/schemas/OutputSchemaParametersType'
        value:
          description: The `OutputSchemaParameters` `value`.
      required:
        - name
        - type
      type: object
    CompletionGate:
      description: Used to create conditions before running subsequent actions.
      properties:
        completionCondition:
          $ref: '#/components/schemas/CompletionCondition'
        retryStrategy:
          $ref: '#/components/schemas/RetryStrategy'
      required:
        - completionCondition
        - retryStrategy
      type: object
    StepDisplay:
      description: The definition of `StepDisplay` object.
      properties:
        bounds:
          $ref: '#/components/schemas/StepDisplayBounds'
      type: object
    ErrorHandler:
      description: Used to handle errors in an action.
      properties:
        fallbackStepName:
          description: The `ErrorHandler` `fallbackStepName`.
          example: ''
          type: string
        retryStrategy:
          $ref: '#/components/schemas/RetryStrategy'
      required:
        - retryStrategy
        - fallbackStepName
      type: object
    OutboundEdge:
      description: The definition of `OutboundEdge` object.
      properties:
        branchName:
          description: The `OutboundEdge` `branchName`.
          example: ''
          type: string
        nextStepName:
          description: The `OutboundEdge` `nextStepName`.
          example: ''
          type: string
      required:
        - nextStepName
        - branchName
      type: object
    Parameter:
      description: The definition of `Parameter` object.
      properties:
        name:
          description: The `Parameter` `name`.
          example: ''
          type: string
        value:
          description: The `Parameter` `value`.
      required:
        - name
        - value
      type: object
    ReadinessGate:
      description: Used to merge multiple branches into a single branch.
      properties:
        thresholdType:
          $ref: '#/components/schemas/ReadinessGateThresholdType'
      required:
        - thresholdType
      type: object
    APITriggerWrapper:
      description: Schema for an API-based trigger.
      properties:
        apiTrigger:
          $ref: '#/components/schemas/APITrigger'
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - apiTrigger
      type: object
    AppTriggerWrapper:
      description: Schema for an App-based trigger.
      properties:
        appTrigger:
          description: Trigger a workflow from an App.
          type: object
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - appTrigger
      type: object
    CaseTriggerWrapper:
      description: Schema for a Case-based trigger.
      properties:
        caseTrigger:
          $ref: '#/components/schemas/CaseTrigger'
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - caseTrigger
      type: object
    ChangeEventTriggerWrapper:
      description: Schema for a Change Event-based trigger.
      properties:
        changeEventTrigger:
          description: Trigger a workflow from a Change Event.
          type: object
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - changeEventTrigger
      type: object
    DatabaseMonitoringTriggerWrapper:
      description: Schema for a Database Monitoring-based trigger.
      properties:
        databaseMonitoringTrigger:
          description: Trigger a workflow from Database Monitoring.
          type: object
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - databaseMonitoringTrigger
      type: object
    DashboardTriggerWrapper:
      description: Schema for a Dashboard-based trigger.
      properties:
        dashboardTrigger:
          description: Trigger a workflow from a Dashboard.
          type: object
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - dashboardTrigger
      type: object
    GithubWebhookTriggerWrapper:
      description: Schema for a GitHub webhook-based trigger.
      properties:
        githubWebhookTrigger:
          $ref: '#/components/schemas/GithubWebhookTrigger'
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - githubWebhookTrigger
      type: object
    IncidentTriggerWrapper:
      description: Schema for an Incident-based trigger.
      properties:
        incidentTrigger:
          $ref: '#/components/schemas/IncidentTrigger'
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - incidentTrigger
      type: object
    MonitorTriggerWrapper:
      description: Schema for a Monitor-based trigger.
      properties:
        monitorTrigger:
          $ref: '#/components/schemas/MonitorTrigger'
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - monitorTrigger
      type: object
    NotebookTriggerWrapper:
      description: Schema for a Notebook-based trigger.
      properties:
        notebookTrigger:
          description: Trigger a workflow from a Notebook.
          type: object
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - notebookTrigger
      type: object
    ScheduleTriggerWrapper:
      description: Schema for a Schedule-based trigger.
      properties:
        scheduleTrigger:
          $ref: '#/components/schemas/ScheduleTrigger'
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - scheduleTrigger
      type: object
    SecurityTriggerWrapper:
      description: Schema for a Security-based trigger.
      properties:
        securityTrigger:
          $ref: '#/components/schemas/SecurityTrigger'
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - securityTrigger
      type: object
    SelfServiceTriggerWrapper:
      description: Schema for a Self Service-based trigger.
      properties:
        selfServiceTrigger:
          description: Trigger a workflow from Self Service.
          type: object
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - selfServiceTrigger
      type: object
    SlackTriggerWrapper:
      description: Schema for a Slack-based trigger.
      properties:
        slackTrigger:
          description: Trigger a workflow from Slack. The workflow must be published.
          type: object
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - slackTrigger
      type: object
    SoftwareCatalogTriggerWrapper:
      description: Schema for a Software Catalog-based trigger.
      properties:
        softwareCatalogTrigger:
          description: Trigger a workflow from Software Catalog.
          type: object
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
      required:
        - softwareCatalogTrigger
      type: object
    WorkflowTriggerWrapper:
      description: Schema for a Workflow-based trigger.
      properties:
        startStepNames:
          $ref: '#/components/schemas/StartStepNames'
        workflowTrigger:
          description: >-
            Trigger a workflow from the Datadog UI. Only required if no other
            trigger exists.
          type: object
      required:
        - workflowTrigger
      type: object
    WorkflowUserRelationshipType:
      description: The definition of `WorkflowUserRelationshipType` object.
      enum:
        - users
      example: users
      type: string
      x-enum-varnames:
        - USERS
    CIAppPipelineEventFinishedPipeline:
      description: Details of a finished pipeline.
      properties:
        end:
          description: >-
            Time when the pipeline run finished. It cannot be older than 18
            hours in the past from the current time. The time format must be
            RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        error:
          $ref: '#/components/schemas/CIAppCIError'
        git:
          $ref: '#/components/schemas/CIAppGitInfo'
        is_manual:
          description: Whether or not the pipeline was triggered manually by the user.
          example: false
          nullable: true
          type: boolean
        is_resumed:
          description: Whether or not the pipeline was resumed after being blocked.
          example: false
          nullable: true
          type: boolean
        level:
          $ref: '#/components/schemas/CIAppPipelineEventPipelineLevel'
        metrics:
          $ref: '#/components/schemas/CIAppPipelineEventMetrics'
        name:
          description: >-
            Name of the pipeline. All pipeline runs for the builds should have
            the same name.
          example: Deploy to AWS
          type: string
        node:
          $ref: '#/components/schemas/CIAppHostInfo'
        parameters:
          $ref: '#/components/schemas/CIAppPipelineEventParameters'
        parent_pipeline:
          $ref: '#/components/schemas/CIAppPipelineEventParentPipeline'
        partial_retry:
          description: >-
            Whether or not the pipeline was a partial retry of a previous
            attempt. A partial retry is one

            which only runs a subset of the original jobs.
          example: false
          type: boolean
        pipeline_id:
          description: >-
            Any ID used in the provider to identify the pipeline run even if it
            is not unique across retries.

            If the `pipeline_id` is unique, then both `unique_id` and
            `pipeline_id` can be set to the same value.
          example: '#023'
          type: string
        previous_attempt:
          $ref: '#/components/schemas/CIAppPipelineEventPreviousPipeline'
        queue_time:
          description: The queue time in milliseconds, if applicable.
          example: 1004
          format: int64
          minimum: 0
          nullable: true
          type: integer
        start:
          description: >-
            Time when the pipeline run started (it should not include any queue
            time). The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/CIAppPipelineEventPipelineStatus'
        tags:
          $ref: '#/components/schemas/CIAppPipelineEventTags'
        unique_id:
          description: >-
            UUID of the pipeline run. The ID has to be unique across retries and
            pipelines,

            including partial retries.
          example: 3eacb6f3-ff04-4e10-8a9c-46e6d054024a
          type: string
        url:
          description: The URL to look at the pipeline in the CI provider UI.
          example: https://my-ci-provider.example/pipelines/my-pipeline/run/1
          type: string
      required:
        - level
        - unique_id
        - name
        - url
        - start
        - end
        - status
        - partial_retry
      type: object
    CIAppPipelineEventInProgressPipeline:
      description: Details of a running pipeline.
      properties:
        error:
          $ref: '#/components/schemas/CIAppCIError'
        git:
          $ref: '#/components/schemas/CIAppGitInfo'
        is_manual:
          description: Whether or not the pipeline was triggered manually by the user.
          example: false
          nullable: true
          type: boolean
        is_resumed:
          description: Whether or not the pipeline was resumed after being blocked.
          example: false
          nullable: true
          type: boolean
        level:
          $ref: '#/components/schemas/CIAppPipelineEventPipelineLevel'
        metrics:
          $ref: '#/components/schemas/CIAppPipelineEventMetrics'
        name:
          description: >-
            Name of the pipeline. All pipeline runs for the builds should have
            the same name.
          example: Deploy to AWS
          type: string
        node:
          $ref: '#/components/schemas/CIAppHostInfo'
        parameters:
          $ref: '#/components/schemas/CIAppPipelineEventParameters'
        parent_pipeline:
          $ref: '#/components/schemas/CIAppPipelineEventParentPipeline'
        partial_retry:
          description: >-
            Whether or not the pipeline was a partial retry of a previous
            attempt. A partial retry is one

            which only runs a subset of the original jobs.
          example: false
          type: boolean
        pipeline_id:
          description: >-
            Any ID used in the provider to identify the pipeline run even if it
            is not unique across retries.

            If the `pipeline_id` is unique, then both `unique_id` and
            `pipeline_id` can be set to the same value.
          example: '#023'
          type: string
        previous_attempt:
          $ref: '#/components/schemas/CIAppPipelineEventPreviousPipeline'
        queue_time:
          description: The queue time in milliseconds, if applicable.
          example: 1004
          format: int64
          minimum: 0
          nullable: true
          type: integer
        start:
          description: >-
            Time when the pipeline run started (it should not include any queue
            time). The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/CIAppPipelineEventPipelineInProgressStatus'
        tags:
          $ref: '#/components/schemas/CIAppPipelineEventTags'
        unique_id:
          description: >-
            UUID of the pipeline run. The ID has to be the same as the finished
            pipeline.
          example: 3eacb6f3-ff04-4e10-8a9c-46e6d054024a
          type: string
        url:
          description: The URL to look at the pipeline in the CI provider UI.
          example: https://my-ci-provider.example/pipelines/my-pipeline/run/1
          type: string
      required:
        - level
        - unique_id
        - name
        - url
        - start
        - status
        - partial_retry
      type: object
    CIAppCIError:
      description: Contains information of the CI error.
      nullable: true
      properties:
        domain:
          $ref: '#/components/schemas/CIAppCIErrorDomain'
        message:
          description: Error message.
          maxLength: 5000
          nullable: true
          type: string
        stack:
          description: The stack trace of the reported errors.
          nullable: true
          type: string
        type:
          description: Short description of the error type.
          maxLength: 100
          nullable: true
          type: string
      type: object
    CIAppGitInfo:
      description: >-
        If pipelines are triggered due to actions to a Git repository, then all
        payloads must contain this.

        Note that either `tag` or `branch` has to be provided, but not both.
      nullable: true
      properties:
        author_email:
          description: The commit author email.
          example: author@example.com
          type: string
        author_name:
          description: The commit author name.
          example: John Doe
          nullable: true
          type: string
        author_time:
          description: The commit author timestamp in RFC3339 format.
          example: '2023-05-31T15:30:00Z'
          nullable: true
          type: string
        branch:
          description: The branch name (if a tag use the tag parameter).
          example: feature-1
          nullable: true
          type: string
        commit_time:
          description: The commit timestamp in RFC3339 format.
          example: '2023-05-31T15:30:00Z'
          nullable: true
          type: string
        committer_email:
          description: The committer email.
          example: committer@example.com
          nullable: true
          type: string
        committer_name:
          description: The committer name.
          nullable: true
          type: string
        default_branch:
          description: The Git repository's default branch.
          example: main
          nullable: true
          type: string
        message:
          description: The commit message.
          example: Instrumenting tests with CI Visibility.
          nullable: true
          type: string
        repository_url:
          description: The URL of the repository.
          example: https://github.com/username/repository
          type: string
        sha:
          description: The git commit SHA.
          example: da39a3ee5e6b4b0d3255bfef95601890afd80709
          pattern: ^[a-fA-F0-9]{40}$
          type: string
        tag:
          description: The tag name (if a branch use the branch parameter).
          example: v1.0.0
          nullable: true
          type: string
      required:
        - repository_url
        - sha
        - author_email
      type: object
    CIAppPipelineEventStageLevel:
      default: stage
      description: Used to distinguish between pipelines, stages, jobs and steps.
      enum:
        - stage
      example: stage
      type: string
      x-enum-varnames:
        - STAGE
    CIAppPipelineEventMetrics:
      description: >-
        A list of user-defined metrics. The metrics must follow the `key:value`
        pattern and the value must be numeric.
      example:
        - bundle_size:370
        - build_time:50021
      items:
        description: Metrics in the form of `key:value`. The value needs to be numeric.
        type: string
      nullable: true
      type: array
    CIAppHostInfo:
      description: >-
        Contains information of the host running the pipeline, stage, job, or
        step.
      nullable: true
      properties:
        hostname:
          description: FQDN of the host.
          example: www.example.com
          type: string
        labels:
          description: A list of labels used to select or identify the node.
          example:
            - ubuntu-18.04
            - n2.large
          items:
            type: string
          type: array
        name:
          description: Name for the host.
          type: string
        workspace:
          description: The path where the code is checked out.
          example: /home/workspace/code/my-repo
          type: string
      type: object
    CIAppPipelineEventParameters:
      additionalProperties:
        type: string
      description: >-
        A map of key-value parameters or environment variables that were defined
        for the pipeline.
      example:
        LOG_LEVEL: debug
      nullable: true
      type: object
    CIAppPipelineEventStageStatus:
      description: The final status of the stage.
      enum:
        - success
        - error
        - canceled
        - skipped
      example: success
      type: string
      x-enum-varnames:
        - SUCCESS
        - ERROR
        - CANCELED
        - SKIPPED
    CIAppPipelineEventTags:
      description: >-
        A list of user-defined tags. The tags must follow the `key:value`
        pattern.
      example:
        - team:backend
        - type:deployment
      items:
        description: Tags in the form of `key:value`.
        type: string
      nullable: true
      type: array
    CIAppPipelineEventJobLevel:
      default: job
      description: Used to distinguish between pipelines, stages, jobs, and steps.
      enum:
        - job
      example: job
      type: string
      x-enum-varnames:
        - JOB
    CIAppPipelineEventJobStatus:
      description: The final status of the job.
      enum:
        - success
        - error
        - canceled
        - skipped
      example: success
      type: string
      x-enum-varnames:
        - SUCCESS
        - ERROR
        - CANCELED
        - SKIPPED
    CIAppPipelineEventStepLevel:
      default: step
      description: Used to distinguish between pipelines, stages, jobs and steps.
      enum:
        - step
      example: step
      type: string
      x-enum-varnames:
        - STEP
    CIAppPipelineEventStepStatus:
      description: The final status of the step.
      enum:
        - success
        - error
      example: success
      type: string
      x-enum-varnames:
        - SUCCESS
        - ERROR
    CIAppAggregateBucketValueTimeseriesPoint:
      description: A timeseries point.
      properties:
        time:
          description: The time value for this point.
          example: '2020-06-08T11:55:00.123Z'
          format: date-time
          type: string
        value:
          description: The value for this point.
          example: 19
          format: double
          type: number
      type: object
    AnnotationDisplayBounds:
      description: The definition of `AnnotationDisplayBounds` object.
      properties:
        height:
          description: The `bounds` `height`.
          format: double
          type: number
        width:
          description: The `bounds` `width`.
          format: double
          type: number
        x:
          description: The `bounds` `x`.
          format: double
          type: number
        'y':
          description: The `bounds` `y`.
          format: double
          type: number
      type: object
    InputSchemaParametersType:
      description: The definition of `InputSchemaParametersType` object.
      enum:
        - STRING
        - NUMBER
        - BOOLEAN
        - OBJECT
        - ARRAY_STRING
        - ARRAY_NUMBER
        - ARRAY_BOOLEAN
        - ARRAY_OBJECT
      example: STRING
      type: string
      x-enum-varnames:
        - STRING
        - NUMBER
        - BOOLEAN
        - OBJECT
        - ARRAY_STRING
        - ARRAY_NUMBER
        - ARRAY_BOOLEAN
        - ARRAY_OBJECT
    OutputSchemaParametersType:
      description: The definition of `OutputSchemaParametersType` object.
      enum:
        - STRING
        - NUMBER
        - BOOLEAN
        - OBJECT
        - ARRAY_STRING
        - ARRAY_NUMBER
        - ARRAY_BOOLEAN
        - ARRAY_OBJECT
      example: STRING
      type: string
      x-enum-varnames:
        - STRING
        - NUMBER
        - BOOLEAN
        - OBJECT
        - ARRAY_STRING
        - ARRAY_NUMBER
        - ARRAY_BOOLEAN
        - ARRAY_OBJECT
    CompletionCondition:
      description: The definition of `CompletionCondition` object.
      properties:
        operand1:
          description: The `CompletionCondition` `operand1`.
        operand2:
          description: The `CompletionCondition` `operand2`.
        operator:
          $ref: '#/components/schemas/CompletionConditionOperator'
      required:
        - operand1
        - operator
      type: object
    RetryStrategy:
      description: The definition of `RetryStrategy` object.
      properties:
        kind:
          $ref: '#/components/schemas/RetryStrategyKind'
        linear:
          $ref: '#/components/schemas/RetryStrategyLinear'
      required:
        - kind
      type: object
    StepDisplayBounds:
      description: The definition of `StepDisplayBounds` object.
      properties:
        x:
          description: The `bounds` `x`.
          format: double
          type: number
        'y':
          description: The `bounds` `y`.
          format: double
          type: number
      type: object
    ReadinessGateThresholdType:
      description: The definition of `ReadinessGateThresholdType` object.
      enum:
        - ANY
        - ALL
      example: ANY
      type: string
      x-enum-varnames:
        - ANY
        - ALL
    APITrigger:
      description: Trigger a workflow from an API request. The workflow must be published.
      properties:
        rateLimit:
          $ref: '#/components/schemas/TriggerRateLimit'
      type: object
    StartStepNames:
      description: A list of steps that run first after a trigger fires.
      example:
        - ''
      items:
        description: The `StartStepNames` `items`.
        type: string
      type: array
    CaseTrigger:
      description: >-
        Trigger a workflow from a Case. For automatic triggering a handle must
        be configured and the workflow must be published.
      properties:
        rateLimit:
          $ref: '#/components/schemas/TriggerRateLimit'
      type: object
    GithubWebhookTrigger:
      description: >-
        Trigger a workflow from a GitHub webhook. To trigger a workflow from
        GitHub, you must set a `webhookSecret`. In your GitHub Webhook Settings,
        set the Payload URL to
        "base_url"/api/v2/workflows/"workflow_id"/webhook?orgId="org_id", select
        application/json for the content type, and be highly recommend enabling
        SSL verification for security. The workflow must be published.
      properties:
        rateLimit:
          $ref: '#/components/schemas/TriggerRateLimit'
      type: object
    IncidentTrigger:
      description: >-
        Trigger a workflow from an Incident. For automatic triggering a handle
        must be configured and the workflow must be published.
      properties:
        rateLimit:
          $ref: '#/components/schemas/TriggerRateLimit'
      type: object
    MonitorTrigger:
      description: >-
        Trigger a workflow from a Monitor. For automatic triggering a handle
        must be configured and the workflow must be published.
      properties:
        rateLimit:
          $ref: '#/components/schemas/TriggerRateLimit'
      type: object
    ScheduleTrigger:
      description: Trigger a workflow from a Schedule. The workflow must be published.
      properties:
        rruleExpression:
          description: Recurrence rule expression for scheduling.
          example: ''
          type: string
      required:
        - rruleExpression
      type: object
    SecurityTrigger:
      description: >-
        Trigger a workflow from a Security Signal or Finding. For automatic
        triggering a handle must be configured and the workflow must be
        published.
      properties:
        rateLimit:
          $ref: '#/components/schemas/TriggerRateLimit'
      type: object
    CIAppPipelineEventPipelineLevel:
      default: pipeline
      description: Used to distinguish between pipelines, stages, jobs, and steps.
      enum:
        - pipeline
      example: pipeline
      type: string
      x-enum-varnames:
        - PIPELINE
    CIAppPipelineEventParentPipeline:
      description: >-
        If the pipeline is triggered as child of another pipeline, this should
        contain the details of the parent pipeline.
      nullable: true
      properties:
        id:
          description: UUID of a pipeline.
          example: 93bfeb70-af47-424d-908a-948d3f08e37f
          type: string
        url:
          description: The URL to look at the pipeline in the CI provider UI.
          example: https://ci-platform.com/pipelines/123456789
          type: string
      required:
        - id
      type: object
    CIAppPipelineEventPreviousPipeline:
      description: >-
        If the pipeline is a retry, this should contain the details of the
        previous attempt.
      nullable: true
      properties:
        id:
          description: UUID of a pipeline.
          example: 93bfeb70-af47-424d-908a-948d3f08e37f
          type: string
        url:
          description: The URL to look at the pipeline in the CI provider UI.
          example: https://ci-platform.com/pipelines/123456789
          type: string
      required:
        - id
      type: object
    CIAppPipelineEventPipelineStatus:
      description: The final status of the pipeline.
      enum:
        - success
        - error
        - canceled
        - skipped
        - blocked
      example: success
      type: string
      x-enum-varnames:
        - SUCCESS
        - ERROR
        - CANCELED
        - SKIPPED
        - BLOCKED
    CIAppPipelineEventPipelineInProgressStatus:
      description: The in progress status of the pipeline.
      enum:
        - running
      example: running
      type: string
      x-enum-varnames:
        - RUNNING
    CIAppCIErrorDomain:
      description: >-
        Error category used to differentiate between issues related to the
        developer or provider environments.
      enum:
        - provider
        - user
        - unknown
      type: string
      x-enum-varnames:
        - PROVIDER
        - USER
        - UNKNOWN
    CompletionConditionOperator:
      description: The definition of `CompletionConditionOperator` object.
      enum:
        - OPERATOR_EQUAL
        - OPERATOR_NOT_EQUAL
        - OPERATOR_GREATER_THAN
        - OPERATOR_LESS_THAN
        - OPERATOR_GREATER_THAN_OR_EQUAL_TO
        - OPERATOR_LESS_THAN_OR_EQUAL_TO
        - OPERATOR_CONTAINS
        - OPERATOR_DOES_NOT_CONTAIN
        - OPERATOR_IS_NULL
        - OPERATOR_IS_NOT_NULL
        - OPERATOR_IS_EMPTY
        - OPERATOR_IS_NOT_EMPTY
      example: OPERATOR_EQUAL
      type: string
      x-enum-varnames:
        - OPERATOR_EQUAL
        - OPERATOR_NOT_EQUAL
        - OPERATOR_GREATER_THAN
        - OPERATOR_LESS_THAN
        - OPERATOR_GREATER_THAN_OR_EQUAL_TO
        - OPERATOR_LESS_THAN_OR_EQUAL_TO
        - OPERATOR_CONTAINS
        - OPERATOR_DOES_NOT_CONTAIN
        - OPERATOR_IS_NULL
        - OPERATOR_IS_NOT_NULL
        - OPERATOR_IS_EMPTY
        - OPERATOR_IS_NOT_EMPTY
    RetryStrategyKind:
      description: The definition of `RetryStrategyKind` object.
      enum:
        - RETRY_STRATEGY_LINEAR
      example: RETRY_STRATEGY_LINEAR
      type: string
      x-enum-varnames:
        - RETRY_STRATEGY_LINEAR
    RetryStrategyLinear:
      description: The definition of `RetryStrategyLinear` object.
      properties:
        interval:
          description: >-
            The `RetryStrategyLinear` `interval`. The expected format is the
            number of seconds ending with an s. For example, 1 day is 86400s
          example: ''
          type: string
        maxRetries:
          description: The `RetryStrategyLinear` `maxRetries`.
          example: 0
          format: double
          type: number
      required:
        - interval
        - maxRetries
      type: object
    TriggerRateLimit:
      description: Defines a rate limit for a trigger.
      properties:
        count:
          description: The `TriggerRateLimit` `count`.
          format: int64
          type: integer
        interval:
          description: >-
            The `TriggerRateLimit` `interval`. The expected format is the number
            of seconds ending with an s. For example, 1 day is 86400s
          type: string
      type: object
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    NotAuthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Authorized
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Too many requests
    ForbiddenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Forbidden
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
  parameters:
    WorkflowId:
      description: The ID of the workflow.
      in: path
      name: workflow_id
      required: true
      schema:
        type: string
    PageSize:
      description: Size for a given page. The maximum allowed value is 100.
      in: query
      name: page[size]
      required: false
      schema:
        default: 10
        example: 10
        format: int64
        type: integer
    PageNumber:
      description: Specific page number to return.
      in: query
      name: page[number]
      required: false
      schema:
        default: 0
        example: 0
        format: int64
        type: integer
    InstanceId:
      description: The ID of the workflow instance.
      in: path
      name: instance_id
      required: true
      schema:
        type: string
  x-stackQL-resources:
    ci_app_pipeline_events:
      id: datadog.software_delivery.ci_app_pipeline_events
      name: ci_app_pipeline_events
      title: Ci App Pipeline Events
      methods:
        create_ciapp_pipeline_event:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1pipeline/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        aggregate_ciapp_pipeline_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1pipelines~1analytics~1aggregate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_ciapp_pipeline_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1pipelines~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        search_ciapp_pipeline_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1pipelines~1events~1search/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/ci_app_pipeline_events/methods/list_ciapp_pipeline_events
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/ci_app_pipeline_events/methods/create_ciapp_pipeline_event
        update: []
        delete: []
        replace: []
    ci_app_test_events:
      id: datadog.software_delivery.ci_app_test_events
      name: ci_app_test_events
      title: Ci App Test Events
      methods:
        aggregate_ciapp_test_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1tests~1analytics~1aggregate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_ciapp_test_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1tests~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        search_ciapp_test_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1tests~1events~1search/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/ci_app_test_events/methods/list_ciapp_test_events
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/ci_app_test_events/methods/search_ciapp_test_events
        update: []
        delete: []
        replace: []
    dora_deployments:
      id: datadog.software_delivery.dora_deployments
      name: dora_deployments
      title: Dora Deployments
      methods:
        create_doradeployment:
          operation:
            $ref: '#/paths/~1api~1v2~1dora~1deployment/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_doradeployments:
          operation:
            $ref: '#/paths/~1api~1v2~1dora~1deployments/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_doradeployment:
          operation:
            $ref: '#/paths/~1api~1v2~1dora~1deployments~1{deployment_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/dora_deployments/methods/get_doradeployment
          - $ref: >-
              #/components/x-stackQL-resources/dora_deployments/methods/list_doradeployments
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/dora_deployments/methods/create_doradeployment
        update: []
        delete: []
        replace: []
    dora_failures:
      id: datadog.software_delivery.dora_failures
      name: dora_failures
      title: Dora Failures
      methods:
        create_dorafailure:
          operation:
            $ref: '#/paths/~1api~1v2~1dora~1failure/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_dorafailures:
          operation:
            $ref: '#/paths/~1api~1v2~1dora~1failures/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_dorafailure:
          operation:
            $ref: '#/paths/~1api~1v2~1dora~1failures~1{failure_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/dora_failures/methods/get_dorafailure
          - $ref: >-
              #/components/x-stackQL-resources/dora_failures/methods/list_dorafailures
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/dora_failures/methods/create_dorafailure
        update: []
        delete: []
        replace: []
    dora_incidents:
      id: datadog.software_delivery.dora_incidents
      name: dora_incidents
      title: Dora Incidents
      methods:
        create_doraincident:
          operation:
            $ref: '#/paths/~1api~1v2~1dora~1incident/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/dora_incidents/methods/create_doraincident
        update: []
        delete: []
        replace: []
    workflows:
      id: datadog.software_delivery.workflows
      name: workflows
      title: Workflows
      methods:
        create_workflow:
          operation:
            $ref: '#/paths/~1api~1v2~1workflows/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_workflow:
          operation:
            $ref: '#/paths/~1api~1v2~1workflows~1{workflow_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_workflow:
          operation:
            $ref: '#/paths/~1api~1v2~1workflows~1{workflow_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_workflow:
          operation:
            $ref: '#/paths/~1api~1v2~1workflows~1{workflow_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/get_workflow'
        insert:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/create_workflow'
        update:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/update_workflow'
        delete:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/delete_workflow'
        replace: []
    workflow_instances:
      id: datadog.software_delivery.workflow_instances
      name: workflow_instances
      title: Workflow Instances
      methods:
        list_workflow_instances:
          operation:
            $ref: '#/paths/~1api~1v2~1workflows~1{workflow_id}~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_workflow_instance:
          operation:
            $ref: '#/paths/~1api~1v2~1workflows~1{workflow_id}~1instances/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_workflow_instance:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1workflows~1{workflow_id}~1instances~1{instance_id}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        cancel_workflow_instance:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1workflows~1{workflow_id}~1instances~1{instance_id}~1cancel/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/workflow_instances/methods/get_workflow_instance
          - $ref: >-
              #/components/x-stackQL-resources/workflow_instances/methods/list_workflow_instances
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/workflow_instances/methods/create_workflow_instance
        update: []
        delete: []
        replace: []
servers:
  - url: >-
      https://{region:^(?:[^\:/]+(?:\:[0-9]+)?|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(?:\:[0-9]+)?)$}/
    variables:
      region:
        default: datadoghq.com
