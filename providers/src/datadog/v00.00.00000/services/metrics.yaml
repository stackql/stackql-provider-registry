openapi: 3.0.0
info:
  title: metrics API
  description: datadog metrics API
  version: '1.0'
paths:
  /api/v2/datasets:
    get:
      description: Get all datasets that have been configured for an organization.
      operationId: GetAllDatasets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetResponseMulti'
          description: OK
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - user_access_read
      summary: Get all datasets
      tags:
        - Datasets
      x-permission:
        operator: OR
        permissions:
          - user_access_read
      x-unstable: |-
        **Note: Data Access is in preview. If you have any feedback,
        contact [Datadog support](https://docs.datadoghq.com/help/).**
    post:
      description: Create a dataset with the configurations in the request.
      operationId: CreateDataset
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  name: Test RUM Dataset
                  principals:
                    - role:94172442-be03-11e9-a77a-3b7612558ac1
                  product_filters:
                    - filters:
                        - '@application.id:application_123'
                      product: rum
                type: dataset
            schema:
              $ref: '#/components/schemas/DatasetCreateRequest'
        description: Dataset payload
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetResponseSingle'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - user_access_manage
      summary: Create a dataset
      tags:
        - Datasets
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - user_access_manage
      x-unstable: |-
        **Note: Data Access is in preview. If you have any feedback,
        contact [Datadog support](https://docs.datadoghq.com/help/).**
  /api/v2/datasets/{dataset_id}:
    delete:
      description: Deletes the dataset associated with the ID.
      operationId: DeleteDataset
      parameters:
        - $ref: '#/components/parameters/DatasetID'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - user_access_manage
      summary: Delete a dataset
      tags:
        - Datasets
      x-permission:
        operator: OR
        permissions:
          - user_access_manage
      x-unstable: |-
        **Note: Data Access is in preview. If you have any feedback,
        contact [Datadog support](https://docs.datadoghq.com/help/).**
    get:
      description: Retrieves the dataset associated with the ID.
      operationId: GetDataset
      parameters:
        - $ref: '#/components/parameters/DatasetID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetResponseSingle'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - user_access_read
      summary: Get a single dataset by ID
      tags:
        - Datasets
      x-permission:
        operator: OPEN
        permissions: []
      x-unstable: |-
        **Note: Data Access is in preview. If you have any feedback,
        contact [Datadog support](https://docs.datadoghq.com/help/).**
    put:
      description: Edits the dataset associated with the ID.
      operationId: UpdateDataset
      parameters:
        - $ref: '#/components/parameters/DatasetID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetUpdateRequest'
        description: Dataset payload
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetResponseSingle'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - user_access_manage
      summary: Edit a dataset
      tags:
        - Datasets
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - user_access_manage
      x-unstable: |-
        **Note: Data Access is in preview. If you have any feedback,
        contact [Datadog support](https://docs.datadoghq.com/help/).**
  /api/v2/metrics:
    get:
      description: >-
        Returns all metrics that can be configured in the Metrics Summary page
        or with Metrics without Limitsâ„¢ (matching additional filters if
        specified).

        Optionally, paginate by using the `page[cursor]` and/or `page[size]`
        query parameters.

        To fetch the first page, pass in a query parameter with either a valid
        `page[size]` or an empty cursor like `page[cursor]=`. To fetch the next
        page, pass in the `next_cursor` value from the response as the new
        `page[cursor]` value.

        Once the `meta.pagination.next_cursor` value is null, all pages have
        been retrieved.
      operationId: ListTagConfigurations
      parameters:
        - description: Filter custom metrics that have configured tags.
          example: true
          in: query
          name: filter[configured]
          required: false
          schema:
            type: boolean
        - description: Filter tag configurations by configured tags.
          example: app
          in: query
          name: filter[tags_configured]
          required: false
          schema:
            description: Tag keys to filter by.
            type: string
        - description: Filter metrics by metric type.
          in: query
          name: filter[metric_type]
          required: false
          schema:
            $ref: '#/components/schemas/MetricTagConfigurationMetricTypeCategory'
        - description: |-
            Filter distributions with additional percentile
            aggregations enabled or disabled.
          example: true
          in: query
          name: filter[include_percentiles]
          required: false
          schema:
            type: boolean
        - description: >-
            (Preview) Filter custom metrics that have or have not been queried
            in the specified window[seconds].

            If no window is provided or the window is less than 2 hours, a
            default of 2 hours will be applied.
          example: true
          in: query
          name: filter[queried]
          required: false
          schema:
            type: boolean
        - description: >-
            Filter metrics that have been submitted with the given tags.
            Supports boolean and wildcard expressions.

            Can only be combined with the filter[queried] filter.
          example: env IN (staging,test) AND service:web
          in: query
          name: filter[tags]
          required: false
          schema:
            type: string
        - description: >-
            (Preview) Filter metrics that are used in dashboards, monitors,
            notebooks, SLOs.
          example: true
          in: query
          name: filter[related_assets]
          required: false
          schema:
            type: boolean
        - description: >-
            The number of seconds of look back (from now) to apply to a
            filter[tag] or filter[queried] query.

            Default value is 3600 (1 hour), maximum value is 2,592,000 (30
            days).
          example: 3600
          in: query
          name: window[seconds]
          required: false
          schema:
            format: int64
            type: integer
        - description: Maximum number of results returned.
          in: query
          name: page[size]
          required: false
          schema:
            default: 10000
            format: int32
            maximum: 10000
            minimum: 1
            type: integer
        - description: >-
            String to query the next page of results.

            This key is provided with each valid response from the API in
            `meta.pagination.next_cursor`.

            Once the `meta.pagination.next_cursor` key is null, all pages have
            been retrieved.
          in: query
          name: page[cursor]
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsAndMetricTagConfigurationsResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - metrics_read
      summary: Get a list of metrics
      tags:
        - Metrics
      x-pagination:
        cursorParam: page[cursor]
        cursorPath: meta.pagination.next_cursor
        limitParam: page[size]
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - metrics_read
  /api/v2/metrics/config/bulk-tags:
    delete:
      description: >-
        Delete all custom lists of queryable tag keys for a set of existing
        count, gauge, rate, and distribution metrics.

        Metrics are selected by passing a metric name prefix.

        Results can be sent to a set of account email addresses, just like the
        same operation in the Datadog web app.

        Can only be used with application keys of users with the `Manage Tags
        for Metrics` permission.
      operationId: DeleteBulkTagsMetricsConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricBulkTagConfigDeleteRequest'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricBulkTagConfigResponse'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: Delete tags for multiple metrics
      tags:
        - Metrics
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - metric_tags_write
    post:
      description: >-
        Create and define a list of queryable tag keys for a set of existing
        count, gauge, rate, and distribution metrics.

        Metrics are selected by passing a metric name prefix. Use the Delete
        method of this API path to remove tag configurations.

        Results can be sent to a set of account email addresses, just like the
        same operation in the Datadog web app.

        If multiple calls include the same metric, the last configuration
        applied (not by submit order) is used, do not

        expect deterministic ordering of concurrent calls. The
        `exclude_tags_mode` value will set all metrics that match the prefix to

        the same exclusion state, metric tag configurations do not support mixed
        inclusion and exclusion for tags on the same metric.

        Can only be used with application keys of users with the `Manage Tags
        for Metrics` permission.
      operationId: CreateBulkTagsMetricsConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricBulkTagConfigCreateRequest'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricBulkTagConfigResponse'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: Configure tags for multiple metrics
      tags:
        - Metrics
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - metric_tags_write
  /api/v2/metrics/{metric_name}/active-configurations:
    get:
      description: >-
        List tags and aggregations that are actively queried on dashboards,
        notebooks, monitors, the Metrics Explorer, and using the API for a given
        metric name.
      operationId: ListActiveMetricConfigurations
      parameters:
        - $ref: '#/components/parameters/MetricName'
        - description: >-
            The number of seconds of look back (from now).

            Default value is 604,800 (1 week), minimum value is 7200 (2 hours),
            maximum value is 2,630,000 (1 month).
          example: 7200
          in: query
          name: window[seconds]
          required: false
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/MetricSuggestedTagsAndAggregationsResponse
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: List active tags and aggregations
      tags:
        - Metrics
      x-permission:
        operator: OR
        permissions:
          - metrics_read
  /api/v2/metrics/{metric_name}/all-tags:
    get:
      description: >-
        View indexed tag key-value pairs for a given metric name over the
        previous hour.
      operationId: ListTagsByMetricName
      parameters:
        - $ref: '#/components/parameters/MetricName'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricAllTagsResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - metrics_read
      summary: List tags by metric name
      tags:
        - Metrics
      x-permission:
        operator: OR
        permissions:
          - metrics_read
  /api/v2/metrics/{metric_name}/assets:
    get:
      description: >-
        Returns dashboards, monitors, notebooks, and SLOs that a metric is
        stored in, if any.  Updated every 24 hours.
      operationId: ListMetricAssets
      parameters:
        - $ref: '#/components/parameters/MetricName'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricAssetsResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: API error response.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: API error response.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: API error response.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Related Assets to a Metric
      tags:
        - Metrics
  /api/v2/metrics/{metric_name}/estimate:
    get:
      description: >-
        Returns the estimated cardinality for a metric with a given tag,
        percentile and number of aggregations configuration using Metrics
        without Limits&trade;.
      operationId: EstimateMetricsOutputSeries
      parameters:
        - $ref: '#/components/parameters/MetricName'
        - description: Filtered tag keys that the metric is configured to query with.
          example: app,host
          in: query
          name: filter[groups]
          required: false
          schema:
            type: string
        - description: >-
            The number of hours of look back (from now) to estimate cardinality
            with. If unspecified, it defaults to 0 hours.
          example: 49
          in: query
          name: filter[hours_ago]
          required: false
          schema:
            format: int32
            maximum: 2147483647
            minimum: 49
            type: integer
        - description: Deprecated. Number of aggregations has no impact on volume.
          example: 1
          in: query
          name: filter[num_aggregations]
          required: false
          schema:
            format: int32
            maximum: 9
            type: integer
        - description: >-
            A boolean, for distribution metrics only, to estimate cardinality if
            the metric includes additional percentile aggregators.
          example: true
          in: query
          name: filter[pct]
          required: false
          schema:
            type: boolean
        - description: >-
            A window, in hours, from the look back to estimate cardinality with.
            The minimum and default is 1 hour.
          example: 6
          in: query
          name: filter[timespan_h]
          required: false
          schema:
            format: int32
            maximum: 2147483647
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricEstimateResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: API error response.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: API error response.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: API error response.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: Tag Configuration Cardinality Estimator
      tags:
        - Metrics
      x-permission:
        operator: OPEN
        permissions: []
  /api/v2/metrics/{metric_name}/tag-cardinalities:
    get:
      description: Returns the cardinality details of tags for a specific metric.
      operationId: GetMetricTagCardinalityDetails
      parameters:
        - $ref: '#/components/parameters/MetricName'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricTagCardinalitiesResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Too Many Requests
      summary: Get tag key cardinality details
      tags:
        - Metrics
      x-permission:
        operator: OR
        permissions:
          - metrics_read
  /api/v2/metrics/{metric_name}/tags:
    delete:
      description: |-
        Deletes a metric's tag configuration. Can only be used with application
        keys from users with the `Manage Tags for Metrics` permission.
      operationId: DeleteTagConfiguration
      parameters:
        - $ref: '#/components/parameters/MetricName'
      responses:
        '204':
          description: No Content
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: Delete a tag configuration
      tags:
        - Metrics
      x-permission:
        operator: OR
        permissions:
          - metric_tags_write
    get:
      description: Returns the tag configuration for the given metric name.
      operationId: ListTagConfigurationByName
      parameters:
        - $ref: '#/components/parameters/MetricName'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricTagConfigurationResponse'
          description: Success
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - metrics_read
      summary: List tag configuration by name
      tags:
        - Metrics
      x-permission:
        operator: OR
        permissions:
          - metrics_read
    patch:
      description: >-
        Update the tag configuration of a metric or percentile aggregations of a
        distribution metric or custom aggregations

        of a count, rate, or gauge metric. By setting `exclude_tags_mode` to
        true the behavior is changed

        from an allow-list to a deny-list, and tags in the defined list will not
        be queryable.

        Can only be used with application keys from users with the `Manage Tags
        for Metrics` permission. This endpoint requires

        a tag configuration to be created first.
      operationId: UpdateTagConfiguration
      parameters:
        - $ref: '#/components/parameters/MetricName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricTagConfigurationUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricTagConfigurationResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Unprocessable Entity
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: Update a tag configuration
      tags:
        - Metrics
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - metric_tags_write
    post:
      description: >-
        Create and define a list of queryable tag keys for an existing
        count/gauge/rate/distribution metric.

        Optionally, include percentile aggregations on any distribution metric.
        By setting `exclude_tags_mode`

        to true, the behavior is changed from an allow-list to a deny-list, and
        tags in the defined list are

        not queryable. Can only be used with application keys of users with the
        `Manage Tags for Metrics`

        permission.
      operationId: CreateTagConfiguration
      parameters:
        - $ref: '#/components/parameters/MetricName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricTagConfigurationCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricTagConfigurationResponse'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Conflict
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: Create a tag configuration
      tags:
        - Metrics
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - metric_tags_write
  /api/v2/metrics/{metric_name}/volumes:
    get:
      description: >-
        View distinct metrics volumes for the given metric name.


        Custom metrics generated in-app from other products will return `null`
        for ingested volumes.
      operationId: ListVolumesByMetricName
      parameters:
        - $ref: '#/components/parameters/MetricName'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricVolumesResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: List distinct metric volumes by metric name
      tags:
        - Metrics
      x-permission:
        operator: OPEN
        permissions: []
  /api/v2/query/scalar:
    post:
      description: >-
        Query scalar values (as seen on Query Value, Table, and Toplist
        widgets).

        Multiple data sources are supported with the ability to

        process the data using formulas and functions.
      operationId: QueryScalarData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScalarFormulaQueryRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScalarFormulaQueryResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - timeseries_query
      summary: Query scalar data across multiple products
      tags:
        - Metrics
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - timeseries_query
  /api/v2/query/timeseries:
    post:
      description: |-
        Query timeseries data across various data sources and
        process the data by applying formulas and functions.
      operationId: QueryTimeseriesData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeseriesFormulaQueryRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeseriesFormulaQueryResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - timeseries_query
      summary: Query timeseries data across multiple products
      tags:
        - Metrics
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - timeseries_query
  /api/v2/series:
    post:
      description: >-
        The metrics end-point allows you to post time-series data that can be
        graphed on Datadogâ€™s dashboards.

        The maximum payload size is 500 kilobytes (512000 bytes). Compressed
        payloads must have a decompressed size of less than 5 megabytes (5242880
        bytes).


        If youâ€™re submitting metrics directly to the Datadog API without using
        DogStatsD, expect:


        - 64 bits for the timestamp

        - 64 bits for the value

        - 20 bytes for the metric names

        - 50 bytes for the timeseries

        - The full payload is approximately 100 bytes.


        Host name is one of the resources in the Resources field.
      operationId: SubmitMetrics
      parameters:
        - description: HTTP header used to compress the media-type.
          in: header
          name: Content-Encoding
          required: false
          schema:
            $ref: '#/components/schemas/MetricContentEncoding'
      requestBody:
        content:
          application/json:
            examples:
              dynamic-points:
                description: >-
                  Post time-series data that can be graphed on Datadogâ€™s
                  dashboards.
                externalValue: examples/metrics/dynamic-points.json.sh
                summary: Dynamic Points
                x-variables:
                  NOW: $(date +%s)
            schema:
              $ref: '#/components/schemas/MetricPayload'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntakePayloadAccepted'
          description: Payload accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Request timeout
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Payload too large
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
      summary: Submit metrics
      tags:
        - Metrics
      x-codegen-request-body-name: body
  /api/v2/spans/analytics/aggregate:
    post:
      description: >-
        The API endpoint to aggregate spans into buckets and compute metrics and
        timeseries.

        This endpoint is rate limited to `300` requests per hour.
      operationId: AggregateSpans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpansAggregateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpansAggregateResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_read
      summary: Aggregate spans
      tags:
        - Spans
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - apm_read
  /api/v2/spans/events:
    get:
      description: |-
        List endpoint returns spans that match a span search query.
        [Results are paginated][1].

        Use this endpoint to see your latest spans.
        This endpoint is rate limited to `300` requests per hour.

        [1]: /logs/guide/collect-multiple-logs-with-pagination?tab=v2api
      operationId: ListSpansGet
      parameters:
        - description: Search query following spans syntax.
          example: '@datacenter:us @role:db'
          in: query
          name: filter[query]
          required: false
          schema:
            type: string
        - description: >-
            Minimum timestamp for requested spans. Supports date-time ISO8601,
            date math, and regular timestamps (milliseconds).
          example: '2023-01-02T09:42:36.320Z'
          in: query
          name: filter[from]
          required: false
          schema:
            type: string
        - description: >-
            Maximum timestamp for requested spans. Supports date-time ISO8601,
            date math, and regular timestamps (milliseconds).
          example: '2023-01-03T09:42:36.320Z'
          in: query
          name: filter[to]
          required: false
          schema:
            type: string
        - description: Order of spans in results.
          in: query
          name: sort
          required: false
          schema:
            $ref: '#/components/schemas/SpansSort'
        - description: List following results with a cursor provided in the previous query.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          in: query
          name: page[cursor]
          required: false
          schema:
            type: string
        - description: Maximum number of spans in the response.
          example: 25
          in: query
          name: page[limit]
          required: false
          schema:
            default: 10
            format: int32
            maximum: 1000
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpansListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/SpansBadRequestResponse'
        '403':
          $ref: '#/components/responses/SpansForbiddenResponse'
        '422':
          $ref: '#/components/responses/SpansUnprocessableEntityResponse'
        '429':
          $ref: '#/components/responses/SpansTooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_read
      summary: Get a list of spans
      tags:
        - Spans
      x-pagination:
        cursorParam: page[cursor]
        cursorPath: meta.page.after
        limitParam: page[limit]
        resultsPath: data
  /api/v2/spans/events/search:
    post:
      description: |-
        List endpoint returns spans that match a span search query.
        [Results are paginated][1].

        Use this endpoint to build complex spans filtering and search.
        This endpoint is rate limited to `300` requests per hour.

        [1]: /logs/guide/collect-multiple-logs-with-pagination?tab=v2api
      operationId: ListSpans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpansListRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpansListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/SpansBadRequestResponse'
        '403':
          $ref: '#/components/responses/SpansForbiddenResponse'
        '422':
          $ref: '#/components/responses/SpansUnprocessableEntityResponse'
        '429':
          $ref: '#/components/responses/SpansTooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_read
      summary: Search spans
      tags:
        - Spans
      x-codegen-request-body-name: body
      x-pagination:
        cursorParam: body.data.attributes.page.cursor
        cursorPath: meta.page.after
        limitParam: body.data.attributes.page.limit
        resultsPath: data
components:
  schemas:
    DatasetResponseMulti:
      description: Response containing a list of datasets.
      properties:
        data:
          description: The list of datasets returned in response.
          items:
            $ref: '#/components/schemas/DatasetResponse'
          type: array
      type: object
    DatasetCreateRequest:
      description: Create request for a dataset.
      properties:
        data:
          $ref: '#/components/schemas/DatasetRequest'
      required:
        - data
      type: object
    DatasetResponseSingle:
      description: Response containing a single dataset object.
      properties:
        data:
          $ref: '#/components/schemas/DatasetResponse'
      type: object
    DatasetUpdateRequest:
      description: Edit request for a dataset.
      properties:
        data:
          $ref: '#/components/schemas/DatasetRequest'
      required:
        - data
      type: object
    MetricTagConfigurationMetricTypeCategory:
      default: distribution
      description: The metric's type category.
      enum:
        - non_distribution
        - distribution
      example: distribution
      type: string
      x-enum-varnames:
        - NON_DISTRIBUTION
        - DISTRIBUTION
    MetricsAndMetricTagConfigurationsResponse:
      description: Response object that includes metrics and metric tag configurations.
      properties:
        data:
          description: Array of metrics and metric tag configurations.
          items:
            $ref: '#/components/schemas/MetricsAndMetricTagConfigurations'
          type: array
        links:
          $ref: '#/components/schemas/MetricsListResponseLinks'
        meta:
          $ref: '#/components/schemas/MetricPaginationMeta'
      readOnly: true
      type: object
    APIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          example:
            - Bad Request
          items:
            description: A list of items.
            example: Bad Request
            type: string
          type: array
      required:
        - errors
      type: object
    MetricBulkTagConfigDeleteRequest:
      description: Wrapper object for a single bulk tag deletion request.
      properties:
        data:
          $ref: '#/components/schemas/MetricBulkTagConfigDelete'
      required:
        - data
      type: object
    MetricBulkTagConfigResponse:
      description: Wrapper for a single bulk tag configuration status response.
      properties:
        data:
          $ref: '#/components/schemas/MetricBulkTagConfigStatus'
      type: object
    MetricBulkTagConfigCreateRequest:
      description: Wrapper object for a single bulk tag configuration request.
      properties:
        data:
          $ref: '#/components/schemas/MetricBulkTagConfigCreate'
      required:
        - data
      type: object
    MetricSuggestedTagsAndAggregationsResponse:
      description: >-
        Response object that includes a single metric's actively queried tags
        and aggregations.
      properties:
        data:
          $ref: '#/components/schemas/MetricSuggestedTagsAndAggregations'
      readOnly: true
      type: object
    MetricAllTagsResponse:
      description: Response object that includes a single metric's indexed tags.
      properties:
        data:
          $ref: '#/components/schemas/MetricAllTags'
      readOnly: true
      type: object
    MetricAssetsResponse:
      description: >-
        Response object that includes related dashboards, monitors, notebooks,
        and SLOs.
      properties:
        data:
          $ref: '#/components/schemas/MetricAssetResponseData'
        included:
          description: Array of objects related to the metric assets.
          items:
            $ref: '#/components/schemas/MetricAssetResponseIncluded'
          type: array
      type: object
    MetricEstimateResponse:
      description: Response object that includes metric cardinality estimates.
      properties:
        data:
          $ref: '#/components/schemas/MetricEstimate'
      type: object
    MetricTagCardinalitiesResponse:
      description: >
        Response object that includes an array of objects representing the
        cardinality details of a metric's tags.
      properties:
        data:
          $ref: '#/components/schemas/MetricTagCardinalitiesData'
        meta:
          $ref: '#/components/schemas/MetricTagCardinalitiesMeta'
      readOnly: true
      type: object
    JSONAPIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          items:
            $ref: '#/components/schemas/JSONAPIErrorItem'
          type: array
      required:
        - errors
      type: object
    MetricTagConfigurationResponse:
      description: Response object which includes a single metric's tag configuration.
      properties:
        data:
          $ref: '#/components/schemas/MetricTagConfiguration'
      readOnly: true
      type: object
    MetricTagConfigurationUpdateRequest:
      description: >-
        Request object that includes the metric that you would like to edit the
        tag configuration on.
      properties:
        data:
          $ref: '#/components/schemas/MetricTagConfigurationUpdateData'
      required:
        - data
      type: object
    MetricTagConfigurationCreateRequest:
      description: >-
        Request object that includes the metric that you would like to configure
        tags for.
      properties:
        data:
          $ref: '#/components/schemas/MetricTagConfigurationCreateData'
      required:
        - data
      type: object
    MetricVolumesResponse:
      description: Response object which includes a single metric's volume.
      properties:
        data:
          $ref: '#/components/schemas/MetricVolumes'
      readOnly: true
      type: object
    ScalarFormulaQueryRequest:
      description: A wrapper request around one scalar query to be executed.
      properties:
        data:
          $ref: '#/components/schemas/ScalarFormulaRequest'
      required:
        - data
      type: object
    ScalarFormulaQueryResponse:
      description: A message containing one or more responses to scalar queries.
      properties:
        data:
          $ref: '#/components/schemas/ScalarResponse'
        errors:
          description: An error generated when processing a request.
          type: string
      type: object
    TimeseriesFormulaQueryRequest:
      description: A request wrapper around a single timeseries query to be executed.
      properties:
        data:
          $ref: '#/components/schemas/TimeseriesFormulaRequest'
      required:
        - data
      type: object
    TimeseriesFormulaQueryResponse:
      description: >-
        A message containing one response to a timeseries query made with
        timeseries formula query request.
      properties:
        data:
          $ref: '#/components/schemas/TimeseriesResponse'
        errors:
          description: The error generated by the request.
          type: string
      type: object
    MetricContentEncoding:
      default: deflate
      description: HTTP header used to compress the media-type.
      enum:
        - deflate
        - zstd1
        - gzip
      example: deflate
      type: string
      x-enum-varnames:
        - DEFLATE
        - ZSTD1
        - GZIP
    MetricPayload:
      description: The metrics' payload.
      properties:
        series:
          description: A list of timeseries to submit to Datadog.
          example:
            - metric: system.load.1
              points:
                - timestamp: 1475317847
                  value: 0.7
              resources:
                - name: dummyhost
                  type: host
          items:
            $ref: '#/components/schemas/MetricSeries'
          type: array
      required:
        - series
      type: object
    IntakePayloadAccepted:
      description: The payload accepted for intake.
      properties:
        errors:
          description: A list of errors.
          items:
            description: An empty error list.
            type: string
          type: array
      type: object
    SpansAggregateRequest:
      description: >-
        The object sent with the request to retrieve a list of aggregated spans
        from your organization.
      properties:
        data:
          $ref: '#/components/schemas/SpansAggregateData'
      type: object
    SpansAggregateResponse:
      description: The response object for the spans aggregate API endpoint.
      properties:
        data:
          description: The list of matching buckets, one item per bucket.
          items:
            $ref: '#/components/schemas/SpansAggregateBucket'
          type: array
        meta:
          $ref: '#/components/schemas/SpansAggregateResponseMetadata'
      type: object
    SpansSort:
      description: Sort parameters when querying spans.
      enum:
        - timestamp
        - '-timestamp'
      type: string
      x-enum-varnames:
        - TIMESTAMP_ASCENDING
        - TIMESTAMP_DESCENDING
    SpansListResponse:
      description: >-
        Response object with all spans matching the request and pagination
        information.
      properties:
        data:
          description: Array of spans matching the request.
          items:
            $ref: '#/components/schemas/Span'
          type: array
        links:
          $ref: '#/components/schemas/SpansListResponseLinks'
        meta:
          $ref: '#/components/schemas/SpansListResponseMetadata'
      type: object
    SpansListRequest:
      description: The request for a spans list.
      properties:
        data:
          $ref: '#/components/schemas/SpansListRequestData'
      type: object
    DatasetResponse:
      description: |-
        **Datasets Object Constraints**
        - **Tag Limit per Dataset**:
          - Each restricted dataset supports a maximum of 10 key:value pairs per product.

        - **Tag Key Rules per Telemetry Type**:
          - Only one tag key or attribute may be used to define access within a single telemetry type.
          - The same or different tag key may be used across different telemetry types.

        - **Tag Value Uniqueness**:
          - Tag values must be unique within a single dataset.
          - A tag value used in one dataset cannot be reused in another dataset of the same telemetry type.
      properties:
        attributes:
          $ref: '#/components/schemas/DatasetAttributesResponse'
        id:
          description: Unique identifier for the dataset.
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        type:
          $ref: '#/components/schemas/DatasetType'
      type: object
    DatasetRequest:
      description: |-
        **Datasets Object Constraints**
        - **Tag limit per dataset**:
          - Each restricted dataset supports a maximum of 10 key:value pairs per product.

        - **Tag key rules per telemetry type**:
          - Only one tag key or attribute may be used to define access within a single telemetry type.
          - The same or different tag key may be used across different telemetry types.

        - **Tag value uniqueness**:
          - Tag values must be unique within a single dataset.
          - A tag value used in one dataset cannot be reused in another dataset of the same telemetry type.
      properties:
        attributes:
          $ref: '#/components/schemas/DatasetAttributesRequest'
        type:
          $ref: '#/components/schemas/DatasetType'
      required:
        - type
        - attributes
      type: object
    MetricsAndMetricTagConfigurations:
      description: Object for a metrics and metric tag configurations.
      oneOf:
        - $ref: '#/components/schemas/Metric'
        - $ref: '#/components/schemas/MetricTagConfiguration'
    MetricsListResponseLinks:
      description: >-
        Pagination links. Only present if pagination query parameters were
        provided.
      properties:
        first:
          description: Link to the first page.
          type: string
        last:
          description: Link to the last page.
          nullable: true
          type: string
        next:
          description: Link to the next page.
          nullable: true
          type: string
        prev:
          description: Link to previous page.
          nullable: true
          type: string
        self:
          description: Link to current page.
          type: string
      type: object
    MetricPaginationMeta:
      description: Response metadata object.
      properties:
        pagination:
          $ref: '#/components/schemas/MetricMetaPage'
      type: object
    MetricBulkTagConfigDelete:
      description: >-
        Request object to bulk delete all tag configurations for metrics
        matching the given prefix.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricBulkTagConfigDeleteAttributes'
        id:
          $ref: '#/components/schemas/MetricBulkTagConfigNamePrefix'
        type:
          $ref: '#/components/schemas/MetricBulkConfigureTagsType'
      required:
        - id
        - type
      type: object
    MetricBulkTagConfigStatus:
      description: |-
        The status of a request to bulk configure metric tags.
        It contains the fields from the original request for reference.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricBulkTagConfigStatusAttributes'
        id:
          $ref: '#/components/schemas/MetricBulkTagConfigNamePrefix'
        type:
          $ref: '#/components/schemas/MetricBulkConfigureTagsType'
      required:
        - id
        - type
      type: object
    MetricBulkTagConfigCreate:
      description: >-
        Request object to bulk configure tags for metrics matching the given
        prefix.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricBulkTagConfigCreateAttributes'
        id:
          $ref: '#/components/schemas/MetricBulkTagConfigNamePrefix'
        type:
          $ref: '#/components/schemas/MetricBulkConfigureTagsType'
      required:
        - id
        - type
      type: object
    MetricSuggestedTagsAndAggregations:
      description: Object for a single metric's actively queried tags and aggregations.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricSuggestedTagsAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricActiveConfigurationType'
      type: object
    MetricAllTags:
      description: Object for a single metric's indexed tags.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricAllTagsAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricType'
      type: object
    MetricAssetResponseData:
      description: Metric assets response data.
      properties:
        id:
          $ref: '#/components/schemas/MetricName'
        relationships:
          $ref: '#/components/schemas/MetricAssetResponseRelationships'
        type:
          $ref: '#/components/schemas/MetricType'
      required:
        - id
        - type
      type: object
    MetricAssetResponseIncluded:
      description: List of included assets with full set of attributes.
      oneOf:
        - $ref: '#/components/schemas/MetricDashboardAsset'
        - $ref: '#/components/schemas/MetricMonitorAsset'
        - $ref: '#/components/schemas/MetricNotebookAsset'
        - $ref: '#/components/schemas/MetricSLOAsset'
    MetricEstimate:
      description: Object for a metric cardinality estimate.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricEstimateAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricEstimateResourceType'
      type: object
    MetricTagCardinalitiesData:
      description: A list of tag cardinalities associated with the given metric.
      items:
        $ref: '#/components/schemas/MetricTagCardinality'
      type: array
    MetricTagCardinalitiesMeta:
      description: Response metadata object.
      properties:
        metric_name:
          description: |
            The name of metric for which the tag cardinalities are returned.
            This matches the metric name provided in the request.
          type: string
      type: object
    JSONAPIErrorItem:
      description: API error response body
      properties:
        detail:
          description: >-
            A human-readable explanation specific to this occurrence of the
            error.
          example: Missing required attribute in body
          type: string
        meta:
          additionalProperties: {}
          description: Non-standard meta-information about the error
          type: object
        source:
          $ref: '#/components/schemas/JSONAPIErrorItemSource'
        status:
          description: Status code of the response.
          example: '400'
          type: string
        title:
          description: Short human-readable summary of the error.
          example: Bad Request
          type: string
      type: object
    MetricTagConfiguration:
      description: Object for a single metric tag configuration.
      example:
        attributes:
          aggregations:
            - space: avg
              time: avg
          created_at: '2020-03-25T09:48:37.463835Z'
          metric_type: gauge
          modified_at: '2020-04-25T09:48:37.463835Z'
          tags:
            - app
            - datacenter
        id: http.request.latency
        type: manage_tags
      properties:
        attributes:
          $ref: '#/components/schemas/MetricTagConfigurationAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricTagConfigurationType'
      type: object
    MetricTagConfigurationUpdateData:
      description: Object for a single tag configuration to be edited.
      example:
        attributes:
          group_by:
            - app
            - datacenter
          include_percentiles: false
        id: http.endpoint.request
        type: manage_tags
      properties:
        attributes:
          $ref: '#/components/schemas/MetricTagConfigurationUpdateAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricTagConfigurationType'
      required:
        - id
        - type
      type: object
    MetricTagConfigurationCreateData:
      description: Object for a single metric to be configure tags on.
      example:
        attributes:
          include_percentiles: false
          metric_type: distribution
          tags:
            - app
            - datacenter
        id: http.endpoint.request
        type: manage_tags
      properties:
        attributes:
          $ref: '#/components/schemas/MetricTagConfigurationCreateAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricTagConfigurationType'
      required:
        - id
        - type
      type: object
    MetricVolumes:
      description: Possible response objects for a metric's volume.
      oneOf:
        - $ref: '#/components/schemas/MetricDistinctVolume'
        - $ref: '#/components/schemas/MetricIngestedIndexedVolume'
    ScalarFormulaRequest:
      description: A single scalar query to be executed.
      properties:
        attributes:
          $ref: '#/components/schemas/ScalarFormulaRequestAttributes'
        type:
          $ref: '#/components/schemas/ScalarFormulaRequestType'
      required:
        - type
        - attributes
      type: object
    ScalarResponse:
      description: A message containing the response to a scalar query.
      properties:
        attributes:
          $ref: '#/components/schemas/ScalarFormulaResponseAtrributes'
        type:
          $ref: '#/components/schemas/ScalarFormulaResponseType'
      type: object
    TimeseriesFormulaRequest:
      description: A single timeseries query to be executed.
      properties:
        attributes:
          $ref: '#/components/schemas/TimeseriesFormulaRequestAttributes'
        type:
          $ref: '#/components/schemas/TimeseriesFormulaRequestType'
      required:
        - type
        - attributes
      type: object
    TimeseriesResponse:
      description: A message containing the response to a timeseries query.
      properties:
        attributes:
          $ref: '#/components/schemas/TimeseriesResponseAttributes'
        type:
          $ref: '#/components/schemas/TimeseriesFormulaResponseType'
      type: object
    MetricSeries:
      description: >-
        A metric to submit to Datadog.

        See [Datadog
        metrics](https://docs.datadoghq.com/developers/metrics/#custom-metrics-properties).
      properties:
        interval:
          description: >-
            If the type of the metric is rate or count, define the corresponding
            interval in seconds.
          example: 20
          format: int64
          type: integer
        metadata:
          $ref: '#/components/schemas/MetricMetadata'
        metric:
          description: The name of the timeseries.
          example: system.load.1
          type: string
        points:
          description: >-
            Points relating to a metric. All points must be objects with
            timestamp and a scalar value (cannot be a string). Timestamps should
            be in POSIX time in seconds, and cannot be more than ten minutes in
            the future or more than one hour in the past.
          example:
            - timestamp: 1575317847
              value: 0.5
          items:
            $ref: '#/components/schemas/MetricPoint'
          type: array
        resources:
          description: A list of resources to associate with this metric.
          items:
            $ref: '#/components/schemas/MetricResource'
          type: array
        source_type_name:
          description: The source type name.
          example: datadog
          type: string
        tags:
          description: A list of tags associated with the metric.
          example:
            - environment:test
          items:
            description: Individual tags.
            type: string
          type: array
        type:
          $ref: '#/components/schemas/MetricIntakeType'
        unit:
          description: The unit of point value.
          example: second
          type: string
      required:
        - metric
        - points
      type: object
    SpansAggregateData:
      description: The object containing the query content.
      properties:
        attributes:
          $ref: '#/components/schemas/SpansAggregateRequestAttributes'
        type:
          $ref: '#/components/schemas/SpansAggregateRequestType'
      type: object
    SpansAggregateBucket:
      description: Spans aggregate.
      properties:
        attributes:
          $ref: '#/components/schemas/SpansAggregateBucketAttributes'
        id:
          description: ID of the spans aggregate.
          type: string
        type:
          $ref: '#/components/schemas/SpansAggregateBucketType'
      type: object
    SpansAggregateResponseMetadata:
      description: The metadata associated with a request.
      properties:
        elapsed:
          description: The time elapsed in milliseconds.
          example: 132
          format: int64
          type: integer
        request_id:
          description: The identifier of the request.
          example: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
          type: string
        status:
          $ref: '#/components/schemas/SpansAggregateResponseStatus'
        warnings:
          description: >-
            A list of warnings (non fatal errors) encountered, partial results
            might be returned if

            warnings are present in the response.
          items:
            $ref: '#/components/schemas/SpansWarning'
          type: array
      type: object
    Span:
      description: >-
        Object description of a spans after being processed and stored by
        Datadog.
      properties:
        attributes:
          $ref: '#/components/schemas/SpansAttributes'
        id:
          description: Unique ID of the Span.
          example: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
          type: string
        type:
          $ref: '#/components/schemas/SpansType'
      type: object
    SpansListResponseLinks:
      description: Links attributes.
      properties:
        next:
          description: >-
            Link for the next set of results. Note that the request can also be
            made using the

            POST endpoint.
          example: >-
            https://app.datadoghq.com/api/v2/spans/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
      type: object
    SpansListResponseMetadata:
      description: The metadata associated with a request.
      properties:
        elapsed:
          description: The time elapsed in milliseconds.
          example: 132
          format: int64
          type: integer
        page:
          $ref: '#/components/schemas/SpansResponseMetadataPage'
        request_id:
          description: The identifier of the request.
          example: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
          type: string
        status:
          $ref: '#/components/schemas/SpansAggregateResponseStatus'
        warnings:
          description: >-
            A list of warnings (non fatal errors) encountered, partial results
            might be returned if

            warnings are present in the response.
          items:
            $ref: '#/components/schemas/SpansWarning'
          type: array
      type: object
    SpansListRequestData:
      description: The object containing the query content.
      properties:
        attributes:
          $ref: '#/components/schemas/SpansListRequestAttributes'
        type:
          $ref: '#/components/schemas/SpansListRequestType'
      type: object
    DatasetAttributesResponse:
      description: Dataset metadata and configuration(s).
      properties:
        created_at:
          description: Timestamp when the dataset was created.
          format: date-time
          nullable: true
          type: string
        created_by:
          description: Unique ID of the user who created the dataset.
          format: uuid
          type: string
        name:
          description: Name of the dataset.
          example: Security Audit Dataset
          type: string
        principals:
          description: >-
            List of access principals, formatted as `principal_type:id`.
            Principal can be 'team' or 'role'.
          example:
            - role:86245fce-0a4e-11f0-92bd-da7ad0900002
          items:
            example: role:86245fce-0a4e-11f0-92bd-da7ad0900002
            type: string
          type: array
        product_filters:
          description: List of product-specific filters.
          items:
            $ref: '#/components/schemas/FiltersPerProduct'
          type: array
      type: object
    DatasetType:
      default: dataset
      description: Resource type, always set to `dataset`.
      enum:
        - dataset
      example: dataset
      type: string
      x-enum-varnames:
        - DATASET
    DatasetAttributesRequest:
      description: Dataset metadata and configurations.
      properties:
        name:
          description: Name of the dataset.
          example: Security Audit Dataset
          type: string
        principals:
          description: >-
            List of access principals, formatted as `principal_type:id`.
            Principal can be 'team' or 'role'.
          example:
            - role:94172442-be03-11e9-a77a-3b7612558ac1
          items:
            example: role:94172442-be03-11e9-a77a-3b7612558ac1
            type: string
          type: array
        product_filters:
          description: List of product-specific filters.
          items:
            $ref: '#/components/schemas/FiltersPerProduct'
          type: array
      required:
        - name
        - product_filters
        - principals
      type: object
    Metric:
      description: Object for a single metric tag configuration.
      example:
        id: metric.foo.bar
        type: metrics
      properties:
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricType'
      type: object
    MetricMetaPage:
      description: >-
        Paging attributes. Only present if pagination query parameters were
        provided.
      properties:
        cursor:
          description: The cursor used to get the current results, if any.
          nullable: true
          type: string
        limit:
          description: Number of results returned
          format: int32
          maximum: 20000
          minimum: 0
          type: integer
        next_cursor:
          description: The cursor used to get the next results, if any.
          nullable: true
          type: string
        type:
          $ref: '#/components/schemas/MetricMetaPageType'
      type: object
    MetricBulkTagConfigDeleteAttributes:
      description: Optional parameters for bulk deleting metric tag configurations.
      properties:
        emails:
          $ref: '#/components/schemas/MetricBulkTagConfigEmailList'
      type: object
    MetricBulkTagConfigNamePrefix:
      description: A text prefix to match against metric names.
      example: kafka.lag
      type: string
    MetricBulkConfigureTagsType:
      default: metric_bulk_configure_tags
      description: The metric bulk configure tags resource.
      enum:
        - metric_bulk_configure_tags
      example: metric_bulk_configure_tags
      type: string
      x-enum-varnames:
        - BULK_MANAGE_TAGS
    MetricBulkTagConfigStatusAttributes:
      description: Optional attributes for the status of a bulk tag configuration request.
      properties:
        emails:
          $ref: '#/components/schemas/MetricBulkTagConfigEmailList'
        exclude_tags_mode:
          description: >-
            When set to true, the configuration will exclude the configured tags
            and include any other submitted tags.

            When set to false, the configuration will include the configured
            tags and exclude any other submitted tags.
          type: boolean
        status:
          description: The status of the request.
          example: Accepted
          type: string
        tags:
          $ref: '#/components/schemas/MetricBulkTagConfigTagNameList'
      type: object
    MetricBulkTagConfigCreateAttributes:
      description: Optional parameters for bulk creating metric tag configurations.
      properties:
        emails:
          $ref: '#/components/schemas/MetricBulkTagConfigEmailList'
        exclude_tags_mode:
          description: >-
            When set to true, the configuration will exclude the configured tags
            and include any other submitted tags.

            When set to false, the configuration will include the configured
            tags and exclude any other submitted tags.

            Defaults to false.
          type: boolean
        include_actively_queried_tags_window:
          description: |-
            When provided, all tags that have been actively queried are
            configured (and, therefore, remain queryable) for each metric that
            matches the given prefix.  Minimum value is 1 second, and maximum
            value is 7,776,000 seconds (90 days).
          format: double
          maximum: 7776000
          minimum: 1
          type: number
        override_existing_configurations:
          description: |-
            When set to true, the configuration overrides any existing
            configurations for the given metric with the new set of tags in this
            configuration request. If false, old configurations are kept and
            are merged with the set of tags in this configuration request.
            Defaults to true.
          type: boolean
        tags:
          $ref: '#/components/schemas/MetricBulkTagConfigTagNameList'
      type: object
    MetricSuggestedTagsAttributes:
      description: >-
        Object containing the definition of a metric's actively queried tags and
        aggregations.
      properties:
        active_aggregations:
          $ref: '#/components/schemas/MetricSuggestedAggregations'
        active_tags:
          description: List of tag keys that have been actively queried.
          example:
            - app
            - datacenter
          items:
            description: Actively queried tag keys.
            type: string
          type: array
      type: object
    MetricName:
      description: The metric name for this resource.
      example: test.metric.latency
      type: string
    MetricActiveConfigurationType:
      default: actively_queried_configurations
      description: The metric actively queried configuration resource type.
      enum:
        - actively_queried_configurations
      example: actively_queried_configurations
      type: string
      x-enum-varnames:
        - ACTIVELY_QUERIED_CONFIGURATIONS
    MetricAllTagsAttributes:
      description: Object containing the definition of a metric's tags.
      properties:
        tags:
          description: List of indexed tag value pairs.
          example:
            - sport:golf
            - sport:football
            - animal:dog
          items:
            description: Tag key-value pairs.
            type: string
          type: array
      type: object
    MetricType:
      default: metrics
      description: The metric resource type.
      enum:
        - metrics
      example: metrics
      type: string
      x-enum-varnames:
        - METRICS
    MetricAssetResponseRelationships:
      description: Relationships to assets related to the metric.
      properties:
        dashboards:
          $ref: '#/components/schemas/MetricAssetDashboardRelationships'
        monitors:
          $ref: '#/components/schemas/MetricAssetMonitorRelationships'
        notebooks:
          $ref: '#/components/schemas/MetricAssetNotebookRelationships'
        slos:
          $ref: '#/components/schemas/MetricAssetSLORelationships'
      type: object
    MetricDashboardAsset:
      description: A dashboard object with title and popularity.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricDashboardAttributes'
        id:
          $ref: '#/components/schemas/MetricDashboardID'
        type:
          $ref: '#/components/schemas/MetricDashboardType'
      required:
        - id
        - type
      type: object
    MetricMonitorAsset:
      description: A monitor object with title.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricAssetAttributes'
        id:
          $ref: '#/components/schemas/MetricMonitorID'
        type:
          $ref: '#/components/schemas/MetricMonitorType'
      required:
        - id
        - type
      type: object
    MetricNotebookAsset:
      description: A notebook object with title.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricAssetAttributes'
        id:
          $ref: '#/components/schemas/MetricNotebookID'
        type:
          $ref: '#/components/schemas/MetricNotebookType'
      required:
        - id
        - type
      type: object
    MetricSLOAsset:
      description: A SLO object with title.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricAssetAttributes'
        id:
          $ref: '#/components/schemas/MetricSLOID'
        type:
          $ref: '#/components/schemas/MetricSLOType'
      required:
        - id
        - type
      type: object
    MetricEstimateAttributes:
      description: Object containing the definition of a metric estimate attribute.
      properties:
        estimate_type:
          $ref: '#/components/schemas/MetricEstimateType'
        estimated_at:
          description: Timestamp when the cardinality estimate was requested.
          example: '2022-04-27T09:48:37.463835Z'
          format: date-time
          type: string
        estimated_output_series:
          description: >-
            Estimated cardinality of the metric based on the queried
            configuration.
          example: 50
          format: int64
          type: integer
      type: object
    MetricEstimateResourceType:
      default: metric_cardinality_estimate
      description: The metric estimate resource type.
      enum:
        - metric_cardinality_estimate
      example: metric_cardinality_estimate
      type: string
      x-enum-varnames:
        - METRIC_CARDINALITY_ESTIMATE
    MetricTagCardinality:
      description: >-
        Object containing metadata and attributes related to a specific tag key
        associated with the metric.
      example:
        attributes:
          cardinality_delta: 25
        id: http.request.latency
        type: tag_cardinality
      properties:
        attributes:
          $ref: '#/components/schemas/MetricTagCardinalityAttributes'
        id:
          description: The name of the tag key.
          type: string
        type:
          default: tag_cardinality
          description: This describes the endpoint action.
          type: string
      type: object
    JSONAPIErrorItemSource:
      description: References to the source of the error.
      properties:
        header:
          description: >-
            A string indicating the name of a single request header which caused
            the error.
          example: Authorization
          type: string
        parameter:
          description: A string indicating which URI query parameter caused the error.
          example: limit
          type: string
        pointer:
          description: >-
            A JSON pointer to the value in the request document that caused the
            error.
          example: /data/attributes/title
          type: string
      type: object
    MetricTagConfigurationAttributes:
      description: >-
        Object containing the definition of a metric tag configuration
        attributes.
      properties:
        aggregations:
          $ref: '#/components/schemas/MetricCustomAggregations'
        created_at:
          description: Timestamp when the tag configuration was created.
          example: '2020-03-25T09:48:37.463835Z'
          format: date-time
          type: string
        exclude_tags_mode:
          description: >-
            When set to true, the configuration will exclude the configured tags
            and include any other submitted tags.

            When set to false, the configuration will include the configured
            tags and exclude any other submitted tags.

            Defaults to false. Requires `tags` property.
          type: boolean
        include_percentiles:
          description: >-
            Toggle to include or exclude percentile aggregations for
            distribution metrics.

            Only present when the `metric_type` is `distribution`.
          example: true
          type: boolean
        metric_type:
          $ref: '#/components/schemas/MetricTagConfigurationMetricTypes'
        modified_at:
          description: Timestamp when the tag configuration was last modified.
          example: '2020-03-25T09:48:37.463835Z'
          format: date-time
          type: string
        tags:
          description: List of tag keys on which to group.
          example:
            - app
            - datacenter
          items:
            description: Tag keys to group by.
            type: string
          type: array
      type: object
    MetricTagConfigurationType:
      default: manage_tags
      description: The metric tag configuration resource type.
      enum:
        - manage_tags
      example: manage_tags
      type: string
      x-enum-varnames:
        - MANAGE_TAGS
    MetricTagConfigurationUpdateAttributes:
      description: >-
        Object containing the definition of a metric tag configuration to be
        updated.
      properties:
        aggregations:
          $ref: '#/components/schemas/MetricCustomAggregations'
        exclude_tags_mode:
          description: >-
            When set to true, the configuration will exclude the configured tags
            and include any other submitted tags.

            When set to false, the configuration will include the configured
            tags and exclude any other submitted tags.

            Defaults to false. Requires `tags` property.
          type: boolean
        include_percentiles:
          description: >-
            Toggle to include/exclude percentiles for a distribution metric.

            Defaults to false. Can only be applied to metrics that have a
            `metric_type` of `distribution`.
          example: true
          type: boolean
        tags:
          default: []
          description: A list of tag keys that will be queryable for your metric.
          example:
            - app
            - datacenter
          items:
            description: Tag keys to group by.
            type: string
          type: array
      type: object
    MetricTagConfigurationCreateAttributes:
      description: >-
        Object containing the definition of a metric tag configuration to be
        created.
      properties:
        aggregations:
          $ref: '#/components/schemas/MetricCustomAggregations'
        exclude_tags_mode:
          description: >-
            When set to true, the configuration will exclude the configured tags
            and include any other submitted tags.

            When set to false, the configuration will include the configured
            tags and exclude any other submitted tags.

            Defaults to false. Requires `tags` property.
          type: boolean
        include_percentiles:
          description: >-
            Toggle to include/exclude percentiles for a distribution metric.

            Defaults to false. Can only be applied to metrics that have a
            `metric_type` of `distribution`.
          example: true
          type: boolean
        metric_type:
          $ref: '#/components/schemas/MetricTagConfigurationMetricTypes'
        tags:
          default: []
          description: A list of tag keys that will be queryable for your metric.
          example:
            - app
            - datacenter
          items:
            description: Tag keys to group by.
            type: string
          type: array
      required:
        - tags
        - metric_type
      type: object
    MetricDistinctVolume:
      description: Object for a single metric's distinct volume.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricDistinctVolumeAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricDistinctVolumeType'
      type: object
    MetricIngestedIndexedVolume:
      description: Object for a single metric's ingested and indexed volume.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricIngestedIndexedVolumeAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricIngestedIndexedVolumeType'
      type: object
    ScalarFormulaRequestAttributes:
      description: The object describing a scalar formula request.
      properties:
        formulas:
          description: List of formulas to be calculated and returned as responses.
          items:
            $ref: '#/components/schemas/QueryFormula'
          type: array
        from:
          description: >-
            Start date (inclusive) of the query in milliseconds since the Unix
            epoch.
          example: 1568899800000
          format: int64
          type: integer
        queries:
          $ref: '#/components/schemas/ScalarFormulaRequestQueries'
        to:
          description: >-
            End date (exclusive) of the query in milliseconds since the Unix
            epoch.
          example: 1568923200000
          format: int64
          type: integer
      required:
        - to
        - from
        - queries
      type: object
    ScalarFormulaRequestType:
      default: scalar_request
      description: The type of the resource. The value should always be scalar_request.
      enum:
        - scalar_request
      example: scalar_request
      type: string
      x-enum-varnames:
        - SCALAR_REQUEST
    ScalarFormulaResponseAtrributes:
      description: The object describing a scalar response.
      properties:
        columns:
          description: >-
            List of response columns, each corresponding to an individual
            formula or query in the request and with values in parallel arrays
            matching the series list.
          items:
            $ref: '#/components/schemas/ScalarColumn'
          type: array
      type: object
    ScalarFormulaResponseType:
      default: scalar_response
      description: The type of the resource. The value should always be scalar_response.
      enum:
        - scalar_response
      example: scalar_response
      type: string
      x-enum-varnames:
        - SCALAR_RESPONSE
    TimeseriesFormulaRequestAttributes:
      description: The object describing a timeseries formula request.
      properties:
        formulas:
          description: List of formulas to be calculated and returned as responses.
          items:
            $ref: '#/components/schemas/QueryFormula'
          type: array
        from:
          description: >-
            Start date (inclusive) of the query in milliseconds since the Unix
            epoch.
          example: 1568899800000
          format: int64
          type: integer
        interval:
          description: |-
            A time interval in milliseconds.
            May be overridden by a larger interval if the query would result in
            too many points for the specified timeframe.
            Defaults to a reasonable interval for the given timeframe.
          example: 5000
          format: int64
          type: integer
        queries:
          $ref: '#/components/schemas/TimeseriesFormulaRequestQueries'
        to:
          description: >-
            End date (exclusive) of the query in milliseconds since the Unix
            epoch.
          example: 1568923200000
          format: int64
          type: integer
      required:
        - to
        - from
        - queries
      type: object
    TimeseriesFormulaRequestType:
      default: timeseries_request
      description: The type of the resource. The value should always be timeseries_request.
      enum:
        - timeseries_request
      example: timeseries_request
      type: string
      x-enum-varnames:
        - TIMESERIES_REQUEST
    TimeseriesResponseAttributes:
      description: The object describing a timeseries response.
      properties:
        series:
          $ref: '#/components/schemas/TimeseriesResponseSeriesList'
        times:
          $ref: '#/components/schemas/TimeseriesResponseTimes'
        values:
          $ref: '#/components/schemas/TimeseriesResponseValuesList'
      type: object
    TimeseriesFormulaResponseType:
      default: timeseries_response
      description: >-
        The type of the resource. The value should always be
        timeseries_response.
      enum:
        - timeseries_response
      example: timeseries_response
      type: string
      x-enum-varnames:
        - TIMESERIES_RESPONSE
    MetricMetadata:
      description: Metadata for the metric.
      properties:
        origin:
          $ref: '#/components/schemas/MetricOrigin'
      type: object
    MetricPoint:
      description: A point object is of the form `{POSIX_timestamp, numeric_value}`.
      example:
        timestamp: 1575317847
        value: 0.5
      properties:
        timestamp:
          description: >-
            The timestamp should be in seconds and current.

            Current is defined as not more than 10 minutes in the future or more
            than 1 hour in the past.
          format: int64
          type: integer
        value:
          description: The numeric value format should be a 64bit float gauge-type value.
          format: double
          type: number
      type: object
    MetricResource:
      description: Metric resource.
      example:
        name: dummyhost
        type: host
      properties:
        name:
          description: The name of the resource.
          type: string
        type:
          description: The type of the resource.
          type: string
      type: object
    MetricIntakeType:
      description: >-
        The type of metric. The available types are `0` (unspecified), `1`
        (count), `2` (rate), and `3` (gauge).
      enum:
        - 0
        - 1
        - 2
        - 3
      format: int32
      type: integer
      x-enum-varnames:
        - UNSPECIFIED
        - COUNT
        - RATE
        - GAUGE
    SpansAggregateRequestAttributes:
      description: The object containing all the query parameters.
      properties:
        compute:
          description: >-
            The list of metrics or timeseries to compute for the retrieved
            buckets.
          items:
            $ref: '#/components/schemas/SpansCompute'
          type: array
        filter:
          $ref: '#/components/schemas/SpansQueryFilter'
        group_by:
          description: The rules for the group by.
          items:
            $ref: '#/components/schemas/SpansGroupBy'
          type: array
        options:
          $ref: '#/components/schemas/SpansQueryOptions'
      type: object
    SpansAggregateRequestType:
      default: aggregate_request
      description: The type of resource. The value should always be aggregate_request.
      enum:
        - aggregate_request
      example: aggregate_request
      type: string
      x-enum-varnames:
        - AGGREGATE_REQUEST
    SpansAggregateBucketAttributes:
      description: A bucket values.
      properties:
        by:
          additionalProperties:
            description: The values for each group by.
          description: The key, value pairs for each group by.
          example:
            '@state': success
            '@version': abc
          type: object
        compute:
          description: The compute data.
          type: object
        computes:
          additionalProperties:
            $ref: '#/components/schemas/SpansAggregateBucketValue'
          description: >-
            A map of the metric name -> value for regular compute or list of
            values for a timeseries.
          type: object
      type: object
    SpansAggregateBucketType:
      description: The spans aggregate bucket type.
      enum:
        - bucket
      example: bucket
      type: string
      x-enum-varnames:
        - BUCKET
    SpansAggregateResponseStatus:
      description: The status of the response.
      enum:
        - done
        - timeout
      example: done
      type: string
      x-enum-varnames:
        - DONE
        - TIMEOUT
    SpansWarning:
      description: A warning message indicating something that went wrong with the query.
      properties:
        code:
          description: A unique code for this type of warning.
          example: unknown_index
          type: string
        detail:
          description: A detailed explanation of this specific warning.
          example: 'indexes: foo, bar'
          type: string
        title:
          description: A short human-readable summary of the warning.
          example: >-
            One or several indexes are missing or invalid, results hold data
            from the other indexes
          type: string
      type: object
    SpansAttributes:
      description: JSON object containing all span attributes and their associated values.
      properties:
        attributes:
          additionalProperties: {}
          description: JSON object of attributes from your span.
          example:
            customAttribute: 123
            duration: 2345
          type: object
        custom:
          additionalProperties: {}
          description: JSON object of custom spans data.
          type: object
        end_timestamp:
          description: End timestamp of your span.
          example: '2023-01-02T09:42:36.420Z'
          format: date-time
          type: string
        env:
          description: Name of the environment from where the spans are being sent.
          example: prod
          type: string
        host:
          description: Name of the machine from where the spans are being sent.
          example: i-0123
          type: string
        ingestion_reason:
          description: The reason why the span was ingested.
          example: rule
          type: string
        parent_id:
          description: Id of the span that's parent of this span.
          example: '0'
          type: string
        resource_hash:
          description: Unique identifier of the resource.
          example: a12345678b91c23d
          type: string
        resource_name:
          description: The name of the resource.
          example: agent
          type: string
        retained_by:
          description: The reason why the span was indexed.
          example: retention_filter
          type: string
        service:
          description: >-
            The name of the application or service generating the span events.

            It is used to switch from APM to Logs, so make sure you define the
            same

            value when you use both products.
          example: agent
          type: string
        single_span:
          description: >-
            Whether or not the span was collected as a stand-alone span. Always
            associated to "single_span" ingestion_reason if true.
          example: true
          type: boolean
        span_id:
          description: Id of the span.
          example: '1234567890987654321'
          type: string
        start_timestamp:
          description: Start timestamp of your span.
          example: '2023-01-02T09:42:36.320Z'
          format: date-time
          type: string
        tags:
          description: Array of tags associated with your span.
          example:
            - team:A
          items:
            description: Tag associated with your span.
            type: string
          type: array
        trace_id:
          description: Id of the trace to which the span belongs.
          example: '1234567890987654321'
          type: string
        type:
          description: The type of the span.
          example: web
          type: string
      type: object
    SpansType:
      default: spans
      description: Type of the span.
      enum:
        - spans
      example: spans
      type: string
      x-enum-varnames:
        - SPANS
    SpansResponseMetadataPage:
      description: Paging attributes.
      properties:
        after:
          description: >-
            The cursor to use to get the next results, if any. To make the next
            request, use the same

            parameters with the addition of the `page[cursor]`.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
      type: object
    SpansListRequestAttributes:
      description: The object containing all the query parameters.
      properties:
        filter:
          $ref: '#/components/schemas/SpansQueryFilter'
        options:
          $ref: '#/components/schemas/SpansQueryOptions'
        page:
          $ref: '#/components/schemas/SpansListRequestPage'
        sort:
          $ref: '#/components/schemas/SpansSort'
      type: object
    SpansListRequestType:
      default: search_request
      description: The type of resource. The value should always be search_request.
      enum:
        - search_request
      example: search_request
      type: string
      x-enum-varnames:
        - SEARCH_REQUEST
    FiltersPerProduct:
      description: Product-specific filters for the dataset.
      properties:
        filters:
          description: >-
            Defines the list of tag-based filters used to restrict access to
            telemetry data for a specific product.

            These filters act as access control rules. Each filter must follow
            the tag query syntax used by

            Datadog (such as `@tag.key:value`), and only one tag or attribute
            may be used to define the access strategy

            per telemetry type.
          example:
            - '@application.id:ABCD'
          items:
            example: '@application.id:ABCD'
            type: string
          type: array
        product:
          description: >-
            Name of the product the dataset is for. Possible values are 'apm',
            'rum',

            'metrics', 'logs', 'error_tracking', and 'cloud_cost'.
          example: logs
          type: string
      required:
        - product
        - filters
      type: object
    MetricMetaPageType:
      default: cursor_limit
      description: Type of metric pagination.
      enum:
        - cursor_limit
      example: cursor_limit
      type: string
      x-enum-varnames:
        - CURSOR_LIMIT
    MetricBulkTagConfigEmailList:
      description: A list of account emails to notify when the configuration is applied.
      example:
        - sue@example.com
        - bob@example.com
      items:
        description: An email address.
        type: string
      type: array
    MetricBulkTagConfigTagNameList:
      description: A list of tag names to apply to the configuration.
      example:
        - host
        - pod_name
        - is_shadow
      items:
        description: A metric tag name.
        maxLength: 200
        pattern: ^[A-Za-z][A-Za-z0-9\.\-\_:\/]*$
        type: string
      type: array
    MetricSuggestedAggregations:
      description: List of aggregation combinations that have been actively queried.
      example:
        - space: sum
          time: sum
        - space: sum
          time: count
      items:
        $ref: '#/components/schemas/MetricCustomAggregation'
      type: array
    MetricAssetDashboardRelationships:
      description: >-
        An object containing the list of dashboards that can be referenced in
        the `included` data.
      properties:
        data:
          description: A list of dashboards that can be referenced in the `included` data.
          items:
            $ref: '#/components/schemas/MetricAssetDashboardRelationship'
          type: array
      type: object
    MetricAssetMonitorRelationships:
      description: >-
        A object containing the list of monitors that can be referenced in the
        `included` data.
      properties:
        data:
          description: A list of monitors that can be referenced in the `included` data.
          items:
            $ref: '#/components/schemas/MetricAssetMonitorRelationship'
          type: array
      type: object
    MetricAssetNotebookRelationships:
      description: >-
        An object containing the list of notebooks that can be referenced in the
        `included` data.
      properties:
        data:
          description: A list of notebooks that can be referenced in the `included` data.
          items:
            $ref: '#/components/schemas/MetricAssetNotebookRelationship'
          type: array
      type: object
    MetricAssetSLORelationships:
      description: >-
        An object containing a list of SLOs that can be referenced in the
        `included` data.
      properties:
        data:
          description: A list of SLOs that can be referenced in the `included` data.
          items:
            $ref: '#/components/schemas/MetricAssetSLORelationship'
          type: array
      type: object
    MetricDashboardAttributes:
      description: >-
        Attributes related to the dashboard, including title, popularity, and
        url.
      properties:
        popularity:
          description: Value from 0 to 5 that ranks popularity of the dashboard.
          format: double
          maximum: 5
          minimum: 0
          type: number
        tags:
          description: List of tag keys used in the asset.
          example:
            - env
            - service
            - host
            - datacenter
          items:
            description: Tag key used in assets.
            type: string
          type: array
        title:
          description: Title of the asset.
          type: string
        url:
          description: URL path of the asset.
          type: string
      type: object
    MetricDashboardID:
      description: The related dashboard's ID.
      example: xxx-yyy-zzz
      type: string
    MetricDashboardType:
      description: Dashboard resource type.
      enum:
        - dashboards
      example: dashboards
      type: string
      x-enum-varnames:
        - DASHBOARDS
    MetricAssetAttributes:
      description: Assets related to the object, including title, url, and tags.
      properties:
        tags:
          description: List of tag keys used in the asset.
          example:
            - env
            - service
            - host
            - datacenter
          items:
            description: Tag key used in assets.
            type: string
          type: array
        title:
          description: Title of the asset.
          type: string
        url:
          description: URL path of the asset.
          type: string
      type: object
    MetricMonitorID:
      description: The related monitor's ID.
      example: '1775073'
      type: string
    MetricMonitorType:
      description: Monitor resource type.
      enum:
        - monitors
      example: monitors
      type: string
      x-enum-varnames:
        - MONITORS
    MetricNotebookID:
      description: The related notebook's ID.
      example: '12345'
      type: string
    MetricNotebookType:
      description: Notebook resource type.
      enum:
        - notebooks
      example: notebooks
      type: string
      x-enum-varnames:
        - NOTEBOOKS
    MetricSLOID:
      description: The SLO ID.
      example: 9ffef113b389520db54391d67d652dfb
      type: string
    MetricSLOType:
      description: SLO resource type.
      enum:
        - slos
      example: slos
      type: string
      x-enum-varnames:
        - SLOS
    MetricEstimateType:
      default: count_or_gauge
      description: >-
        Estimate type based on the queried configuration. By default,
        `count_or_gauge` is returned. `distribution` is returned for
        distribution metrics without percentiles enabled. Lastly, `percentile`
        is returned if `filter[pct]=true` is queried with a distribution metric.
      enum:
        - count_or_gauge
        - distribution
        - percentile
      example: distribution
      type: string
      x-enum-varnames:
        - COUNT_OR_GAUGE
        - DISTRIBUTION
        - PERCENTILE
    MetricTagCardinalityAttributes:
      description: An object containing properties related to the tag key
      properties:
        cardinality_delta:
          description: This describes the recent change in the tag keys cardinality
          format: int64
          type: integer
      type: object
    MetricCustomAggregations:
      description: >-
        Deprecated. You no longer need to configure specific time and space
        aggregations for Metrics Without Limits.
      example:
        - space: sum
          time: sum
        - space: sum
          time: count
      items:
        $ref: '#/components/schemas/MetricCustomAggregation'
      type: array
    MetricTagConfigurationMetricTypes:
      default: gauge
      description: The metric's type.
      enum:
        - gauge
        - count
        - rate
        - distribution
      example: count
      type: string
      x-enum-varnames:
        - GAUGE
        - COUNT
        - RATE
        - DISTRIBUTION
    MetricDistinctVolumeAttributes:
      description: Object containing the definition of a metric's distinct volume.
      properties:
        distinct_volume:
          description: Distinct volume for the given metric.
          example: 10
          format: int64
          type: integer
      type: object
    MetricDistinctVolumeType:
      default: distinct_metric_volumes
      description: The metric distinct volume type.
      enum:
        - distinct_metric_volumes
      example: distinct_metric_volumes
      type: string
      x-enum-varnames:
        - DISTINCT_METRIC_VOLUMES
    MetricIngestedIndexedVolumeAttributes:
      description: >-
        Object containing the definition of a metric's ingested and indexed
        volume.
      properties:
        indexed_volume:
          description: Indexed volume for the given metric.
          example: 10
          format: int64
          type: integer
        ingested_volume:
          description: Ingested volume for the given metric.
          example: 20
          format: int64
          type: integer
      type: object
    MetricIngestedIndexedVolumeType:
      default: metric_volumes
      description: The metric ingested and indexed volume type.
      enum:
        - metric_volumes
      example: metric_volumes
      type: string
      x-enum-varnames:
        - METRIC_VOLUMES
    QueryFormula:
      description: A formula for calculation based on one or more queries.
      properties:
        formula:
          description: >-
            Formula string, referencing one or more queries with their name
            property.
          example: a+b
          type: string
        limit:
          $ref: '#/components/schemas/FormulaLimit'
      required:
        - formula
      type: object
    ScalarFormulaRequestQueries:
      description: List of queries to be run and used as inputs to the formulas.
      example:
        - aggregator: avg
          data_source: metrics
          query: avg:system.cpu.user{*} by {env}
      items:
        $ref: '#/components/schemas/ScalarQuery'
      type: array
    ScalarColumn:
      description: A single column in a scalar query response.
      oneOf:
        - $ref: '#/components/schemas/GroupScalarColumn'
        - $ref: '#/components/schemas/DataScalarColumn'
    TimeseriesFormulaRequestQueries:
      description: List of queries to be run and used as inputs to the formulas.
      example:
        - data_source: metrics
          query: avg:system.cpu.user{*} by {env}
      items:
        $ref: '#/components/schemas/TimeseriesQuery'
      type: array
    TimeseriesResponseSeriesList:
      description: >-
        Array of response series. The index here corresponds to the index in the
        `formulas` or `queries` array from the request.
      items:
        $ref: '#/components/schemas/TimeseriesResponseSeries'
      type: array
    TimeseriesResponseTimes:
      description: Array of times, 1-1 match with individual values arrays.
      items:
        description: Start date (inclusive) of the query in seconds since the Unix epoch.
        example: 1568899800000
        format: int64
        type: integer
      type: array
    TimeseriesResponseValuesList:
      description: >-
        Array of value-arrays. The index here corresponds to the index in the
        `formulas` or `queries` array from the request.
      items:
        $ref: '#/components/schemas/TimeseriesResponseValues'
      type: array
    MetricOrigin:
      description: Metric origin information.
      properties:
        metric_type:
          default: 0
          description: The origin metric type code
          format: int32
          maximum: 1000
          type: integer
        product:
          default: 0
          description: The origin product code
          format: int32
          maximum: 1000
          type: integer
        service:
          default: 0
          description: The origin service code
          format: int32
          maximum: 1000
          type: integer
      type: object
    SpansCompute:
      description: A compute rule to compute metrics or timeseries.
      properties:
        aggregation:
          $ref: '#/components/schemas/SpansAggregationFunction'
        interval:
          description: |-
            The time buckets' size (only used for type=timeseries)
            Defaults to a resolution of 150 points.
          example: 5m
          type: string
        metric:
          description: The metric to use.
          example: '@duration'
          type: string
        type:
          $ref: '#/components/schemas/SpansComputeType'
      required:
        - aggregation
      type: object
    SpansQueryFilter:
      description: The search and filter query settings.
      properties:
        from:
          default: now-15m
          description: >-
            The minimum time for the requested spans, supports date-time
            ISO8601, date math, and regular timestamps (milliseconds).
          example: now-15m
          type: string
        query:
          default: '*'
          description: The search query - following the span search syntax.
          example: service:web* AND @http.status_code:[200 TO 299]
          type: string
        to:
          default: now
          description: >-
            The maximum time for the requested spans, supports date-time
            ISO8601, date math, and regular timestamps (milliseconds).
          example: now
          type: string
      type: object
    SpansGroupBy:
      description: A group by rule.
      properties:
        facet:
          description: The name of the facet to use (required).
          example: host
          type: string
        histogram:
          $ref: '#/components/schemas/SpansGroupByHistogram'
        limit:
          default: 10
          description: The maximum buckets to return for this group by.
          format: int64
          type: integer
        missing:
          $ref: '#/components/schemas/SpansGroupByMissing'
        sort:
          $ref: '#/components/schemas/SpansAggregateSort'
        total:
          $ref: '#/components/schemas/SpansGroupByTotal'
      required:
        - facet
      type: object
    SpansQueryOptions:
      description: >-
        Global query options that are used during the query.

        Note: You should only supply timezone or time offset but not both
        otherwise the query will fail.
      properties:
        timeOffset:
          description: The time offset (in seconds) to apply to the query.
          format: int64
          type: integer
        timezone:
          default: UTC
          description: >-
            The timezone can be specified as GMT, UTC, an offset from UTC (like
            UTC+1), or as a Timezone Database identifier (like
            America/New_York).
          example: GMT
          type: string
      type: object
    SpansAggregateBucketValue:
      description: A bucket value, can be either a timeseries or a single value.
      oneOf:
        - $ref: '#/components/schemas/SpansAggregateBucketValueSingleString'
        - $ref: '#/components/schemas/SpansAggregateBucketValueSingleNumber'
        - $ref: '#/components/schemas/SpansAggregateBucketValueTimeseries'
    SpansListRequestPage:
      description: Paging attributes for listing spans.
      properties:
        cursor:
          description: List following results with a cursor provided in the previous query.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
        limit:
          default: 10
          description: Maximum number of spans in the response.
          example: 25
          format: int32
          maximum: 1000
          type: integer
      type: object
    MetricCustomAggregation:
      description: A time and space aggregation combination for use in query.
      example:
        space: sum
        time: sum
      properties:
        space:
          $ref: '#/components/schemas/MetricCustomSpaceAggregation'
        time:
          $ref: '#/components/schemas/MetricCustomTimeAggregation'
      required:
        - time
        - space
      type: object
    MetricAssetDashboardRelationship:
      description: >-
        An object of type `dashboard` that can be referenced in the `included`
        data.
      properties:
        id:
          $ref: '#/components/schemas/MetricDashboardID'
        type:
          $ref: '#/components/schemas/MetricDashboardType'
      type: object
    MetricAssetMonitorRelationship:
      description: >-
        An object of type `monitor` that can be referenced in the `included`
        data.
      properties:
        id:
          $ref: '#/components/schemas/MetricMonitorID'
        type:
          $ref: '#/components/schemas/MetricMonitorType'
      type: object
    MetricAssetNotebookRelationship:
      description: >-
        An object of type `notebook` that can be referenced in the `included`
        data.
      properties:
        id:
          $ref: '#/components/schemas/MetricNotebookID'
        type:
          $ref: '#/components/schemas/MetricNotebookType'
      type: object
    MetricAssetSLORelationship:
      description: An object of type `slos` that can be referenced in the `included` data.
      properties:
        id:
          $ref: '#/components/schemas/MetricSLOID'
        type:
          $ref: '#/components/schemas/MetricSLOType'
      type: object
    FormulaLimit:
      description: >-
        Message for specifying limits to the number of values returned by a
        query.

        This limit is only for scalar queries and has no effect on timeseries
        queries.
      properties:
        count:
          description: The number of results to which to limit.
          example: 10
          format: int32
          maximum: 2147483647
          type: integer
        order:
          $ref: '#/components/schemas/QuerySortOrder'
      type: object
    ScalarQuery:
      description: An individual scalar query to one of the basic Datadog data sources.
      example:
        aggregator: avg
        data_source: metrics
        query: avg:system.cpu.user{*} by {env}
      oneOf:
        - $ref: '#/components/schemas/MetricsScalarQuery'
        - $ref: '#/components/schemas/EventsScalarQuery'
    GroupScalarColumn:
      description: A column containing the tag keys and values in a group.
      properties:
        name:
          description: The name of the tag key or group.
          example: env
          type: string
        type:
          $ref: '#/components/schemas/ScalarColumnTypeGroup'
        values:
          description: >-
            The array of tag values for each group found for the results of the
            formulas or queries.
          example:
            - - production
            - - staging
          items:
            description: An individual tag value for a given group column.
            items:
              description: One tag value within a values array.
              example: production
              type: string
            type: array
          type: array
      type: object
    DataScalarColumn:
      description: A column containing the numerical results for a formula or query.
      properties:
        meta:
          $ref: '#/components/schemas/ScalarMeta'
        name:
          description: The name referencing the formula or query for this column.
          example: a
          type: string
        type:
          $ref: '#/components/schemas/ScalarColumnTypeNumber'
        values:
          description: The array of numerical values for one formula or query.
          example:
            - 0.5
          items:
            description: An individual value for a given column and group-by.
            example: 0.5
            format: double
            nullable: true
            type: number
          type: array
      type: object
    TimeseriesQuery:
      description: An individual timeseries query to one of the basic Datadog data sources.
      example:
        data_source: metrics
        query: avg:system.cpu.user{*} by {env}
      oneOf:
        - $ref: '#/components/schemas/MetricsTimeseriesQuery'
        - $ref: '#/components/schemas/EventsTimeseriesQuery'
    TimeseriesResponseSeries:
      description: ''
      properties:
        group_tags:
          $ref: '#/components/schemas/GroupTags'
        query_index:
          description: >-
            The index of the query in the "formulas" array (or "queries" array
            if no "formulas" was specified).
          example: 0
          format: int32
          maximum: 2147483647
          type: integer
        unit:
          description: >-
            Detailed information about the unit.

            The first element describes the "primary unit" (for example, `bytes`
            in `bytes per second`).

            The second element describes the "per unit" (for example, `second`
            in `bytes per second`).

            If the second element is not present, the API returns null.
          items:
            $ref: '#/components/schemas/Unit'
          nullable: true
          type: array
      type: object
    TimeseriesResponseValues:
      description: Array of values for an individual formula or query.
      example:
        - 1575317847
        - 0.5
      items:
        description: An individual value for a given time.
        format: double
        nullable: true
        type: number
      type: array
    SpansAggregationFunction:
      description: An aggregation function.
      enum:
        - count
        - cardinality
        - pc75
        - pc90
        - pc95
        - pc98
        - pc99
        - sum
        - min
        - max
        - avg
        - median
      example: pc90
      type: string
      x-enum-varnames:
        - COUNT
        - CARDINALITY
        - PERCENTILE_75
        - PERCENTILE_90
        - PERCENTILE_95
        - PERCENTILE_98
        - PERCENTILE_99
        - SUM
        - MIN
        - MAX
        - AVG
        - MEDIAN
    SpansComputeType:
      default: total
      description: The type of compute.
      enum:
        - timeseries
        - total
      type: string
      x-enum-varnames:
        - TIMESERIES
        - TOTAL
    SpansGroupByHistogram:
      description: >-
        Used to perform a histogram computation (only for measure facets).

        Note: At most 100 buckets are allowed, the number of buckets is (max -
        min)/interval.
      properties:
        interval:
          description: The bin size of the histogram buckets.
          example: 10
          format: double
          type: number
        max:
          description: |-
            The maximum value for the measure used in the histogram
            (values greater than this one are filtered out).
          example: 100
          format: double
          type: number
        min:
          description: |-
            The minimum value for the measure used in the histogram
            (values smaller than this one are filtered out).
          example: 50
          format: double
          type: number
      required:
        - interval
        - min
        - max
      type: object
    SpansGroupByMissing:
      description: The value to use for spans that don't have the facet used to group by.
      oneOf:
        - $ref: '#/components/schemas/SpansGroupByMissingString'
        - $ref: '#/components/schemas/SpansGroupByMissingNumber'
    SpansAggregateSort:
      description: A sort rule.
      example:
        aggregation: count
        order: asc
      properties:
        aggregation:
          $ref: '#/components/schemas/SpansAggregationFunction'
        metric:
          description: The metric to sort by (only used for `type=measure`).
          example: '@duration'
          type: string
        order:
          $ref: '#/components/schemas/SpansSortOrder'
        type:
          $ref: '#/components/schemas/SpansAggregateSortType'
      type: object
    SpansGroupByTotal:
      default: false
      description: >-
        A resulting object to put the given computes in over all the matching
        records.
      oneOf:
        - $ref: '#/components/schemas/SpansGroupByTotalBoolean'
        - $ref: '#/components/schemas/SpansGroupByTotalString'
        - $ref: '#/components/schemas/SpansGroupByTotalNumber'
    SpansAggregateBucketValueSingleString:
      description: A single string value.
      type: string
    SpansAggregateBucketValueSingleNumber:
      description: A single number value.
      format: double
      type: number
    SpansAggregateBucketValueTimeseries:
      description: A timeseries array.
      items:
        $ref: '#/components/schemas/SpansAggregateBucketValueTimeseriesPoint'
      type: array
      x-generate-alias-as-model: true
    MetricCustomSpaceAggregation:
      description: A space aggregation for use in query.
      enum:
        - avg
        - max
        - min
        - sum
      example: sum
      type: string
      x-enum-varnames:
        - AVG
        - MAX
        - MIN
        - SUM
    MetricCustomTimeAggregation:
      description: A time aggregation for use in query.
      enum:
        - avg
        - count
        - max
        - min
        - sum
      example: sum
      type: string
      x-enum-varnames:
        - AVG
        - COUNT
        - MAX
        - MIN
        - SUM
    QuerySortOrder:
      default: desc
      description: Direction of sort.
      enum:
        - asc
        - desc
      type: string
      x-enum-varnames:
        - ASC
        - DESC
    MetricsScalarQuery:
      description: An individual scalar metrics query.
      properties:
        aggregator:
          $ref: '#/components/schemas/MetricsAggregator'
        data_source:
          $ref: '#/components/schemas/MetricsDataSource'
        name:
          description: The variable name for use in formulas.
          type: string
        query:
          description: A classic metrics query string.
          example: avg:system.cpu.user{*} by {env}
          type: string
      required:
        - data_source
        - query
        - aggregator
      type: object
    EventsScalarQuery:
      description: An individual scalar events query.
      properties:
        compute:
          $ref: '#/components/schemas/EventsCompute'
        data_source:
          $ref: '#/components/schemas/EventsDataSource'
        group_by:
          $ref: '#/components/schemas/EventsQueryGroupBys'
        indexes:
          description: The indexes in which to search.
          example:
            - main
          items:
            description: The unique index name.
            example: main
            type: string
          type: array
        name:
          description: The variable name for use in formulas.
          type: string
        search:
          $ref: '#/components/schemas/EventsSearch'
      required:
        - data_source
        - compute
      type: object
    ScalarColumnTypeGroup:
      default: group
      description: The type of column present for groups.
      enum:
        - group
      example: group
      type: string
      x-enum-varnames:
        - GROUP
    ScalarMeta:
      description: Metadata for the resulting numerical values.
      properties:
        unit:
          description: >-
            Detailed information about the unit.

            First element describes the "primary unit" (for example, `bytes` in
            `bytes per second`).

            The second element describes the "per unit" (for example, `second`
            in `bytes per second`).

            If the second element is not present, the API returns null.
          items:
            $ref: '#/components/schemas/Unit'
          nullable: true
          type: array
      type: object
    ScalarColumnTypeNumber:
      default: number
      description: The type of column present for numbers.
      enum:
        - number
      example: number
      type: string
      x-enum-varnames:
        - NUMBER
    MetricsTimeseriesQuery:
      description: An individual timeseries metrics query.
      properties:
        data_source:
          $ref: '#/components/schemas/MetricsDataSource'
        name:
          description: The variable name for use in formulas.
          type: string
        query:
          description: A classic metrics query string.
          example: avg:system.cpu.user{*} by {env}
          type: string
      required:
        - data_source
        - query
      type: object
    EventsTimeseriesQuery:
      description: An individual timeseries events query.
      properties:
        compute:
          $ref: '#/components/schemas/EventsCompute'
        data_source:
          $ref: '#/components/schemas/EventsDataSource'
        group_by:
          $ref: '#/components/schemas/EventsQueryGroupBys'
        indexes:
          description: The indexes in which to search.
          example:
            - main
          items:
            description: The unique index name.
            example: main
            type: string
          type: array
        name:
          description: The variable name for use in formulas.
          type: string
        search:
          $ref: '#/components/schemas/EventsSearch'
      required:
        - data_source
        - compute
      type: object
    GroupTags:
      description: List of tags that apply to a single response value.
      items:
        description: A single tag that applies to a single response value.
        example: env:production
        type: string
      type: array
    Unit:
      description: >-
        Object containing the metric unit family, scale factor, name, and short
        name.
      nullable: true
      properties:
        family:
          description: >-
            Unit family, allows for conversion between units of the same family,
            for scaling.
          example: time
          type: string
        name:
          description: Unit name
          example: minute
          type: string
        plural:
          description: Plural form of the unit name.
          example: minutes
          type: string
        scale_factor:
          description: Factor for scaling between units of the same family.
          example: 60
          format: double
          type: number
        short_name:
          description: Abbreviation of the unit.
          example: min
          type: string
      type: object
    SpansGroupByMissingString:
      description: The missing value to use if there is string valued facet.
      type: string
    SpansGroupByMissingNumber:
      description: The missing value to use if there is a number valued facet.
      format: double
      type: number
    SpansSortOrder:
      description: The order to use, ascending or descending.
      enum:
        - asc
        - desc
      example: asc
      type: string
      x-enum-varnames:
        - ASCENDING
        - DESCENDING
    SpansAggregateSortType:
      default: alphabetical
      description: The type of sorting algorithm.
      enum:
        - alphabetical
        - measure
      type: string
      x-enum-varnames:
        - ALPHABETICAL
        - MEASURE
    SpansGroupByTotalBoolean:
      description: If set to true, creates an additional bucket labeled "$facet_total".
      type: boolean
    SpansGroupByTotalString:
      description: A string to use as the key value for the total bucket.
      type: string
    SpansGroupByTotalNumber:
      description: A number to use as the key value for the total bucket.
      format: double
      type: number
    SpansAggregateBucketValueTimeseriesPoint:
      description: A timeseries point.
      properties:
        time:
          description: The time value for this point.
          example: '2023-06-08T11:55:00Z'
          type: string
        value:
          description: The value for this point.
          example: 19
          format: double
          type: number
      type: object
    MetricsAggregator:
      default: avg
      description: The type of aggregation that can be performed on metrics-based queries.
      enum:
        - avg
        - min
        - max
        - sum
        - last
        - percentile
        - mean
        - l2norm
        - area
      example: avg
      type: string
      x-enum-varnames:
        - AVG
        - MIN
        - MAX
        - SUM
        - LAST
        - PERCENTILE
        - MEAN
        - L2NORM
        - AREA
    MetricsDataSource:
      default: metrics
      description: A data source that is powered by the Metrics platform.
      enum:
        - metrics
        - cloud_cost
      example: metrics
      type: string
      x-enum-varnames:
        - METRICS
        - CLOUD_COST
    EventsCompute:
      description: The instructions for what to compute for this query.
      properties:
        aggregation:
          $ref: '#/components/schemas/EventsAggregation'
        interval:
          description: Interval for compute in milliseconds.
          example: 60000
          format: int64
          type: integer
        metric:
          description: The "measure" attribute on which to perform the computation.
          type: string
      required:
        - aggregation
      type: object
    EventsDataSource:
      default: logs
      description: A data source that is powered by the Events Platform.
      enum:
        - logs
        - rum
        - dora
      example: logs
      type: string
      x-enum-varnames:
        - LOGS
        - RUM
        - DORA
    EventsQueryGroupBys:
      description: The list of facets on which to split results.
      items:
        $ref: '#/components/schemas/EventsGroupBy'
      type: array
    EventsSearch:
      description: Configuration of the search/filter for an events query.
      properties:
        query:
          description: The search/filter string for an events query.
          example: status:warn service:foo
          type: string
      type: object
    EventsAggregation:
      default: count
      description: The type of aggregation that can be performed on events-based queries.
      enum:
        - count
        - cardinality
        - pc75
        - pc90
        - pc95
        - pc98
        - pc99
        - sum
        - min
        - max
        - avg
      example: count
      type: string
      x-enum-varnames:
        - COUNT
        - CARDINALITY
        - PC75
        - PC90
        - PC95
        - PC98
        - PC99
        - SUM
        - MIN
        - MAX
        - AVG
    EventsGroupBy:
      description: A dimension on which to split a query's results.
      properties:
        facet:
          description: The facet by which to split groups.
          example: '@error.type'
          type: string
        limit:
          default: 10
          description: >-
            The maximum buckets to return for this group by. Note: at most 10000
            buckets are allowed.

            If grouping by multiple facets, the product of limits must not
            exceed 10000.
          example: 10
          format: int32
          maximum: 10000
          type: integer
        sort:
          $ref: '#/components/schemas/EventsGroupBySort'
      required:
        - facet
      type: object
    EventsGroupBySort:
      description: The dimension by which to sort a query's results.
      properties:
        aggregation:
          $ref: '#/components/schemas/EventsAggregation'
        metric:
          description: >-
            The metric's calculated value which should be used to define the
            sort order of a query's results.
          example: '@duration'
          type: string
        order:
          $ref: '#/components/schemas/QuerySortOrder'
        type:
          $ref: '#/components/schemas/EventsSortType'
      required:
        - aggregation
      type: object
    EventsSortType:
      description: The type of sort to use on the calculated value.
      enum:
        - alphabetical
        - measure
      type: string
      x-enum-varnames:
        - ALPHABETICAL
        - MEASURE
  responses:
    NotAuthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Authorized
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Too many requests
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    ConflictResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Conflict
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
    UnauthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Unauthorized
    ForbiddenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Forbidden
    SpansBadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSONAPIErrorResponse'
      description: Bad Request.
    SpansForbiddenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSONAPIErrorResponse'
      description: 'Forbidden: Access denied.'
    SpansUnprocessableEntityResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSONAPIErrorResponse'
      description: Unprocessable Entity.
    SpansTooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSONAPIErrorResponse'
      description: 'Too many requests: The rate limit set by the API has been exceeded.'
  parameters:
    DatasetID:
      description: The ID of a defined dataset.
      example: 0879ce27-29a1-481f-a12e-bc2a48ec9ae1
      in: path
      name: dataset_id
      required: true
      schema:
        type: string
    MetricName:
      description: The name of the metric.
      example: dist.http.endpoint.request
      in: path
      name: metric_name
      required: true
      schema:
        type: string
  x-stackQL-resources:
    datasets:
      id: datadog.metrics.datasets
      name: datasets
      title: Datasets
      methods:
        get_all_datasets:
          operation:
            $ref: '#/paths/~1api~1v2~1datasets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_dataset:
          operation:
            $ref: '#/paths/~1api~1v2~1datasets/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_dataset:
          operation:
            $ref: '#/paths/~1api~1v2~1datasets~1{dataset_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_dataset:
          operation:
            $ref: '#/paths/~1api~1v2~1datasets~1{dataset_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_dataset:
          operation:
            $ref: '#/paths/~1api~1v2~1datasets~1{dataset_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/get_dataset'
          - $ref: '#/components/x-stackQL-resources/datasets/methods/get_all_datasets'
        insert:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/create_dataset'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/delete_dataset'
        replace:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/update_dataset'
    tag_configurations:
      id: datadog.metrics.tag_configurations
      name: tag_configurations
      title: Tag Configurations
      methods:
        list_tag_configurations:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        delete_bulk_tags_metrics_configuration:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1config~1bulk-tags/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        create_bulk_tags_metrics_configuration:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1config~1bulk-tags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        delete_tag_configuration:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1tags/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        list_tag_configuration_by_name:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_tag_configuration:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1tags/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_tag_configuration:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1tags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/tag_configurations/methods/list_tag_configuration_by_name
          - $ref: >-
              #/components/x-stackQL-resources/tag_configurations/methods/list_tag_configurations
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/tag_configurations/methods/create_tag_configuration
          - $ref: >-
              #/components/x-stackQL-resources/tag_configurations/methods/create_bulk_tags_metrics_configuration
        update:
          - $ref: >-
              #/components/x-stackQL-resources/tag_configurations/methods/update_tag_configuration
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/tag_configurations/methods/delete_tag_configuration
          - $ref: >-
              #/components/x-stackQL-resources/tag_configurations/methods/delete_bulk_tags_metrics_configuration
        replace: []
    active_tag_configurations:
      id: datadog.metrics.active_tag_configurations
      name: active_tag_configurations
      title: Active Tag Configurations
      methods:
        list_active_metric_configurations:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1metrics~1{metric_name}~1active-configurations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/active_tag_configurations/methods/list_active_metric_configurations
        insert: []
        update: []
        delete: []
        replace: []
    tags:
      id: datadog.metrics.tags
      name: tags
      title: Tags
      methods:
        list_tags_by_metric_name:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1all-tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/tags/methods/list_tags_by_metric_name
        insert: []
        update: []
        delete: []
        replace: []
    related_assets:
      id: datadog.metrics.related_assets
      name: related_assets
      title: Related Assets
      methods:
        list_metric_assets:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1assets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/related_assets/methods/list_metric_assets
        insert: []
        update: []
        delete: []
        replace: []
    metrics_output_series:
      id: datadog.metrics.metrics_output_series
      name: metrics_output_series
      title: Metrics Output Series
      methods:
        estimate_metrics_output_series:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1estimate/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/metrics_output_series/methods/estimate_metrics_output_series
        insert: []
        update: []
        delete: []
        replace: []
    tag_cardinality_details:
      id: datadog.metrics.tag_cardinality_details
      name: tag_cardinality_details
      title: Tag Cardinality Details
      methods:
        get_metric_tag_cardinality_details:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1tag-cardinalities/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/tag_cardinality_details/methods/get_metric_tag_cardinality_details
        insert: []
        update: []
        delete: []
        replace: []
    volumes:
      id: datadog.metrics.volumes
      name: volumes
      title: Volumes
      methods:
        list_volumes_by_metric_name:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1volumes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/volumes/methods/list_volumes_by_metric_name
        insert: []
        update: []
        delete: []
        replace: []
    metrics:
      id: datadog.metrics.metrics
      name: metrics
      title: Metrics
      methods:
        query_scalar_data:
          operation:
            $ref: '#/paths/~1api~1v2~1query~1scalar/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        query_timeseries_data:
          operation:
            $ref: '#/paths/~1api~1v2~1query~1timeseries/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        submit_metrics:
          operation:
            $ref: '#/paths/~1api~1v2~1series/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/metrics/methods/submit_metrics'
        update: []
        delete: []
        replace: []
    spans:
      id: datadog.metrics.spans
      name: spans
      title: Spans
      methods:
        aggregate_spans:
          operation:
            $ref: '#/paths/~1api~1v2~1spans~1analytics~1aggregate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_spans_get:
          operation:
            $ref: '#/paths/~1api~1v2~1spans~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        list_spans:
          operation:
            $ref: '#/paths/~1api~1v2~1spans~1events~1search/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/spans/methods/list_spans_get'
        insert:
          - $ref: '#/components/x-stackQL-resources/spans/methods/list_spans'
        update: []
        delete: []
        replace: []
servers:
  - url: >-
      https://{region:^(?:[^\:/]+(?:\:[0-9]+)?|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(?:\:[0-9]+)?)$}/
    variables:
      region:
        default: datadoghq.com
