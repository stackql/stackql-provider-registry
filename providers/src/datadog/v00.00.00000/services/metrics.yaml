openapi: 3.0.0
servers:
  - url: 'https://api.datadoghq.com'
    description: Datadog API
info:
  contact:
    email: support@datadoghq.com
    name: Datadog Support
    url: 'https://www.datadoghq.com/support/'
  version: '1.0'
  title: Datadog API V2 Collection - metrics
  description: |-
    The metrics endpoint allows you to:

    - Post metrics data so it can be graphed on Datadog’s dashboards
    - Query metrics from any time period (timeseries and scalar)
    - Modify tag configurations for metrics
    - View tags and volumes for metrics

    **Note**: A graph can only contain a set number of points
    and as the timeframe over which a metric is viewed increases,
    aggregation between points occurs to stay below that set number.

    The Post, Patch, and Delete `manage_tags` API methods can only be performed by
    a user who has the `Manage Tags for Metrics` permission.
security:
  - apiKeyAuth: []
    appKeyAuth: []
tags:
  - description: 'Manage configuration of [APM retention filters](https://app.datadoghq.com/apm/traces/retention-filters) for your organization. You need an API and application key with Admin rights to interact with this endpoint.'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/tracing/trace_pipeline/trace_retention/'
    name: APM Retention Filters
  - description: Search your Audit Logs events over HTTP.
    name: Audit
  - description: |-
      [AuthN Mappings API](https://docs.datadoghq.com/account_management/authn_mapping/?tab=example)
      is used to automatically map group of users to roles in Datadog using attributes
      sent from Identity Providers.
    name: AuthN Mappings
  - description: Search or aggregate your CI Visibility pipeline events and send them to your Datadog site over HTTP.
    name: CI Visibility Pipelines
  - description: Search or aggregate your CI Visibility test events over HTTP.
    name: CI Visibility Tests
  - description: Workload activity security rules for generating events using the Datadog security Agent.
    name: Cloud Workload Security
  - description: Configure your Datadog Cloudflare integration directly through the Datadog API.
    name: Cloudflare Integration
  - description: Configure your Datadog Confluent Cloud integration directly through the Datadog API.
    name: Confluent Cloud
  - description: The Container Images API allows you to query Container Image data for your organization.
    name: Container Images
  - description: The Containers API allows you to query container data for your organization.
    name: Containers
  - description: Send events for DORA Metrics to measure and improve software delivery.
    name: DORA Metrics
  - description: |-
      Interact with your dashboard lists through the API to
      organize, find, and share all of your dashboards with your team and
      organization.
    name: Dashboard Lists
  - description: |-
      **Note**: Downtime V2 is currently in private beta. To request access, contact [Datadog support](https://docs.datadoghq.com/help/).

      [Downtiming](https://docs.datadoghq.com/monitors/notify/downtimes) gives
      you greater control over monitor notifications by allowing you to globally exclude
      scopes from alerting. Downtime settings, which can be scheduled with start and
      end times, prevent all alerting related to specified Datadog tags.
    name: Downtimes
  - description: |-
      The events service allows you to programmatically post events to the event stream
      and fetch events from the event stream. Events are limited to 4000 characters.
      If an event is sent out with a message containing more than 4000 characters, only the
      first 4000 characters are displayed.
    name: Events
  - description: Configure your Datadog Fastly integration directly through the Datadog API.
    name: Fastly Integration
  - description: |-
      Configure your Datadog-Google Cloud Platform (GCP) integration directly
      through the Datadog API. Read more about the [Datadog-Google Cloud Platform integration](https://docs.datadoghq.com/integrations/google_cloud_platform).
    externalDocs:
      url: 'https://docs.datadoghq.com/integrations/google_cloud_platform'
    name: GCP Integration
  - description: |-
      The IP allowlist API is used to manage the IP addresses that
      can access the Datadog API and web UI. It does not block
      access to intake APIs or public dashboards.

      This is an enterprise-only feature. Request access by
      contacting Datadog support.
    name: IP Allowlist
  - description: 'Create, update, delete, and retrieve services which can be associated with incidents.'
    name: Incident Services
  - description: 'The Incident Teams endpoints are deprecated. See the [Teams API endpoints](https://docs.datadoghq.com/api/latest/teams/) to create, update, delete, and retrieve teams which can be associated with incidents.'
    name: Incident Teams
  - description: Manage incident response.
    name: Incidents
  - description: |-
      Manage your Datadog API and application keys. You need an API key and
      an application key for a user with the required permissions to interact
      with these endpoints. The full list of API and application keys can be
      seen on your [Datadog API page](https://app.datadoghq.com/account/settings#api).
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/account_management/api-app-keys/'
    name: Key Management
  - description: Search your logs and send them to your Datadog platform over HTTP.
    name: Logs
  - description: |-
      Archives forward all the logs ingested to a cloud storage system.

      See the [Archives Page](https://app.datadoghq.com/logs/pipelines/archives)
      for a list of the archives currently configured in web UI.
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/logs/archives/'
    name: Logs Archives
  - description: 'Manage configuration of [log-based metrics](https://app.datadoghq.com/logs/pipelines/generate-metrics) for your organization.'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/logs/logs_to_metrics/'
    name: Logs Metrics
  - description: |-
      The metrics endpoint allows you to:

      - Post metrics data so it can be graphed on Datadog’s dashboards
      - Query metrics from any time period (timeseries and scalar)
      - Modify tag configurations for metrics
      - View tags and volumes for metrics

      **Note**: A graph can only contain a set number of points
      and as the timeframe over which a metric is viewed increases,
      aggregation between points occurs to stay below that set number.

      The Post, Patch, and Delete `manage_tags` API methods can only be performed by
      a user who has the `Manage Tags for Metrics` permission.
    name: Metrics
  - description: |-
      [Monitors](https://docs.datadoghq.com/monitors) allow you to watch a metric or check that you care about and
      notifies your team when a defined threshold has exceeded.

      For more information, see [Creating Monitors](https://docs.datadoghq.com/monitors/create/types/) and
      [Tag Policies](https://docs.datadoghq.com/monitors/settings/).
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/monitors/create/types/'
    name: Monitors
  - description: Configure your Datadog Okta integration directly through the Datadog API.
    name: Okta Integration
  - description: |-
      Configure your [Datadog Opsgenie integration](https://docs.datadoghq.com/integrations/opsgenie/)
      directly through the Datadog API.
    externalDocs:
      url: 'https://docs.datadoghq.com/api/latest/opsgenie-integration'
    name: Opsgenie Integration
  - description: 'Create, edit, and manage your organizations. Read more about [multi-org accounts](https://docs.datadoghq.com/account_management/multi_organization).'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/account_management/multi_organization'
    name: Organizations
  - description: |-
      The powerpack endpoints allow you to:

      - Get a powerpack
      - Create a powerpack
      - Delete a powerpack
      - Get a list of all powerpacks

      The Patch and Delete API methods can only be performed on a powerpack by
      a user who has the powerpack create permission for that specific powerpack.
    name: Powerpack
  - description: The processes API allows you to query processes data for your organization.
    name: Processes
  - description: Search or aggregate your RUM events over HTTP.
    name: RUM
  - description: |-
      A restriction policy defines the access control rules for a resource, mapping a set of relations
      (such as editor and viewer) to a set of allowed principals (such as roles, teams, or users).
      The restriction policy determines who is authorized to perform what actions on the resource.
    name: Restriction Policies
  - description: |-
      The Roles API is used to create and manage Datadog roles, what
      [global permissions](https://docs.datadoghq.com/account_management/rbac/)
      they grant, and which users belong to them.

      Permissions related to specific account assets can be granted to roles
      in the Datadog application without using this API. For example, granting
      read access on a specific log index to a role can be done in Datadog from the
      [Pipelines page](https://app.datadoghq.com/logs/pipelines).
    name: Roles
  - description: |-
      Detection rules for generating signals and listing of generated
      signals.
    name: Security Monitoring
  - description: 'Create, update, delete, and retrieve sensitive data scanner groups and rules.'
    name: Sensitive Data Scanner
  - description: 'Create, edit, and disable service accounts.'
    name: Service Accounts
  - description: 'API to create, update, retrieve and delete service definitions.'
    externalDocs:
      url: 'https://docs.datadoghq.com/tracing/service_catalog/'
    name: Service Definition
  - description: |-
      API to create, update scorecard rules and outcomes.

      This feature is currently in BETA. If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).
    name: Service Scorecards
  - description: Search and aggregate your spans from your Datadog platform over HTTP.
    name: Spans
  - description: 'Manage configuration of [span-based metrics](https://app.datadoghq.com/apm/traces/generate-metrics) for your organization.'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/tracing/metrics/metrics_namespace/'
    name: Spans Metrics
  - description: |-
      Datadog Synthetics uses simulated user requests and browser rendering to help you ensure uptime,
      identify regional issues, and track your application performance. Datadog Synthetics tests come in
      two different flavors, [API tests](https://docs.datadoghq.com/synthetics/api_tests/)
      and [browser tests](https://docs.datadoghq.com/synthetics/browser_tests). You can use Datadog’s API to
      manage both test types programmatically.

      For more information about Synthetics, see the [Synthetics overview](https://docs.datadoghq.com/synthetics/).
    name: Synthetics
  - description: View and manage teams within Datadog.
    name: Teams
  - description: |-
      The usage metering API allows you to get hourly, daily, and
      monthly usage across multiple facets of Datadog.
      This API is available to all Pro and Enterprise customers.
      Usage is only accessible for [parent-level organizations](https://docs.datadoghq.com/account_management/multi_organization/).

      **Note**: Usage data is delayed by up to 72 hours from when it was incurred.
      It is retained for 15 months.

      You can retrieve up to 24 hours of hourly usage data for multiple organizations,
      and up to two months of hourly usage data for a single organization in one request.
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/account_management/billing/usage_details/'
    name: Usage Metering
  - description: 'Create, edit, and disable users.'
    externalDocs:
      url: 'https://docs.datadoghq.com/account_management/users'
    name: Users
components:
  schemas:
    MetricTagConfigurationMetricTypes:
      default: gauge
      description: The metric's type.
      enum:
        - gauge
        - count
        - rate
        - distribution
      example: count
      type: string
      x-enum-varnames:
        - GAUGE
        - COUNT
        - RATE
        - DISTRIBUTION
    MetricsAndMetricTagConfigurationsResponse:
      description: Response object that includes metrics and metric tag configurations.
      properties:
        data:
          description: Array of metrics and metric tag configurations.
          items:
            $ref: '#/components/schemas/MetricsAndMetricTagConfigurations'
          type: array
      readOnly: true
      type: object
    APIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          items:
            description: A list of items.
            example: Bad Request
            type: string
          type: array
      required:
        - errors
      type: object
    MetricsAndMetricTagConfigurations:
      description: Object for a metrics and metric tag configurations.
      oneOf:
        - $ref: '#/components/schemas/Metric'
        - $ref: '#/components/schemas/MetricTagConfiguration'
    APIKeysSort:
      default: name
      description: Sorting options
      enum:
        - created_at
        - '-created_at'
        - last4
        - '-last4'
        - modified_at
        - '-modified_at'
        - name
        - '-name'
      type: string
      x-enum-varnames:
        - CREATED_AT_ASCENDING
        - CREATED_AT_DESCENDING
        - LAST4_ASCENDING
        - LAST4_DESCENDING
        - MODIFIED_AT_ASCENDING
        - MODIFIED_AT_DESCENDING
        - NAME_ASCENDING
        - NAME_DESCENDING
    ApplicationKeysSort:
      default: name
      description: Sorting options
      enum:
        - created_at
        - '-created_at'
        - last4
        - '-last4'
        - name
        - '-name'
      type: string
      x-enum-varnames:
        - CREATED_AT_ASCENDING
        - CREATED_AT_DESCENDING
        - LAST4_ASCENDING
        - LAST4_DESCENDING
        - NAME_ASCENDING
        - NAME_DESCENDING
    IncidentAttachmentAttachmentType:
      description: The type of the incident attachment attributes.
      enum:
        - link
        - postmortem
      example: link
      type: string
      x-enum-varnames:
        - LINK
        - POSTMORTEM
    IncidentAttachmentRelatedObject:
      description: The object related to an incident attachment.
      enum:
        - users
      type: string
      x-enum-varnames:
        - USERS
    IncidentRelatedObject:
      description: Object related to an incident.
      enum:
        - users
        - attachments
      type: string
      x-enum-varnames:
        - USERS
        - ATTACHMENTS
    IncidentSearchSortOrder:
      description: The ways searched incidents can be sorted.
      enum:
        - created
        - '-created'
      type: string
      x-enum-varnames:
        - CREATED_ASCENDING
        - CREATED_DESCENDING
    ServiceDefinitionSchemaVersions:
      description: Schema versions
      enum:
        - v1
        - v2
        - v2.1
        - v2.2
      type: string
      x-enum-varnames:
        - V1
        - V2
        - V2_1
        - V2_2
    Metric:
      description: Object for a single metric tag configuration.
      example:
        id: metric.foo.bar
        type: metrics
      properties:
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricType'
      type: object
    MetricTagConfiguration:
      description: Object for a single metric tag configuration.
      example:
        attributes:
          aggregations:
            - space: avg
              time: avg
          created_at: '2020-03-25T09:48:37.463835Z'
          metric_type: gauge
          modified_at: '2020-04-25T09:48:37.463835Z'
          tags:
            - app
            - datacenter
        id: http.request.latency
        type: manage_tags
      properties:
        attributes:
          $ref: '#/components/schemas/MetricTagConfigurationAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricTagConfigurationType'
      type: object
    MetricName:
      description: The metric name for this resource.
      example: test.metric.latency
      type: string
    MetricType:
      default: metrics
      description: The metric resource type.
      enum:
        - metrics
      example: metrics
      type: string
      x-enum-varnames:
        - METRICS
    MetricTagConfigurationAttributes:
      description: Object containing the definition of a metric tag configuration attributes.
      properties:
        aggregations:
          $ref: '#/components/schemas/MetricCustomAggregations'
        created_at:
          description: Timestamp when the tag configuration was created.
          example: '2020-03-25T09:48:37.463835Z'
          format: date-time
          type: string
        exclude_tags_mode:
          description: |-
            When set to true, the configuration will exclude the configured tags and include any other submitted tags.
            When set to false, the configuration will include the configured tags and exclude any other submitted tags.
            Defaults to false. Requires `tags` property.
          type: boolean
        include_percentiles:
          description: |-
            Toggle to include or exclude percentile aggregations for distribution metrics.
            Only present when the `metric_type` is `distribution`.
          example: true
          type: boolean
        metric_type:
          $ref: '#/components/schemas/MetricTagConfigurationMetricTypes'
        modified_at:
          description: Timestamp when the tag configuration was last modified.
          example: '2020-03-25T09:48:37.463835Z'
          format: date-time
          type: string
        tags:
          description: List of tag keys on which to group.
          example:
            - app
            - datacenter
          items:
            description: Tag keys to group by.
            type: string
          type: array
      type: object
    MetricTagConfigurationType:
      default: manage_tags
      description: The metric tag configuration resource type.
      enum:
        - manage_tags
      example: manage_tags
      type: string
      x-enum-varnames:
        - MANAGE_TAGS
    MetricCustomAggregations:
      description: |-
        A list of queryable aggregation combinations for a count, rate, or gauge metric.
        By default, count and rate metrics require the (time: sum, space: sum) aggregation and
        Gauge metrics require the (time: avg, space: avg) aggregation.
        Additional time & space combinations are also available:

        - time: avg, space: avg
        - time: avg, space: max
        - time: avg, space: min
        - time: avg, space: sum
        - time: count, space: sum
        - time: max, space: max
        - time: min, space: min
        - time: sum, space: avg
        - time: sum, space: sum

        Can only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.
      example:
        - space: sum
          time: sum
        - space: sum
          time: count
      items:
        $ref: '#/components/schemas/MetricCustomAggregation'
      type: array
    MetricCustomAggregation:
      description: A time and space aggregation combination for use in query.
      example:
        space: sum
        time: sum
      properties:
        space:
          $ref: '#/components/schemas/MetricCustomSpaceAggregation'
        time:
          $ref: '#/components/schemas/MetricCustomTimeAggregation'
      required:
        - time
        - space
      type: object
    MetricCustomSpaceAggregation:
      description: A space aggregation for use in query.
      enum:
        - avg
        - max
        - min
        - sum
      example: sum
      type: string
      x-enum-varnames:
        - AVG
        - MAX
        - MIN
        - SUM
    MetricCustomTimeAggregation:
      description: A time aggregation for use in query.
      enum:
        - avg
        - count
        - max
        - min
        - sum
      example: sum
      type: string
      x-enum-varnames:
        - AVG
        - COUNT
        - MAX
        - MIN
        - SUM
    MetricBulkTagConfigDeleteRequest:
      description: Wrapper object for a single bulk tag deletion request.
      properties:
        data:
          $ref: '#/components/schemas/MetricBulkTagConfigDelete'
      required:
        - data
      type: object
    MetricBulkTagConfigResponse:
      description: Wrapper for a single bulk tag configuration status response.
      properties:
        data:
          $ref: '#/components/schemas/MetricBulkTagConfigStatus'
      type: object
    MetricBulkTagConfigDelete:
      description: Request object to bulk delete all tag configurations for metrics matching the given prefix.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricBulkTagConfigDeleteAttributes'
        id:
          $ref: '#/components/schemas/MetricBulkTagConfigNamePrefix'
        type:
          $ref: '#/components/schemas/MetricBulkConfigureTagsType'
      required:
        - id
        - type
      type: object
    MetricBulkTagConfigStatus:
      description: |-
        The status of a request to bulk configure metric tags.
        It contains the fields from the original request for reference.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricBulkTagConfigStatusAttributes'
        id:
          $ref: '#/components/schemas/MetricBulkTagConfigNamePrefix'
        type:
          $ref: '#/components/schemas/MetricBulkConfigureTagsType'
      required:
        - id
        - type
      type: object
    MetricBulkTagConfigDeleteAttributes:
      description: Optional parameters for bulk deleting metric tag configurations.
      properties:
        emails:
          $ref: '#/components/schemas/MetricBulkTagConfigEmailList'
      type: object
    MetricBulkTagConfigNamePrefix:
      description: A text prefix to match against metric names.
      example: kafka.lag
      type: string
    MetricBulkConfigureTagsType:
      default: metric_bulk_configure_tags
      description: The metric bulk configure tags resource.
      enum:
        - metric_bulk_configure_tags
      example: metric_bulk_configure_tags
      type: string
      x-enum-varnames:
        - BULK_MANAGE_TAGS
    MetricBulkTagConfigStatusAttributes:
      description: Optional attributes for the status of a bulk tag configuration request.
      properties:
        emails:
          $ref: '#/components/schemas/MetricBulkTagConfigEmailList'
        exclude_tags_mode:
          description: |-
            When set to true, the configuration will exclude the configured tags and include any other submitted tags.
            When set to false, the configuration will include the configured tags and exclude any other submitted tags.
          type: boolean
        status:
          description: The status of the request.
          example: Accepted
          type: string
        tags:
          $ref: '#/components/schemas/MetricBulkTagConfigTagNameList'
      type: object
    MetricBulkTagConfigEmailList:
      description: A list of account emails to notify when the configuration is applied.
      example:
        - sue@example.com
        - bob@example.com
      items:
        description: An email address.
        format: email
        type: string
      type: array
    MetricBulkTagConfigTagNameList:
      description: A list of tag names to apply to the configuration.
      example:
        - host
        - pod_name
        - is_shadow
      items:
        description: A metric tag name.
        maxLength: 200
        pattern: '^[A-Za-z][A-Za-z0-9\.\-\_:\/]*$'
        type: string
      type: array
    MetricBulkTagConfigCreateRequest:
      description: Wrapper object for a single bulk tag configuration request.
      properties:
        data:
          $ref: '#/components/schemas/MetricBulkTagConfigCreate'
      required:
        - data
      type: object
    MetricBulkTagConfigCreate:
      description: Request object to bulk configure tags for metrics matching the given prefix.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricBulkTagConfigCreateAttributes'
        id:
          $ref: '#/components/schemas/MetricBulkTagConfigNamePrefix'
        type:
          $ref: '#/components/schemas/MetricBulkConfigureTagsType'
      required:
        - id
        - type
      type: object
    MetricBulkTagConfigCreateAttributes:
      description: Optional parameters for bulk creating metric tag configurations.
      properties:
        emails:
          $ref: '#/components/schemas/MetricBulkTagConfigEmailList'
        exclude_tags_mode:
          description: |-
            When set to true, the configuration will exclude the configured tags and include any other submitted tags.
            When set to false, the configuration will include the configured tags and exclude any other submitted tags.
            Defaults to false.
          type: boolean
        tags:
          $ref: '#/components/schemas/MetricBulkTagConfigTagNameList'
      type: object
    MetricSuggestedTagsAndAggregationsResponse:
      description: Response object that includes a single metric's actively queried tags and aggregations.
      properties:
        data:
          $ref: '#/components/schemas/MetricSuggestedTagsAndAggregations'
      readOnly: true
      type: object
    MetricSuggestedTagsAndAggregations:
      description: Object for a single metric's actively queried tags and aggregations.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricSuggestedTagsAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricActiveConfigurationType'
      type: object
    MetricSuggestedTagsAttributes:
      description: Object containing the definition of a metric's actively queried tags and aggregations.
      properties:
        active_aggregations:
          $ref: '#/components/schemas/MetricSuggestedAggregations'
        active_tags:
          description: List of tag keys that have been actively queried.
          example:
            - app
            - datacenter
          items:
            description: Actively queried tag keys.
            type: string
          type: array
      type: object
    MetricActiveConfigurationType:
      default: actively_queried_configurations
      description: The metric actively queried configuration resource type.
      enum:
        - actively_queried_configurations
      example: actively_queried_configurations
      type: string
      x-enum-varnames:
        - ACTIVELY_QUERIED_CONFIGURATIONS
    MetricSuggestedAggregations:
      description: List of aggregation combinations that have been actively queried.
      example:
        - space: sum
          time: sum
        - space: sum
          time: count
      items:
        $ref: '#/components/schemas/MetricCustomAggregation'
      type: array
    MetricAllTagsResponse:
      description: Response object that includes a single metric's indexed tags.
      properties:
        data:
          $ref: '#/components/schemas/MetricAllTags'
      readOnly: true
      type: object
    MetricAllTags:
      description: Object for a single metric's indexed tags.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricAllTagsAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricType'
      type: object
    MetricAllTagsAttributes:
      description: Object containing the definition of a metric's tags.
      properties:
        tags:
          description: List of indexed tag value pairs.
          example:
            - 'sport:golf'
            - 'sport:football'
            - 'animal:dog'
          items:
            description: Tag key-value pairs.
            type: string
          type: array
      type: object
    MetricEstimateResponse:
      description: Response object that includes metric cardinality estimates.
      properties:
        data:
          $ref: '#/components/schemas/MetricEstimate'
      type: object
    MetricEstimate:
      description: Object for a metric cardinality estimate.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricEstimateAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricEstimateResourceType'
      type: object
    MetricEstimateAttributes:
      description: Object containing the definition of a metric estimate attribute.
      properties:
        estimate_type:
          $ref: '#/components/schemas/MetricEstimateType'
        estimated_at:
          description: Timestamp when the cardinality estimate was requested.
          example: '2022-04-27T09:48:37.463835Z'
          format: date-time
          type: string
        estimated_output_series:
          description: Estimated cardinality of the metric based on the queried configuration.
          example: 50
          format: int64
          type: integer
      type: object
    MetricEstimateResourceType:
      default: metric_cardinality_estimate
      description: The metric estimate resource type.
      enum:
        - metric_cardinality_estimate
      example: metric_cardinality_estimate
      type: string
      x-enum-varnames:
        - METRIC_CARDINALITY_ESTIMATE
    MetricEstimateType:
      default: count_or_gauge
      description: 'Estimate type based on the queried configuration. By default, `count_or_gauge` is returned. `distribution` is returned for distribution metrics without percentiles enabled. Lastly, `percentile` is returned if `filter[pct]=true` is queried with a distribution metric.'
      enum:
        - count_or_gauge
        - distribution
        - percentile
      example: distribution
      type: string
      x-enum-varnames:
        - COUNT_OR_GAUGE
        - DISTRIBUTION
        - PERCENTILE
    MetricTagConfigurationResponse:
      description: Response object which includes a single metric's tag configuration.
      properties:
        data:
          $ref: '#/components/schemas/MetricTagConfiguration'
      readOnly: true
      type: object
    MetricTagConfigurationUpdateRequest:
      description: Request object that includes the metric that you would like to edit the tag configuration on.
      properties:
        data:
          $ref: '#/components/schemas/MetricTagConfigurationUpdateData'
      required:
        - data
      type: object
    MetricTagConfigurationUpdateData:
      description: Object for a single tag configuration to be edited.
      example:
        attributes:
          group_by:
            - app
            - datacenter
          include_percentiles: false
        id: http.endpoint.request
        type: manage_tags
      properties:
        attributes:
          $ref: '#/components/schemas/MetricTagConfigurationUpdateAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricTagConfigurationType'
      required:
        - id
        - type
      type: object
    MetricTagConfigurationUpdateAttributes:
      description: Object containing the definition of a metric tag configuration to be updated.
      properties:
        aggregations:
          $ref: '#/components/schemas/MetricCustomAggregations'
        exclude_tags_mode:
          description: |-
            When set to true, the configuration will exclude the configured tags and include any other submitted tags.
            When set to false, the configuration will include the configured tags and exclude any other submitted tags.
            Defaults to false. Requires `tags` property.
          type: boolean
        include_percentiles:
          description: |-
            Toggle to include/exclude percentiles for a distribution metric.
            Defaults to false. Can only be applied to metrics that have a `metric_type` of `distribution`.
          example: true
          type: boolean
        tags:
          default: []
          description: A list of tag keys that will be queryable for your metric.
          example:
            - app
            - datacenter
          items:
            description: Tag keys to group by.
            type: string
          type: array
      type: object
    MetricTagConfigurationCreateRequest:
      description: Request object that includes the metric that you would like to configure tags for.
      properties:
        data:
          $ref: '#/components/schemas/MetricTagConfigurationCreateData'
      required:
        - data
      type: object
    MetricTagConfigurationCreateData:
      description: Object for a single metric to be configure tags on.
      example:
        attributes:
          include_percentiles: false
          metric_type: distribution
          tags:
            - app
            - datacenter
        id: http.endpoint.request
        type: manage_tags
      properties:
        attributes:
          $ref: '#/components/schemas/MetricTagConfigurationCreateAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricTagConfigurationType'
      required:
        - id
        - type
      type: object
    MetricTagConfigurationCreateAttributes:
      description: Object containing the definition of a metric tag configuration to be created.
      properties:
        aggregations:
          $ref: '#/components/schemas/MetricCustomAggregations'
        exclude_tags_mode:
          description: |-
            When set to true, the configuration will exclude the configured tags and include any other submitted tags.
            When set to false, the configuration will include the configured tags and exclude any other submitted tags.
            Defaults to false. Requires `tags` property.
          type: boolean
        include_percentiles:
          description: |-
            Toggle to include/exclude percentiles for a distribution metric.
            Defaults to false. Can only be applied to metrics that have a `metric_type` of `distribution`.
          example: true
          type: boolean
        metric_type:
          $ref: '#/components/schemas/MetricTagConfigurationMetricTypes'
        tags:
          default: []
          description: A list of tag keys that will be queryable for your metric.
          example:
            - app
            - datacenter
          items:
            description: Tag keys to group by.
            type: string
          type: array
      required:
        - tags
        - metric_type
      type: object
    MetricVolumesResponse:
      description: Response object which includes a single metric's volume.
      properties:
        data:
          $ref: '#/components/schemas/MetricVolumes'
      readOnly: true
      type: object
    MetricVolumes:
      description: Possible response objects for a metric's volume.
      oneOf:
        - $ref: '#/components/schemas/MetricDistinctVolume'
        - $ref: '#/components/schemas/MetricIngestedIndexedVolume'
    MetricDistinctVolume:
      description: Object for a single metric's distinct volume.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricDistinctVolumeAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricDistinctVolumeType'
      type: object
    MetricIngestedIndexedVolume:
      description: Object for a single metric's ingested and indexed volume.
      properties:
        attributes:
          $ref: '#/components/schemas/MetricIngestedIndexedVolumeAttributes'
        id:
          $ref: '#/components/schemas/MetricName'
        type:
          $ref: '#/components/schemas/MetricIngestedIndexedVolumeType'
      type: object
    MetricDistinctVolumeAttributes:
      description: Object containing the definition of a metric's distinct volume.
      properties:
        distinct_volume:
          description: Distinct volume for the given metric.
          example: 10
          format: int64
          type: integer
      type: object
    MetricDistinctVolumeType:
      default: distinct_metric_volumes
      description: The metric distinct volume type.
      enum:
        - distinct_metric_volumes
      example: distinct_metric_volumes
      type: string
      x-enum-varnames:
        - DISTINCT_METRIC_VOLUMES
    MetricIngestedIndexedVolumeAttributes:
      description: Object containing the definition of a metric's ingested and indexed volume.
      properties:
        indexed_volume:
          description: Indexed volume for the given metric.
          example: 10
          format: int64
          type: integer
        ingested_volume:
          description: Ingested volume for the given metric.
          example: 20
          format: int64
          type: integer
      type: object
    MetricIngestedIndexedVolumeType:
      default: metric_volumes
      description: The metric ingested and indexed volume type.
      enum:
        - metric_volumes
      example: metric_volumes
      type: string
      x-enum-varnames:
        - METRIC_VOLUMES
    ScalarFormulaQueryRequest:
      description: A wrapper request around one scalar query to be executed.
      properties:
        data:
          $ref: '#/components/schemas/ScalarFormulaRequest'
      required:
        - data
      type: object
    ScalarFormulaQueryResponse:
      description: A message containing one or more responses to scalar queries.
      properties:
        data:
          $ref: '#/components/schemas/ScalarResponse'
        errors:
          description: An error generated when processing a request.
          type: string
      type: object
    ScalarFormulaRequest:
      description: A single scalar query to be executed.
      properties:
        attributes:
          $ref: '#/components/schemas/ScalarFormulaRequestAttributes'
        type:
          $ref: '#/components/schemas/ScalarFormulaRequestType'
      required:
        - type
        - attributes
      type: object
    ScalarResponse:
      description: A message containing the response to a scalar query.
      properties:
        attributes:
          $ref: '#/components/schemas/ScalarFormulaResponseAtrributes'
        type:
          $ref: '#/components/schemas/ScalarFormulaResponseType'
      type: object
    ScalarFormulaRequestAttributes:
      description: The object describing a scalar formula request.
      properties:
        formulas:
          description: List of formulas to be calculated and returned as responses.
          items:
            $ref: '#/components/schemas/QueryFormula'
          type: array
        from:
          description: Start date (inclusive) of the query in milliseconds since the Unix epoch.
          example: 1568899800000
          format: int64
          type: integer
        queries:
          $ref: '#/components/schemas/ScalarFormulaRequestQueries'
        to:
          description: End date (exclusive) of the query in milliseconds since the Unix epoch.
          example: 1568923200000
          format: int64
          type: integer
      required:
        - to
        - from
        - queries
      type: object
    ScalarFormulaRequestType:
      default: scalar_request
      description: The type of the resource. The value should always be scalar_request.
      enum:
        - scalar_request
      example: scalar_request
      type: string
      x-enum-varnames:
        - SCALAR_REQUEST
    ScalarFormulaResponseAtrributes:
      description: The object describing a scalar response.
      properties:
        columns:
          description: 'List of response columns, each corresponding to an individual formula or query in the request and with values in parallel arrays matching the series list.'
          items:
            $ref: '#/components/schemas/ScalarColumn'
          type: array
      type: object
    ScalarFormulaResponseType:
      default: scalar_response
      description: The type of the resource. The value should always be scalar_response.
      enum:
        - scalar_response
      example: scalar_response
      type: string
      x-enum-varnames:
        - SCALAR_RESPONSE
    QueryFormula:
      description: A formula for calculation based on one or more queries.
      properties:
        formula:
          description: 'Formula string, referencing one or more queries with their name property.'
          example: a+b
          type: string
        limit:
          $ref: '#/components/schemas/FormulaLimit'
      required:
        - formula
      type: object
    ScalarFormulaRequestQueries:
      description: List of queries to be run and used as inputs to the formulas.
      items:
        $ref: '#/components/schemas/ScalarQuery'
      type: array
    ScalarColumn:
      description: A single column in a scalar query response.
      oneOf:
        - $ref: '#/components/schemas/GroupScalarColumn'
        - $ref: '#/components/schemas/DataScalarColumn'
    FormulaLimit:
      description: |-
        Message for specifying limits to the number of values returned by a query.
        This limit is only for scalar queries and has no effect on timeseries queries.
      properties:
        count:
          description: The number of results to which to limit.
          example: 10
          format: int32
          maximum: 2147483647
          type: integer
        order:
          $ref: '#/components/schemas/QuerySortOrder'
      type: object
    ScalarQuery:
      description: An individual scalar query to one of the basic Datadog data sources.
      example:
        aggregator: avg
        data_source: metrics
        query: 'avg:system.cpu.user{*} by {env}'
      oneOf:
        - $ref: '#/components/schemas/MetricsScalarQuery'
        - $ref: '#/components/schemas/EventsScalarQuery'
    GroupScalarColumn:
      description: A column containing the tag keys and values in a group.
      properties:
        name:
          description: The name of the tag key or group.
          example: env
          type: string
        type:
          $ref: '#/components/schemas/ScalarColumnTypeGroup'
        values:
          description: The array of tag values for each group found for the results of the formulas or queries.
          example:
            - - production
            - - staging
          items:
            description: An individual tag value for a given group column.
            items:
              description: One tag value within a values array.
              example: production
              type: string
            type: array
          type: array
      type: object
    DataScalarColumn:
      description: A column containing the numerical results for a formula or query.
      properties:
        meta:
          $ref: '#/components/schemas/ScalarMeta'
        name:
          description: The name referencing the formula or query for this column.
          example: a
          type: string
        type:
          $ref: '#/components/schemas/ScalarColumnTypeNumber'
        values:
          description: The array of numerical values for one formula or query.
          example:
            - 0.5
          items:
            description: An individual value for a given column and group-by.
            example: 0.5
            format: double
            nullable: true
            type: number
          type: array
      type: object
    QuerySortOrder:
      default: desc
      description: Direction of sort.
      enum:
        - asc
        - desc
      type: string
      x-enum-varnames:
        - ASC
        - DESC
    MetricsScalarQuery:
      description: An individual scalar metrics query.
      properties:
        aggregator:
          $ref: '#/components/schemas/MetricsAggregator'
        data_source:
          $ref: '#/components/schemas/MetricsDataSource'
        name:
          description: The variable name for use in formulas.
          type: string
        query:
          description: A classic metrics query string.
          example: 'avg:system.cpu.user{*} by {env}'
          type: string
      required:
        - data_source
        - query
        - aggregator
      type: object
    EventsScalarQuery:
      description: An individual scalar events query.
      properties:
        compute:
          $ref: '#/components/schemas/EventsCompute'
        data_source:
          $ref: '#/components/schemas/EventsDataSource'
        group_by:
          $ref: '#/components/schemas/EventsQueryGroupBys'
        indexes:
          description: The indexes in which to search.
          example:
            - main
          items:
            description: The unique index name.
            example: main
            type: string
          type: array
        name:
          description: The variable name for use in formulas.
          type: string
        search:
          $ref: '#/components/schemas/EventsSearch'
      required:
        - data_source
        - compute
      type: object
    ScalarColumnTypeGroup:
      default: group
      description: The type of column present for groups.
      enum:
        - group
      example: group
      type: string
      x-enum-varnames:
        - GROUP
    ScalarMeta:
      description: Metadata for the resulting numerical values.
      properties:
        unit:
          description: |-
            Detailed information about the unit.
            First element describes the "primary unit" (for example, `bytes` in `bytes per second`).
            The second element describes the "per unit" (for example, `second` in `bytes per second`).
            If the second element is not present, the API returns null.
          items:
            $ref: '#/components/schemas/Unit'
          nullable: true
          type: array
      type: object
    ScalarColumnTypeNumber:
      default: number
      description: The type of column present for numbers.
      enum:
        - number
      example: number
      type: string
      x-enum-varnames:
        - NUMBER
    MetricsAggregator:
      default: avg
      description: The type of aggregation that can be performed on metrics-based queries.
      enum:
        - avg
        - min
        - max
        - sum
        - last
        - percentile
        - mean
        - l2norm
        - area
      example: avg
      type: string
      x-enum-varnames:
        - AVG
        - MIN
        - MAX
        - SUM
        - LAST
        - PERCENTILE
        - MEAN
        - L2NORM
        - AREA
    MetricsDataSource:
      default: metrics
      description: A data source that is powered by the Metrics platform.
      enum:
        - metrics
        - cloud_cost
      example: metrics
      type: string
      x-enum-varnames:
        - METRICS
        - CLOUD_COST
    EventsCompute:
      description: The instructions for what to compute for this query.
      properties:
        aggregation:
          $ref: '#/components/schemas/EventsAggregation'
        interval:
          description: Interval for compute in milliseconds.
          example: 60000
          format: int64
          type: integer
        metric:
          description: The "measure" attribute on which to perform the computation.
          type: string
      required:
        - aggregation
      type: object
    EventsDataSource:
      default: logs
      description: A data source that is powered by the Events Platform.
      enum:
        - logs
        - rum
      example: logs
      type: string
      x-enum-varnames:
        - LOGS
        - RUM
    EventsQueryGroupBys:
      description: The list of facets on which to split results.
      items:
        $ref: '#/components/schemas/EventsGroupBy'
      type: array
    EventsSearch:
      description: Configuration of the search/filter for an events query.
      properties:
        query:
          description: The search/filter string for an events query.
          example: 'status:warn service:foo'
          type: string
      type: object
    Unit:
      description: 'Object containing the metric unit family, scale factor, name, and short name.'
      nullable: true
      properties:
        family:
          description: 'Unit family, allows for conversion between units of the same family, for scaling.'
          example: time
          type: string
        name:
          description: Unit name
          example: minute
          type: string
        plural:
          description: Plural form of the unit name.
          example: minutes
          type: string
        scale_factor:
          description: Factor for scaling between units of the same family.
          example: 60
          format: double
          type: number
        short_name:
          description: Abbreviation of the unit.
          example: min
          type: string
      type: object
    EventsAggregation:
      default: count
      description: The type of aggregation that can be performed on events-based queries.
      enum:
        - count
        - cardinality
        - pc75
        - pc90
        - pc95
        - pc98
        - pc99
        - sum
        - min
        - max
        - avg
      example: count
      type: string
      x-enum-varnames:
        - COUNT
        - CARDINALITY
        - PC75
        - PC90
        - PC95
        - PC98
        - PC99
        - SUM
        - MIN
        - MAX
        - AVG
    EventsGroupBy:
      description: A dimension on which to split a query's results.
      properties:
        facet:
          description: The facet by which to split groups.
          example: '@error.type'
          type: string
        limit:
          description: The maximum number of groups to return.
          example: 10
          format: int32
          maximum: 2147483647
          type: integer
        sort:
          $ref: '#/components/schemas/EventsGroupBySort'
      required:
        - facet
      type: object
    EventsGroupBySort:
      description: The dimension by which to sort a query's results.
      properties:
        aggregation:
          $ref: '#/components/schemas/EventsAggregation'
        metric:
          description: The metric's calculated value which should be used to define the sort order of a query's results.
          example: '@duration'
          type: string
        order:
          $ref: '#/components/schemas/QuerySortOrder'
        type:
          $ref: '#/components/schemas/EventsSortType'
      required:
        - aggregation
      type: object
    EventsSortType:
      description: The type of sort to use on the calculated value.
      enum:
        - alphabetical
        - measure
      type: string
      x-enum-varnames:
        - ALPHABETICAL
        - MEASURE
    TimeseriesFormulaQueryRequest:
      description: A request wrapper around a single timeseries query to be executed.
      properties:
        data:
          $ref: '#/components/schemas/TimeseriesFormulaRequest'
      required:
        - data
      type: object
    TimeseriesFormulaQueryResponse:
      description: A message containing one response to a timeseries query made with timeseries formula query request.
      properties:
        data:
          $ref: '#/components/schemas/TimeseriesResponse'
        errors:
          description: The error generated by the request.
          type: string
      type: object
    TimeseriesFormulaRequest:
      description: A single timeseries query to be executed.
      properties:
        attributes:
          $ref: '#/components/schemas/TimeseriesFormulaRequestAttributes'
        type:
          $ref: '#/components/schemas/TimeseriesFormulaRequestType'
      required:
        - type
        - attributes
      type: object
    TimeseriesResponse:
      description: A message containing the response to a timeseries query.
      properties:
        attributes:
          $ref: '#/components/schemas/TimeseriesResponseAttributes'
        type:
          $ref: '#/components/schemas/TimeseriesFormulaResponseType'
      type: object
    TimeseriesFormulaRequestAttributes:
      description: The object describing a timeseries formula request.
      properties:
        formulas:
          description: List of formulas to be calculated and returned as responses.
          items:
            $ref: '#/components/schemas/QueryFormula'
          type: array
        from:
          description: Start date (inclusive) of the query in milliseconds since the Unix epoch.
          example: 1568899800000
          format: int64
          type: integer
        interval:
          description: |-
            A time interval in milliseconds.
            May be overridden by a larger interval if the query would result in
            too many points for the specified timeframe.
            Defaults to a reasonable interval for the given timeframe.
          example: 5000
          format: int64
          type: integer
        queries:
          $ref: '#/components/schemas/TimeseriesFormulaRequestQueries'
        to:
          description: End date (exclusive) of the query in milliseconds since the Unix epoch.
          example: 1568923200000
          format: int64
          type: integer
      required:
        - to
        - from
        - queries
      type: object
    TimeseriesFormulaRequestType:
      default: timeseries_request
      description: The type of the resource. The value should always be timeseries_request.
      enum:
        - timeseries_request
      example: timeseries_request
      type: string
      x-enum-varnames:
        - TIMESERIES_REQUEST
    TimeseriesResponseAttributes:
      description: The object describing a timeseries response.
      properties:
        series:
          $ref: '#/components/schemas/TimeseriesResponseSeriesList'
        times:
          $ref: '#/components/schemas/TimeseriesResponseTimes'
        values:
          $ref: '#/components/schemas/TimeseriesResponseValuesList'
      type: object
    TimeseriesFormulaResponseType:
      default: timeseries_response
      description: The type of the resource. The value should always be timeseries_response.
      enum:
        - timeseries_response
      example: timeseries_response
      type: string
      x-enum-varnames:
        - TIMESERIES_RESPONSE
    TimeseriesFormulaRequestQueries:
      description: List of queries to be run and used as inputs to the formulas.
      items:
        $ref: '#/components/schemas/TimeseriesQuery'
      type: array
    TimeseriesResponseSeriesList:
      description: Array of response series. The index here corresponds to the index in the `formulas` or `queries` array from the request.
      items:
        $ref: '#/components/schemas/TimeseriesResponseSeries'
      type: array
    TimeseriesResponseTimes:
      description: 'Array of times, 1-1 match with individual values arrays.'
      items:
        description: Start date (inclusive) of the query in seconds since the Unix epoch.
        example: 1568899800000
        format: int64
        type: integer
      type: array
    TimeseriesResponseValuesList:
      description: Array of value-arrays. The index here corresponds to the index in the `formulas` or `queries` array from the request.
      items:
        $ref: '#/components/schemas/TimeseriesResponseValues'
      type: array
    TimeseriesQuery:
      description: An individual timeseries query to one of the basic Datadog data sources.
      example:
        data_source: metrics
        query: 'avg:system.cpu.user{*} by {env}'
      oneOf:
        - $ref: '#/components/schemas/MetricsTimeseriesQuery'
        - $ref: '#/components/schemas/EventsTimeseriesQuery'
    TimeseriesResponseSeries:
      description: ''
      properties:
        group_tags:
          $ref: '#/components/schemas/GroupTags'
        query_index:
          description: The index of the query in the "formulas" array (or "queries" array if no "formulas" was specified).
          example: 0
          format: int32
          maximum: 2147483647
          type: integer
        unit:
          description: |-
            Detailed information about the unit.
            The first element describes the "primary unit" (for example, `bytes` in `bytes per second`).
            The second element describes the "per unit" (for example, `second` in `bytes per second`).
            If the second element is not present, the API returns null.
          items:
            $ref: '#/components/schemas/Unit'
          type: array
      type: object
    TimeseriesResponseValues:
      description: Array of values for an individual formula or query.
      example:
        - 1575317847
        - 0.5
      items:
        description: An individual value for a given time.
        format: double
        nullable: true
        type: number
      type: array
    MetricsTimeseriesQuery:
      description: An individual timeseries metrics query.
      properties:
        data_source:
          $ref: '#/components/schemas/MetricsDataSource'
        name:
          description: The variable name for use in formulas.
          type: string
        query:
          description: A classic metrics query string.
          example: 'avg:system.cpu.user{*} by {env}'
          type: string
      required:
        - data_source
        - query
      type: object
    EventsTimeseriesQuery:
      description: An individual timeseries events query.
      properties:
        compute:
          $ref: '#/components/schemas/EventsCompute'
        data_source:
          $ref: '#/components/schemas/EventsDataSource'
        group_by:
          $ref: '#/components/schemas/EventsQueryGroupBys'
        indexes:
          description: The indexes in which to search.
          example:
            - main
          items:
            description: The unique index name.
            example: main
            type: string
          type: array
        name:
          description: The variable name for use in formulas.
          type: string
        search:
          $ref: '#/components/schemas/EventsSearch'
      required:
        - data_source
        - compute
      type: object
    GroupTags:
      description: List of tags that apply to a single response value.
      items:
        description: A single tag that applies to a single response value.
        example: 'env:production'
        type: string
      type: array
    MetricContentEncoding:
      default: deflate
      description: HTTP header used to compress the media-type.
      enum:
        - deflate
        - zstd1
        - gzip
      example: deflate
      type: string
      x-enum-varnames:
        - DEFLATE
        - ZSTD1
        - GZIP
    MetricPayload:
      description: The metrics' payload.
      properties:
        series:
          description: A list of time series to submit to Datadog.
          example:
            - metric: system.load.1
              points:
                - timestamp: 1475317847
                  value: 0.7
              resources:
                - name: dummyhost
                  type: host
          items:
            $ref: '#/components/schemas/MetricSeries'
          type: array
      required:
        - series
      type: object
    IntakePayloadAccepted:
      description: The payload accepted for intake.
      properties:
        errors:
          description: A list of errors.
          items:
            description: An empty error list.
            type: string
          type: array
      type: object
    MetricSeries:
      description: |-
        A metric to submit to Datadog.
        See [Datadog metrics](https://docs.datadoghq.com/developers/metrics/#custom-metrics-properties).
      properties:
        interval:
          description: 'If the type of the metric is rate or count, define the corresponding interval.'
          example: 20
          format: int64
          type: integer
        metadata:
          $ref: '#/components/schemas/MetricMetadata'
        metric:
          description: The name of the timeseries.
          example: system.load.1
          type: string
        points:
          description: 'Points relating to a metric. All points must be objects with timestamp and a scalar value (cannot be a string). Timestamps should be in POSIX time in seconds, and cannot be more than ten minutes in the future or more than one hour in the past.'
          items:
            $ref: '#/components/schemas/MetricPoint'
          type: array
        resources:
          description: A list of resources to associate with this metric.
          items:
            $ref: '#/components/schemas/MetricResource'
          type: array
        source_type_name:
          description: The source type name.
          example: datadog
          type: string
        tags:
          description: A list of tags associated with the metric.
          example:
            - 'environment:test'
          items:
            description: Individual tags.
            type: string
          type: array
        type:
          $ref: '#/components/schemas/MetricIntakeType'
        unit:
          description: The unit of point value.
          example: second
          type: string
      required:
        - metric
        - points
      type: object
    MetricMetadata:
      description: Metadata for the metric.
      properties:
        origin:
          $ref: '#/components/schemas/MetricOrigin'
      type: object
    MetricPoint:
      description: 'A point object is of the form `{POSIX_timestamp, numeric_value}`.'
      example:
        timestamp: 1575317847
        value: 0.5
      properties:
        timestamp:
          description: |-
            The timestamp should be in seconds and current.
            Current is defined as not more than 10 minutes in the future or more than 1 hour in the past.
          format: int64
          type: integer
        value:
          description: The numeric value format should be a 64bit float gauge-type value.
          format: double
          type: number
      type: object
    MetricResource:
      description: Metric resource.
      example:
        name: dummyhost
        type: host
      properties:
        name:
          description: The name of the resource.
          type: string
        type:
          description: The type of the resource.
          type: string
      type: object
    MetricIntakeType:
      description: 'The type of metric. The available types are `0` (unspecified), `1` (count), `2` (rate), and `3` (gauge).'
      enum:
        - 0
        - 1
        - 2
        - 3
      format: int32
      type: integer
      x-enum-varnames:
        - UNSPECIFIED
        - COUNT
        - RATE
        - GAUGE
    MetricOrigin:
      description: Metric origin information.
      properties:
        metric_type:
          default: 0
          description: The origin metric type code
          format: int32
          maximum: 1000
          type: integer
        product:
          default: 0
          description: The origin product code
          format: int32
          maximum: 1000
          type: integer
        service:
          default: 0
          description: The origin service code
          format: int32
          maximum: 1000
          type: integer
      type: object
  parameters:
    APIKeyCategoryParameter:
      description: Filter API keys by category.
      in: query
      name: 'filter[category]'
      required: false
      schema:
        type: string
    APIKeyFilterCreatedAtEndParameter:
      description: Only include API keys created on or before the specified date.
      in: query
      name: 'filter[created_at][end]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterCreatedAtStartParameter:
      description: Only include API keys created on or after the specified date.
      in: query
      name: 'filter[created_at][start]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterModifiedAtEndParameter:
      description: Only include API keys modified on or before the specified date.
      in: query
      name: 'filter[modified_at][end]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterModifiedAtStartParameter:
      description: Only include API keys modified on or after the specified date.
      in: query
      name: 'filter[modified_at][start]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterParameter:
      description: Filter API keys by the specified string.
      in: query
      name: filter
      required: false
      schema:
        type: string
    APIKeyId:
      description: The ID of the API key.
      in: path
      name: api_key_id
      required: true
      schema:
        type: string
    APIKeyIncludeParameter:
      description: Comma separated list of resource paths for related resources to include in the response. Supported resource paths are `created_by` and `modified_by`.
      in: query
      name: include
      required: false
      schema:
        example: 'created_by,modified_by'
        type: string
    APIKeyReadConfigReadEnabledParameter:
      description: Filter API keys by remote config read enabled status.
      in: query
      name: 'filter[remote_config_read_enabled]'
      required: false
      schema:
        type: boolean
    APIKeysSortParameter:
      description: |-
        API key attribute used to sort results. Sort order is ascending
        by default. In order to specify a descending sort, prefix the
        attribute with a minus sign.
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/APIKeysSort'
    ApplicationKeyFilterCreatedAtEndParameter:
      description: Only include application keys created on or before the specified date.
      in: query
      name: 'filter[created_at][end]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    ApplicationKeyFilterCreatedAtStartParameter:
      description: Only include application keys created on or after the specified date.
      in: query
      name: 'filter[created_at][start]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    ApplicationKeyFilterParameter:
      description: Filter application keys by the specified string.
      in: query
      name: filter
      required: false
      schema:
        type: string
    ApplicationKeyID:
      description: The ID of the application key.
      in: path
      name: app_key_id
      required: true
      schema:
        type: string
    ApplicationKeyIncludeParameter:
      description: Resource path for related resources to include in the response. Only `owned_by` is supported.
      in: query
      name: include
      required: false
      schema:
        example: owned_by
        type: string
    ApplicationKeysSortParameter:
      description: |-
        Application key attribute used to sort results. Sort order is ascending
        by default. In order to specify a descending sort, prefix the
        attribute with a minus sign.
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/ApplicationKeysSort'
    ArchiveID:
      description: The ID of the archive.
      in: path
      name: archive_id
      required: true
      schema:
        type: string
    AuthNMappingID:
      description: The UUID of the AuthN Mapping.
      in: path
      name: authn_mapping_id
      required: true
      schema:
        type: string
    CloudWorkloadSecurityAgentRuleID:
      description: The ID of the Agent rule.
      example: 3b5-v82-ns6
      in: path
      name: agent_rule_id
      required: true
      schema:
        type: string
    ConfluentAccountID:
      description: Confluent Account id.
      in: path
      name: account_id
      required: true
      schema:
        type: string
    ConfluentResourceID:
      description: Confluent Account Resource ID.
      in: path
      name: resource_id
      required: true
      schema:
        type: string
    FastlyAccountID:
      description: Fastly Account id.
      in: path
      name: account_id
      required: true
      schema:
        type: string
    FastlyServiceID:
      description: Fastly Service ID.
      in: path
      name: service_id
      required: true
      schema:
        type: string
    GCPSTSServiceAccountID:
      description: Your GCP STS enabled service account's unique ID.
      in: path
      name: account_id
      required: true
      schema:
        type: string
    IncidentAttachmentFilterQueryParameter:
      description: Specifies which types of attachments are included in the response.
      explode: false
      in: query
      name: 'filter[attachment_type]'
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentAttachmentAttachmentType'
        type: array
    IncidentAttachmentIncludeQueryParameter:
      description: Specifies which types of related objects are included in the response.
      explode: false
      in: query
      name: include
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentAttachmentRelatedObject'
        type: array
    IncidentIDPathParameter:
      description: The UUID of the incident.
      in: path
      name: incident_id
      required: true
      schema:
        type: string
    IncidentIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      explode: false
      in: query
      name: include
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentRelatedObject'
        type: array
    IncidentIntegrationMetadataIDPathParameter:
      description: The UUID of the incident integration metadata.
      in: path
      name: integration_metadata_id
      required: true
      schema:
        type: string
    IncidentSearchIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentSearchQueryQueryParameter:
      description: |-
        Specifies which incidents should be returned. The query can contain any number of incident facets
        joined by `ANDs`, along with multiple values for each of those facets joined by `OR`s. For
        example: `state:active AND severity:(SEV-2 OR SEV-1)`.
      explode: false
      in: query
      name: query
      required: true
      schema:
        type: string
    IncidentSearchSortQueryParameter:
      description: Specifies the order of returned incidents.
      explode: false
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/IncidentSearchSortOrder'
    IncidentServiceIDPathParameter:
      description: The ID of the incident service.
      in: path
      name: service_id
      required: true
      schema:
        type: string
    IncidentServiceIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentServiceSearchQueryParameter:
      description: A search query that filters services by name.
      in: query
      name: filter
      required: false
      schema:
        example: ExampleServiceName
        type: string
    IncidentTeamIDPathParameter:
      description: The ID of the incident team.
      in: path
      name: team_id
      required: true
      schema:
        type: string
    IncidentTeamIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentTeamSearchQueryParameter:
      description: A search query that filters teams by name.
      in: query
      name: filter
      required: false
      schema:
        example: ExampleTeamName
        type: string
    IncidentTodoIDPathParameter:
      description: The UUID of the incident todo.
      in: path
      name: todo_id
      required: true
      schema:
        type: string
    MetricID:
      description: The name of the log-based metric.
      in: path
      name: metric_id
      required: true
      schema:
        type: string
    MetricName:
      description: The name of the metric.
      example: dist.http.endpoint.request
      in: path
      name: metric_name
      required: true
      schema:
        type: string
    OpsgenieServiceIDPathParameter:
      description: The UUID of the service.
      in: path
      name: integration_service_id
      required: true
      schema:
        type: string
    PageNumber:
      description: Specific page number to return.
      in: query
      name: 'page[number]'
      required: false
      schema:
        default: 0
        example: 0
        format: int64
        type: integer
    PageOffset:
      description: Specific offset to use as the beginning of the returned page.
      in: query
      name: 'page[offset]'
      required: false
      schema:
        default: 0
        example: 0
        format: int64
        type: integer
    PageSize:
      description: Size for a given page. The maximum allowed value is 100.
      in: query
      name: 'page[size]'
      required: false
      schema:
        default: 10
        example: 10
        format: int64
        type: integer
    ResourceID:
      description: 'Identifier, formatted as `type:id`. Supported types: `connection`, `dashboard`, `notebook`, `security-rule`, `slo`.'
      example: 'dashboard:abc-def-ghi'
      in: path
      name: resource_id
      required: true
      schema:
        type: string
    RetentionFilterIdParam:
      description: The ID of the retention filter.
      in: path
      name: filter_id
      required: true
      schema:
        type: string
    RoleID:
      description: The unique identifier of the role.
      in: path
      name: role_id
      required: true
      schema:
        type: string
    RuleId:
      description: The ID of the rule/scorecard.
      in: path
      name: rule_id
      required: true
      schema:
        type: string
    SchemaVersion:
      description: The schema version desired in the response.
      in: query
      name: schema_version
      required: false
      schema:
        $ref: '#/components/schemas/ServiceDefinitionSchemaVersions'
    SecurityFilterID:
      description: The ID of the security filter.
      in: path
      name: security_filter_id
      required: true
      schema:
        type: string
    SecurityMonitoringRuleID:
      description: The ID of the rule.
      in: path
      name: rule_id
      required: true
      schema:
        type: string
    SensitiveDataScannerGroupID:
      description: The ID of a group of rules.
      in: path
      name: group_id
      required: true
      schema:
        type: string
    SensitiveDataScannerRuleID:
      description: The ID of the rule.
      in: path
      name: rule_id
      required: true
      schema:
        type: string
    ServiceAccountID:
      description: The ID of the service account.
      in: path
      name: service_account_id
      required: true
      schema:
        example: 00000000-0000-1234-0000-000000000000
        type: string
    ServiceName:
      description: The name of the service.
      in: path
      name: service_name
      required: true
      schema:
        example: my-service
        type: string
    SignalID:
      description: The ID of the signal.
      in: path
      name: signal_id
      required: true
      schema:
        type: string
    SpansMetricIDParameter:
      description: The name of the span-based metric.
      in: path
      name: metric_id
      required: true
      schema:
        type: string
    UserID:
      description: The ID of the user.
      in: path
      name: user_id
      required: true
      schema:
        example: 00000000-0000-9999-0000-000000000000
        type: string
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    UnauthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Unauthorized
    ForbiddenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Forbidden
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Too many requests
  securitySchemes:
    AuthZ:
      description: This API uses OAuth 2 with the implicit grant flow.
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/v1/authorize
          scopes:
            apm_service_catalog_read: View service catalog and service definitions.
            apm_service_catalog_write: 'Add, modify, and delete service catalog definitions when those definitions are maintained by Datadog.'
            ci_visibility_pipelines_write: Create CI Visibility pipeline spans using the API.
            ci_visibility_read: View CI Visibility.
            create_webhooks: Create webhooks integrations.
            dashboards_public_share: Generate public and authenticated links to share dashboards or embeddable graphs externally.
            dashboards_read: View dashboards.
            dashboards_write: Create and change dashboards.
            events_read: Read Events data.
            incident_notification_settings_write: Configure Incidents Notification settings.
            incident_read: View incidents in Datadog.
            incident_settings_write: Configure Incident Settings.
            incident_write: 'Create, view, and manage incidents in Datadog.'
            metrics_read: View custom metrics.
            monitors_downtime: Set downtimes to suppress alerts from any monitor in an organization. Mute and unmute hosts. The ability to write monitors is not required to set downtimes.
            monitors_read: View monitors.
            monitors_write: Edit and delete individual monitors.
            security_monitoring_filters_read: Read Security Filters.
            security_monitoring_filters_write: 'Create, edit, and delete Security Filters.'
            security_monitoring_findings_read: View CSPM Findings.
            security_monitoring_rules_read: Read Detection Rules.
            security_monitoring_rules_write: Create and edit Detection Rules.
            security_monitoring_signals_read: View Security Signals.
            security_monitoring_suppressions_read: Read Rule Suppressions.
            security_monitoring_suppressions_write: Write Rule Suppressions.
            slos_corrections: 'Apply, edit, and delete SLO status corrections. A user with this permission can make status corrections, even if they do not have permission to edit those SLOs.'
            slos_read: View SLOs and status corrections.
            slos_write: 'Create, edit, and delete SLOs.'
            synthetics_global_variable_read: 'View, search, and use Synthetics global variables.'
            synthetics_global_variable_write: 'Create, edit, and delete global variables for Synthetics.'
            synthetics_private_location_read: 'View, search, and use Synthetics private locations.'
            synthetics_private_location_write: Create and delete private locations in addition to having access to the associated installation guidelines.
            synthetics_read: List and view configured Synthetic tests and test results.
            synthetics_write: 'Create, edit, and delete Synthetic tests.'
            teams_manage: 'Manage Teams. Create, delete, rename, and edit metadata of all Teams. To control Team membership across all Teams, use the User Access Manage permission.'
            teams_read: 'Read Teams data. A User with this permission can view Team names, metadata, and which Users are on each Team.'
            timeseries_query: Query Timeseries data.
            usage_read: View your organization's usage and usage attribution.
            user_access_invite: Invite other users to your organization.
            user_access_manage: 'Disable users, manage user roles, manage SAML-to-role mappings, and configure logs restriction queries.'
            user_access_read: View users and their roles and settings.
          tokenUrl: /oauth2/v1/token
      type: oauth2
    apiKeyAuth:
      description: Your Datadog API Key.
      in: header
      name: DD-API-KEY
      type: apiKey
      x-env-name: DD_API_KEY
    appKeyAuth:
      description: Your Datadog APP Key.
      in: header
      name: DD-APPLICATION-KEY
      type: apiKey
      x-env-name: DD_APP_KEY
  callbacks: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  x-stackQL-resources:
    tag_configurations:
      id: datadog.metrics.tag_configurations
      name: tag_configurations
      title: Tag Configurations
      methods:
        list_tag_configurations:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _list_tag_configurations:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_tag_configuration:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1tags/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        update_tag_configuration:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1tags/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_tag_configuration:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1tags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tag_configurations/methods/list_tag_configurations'
        insert:
          - $ref: '#/components/x-stackQL-resources/tag_configurations/methods/create_tag_configuration'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tag_configurations/methods/delete_tag_configuration'
    active_metric_configurations:
      id: datadog.metrics.active_metric_configurations
      name: active_metric_configurations
      title: Active Metric Configurations
      methods:
        delete_bulk_tags_metrics_configuration:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1config~1bulk-tags/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        create_bulk_tags_metrics_configuration:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1config~1bulk-tags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        list_active_metric_configurations:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1active-configurations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _list_active_metric_configurations:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1active-configurations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/active_metric_configurations/methods/list_active_metric_configurations'
        insert:
          - $ref: '#/components/x-stackQL-resources/active_metric_configurations/methods/create_bulk_tags_metrics_configuration'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/active_metric_configurations/methods/delete_bulk_tags_metrics_configuration'
    tags_by_metric_names:
      id: datadog.metrics.tags_by_metric_names
      name: tags_by_metric_names
      title: Tags By Metric Names
      methods:
        list_tags_by_metric_name:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1all-tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _list_tags_by_metric_name:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1all-tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tags_by_metric_names/methods/list_tags_by_metric_name'
        insert: []
        update: []
        delete: []
    metrics_output_series:
      id: datadog.metrics.metrics_output_series
      name: metrics_output_series
      title: Metrics Output Series
      methods:
        estimate_metrics_output_series:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1estimate/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _estimate_metrics_output_series:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1estimate/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    tag_configuration_by_name:
      id: datadog.metrics.tag_configuration_by_name
      name: tag_configuration_by_name
      title: Tag Configuration By Name
      methods:
        list_tag_configuration_by_name:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _list_tag_configuration_by_name:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tag_configuration_by_name/methods/list_tag_configuration_by_name'
        insert: []
        update: []
        delete: []
    volumes_by_metric_name:
      id: datadog.metrics.volumes_by_metric_name
      name: volumes_by_metric_name
      title: Volumes By Metric Name
      methods:
        list_volumes_by_metric_name:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1volumes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _list_volumes_by_metric_name:
          operation:
            $ref: '#/paths/~1api~1v2~1metrics~1{metric_name}~1volumes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/volumes_by_metric_name/methods/list_volumes_by_metric_name'
        insert: []
        update: []
        delete: []
    scalar_data:
      id: datadog.metrics.scalar_data
      name: scalar_data
      title: Scalar Data
      methods:
        query_scalar_data:
          operation:
            $ref: '#/paths/~1api~1v2~1query~1scalar/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/scalar_data/methods/query_scalar_data'
        insert: []
        update: []
        delete: []
    timeseries_data:
      id: datadog.metrics.timeseries_data
      name: timeseries_data
      title: Timeseries Data
      methods:
        query_timeseries_data:
          operation:
            $ref: '#/paths/~1api~1v2~1query~1timeseries/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/timeseries_data/methods/query_timeseries_data'
        insert: []
        update: []
        delete: []
    metrics:
      id: datadog.metrics.metrics
      name: metrics
      title: Metrics
      methods:
        submit_metrics:
          operation:
            $ref: '#/paths/~1api~1v2~1series/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  /api/v2/metrics:
    get:
      description: Returns all metrics that can be configured in the Metrics Summary page or with Metrics without Limits™ (matching additional filters if specified).
      operationId: ListTagConfigurations
      parameters:
        - description: Filter custom metrics that have configured tags.
          example: true
          in: query
          name: 'filter[configured]'
          required: false
          schema:
            type: boolean
        - description: Filter tag configurations by configured tags.
          example: app
          in: query
          name: 'filter[tags_configured]'
          required: false
          schema:
            description: Tag keys to filter by.
            type: string
        - description: Filter metrics by metric type.
          in: query
          name: 'filter[metric_type]'
          required: false
          schema:
            $ref: '#/components/schemas/MetricTagConfigurationMetricTypes'
        - description: |-
            Filter distributions with additional percentile
            aggregations enabled or disabled.
          example: true
          in: query
          name: 'filter[include_percentiles]'
          required: false
          schema:
            type: boolean
        - description: |-
            Filter custom metrics that have or have not been queried in the specified window[seconds].
            If no window is provided or the window is less than 2 hours, a default of 2 hours will be applied.
          example: true
          in: query
          name: 'filter[queried]'
          required: false
          schema:
            type: boolean
        - description: |-
            Filter metrics that have been submitted with the given tags. Supports boolean and wildcard expressions.
            Can only be combined with the filter[queried] filter.
          example: 'env IN (staging,test) AND service:web'
          in: query
          name: 'filter[tags]'
          required: false
          schema:
            type: string
        - description: |-
            The number of seconds of look back (from now) to apply to a filter[tag] or filter[queried] query.
            Default value is 3600 (1 hour), maximum value is 2,592,000 (30 days).
          example: 3600
          in: query
          name: 'window[seconds]'
          required: false
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsAndMetricTagConfigurationsResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - metrics_read
      summary: Get a list of metrics
      tags:
        - Metrics
  /api/v2/metrics/config/bulk-tags:
    delete:
      description: |-
        Delete all custom lists of queryable tag keys for a set of existing count, gauge, rate, and distribution metrics.
        Metrics are selected by passing a metric name prefix.
        Results can be sent to a set of account email addresses, just like the same operation in the Datadog web app.
        Can only be used with application keys of users with the `Manage Tags for Metrics` permission.
      operationId: DeleteBulkTagsMetricsConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricBulkTagConfigDeleteRequest'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricBulkTagConfigResponse'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: Delete tags for multiple metrics
      tags:
        - Metrics
      x-codegen-request-body-name: body
    post:
      description: |-
        Create and define a list of queryable tag keys for a set of existing count, gauge, rate, and distribution metrics.
        Metrics are selected by passing a metric name prefix. Use the Delete method of this API path to remove tag configurations.
        Results can be sent to a set of account email addresses, just like the same operation in the Datadog web app.
        If multiple calls include the same metric, the last configuration applied (not by submit order) is used, do not
        expect deterministic ordering of concurrent calls. The `exclude_tags_mode` value will set all metrics that match the prefix to
        the same exclusion state, metric tag configurations do not support mixed inclusion and exclusion for tags on the same metric.
        Can only be used with application keys of users with the `Manage Tags for Metrics` permission.
      operationId: CreateBulkTagsMetricsConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricBulkTagConfigCreateRequest'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricBulkTagConfigResponse'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: Configure tags for multiple metrics
      tags:
        - Metrics
      x-codegen-request-body-name: body
  '/api/v2/metrics/{metric_name}/active-configurations':
    get:
      description: List tags and aggregations that are actively queried on dashboards and monitors for a given metric name.
      operationId: ListActiveMetricConfigurations
      parameters:
        - $ref: '#/components/parameters/MetricName'
        - description: |-
            The number of seconds of look back (from now).
            Default value is 604,800 (1 week), minimum value is 7200 (2 hours), maximum value is 2,630,000 (1 month).
          example: 7200
          in: query
          name: 'window[seconds]'
          required: false
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricSuggestedTagsAndAggregationsResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - metrics_read
      summary: List active tags and aggregations
      tags:
        - Metrics
  '/api/v2/metrics/{metric_name}/all-tags':
    get:
      description: View indexed tag key-value pairs for a given metric name.
      operationId: ListTagsByMetricName
      parameters:
        - $ref: '#/components/parameters/MetricName'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricAllTagsResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - metrics_read
      summary: List tags by metric name
      tags:
        - Metrics
  '/api/v2/metrics/{metric_name}/estimate':
    get:
      description: 'Returns the estimated cardinality for a metric with a given tag, percentile and number of aggregations configuration using Metrics without Limits&trade;.'
      operationId: EstimateMetricsOutputSeries
      parameters:
        - $ref: '#/components/parameters/MetricName'
        - description: Filtered tag keys that the metric is configured to query with.
          example: 'app,host'
          in: query
          name: 'filter[groups]'
          required: false
          schema:
            type: string
        - description: The number of hours of look back (from now) to estimate cardinality with.
          example: 49
          in: query
          name: 'filter[hours_ago]'
          required: false
          schema:
            format: int32
            maximum: 2147483647
            type: integer
        - description: 'The number of aggregations that a `count`, `rate`, or `gauge` metric is configured to use. Max number of aggregation combos is 9.'
          example: 1
          in: query
          name: 'filter[num_aggregations]'
          required: false
          schema:
            format: int32
            maximum: 9
            type: integer
        - description: 'A boolean, for distribution metrics only, to estimate cardinality if the metric includes additional percentile aggregators.'
          example: true
          in: query
          name: 'filter[pct]'
          required: false
          schema:
            type: boolean
        - description: 'A window, in hours, from the look back to estimate cardinality with.'
          example: 6
          in: query
          name: 'filter[timespan_h]'
          required: false
          schema:
            format: int32
            maximum: 2147483647
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricEstimateResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: API error response.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: API error response.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: API error response.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Tag Configuration Cardinality Estimator
      tags:
        - Metrics
      x-dd-ownership:
        notification_configuration:
          manual_escalation_policy: '[Points Aggregation] Primary'
          prod_high_urgency: '@pagerduty-Points-Aggregation @slack-points-aggr-ops'
          prod_low_urgency: '@slack-points-aggr-ops'
          slack_support_channel: '#points-aggregation'
          staging_high_urgency: '@slack-points-aggr-stg-ops'
          staging_low_urgency: '@slack-points-aggr-stg-ops'
        team: points-aggregation
        team_escalation: '[Points Aggregation] Primary'
      x-permission:
        operator: OPEN
        permissions: []
  '/api/v2/metrics/{metric_name}/tags':
    delete:
      description: |-
        Deletes a metric's tag configuration. Can only be used with application
        keys from users with the `Manage Tags for Metrics` permission.
      operationId: DeleteTagConfiguration
      parameters:
        - $ref: '#/components/parameters/MetricName'
      responses:
        '204':
          description: No Content
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: Delete a tag configuration
      tags:
        - Metrics
    get:
      description: Returns the tag configuration for the given metric name.
      operationId: ListTagConfigurationByName
      parameters:
        - $ref: '#/components/parameters/MetricName'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricTagConfigurationResponse'
          description: Success
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - metrics_read
      summary: List tag configuration by name
      tags:
        - Metrics
    patch:
      description: |-
        Update the tag configuration of a metric or percentile aggregations of a distribution metric or custom aggregations
        of a count, rate, or gauge metric. By setting `exclude_tags_mode` to true the behavior is changed
        from an allow-list to a deny-list, and tags in the defined list will not be queryable.
        Can only be used with application keys from users with the `Manage Tags for Metrics` permission. This endpoint requires
        a tag configuration to be created first.
      operationId: UpdateTagConfiguration
      parameters:
        - $ref: '#/components/parameters/MetricName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricTagConfigurationUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricTagConfigurationResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Unprocessable Entity
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: Update a tag configuration
      tags:
        - Metrics
      x-codegen-request-body-name: body
    post:
      description: |-
        Create and define a list of queryable tag keys for an existing count/gauge/rate/distribution metric.
        Optionally, include percentile aggregations on any distribution metric or configure custom aggregations
        on any count, rate, or gauge metric. By setting `exclude_tags_mode` to true the behavior is changed
        from an allow-list to a deny-list, and tags in the defined list will not be queryable.
        Can only be used with application keys of users with the `Manage Tags for Metrics` permission.
      operationId: CreateTagConfiguration
      parameters:
        - $ref: '#/components/parameters/MetricName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricTagConfigurationCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricTagConfigurationResponse'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Conflict
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      summary: Create a tag configuration
      tags:
        - Metrics
      x-codegen-request-body-name: body
  '/api/v2/metrics/{metric_name}/volumes':
    get:
      description: |-
        View distinct metrics volumes for the given metric name.

        Custom metrics generated in-app from other products will return `null` for ingested volumes.
      operationId: ListVolumesByMetricName
      parameters:
        - $ref: '#/components/parameters/MetricName'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricVolumesResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Too Many Requests
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: List distinct metric volumes by metric name
      tags:
        - Metrics
  /api/v2/query/scalar:
    post:
      description: |-
        Query scalar values (as seen on Query Value, Table, and Toplist widgets).
        Multiple data sources are supported with the ability to
        process the data using formulas and functions.
      operationId: QueryScalarData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScalarFormulaQueryRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScalarFormulaQueryResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - timeseries_query
      summary: Query scalar data across multiple products
      tags:
        - Metrics
      x-codegen-request-body-name: body
      x-unstable: |-
        **Note**: This endpoint is GA for Metrics, Real User Monitoring (RUM), and Cloud Cost Management data sources.
        Support for logs is in beta. We are gradually onboarding support for more sources. If you have any
        feedback, contact [Datadog Support](https://docs.datadoghq.com/help/).
  /api/v2/query/timeseries:
    post:
      description: |-
        Query timeseries data across various data sources and
        process the data by applying formulas and functions.
      operationId: QueryTimeseriesData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeseriesFormulaQueryRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeseriesFormulaQueryResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - timeseries_query
      summary: Query timeseries data across multiple products
      tags:
        - Metrics
      x-codegen-request-body-name: body
      x-unstable: |-
        **Note**: This endpoint is GA for Metrics, Real User Monitoring (RUM), and Cloud Cost Management data sources.
        Support for logs is in beta. We are gradually onboarding support for more sources. If you have any
        feedback, contact [Datadog Support](https://docs.datadoghq.com/help/).
  /api/v2/series:
    post:
      description: |-
        The metrics end-point allows you to post time-series data that can be graphed on Datadog’s dashboards.
        The maximum payload size is 500 kilobytes (512000 bytes). Compressed payloads must have a decompressed size of less than 5 megabytes (5242880 bytes).

        If you’re submitting metrics directly to the Datadog API without using DogStatsD, expect:

        - 64 bits for the timestamp
        - 64 bits for the value
        - 20 bytes for the metric names
        - 50 bytes for the timeseries
        - The full payload is approximately 100 bytes.

        Host name is one of the resources in the Resources field.
      operationId: SubmitMetrics
      parameters:
        - description: HTTP header used to compress the media-type.
          in: header
          name: Content-Encoding
          required: false
          schema:
            $ref: '#/components/schemas/MetricContentEncoding'
      requestBody:
        content:
          application/json:
            examples:
              dynamic-points:
                description: Post time-series data that can be graphed on Datadog’s dashboards.
                externalValue: examples/metrics/dynamic-points.json.sh
                summary: Dynamic Points
                x-variables:
                  NOW: $(date +%s)
            schema:
              $ref: '#/components/schemas/MetricPayload'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntakePayloadAccepted'
          description: Payload accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Request timeout
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Payload too large
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
      summary: Submit metrics
      tags:
        - Metrics
      x-codegen-request-body-name: body
