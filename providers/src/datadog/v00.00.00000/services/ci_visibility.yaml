openapi: 3.0.0
servers:
  - url: 'https://api.datadoghq.com'
    description: Datadog API
info:
  contact:
    email: support@datadoghq.com
    name: Datadog Support
    url: 'https://www.datadoghq.com/support/'
  version: '1.0'
  title: Datadog API V2 Collection - ci_visibility
  description: CI_Visibility_Pipelines
security:
  - apiKeyAuth: []
    appKeyAuth: []
tags:
  - description: 'Manage configuration of [APM retention filters](https://app.datadoghq.com/apm/traces/retention-filters) for your organization. You need an API and application key with Admin rights to interact with this endpoint.'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/tracing/trace_pipeline/trace_retention/'
    name: APM Retention Filters
  - description: Search your Audit Logs events over HTTP.
    name: Audit
  - description: |-
      [AuthN Mappings API](https://docs.datadoghq.com/account_management/authn_mapping/?tab=example)
      is used to automatically map group of users to roles in Datadog using attributes
      sent from Identity Providers.
    name: AuthN Mappings
  - description: Search or aggregate your CI Visibility pipeline events and send them to your Datadog site over HTTP.
    name: CI Visibility Pipelines
  - description: Search or aggregate your CI Visibility test events over HTTP.
    name: CI Visibility Tests
  - description: Workload activity security rules for generating events using the Datadog security Agent.
    name: Cloud Workload Security
  - description: Configure your Datadog Cloudflare integration directly through the Datadog API.
    name: Cloudflare Integration
  - description: Configure your Datadog Confluent Cloud integration directly through the Datadog API.
    name: Confluent Cloud
  - description: The Container Images API allows you to query Container Image data for your organization.
    name: Container Images
  - description: The Containers API allows you to query container data for your organization.
    name: Containers
  - description: Send events for DORA Metrics to measure and improve software delivery.
    name: DORA Metrics
  - description: |-
      Interact with your dashboard lists through the API to
      organize, find, and share all of your dashboards with your team and
      organization.
    name: Dashboard Lists
  - description: |-
      **Note**: Downtime V2 is currently in private beta. To request access, contact [Datadog support](https://docs.datadoghq.com/help/).

      [Downtiming](https://docs.datadoghq.com/monitors/notify/downtimes) gives
      you greater control over monitor notifications by allowing you to globally exclude
      scopes from alerting. Downtime settings, which can be scheduled with start and
      end times, prevent all alerting related to specified Datadog tags.
    name: Downtimes
  - description: |-
      The events service allows you to programmatically post events to the event stream
      and fetch events from the event stream. Events are limited to 4000 characters.
      If an event is sent out with a message containing more than 4000 characters, only the
      first 4000 characters are displayed.
    name: Events
  - description: Configure your Datadog Fastly integration directly through the Datadog API.
    name: Fastly Integration
  - description: |-
      Configure your Datadog-Google Cloud Platform (GCP) integration directly
      through the Datadog API. Read more about the [Datadog-Google Cloud Platform integration](https://docs.datadoghq.com/integrations/google_cloud_platform).
    externalDocs:
      url: 'https://docs.datadoghq.com/integrations/google_cloud_platform'
    name: GCP Integration
  - description: |-
      The IP allowlist API is used to manage the IP addresses that
      can access the Datadog API and web UI. It does not block
      access to intake APIs or public dashboards.

      This is an enterprise-only feature. Request access by
      contacting Datadog support.
    name: IP Allowlist
  - description: 'Create, update, delete, and retrieve services which can be associated with incidents.'
    name: Incident Services
  - description: 'The Incident Teams endpoints are deprecated. See the [Teams API endpoints](https://docs.datadoghq.com/api/latest/teams/) to create, update, delete, and retrieve teams which can be associated with incidents.'
    name: Incident Teams
  - description: Manage incident response.
    name: Incidents
  - description: |-
      Manage your Datadog API and application keys. You need an API key and
      an application key for a user with the required permissions to interact
      with these endpoints. The full list of API and application keys can be
      seen on your [Datadog API page](https://app.datadoghq.com/account/settings#api).
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/account_management/api-app-keys/'
    name: Key Management
  - description: Search your logs and send them to your Datadog platform over HTTP.
    name: Logs
  - description: |-
      Archives forward all the logs ingested to a cloud storage system.

      See the [Archives Page](https://app.datadoghq.com/logs/pipelines/archives)
      for a list of the archives currently configured in web UI.
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/logs/archives/'
    name: Logs Archives
  - description: 'Manage configuration of [log-based metrics](https://app.datadoghq.com/logs/pipelines/generate-metrics) for your organization.'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/logs/logs_to_metrics/'
    name: Logs Metrics
  - description: |-
      The metrics endpoint allows you to:

      - Post metrics data so it can be graphed on Datadogâ€™s dashboards
      - Query metrics from any time period (timeseries and scalar)
      - Modify tag configurations for metrics
      - View tags and volumes for metrics

      **Note**: A graph can only contain a set number of points
      and as the timeframe over which a metric is viewed increases,
      aggregation between points occurs to stay below that set number.

      The Post, Patch, and Delete `manage_tags` API methods can only be performed by
      a user who has the `Manage Tags for Metrics` permission.
    name: Metrics
  - description: |-
      [Monitors](https://docs.datadoghq.com/monitors) allow you to watch a metric or check that you care about and
      notifies your team when a defined threshold has exceeded.

      For more information, see [Creating Monitors](https://docs.datadoghq.com/monitors/create/types/) and
      [Tag Policies](https://docs.datadoghq.com/monitors/settings/).
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/monitors/create/types/'
    name: Monitors
  - description: Configure your Datadog Okta integration directly through the Datadog API.
    name: Okta Integration
  - description: |-
      Configure your [Datadog Opsgenie integration](https://docs.datadoghq.com/integrations/opsgenie/)
      directly through the Datadog API.
    externalDocs:
      url: 'https://docs.datadoghq.com/api/latest/opsgenie-integration'
    name: Opsgenie Integration
  - description: 'Create, edit, and manage your organizations. Read more about [multi-org accounts](https://docs.datadoghq.com/account_management/multi_organization).'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/account_management/multi_organization'
    name: Organizations
  - description: |-
      The powerpack endpoints allow you to:

      - Get a powerpack
      - Create a powerpack
      - Delete a powerpack
      - Get a list of all powerpacks

      The Patch and Delete API methods can only be performed on a powerpack by
      a user who has the powerpack create permission for that specific powerpack.
    name: Powerpack
  - description: The processes API allows you to query processes data for your organization.
    name: Processes
  - description: Search or aggregate your RUM events over HTTP.
    name: RUM
  - description: |-
      A restriction policy defines the access control rules for a resource, mapping a set of relations
      (such as editor and viewer) to a set of allowed principals (such as roles, teams, or users).
      The restriction policy determines who is authorized to perform what actions on the resource.
    name: Restriction Policies
  - description: |-
      The Roles API is used to create and manage Datadog roles, what
      [global permissions](https://docs.datadoghq.com/account_management/rbac/)
      they grant, and which users belong to them.

      Permissions related to specific account assets can be granted to roles
      in the Datadog application without using this API. For example, granting
      read access on a specific log index to a role can be done in Datadog from the
      [Pipelines page](https://app.datadoghq.com/logs/pipelines).
    name: Roles
  - description: |-
      Detection rules for generating signals and listing of generated
      signals.
    name: Security Monitoring
  - description: 'Create, update, delete, and retrieve sensitive data scanner groups and rules.'
    name: Sensitive Data Scanner
  - description: 'Create, edit, and disable service accounts.'
    name: Service Accounts
  - description: 'API to create, update, retrieve and delete service definitions.'
    externalDocs:
      url: 'https://docs.datadoghq.com/tracing/service_catalog/'
    name: Service Definition
  - description: |-
      API to create, update scorecard rules and outcomes.

      This feature is currently in BETA. If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).
    name: Service Scorecards
  - description: Search and aggregate your spans from your Datadog platform over HTTP.
    name: Spans
  - description: 'Manage configuration of [span-based metrics](https://app.datadoghq.com/apm/traces/generate-metrics) for your organization.'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/tracing/metrics/metrics_namespace/'
    name: Spans Metrics
  - description: |-
      Datadog Synthetics uses simulated user requests and browser rendering to help you ensure uptime,
      identify regional issues, and track your application performance. Datadog Synthetics tests come in
      two different flavors, [API tests](https://docs.datadoghq.com/synthetics/api_tests/)
      and [browser tests](https://docs.datadoghq.com/synthetics/browser_tests). You can use Datadogâ€™s API to
      manage both test types programmatically.

      For more information about Synthetics, see the [Synthetics overview](https://docs.datadoghq.com/synthetics/).
    name: Synthetics
  - description: View and manage teams within Datadog.
    name: Teams
  - description: |-
      The usage metering API allows you to get hourly, daily, and
      monthly usage across multiple facets of Datadog.
      This API is available to all Pro and Enterprise customers.
      Usage is only accessible for [parent-level organizations](https://docs.datadoghq.com/account_management/multi_organization/).

      **Note**: Usage data is delayed by up to 72 hours from when it was incurred.
      It is retained for 15 months.

      You can retrieve up to 24 hours of hourly usage data for multiple organizations,
      and up to two months of hourly usage data for a single organization in one request.
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/account_management/billing/usage_details/'
    name: Usage Metering
  - description: 'Create, edit, and disable users.'
    externalDocs:
      url: 'https://docs.datadoghq.com/account_management/users'
    name: Users
components:
  schemas:
    CIAppCreatePipelineEventRequest:
      description: Request object.
      properties:
        data:
          $ref: '#/components/schemas/CIAppCreatePipelineEventRequestData'
      type: object
    HTTPCIAppErrors:
      description: Errors occurred.
      properties:
        errors:
          description: Structured errors.
          items:
            $ref: '#/components/schemas/HTTPCIAppError'
          type: array
      type: object
    CIAppCreatePipelineEventRequestData:
      description: Data of the pipeline event to create.
      properties:
        attributes:
          $ref: '#/components/schemas/CIAppCreatePipelineEventRequestAttributes'
        type:
          $ref: '#/components/schemas/CIAppCreatePipelineEventRequestDataType'
      type: object
    HTTPCIAppError:
      description: List of errors.
      properties:
        detail:
          description: Error message.
          example: Malformed payload
          type: string
        status:
          description: Error code.
          example: '400'
          type: string
        title:
          description: Error title.
          example: Bad Request
          type: string
      type: object
    APIKeysSort:
      default: name
      description: Sorting options
      enum:
        - created_at
        - '-created_at'
        - last4
        - '-last4'
        - modified_at
        - '-modified_at'
        - name
        - '-name'
      type: string
      x-enum-varnames:
        - CREATED_AT_ASCENDING
        - CREATED_AT_DESCENDING
        - LAST4_ASCENDING
        - LAST4_DESCENDING
        - MODIFIED_AT_ASCENDING
        - MODIFIED_AT_DESCENDING
        - NAME_ASCENDING
        - NAME_DESCENDING
    ApplicationKeysSort:
      default: name
      description: Sorting options
      enum:
        - created_at
        - '-created_at'
        - last4
        - '-last4'
        - name
        - '-name'
      type: string
      x-enum-varnames:
        - CREATED_AT_ASCENDING
        - CREATED_AT_DESCENDING
        - LAST4_ASCENDING
        - LAST4_DESCENDING
        - NAME_ASCENDING
        - NAME_DESCENDING
    IncidentAttachmentAttachmentType:
      description: The type of the incident attachment attributes.
      enum:
        - link
        - postmortem
      example: link
      type: string
      x-enum-varnames:
        - LINK
        - POSTMORTEM
    IncidentAttachmentRelatedObject:
      description: The object related to an incident attachment.
      enum:
        - users
      type: string
      x-enum-varnames:
        - USERS
    IncidentRelatedObject:
      description: Object related to an incident.
      enum:
        - users
        - attachments
      type: string
      x-enum-varnames:
        - USERS
        - ATTACHMENTS
    IncidentSearchSortOrder:
      description: The ways searched incidents can be sorted.
      enum:
        - created
        - '-created'
      type: string
      x-enum-varnames:
        - CREATED_ASCENDING
        - CREATED_DESCENDING
    ServiceDefinitionSchemaVersions:
      description: Schema versions
      enum:
        - v1
        - v2
        - v2.1
        - v2.2
      type: string
      x-enum-varnames:
        - V1
        - V2
        - V2_1
        - V2_2
    CIAppCreatePipelineEventRequestAttributes:
      description: Attributes of the pipeline event to create.
      properties:
        env:
          description: The Datadog environment.
          type: string
        resource:
          $ref: '#/components/schemas/CIAppCreatePipelineEventRequestAttributesResource'
        service:
          description: 'If the CI provider is SaaS, use this to differentiate between instances.'
          type: string
      required:
        - resource
      type: object
    CIAppCreatePipelineEventRequestDataType:
      default: cipipeline_resource_request
      description: Type of the event.
      enum:
        - cipipeline_resource_request
      example: cipipeline_resource_request
      type: string
      x-enum-varnames:
        - CIPIPELINE_RESOURCE_REQUEST
    CIAppCreatePipelineEventRequestAttributesResource:
      description: Details of the CI pipeline event.
      example: Details TBD
      oneOf:
        - $ref: '#/components/schemas/CIAppPipelineEventPipeline'
        - $ref: '#/components/schemas/CIAppPipelineEventStage'
        - $ref: '#/components/schemas/CIAppPipelineEventJob'
        - $ref: '#/components/schemas/CIAppPipelineEventStep'
    CIAppPipelineEventPipeline:
      description: 'Details of the top level pipeline, build, or workflow of your CI.'
      properties:
        end:
          description: Time when the pipeline run finished. It cannot be older than 18 hours in the past from the current time. The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        error:
          $ref: '#/components/schemas/CIAppCIError'
        git:
          $ref: '#/components/schemas/CIAppGitInfo'
        is_manual:
          description: Whether or not the pipeline was triggered manually by the user.
          example: false
          nullable: true
          type: boolean
        is_resumed:
          description: Whether or not the pipeline was resumed after being blocked.
          example: false
          nullable: true
          type: boolean
        level:
          $ref: '#/components/schemas/CIAppPipelineEventPipelineLevel'
        metrics:
          $ref: '#/components/schemas/CIAppPipelineEventMetrics'
        name:
          description: Name of the pipeline. All pipeline runs for the builds should have the same name.
          example: Deploy to AWS
          type: string
        node:
          $ref: '#/components/schemas/CIAppHostInfo'
        parameters:
          $ref: '#/components/schemas/CIAppPipelineEventParameters'
        parent_pipeline:
          $ref: '#/components/schemas/CIAppPipelineEventParentPipeline'
        partial_retry:
          description: |-
            Whether or not the pipeline was a partial retry of a previous attempt. A partial retry is one
            which only runs a subset of the original jobs.
          example: false
          type: boolean
        pipeline_id:
          description: |-
            Any ID used in the provider to identify the pipeline run even if it is not unique across retries.
            If the `pipeline_id` is unique, then both `unique_id` and `pipeline_id` can be set to the same value.
          example: '#023'
          type: string
        previous_attempt:
          $ref: '#/components/schemas/CIAppPipelineEventPreviousPipeline'
        queue_time:
          description: 'The queue time in milliseconds, if applicable.'
          example: 1004
          format: int64
          minimum: 0
          nullable: true
          type: integer
        start:
          description: Time when the pipeline run started (it should not include any queue time). The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/CIAppPipelineEventPipelineStatus'
        tags:
          $ref: '#/components/schemas/CIAppPipelineEventTags'
        unique_id:
          description: |-
            UUID of the pipeline run. The ID has to be unique across retries and pipelines,
            including partial retries.
          example: 3eacb6f3-ff04-4e10-8a9c-46e6d054024a
          type: string
        url:
          description: The URL to look at the pipeline in the CI provider UI.
          example: 'https://my-ci-provider.example/pipelines/my-pipeline/run/1'
          type: string
      required:
        - level
        - unique_id
        - name
        - url
        - start
        - end
        - status
        - partial_retry
      type: object
    CIAppPipelineEventStage:
      description: Details of a CI stage.
      properties:
        dependencies:
          description: A list of stage IDs that this stage depends on.
          example:
            - f7e6a006-a029-46c3-b0cc-742c9d7d363b
            - c8a69849-3c3b-4721-8b33-3e8ec2df1ebe
          items:
            description: A list of stage IDs.
            type: string
          nullable: true
          type: array
        end:
          description: Time when the stage run finished. The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        error:
          $ref: '#/components/schemas/CIAppCIError'
        git:
          $ref: '#/components/schemas/CIAppGitInfo'
        id:
          description: UUID for the stage. It has to be unique at least in the pipeline scope.
          example: 562bdbbb-7cab-48c8-851c-b24ca14628bf
          type: string
        level:
          $ref: '#/components/schemas/CIAppPipelineEventStageLevel'
        metrics:
          $ref: '#/components/schemas/CIAppPipelineEventMetrics'
        name:
          description: The name for the stage.
          example: build
          type: string
        node:
          $ref: '#/components/schemas/CIAppHostInfo'
        parameters:
          $ref: '#/components/schemas/CIAppPipelineEventParameters'
        pipeline_name:
          description: The parent pipeline name.
          example: Build
          type: string
        pipeline_unique_id:
          description: The parent pipeline UUID.
          example: 76b572af-a078-42b2-a08a-cc28f98b944f
          type: string
        queue_time:
          description: 'The queue time in milliseconds, if applicable.'
          example: 1004
          format: int64
          minimum: 0
          nullable: true
          type: integer
        start:
          description: Time when the stage run started (it should not include any queue time). The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/CIAppPipelineEventStageStatus'
        tags:
          $ref: '#/components/schemas/CIAppPipelineEventTags'
      required:
        - level
        - id
        - name
        - pipeline_unique_id
        - pipeline_name
        - start
        - end
        - status
      type: object
    CIAppPipelineEventJob:
      description: Details of a CI job.
      properties:
        dependencies:
          description: A list of job IDs that this job depends on.
          example:
            - f7e6a006-a029-46c3-b0cc-742c9d7d363b
            - c8a69849-3c3b-4721-8b33-3e8ec2df1ebe
          items:
            description: A list of job IDs.
            type: string
          nullable: true
          type: array
        end:
          description: Time when the job run finished. The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        error:
          $ref: '#/components/schemas/CIAppCIError'
        git:
          $ref: '#/components/schemas/CIAppGitInfo'
        id:
          description: The UUID for the job. It has to be unique within each pipeline execution.
          example: c865bad4-de82-44b8-ade7-2c987528eb54
          type: string
        level:
          $ref: '#/components/schemas/CIAppPipelineEventJobLevel'
        metrics:
          $ref: '#/components/schemas/CIAppPipelineEventMetrics'
        name:
          description: The name for the job.
          example: test
          type: string
        node:
          $ref: '#/components/schemas/CIAppHostInfo'
        parameters:
          $ref: '#/components/schemas/CIAppPipelineEventParameters'
        pipeline_name:
          description: The parent pipeline name.
          example: Build
          type: string
        pipeline_unique_id:
          description: The parent pipeline UUID.
          example: 76b572af-a078-42b2-a08a-cc28f98b944f
          type: string
        queue_time:
          description: 'The queue time in milliseconds, if applicable.'
          example: 1004
          format: int64
          minimum: 0
          nullable: true
          type: integer
        stage_id:
          description: The parent stage UUID (if applicable).
          nullable: true
          type: string
        stage_name:
          description: The parent stage name (if applicable).
          nullable: true
          type: string
        start:
          description: Time when the job run instance started (it should not include any queue time). The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/CIAppPipelineEventJobStatus'
        tags:
          $ref: '#/components/schemas/CIAppPipelineEventTags'
        url:
          description: The URL to look at the job in the CI provider UI.
          example: 'https://ci-platform.com/job/your-job-name/build/123'
          type: string
      required:
        - level
        - id
        - name
        - pipeline_unique_id
        - pipeline_name
        - start
        - end
        - status
        - url
      type: object
    CIAppPipelineEventStep:
      description: Details of a CI step.
      properties:
        end:
          description: Time when the step run finished. The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        error:
          $ref: '#/components/schemas/CIAppCIError'
        git:
          $ref: '#/components/schemas/CIAppGitInfo'
        id:
          description: UUID for the step. It has to be unique within each pipeline execution.
          example: c2d517a8-4f3a-4b41-b4ae-69df0c864c79
          type: string
        job_id:
          description: The parent job UUID (if applicable).
          nullable: true
          type: string
        job_name:
          description: The parent job name (if applicable).
          nullable: true
          type: string
        level:
          $ref: '#/components/schemas/CIAppPipelineEventStepLevel'
        metrics:
          $ref: '#/components/schemas/CIAppPipelineEventMetrics'
        name:
          description: The name for the step.
          example: test-server
          type: string
        node:
          $ref: '#/components/schemas/CIAppHostInfo'
        parameters:
          $ref: '#/components/schemas/CIAppPipelineEventParameters'
        pipeline_name:
          description: The parent pipeline name.
          example: Build
          type: string
        pipeline_unique_id:
          description: The parent pipeline UUID.
          example: 76b572af-a078-42b2-a08a-cc28f98b944f
          type: string
        stage_id:
          description: The parent stage UUID (if applicable).
          nullable: true
          type: string
        stage_name:
          description: The parent stage name (if applicable).
          nullable: true
          type: string
        start:
          description: Time when the step run started. The time format must be RFC3339.
          example: '2023-05-31T15:30:00Z'
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/CIAppPipelineEventStepStatus'
        tags:
          $ref: '#/components/schemas/CIAppPipelineEventTags'
        url:
          description: The URL to look at the step in the CI provider UI.
          nullable: true
          type: string
      required:
        - level
        - id
        - name
        - pipeline_unique_id
        - pipeline_name
        - start
        - end
        - status
      type: object
    CIAppCIError:
      description: Contains information of the CI error.
      nullable: true
      properties:
        domain:
          $ref: '#/components/schemas/CIAppCIErrorDomain'
        message:
          description: Error message.
          maxLength: 5000
          nullable: true
          type: string
        stack:
          description: The stack trace of the reported errors.
          nullable: true
          type: string
        type:
          description: Short description of the error type.
          maxLength: 100
          nullable: true
          type: string
      type: object
    CIAppGitInfo:
      description: |-
        If pipelines are triggered due to actions to a Git repository, then all payloads must contain this.
        Note that either `tag` or `branch` has to be provided, but not both.
      nullable: true
      properties:
        author_email:
          description: The commit author email.
          example: author@example.com
          format: email
          type: string
        author_name:
          description: The commit author name.
          example: John Doe
          nullable: true
          type: string
        author_time:
          description: The commit author timestamp in RFC3339 format.
          example: '2023-05-31T15:30:00Z'
          nullable: true
          type: string
        branch:
          description: The branch name (if a tag use the tag parameter).
          example: feature-1
          nullable: true
          type: string
        commit_time:
          description: The commit timestamp in RFC3339 format.
          example: '2023-05-31T15:30:00Z'
          nullable: true
          type: string
        committer_email:
          description: The committer email.
          example: committer@example.com
          format: email
          nullable: true
          type: string
        committer_name:
          description: The committer name.
          nullable: true
          type: string
        default_branch:
          description: The Git repository's default branch.
          example: main
          nullable: true
          type: string
        message:
          description: The commit message.
          example: Instrumenting tests with CI Visibility.
          nullable: true
          type: string
        repository_url:
          description: The URL of the repository.
          example: 'https://github.com/username/repository'
          type: string
        sha:
          description: The git commit SHA.
          example: da39a3ee5e6b4b0d3255bfef95601890afd80709
          pattern: '^[a-fA-F0-9]{40}$'
          type: string
        tag:
          description: The tag name (if a branch use the branch parameter).
          example: v1.0.0
          nullable: true
          type: string
      required:
        - repository_url
        - sha
        - author_email
      type: object
    CIAppPipelineEventPipelineLevel:
      default: pipeline
      description: 'Used to distinguish between pipelines, stages, jobs, and steps.'
      enum:
        - pipeline
      example: pipeline
      type: string
      x-enum-varnames:
        - PIPELINE
    CIAppPipelineEventMetrics:
      description: 'A list of user-defined metrics. The metrics must follow the `key:value` pattern and the value must be numeric.'
      example:
        - 'bundle_size:370'
        - 'build_time:50021'
      items:
        description: 'Metrics in the form of `key:value`. The value needs to be numeric.'
        type: string
      nullable: true
      type: array
    CIAppHostInfo:
      description: 'Contains information of the host running the pipeline, stage, job, or step.'
      nullable: true
      properties:
        hostname:
          description: FQDN of the host.
          example: www.example.com
          type: string
        labels:
          description: A list of labels used to select or identify the node.
          example:
            - ubuntu-18.04
            - n2.large
          items:
            type: string
          type: array
        name:
          description: Name for the host.
          type: string
        workspace:
          description: The path where the code is checked out.
          example: /home/workspace/code/my-repo
          type: string
      type: object
    CIAppPipelineEventParameters:
      additionalProperties:
        type: string
      description: A map of key-value parameters or environment variables that were defined for the pipeline.
      example:
        LOG_LEVEL: debug
      nullable: true
      type: object
    CIAppPipelineEventParentPipeline:
      description: 'If the pipeline is triggered as child of another pipeline, this should contain the details of the parent pipeline.'
      nullable: true
      properties:
        id:
          description: UUID of a pipeline.
          example: 93bfeb70-af47-424d-908a-948d3f08e37f
          type: string
        url:
          description: The URL to look at the pipeline in the CI provider UI.
          example: 'https://ci-platform.com/pipelines/123456789'
          type: string
      required:
        - id
      type: object
    CIAppPipelineEventPreviousPipeline:
      description: 'If the pipeline is a retry, this should contain the details of the previous attempt.'
      nullable: true
      properties:
        id:
          description: UUID of a pipeline.
          example: 93bfeb70-af47-424d-908a-948d3f08e37f
          type: string
        url:
          description: The URL to look at the pipeline in the CI provider UI.
          example: 'https://ci-platform.com/pipelines/123456789'
          type: string
      required:
        - id
      type: object
    CIAppPipelineEventPipelineStatus:
      description: The final status of the pipeline.
      enum:
        - success
        - error
        - canceled
        - skipped
        - blocked
      example: success
      type: string
      x-enum-varnames:
        - SUCCESS
        - ERROR
        - CANCELED
        - SKIPPED
        - BLOCKED
    CIAppPipelineEventTags:
      description: 'A list of user-defined tags. The tags must follow the `key:value` pattern.'
      example:
        - 'team:backend'
        - 'type:deployment'
      items:
        description: 'Tags in the form of `key:value`.'
        type: string
      nullable: true
      type: array
    CIAppPipelineEventStageLevel:
      default: stage
      description: 'Used to distinguish between pipelines, stages, jobs and steps.'
      enum:
        - stage
      example: stage
      type: string
      x-enum-varnames:
        - STAGE
    CIAppPipelineEventStageStatus:
      description: The final status of the stage.
      enum:
        - success
        - error
        - canceled
        - skipped
      example: success
      type: string
      x-enum-varnames:
        - SUCCESS
        - ERROR
        - CANCELED
        - SKIPPED
    CIAppPipelineEventJobLevel:
      default: job
      description: 'Used to distinguish between pipelines, stages, jobs, and steps.'
      enum:
        - job
      example: job
      type: string
      x-enum-varnames:
        - JOB
    CIAppPipelineEventJobStatus:
      description: The final status of the job.
      enum:
        - success
        - error
        - canceled
        - skipped
      example: success
      type: string
      x-enum-varnames:
        - SUCCESS
        - ERROR
        - CANCELED
        - SKIPPED
    CIAppPipelineEventStepLevel:
      default: step
      description: 'Used to distinguish between pipelines, stages, jobs and steps.'
      enum:
        - step
      example: step
      type: string
      x-enum-varnames:
        - STEP
    CIAppPipelineEventStepStatus:
      description: The final status of the step.
      enum:
        - success
        - error
      example: success
      type: string
      x-enum-varnames:
        - SUCCESS
        - ERROR
    CIAppCIErrorDomain:
      description: Error category used to differentiate between issues related to the developer or provider environments.
      enum:
        - provider
        - user
        - unknown
      type: string
      x-enum-varnames:
        - PROVIDER
        - USER
        - UNKNOWN
    CIAppPipelinesAggregateRequest:
      description: The object sent with the request to retrieve aggregation buckets of pipeline events from your organization.
      properties:
        compute:
          description: The list of metrics or timeseries to compute for the retrieved buckets.
          items:
            $ref: '#/components/schemas/CIAppCompute'
          type: array
        filter:
          $ref: '#/components/schemas/CIAppPipelinesQueryFilter'
        group_by:
          description: The rules for the group-by.
          items:
            $ref: '#/components/schemas/CIAppPipelinesGroupBy'
          type: array
        options:
          $ref: '#/components/schemas/CIAppQueryOptions'
      type: object
    CIAppPipelinesAnalyticsAggregateResponse:
      description: The response object for the pipeline events aggregate API endpoint.
      properties:
        data:
          $ref: '#/components/schemas/CIAppPipelinesAggregationBucketsResponse'
        links:
          $ref: '#/components/schemas/CIAppResponseLinks'
        meta:
          $ref: '#/components/schemas/CIAppResponseMetadata'
      type: object
    CIAppCompute:
      description: A compute rule to compute metrics or timeseries.
      properties:
        aggregation:
          $ref: '#/components/schemas/CIAppAggregationFunction'
        interval:
          description: |-
            The time buckets' size (only used for type=timeseries)
            Defaults to a resolution of 150 points.
          example: 5m
          type: string
        metric:
          description: The metric to use.
          example: '@duration'
          type: string
        type:
          $ref: '#/components/schemas/CIAppComputeType'
      required:
        - aggregation
      type: object
    CIAppPipelinesQueryFilter:
      description: The search and filter query settings.
      properties:
        from:
          default: now-15m
          description: 'The minimum time for the requested events; supports date, math, and regular timestamps (in milliseconds).'
          example: now-15m
          type: string
        query:
          default: '*'
          description: The search query following the CI Visibility Explorer search syntax.
          example: '@ci.provider.name:github AND @ci.status:error'
          type: string
        to:
          default: now
          description: 'The maximum time for the requested events, supports date, math, and regular timestamps (in milliseconds).'
          example: now
          type: string
      type: object
    CIAppPipelinesGroupBy:
      description: A group-by rule.
      properties:
        facet:
          description: The name of the facet to use (required).
          example: '@ci.status'
          type: string
        histogram:
          $ref: '#/components/schemas/CIAppGroupByHistogram'
        limit:
          default: 10
          description: The maximum buckets to return for this group-by.
          format: int64
          type: integer
        missing:
          $ref: '#/components/schemas/CIAppGroupByMissing'
        sort:
          $ref: '#/components/schemas/CIAppAggregateSort'
        total:
          $ref: '#/components/schemas/CIAppGroupByTotal'
      required:
        - facet
      type: object
    CIAppQueryOptions:
      description: |-
        Global query options that are used during the query.
        Only supply timezone or time offset, not both. Otherwise, the query fails.
      properties:
        time_offset:
          description: The time offset (in seconds) to apply to the query.
          format: int64
          type: integer
        timezone:
          default: UTC
          description: 'The timezone can be specified as GMT, UTC, an offset from UTC (like UTC+1), or as a Timezone Database identifier (like America/New_York).'
          example: GMT
          type: string
      type: object
    CIAppPipelinesAggregationBucketsResponse:
      description: The query results.
      properties:
        buckets:
          description: 'The list of matching buckets, one item per bucket.'
          items:
            $ref: '#/components/schemas/CIAppPipelinesBucketResponse'
          type: array
      type: object
    CIAppResponseLinks:
      description: Links attributes.
      properties:
        next:
          description: |-
            Link for the next set of results. The request can also be made using the
            POST endpoint.
          example: 'https://app.datadoghq.com/api/v2/ci/tests/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ=='
          type: string
      type: object
    CIAppResponseMetadata:
      description: The metadata associated with a request.
      properties:
        elapsed:
          description: The time elapsed in milliseconds.
          example: 132
          format: int64
          type: integer
        request_id:
          description: The identifier of the request.
          example: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
          type: string
        status:
          $ref: '#/components/schemas/CIAppResponseStatus'
        warnings:
          description: |-
            A list of warnings (non-fatal errors) encountered. Partial results may return if
            warnings are present in the response.
          items:
            $ref: '#/components/schemas/CIAppWarning'
          type: array
      type: object
    APIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          items:
            description: A list of items.
            example: Bad Request
            type: string
          type: array
      required:
        - errors
      type: object
    CIAppAggregationFunction:
      description: An aggregation function.
      enum:
        - count
        - cardinality
        - pc75
        - pc90
        - pc95
        - pc98
        - pc99
        - sum
        - min
        - max
        - avg
        - median
        - latest
        - earliest
        - most_frequent
        - delta
      example: pc90
      type: string
      x-enum-varnames:
        - COUNT
        - CARDINALITY
        - PERCENTILE_75
        - PERCENTILE_90
        - PERCENTILE_95
        - PERCENTILE_98
        - PERCENTILE_99
        - SUM
        - MIN
        - MAX
        - AVG
        - MEDIAN
        - LATEST
        - EARLIEST
        - MOST_FREQUENT
        - DELTA
    CIAppComputeType:
      default: total
      description: The type of compute.
      enum:
        - timeseries
        - total
      type: string
      x-enum-varnames:
        - TIMESERIES
        - TOTAL
    CIAppGroupByHistogram:
      description: |-
        Used to perform a histogram computation (only for measure facets).
        At most, 100 buckets are allowed, the number of buckets is `(max - min)/interval`.
      properties:
        interval:
          description: The bin size of the histogram buckets.
          example: 10
          format: double
          type: number
        max:
          description: |-
            The maximum value for the measure used in the histogram
            (values greater than this one are filtered out).
          example: 100
          format: double
          type: number
        min:
          description: |-
            The minimum value for the measure used in the histogram
            (values smaller than this one are filtered out).
          example: 50
          format: double
          type: number
      required:
        - interval
        - min
        - max
      type: object
    CIAppGroupByMissing:
      description: The value to use for logs that don't have the facet used to group-by.
      oneOf:
        - $ref: '#/components/schemas/CIAppGroupByMissingString'
        - $ref: '#/components/schemas/CIAppGroupByMissingNumber'
    CIAppAggregateSort:
      description: A sort rule.
      example:
        aggregation: count
        order: asc
      properties:
        aggregation:
          $ref: '#/components/schemas/CIAppAggregationFunction'
        metric:
          description: The metric to sort by (only used for `type=measure`).
          example: '@duration'
          type: string
        order:
          $ref: '#/components/schemas/CIAppSortOrder'
        type:
          $ref: '#/components/schemas/CIAppAggregateSortType'
      type: object
    CIAppGroupByTotal:
      default: false
      description: A resulting object to put the given computes in over all the matching records.
      oneOf:
        - $ref: '#/components/schemas/CIAppGroupByTotalBoolean'
        - $ref: '#/components/schemas/CIAppGroupByTotalString'
        - $ref: '#/components/schemas/CIAppGroupByTotalNumber'
    CIAppPipelinesBucketResponse:
      description: Bucket values.
      properties:
        by:
          additionalProperties:
            description: The values for each group-by.
          description: The key-value pairs for each group-by.
          example:
            '@ci.provider.name': gitlab
            '@ci.status': success
          type: object
        computes:
          $ref: '#/components/schemas/CIAppComputes'
      type: object
    CIAppResponseStatus:
      description: The status of the response.
      enum:
        - done
        - timeout
      example: done
      type: string
      x-enum-varnames:
        - DONE
        - TIMEOUT
    CIAppWarning:
      description: A warning message indicating something that went wrong with the query.
      properties:
        code:
          description: A unique code for this type of warning.
          example: unknown_index
          type: string
        detail:
          description: A detailed explanation of this specific warning.
          example: 'indexes: foo, bar'
          type: string
        title:
          description: A short human-readable summary of the warning.
          example: 'One or several indexes are missing or invalid, results hold data from the other indexes'
          type: string
      type: object
    CIAppGroupByMissingString:
      description: The missing value to use if there is a string valued facet.
      type: string
    CIAppGroupByMissingNumber:
      description: The missing value to use if there is a number valued facet.
      format: double
      type: number
    CIAppSortOrder:
      description: 'The order to use, ascending or descending.'
      enum:
        - asc
        - desc
      example: asc
      type: string
      x-enum-varnames:
        - ASCENDING
        - DESCENDING
    CIAppAggregateSortType:
      default: alphabetical
      description: The type of sorting algorithm.
      enum:
        - alphabetical
        - measure
      type: string
      x-enum-varnames:
        - ALPHABETICAL
        - MEASURE
    CIAppGroupByTotalBoolean:
      description: 'If set to true, creates an additional bucket labeled "$facet_total".'
      type: boolean
    CIAppGroupByTotalString:
      description: A string to use as the key value for the total bucket.
      type: string
    CIAppGroupByTotalNumber:
      description: A number to use as the key value for the total bucket.
      format: double
      type: number
    CIAppComputes:
      additionalProperties:
        $ref: '#/components/schemas/CIAppAggregateBucketValue'
      description: 'A map of the metric name to value for regular compute, or a list of values for a timeseries.'
      type: object
    CIAppAggregateBucketValue:
      description: 'A bucket value, can either be a timeseries or a single value.'
      oneOf:
        - $ref: '#/components/schemas/CIAppAggregateBucketValueSingleString'
        - $ref: '#/components/schemas/CIAppAggregateBucketValueSingleNumber'
        - $ref: '#/components/schemas/CIAppAggregateBucketValueTimeseries'
    CIAppAggregateBucketValueSingleString:
      description: A single string value.
      type: string
    CIAppAggregateBucketValueSingleNumber:
      description: A single number value.
      format: double
      type: number
    CIAppAggregateBucketValueTimeseries:
      description: A timeseries array.
      items:
        $ref: '#/components/schemas/CIAppAggregateBucketValueTimeseriesPoint'
      type: array
      x-generate-alias-as-model: true
    CIAppAggregateBucketValueTimeseriesPoint:
      description: A timeseries point.
      properties:
        time:
          description: The time value for this point.
          example: '2020-06-08T11:55:00.123Z'
          format: date-time
          type: string
        value:
          description: The value for this point.
          example: 19
          format: double
          type: number
      type: object
    CIAppSort:
      description: Sort parameters when querying events.
      enum:
        - timestamp
        - '-timestamp'
      type: string
      x-enum-varnames:
        - TIMESTAMP_ASCENDING
        - TIMESTAMP_DESCENDING
    CIAppPipelineEventsResponse:
      description: Response object with all pipeline events matching the request and pagination information.
      properties:
        data:
          description: Array of events matching the request.
          items:
            $ref: '#/components/schemas/CIAppPipelineEvent'
          type: array
        links:
          $ref: '#/components/schemas/CIAppResponseLinks'
        meta:
          $ref: '#/components/schemas/CIAppResponseMetadataWithPagination'
      type: object
    CIAppPipelineEvent:
      description: Object description of a pipeline event after being processed and stored by Datadog.
      properties:
        attributes:
          $ref: '#/components/schemas/CIAppPipelineEventAttributes'
        id:
          description: Unique ID of the event.
          example: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
          type: string
        type:
          $ref: '#/components/schemas/CIAppPipelineEventTypeName'
      type: object
    CIAppResponseMetadataWithPagination:
      description: The metadata associated with a request.
      properties:
        elapsed:
          description: The time elapsed in milliseconds.
          example: 132
          format: int64
          type: integer
        page:
          $ref: '#/components/schemas/CIAppResponsePage'
        request_id:
          description: The identifier of the request.
          example: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
          type: string
        status:
          $ref: '#/components/schemas/CIAppResponseStatus'
        warnings:
          description: |-
            A list of warnings (non-fatal errors) encountered. Partial results may return if
            warnings are present in the response.
          items:
            $ref: '#/components/schemas/CIAppWarning'
          type: array
      type: object
    CIAppPipelineEventAttributes:
      description: JSON object containing all event attributes and their associated values.
      properties:
        attributes:
          additionalProperties: {}
          description: JSON object of attributes from CI Visibility pipeline events.
          example:
            customAttribute: 123
            duration: 2345
          type: object
        ci_level:
          $ref: '#/components/schemas/CIAppPipelineLevel'
        tags:
          $ref: '#/components/schemas/TagsEventAttribute'
      type: object
    CIAppPipelineEventTypeName:
      description: Type of the event.
      enum:
        - cipipeline
      example: cipipeline
      type: string
      x-enum-varnames:
        - CIPIPELINE
    CIAppResponsePage:
      description: Paging attributes.
      properties:
        after:
          description: 'The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.'
          example: eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
      type: object
    CIAppPipelineLevel:
      description: Pipeline execution level.
      enum:
        - pipeline
        - stage
        - job
        - step
        - custom
      example: pipeline
      type: string
      x-enum-varnames:
        - PIPELINE
        - STAGE
        - JOB
        - STEP
        - CUSTOM
    TagsEventAttribute:
      description: Array of tags associated with your event.
      example:
        - 'team:A'
      items:
        description: Tag associated with your event.
        type: string
      type: array
    CIAppPipelineEventsRequest:
      description: The request for a pipelines search.
      properties:
        filter:
          $ref: '#/components/schemas/CIAppPipelinesQueryFilter'
        options:
          $ref: '#/components/schemas/CIAppQueryOptions'
        page:
          $ref: '#/components/schemas/CIAppQueryPageOptions'
        sort:
          $ref: '#/components/schemas/CIAppSort'
      type: object
    CIAppQueryPageOptions:
      description: Paging attributes for listing events.
      properties:
        cursor:
          description: List following results with a cursor provided in the previous query.
          example: eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
        limit:
          default: 10
          description: Maximum number of events in the response.
          example: 25
          format: int32
          maximum: 1000
          type: integer
      type: object
    CIAppTestsAggregateRequest:
      description: The object sent with the request to retrieve aggregation buckets of test events from your organization.
      properties:
        compute:
          description: The list of metrics or timeseries to compute for the retrieved buckets.
          items:
            $ref: '#/components/schemas/CIAppCompute'
          type: array
        filter:
          $ref: '#/components/schemas/CIAppTestsQueryFilter'
        group_by:
          description: The rules for the group-by.
          items:
            $ref: '#/components/schemas/CIAppTestsGroupBy'
          type: array
        options:
          $ref: '#/components/schemas/CIAppQueryOptions'
      type: object
    CIAppTestsAnalyticsAggregateResponse:
      description: The response object for the test events aggregate API endpoint.
      properties:
        data:
          $ref: '#/components/schemas/CIAppTestsAggregationBucketsResponse'
        links:
          $ref: '#/components/schemas/CIAppResponseLinks'
        meta:
          $ref: '#/components/schemas/CIAppResponseMetadataWithPagination'
      type: object
    CIAppTestsQueryFilter:
      description: The search and filter query settings.
      properties:
        from:
          default: now-15m
          description: 'The minimum time for the requested events; supports date, math, and regular timestamps (in milliseconds).'
          example: now-15m
          type: string
        query:
          default: '*'
          description: The search query following the CI Visibility Explorer search syntax.
          example: '@test.service:web-ui-tests AND @test.status:fail'
          type: string
        to:
          default: now
          description: 'The maximum time for the requested events, supports date, math, and regular timestamps (in milliseconds).'
          example: now
          type: string
      type: object
    CIAppTestsGroupBy:
      description: A group-by rule.
      properties:
        facet:
          description: The name of the facet to use (required).
          example: '@test.service'
          type: string
        histogram:
          $ref: '#/components/schemas/CIAppGroupByHistogram'
        limit:
          default: 10
          description: The maximum buckets to return for this group-by.
          format: int64
          type: integer
        missing:
          $ref: '#/components/schemas/CIAppGroupByMissing'
        sort:
          $ref: '#/components/schemas/CIAppAggregateSort'
        total:
          $ref: '#/components/schemas/CIAppGroupByTotal'
      required:
        - facet
      type: object
    CIAppTestsAggregationBucketsResponse:
      description: The query results.
      properties:
        buckets:
          description: 'The list of matching buckets, one item per bucket.'
          items:
            $ref: '#/components/schemas/CIAppTestsBucketResponse'
          type: array
      type: object
    CIAppTestsBucketResponse:
      description: Bucket values.
      properties:
        by:
          additionalProperties:
            description: The values for each group-by.
          description: The key-value pairs for each group-by.
          example:
            '@test.service': web-ui-tests
            '@test.status': skip
          type: object
        computes:
          $ref: '#/components/schemas/CIAppComputes'
      type: object
    CIAppTestEventsResponse:
      description: Response object with all test events matching the request and pagination information.
      properties:
        data:
          description: Array of events matching the request.
          items:
            $ref: '#/components/schemas/CIAppTestEvent'
          type: array
        links:
          $ref: '#/components/schemas/CIAppResponseLinks'
        meta:
          $ref: '#/components/schemas/CIAppResponseMetadataWithPagination'
      type: object
    CIAppTestEvent:
      description: Object description of test event after being processed and stored by Datadog.
      properties:
        attributes:
          $ref: '#/components/schemas/CIAppEventAttributes'
        id:
          description: Unique ID of the event.
          example: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
          type: string
        type:
          $ref: '#/components/schemas/CIAppTestEventTypeName'
      type: object
    CIAppEventAttributes:
      description: JSON object containing all event attributes and their associated values.
      properties:
        attributes:
          additionalProperties: {}
          description: JSON object of attributes from CI Visibility test events.
          example:
            customAttribute: 123
            duration: 2345
          type: object
        tags:
          $ref: '#/components/schemas/TagsEventAttribute'
        test_level:
          $ref: '#/components/schemas/CIAppTestLevel'
      type: object
    CIAppTestEventTypeName:
      description: Type of the event.
      enum:
        - citest
      example: citest
      type: string
      x-enum-varnames:
        - CITEST
    CIAppTestLevel:
      description: Test run level.
      enum:
        - session
        - module
        - suite
        - test
      example: test
      type: string
      x-enum-varnames:
        - SESSION
        - MODULE
        - SUITE
        - TEST
    CIAppTestEventsRequest:
      description: The request for a tests search.
      properties:
        filter:
          $ref: '#/components/schemas/CIAppTestsQueryFilter'
        options:
          $ref: '#/components/schemas/CIAppQueryOptions'
        page:
          $ref: '#/components/schemas/CIAppQueryPageOptions'
        sort:
          $ref: '#/components/schemas/CIAppSort'
      type: object
  parameters:
    APIKeyCategoryParameter:
      description: Filter API keys by category.
      in: query
      name: 'filter[category]'
      required: false
      schema:
        type: string
    APIKeyFilterCreatedAtEndParameter:
      description: Only include API keys created on or before the specified date.
      in: query
      name: 'filter[created_at][end]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterCreatedAtStartParameter:
      description: Only include API keys created on or after the specified date.
      in: query
      name: 'filter[created_at][start]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterModifiedAtEndParameter:
      description: Only include API keys modified on or before the specified date.
      in: query
      name: 'filter[modified_at][end]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterModifiedAtStartParameter:
      description: Only include API keys modified on or after the specified date.
      in: query
      name: 'filter[modified_at][start]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterParameter:
      description: Filter API keys by the specified string.
      in: query
      name: filter
      required: false
      schema:
        type: string
    APIKeyId:
      description: The ID of the API key.
      in: path
      name: api_key_id
      required: true
      schema:
        type: string
    APIKeyIncludeParameter:
      description: Comma separated list of resource paths for related resources to include in the response. Supported resource paths are `created_by` and `modified_by`.
      in: query
      name: include
      required: false
      schema:
        example: 'created_by,modified_by'
        type: string
    APIKeyReadConfigReadEnabledParameter:
      description: Filter API keys by remote config read enabled status.
      in: query
      name: 'filter[remote_config_read_enabled]'
      required: false
      schema:
        type: boolean
    APIKeysSortParameter:
      description: |-
        API key attribute used to sort results. Sort order is ascending
        by default. In order to specify a descending sort, prefix the
        attribute with a minus sign.
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/APIKeysSort'
    ApplicationKeyFilterCreatedAtEndParameter:
      description: Only include application keys created on or before the specified date.
      in: query
      name: 'filter[created_at][end]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    ApplicationKeyFilterCreatedAtStartParameter:
      description: Only include application keys created on or after the specified date.
      in: query
      name: 'filter[created_at][start]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    ApplicationKeyFilterParameter:
      description: Filter application keys by the specified string.
      in: query
      name: filter
      required: false
      schema:
        type: string
    ApplicationKeyID:
      description: The ID of the application key.
      in: path
      name: app_key_id
      required: true
      schema:
        type: string
    ApplicationKeyIncludeParameter:
      description: Resource path for related resources to include in the response. Only `owned_by` is supported.
      in: query
      name: include
      required: false
      schema:
        example: owned_by
        type: string
    ApplicationKeysSortParameter:
      description: |-
        Application key attribute used to sort results. Sort order is ascending
        by default. In order to specify a descending sort, prefix the
        attribute with a minus sign.
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/ApplicationKeysSort'
    ArchiveID:
      description: The ID of the archive.
      in: path
      name: archive_id
      required: true
      schema:
        type: string
    AuthNMappingID:
      description: The UUID of the AuthN Mapping.
      in: path
      name: authn_mapping_id
      required: true
      schema:
        type: string
    CloudWorkloadSecurityAgentRuleID:
      description: The ID of the Agent rule.
      example: 3b5-v82-ns6
      in: path
      name: agent_rule_id
      required: true
      schema:
        type: string
    ConfluentAccountID:
      description: Confluent Account id.
      in: path
      name: account_id
      required: true
      schema:
        type: string
    ConfluentResourceID:
      description: Confluent Account Resource ID.
      in: path
      name: resource_id
      required: true
      schema:
        type: string
    FastlyAccountID:
      description: Fastly Account id.
      in: path
      name: account_id
      required: true
      schema:
        type: string
    FastlyServiceID:
      description: Fastly Service ID.
      in: path
      name: service_id
      required: true
      schema:
        type: string
    GCPSTSServiceAccountID:
      description: Your GCP STS enabled service account's unique ID.
      in: path
      name: account_id
      required: true
      schema:
        type: string
    IncidentAttachmentFilterQueryParameter:
      description: Specifies which types of attachments are included in the response.
      explode: false
      in: query
      name: 'filter[attachment_type]'
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentAttachmentAttachmentType'
        type: array
    IncidentAttachmentIncludeQueryParameter:
      description: Specifies which types of related objects are included in the response.
      explode: false
      in: query
      name: include
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentAttachmentRelatedObject'
        type: array
    IncidentIDPathParameter:
      description: The UUID of the incident.
      in: path
      name: incident_id
      required: true
      schema:
        type: string
    IncidentIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      explode: false
      in: query
      name: include
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentRelatedObject'
        type: array
    IncidentIntegrationMetadataIDPathParameter:
      description: The UUID of the incident integration metadata.
      in: path
      name: integration_metadata_id
      required: true
      schema:
        type: string
    IncidentSearchIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentSearchQueryQueryParameter:
      description: |-
        Specifies which incidents should be returned. The query can contain any number of incident facets
        joined by `ANDs`, along with multiple values for each of those facets joined by `OR`s. For
        example: `state:active AND severity:(SEV-2 OR SEV-1)`.
      explode: false
      in: query
      name: query
      required: true
      schema:
        type: string
    IncidentSearchSortQueryParameter:
      description: Specifies the order of returned incidents.
      explode: false
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/IncidentSearchSortOrder'
    IncidentServiceIDPathParameter:
      description: The ID of the incident service.
      in: path
      name: service_id
      required: true
      schema:
        type: string
    IncidentServiceIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentServiceSearchQueryParameter:
      description: A search query that filters services by name.
      in: query
      name: filter
      required: false
      schema:
        example: ExampleServiceName
        type: string
    IncidentTeamIDPathParameter:
      description: The ID of the incident team.
      in: path
      name: team_id
      required: true
      schema:
        type: string
    IncidentTeamIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentTeamSearchQueryParameter:
      description: A search query that filters teams by name.
      in: query
      name: filter
      required: false
      schema:
        example: ExampleTeamName
        type: string
    IncidentTodoIDPathParameter:
      description: The UUID of the incident todo.
      in: path
      name: todo_id
      required: true
      schema:
        type: string
    MetricID:
      description: The name of the log-based metric.
      in: path
      name: metric_id
      required: true
      schema:
        type: string
    MetricName:
      description: The name of the metric.
      example: dist.http.endpoint.request
      in: path
      name: metric_name
      required: true
      schema:
        type: string
    OpsgenieServiceIDPathParameter:
      description: The UUID of the service.
      in: path
      name: integration_service_id
      required: true
      schema:
        type: string
    PageNumber:
      description: Specific page number to return.
      in: query
      name: 'page[number]'
      required: false
      schema:
        default: 0
        example: 0
        format: int64
        type: integer
    PageOffset:
      description: Specific offset to use as the beginning of the returned page.
      in: query
      name: 'page[offset]'
      required: false
      schema:
        default: 0
        example: 0
        format: int64
        type: integer
    PageSize:
      description: Size for a given page. The maximum allowed value is 100.
      in: query
      name: 'page[size]'
      required: false
      schema:
        default: 10
        example: 10
        format: int64
        type: integer
    ResourceID:
      description: 'Identifier, formatted as `type:id`. Supported types: `connection`, `dashboard`, `notebook`, `security-rule`, `slo`.'
      example: 'dashboard:abc-def-ghi'
      in: path
      name: resource_id
      required: true
      schema:
        type: string
    RetentionFilterIdParam:
      description: The ID of the retention filter.
      in: path
      name: filter_id
      required: true
      schema:
        type: string
    RoleID:
      description: The unique identifier of the role.
      in: path
      name: role_id
      required: true
      schema:
        type: string
    RuleId:
      description: The ID of the rule/scorecard.
      in: path
      name: rule_id
      required: true
      schema:
        type: string
    SchemaVersion:
      description: The schema version desired in the response.
      in: query
      name: schema_version
      required: false
      schema:
        $ref: '#/components/schemas/ServiceDefinitionSchemaVersions'
    SecurityFilterID:
      description: The ID of the security filter.
      in: path
      name: security_filter_id
      required: true
      schema:
        type: string
    SecurityMonitoringRuleID:
      description: The ID of the rule.
      in: path
      name: rule_id
      required: true
      schema:
        type: string
    SensitiveDataScannerGroupID:
      description: The ID of a group of rules.
      in: path
      name: group_id
      required: true
      schema:
        type: string
    SensitiveDataScannerRuleID:
      description: The ID of the rule.
      in: path
      name: rule_id
      required: true
      schema:
        type: string
    ServiceAccountID:
      description: The ID of the service account.
      in: path
      name: service_account_id
      required: true
      schema:
        example: 00000000-0000-1234-0000-000000000000
        type: string
    ServiceName:
      description: The name of the service.
      in: path
      name: service_name
      required: true
      schema:
        example: my-service
        type: string
    SignalID:
      description: The ID of the signal.
      in: path
      name: signal_id
      required: true
      schema:
        type: string
    SpansMetricIDParameter:
      description: The name of the span-based metric.
      in: path
      name: metric_id
      required: true
      schema:
        type: string
    UserID:
      description: The ID of the user.
      in: path
      name: user_id
      required: true
      schema:
        example: 00000000-0000-9999-0000-000000000000
        type: string
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    NotAuthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Authorized
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Too many requests
  securitySchemes:
    AuthZ:
      description: This API uses OAuth 2 with the implicit grant flow.
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/v1/authorize
          scopes:
            apm_service_catalog_read: View service catalog and service definitions.
            apm_service_catalog_write: 'Add, modify, and delete service catalog definitions when those definitions are maintained by Datadog.'
            ci_visibility_pipelines_write: Create CI Visibility pipeline spans using the API.
            ci_visibility_read: View CI Visibility.
            create_webhooks: Create webhooks integrations.
            dashboards_public_share: Generate public and authenticated links to share dashboards or embeddable graphs externally.
            dashboards_read: View dashboards.
            dashboards_write: Create and change dashboards.
            events_read: Read Events data.
            incident_notification_settings_write: Configure Incidents Notification settings.
            incident_read: View incidents in Datadog.
            incident_settings_write: Configure Incident Settings.
            incident_write: 'Create, view, and manage incidents in Datadog.'
            metrics_read: View custom metrics.
            monitors_downtime: Set downtimes to suppress alerts from any monitor in an organization. Mute and unmute hosts. The ability to write monitors is not required to set downtimes.
            monitors_read: View monitors.
            monitors_write: Edit and delete individual monitors.
            security_monitoring_filters_read: Read Security Filters.
            security_monitoring_filters_write: 'Create, edit, and delete Security Filters.'
            security_monitoring_findings_read: View CSPM Findings.
            security_monitoring_rules_read: Read Detection Rules.
            security_monitoring_rules_write: Create and edit Detection Rules.
            security_monitoring_signals_read: View Security Signals.
            security_monitoring_suppressions_read: Read Rule Suppressions.
            security_monitoring_suppressions_write: Write Rule Suppressions.
            slos_corrections: 'Apply, edit, and delete SLO status corrections. A user with this permission can make status corrections, even if they do not have permission to edit those SLOs.'
            slos_read: View SLOs and status corrections.
            slos_write: 'Create, edit, and delete SLOs.'
            synthetics_global_variable_read: 'View, search, and use Synthetics global variables.'
            synthetics_global_variable_write: 'Create, edit, and delete global variables for Synthetics.'
            synthetics_private_location_read: 'View, search, and use Synthetics private locations.'
            synthetics_private_location_write: Create and delete private locations in addition to having access to the associated installation guidelines.
            synthetics_read: List and view configured Synthetic tests and test results.
            synthetics_write: 'Create, edit, and delete Synthetic tests.'
            teams_manage: 'Manage Teams. Create, delete, rename, and edit metadata of all Teams. To control Team membership across all Teams, use the User Access Manage permission.'
            teams_read: 'Read Teams data. A User with this permission can view Team names, metadata, and which Users are on each Team.'
            timeseries_query: Query Timeseries data.
            usage_read: View your organization's usage and usage attribution.
            user_access_invite: Invite other users to your organization.
            user_access_manage: 'Disable users, manage user roles, manage SAML-to-role mappings, and configure logs restriction queries.'
            user_access_read: View users and their roles and settings.
          tokenUrl: /oauth2/v1/token
      type: oauth2
    apiKeyAuth:
      description: Your Datadog API Key.
      in: header
      name: DD-API-KEY
      type: apiKey
      x-env-name: DD_API_KEY
    appKeyAuth:
      description: Your Datadog APP Key.
      in: header
      name: DD-APPLICATION-KEY
      type: apiKey
      x-env-name: DD_APP_KEY
  callbacks: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  x-stackQL-resources:
    app_pipeline_events:
      id: datadog.ci_visibility.app_pipeline_events
      name: app_pipeline_events
      title: App Pipeline Events
      methods:
        create_ci_app_pipeline_event:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1pipeline/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        aggregate_ci_app_pipeline_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1pipelines~1analytics~1aggregate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_ci_app_pipeline_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1pipelines~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _list_ci_app_pipeline_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1pipelines~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_ci_app_pipeline_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1pipelines~1events~1search/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/app_pipeline_events/methods/list_ci_app_pipeline_events'
        insert:
          - $ref: '#/components/x-stackQL-resources/app_pipeline_events/methods/create_ci_app_pipeline_event'
        update: []
        delete: []
    app_test_events:
      id: datadog.ci_visibility.app_test_events
      name: app_test_events
      title: App Test Events
      methods:
        aggregate_ci_app_test_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1tests~1analytics~1aggregate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_ci_app_test_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1tests~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _list_ci_app_test_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1tests~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_ci_app_test_events:
          operation:
            $ref: '#/paths/~1api~1v2~1ci~1tests~1events~1search/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/app_test_events/methods/list_ci_app_test_events'
        insert: []
        update: []
        delete: []
paths:
  /api/v2/ci/pipeline:
    post:
      description: |-
        Send your pipeline event to your Datadog platform over HTTP. For details about how pipeline executions are modeled and what execution types we support, see [Pipeline Data Model And Execution Types](https://docs.datadoghq.com/continuous_integration/guides/pipeline_data_model/).

        Pipeline events can be submitted with a timestamp that is up to 18 hours in the past.
      operationId: CreateCIAppPipelineEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIAppCreatePipelineEventRequest'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                type: object
          description: Request accepted for processing
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Forbidden
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Request Timeout
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Payload Too Large
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Too Many Requests
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Internal Server Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPCIAppErrors'
          description: Service Unavailable
      security:
        - apiKeyAuth: []
      summary: Send pipeline event
      tags:
        - CI Visibility Pipelines
      x-codegen-request-body-name: body
      x-unstable: |-
        **Note:** This endpoint is in public beta.
        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).
  /api/v2/ci/pipelines/analytics/aggregate:
    post:
      description: Use this API endpoint to aggregate CI Visibility pipeline events into buckets of computed metrics and timeseries.
      operationId: AggregateCIAppPipelineEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIAppPipelinesAggregateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppPipelinesAnalyticsAggregateResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
      summary: Aggregate pipelines events
      tags:
        - CI Visibility Pipelines
      x-codegen-request-body-name: body
  /api/v2/ci/pipelines/events:
    get:
      description: |-
        List endpoint returns CI Visibility pipeline events that match a [search query](https://docs.datadoghq.com/continuous_integration/explorer/search_syntax/).
        [Results are paginated similarly to logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).

        Use this endpoint to see your latest pipeline events.
      operationId: ListCIAppPipelineEvents
      parameters:
        - description: Search query following log syntax.
          example: '@ci.provider.name:github @ci.pipeline.name:Pull Request Labeler'
          in: query
          name: 'filter[query]'
          required: false
          schema:
            type: string
        - description: Minimum timestamp for requested events.
          example: '2019-01-02T09:42:36.320Z'
          in: query
          name: 'filter[from]'
          required: false
          schema:
            format: date-time
            type: string
        - description: Maximum timestamp for requested events.
          example: '2019-01-03T09:42:36.320Z'
          in: query
          name: 'filter[to]'
          required: false
          schema:
            format: date-time
            type: string
        - description: Order of events in results.
          in: query
          name: sort
          required: false
          schema:
            $ref: '#/components/schemas/CIAppSort'
        - description: List following results with a cursor provided in the previous query.
          example: eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          in: query
          name: 'page[cursor]'
          required: false
          schema:
            type: string
        - description: Maximum number of events in the response.
          example: 25
          in: query
          name: 'page[limit]'
          required: false
          schema:
            default: 10
            format: int32
            maximum: 1000
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppPipelineEventsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
      summary: Get a list of pipelines events
      tags:
        - CI Visibility Pipelines
      x-pagination:
        cursorParam: 'page[cursor]'
        cursorPath: meta.page.after
        limitParam: 'page[limit]'
        resultsPath: data
  /api/v2/ci/pipelines/events/search:
    post:
      description: |-
        List endpoint returns CI Visibility pipeline events that match a [search query](https://docs.datadoghq.com/continuous_integration/explorer/search_syntax/).
        [Results are paginated similarly to logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).

        Use this endpoint to build complex events filtering and search.
      operationId: SearchCIAppPipelineEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIAppPipelineEventsRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppPipelineEventsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
      summary: Search pipelines events
      tags:
        - CI Visibility Pipelines
      x-codegen-request-body-name: body
      x-pagination:
        cursorParam: body.page.cursor
        cursorPath: meta.page.after
        limitParam: body.page.limit
        resultsPath: data
  /api/v2/ci/tests/analytics/aggregate:
    post:
      description: The API endpoint to aggregate CI Visibility test events into buckets of computed metrics and timeseries.
      operationId: AggregateCIAppTestEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIAppTestsAggregateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppTestsAnalyticsAggregateResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
      summary: Aggregate tests events
      tags:
        - CI Visibility Tests
      x-codegen-request-body-name: body
  /api/v2/ci/tests/events:
    get:
      description: |-
        List endpoint returns CI Visibility test events that match a [log search query](https://docs.datadoghq.com/logs/explorer/search_syntax/).
        [Results are paginated similarly to logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).

        Use this endpoint to see your latest test events.
      operationId: ListCIAppTestEvents
      parameters:
        - description: Search query following log syntax.
          example: '@test.name:test_foo @test.suite:github.com/DataDog/dd-go/model'
          in: query
          name: 'filter[query]'
          required: false
          schema:
            type: string
        - description: Minimum timestamp for requested events.
          example: '2019-01-02T09:42:36.320Z'
          in: query
          name: 'filter[from]'
          required: false
          schema:
            format: date-time
            type: string
        - description: Maximum timestamp for requested events.
          example: '2019-01-03T09:42:36.320Z'
          in: query
          name: 'filter[to]'
          required: false
          schema:
            format: date-time
            type: string
        - description: Order of events in results.
          in: query
          name: sort
          required: false
          schema:
            $ref: '#/components/schemas/CIAppSort'
        - description: List following results with a cursor provided in the previous query.
          example: eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          in: query
          name: 'page[cursor]'
          required: false
          schema:
            type: string
        - description: Maximum number of events in the response.
          example: 25
          in: query
          name: 'page[limit]'
          required: false
          schema:
            default: 10
            format: int32
            maximum: 1000
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppTestEventsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
      summary: Get a list of tests events
      tags:
        - CI Visibility Tests
      x-pagination:
        cursorParam: 'page[cursor]'
        cursorPath: meta.page.after
        limitParam: 'page[limit]'
        resultsPath: data
  /api/v2/ci/tests/events/search:
    post:
      description: |-
        List endpoint returns CI Visibility test events that match a [log search query](https://docs.datadoghq.com/logs/explorer/search_syntax/).
        [Results are paginated similarly to logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).

        Use this endpoint to build complex events filtering and search.
      operationId: SearchCIAppTestEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIAppTestEventsRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIAppTestEventsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - ci_visibility_read
      summary: Search tests events
      tags:
        - CI Visibility Tests
      x-codegen-request-body-name: body
      x-pagination:
        cursorParam: body.page.cursor
        cursorPath: meta.page.after
        limitParam: body.page.limit
        resultsPath: data
