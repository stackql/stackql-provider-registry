openapi: 3.0.0
info:
  title: digital_experience API
  description: datadog digital_experience API
  version: '1.0'
paths:
  /api/v2/rum/analytics/aggregate:
    post:
      description: >-
        The API endpoint to aggregate RUM events into buckets of computed
        metrics and timeseries.
      operationId: AggregateRUMEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RUMAggregateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RUMAnalyticsAggregateResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Aggregate RUM events
      tags:
        - RUM
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - rum_apps_read
  /api/v2/rum/applications:
    get:
      description: List all the RUM applications in your organization.
      operationId: GetRUMApplications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RUMApplicationsResponse'
          description: OK
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: List all the RUM applications
      tags:
        - RUM
      x-permission:
        operator: OR
        permissions:
          - rum_apps_read
    post:
      description: Create a new RUM application in your organization.
      operationId: CreateRUMApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RUMApplicationCreateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RUMApplicationResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Create a new RUM application
      tags:
        - RUM
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - rum_apps_write
  /api/v2/rum/applications/{app_id}/relationships/retention_filters:
    patch:
      description: >-
        Order RUM retention filters for a RUM application.

        Returns RUM retention filter objects without attributes from the request
        body when the request is successful.
      operationId: OrderRetentionFilters
      parameters:
        - $ref: '#/components/parameters/RumApplicationIDParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RumRetentionFiltersOrderRequest'
        description: New definition of the RUM retention filter.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumRetentionFiltersOrderResponse'
          description: Ordered
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Order RUM retention filters
      tags:
        - Rum Retention Filters
      x-codegen-request-body-name: body
  /api/v2/rum/applications/{app_id}/retention_filters:
    get:
      description: Get the list of RUM retention filters for a RUM application.
      operationId: ListRetentionFilters
      parameters:
        - $ref: '#/components/parameters/RumApplicationIDParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumRetentionFiltersResponse'
          description: OK
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get all RUM retention filters
      tags:
        - Rum Retention Filters
    post:
      description: >-
        Create a RUM retention filter for a RUM application.

        Returns RUM retention filter objects from the request body when the
        request is successful.
      operationId: CreateRetentionFilter
      parameters:
        - $ref: '#/components/parameters/RumApplicationIDParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RumRetentionFilterCreateRequest'
        description: The definition of the new RUM retention filter.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumRetentionFilterResponse'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Create a RUM retention filter
      tags:
        - Rum Retention Filters
      x-codegen-request-body-name: body
  /api/v2/rum/applications/{app_id}/retention_filters/{rf_id}:
    delete:
      description: Delete a RUM retention filter for a RUM application.
      operationId: DeleteRetentionFilter
      parameters:
        - $ref: '#/components/parameters/RumApplicationIDParameter'
        - $ref: '#/components/parameters/RumRetentionFilterIDParameter'
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Delete a RUM retention filter
      tags:
        - Rum Retention Filters
    get:
      description: Get a RUM retention filter for a RUM application.
      operationId: GetRetentionFilter
      parameters:
        - $ref: '#/components/parameters/RumApplicationIDParameter'
        - $ref: '#/components/parameters/RumRetentionFilterIDParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumRetentionFilterResponse'
          description: OK
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get a RUM retention filter
      tags:
        - Rum Retention Filters
    patch:
      description: >-
        Update a RUM retention filter for a RUM application.

        Returns RUM retention filter objects from the request body when the
        request is successful.
      operationId: UpdateRetentionFilter
      parameters:
        - $ref: '#/components/parameters/RumApplicationIDParameter'
        - $ref: '#/components/parameters/RumRetentionFilterIDParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RumRetentionFilterUpdateRequest'
        description: New definition of the RUM retention filter.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumRetentionFilterResponse'
          description: Updated
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Update a RUM retention filter
      tags:
        - Rum Retention Filters
      x-codegen-request-body-name: body
  /api/v2/rum/applications/{id}:
    delete:
      description: Delete an existing RUM application in your organization.
      operationId: DeleteRUMApplication
      parameters:
        - description: RUM application ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Delete a RUM application
      tags:
        - RUM
      x-permission:
        operator: OR
        permissions:
          - rum_apps_write
    get:
      description: Get the RUM application with given ID in your organization.
      operationId: GetRUMApplication
      parameters:
        - description: RUM application ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RUMApplicationResponse'
          description: OK
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get a RUM application
      tags:
        - RUM
      x-permission:
        operator: OR
        permissions:
          - rum_apps_read
    patch:
      description: Update the RUM application with given ID in your organization.
      operationId: UpdateRUMApplication
      parameters:
        - description: RUM application ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RUMApplicationUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RUMApplicationResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Unprocessable Entity.
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Update a RUM application
      tags:
        - RUM
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - rum_apps_write
  /api/v2/rum/config/metrics:
    get:
      description: Get the list of configured rum-based metrics with their definitions.
      operationId: ListRumMetrics
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumMetricsResponse'
          description: OK
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get all rum-based metrics
      tags:
        - Rum Metrics
    post:
      description: >-
        Create a metric based on your organization's RUM data.

        Returns the rum-based metric object from the request body when the
        request is successful.
      operationId: CreateRumMetric
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RumMetricCreateRequest'
        description: The definition of the new rum-based metric.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumMetricResponse'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Create a rum-based metric
      tags:
        - Rum Metrics
      x-codegen-request-body-name: body
  /api/v2/rum/config/metrics/{metric_id}:
    delete:
      description: Delete a specific rum-based metric from your organization.
      operationId: DeleteRumMetric
      parameters:
        - $ref: '#/components/parameters/RumMetricIDParameter'
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Delete a rum-based metric
      tags:
        - Rum Metrics
    get:
      description: Get a specific rum-based metric from your organization.
      operationId: GetRumMetric
      parameters:
        - $ref: '#/components/parameters/RumMetricIDParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumMetricResponse'
          description: OK
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get a rum-based metric
      tags:
        - Rum Metrics
    patch:
      description: >-
        Update a specific rum-based metric from your organization.

        Returns the rum-based metric object from the request body when the
        request is successful.
      operationId: UpdateRumMetric
      parameters:
        - $ref: '#/components/parameters/RumMetricIDParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RumMetricUpdateRequest'
        description: New definition of the rum-based metric.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumMetricResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Update a rum-based metric
      tags:
        - Rum Metrics
      x-codegen-request-body-name: body
  /api/v2/rum/events:
    get:
      description: >-
        List endpoint returns events that match a RUM search query.

        [Results are paginated][1].


        Use this endpoint to see your latest RUM events.


        [1]:
        https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination
      operationId: ListRUMEvents
      parameters:
        - description: Search query following RUM syntax.
          example: '@type:session @application_id:xxxx'
          in: query
          name: filter[query]
          required: false
          schema:
            type: string
        - description: Minimum timestamp for requested events.
          example: '2019-01-02T09:42:36.320Z'
          in: query
          name: filter[from]
          required: false
          schema:
            format: date-time
            type: string
        - description: Maximum timestamp for requested events.
          example: '2019-01-03T09:42:36.320Z'
          in: query
          name: filter[to]
          required: false
          schema:
            format: date-time
            type: string
        - description: Order of events in results.
          in: query
          name: sort
          required: false
          schema:
            $ref: '#/components/schemas/RUMSort'
        - description: List following results with a cursor provided in the previous query.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          in: query
          name: page[cursor]
          required: false
          schema:
            type: string
        - description: Maximum number of events in the response.
          example: 25
          in: query
          name: page[limit]
          required: false
          schema:
            default: 10
            format: int32
            maximum: 1000
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RUMEventsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get a list of RUM events
      tags:
        - RUM
      x-pagination:
        cursorParam: page[cursor]
        cursorPath: meta.page.after
        limitParam: page[limit]
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - rum_apps_read
  /api/v2/rum/events/search:
    post:
      description: >-
        List endpoint returns RUM events that match a RUM search query.

        [Results are paginated][1].


        Use this endpoint to build complex RUM events filtering and search.


        [1]:
        https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination
      operationId: SearchRUMEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RUMSearchEventsRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RUMEventsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Search RUM events
      tags:
        - RUM
      x-codegen-request-body-name: body
      x-pagination:
        cursorParam: body.page.cursor
        cursorPath: meta.page.after
        limitParam: body.page.limit
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - rum_apps_read
components:
  schemas:
    RUMAggregateRequest:
      description: >-
        The object sent with the request to retrieve aggregation buckets of RUM
        events from your organization.
      properties:
        compute:
          description: >-
            The list of metrics or timeseries to compute for the retrieved
            buckets.
          items:
            $ref: '#/components/schemas/RUMCompute'
          type: array
        filter:
          $ref: '#/components/schemas/RUMQueryFilter'
        group_by:
          description: The rules for the group by.
          items:
            $ref: '#/components/schemas/RUMGroupBy'
          type: array
        options:
          $ref: '#/components/schemas/RUMQueryOptions'
        page:
          $ref: '#/components/schemas/RUMQueryPageOptions'
      type: object
    RUMAnalyticsAggregateResponse:
      description: The response object for the RUM events aggregate API endpoint.
      properties:
        data:
          $ref: '#/components/schemas/RUMAggregationBucketsResponse'
        links:
          $ref: '#/components/schemas/RUMResponseLinks'
        meta:
          $ref: '#/components/schemas/RUMResponseMetadata'
      type: object
    RUMApplicationsResponse:
      description: RUM applications response.
      properties:
        data:
          description: RUM applications array response.
          items:
            $ref: '#/components/schemas/RUMApplicationList'
          type: array
      type: object
    RUMApplicationCreateRequest:
      description: RUM application creation request attributes.
      properties:
        data:
          $ref: '#/components/schemas/RUMApplicationCreate'
      required:
        - data
      type: object
    RUMApplicationResponse:
      description: RUM application response.
      properties:
        data:
          $ref: '#/components/schemas/RUMApplication'
      type: object
    RumRetentionFiltersOrderRequest:
      description: >-
        The list of RUM retention filter IDs along with their corresponding type
        to reorder.

        All retention filter IDs should be included in the list created for a
        RUM application.
      properties:
        data:
          description: A list of RUM retention filter IDs along with type.
          items:
            $ref: '#/components/schemas/RumRetentionFiltersOrderData'
          type: array
      type: object
    RumRetentionFiltersOrderResponse:
      description: The list of RUM retention filter IDs along with type.
      properties:
        data:
          description: A list of RUM retention filter IDs along with type.
          items:
            $ref: '#/components/schemas/RumRetentionFiltersOrderData'
          type: array
      type: object
    RumRetentionFiltersResponse:
      description: All RUM retention filters for a RUM application.
      properties:
        data:
          description: A list of RUM retention filters.
          items:
            $ref: '#/components/schemas/RumRetentionFilterData'
          type: array
      type: object
    RumRetentionFilterCreateRequest:
      description: The RUM retention filter body to create.
      properties:
        data:
          $ref: '#/components/schemas/RumRetentionFilterCreateData'
      required:
        - data
      type: object
    RumRetentionFilterResponse:
      description: The RUM retention filter object.
      properties:
        data:
          $ref: '#/components/schemas/RumRetentionFilterData'
      type: object
    RumRetentionFilterUpdateRequest:
      description: The RUM retention filter body to update.
      properties:
        data:
          $ref: '#/components/schemas/RumRetentionFilterUpdateData'
      required:
        - data
      type: object
    RUMApplicationUpdateRequest:
      description: RUM application update request.
      properties:
        data:
          $ref: '#/components/schemas/RUMApplicationUpdate'
      required:
        - data
      type: object
    APIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          example:
            - Bad Request
          items:
            description: A list of items.
            example: Bad Request
            type: string
          type: array
      required:
        - errors
      type: object
    RumMetricsResponse:
      description: All the available rum-based metric objects.
      properties:
        data:
          description: A list of rum-based metric objects.
          items:
            $ref: '#/components/schemas/RumMetricResponseData'
          type: array
      type: object
    RumMetricCreateRequest:
      description: The new rum-based metric body.
      properties:
        data:
          $ref: '#/components/schemas/RumMetricCreateData'
      required:
        - data
      type: object
    RumMetricResponse:
      description: The rum-based metric object.
      properties:
        data:
          $ref: '#/components/schemas/RumMetricResponseData'
      type: object
    RumMetricUpdateRequest:
      description: The new rum-based metric body.
      properties:
        data:
          $ref: '#/components/schemas/RumMetricUpdateData'
      required:
        - data
      type: object
    RUMSort:
      description: Sort parameters when querying events.
      enum:
        - timestamp
        - '-timestamp'
      type: string
      x-enum-varnames:
        - TIMESTAMP_ASCENDING
        - TIMESTAMP_DESCENDING
    RUMEventsResponse:
      description: >-
        Response object with all events matching the request and pagination
        information.
      properties:
        data:
          description: Array of events matching the request.
          items:
            $ref: '#/components/schemas/RUMEvent'
          type: array
        links:
          $ref: '#/components/schemas/RUMResponseLinks'
        meta:
          $ref: '#/components/schemas/RUMResponseMetadata'
      type: object
    RUMSearchEventsRequest:
      description: The request for a RUM events list.
      properties:
        filter:
          $ref: '#/components/schemas/RUMQueryFilter'
        options:
          $ref: '#/components/schemas/RUMQueryOptions'
        page:
          $ref: '#/components/schemas/RUMQueryPageOptions'
        sort:
          $ref: '#/components/schemas/RUMSort'
      type: object
    RUMCompute:
      description: A compute rule to compute metrics or timeseries.
      properties:
        aggregation:
          $ref: '#/components/schemas/RUMAggregationFunction'
        interval:
          description: |-
            The time buckets' size (only used for type=timeseries)
            Defaults to a resolution of 150 points.
          example: 5m
          type: string
        metric:
          description: The metric to use.
          example: '@duration'
          type: string
        type:
          $ref: '#/components/schemas/RUMComputeType'
      required:
        - aggregation
      type: object
    RUMQueryFilter:
      description: The search and filter query settings.
      properties:
        from:
          default: now-15m
          description: >-
            The minimum time for the requested events; supports date (in [ISO
            8601](https://www.w3.org/TR/NOTE-datetime) format with full date,
            hours, minutes, and the `Z` UTC indicator - seconds and fractional
            seconds are optional), math, and regular timestamps (in
            milliseconds).
          example: now-15m
          type: string
        query:
          default: '*'
          description: The search query following the RUM search syntax.
          example: '@type:session AND @session.type:user'
          type: string
        to:
          default: now
          description: >-
            The maximum time for the requested events; supports date (in [ISO
            8601](https://www.w3.org/TR/NOTE-datetime) format with full date,
            hours, minutes, and the `Z` UTC indicator - seconds and fractional
            seconds are optional), math, and regular timestamps (in
            milliseconds).
          example: now
          type: string
      type: object
    RUMGroupBy:
      description: A group-by rule.
      properties:
        facet:
          description: The name of the facet to use (required).
          example: '@view.time_spent'
          type: string
        histogram:
          $ref: '#/components/schemas/RUMGroupByHistogram'
        limit:
          default: 10
          description: The maximum buckets to return for this group-by.
          format: int64
          type: integer
        missing:
          $ref: '#/components/schemas/RUMGroupByMissing'
        sort:
          $ref: '#/components/schemas/RUMAggregateSort'
        total:
          $ref: '#/components/schemas/RUMGroupByTotal'
      required:
        - facet
      type: object
    RUMQueryOptions:
      description: >-
        Global query options that are used during the query.

        Note: Only supply timezone or time offset, not both. Otherwise, the
        query fails.
      properties:
        time_offset:
          description: The time offset (in seconds) to apply to the query.
          format: int64
          type: integer
        timezone:
          default: UTC
          description: >-
            The timezone can be specified as GMT, UTC, an offset from UTC (like
            UTC+1), or as a Timezone Database identifier (like
            America/New_York).
          example: GMT
          type: string
      type: object
    RUMQueryPageOptions:
      description: Paging attributes for listing events.
      properties:
        cursor:
          description: List following results with a cursor provided in the previous query.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
        limit:
          default: 10
          description: Maximum number of events in the response.
          example: 25
          format: int32
          maximum: 1000
          type: integer
      type: object
    RUMAggregationBucketsResponse:
      description: The query results.
      properties:
        buckets:
          description: The list of matching buckets, one item per bucket.
          items:
            $ref: '#/components/schemas/RUMBucketResponse'
          type: array
      type: object
    RUMResponseLinks:
      description: Links attributes.
      properties:
        next:
          description: >-
            Link for the next set of results. Note that the request can also be
            made using the

            POST endpoint.
          example: >-
            https://app.datadoghq.com/api/v2/rum/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
      type: object
    RUMResponseMetadata:
      description: The metadata associated with a request.
      properties:
        elapsed:
          description: The time elapsed in milliseconds.
          example: 132
          format: int64
          type: integer
        page:
          $ref: '#/components/schemas/RUMResponsePage'
        request_id:
          description: The identifier of the request.
          example: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
          type: string
        status:
          $ref: '#/components/schemas/RUMResponseStatus'
        warnings:
          description: >-
            A list of warnings (non-fatal errors) encountered. Partial results
            may return if

            warnings are present in the response.
          items:
            $ref: '#/components/schemas/RUMWarning'
          type: array
      type: object
    RUMApplicationList:
      description: RUM application list.
      properties:
        attributes:
          $ref: '#/components/schemas/RUMApplicationListAttributes'
        id:
          description: RUM application ID.
          example: abcd1234-0000-0000-abcd-1234abcd5678
          type: string
        type:
          $ref: '#/components/schemas/RUMApplicationListType'
      required:
        - attributes
        - type
      type: object
    RUMApplicationCreate:
      description: RUM application creation.
      properties:
        attributes:
          $ref: '#/components/schemas/RUMApplicationCreateAttributes'
        type:
          $ref: '#/components/schemas/RUMApplicationCreateType'
      required:
        - attributes
        - type
      type: object
    RUMApplication:
      description: RUM application.
      properties:
        attributes:
          $ref: '#/components/schemas/RUMApplicationAttributes'
        id:
          description: RUM application ID.
          example: abcd1234-0000-0000-abcd-1234abcd5678
          type: string
        type:
          $ref: '#/components/schemas/RUMApplicationType'
      required:
        - attributes
        - id
        - type
      type: object
    RumRetentionFiltersOrderData:
      description: The RUM retention filter data for ordering.
      properties:
        id:
          $ref: '#/components/schemas/RumRetentionFilterID'
        type:
          $ref: '#/components/schemas/RumRetentionFilterType'
      required:
        - id
        - type
      type: object
    RumRetentionFilterData:
      description: The RUM retention filter.
      properties:
        attributes:
          $ref: '#/components/schemas/RumRetentionFilterAttributes'
        id:
          $ref: '#/components/schemas/RumRetentionFilterID'
        type:
          $ref: '#/components/schemas/RumRetentionFilterType'
      type: object
    RumRetentionFilterCreateData:
      description: The new RUM retention filter properties to create.
      properties:
        attributes:
          $ref: '#/components/schemas/RumRetentionFilterCreateAttributes'
        type:
          $ref: '#/components/schemas/RumRetentionFilterType'
      required:
        - type
        - attributes
      type: object
    RumRetentionFilterUpdateData:
      description: The new RUM retention filter properties to update.
      properties:
        attributes:
          $ref: '#/components/schemas/RumRetentionFilterUpdateAttributes'
        id:
          $ref: '#/components/schemas/RumRetentionFilterID'
        type:
          $ref: '#/components/schemas/RumRetentionFilterType'
      required:
        - id
        - type
        - attributes
      type: object
    RUMApplicationUpdate:
      description: RUM application update.
      properties:
        attributes:
          $ref: '#/components/schemas/RUMApplicationUpdateAttributes'
        id:
          description: RUM application ID.
          example: abcd1234-0000-0000-abcd-1234abcd5678
          type: string
        type:
          $ref: '#/components/schemas/RUMApplicationUpdateType'
      required:
        - id
        - type
      type: object
    RumMetricResponseData:
      description: The rum-based metric properties.
      properties:
        attributes:
          $ref: '#/components/schemas/RumMetricResponseAttributes'
        id:
          $ref: '#/components/schemas/RumMetricID'
        type:
          $ref: '#/components/schemas/RumMetricType'
      type: object
    RumMetricCreateData:
      description: The new rum-based metric properties.
      properties:
        attributes:
          $ref: '#/components/schemas/RumMetricCreateAttributes'
        id:
          $ref: '#/components/schemas/RumMetricID'
        type:
          $ref: '#/components/schemas/RumMetricType'
      required:
        - id
        - type
        - attributes
      type: object
    RumMetricUpdateData:
      description: The new rum-based metric properties.
      properties:
        attributes:
          $ref: '#/components/schemas/RumMetricUpdateAttributes'
        id:
          $ref: '#/components/schemas/RumMetricID'
        type:
          $ref: '#/components/schemas/RumMetricType'
      required:
        - type
        - attributes
      type: object
    RUMEvent:
      description: >-
        Object description of a RUM event after being processed and stored by
        Datadog.
      properties:
        attributes:
          $ref: '#/components/schemas/RUMEventAttributes'
        id:
          description: Unique ID of the event.
          example: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
          type: string
        type:
          $ref: '#/components/schemas/RUMEventType'
      type: object
    RUMAggregationFunction:
      description: An aggregation function.
      enum:
        - count
        - cardinality
        - pc75
        - pc90
        - pc95
        - pc98
        - pc99
        - sum
        - min
        - max
        - avg
        - median
      example: pc90
      type: string
      x-enum-varnames:
        - COUNT
        - CARDINALITY
        - PERCENTILE_75
        - PERCENTILE_90
        - PERCENTILE_95
        - PERCENTILE_98
        - PERCENTILE_99
        - SUM
        - MIN
        - MAX
        - AVG
        - MEDIAN
    RUMComputeType:
      default: total
      description: The type of compute.
      enum:
        - timeseries
        - total
      type: string
      x-enum-varnames:
        - TIMESERIES
        - TOTAL
    RUMGroupByHistogram:
      description: >-
        Used to perform a histogram computation (only for measure facets).

        Note: At most 100 buckets are allowed, the number of buckets is (max -
        min)/interval.
      properties:
        interval:
          description: The bin size of the histogram buckets.
          example: 10
          format: double
          type: number
        max:
          description: |-
            The maximum value for the measure used in the histogram
            (values greater than this one are filtered out).
          example: 100
          format: double
          type: number
        min:
          description: |-
            The minimum value for the measure used in the histogram
            (values smaller than this one are filtered out).
          example: 50
          format: double
          type: number
      required:
        - interval
        - min
        - max
      type: object
    RUMGroupByMissing:
      description: The value to use for logs that don't have the facet used to group by.
      oneOf:
        - $ref: '#/components/schemas/RUMGroupByMissingString'
        - $ref: '#/components/schemas/RUMGroupByMissingNumber'
    RUMAggregateSort:
      description: A sort rule.
      example:
        aggregation: count
        order: asc
      properties:
        aggregation:
          $ref: '#/components/schemas/RUMAggregationFunction'
        metric:
          description: The metric to sort by (only used for `type=measure`).
          example: '@duration'
          type: string
        order:
          $ref: '#/components/schemas/RUMSortOrder'
        type:
          $ref: '#/components/schemas/RUMAggregateSortType'
      type: object
    RUMGroupByTotal:
      default: false
      description: >-
        A resulting object to put the given computes in over all the matching
        records.
      oneOf:
        - $ref: '#/components/schemas/RUMGroupByTotalBoolean'
        - $ref: '#/components/schemas/RUMGroupByTotalString'
        - $ref: '#/components/schemas/RUMGroupByTotalNumber'
    RUMBucketResponse:
      description: Bucket values.
      properties:
        by:
          additionalProperties:
            description: The values for each group-by.
            type: string
          description: The key-value pairs for each group-by.
          example:
            '@session.type': user
            '@type': view
          type: object
        computes:
          additionalProperties:
            $ref: '#/components/schemas/RUMAggregateBucketValue'
          description: >-
            A map of the metric name to value for regular compute, or a list of
            values for a timeseries.
          type: object
      type: object
    RUMResponsePage:
      description: Paging attributes.
      properties:
        after:
          description: >-
            The cursor to use to get the next results, if any. To make the next
            request, use the same parameters with the addition of
            `page[cursor]`.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
      type: object
    RUMResponseStatus:
      description: The status of the response.
      enum:
        - done
        - timeout
      example: done
      type: string
      x-enum-varnames:
        - DONE
        - TIMEOUT
    RUMWarning:
      description: A warning message indicating something that went wrong with the query.
      properties:
        code:
          description: A unique code for this type of warning.
          example: unknown_index
          type: string
        detail:
          description: A detailed explanation of this specific warning.
          example: 'indexes: foo, bar'
          type: string
        title:
          description: A short human-readable summary of the warning.
          example: >-
            One or several indexes are missing or invalid, results hold data
            from the other indexes
          type: string
      type: object
    RUMApplicationListAttributes:
      description: RUM application list attributes.
      properties:
        application_id:
          description: ID of the RUM application.
          example: abcd1234-0000-0000-abcd-1234abcd5678
          type: string
        created_at:
          description: Timestamp in ms of the creation date.
          example: 1659479836169
          format: int64
          type: integer
        created_by_handle:
          description: Handle of the creator user.
          example: john.doe
          type: string
        hash:
          description: Hash of the RUM application. Optional.
          type: string
        is_active:
          description: Indicates if the RUM application is active.
          example: true
          type: boolean
        name:
          description: Name of the RUM application.
          example: my_rum_application
          type: string
        org_id:
          description: Org ID of the RUM application.
          example: 999
          format: int32
          maximum: 2147483647
          type: integer
        product_scales:
          $ref: '#/components/schemas/RUMProductScales'
        type:
          description: >-
            Type of the RUM application. Supported values are `browser`, `ios`,
            `android`, `react-native`, `flutter`, `roku`, `electron`, `unity`,
            `kotlin-multiplatform`.
          example: browser
          type: string
        updated_at:
          description: Timestamp in ms of the last update date.
          example: 1659479836169
          format: int64
          type: integer
        updated_by_handle:
          description: Handle of the updater user.
          example: jane.doe
          type: string
      required:
        - application_id
        - created_at
        - created_by_handle
        - name
        - org_id
        - type
        - updated_at
        - updated_by_handle
      type: object
    RUMApplicationListType:
      default: rum_application
      description: RUM application list type.
      enum:
        - rum_application
      example: rum_application
      type: string
      x-enum-varnames:
        - RUM_APPLICATION
    RUMApplicationCreateAttributes:
      description: RUM application creation attributes.
      properties:
        name:
          description: Name of the RUM application.
          example: my_new_rum_application
          type: string
        product_analytics_retention_state:
          $ref: '#/components/schemas/RUMProductAnalyticsRetentionState'
        rum_event_processing_state:
          $ref: '#/components/schemas/RUMEventProcessingState'
        type:
          description: >-
            Type of the RUM application. Supported values are `browser`, `ios`,
            `android`, `react-native`, `flutter`, `roku`, `electron`, `unity`,
            `kotlin-multiplatform`.
          example: browser
          type: string
      required:
        - name
      type: object
    RUMApplicationCreateType:
      default: rum_application_create
      description: RUM application creation type.
      enum:
        - rum_application_create
      example: rum_application_create
      type: string
      x-enum-varnames:
        - RUM_APPLICATION_CREATE
    RUMApplicationAttributes:
      description: RUM application attributes.
      properties:
        application_id:
          description: ID of the RUM application.
          example: abcd1234-0000-0000-abcd-1234abcd5678
          type: string
        client_token:
          description: Client token of the RUM application.
          example: abcd1234efgh5678ijkl90abcd1234efgh0
          type: string
        created_at:
          description: Timestamp in ms of the creation date.
          example: 1659479836169
          format: int64
          type: integer
        created_by_handle:
          description: Handle of the creator user.
          example: john.doe
          type: string
        hash:
          description: Hash of the RUM application. Optional.
          type: string
        is_active:
          description: Indicates if the RUM application is active.
          example: true
          type: boolean
        name:
          description: Name of the RUM application.
          example: my_rum_application
          type: string
        org_id:
          description: Org ID of the RUM application.
          example: 999
          format: int32
          maximum: 2147483647
          type: integer
        product_scales:
          $ref: '#/components/schemas/RUMProductScales'
        type:
          description: >-
            Type of the RUM application. Supported values are `browser`, `ios`,
            `android`, `react-native`, `flutter`, `roku`, `electron`, `unity`,
            `kotlin-multiplatform`.
          example: browser
          type: string
        updated_at:
          description: Timestamp in ms of the last update date.
          example: 1659479836169
          format: int64
          type: integer
        updated_by_handle:
          description: Handle of the updater user.
          example: jane.doe
          type: string
      required:
        - application_id
        - client_token
        - created_at
        - created_by_handle
        - name
        - org_id
        - type
        - updated_at
        - updated_by_handle
      type: object
    RUMApplicationType:
      default: rum_application
      description: RUM application response type.
      enum:
        - rum_application
      example: rum_application
      type: string
      x-enum-varnames:
        - RUM_APPLICATION
    RumRetentionFilterID:
      description: ID of retention filter in UUID.
      example: 051601eb-54a0-abc0-03f9-cc02efa18892
      type: string
    RumRetentionFilterType:
      default: retention_filters
      description: The type of the resource. The value should always be retention_filters.
      enum:
        - retention_filters
      example: retention_filters
      type: string
      x-enum-varnames:
        - RETENTION_FILTERS
    RumRetentionFilterAttributes:
      description: The object describing attributes of a RUM retention filter.
      properties:
        enabled:
          $ref: '#/components/schemas/RumRetentionFilterEnabled'
        event_type:
          $ref: '#/components/schemas/RumRetentionFilterEventType'
        name:
          $ref: '#/components/schemas/RunRetentionFilterName'
        query:
          $ref: '#/components/schemas/RumRetentionFilterQuery'
        sample_rate:
          $ref: '#/components/schemas/RumRetentionFilterSampleRate'
      type: object
    RumRetentionFilterCreateAttributes:
      description: The object describing attributes of a RUM retention filter to create.
      properties:
        enabled:
          $ref: '#/components/schemas/RumRetentionFilterEnabled'
        event_type:
          $ref: '#/components/schemas/RumRetentionFilterEventType'
        name:
          $ref: '#/components/schemas/RunRetentionFilterName'
        query:
          $ref: '#/components/schemas/RumRetentionFilterQuery'
        sample_rate:
          $ref: '#/components/schemas/RumRetentionFilterSampleRate'
      required:
        - event_type
        - name
        - sample_rate
      type: object
    RumRetentionFilterUpdateAttributes:
      description: The object describing attributes of a RUM retention filter to update.
      properties:
        enabled:
          $ref: '#/components/schemas/RumRetentionFilterEnabled'
        event_type:
          $ref: '#/components/schemas/RumRetentionFilterEventType'
        name:
          $ref: '#/components/schemas/RunRetentionFilterName'
        query:
          $ref: '#/components/schemas/RumRetentionFilterQuery'
        sample_rate:
          $ref: '#/components/schemas/RumRetentionFilterSampleRate'
      type: object
    RUMApplicationUpdateAttributes:
      description: RUM application update attributes.
      properties:
        name:
          description: Name of the RUM application.
          example: updated_name_for_my_existing_rum_application
          type: string
        product_analytics_retention_state:
          $ref: '#/components/schemas/RUMProductAnalyticsRetentionState'
        rum_event_processing_state:
          $ref: '#/components/schemas/RUMEventProcessingState'
        type:
          description: >-
            Type of the RUM application. Supported values are `browser`, `ios`,
            `android`, `react-native`, `flutter`, `roku`, `electron`, `unity`,
            `kotlin-multiplatform`.
          example: browser
          type: string
      type: object
    RUMApplicationUpdateType:
      default: rum_application_update
      description: RUM application update type.
      enum:
        - rum_application_update
      example: rum_application_update
      type: string
      x-enum-varnames:
        - RUM_APPLICATION_UPDATE
    RumMetricResponseAttributes:
      description: The object describing a Datadog rum-based metric.
      properties:
        compute:
          $ref: '#/components/schemas/RumMetricResponseCompute'
        event_type:
          $ref: '#/components/schemas/RumMetricEventType'
        filter:
          $ref: '#/components/schemas/RumMetricResponseFilter'
        group_by:
          description: The rules for the group by.
          items:
            $ref: '#/components/schemas/RumMetricResponseGroupBy'
          type: array
        uniqueness:
          $ref: '#/components/schemas/RumMetricResponseUniqueness'
      type: object
    RumMetricID:
      description: The name of the rum-based metric.
      example: rum.sessions.webui.count
      type: string
    RumMetricType:
      default: rum_metrics
      description: The type of the resource. The value should always be rum_metrics.
      enum:
        - rum_metrics
      example: rum_metrics
      type: string
      x-enum-varnames:
        - RUM_METRICS
    RumMetricCreateAttributes:
      description: The object describing the Datadog rum-based metric to create.
      properties:
        compute:
          $ref: '#/components/schemas/RumMetricCompute'
        event_type:
          $ref: '#/components/schemas/RumMetricEventType'
        filter:
          $ref: '#/components/schemas/RumMetricFilter'
        group_by:
          description: The rules for the group by.
          items:
            $ref: '#/components/schemas/RumMetricGroupBy'
          type: array
        uniqueness:
          $ref: '#/components/schemas/RumMetricUniqueness'
      required:
        - event_type
        - compute
      type: object
    RumMetricUpdateAttributes:
      description: The rum-based metric properties that will be updated.
      properties:
        compute:
          $ref: '#/components/schemas/RumMetricUpdateCompute'
        filter:
          $ref: '#/components/schemas/RumMetricFilter'
        group_by:
          description: The rules for the group by.
          items:
            $ref: '#/components/schemas/RumMetricGroupBy'
          type: array
      type: object
    RUMEventAttributes:
      description: JSON object containing all event attributes and their associated values.
      properties:
        attributes:
          additionalProperties: {}
          description: JSON object of attributes from RUM events.
          example:
            customAttribute: 123
            duration: 2345
          type: object
        service:
          description: >-
            The name of the application or service generating RUM events.

            It is used to switch from RUM to APM, so make sure you define the
            same

            value when you use both products.
          example: web-app
          type: string
        tags:
          description: Array of tags associated with your event.
          example:
            - team:A
          items:
            description: Tag associated with your event.
            type: string
          type: array
        timestamp:
          description: Timestamp of your event.
          example: '2019-01-02T09:42:36.320Z'
          format: date-time
          type: string
      type: object
    RUMEventType:
      default: rum
      description: Type of the event.
      enum:
        - rum
      example: rum
      type: string
      x-enum-varnames:
        - RUM
    RUMGroupByMissingString:
      description: The missing value to use if there is string valued facet.
      type: string
    RUMGroupByMissingNumber:
      description: The missing value to use if there is a number valued facet.
      format: double
      type: number
    RUMSortOrder:
      description: The order to use, ascending or descending.
      enum:
        - asc
        - desc
      example: asc
      type: string
      x-enum-varnames:
        - ASCENDING
        - DESCENDING
    RUMAggregateSortType:
      default: alphabetical
      description: The type of sorting algorithm.
      enum:
        - alphabetical
        - measure
      type: string
      x-enum-varnames:
        - ALPHABETICAL
        - MEASURE
    RUMGroupByTotalBoolean:
      description: If set to true, creates an additional bucket labeled "$facet_total".
      type: boolean
    RUMGroupByTotalString:
      description: A string to use as the key value for the total bucket.
      type: string
    RUMGroupByTotalNumber:
      description: A number to use as the key value for the total bucket.
      format: double
      type: number
    RUMAggregateBucketValue:
      description: A bucket value, can be either a timeseries or a single value.
      oneOf:
        - $ref: '#/components/schemas/RUMAggregateBucketValueSingleString'
        - $ref: '#/components/schemas/RUMAggregateBucketValueSingleNumber'
        - $ref: '#/components/schemas/RUMAggregateBucketValueTimeseries'
    RUMProductScales:
      description: Product Scales configuration for the RUM application.
      properties:
        product_analytics_retention_scale:
          $ref: '#/components/schemas/RUMProductAnalyticsRetentionScale'
        rum_event_processing_scale:
          $ref: '#/components/schemas/RUMEventProcessingScale'
      type: object
    RUMProductAnalyticsRetentionState:
      description: >-
        Controls the retention policy for Product Analytics data derived from
        RUM events.
      enum:
        - MAX
        - NONE
      example: MAX
      type: string
      x-enum-descriptions:
        - >-
          Store Product Analytics data for the maximum available retention
          period
        - Do not store Product Analytics data
      x-enum-varnames:
        - MAX
        - NONE
    RUMEventProcessingState:
      description: >-
        Configures which RUM events are processed and stored for the
        application.
      enum:
        - ALL
        - ERROR_FOCUSED_MODE
        - NONE
      example: ALL
      type: string
      x-enum-descriptions:
        - >-
          Process and store all RUM events (sessions, views, actions, resources,
          errors)
        - Process and store only error events and related critical events
        - Disable RUM event processing—no events are stored
      x-enum-varnames:
        - ALL
        - ERROR_FOCUSED_MODE
        - NONE
    RumRetentionFilterEnabled:
      description: Whether the retention filter is enabled.
      example: true
      type: boolean
    RumRetentionFilterEventType:
      description: The type of RUM events to filter on.
      enum:
        - session
        - view
        - action
        - error
        - resource
        - long_task
        - vital
      example: session
      type: string
      x-enum-varnames:
        - SESSION
        - VIEW
        - ACTION
        - ERROR
        - RESOURCE
        - LONG_TASK
        - VITAL
    RunRetentionFilterName:
      description: The name of a RUM retention filter.
      example: Retention filter for session
      type: string
    RumRetentionFilterQuery:
      description: The query string for a RUM retention filter.
      example: '@session.has_replay:true'
      type: string
    RumRetentionFilterSampleRate:
      description: The sample rate for a RUM retention filter, between 0 and 100.
      example: 25
      format: int64
      maximum: 100
      minimum: 0
      type: integer
    RumMetricResponseCompute:
      description: The compute rule to compute the rum-based metric.
      properties:
        aggregation_type:
          $ref: '#/components/schemas/RumMetricComputeAggregationType'
        include_percentiles:
          $ref: '#/components/schemas/RumMetricComputeIncludePercentiles'
        path:
          description: |-
            The path to the value the rum-based metric will aggregate on.
            Only present when `aggregation_type` is `distribution`.
          example: '@duration'
          type: string
      type: object
    RumMetricEventType:
      description: The type of RUM events to filter on.
      enum:
        - session
        - view
        - action
        - error
        - resource
        - long_task
        - vital
      example: session
      type: string
      x-enum-varnames:
        - SESSION
        - VIEW
        - ACTION
        - ERROR
        - RESOURCE
        - LONG_TASK
        - VITAL
    RumMetricResponseFilter:
      description: >-
        The rum-based metric filter. RUM events matching this filter will be
        aggregated in this metric.
      properties:
        query:
          description: The search query - following the RUM search syntax.
          example: service:web* AND @http.status_code:[200 TO 299]
          type: string
      type: object
    RumMetricResponseGroupBy:
      description: A group by rule.
      properties:
        path:
          description: The path to the value the rum-based metric will be aggregated over.
          example: '@http.status_code'
          type: string
        tag_name:
          description: >-
            Eventual name of the tag that gets created. By default, `path` is
            used as the tag name.
          example: status_code
          type: string
      type: object
    RumMetricResponseUniqueness:
      description: >-
        The rule to count updatable events. Is only set if `event_type` is
        `session` or `view`.
      properties:
        when:
          $ref: '#/components/schemas/RumMetricUniquenessWhen'
      type: object
    RumMetricCompute:
      description: The compute rule to compute the rum-based metric.
      properties:
        aggregation_type:
          $ref: '#/components/schemas/RumMetricComputeAggregationType'
        include_percentiles:
          $ref: '#/components/schemas/RumMetricComputeIncludePercentiles'
        path:
          description: |-
            The path to the value the rum-based metric will aggregate on.
            Only present when `aggregation_type` is `distribution`.
          example: '@duration'
          type: string
      required:
        - aggregation_type
      type: object
    RumMetricFilter:
      description: >-
        The rum-based metric filter. Events matching this filter will be
        aggregated in this metric.
      properties:
        query:
          default: '*'
          description: The search query - following the RUM search syntax.
          example: '@service:web-ui: '
          type: string
      required:
        - query
      type: object
    RumMetricGroupBy:
      description: A group by rule.
      properties:
        path:
          description: The path to the value the rum-based metric will be aggregated over.
          example: '@browser.name'
          type: string
        tag_name:
          description: >-
            Eventual name of the tag that gets created. By default, `path` is
            used as the tag name.
          example: browser_name
          type: string
      required:
        - path
      type: object
    RumMetricUniqueness:
      description: >-
        The rule to count updatable events. Is only set if `event_type` is
        `sessions` or `views`.
      properties:
        when:
          $ref: '#/components/schemas/RumMetricUniquenessWhen'
      required:
        - when
      type: object
    RumMetricUpdateCompute:
      description: The compute rule to compute the rum-based metric.
      properties:
        include_percentiles:
          $ref: '#/components/schemas/RumMetricComputeIncludePercentiles'
      type: object
    RUMAggregateBucketValueSingleString:
      description: A single string value.
      type: string
    RUMAggregateBucketValueSingleNumber:
      description: A single number value.
      format: double
      type: number
    RUMAggregateBucketValueTimeseries:
      description: A timeseries array.
      items:
        $ref: '#/components/schemas/RUMAggregateBucketValueTimeseriesPoint'
      type: array
      x-generate-alias-as-model: true
    RUMProductAnalyticsRetentionScale:
      description: Product Analytics retention scale configuration.
      properties:
        last_modified_at:
          description: Timestamp in milliseconds when this scale was last modified.
          example: 1747922145974
          format: int64
          type: integer
        state:
          $ref: '#/components/schemas/RUMProductAnalyticsRetentionState'
      type: object
    RUMEventProcessingScale:
      description: RUM event processing scale configuration.
      properties:
        last_modified_at:
          description: Timestamp in milliseconds when this scale was last modified.
          example: 1721897494108
          format: int64
          type: integer
        state:
          $ref: '#/components/schemas/RUMEventProcessingState'
      type: object
    RumMetricComputeAggregationType:
      description: The type of aggregation to use.
      enum:
        - count
        - distribution
      example: distribution
      type: string
      x-enum-varnames:
        - COUNT
        - DISTRIBUTION
    RumMetricComputeIncludePercentiles:
      description: >-
        Toggle to include or exclude percentile aggregations for distribution
        metrics.

        Only present when `aggregation_type` is `distribution`.
      example: true
      type: boolean
    RumMetricUniquenessWhen:
      description: >-
        When to count updatable events. `match` when the event is first seen, or
        `end` when the event is complete.
      enum:
        - match
        - end
      example: match
      type: string
      x-enum-varnames:
        - WHEN_MATCH
        - WHEN_END
    RUMAggregateBucketValueTimeseriesPoint:
      description: A timeseries point.
      properties:
        time:
          description: The time value for this point.
          example: '2020-06-08T11:55:00.123Z'
          format: date-time
          type: string
        value:
          description: The value for this point.
          example: 19
          format: double
          type: number
      type: object
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    NotAuthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Authorized
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Too many requests
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
    ConflictResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Conflict
  parameters:
    RumApplicationIDParameter:
      description: RUM application ID.
      in: path
      name: app_id
      required: true
      schema:
        type: string
    RumRetentionFilterIDParameter:
      description: Retention filter ID.
      in: path
      name: rf_id
      required: true
      schema:
        type: string
    RumMetricIDParameter:
      description: The name of the rum-based metric.
      in: path
      name: metric_id
      required: true
      schema:
        type: string
  x-stackQL-resources:
    rum_events:
      id: datadog.digital_experience.rum_events
      name: rum_events
      title: Rum Events
      methods:
        aggregate_rumevents:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1analytics~1aggregate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_rumevents:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        search_rumevents:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1events~1search/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/rum_events/methods/list_rumevents'
        insert: []
        update: []
        delete: []
        replace: []
    rum_applications:
      id: datadog.digital_experience.rum_applications
      name: rum_applications
      title: Rum Applications
      methods:
        get_rumapplications:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1applications/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_rumapplication:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1applications/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_rumapplication:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1applications~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_rumapplication:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1applications~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_rumapplication:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1applications~1{id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/rum_applications/methods/get_rumapplication
          - $ref: >-
              #/components/x-stackQL-resources/rum_applications/methods/get_rumapplications
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/rum_applications/methods/create_rumapplication
        update:
          - $ref: >-
              #/components/x-stackQL-resources/rum_applications/methods/update_rumapplication
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/rum_applications/methods/delete_rumapplication
        replace: []
    rum_retention_filters:
      id: datadog.digital_experience.rum_retention_filters
      name: rum_retention_filters
      title: Rum Retention Filters
      methods:
        order_retention_filters:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1rum~1applications~1{app_id}~1relationships~1retention_filters/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_retention_filters:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1rum~1applications~1{app_id}~1retention_filters/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_retention_filter:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1rum~1applications~1{app_id}~1retention_filters/post
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_retention_filter:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1rum~1applications~1{app_id}~1retention_filters~1{rf_id}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_retention_filter:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1rum~1applications~1{app_id}~1retention_filters~1{rf_id}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_retention_filter:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1rum~1applications~1{app_id}~1retention_filters~1{rf_id}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/rum_retention_filters/methods/get_retention_filter
          - $ref: >-
              #/components/x-stackQL-resources/rum_retention_filters/methods/list_retention_filters
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/rum_retention_filters/methods/create_retention_filter
        update:
          - $ref: >-
              #/components/x-stackQL-resources/rum_retention_filters/methods/update_retention_filter
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/rum_retention_filters/methods/delete_retention_filter
        replace: []
    rum_metrics:
      id: datadog.digital_experience.rum_metrics
      name: rum_metrics
      title: Rum Metrics
      methods:
        list_rum_metrics:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1config~1metrics/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_rum_metric:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1config~1metrics/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_rum_metric:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1config~1metrics~1{metric_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_rum_metric:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1config~1metrics~1{metric_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_rum_metric:
          operation:
            $ref: '#/paths/~1api~1v2~1rum~1config~1metrics~1{metric_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/rum_metrics/methods/get_rum_metric
          - $ref: >-
              #/components/x-stackQL-resources/rum_metrics/methods/list_rum_metrics
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/rum_metrics/methods/create_rum_metric
        update:
          - $ref: >-
              #/components/x-stackQL-resources/rum_metrics/methods/update_rum_metric
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/rum_metrics/methods/delete_rum_metric
        replace: []
servers:
  - url: >-
      https://{region:^(?:[^\:/]+(?:\:[0-9]+)?|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(?:\:[0-9]+)?)$}/
    variables:
      region:
        default: datadoghq.com
