openapi: 3.0.0
info:
  title: infrastructure API
  description: datadog infrastructure API
  version: '1.0'
paths:
  /api/v2/app-builder/apps:
    delete:
      description: >-
        Delete multiple apps in a single request from a list of app IDs. This
        API requires a [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: DeleteApps
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAppsRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAppsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Not Found
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Delete Multiple Apps
      tags:
        - App Builder
      x-permission:
        operator: OR
        permissions:
          - apps_write
    get:
      description: >-
        List all apps, with optional filters and sorting. This endpoint is
        paginated. Only basic app information such as the app ID, name, and
        description is returned by this endpoint. This API requires a
        [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: ListApps
      parameters:
        - description: The number of apps to return per page.
          in: query
          name: limit
          required: false
          schema:
            format: int64
            type: integer
        - description: The page number to return.
          in: query
          name: page
          required: false
          schema:
            format: int64
            type: integer
        - description: Filter apps by the app creator. Usually the user's email.
          in: query
          name: filter[user_name]
          required: false
          schema:
            type: string
        - description: Filter apps by the app creator's UUID.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          in: query
          name: filter[user_uuid]
          required: false
          schema:
            format: uuid
            type: string
        - description: Filter by app name.
          in: query
          name: filter[name]
          required: false
          schema:
            type: string
        - description: Filter apps by the app name or the app creator.
          in: query
          name: filter[query]
          required: false
          schema:
            type: string
        - description: Filter apps by whether they are published.
          in: query
          name: filter[deployed]
          required: false
          schema:
            type: boolean
        - description: Filter apps by tags.
          in: query
          name: filter[tags]
          required: false
          schema:
            type: string
        - description: Filter apps by whether you have added them to your favorites.
          in: query
          name: filter[favorite]
          required: false
          schema:
            type: boolean
        - description: Filter apps by whether they are enabled for self-service.
          in: query
          name: filter[self_service]
          required: false
          schema:
            type: boolean
        - description: The fields and direction to sort apps by.
          explode: false
          in: query
          name: sort
          required: false
          schema:
            items:
              $ref: '#/components/schemas/AppsSortField'
            type: array
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAppsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: List Apps
      tags:
        - App Builder
      x-permission:
        operator: OR
        permissions:
          - apps_run
    post:
      description: >-
        Create a new app, returning the app ID. This API requires a [registered
        application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: CreateApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAppResponse'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Create App
      tags:
        - App Builder
      x-permission:
        operator: AND
        permissions:
          - apps_write
          - connections_resolve
          - workflows_run
  /api/v2/app-builder/apps/{app_id}:
    delete:
      description: >-
        Delete a single app. This API requires a [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: DeleteApp
      parameters:
        - description: The ID of the app to delete.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          in: path
          name: app_id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAppResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Not Found
        '410':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Gone
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Delete App
      tags:
        - App Builder
      x-permission:
        operator: OR
        permissions:
          - apps_write
    get:
      description: >-
        Get the full definition of an app. This API requires a [registered
        application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: GetApp
      parameters:
        - description: The ID of the app to retrieve.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          in: path
          name: app_id
          required: true
          schema:
            format: uuid
            type: string
        - description: >-
            The version number of the app to retrieve. If not specified, the
            latest version is returned. Version numbers start at 1 and increment
            with each update. The special values `latest` and `deployed` can be
            used to retrieve the latest version or the published version,
            respectively.
          in: query
          name: version
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAppResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Not Found
        '410':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Gone
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get App
      tags:
        - App Builder
      x-permission:
        operator: AND
        permissions:
          - apps_run
          - connections_read
    patch:
      description: >-
        Update an existing app. This creates a new version of the app. This API
        requires a [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: UpdateApp
      parameters:
        - description: The ID of the app to update.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          in: path
          name: app_id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAppResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Update App
      tags:
        - App Builder
      x-permission:
        operator: AND
        permissions:
          - apps_write
          - connections_resolve
          - workflows_run
  /api/v2/app-builder/apps/{app_id}/deployment:
    delete:
      description: >-
        Unpublish an app, removing the live version of the app. Unpublishing
        creates a new instance of a `deployment` object on the app, with a nil
        `app_version_id` (`00000000-0000-0000-0000-000000000000`). The app can
        still be updated and published again in the future. This API requires a
        [registered application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: UnpublishApp
      parameters:
        - description: The ID of the app to unpublish.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          in: path
          name: app_id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnpublishAppResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Not Found
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Unpublish App
      tags:
        - App Builder
      x-permission:
        operator: OR
        permissions:
          - apps_write
    post:
      description: >-
        Publish an app for use by other users. To ensure the app is accessible
        to the correct users, you also need to set a [Restriction
        Policy](https://docs.datadoghq.com/api/latest/restriction-policies/) on
        the app if a policy does not yet exist. This API requires a [registered
        application
        key](https://docs.datadoghq.com/api/latest/action-connection/#register-a-new-app-key).
        Alternatively, you can configure these permissions [in the
        UI](https://docs.datadoghq.com/account_management/api-app-keys/#actions-api-access).
      operationId: PublishApp
      parameters:
        - description: The ID of the app to publish.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          in: path
          name: app_id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishAppResponse'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Not Found
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Publish App
      tags:
        - App Builder
      x-permission:
        operator: OR
        permissions:
          - apps_write
  /api/v2/container_images:
    get:
      description: Get all Container Images for your organization.
      operationId: ListContainerImages
      parameters:
        - description: Comma-separated list of tags to filter Container Images by.
          example: short_image:redis,status:running
          in: query
          name: filter[tags]
          required: false
          schema:
            type: string
        - description: Comma-separated list of tags to group Container Images by.
          example: registry,image_tags
          in: query
          name: group_by
          required: false
          schema:
            type: string
        - description: Attribute to sort Container Images by.
          example: container_count
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Maximum number of results returned.
          in: query
          name: page[size]
          required: false
          schema:
            default: 1000
            format: int32
            maximum: 10000
            minimum: 1
            type: integer
        - description: >-
            String to query the next page of results.

            This key is provided with each valid response from the API in
            `meta.pagination.next_cursor`.
          in: query
          name: page[cursor]
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerImagesResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Get all Container Images
      tags:
        - Container Images
      x-pagination:
        cursorParam: page[cursor]
        cursorPath: meta.pagination.next_cursor
        limitParam: page[size]
        resultsPath: data
      x-permission:
        operator: OPEN
        permissions: []
  /api/v2/containers:
    get:
      description: Get all containers for your organization.
      operationId: ListContainers
      parameters:
        - description: Comma-separated list of tags to filter containers by.
          example: env:prod,short_image:cassandra
          in: query
          name: filter[tags]
          required: false
          schema:
            type: string
        - description: Comma-separated list of tags to group containers by.
          example: datacenter,cluster
          in: query
          name: group_by
          required: false
          schema:
            type: string
        - description: Attribute to sort containers by.
          example: started_at
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Maximum number of results returned.
          in: query
          name: page[size]
          required: false
          schema:
            default: 1000
            format: int32
            maximum: 10000
            minimum: 1
            type: integer
        - description: >-
            String to query the next page of results.

            This key is provided with each valid response from the API in
            `meta.pagination.next_cursor`.
          in: query
          name: page[cursor]
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainersResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Get All Containers
      tags:
        - Containers
      x-pagination:
        cursorParam: page[cursor]
        cursorPath: meta.pagination.next_cursor
        limitParam: page[size]
        resultsPath: data
      x-permission:
        operator: OPEN
        permissions: []
  /api/v2/ndm/devices:
    get:
      description: Get the list of devices.
      operationId: ListDevices
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - description: The field to sort the devices by.
          example: status
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Filter devices by tag.
          example: status:ok
          in: query
          name: filter[tag]
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDevicesResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get the list of devices
      tags:
        - Network Device Monitoring
      x-pagination:
        limitParam: page[size]
        pageParam: page[number]
        resultsPath: data
  /api/v2/ndm/devices/{device_id}:
    get:
      description: Get the device details.
      operationId: GetDevice
      parameters:
        - description: The id of the device to fetch.
          example: example:1.2.3.4
          in: path
          name: device_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceResponse'
          description: OK
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get the device details
      tags:
        - Network Device Monitoring
  /api/v2/ndm/interfaces:
    get:
      description: Get the list of interfaces of the device.
      operationId: GetInterfaces
      parameters:
        - description: The ID of the device to get interfaces from.
          example: example:1.2.3.4
          in: query
          name: device_id
          required: true
          schema:
            type: string
        - description: Whether to get the IP addresses of the interfaces.
          example: true
          in: query
          name: get_ip_addresses
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInterfacesResponse'
          description: OK
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get the list of interfaces of the device
      tags:
        - Network Device Monitoring
  /api/v2/ndm/tags/devices/{device_id}:
    get:
      description: Get the list of tags for a device.
      operationId: ListDeviceUserTags
      parameters:
        - description: The id of the device to fetch tags for.
          example: example:1.2.3.4
          in: path
          name: device_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsResponse'
          description: OK
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get the list of tags for a device
      tags:
        - Network Device Monitoring
    patch:
      description: Update the tags for a device.
      operationId: UpdateDeviceUserTags
      parameters:
        - description: The id of the device to update tags for.
          example: example:1.2.3.4
          in: path
          name: device_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsResponse'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsResponse'
          description: OK
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Update the tags for a device
      tags:
        - Network Device Monitoring
  /api/v2/network/connections/aggregate:
    get:
      description: Get all aggregated connections.
      operationId: GetAggregatedConnections
      parameters:
        - description: >-
            Unix timestamp (number of seconds since epoch) of the start of the
            query window. If not provided, the start of the query window is 15
            minutes before the `to` timestamp. If neither `from` nor `to` are
            provided, the query window is `[now - 15m, now]`.
          in: query
          name: from
          schema:
            format: int64
            type: integer
        - description: >-
            Unix timestamp (number of seconds since epoch) of the end of the
            query window. If not provided, the end of the query window is the
            current time. If neither `from` nor `to` are provided, the query
            window is `[now - 15m, now]`.
          in: query
          name: to
          schema:
            format: int64
            type: integer
        - description: >-
            Comma-separated list of fields to group connections by. The maximum
            number of group_by(s) is 10.
          in: query
          name: group_by
          schema:
            type: string
        - description: Comma-separated list of tags to filter connections by.
          in: query
          name: tags
          schema:
            type: string
        - description: >-
            The number of connections to be returned. The maximum value is 7500.
            The default is 100.
          in: query
          name: limit
          schema:
            default: 100
            format: int32
            maximum: 7500
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleAggregatedConnectionResponseArray'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get all aggregated connections
      tags:
        - Cloud Network Monitoring
  /api/v2/network/dns/aggregate:
    get:
      description: Get all aggregated DNS traffic.
      operationId: GetAggregatedDns
      parameters:
        - description: >-
            Unix timestamp (number of seconds since epoch) of the start of the
            query window. If not provided, the start of the query window is 15
            minutes before the `to` timestamp. If neither `from` nor `to` are
            provided, the query window is `[now - 15m, now]`.
          in: query
          name: from
          schema:
            format: int64
            type: integer
        - description: >-
            Unix timestamp (number of seconds since epoch) of the end of the
            query window. If not provided, the end of the query window is the
            current time. If neither `from` nor `to` are provided, the query
            window is `[now - 15m, now]`.
          in: query
          name: to
          schema:
            format: int64
            type: integer
        - description: >-
            Comma-separated list of fields to group DNS traffic by. The server
            side defaults to `network.dns_query` if unspecified.
            `server_ungrouped` may be used if groups are not desired. The
            maximum number of group_by(s) is 10.
          in: query
          name: group_by
          schema:
            type: string
        - description: Comma-separated list of tags to filter DNS traffic by.
          in: query
          name: tags
          schema:
            type: string
        - description: >-
            The number of aggregated DNS entries to be returned. The maximum
            value is 7500. The default is 100.
          in: query
          name: limit
          schema:
            default: 100
            format: int32
            maximum: 7500
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleAggregatedDnsResponseArray'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get all aggregated DNS traffic
      tags:
        - Cloud Network Monitoring
  /api/v2/processes:
    get:
      description: Get all processes for your organization.
      operationId: ListProcesses
      parameters:
        - description: String to search processes by.
          in: query
          name: search
          required: false
          schema:
            type: string
        - description: Comma-separated list of tags to filter processes by.
          example: account:prod,user:admin
          in: query
          name: tags
          required: false
          schema:
            type: string
        - description: >-
            Unix timestamp (number of seconds since epoch) of the start of the
            query window.

            If not provided, the start of the query window will be 15 minutes
            before the `to` timestamp. If neither

            `from` nor `to` are provided, the query window will be `[now - 15m,
            now]`.
          in: query
          name: from
          required: false
          schema:
            format: int64
            type: integer
        - description: >-
            Unix timestamp (number of seconds since epoch) of the end of the
            query window.

            If not provided, the end of the query window will be 15 minutes
            after the `from` timestamp. If neither

            `from` nor `to` are provided, the query window will be `[now - 15m,
            now]`.
          in: query
          name: to
          required: false
          schema:
            format: int64
            type: integer
        - description: Maximum number of results returned.
          in: query
          name: page[limit]
          required: false
          schema:
            default: 1000
            format: int32
            maximum: 10000
            minimum: 1
            type: integer
        - description: >-
            String to query the next page of results.

            This key is provided with each valid response from the API in
            `meta.page.after`.
          in: query
          name: page[cursor]
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessSummariesResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Get all processes
      tags:
        - Processes
      x-pagination:
        cursorParam: page[cursor]
        cursorPath: meta.page.after
        limitParam: page[limit]
        resultsPath: data
      x-permission:
        operator: OPEN
        permissions: []
  /api/v2/spa/recommendations/{service}/{shard}:
    get:
      description: >-
        Retrieve resource recommendations for a Spark job. The caller (Spark
        Gateway or DJM UI) provides a service name and shard identifier, and SPA
        returns structured recommendations for driver and executor resources.
      operationId: GetSPARecommendations
      parameters:
        - description: >-
            The shard tag for a spark job, which differentiates jobs within the
            same service that have different resource needs
          in: path
          name: shard
          required: true
          schema:
            type: string
        - description: The service name for a spark job
          in: path
          name: service
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example:
                data:
                  attributes:
                    driver:
                      estimation:
                        cpu:
                          max: 1500
                          p75: 1000
                          p95: 1200
                        ephemeral_storage: 896
                        heap: 6144
                        memory: 7168
                        overhead: 1024
                    executor:
                      estimation:
                        cpu:
                          max: 2000
                          p75: 1200
                          p95: 1500
                        ephemeral_storage: 512
                        heap: 3072
                        memory: 4096
                        overhead: 1024
                  id: dedupeactivecontexts:adp_dedupeactivecontexts_org2
                  type: recommendation
              schema:
                $ref: '#/components/schemas/RecommendationDocument'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get SPA Recommendations
      tags:
        - Spa
      x-unstable: >-
        **Note**: This endpoint is in public beta and may change in the future.
        It is not yet recommended for production use.
components:
  schemas:
    DeleteAppsRequest:
      description: A request object for deleting multiple apps by ID.
      example:
        data:
          - id: aea2ed17-b45f-40d0-ba59-c86b7972c901
            type: appDefinitions
          - id: f69bb8be-6168-4fe7-a30d-370256b6504a
            type: appDefinitions
          - id: ab1ed73e-13ad-4426-b0df-a0ff8876a088
            type: appDefinitions
      properties:
        data:
          description: An array of objects containing the IDs of the apps to delete.
          items:
            $ref: '#/components/schemas/DeleteAppsRequestDataItems'
          type: array
      type: object
    DeleteAppsResponse:
      description: The response object after multiple apps are successfully deleted.
      properties:
        data:
          description: An array of objects containing the IDs of the deleted apps.
          items:
            $ref: '#/components/schemas/DeleteAppsResponseDataItems'
          type: array
      type: object
    JSONAPIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          items:
            $ref: '#/components/schemas/JSONAPIErrorItem'
          type: array
      required:
        - errors
      type: object
    AppsSortField:
      description: The field and direction to sort apps by
      enum:
        - name
        - created_at
        - updated_at
        - user_name
        - '-name'
        - '-created_at'
        - '-updated_at'
        - '-user_name'
      example: '-created_at'
      type: string
      x-enum-varnames:
        - NAME
        - CREATED_AT
        - UPDATED_AT
        - USER_NAME
        - NAME_DESC
        - CREATED_AT_DESC
        - UPDATED_AT_DESC
        - USER_NAME_DESC
    ListAppsResponse:
      description: A paginated list of apps matching the specified filters and sorting.
      properties:
        data:
          description: An array of app definitions.
          items:
            $ref: '#/components/schemas/ListAppsResponseDataItems'
          type: array
        included:
          description: Data on the version of the app that was published.
          items:
            $ref: '#/components/schemas/Deployment'
          type: array
        meta:
          $ref: '#/components/schemas/ListAppsResponseMeta'
      type: object
    CreateAppRequest:
      description: A request object for creating a new app.
      example:
        data:
          attributes:
            components:
              - events: []
                name: grid0
                properties:
                  children:
                    - events: []
                      name: gridCell0
                      properties:
                        children:
                          - events: []
                            name: calloutValue0
                            properties:
                              isDisabled: false
                              isLoading: false
                              isVisible: true
                              label: CPU Usage
                              size: sm
                              style: vivid_yellow
                              unit: kB
                              value: '42'
                            type: calloutValue
                        isVisible: 'true'
                        layout:
                          default:
                            height: 8
                            width: 2
                            x: 0
                            'y': 0
                      type: gridCell
                type: grid
            description: This is a simple example app
            name: Example App
            queries: []
            rootInstanceName: grid0
          type: appDefinitions
      properties:
        data:
          $ref: '#/components/schemas/CreateAppRequestData'
      type: object
    CreateAppResponse:
      description: >-
        The response object after a new app is successfully created, with the
        app ID.
      properties:
        data:
          $ref: '#/components/schemas/CreateAppResponseData'
      type: object
    DeleteAppResponse:
      description: The response object after an app is successfully deleted.
      properties:
        data:
          $ref: '#/components/schemas/DeleteAppResponseData'
      type: object
    GetAppResponse:
      description: The full app definition response object.
      properties:
        data:
          $ref: '#/components/schemas/GetAppResponseData'
        included:
          description: Data on the version of the app that was published.
          items:
            $ref: '#/components/schemas/Deployment'
          type: array
        meta:
          $ref: '#/components/schemas/AppMeta'
        relationship:
          $ref: '#/components/schemas/AppRelationship'
      type: object
    UpdateAppRequest:
      description: A request object for updating an existing app.
      example:
        data:
          attributes:
            components:
              - events: []
                name: grid0
                properties:
                  children:
                    - events: []
                      name: gridCell0
                      properties:
                        children:
                          - events: []
                            name: calloutValue0
                            properties:
                              isDisabled: false
                              isLoading: false
                              isVisible: true
                              label: CPU Usage
                              size: sm
                              style: vivid_yellow
                              unit: kB
                              value: '42'
                            type: calloutValue
                        isVisible: 'true'
                        layout:
                          default:
                            height: 8
                            width: 2
                            x: 0
                            'y': 0
                      type: gridCell
                type: grid
            description: This is a simple example app
            name: Example App
            queries: []
            rootInstanceName: grid0
          id: 9e20cbaf-68da-45a6-9ccf-54193ac29fa5
          type: appDefinitions
      properties:
        data:
          $ref: '#/components/schemas/UpdateAppRequestData'
      type: object
    UpdateAppResponse:
      description: The response object after an app is successfully updated.
      properties:
        data:
          $ref: '#/components/schemas/UpdateAppResponseData'
        included:
          description: Data on the version of the app that was published.
          items:
            $ref: '#/components/schemas/Deployment'
          type: array
        meta:
          $ref: '#/components/schemas/AppMeta'
        relationship:
          $ref: '#/components/schemas/AppRelationship'
      type: object
    UnpublishAppResponse:
      description: The response object after an app is successfully unpublished.
      properties:
        data:
          $ref: '#/components/schemas/Deployment'
      type: object
    PublishAppResponse:
      description: The response object after an app is successfully published.
      properties:
        data:
          $ref: '#/components/schemas/Deployment'
      type: object
    ContainerImagesResponse:
      description: List of Container Images.
      properties:
        data:
          description: Array of Container Image objects.
          items:
            $ref: '#/components/schemas/ContainerImageItem'
          type: array
        links:
          $ref: '#/components/schemas/ContainerImagesResponseLinks'
        meta:
          $ref: '#/components/schemas/ContainerImageMeta'
      type: object
    APIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          example:
            - Bad Request
          items:
            description: A list of items.
            example: Bad Request
            type: string
          type: array
      required:
        - errors
      type: object
    ContainersResponse:
      description: List of containers.
      properties:
        data:
          description: Array of Container objects.
          items:
            $ref: '#/components/schemas/ContainerItem'
          type: array
        links:
          $ref: '#/components/schemas/ContainersResponseLinks'
        meta:
          $ref: '#/components/schemas/ContainerMeta'
      type: object
    ListDevicesResponse:
      description: List devices response.
      properties:
        data:
          description: The list devices response data.
          items:
            $ref: '#/components/schemas/DevicesListData'
          type: array
        meta:
          $ref: '#/components/schemas/ListDevicesResponseMetadata'
      type: object
    GetDeviceResponse:
      description: The `GetDevice` operation's response.
      properties:
        data:
          $ref: '#/components/schemas/GetDeviceData'
      type: object
    GetInterfacesResponse:
      description: The `GetInterfaces` operation's response.
      properties:
        data:
          description: Get Interfaces response
          items:
            $ref: '#/components/schemas/GetInterfacesData'
          type: array
      type: object
    ListTagsResponse:
      description: List tags response.
      properties:
        data:
          $ref: '#/components/schemas/ListTagsResponseData'
      type: object
    SingleAggregatedConnectionResponseArray:
      description: List of aggregated connections.
      example:
        data:
          - attributes:
              bytes_sent_by_client: 100
              bytes_sent_by_server: 200
              group_bys:
                client_team:
                  - networks
                server_service:
                  - hucklebuck
              packets_sent_by_client: 10
              packets_sent_by_server: 20
              rtt_micro_seconds: 800
              tcp_closed_connections: 30
              tcp_established_connections: 40
              tcp_refusals: 7
              tcp_resets: 5
              tcp_retransmits: 30
              tcp_timeouts: 6
            id: client_team:networks, server_service:hucklebuck
            type: aggregated_connection
      properties:
        data:
          description: Array of aggregated connection objects.
          items:
            $ref: '#/components/schemas/SingleAggregatedConnectionResponseData'
          type: array
      type: object
    SingleAggregatedDnsResponseArray:
      description: List of aggregated DNS flows.
      example:
        data:
          - attributes:
              group_bys:
                - key: client_service
                  value: example-service
                - key: network.dns_query
                  value: example.com
              metrics:
                - key: dns_total_requests
                  value: 100
                - key: dns_failures
                  value: 7
                - key: dns_successful_responses
                  value: 93
                - key: dns_failed_responses
                  value: 5
                - key: dns_timeouts
                  value: 2
                - key: dns_responses.nxdomain
                  value: 1
                - key: dns_responses.servfail
                  value: 1
                - key: dns_responses.other
                  value: 3
                - key: dns_success_latency_percentile
                  value: 50
                - key: dns_failure_latency_percentile
                  value: 75
            id: client_service:example-service,network.dns_query:example.com
            type: aggregated_dns
      properties:
        data:
          description: Array of aggregated DNS objects.
          items:
            $ref: '#/components/schemas/SingleAggregatedDnsResponseData'
          type: array
      type: object
    ProcessSummariesResponse:
      description: List of process summaries.
      properties:
        data:
          description: Array of process summary objects.
          items:
            $ref: '#/components/schemas/ProcessSummary'
          type: array
        meta:
          $ref: '#/components/schemas/ProcessSummariesMeta'
      type: object
    RecommendationDocument:
      description: >-
        JSON:API document containing a single Recommendation resource. Returned
        by SPA when the Spark Gateway requests recommendations.
      properties:
        data:
          $ref: '#/components/schemas/RecommendationData'
      required:
        - data
      type: object
    DeleteAppsRequestDataItems:
      description: An object containing the ID of an app to delete.
      properties:
        id:
          description: The ID of the app to delete.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/AppDefinitionType'
      required:
        - id
        - type
      type: object
    DeleteAppsResponseDataItems:
      description: An object containing the ID of a deleted app.
      properties:
        id:
          description: The ID of the deleted app.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/AppDefinitionType'
      required:
        - id
        - type
      type: object
    JSONAPIErrorItem:
      description: API error response body
      properties:
        detail:
          description: >-
            A human-readable explanation specific to this occurrence of the
            error.
          example: Missing required attribute in body
          type: string
        meta:
          additionalProperties: {}
          description: Non-standard meta-information about the error
          type: object
        source:
          $ref: '#/components/schemas/JSONAPIErrorItemSource'
        status:
          description: Status code of the response.
          example: '400'
          type: string
        title:
          description: Short human-readable summary of the error.
          example: Bad Request
          type: string
      type: object
    ListAppsResponseDataItems:
      description: >-
        An app definition object. This contains only basic information about the
        app such as ID, name, and tags.
      properties:
        attributes:
          $ref: '#/components/schemas/ListAppsResponseDataItemsAttributes'
        id:
          description: The ID of the app.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        meta:
          $ref: '#/components/schemas/AppMeta'
        relationships:
          $ref: '#/components/schemas/ListAppsResponseDataItemsRelationships'
        type:
          $ref: '#/components/schemas/AppDefinitionType'
      required:
        - id
        - type
        - attributes
      type: object
    Deployment:
      description: The version of the app that was published.
      properties:
        attributes:
          $ref: '#/components/schemas/DeploymentAttributes'
        id:
          description: The deployment ID.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        meta:
          $ref: '#/components/schemas/DeploymentMetadata'
        type:
          $ref: '#/components/schemas/AppDeploymentType'
      type: object
    ListAppsResponseMeta:
      description: Pagination metadata.
      properties:
        page:
          $ref: '#/components/schemas/ListAppsResponseMetaPage'
      type: object
    CreateAppRequestData:
      description: The data object containing the app definition.
      properties:
        attributes:
          $ref: '#/components/schemas/CreateAppRequestDataAttributes'
        type:
          $ref: '#/components/schemas/AppDefinitionType'
      required:
        - type
      type: object
    CreateAppResponseData:
      description: The data object containing the app ID.
      properties:
        id:
          description: The ID of the created app.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/AppDefinitionType'
      required:
        - id
        - type
      type: object
    DeleteAppResponseData:
      description: The definition of `DeleteAppResponseData` object.
      properties:
        id:
          description: The ID of the deleted app.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/AppDefinitionType'
      required:
        - id
        - type
      type: object
    GetAppResponseData:
      description: The data object containing the app definition.
      properties:
        attributes:
          $ref: '#/components/schemas/GetAppResponseDataAttributes'
        id:
          description: The ID of the app.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/AppDefinitionType'
      required:
        - id
        - type
        - attributes
      type: object
    AppMeta:
      description: Metadata of an app.
      properties:
        created_at:
          description: Timestamp of when the app was created.
          format: date-time
          type: string
        deleted_at:
          description: Timestamp of when the app was deleted.
          format: date-time
          type: string
        org_id:
          description: The Datadog organization ID that owns the app.
          format: int64
          type: integer
        updated_at:
          description: Timestamp of when the app was last updated.
          format: date-time
          type: string
        updated_since_deployment:
          description: >-
            Whether the app was updated since it was last published. Published
            apps are pinned to a specific version and do not automatically
            update when the app is updated.
          type: boolean
        user_id:
          description: The ID of the user who created the app.
          format: int64
          type: integer
        user_name:
          description: The name (or email address) of the user who created the app.
          type: string
        user_uuid:
          description: The UUID of the user who created the app.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        version:
          description: >-
            The version number of the app. This starts at 1 and increments with
            each update.
          format: int64
          type: integer
      type: object
    AppRelationship:
      description: The app's publication relationship and custom connections.
      properties:
        connections:
          description: Array of custom connections used by the app.
          items:
            $ref: '#/components/schemas/CustomConnection'
          type: array
        deployment:
          $ref: '#/components/schemas/DeploymentRelationship'
      type: object
    UpdateAppRequestData:
      description: >-
        The data object containing the new app definition. Any fields not
        included in the request remain unchanged.
      properties:
        attributes:
          $ref: '#/components/schemas/UpdateAppRequestDataAttributes'
        id:
          description: >-
            The ID of the app to update. The app ID must match the ID in the URL
            path.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/AppDefinitionType'
      required:
        - type
      type: object
    UpdateAppResponseData:
      description: The data object containing the updated app definition.
      properties:
        attributes:
          $ref: '#/components/schemas/UpdateAppResponseDataAttributes'
        id:
          description: The ID of the updated app.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/AppDefinitionType'
      required:
        - id
        - type
        - attributes
      type: object
    ContainerImageItem:
      description: Possible Container Image models.
      oneOf:
        - $ref: '#/components/schemas/ContainerImage'
        - $ref: '#/components/schemas/ContainerImageGroup'
    ContainerImagesResponseLinks:
      description: Pagination links.
      properties:
        first:
          description: Link to the first page.
          type: string
        last:
          description: Link to the last page.
          nullable: true
          type: string
        next:
          description: Link to the next page.
          nullable: true
          type: string
        prev:
          description: Link to previous page.
          nullable: true
          type: string
        self:
          description: Link to current page.
          type: string
      type: object
    ContainerImageMeta:
      description: Response metadata object.
      properties:
        pagination:
          $ref: '#/components/schemas/ContainerImageMetaPage'
      type: object
    ContainerItem:
      description: Possible Container models.
      oneOf:
        - $ref: '#/components/schemas/Container'
        - $ref: '#/components/schemas/ContainerGroup'
    ContainersResponseLinks:
      description: Pagination links.
      properties:
        first:
          description: Link to the first page.
          type: string
        last:
          description: Link to the last page.
          nullable: true
          type: string
        next:
          description: Link to the next page.
          nullable: true
          type: string
        prev:
          description: Link to previous page.
          nullable: true
          type: string
        self:
          description: Link to current page.
          type: string
      type: object
    ContainerMeta:
      description: Response metadata object.
      properties:
        pagination:
          $ref: '#/components/schemas/ContainerMetaPage'
      type: object
    DevicesListData:
      description: The devices list data
      properties:
        attributes:
          $ref: '#/components/schemas/DeviceAttributes'
        id:
          description: The device ID
          example: example:1.2.3.4
          type: string
        type:
          description: The type of the resource. The value should always be device.
          type: string
      type: object
    ListDevicesResponseMetadata:
      description: Object describing meta attributes of response.
      properties:
        page:
          $ref: '#/components/schemas/ListDevicesResponseMetadataPage'
      type: object
    GetDeviceData:
      description: Get device response data.
      properties:
        attributes:
          $ref: '#/components/schemas/GetDeviceAttributes'
        id:
          description: The device ID
          example: example:1.2.3.4
          type: string
        type:
          description: The type of the resource. The value should always be device.
          type: string
      type: object
    GetInterfacesData:
      description: The interfaces list data
      properties:
        attributes:
          $ref: '#/components/schemas/InterfaceAttributes'
        id:
          description: The interface ID
          example: example:1.2.3.4:99
          type: string
        type:
          description: The type of the resource. The value should always be interface.
          type: string
      type: object
    ListTagsResponseData:
      description: The list tags response data.
      properties:
        attributes:
          $ref: '#/components/schemas/ListTagsResponseDataAttributes'
        id:
          description: The device ID
          example: example:1.2.3.4
          type: string
        type:
          description: The type of the resource. The value should always be tags.
          type: string
      type: object
    SingleAggregatedConnectionResponseData:
      description: Object describing an aggregated connection.
      properties:
        attributes:
          $ref: >-
            #/components/schemas/SingleAggregatedConnectionResponseDataAttributes
        id:
          description: >-
            A unique identifier for the aggregated connection based on the group
            by values.
          type: string
        type:
          $ref: '#/components/schemas/SingleAggregatedConnectionResponseDataType'
      type: object
    SingleAggregatedDnsResponseData:
      description: Object describing an aggregated DNS flow.
      properties:
        attributes:
          $ref: '#/components/schemas/SingleAggregatedDnsResponseDataAttributes'
        id:
          description: >-
            A unique identifier for the aggregated DNS traffic based on the
            group by values.
          type: string
        type:
          $ref: '#/components/schemas/SingleAggregatedDnsResponseDataType'
      type: object
    ProcessSummary:
      description: Process summary object.
      properties:
        attributes:
          $ref: '#/components/schemas/ProcessSummaryAttributes'
        id:
          description: Process ID.
          type: string
        type:
          $ref: '#/components/schemas/ProcessSummaryType'
      type: object
    ProcessSummariesMeta:
      description: Response metadata object.
      properties:
        page:
          $ref: '#/components/schemas/ProcessSummariesMetaPage'
      type: object
    RecommendationData:
      description: >-
        JSON:API resource object for SPA Recommendation. Includes type, optional
        ID, and resource attributes with structured recommendations.
      properties:
        attributes:
          $ref: '#/components/schemas/RecommendationAttributes'
        id:
          description: Resource identifier for the recommendation. Optional in responses.
          type: string
        type:
          $ref: '#/components/schemas/RecommendationType'
      required:
        - type
        - attributes
      type: object
    AppDefinitionType:
      default: appDefinitions
      description: The app definition type.
      enum:
        - appDefinitions
      example: appDefinitions
      type: string
      x-enum-varnames:
        - APPDEFINITIONS
    JSONAPIErrorItemSource:
      description: References to the source of the error.
      properties:
        header:
          description: >-
            A string indicating the name of a single request header which caused
            the error.
          example: Authorization
          type: string
        parameter:
          description: A string indicating which URI query parameter caused the error.
          example: limit
          type: string
        pointer:
          description: >-
            A JSON pointer to the value in the request document that caused the
            error.
          example: /data/attributes/title
          type: string
      type: object
    ListAppsResponseDataItemsAttributes:
      description: Basic information about the app such as name, description, and tags.
      properties:
        description:
          description: A human-readable description for the app.
          type: string
        favorite:
          description: Whether the app is marked as a favorite by the current user.
          type: boolean
        name:
          description: The name of the app.
          type: string
        selfService:
          description: Whether the app is enabled for use in the Datadog self-service hub.
          type: boolean
        tags:
          description: A list of tags for the app, which can be used to filter apps.
          example:
            - service:webshop-backend
            - team:webshop
          items:
            description: An individual tag for the app.
            type: string
          type: array
      type: object
    ListAppsResponseDataItemsRelationships:
      description: The app's publication information.
      properties:
        deployment:
          $ref: '#/components/schemas/DeploymentRelationship'
      type: object
    DeploymentAttributes:
      description: The attributes object containing the version ID of the published app.
      properties:
        app_version_id:
          description: >-
            The version ID of the app that was published. For an unpublished
            app, this is always the nil UUID
            (`00000000-0000-0000-0000-000000000000`).
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
      type: object
    DeploymentMetadata:
      description: Metadata object containing the publication creation information.
      properties:
        created_at:
          description: Timestamp of when the app was published.
          format: date-time
          type: string
        user_id:
          description: The ID of the user who published the app.
          format: int64
          type: integer
        user_name:
          description: The name (or email address) of the user who published the app.
          type: string
        user_uuid:
          description: The UUID of the user who published the app.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
      type: object
    AppDeploymentType:
      default: deployment
      description: The deployment type.
      enum:
        - deployment
      example: deployment
      type: string
      x-enum-varnames:
        - DEPLOYMENT
    ListAppsResponseMetaPage:
      description: Information on the total number of apps, to be used for pagination.
      properties:
        totalCount:
          description: >-
            The total number of apps under the Datadog organization,
            disregarding any filters applied.
          format: int64
          type: integer
        totalFilteredCount:
          description: The total number of apps that match the specified filters.
          format: int64
          type: integer
      type: object
    CreateAppRequestDataAttributes:
      description: App definition attributes such as name, description, and components.
      properties:
        components:
          description: The UI components that make up the app.
          items:
            $ref: '#/components/schemas/ComponentGrid'
          type: array
        description:
          description: A human-readable description for the app.
          type: string
        name:
          description: The name of the app.
          type: string
        queries:
          description: >-
            An array of queries, such as external actions and state variables,
            that the app uses.
          items:
            $ref: '#/components/schemas/Query'
          type: array
        rootInstanceName:
          description: >-
            The name of the root component of the app. This must be a `grid`
            component that contains all other components.
          type: string
        tags:
          description: A list of tags for the app, which can be used to filter apps.
          example:
            - service:webshop-backend
            - team:webshop
          items:
            description: An individual tag for the app.
            type: string
          type: array
      type: object
    GetAppResponseDataAttributes:
      description: >-
        The app definition attributes, such as name, description, and
        components.
      properties:
        components:
          description: The UI components that make up the app.
          items:
            $ref: '#/components/schemas/ComponentGrid'
          type: array
        description:
          description: A human-readable description for the app.
          type: string
        favorite:
          description: Whether the app is marked as a favorite by the current user.
          type: boolean
        name:
          description: The name of the app.
          type: string
        queries:
          description: >-
            An array of queries, such as external actions and state variables,
            that the app uses.
          items:
            $ref: '#/components/schemas/Query'
          type: array
        rootInstanceName:
          description: >-
            The name of the root component of the app. This must be a `grid`
            component that contains all other components.
          type: string
        tags:
          description: A list of tags for the app, which can be used to filter apps.
          example:
            - service:webshop-backend
            - team:webshop
          items:
            description: An individual tag for the app.
            type: string
          type: array
      type: object
    CustomConnection:
      description: A custom connection used by an app.
      properties:
        attributes:
          $ref: '#/components/schemas/CustomConnectionAttributes'
        id:
          description: The ID of the custom connection.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/CustomConnectionType'
      type: object
    DeploymentRelationship:
      description: Information pointing to the app's publication status.
      properties:
        data:
          $ref: '#/components/schemas/DeploymentRelationshipData'
        meta:
          $ref: '#/components/schemas/DeploymentMetadata'
      type: object
    UpdateAppRequestDataAttributes:
      description: >-
        App definition attributes to be updated, such as name, description, and
        components.
      properties:
        components:
          description: >-
            The new UI components that make up the app. If this field is set,
            all existing components are replaced with the new components under
            this field.
          items:
            $ref: '#/components/schemas/ComponentGrid'
          type: array
        description:
          description: The new human-readable description for the app.
          type: string
        name:
          description: The new name of the app.
          type: string
        queries:
          description: >-
            The new array of queries, such as external actions and state
            variables, that the app uses. If this field is set, all existing
            queries are replaced with the new queries under this field.
          items:
            $ref: '#/components/schemas/Query'
          type: array
        rootInstanceName:
          description: >-
            The new name of the root component of the app. This must be a `grid`
            component that contains all other components.
          type: string
        tags:
          description: >-
            The new list of tags for the app, which can be used to filter apps.
            If this field is set, any existing tags not included in the request
            are removed.
          example:
            - service:webshop-backend
            - team:webshop
          items:
            description: An individual tag for the app.
            type: string
          type: array
      type: object
    UpdateAppResponseDataAttributes:
      description: >-
        The updated app definition attributes, such as name, description, and
        components.
      properties:
        components:
          description: The UI components that make up the app.
          items:
            $ref: '#/components/schemas/ComponentGrid'
          type: array
        description:
          description: The human-readable description for the app.
          type: string
        favorite:
          description: Whether the app is marked as a favorite by the current user.
          type: boolean
        name:
          description: The name of the app.
          type: string
        queries:
          description: >-
            An array of queries, such as external actions and state variables,
            that the app uses.
          items:
            $ref: '#/components/schemas/Query'
          type: array
        rootInstanceName:
          description: >-
            The name of the root component of the app. This must be a `grid`
            component that contains all other components.
          type: string
        tags:
          description: A list of tags for the app, which can be used to filter apps.
          example:
            - service:webshop-backend
            - team:webshop
          items:
            description: An individual tag for the app.
            type: string
          type: array
      type: object
    ContainerImage:
      description: Container Image object.
      properties:
        attributes:
          $ref: '#/components/schemas/ContainerImageAttributes'
        id:
          description: Container Image ID.
          type: string
        type:
          $ref: '#/components/schemas/ContainerImageType'
      type: object
    ContainerImageGroup:
      description: Container Image Group object.
      properties:
        attributes:
          $ref: '#/components/schemas/ContainerImageGroupAttributes'
        id:
          description: Container Image Group ID.
          type: string
        relationships:
          $ref: '#/components/schemas/ContainerImageGroupRelationships'
        type:
          $ref: '#/components/schemas/ContainerImageGroupType'
      type: object
    ContainerImageMetaPage:
      description: Paging attributes.
      properties:
        cursor:
          description: The cursor used to get the current results, if any.
          type: string
        limit:
          description: Number of results returned
          format: int32
          maximum: 10000
          minimum: 0
          type: integer
        next_cursor:
          description: The cursor used to get the next results, if any.
          type: string
        prev_cursor:
          description: The cursor used to get the previous results, if any.
          nullable: true
          type: string
        total:
          description: Total number of records that match the query.
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/ContainerImageMetaPageType'
      type: object
    Container:
      description: Container object.
      properties:
        attributes:
          $ref: '#/components/schemas/ContainerAttributes'
        id:
          description: Container ID.
          type: string
        type:
          $ref: '#/components/schemas/ContainerType'
      type: object
    ContainerGroup:
      description: Container group object.
      properties:
        attributes:
          $ref: '#/components/schemas/ContainerGroupAttributes'
        id:
          description: Container Group ID.
          type: string
        relationships:
          $ref: '#/components/schemas/ContainerGroupRelationships'
        type:
          $ref: '#/components/schemas/ContainerGroupType'
      type: object
    ContainerMetaPage:
      description: Paging attributes.
      properties:
        cursor:
          description: The cursor used to get the current results, if any.
          type: string
        limit:
          description: Number of results returned
          format: int32
          maximum: 10000
          minimum: 0
          type: integer
        next_cursor:
          description: The cursor used to get the next results, if any.
          type: string
        prev_cursor:
          description: The cursor used to get the previous results, if any.
          nullable: true
          type: string
        total:
          description: Total number of records that match the query.
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/ContainerMetaPageType'
      type: object
    DeviceAttributes:
      description: The device attributes
      properties:
        description:
          description: The device description
          example: a device monitored with NDM
          type: string
        device_type:
          description: The device type
          example: other
          type: string
        integration:
          description: The device integration
          example: snmp
          type: string
        interface_statuses:
          $ref: '#/components/schemas/DeviceAttributesInterfaceStatuses'
        ip_address:
          description: The device IP address
          example: 1.2.3.4
          type: string
        location:
          description: The device location
          example: paris
          type: string
        model:
          description: The device model
          example: xx-123
          type: string
        name:
          description: The device name
          example: example device
          type: string
        os_hostname:
          description: The device OS hostname
          type: string
        os_name:
          description: The device OS name
          example: example OS
          type: string
        os_version:
          description: The device OS version
          example: 1.0.2
          type: string
        ping_status:
          description: The device ping status
          example: unmonitored
          type: string
        product_name:
          description: The device product name
          example: example device
          type: string
        serial_number:
          description: The device serial number
          example: X12345
          type: string
        status:
          description: The device SNMP status
          example: ok
          type: string
        subnet:
          description: The device subnet
          example: 1.2.3.4/24
          type: string
        sys_object_id:
          description: The device `sys_object_id`
          example: 1.3.6.1.4.1.99999
          type: string
        tags:
          description: The list of device tags
          example:
            - device_ip:1.2.3.4
            - device_id:example:1.2.3.4
          items:
            type: string
          type: array
        vendor:
          description: The device vendor
          example: example vendor
          type: string
        version:
          description: The device version
          example: 1.2.3
          type: string
      type: object
    ListDevicesResponseMetadataPage:
      description: Pagination object.
      properties:
        total_filtered_count:
          description: Total count of devices matched by the filter.
          example: 1
          format: int64
          type: integer
      type: object
    GetDeviceAttributes:
      description: The device attributes
      properties:
        description:
          description: A description of the device.
          example: a device monitored with NDM
          type: string
        device_type:
          description: The type of the device.
          example: other
          type: string
        integration:
          description: The integration of the device.
          example: snmp
          type: string
        ip_address:
          description: The IP address of the device.
          example: 1.2.3.4
          type: string
        location:
          description: The location of the device.
          example: paris
          type: string
        model:
          description: The model of the device.
          example: xx-123
          type: string
        name:
          description: The name of the device.
          example: example device
          type: string
        os_hostname:
          description: The operating system hostname of the device.
          example: 1.0.2
          type: string
        os_name:
          description: The operating system name of the device.
          example: example OS
          type: string
        os_version:
          description: The operating system version of the device.
          example: 1.0.2
          type: string
        ping_status:
          description: The ping status of the device.
          example: unmonitored
          type: string
        product_name:
          description: The product name of the device.
          example: example device
          type: string
        serial_number:
          description: The serial number of the device.
          example: X12345
          type: string
        status:
          description: The status of the device.
          example: ok
          type: string
        subnet:
          description: The subnet of the device.
          example: 1.2.3.4/24
          type: string
        sys_object_id:
          description: The device `sys_object_id`.
          example: 1.3.6.1.4.1.99999
          type: string
        tags:
          description: A list of tags associated with the device.
          example:
            - device_ip:1.2.3.4
            - device_id:example:1.2.3.4
          items:
            type: string
          type: array
        vendor:
          description: The vendor of the device.
          example: example vendor
          type: string
        version:
          description: The version of the device.
          example: 1.2.3
          type: string
      type: object
    InterfaceAttributes:
      description: The interface attributes
      properties:
        alias:
          description: The interface alias
          example: interface_0
          type: string
        description:
          description: The interface description
          example: a network interface
          type: string
        index:
          description: The interface index
          example: 0
          format: int64
          type: integer
        ip_addresses:
          description: The interface IP addresses
          example:
            - 1.1.1.1
            - 1.1.1.2
          items:
            type: string
          type: array
        mac_address:
          description: The interface MAC address
          example: '00:00:00:00:00:00'
          type: string
        name:
          description: The interface name
          example: if0
          type: string
        status:
          $ref: '#/components/schemas/InterfaceAttributesStatus'
      type: object
    ListTagsResponseDataAttributes:
      description: The definition of ListTagsResponseDataAttributes object.
      properties:
        tags:
          description: The list of tags
          example:
            - tag:test
            - tag:testbis
          items:
            type: string
          type: array
      type: object
    SingleAggregatedConnectionResponseDataAttributes:
      description: Attributes for an aggregated connection.
      properties:
        bytes_sent_by_client:
          description: The total number of bytes sent by the client over the given period.
          format: int64
          type: integer
        bytes_sent_by_server:
          description: The total number of bytes sent by the server over the given period.
          format: int64
          type: integer
        group_bys:
          additionalProperties:
            description: The values for each group by.
            items:
              type: string
            type: array
          description: The key, value pairs for each group by.
          type: object
        packets_sent_by_client:
          description: >-
            The total number of packets sent by the client over the given
            period.
          format: int64
          type: integer
        packets_sent_by_server:
          description: >-
            The total number of packets sent by the server over the given
            period.
          format: int64
          type: integer
        rtt_micro_seconds:
          description: >-
            Measured as TCP smoothed round trip time in microseconds (the time
            between a TCP frame being sent and acknowledged).
          format: int64
          type: integer
        tcp_closed_connections:
          description: >-
            The number of TCP connections in a closed state. Measured in
            connections per second from the client.
          format: int64
          type: integer
        tcp_established_connections:
          description: >-
            The number of TCP connections in an established state. Measured in
            connections per second from the client.
          format: int64
          type: integer
        tcp_refusals:
          description: >-
            The number of TCP connections that were refused by the server.
            Typically this indicates an attempt to connect to an IP/port that is
            not receiving connections, or a firewall/security misconfiguration.
          format: int64
          type: integer
        tcp_resets:
          description: The number of TCP connections that were reset by the server.
          format: int64
          type: integer
        tcp_retransmits:
          description: >-
            TCP Retransmits represent detected failures that are retransmitted
            to ensure delivery. Measured in count of retransmits from the
            client.
          format: int64
          type: integer
        tcp_timeouts:
          description: >-
            The number of TCP connections that timed out from the perspective of
            the operating system. This can indicate general connectivity and
            latency issues.
          format: int64
          type: integer
      type: object
    SingleAggregatedConnectionResponseDataType:
      default: aggregated_connection
      description: Aggregated connection resource type.
      enum:
        - aggregated_connection
      type: string
      x-enum-varnames:
        - AGGREGATED_CONNECTION
    SingleAggregatedDnsResponseDataAttributes:
      description: Attributes for an aggregated DNS flow.
      properties:
        group_bys:
          description: The key, value pairs for each group by.
          items:
            $ref: >-
              #/components/schemas/SingleAggregatedDnsResponseDataAttributesGroupByItems
          type: array
        metrics:
          description: Metrics associated with an aggregated DNS flow.
          items:
            $ref: >-
              #/components/schemas/SingleAggregatedDnsResponseDataAttributesMetricsItems
          type: array
      type: object
    SingleAggregatedDnsResponseDataType:
      default: aggregated_dns
      description: Aggregated DNS resource type.
      enum:
        - aggregated_dns
      type: string
      x-enum-varnames:
        - AGGREGATED_DNS
    ProcessSummaryAttributes:
      description: Attributes for a process summary.
      properties:
        cmdline:
          description: Process command line.
          type: string
        host:
          description: Host running the process.
          type: string
        pid:
          description: Process ID.
          format: int64
          type: integer
        ppid:
          description: Parent process ID.
          format: int64
          type: integer
        start:
          description: Time the process was started.
          type: string
        tags:
          description: List of tags associated with the process.
          items:
            description: A tag associated with the process.
            type: string
          type: array
        timestamp:
          description: Time the process was seen.
          type: string
        user:
          description: Process owner.
          type: string
      type: object
    ProcessSummaryType:
      default: process
      description: Type of process summary.
      enum:
        - process
      example: process
      type: string
      x-enum-varnames:
        - PROCESS
    ProcessSummariesMetaPage:
      description: Paging attributes.
      properties:
        after:
          description: >-
            The cursor used to get the next results, if any. To make the next
            request, use the same

            parameters with the addition of the `page[cursor]`.
          example: 911abf1204838d9cdfcb9a96d0b6a1bd03e1b514074f1ce1737c4cbd
          type: string
        size:
          description: Number of results returned.
          format: int32
          maximum: 10000
          minimum: 0
          type: integer
      type: object
    RecommendationAttributes:
      description: >-
        Attributes of the SPA Recommendation resource. Contains recommendations
        for both driver and executor components.
      properties:
        driver:
          $ref: '#/components/schemas/ComponentRecommendation'
        executor:
          $ref: '#/components/schemas/ComponentRecommendation'
      required:
        - driver
        - executor
      type: object
    RecommendationType:
      default: recommendation
      description: >-
        JSON:API resource type for Spark Pod Autosizing recommendations.
        Identifies the Recommendation resource returned by SPA.
      enum:
        - recommendation
      example: recommendation
      type: string
      x-enum-varnames:
        - RECOMMENDATION
    ComponentGrid:
      description: >-
        A grid component. The grid component is the root canvas for an app and
        contains all other components.
      properties:
        events:
          description: Events to listen for on the grid component.
          items:
            $ref: '#/components/schemas/AppBuilderEvent'
          type: array
        id:
          description: >-
            The ID of the grid component. This property is deprecated; use
            `name` to identify individual components instead.
          type: string
        name:
          description: >-
            A unique identifier for this grid component. This name is also
            visible in the app editor.
          example: ''
          type: string
        properties:
          $ref: '#/components/schemas/ComponentGridProperties'
        type:
          $ref: '#/components/schemas/ComponentGridType'
      required:
        - name
        - type
        - properties
      type: object
    Query:
      description: >-
        A data query used by an app. This can take the form of an external
        action, a data transformation, or a state variable.
      oneOf:
        - $ref: '#/components/schemas/ActionQuery'
        - $ref: '#/components/schemas/DataTransform'
        - $ref: '#/components/schemas/StateVariable'
    CustomConnectionAttributes:
      description: The custom connection attributes.
      properties:
        name:
          description: The name of the custom connection.
          type: string
        onPremRunner:
          $ref: '#/components/schemas/CustomConnectionAttributesOnPremRunner'
      type: object
    CustomConnectionType:
      default: custom_connections
      description: The custom connection type.
      enum:
        - custom_connections
      example: custom_connections
      type: string
      x-enum-varnames:
        - CUSTOM_CONNECTIONS
    DeploymentRelationshipData:
      description: Data object containing the deployment ID.
      properties:
        id:
          description: The deployment ID.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/AppDeploymentType'
      type: object
    ContainerImageAttributes:
      description: Attributes for a Container Image.
      properties:
        container_count:
          description: Number of containers running the image.
          format: int64
          type: integer
        image_flavors:
          description: |-
            List of platform-specific images associated with the image record.
            The list contains more than 1 entry for multi-architecture images.
          items:
            $ref: '#/components/schemas/ContainerImageFlavor'
          type: array
        image_tags:
          description: List of image tags associated with the Container Image.
          items:
            description: An image tag associated with the Container Image.
            type: string
          type: array
        images_built_at:
          description: |-
            List of build times associated with the Container Image.
            The list contains more than 1 entry for multi-architecture images.
          items:
            description: Time the platform-specific Container Image was built.
            type: string
          type: array
        name:
          description: Name of the Container Image.
          type: string
        os_architectures:
          description: >-
            List of Operating System architectures supported by the Container
            Image.
          items:
            description: Operating System architecture supported by the Container Image.
            example: amd64
            type: string
          type: array
        os_names:
          description: List of Operating System names supported by the Container Image.
          items:
            description: Operating System supported by the Container Image.
            example: linux
            type: string
          type: array
        os_versions:
          description: List of Operating System versions supported by the Container Image.
          items:
            description: Operating System version supported by the Container Image.
            type: string
          type: array
        published_at:
          description: Time the image was pushed to the container registry.
          type: string
        registry:
          description: Registry the Container Image was pushed to.
          type: string
        repo_digest:
          description: Digest of the compressed image manifest.
          type: string
        repository:
          description: Repository where the Container Image is stored in.
          type: string
        short_image:
          description: Short version of the Container Image name.
          type: string
        sizes:
          description: >-
            List of size for each platform-specific image associated with the
            image record.

            The list contains more than 1 entry for multi-architecture images.
          items:
            description: Size of the platform-specific Container Image.
            format: int64
            type: integer
          type: array
        sources:
          description: List of sources where the Container Image was collected from.
          items:
            description: Source where the Container Image was collected from.
            type: string
          type: array
        tags:
          description: List of tags associated with the Container Image.
          items:
            description: A tag associated with the Container Image.
            type: string
          type: array
        vulnerability_count:
          $ref: '#/components/schemas/ContainerImageVulnerabilities'
      type: object
    ContainerImageType:
      default: container_image
      description: Type of Container Image.
      enum:
        - container_image
      example: container_image
      type: string
      x-enum-varnames:
        - CONTAINER_IMAGE
    ContainerImageGroupAttributes:
      description: Attributes for a Container Image Group.
      properties:
        count:
          description: Number of Container Images in the group.
          format: int64
          type: integer
        name:
          description: Name of the Container Image group.
          type: string
        tags:
          description: Tags from the group name parsed in key/value format.
          type: object
      type: object
    ContainerImageGroupRelationships:
      description: Relationships inside a Container Image Group.
      properties:
        container_images:
          $ref: '#/components/schemas/ContainerImageGroupImagesRelationshipsLink'
      type: object
    ContainerImageGroupType:
      default: container_image_group
      description: Type of Container Image Group.
      enum:
        - container_image_group
      example: container_image_group
      type: string
      x-enum-varnames:
        - CONTAINER_IMAGE_GROUP
    ContainerImageMetaPageType:
      default: cursor_limit
      description: Type of Container Image pagination.
      enum:
        - cursor_limit
      example: cursor_limit
      type: string
      x-enum-varnames:
        - CURSOR_LIMIT
    ContainerAttributes:
      description: Attributes for a container.
      properties:
        container_id:
          description: The ID of the container.
          type: string
        created_at:
          description: Time the container was created.
          type: string
        host:
          description: Hostname of the host running the container.
          type: string
        image_digest:
          description: Digest of the compressed image manifest.
          nullable: true
          type: string
        image_name:
          description: Name of the associated container image.
          type: string
        image_tags:
          description: List of image tags associated with the container image.
          items:
            type: string
          nullable: true
          type: array
        name:
          description: Name of the container.
          type: string
        started_at:
          description: Time the container was started.
          type: string
        state:
          description: State of the container. This depends on the container runtime.
          type: string
        tags:
          description: List of tags associated with the container.
          items:
            type: string
          type: array
      type: object
    ContainerType:
      default: container
      description: Type of container.
      enum:
        - container
      example: container
      type: string
      x-enum-varnames:
        - CONTAINER
    ContainerGroupAttributes:
      description: Attributes for a container group.
      properties:
        count:
          description: Number of containers in the group.
          format: int64
          type: integer
        tags:
          description: Tags from the group name parsed in key/value format.
          type: object
      type: object
    ContainerGroupRelationships:
      description: Relationships to containers inside a container group.
      properties:
        containers:
          $ref: '#/components/schemas/ContainerGroupRelationshipsLink'
      type: object
    ContainerGroupType:
      default: container_group
      description: Type of container group.
      enum:
        - container_group
      example: container_group
      type: string
      x-enum-varnames:
        - CONTAINER_GROUP
    ContainerMetaPageType:
      default: cursor_limit
      description: Type of Container pagination.
      enum:
        - cursor_limit
      example: cursor_limit
      type: string
      x-enum-varnames:
        - CURSOR_LIMIT
    DeviceAttributesInterfaceStatuses:
      description: Count of the device interfaces by status
      example:
        down: 1
        'off': 2
        up: 12
        warning: 5
      properties:
        down:
          description: The number of interfaces that are down
          format: int64
          type: integer
        'off':
          description: The number of interfaces that are off
          format: int64
          type: integer
        up:
          description: The number of interfaces that are up
          format: int64
          type: integer
        warning:
          description: The number of interfaces that are in a warning state
          format: int64
          type: integer
      type: object
    InterfaceAttributesStatus:
      description: The interface status
      enum:
        - up
        - down
        - warning
        - 'off'
      example: up
      type: string
      x-enum-varnames:
        - UP
        - DOWN
        - WARNING
        - 'OFF'
    SingleAggregatedDnsResponseDataAttributesGroupByItems:
      description: Attributes associated with a group by
      properties:
        key:
          description: The group by key.
          type: string
        value:
          description: The group by value.
          type: string
      type: object
    SingleAggregatedDnsResponseDataAttributesMetricsItems:
      description: Metrics associated with an aggregated DNS flow.
      properties:
        key:
          $ref: '#/components/schemas/DnsMetricKey'
        value:
          description: The metric value.
          format: int64
          type: integer
      type: object
    ComponentRecommendation:
      description: >-
        Resource recommendation for a single Spark component (driver or
        executor). Contains estimation data used to patch Spark job specs.
      properties:
        estimation:
          $ref: '#/components/schemas/Estimation'
      required:
        - estimation
      type: object
    AppBuilderEvent:
      additionalProperties: {}
      description: An event on a UI component that triggers a response or action in an app.
      properties:
        name:
          $ref: '#/components/schemas/AppBuilderEventName'
        type:
          $ref: '#/components/schemas/AppBuilderEventType'
      type: object
    ComponentGridProperties:
      description: Properties of a grid component.
      properties:
        backgroundColor:
          default: default
          description: The background color of the grid.
          type: string
        children:
          description: The child components of the grid.
          items:
            $ref: '#/components/schemas/Component'
          type: array
        isVisible:
          $ref: '#/components/schemas/ComponentGridPropertiesIsVisible'
      type: object
    ComponentGridType:
      default: grid
      description: The grid component type.
      enum:
        - grid
      example: grid
      type: string
      x-enum-varnames:
        - GRID
    ActionQuery:
      description: >-
        An action query. This query type is used to trigger an action, such as
        sending a HTTP request.
      properties:
        events:
          description: Events to listen for downstream of the action query.
          items:
            $ref: '#/components/schemas/AppBuilderEvent'
          type: array
        id:
          description: The ID of the action query.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        name:
          description: >-
            A unique identifier for this action query. This name is also used to
            access the query's result throughout the app.
          example: fetchPendingOrders
          type: string
        properties:
          $ref: '#/components/schemas/ActionQueryProperties'
        type:
          $ref: '#/components/schemas/ActionQueryType'
      required:
        - id
        - name
        - type
        - properties
      type: object
    DataTransform:
      description: >-
        A data transformer, which is custom JavaScript code that executes and
        transforms data when its inputs change.
      properties:
        id:
          description: The ID of the data transformer.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        name:
          description: >-
            A unique identifier for this data transformer. This name is also
            used to access the transformer's result throughout the app.
          example: combineTwoOrders
          type: string
        properties:
          $ref: '#/components/schemas/DataTransformProperties'
        type:
          $ref: '#/components/schemas/DataTransformType'
      required:
        - id
        - name
        - type
        - properties
      type: object
    StateVariable:
      description: A variable, which can be set and read by other components in the app.
      properties:
        id:
          description: The ID of the state variable.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        name:
          description: >-
            A unique identifier for this state variable. This name is also used
            to access the variable's value throughout the app.
          example: ordersToSubmit
          type: string
        properties:
          $ref: '#/components/schemas/StateVariableProperties'
        type:
          $ref: '#/components/schemas/StateVariableType'
      required:
        - id
        - name
        - type
        - properties
      type: object
    CustomConnectionAttributesOnPremRunner:
      description: >-
        Information about the Private Action Runner used by the custom
        connection, if the custom connection is associated with a Private Action
        Runner.
      properties:
        id:
          description: The Private Action Runner ID.
          type: string
        url:
          description: The URL of the Private Action Runner.
          type: string
      type: object
    ContainerImageFlavor:
      description: Container Image breakdown by supported platform.
      properties:
        built_at:
          description: Time the platform-specific Container Image was built.
          type: string
        os_architecture:
          description: Operating System architecture supported by the Container Image.
          type: string
        os_name:
          description: Operating System name supported by the Container Image.
          type: string
        os_version:
          description: Operating System version supported by the Container Image.
          type: string
        size:
          description: Size of the platform-specific Container Image.
          format: int64
          type: integer
      type: object
    ContainerImageVulnerabilities:
      description: Vulnerability counts associated with the Container Image.
      properties:
        asset_id:
          description: ID of the Container Image.
          type: string
        critical:
          description: Number of vulnerabilities with CVSS Critical severity.
          format: int64
          type: integer
        high:
          description: Number of vulnerabilities with CVSS High severity.
          format: int64
          type: integer
        low:
          description: Number of vulnerabilities with CVSS Low severity.
          format: int64
          type: integer
        medium:
          description: Number of vulnerabilities with CVSS Medium severity.
          format: int64
          type: integer
        none:
          description: Number of vulnerabilities with CVSS None severity.
          format: int64
          type: integer
        unknown:
          description: Number of vulnerabilities with an unknown CVSS severity.
          format: int64
          type: integer
      type: object
    ContainerImageGroupImagesRelationshipsLink:
      description: Relationships to Container Images inside a Container Image Group.
      properties:
        data:
          $ref: '#/components/schemas/ContainerImageGroupRelationshipsData'
        links:
          $ref: '#/components/schemas/ContainerImageGroupRelationshipsLinks'
      type: object
    ContainerGroupRelationshipsLink:
      description: Relationships to Containers inside a Container Group.
      properties:
        data:
          $ref: '#/components/schemas/ContainerGroupRelationshipsData'
        links:
          $ref: '#/components/schemas/ContainerGroupRelationshipsLinks'
      type: object
    DnsMetricKey:
      description: The metric key for DNS metrics.
      enum:
        - dns_total_requests
        - dns_failures
        - dns_successful_responses
        - dns_failed_responses
        - dns_timeouts
        - dns_responses.nxdomain
        - dns_responses.servfail
        - dns_responses.other
        - dns_success_latency_percentile
        - dns_failure_latency_percentile
      type: string
      x-enum-descriptions:
        - The total number of DNS requests made by the client.
        - The total number of timeouts and errors in DNS requests.
        - The total number of successful DNS responses.
        - The total number of failed DNS responses.
        - The total number of DNS timeouts.
        - The total number of DNS responses with the NXDOMAIN error code.
        - The total number of DNS responses with the SERVFAIL error code.
        - The total number of DNS responses with other error codes.
        - The latency percentile for successful DNS responses.
        - The latency percentile for failed DNS responses.
      x-enum-varnames:
        - DNS_TOTAL_REQUESTS
        - DNS_FAILURES
        - DNS_SUCCESSFUL_RESPONSES
        - DNS_FAILED_RESPONSES
        - DNS_TIMEOUTS
        - DNS_RESPONSES_NXDOMAIN
        - DNS_RESPONSES_SERVFAIL
        - DNS_RESPONSES_OTHER
        - DNS_SUCCESS_LATENCY_PERCENTILE
        - DNS_FAILURE_LATENCY_PERCENTILE
    Estimation:
      description: >-
        Recommended resource values for a Spark driver or executor, derived from
        recent real usage metrics. Used by SPA to propose more efficient pod
        sizing.
      properties:
        cpu:
          $ref: '#/components/schemas/Cpu'
        ephemeral_storage:
          description: >-
            Recommended ephemeral storage allocation (in MiB). Derived from job
            temporary storage patterns.
          format: int64
          type: integer
        heap:
          description: Recommended JVM heap size (in MiB).
          format: int64
          type: integer
        memory:
          description: >-
            Recommended total memory allocation (in MiB). Includes both heap and
            overhead.
          format: int64
          type: integer
        overhead:
          description: Recommended JVM overhead (in MiB). Computed as total memory - heap.
          format: int64
          type: integer
      type: object
    AppBuilderEventName:
      description: The triggering action for the event.
      enum:
        - pageChange
        - tableRowClick
        - _tableRowButtonClick
        - change
        - submit
        - click
        - toggleOpen
        - close
        - open
        - executionFinished
      example: click
      type: string
      x-enum-varnames:
        - PAGECHANGE
        - TABLEROWCLICK
        - TABLEROWBUTTONCLICK
        - CHANGE
        - SUBMIT
        - CLICK
        - TOGGLEOPEN
        - CLOSE
        - OPEN
        - EXECUTIONFINISHED
    AppBuilderEventType:
      description: The response to the event.
      enum:
        - custom
        - setComponentState
        - triggerQuery
        - openModal
        - closeModal
        - openUrl
        - downloadFile
        - setStateVariableValue
      example: triggerQuery
      type: string
      x-enum-varnames:
        - CUSTOM
        - SETCOMPONENTSTATE
        - TRIGGERQUERY
        - OPENMODAL
        - CLOSEMODAL
        - OPENURL
        - DOWNLOADFILE
        - SETSTATEVARIABLEVALUE
    Component:
      description: >-
        [Definition of a UI component in the
        app](https://docs.datadoghq.com/service_management/app_builder/components/)
      properties:
        events:
          description: Events to listen for on the UI component.
          items:
            $ref: '#/components/schemas/AppBuilderEvent'
          type: array
        id:
          description: >-
            The ID of the UI component. This property is deprecated; use `name`
            to identify individual components instead.
          nullable: true
          type: string
        name:
          description: >-
            A unique identifier for this UI component. This name is also visible
            in the app editor.
          example: ''
          type: string
        properties:
          $ref: '#/components/schemas/ComponentProperties'
        type:
          $ref: '#/components/schemas/ComponentType'
      required:
        - name
        - type
        - properties
      type: object
    ComponentGridPropertiesIsVisible:
      description: >-
        Whether the grid component and its children are visible. If a string, it
        must be a valid JavaScript expression that evaluates to a boolean.
      oneOf:
        - type: string
        - default: true
          type: boolean
    ActionQueryProperties:
      description: The properties of the action query.
      properties:
        condition:
          $ref: '#/components/schemas/ActionQueryCondition'
        debounceInMs:
          $ref: '#/components/schemas/ActionQueryDebounceInMs'
        mockedOutputs:
          $ref: '#/components/schemas/ActionQueryMockedOutputs'
        onlyTriggerManually:
          $ref: '#/components/schemas/ActionQueryOnlyTriggerManually'
        outputs:
          description: >-
            The post-query transformation function, which is a JavaScript
            function that changes the query's `.outputs` property after the
            query's execution.
          example: ${((outputs) => {return outputs.body.data})(self.rawOutputs)}
          type: string
        pollingIntervalInMs:
          $ref: '#/components/schemas/ActionQueryPollingIntervalInMs'
        requiresConfirmation:
          $ref: '#/components/schemas/ActionQueryRequiresConfirmation'
        showToastOnError:
          $ref: '#/components/schemas/ActionQueryShowToastOnError'
        spec:
          $ref: '#/components/schemas/ActionQuerySpec'
      required:
        - spec
      type: object
    ActionQueryType:
      default: action
      description: The action query type.
      enum:
        - action
      example: action
      type: string
      x-enum-varnames:
        - ACTION
    DataTransformProperties:
      description: The properties of the data transformer.
      properties:
        outputs:
          description: A JavaScript function that returns the transformed data.
          example: |-
            ${(() => {return {
                allItems: [...fetchOrder1.outputs.items, ...fetchOrder2.outputs.items],
            }})()}
          type: string
      type: object
    DataTransformType:
      default: dataTransform
      description: The data transform type.
      enum:
        - dataTransform
      example: dataTransform
      type: string
      x-enum-varnames:
        - DATATRANSFORM
    StateVariableProperties:
      description: The properties of the state variable.
      properties:
        defaultValue:
          description: The default value of the state variable.
          example: ${['order_3145', 'order_4920']}
      type: object
    StateVariableType:
      default: stateVariable
      description: The state variable type.
      enum:
        - stateVariable
      example: stateVariable
      type: string
      x-enum-varnames:
        - STATEVARIABLE
    ContainerImageGroupRelationshipsData:
      description: Links data.
      items:
        description: A link data.
        type: string
      type: array
    ContainerImageGroupRelationshipsLinks:
      description: Links attributes.
      properties:
        related:
          description: Link to related Container Images.
          type: string
      type: object
    ContainerGroupRelationshipsData:
      description: Links data.
      items:
        description: A link data.
        type: string
      type: array
    ContainerGroupRelationshipsLinks:
      description: Links attributes.
      properties:
        related:
          description: Link to related containers.
          type: string
      type: object
    Cpu:
      description: >-
        CPU usage statistics derived from historical Spark job metrics. Provides
        multiple estimates so users can choose between conservative and
        cost-saving risk profiles.
      properties:
        max:
          description: >-
            Maximum CPU usage observed for the job, expressed in millicores.
            This represents the upper bound of usage.
          format: int64
          type: integer
        p75:
          description: >-
            75th percentile of CPU usage (millicores). Represents a cost-saving
            configuration while covering most workloads.
          format: int64
          type: integer
        p95:
          description: >-
            95th percentile of CPU usage (millicores). Balances performance and
            cost, providing a safer margin than p75.
          format: int64
          type: integer
      type: object
      x-model-simple-name: SpaCpu
    ComponentProperties:
      additionalProperties: {}
      description: >-
        Properties of a UI component. Different component types can have their
        own additional unique properties. See the [components
        documentation](https://docs.datadoghq.com/service_management/app_builder/components/)
        for more detail on each component type and its properties.
      properties:
        children:
          description: The child components of the UI component.
          items:
            $ref: '#/components/schemas/Component'
          type: array
        isVisible:
          $ref: '#/components/schemas/ComponentPropertiesIsVisible'
      type: object
    ComponentType:
      description: The UI component type.
      enum:
        - table
        - textInput
        - textArea
        - button
        - text
        - select
        - modal
        - schemaForm
        - checkbox
        - tabs
        - vegaChart
        - radioButtons
        - numberInput
        - fileInput
        - jsonInput
        - gridCell
        - dateRangePicker
        - search
        - container
        - calloutValue
      example: text
      type: string
      x-enum-varnames:
        - TABLE
        - TEXTINPUT
        - TEXTAREA
        - BUTTON
        - TEXT
        - SELECT
        - MODAL
        - SCHEMAFORM
        - CHECKBOX
        - TABS
        - VEGACHART
        - RADIOBUTTONS
        - NUMBERINPUT
        - FILEINPUT
        - JSONINPUT
        - GRIDCELL
        - DATERANGEPICKER
        - SEARCH
        - CONTAINER
        - CALLOUTVALUE
    ActionQueryCondition:
      description: >-
        Whether to run this query. If specified, the query will only run if this
        condition evaluates to `true` in JavaScript and all other conditions are
        also met.
      oneOf:
        - type: boolean
        - example: ${true}
          type: string
    ActionQueryDebounceInMs:
      description: >-
        The minimum time in milliseconds that must pass before the query can be
        triggered again. This is useful for preventing accidental double-clicks
        from triggering the query multiple times.
      oneOf:
        - example: 310.5
          format: double
          type: number
        - description: >-
            If this is a string, it must be a valid JavaScript expression that
            evaluates to a number.
          example: ${1000}
          type: string
    ActionQueryMockedOutputs:
      description: >-
        The mocked outputs of the action query. This is useful for testing the
        app without actually running the action.
      oneOf:
        - type: string
        - $ref: '#/components/schemas/ActionQueryMockedOutputsObject'
    ActionQueryOnlyTriggerManually:
      description: >-
        Determines when this query is executed. If set to `false`, the query
        will run when the app loads and whenever any query arguments change. If
        set to `true`, the query will only run when manually triggered from
        elsewhere in the app.
      oneOf:
        - type: boolean
        - description: >-
            If this is a string, it must be a valid JavaScript expression that
            evaluates to a boolean.
          example: ${true}
          type: string
    ActionQueryPollingIntervalInMs:
      description: >-
        If specified, the app will poll the query at the specified interval in
        milliseconds. The minimum polling interval is 15 seconds. The query will
        only poll when the app's browser tab is active.
      oneOf:
        - example: 30000
          format: double
          minimum: 15000
          type: number
        - description: >-
            If this is a string, it must be a valid JavaScript expression that
            evaluates to a number.
          example: ${15000}
          type: string
    ActionQueryRequiresConfirmation:
      description: Whether to prompt the user to confirm this query before it runs.
      oneOf:
        - type: boolean
        - description: >-
            If this is a string, it must be a valid JavaScript expression that
            evaluates to a boolean.
          example: ${true}
          type: string
    ActionQueryShowToastOnError:
      description: Whether to display a toast to the user when the query returns an error.
      oneOf:
        - type: boolean
        - description: >-
            If this is a string, it must be a valid JavaScript expression that
            evaluates to a boolean.
          example: ${true}
          type: string
    ActionQuerySpec:
      description: The definition of the action query.
      oneOf:
        - type: string
        - $ref: '#/components/schemas/ActionQuerySpecObject'
    ComponentPropertiesIsVisible:
      description: >-
        Whether the UI component is visible. If this is a string, it must be a
        valid JavaScript expression that evaluates to a boolean.
      oneOf:
        - type: boolean
        - description: >-
            If this is a string, it must be a valid JavaScript expression that
            evaluates to a boolean.
          example: ${true}
          type: string
    ActionQueryMockedOutputsObject:
      description: The mocked outputs of the action query.
      properties:
        enabled:
          $ref: '#/components/schemas/ActionQueryMockedOutputsEnabled'
        outputs:
          description: The mocked outputs of the action query, serialized as JSON.
          example: '{"status": "success"}'
          type: string
      required:
        - enabled
      type: object
    ActionQuerySpecObject:
      description: The action query spec object.
      properties:
        connectionGroup:
          $ref: '#/components/schemas/ActionQuerySpecConnectionGroup'
        connectionId:
          description: The ID of the custom connection to use for this action query.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          type: string
        fqn:
          description: The fully qualified name of the action type.
          example: com.datadoghq.http.request
          type: string
        inputs:
          $ref: '#/components/schemas/ActionQuerySpecInputs'
      required:
        - fqn
      type: object
    ActionQueryMockedOutputsEnabled:
      description: Whether to enable the mocked outputs for testing.
      oneOf:
        - type: boolean
        - description: >-
            If this is a string, it must be a valid JavaScript expression that
            evaluates to a boolean.
          example: ${true}
          type: string
    ActionQuerySpecConnectionGroup:
      description: The connection group to use for an action query.
      properties:
        id:
          description: The ID of the connection group.
          example: 65bb1f25-52e1-4510-9f8d-22d1516ed693
          format: uuid
          type: string
        tags:
          description: The tags of the connection group.
          items:
            type: string
          type: array
      type: object
    ActionQuerySpecInputs:
      description: >-
        The inputs to the action query. These are the values that are passed to
        the action when it is triggered.
      oneOf:
        - type: string
        - $ref: '#/components/schemas/ActionQuerySpecInput'
    ActionQuerySpecInput:
      additionalProperties: {}
      description: >-
        The inputs to the action query. See the [Actions
        Catalog](https://docs.datadoghq.com/actions/actions_catalog/) for more
        detail on each action and its inputs.
      type: object
  responses:
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Too many requests
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    ForbiddenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Forbidden
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
    NotAuthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Authorized
  parameters:
    PageSize:
      description: Size for a given page. The maximum allowed value is 100.
      in: query
      name: page[size]
      required: false
      schema:
        default: 10
        example: 10
        format: int64
        type: integer
    PageNumber:
      description: Specific page number to return.
      in: query
      name: page[number]
      required: false
      schema:
        default: 0
        example: 0
        format: int64
        type: integer
  x-stackQL-resources:
    apps:
      id: datadog.infrastructure.apps
      name: apps
      title: Apps
      methods:
        delete_apps:
          operation:
            $ref: '#/paths/~1api~1v2~1app-builder~1apps/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_apps:
          operation:
            $ref: '#/paths/~1api~1v2~1app-builder~1apps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_app:
          operation:
            $ref: '#/paths/~1api~1v2~1app-builder~1apps/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_app:
          operation:
            $ref: '#/paths/~1api~1v2~1app-builder~1apps~1{app_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_app:
          operation:
            $ref: '#/paths/~1api~1v2~1app-builder~1apps~1{app_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_app:
          operation:
            $ref: '#/paths/~1api~1v2~1app-builder~1apps~1{app_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        unpublish_app:
          operation:
            $ref: '#/paths/~1api~1v2~1app-builder~1apps~1{app_id}~1deployment/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        publish_app:
          operation:
            $ref: '#/paths/~1api~1v2~1app-builder~1apps~1{app_id}~1deployment/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/apps/methods/get_app'
          - $ref: '#/components/x-stackQL-resources/apps/methods/list_apps'
        insert:
          - $ref: '#/components/x-stackQL-resources/apps/methods/create_app'
        update:
          - $ref: '#/components/x-stackQL-resources/apps/methods/update_app'
        delete:
          - $ref: '#/components/x-stackQL-resources/apps/methods/delete_app'
          - $ref: '#/components/x-stackQL-resources/apps/methods/delete_apps'
        replace: []
    container_images:
      id: datadog.infrastructure.container_images
      name: container_images
      title: Container Images
      methods:
        list_container_images:
          operation:
            $ref: '#/paths/~1api~1v2~1container_images/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/container_images/methods/list_container_images
        insert: []
        update: []
        delete: []
        replace: []
    containers:
      id: datadog.infrastructure.containers
      name: containers
      title: Containers
      methods:
        list_containers:
          operation:
            $ref: '#/paths/~1api~1v2~1containers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/containers/methods/list_containers
        insert: []
        update: []
        delete: []
        replace: []
    devices:
      id: datadog.infrastructure.devices
      name: devices
      title: Devices
      methods:
        list_devices:
          operation:
            $ref: '#/paths/~1api~1v2~1ndm~1devices/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        get_device:
          operation:
            $ref: '#/paths/~1api~1v2~1ndm~1devices~1{device_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/devices/methods/get_device'
          - $ref: '#/components/x-stackQL-resources/devices/methods/list_devices'
        insert: []
        update: []
        delete: []
        replace: []
    device_interfaces:
      id: datadog.infrastructure.device_interfaces
      name: device_interfaces
      title: Device Interfaces
      methods:
        get_interfaces:
          operation:
            $ref: '#/paths/~1api~1v2~1ndm~1interfaces/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/device_interfaces/methods/get_interfaces
        insert: []
        update: []
        delete: []
        replace: []
    device_user_tags:
      id: datadog.infrastructure.device_user_tags
      name: device_user_tags
      title: Device User Tags
      methods:
        list_device_user_tags:
          operation:
            $ref: '#/paths/~1api~1v2~1ndm~1tags~1devices~1{device_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_device_user_tags:
          operation:
            $ref: '#/paths/~1api~1v2~1ndm~1tags~1devices~1{device_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/device_user_tags/methods/list_device_user_tags
        insert: []
        update:
          - $ref: >-
              #/components/x-stackQL-resources/device_user_tags/methods/update_device_user_tags
        delete: []
        replace: []
    aggregated_connections:
      id: datadog.infrastructure.aggregated_connections
      name: aggregated_connections
      title: Aggregated Connections
      methods:
        get_aggregated_connections:
          operation:
            $ref: '#/paths/~1api~1v2~1network~1connections~1aggregate/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/aggregated_connections/methods/get_aggregated_connections
        insert: []
        update: []
        delete: []
        replace: []
    aggregated_dns:
      id: datadog.infrastructure.aggregated_dns
      name: aggregated_dns
      title: Aggregated Dns
      methods:
        get_aggregated_dns:
          operation:
            $ref: '#/paths/~1api~1v2~1network~1dns~1aggregate/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/aggregated_dns/methods/get_aggregated_dns
        insert: []
        update: []
        delete: []
        replace: []
    processes:
      id: datadog.infrastructure.processes
      name: processes
      title: Processes
      methods:
        list_processes:
          operation:
            $ref: '#/paths/~1api~1v2~1processes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/processes/methods/list_processes'
        insert: []
        update: []
        delete: []
        replace: []
    spa_recommendations:
      id: datadog.infrastructure.spa_recommendations
      name: spa_recommendations
      title: Spa Recommendations
      methods:
        get_sparecommendations:
          operation:
            $ref: '#/paths/~1api~1v2~1spa~1recommendations~1{service}~1{shard}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/spa_recommendations/methods/get_sparecommendations
        insert: []
        update: []
        delete: []
        replace: []
servers:
  - url: >-
      https://{region:^(?:[^\:/]+(?:\:[0-9]+)?|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(?:\:[0-9]+)?)$}/
    variables:
      region:
        default: datadoghq.com
