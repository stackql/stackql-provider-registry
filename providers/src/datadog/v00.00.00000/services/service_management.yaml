openapi: 3.0.0
info:
  title: service_management API
  description: datadog service_management API
  version: '1.0'
paths:
  /api/v2/cases:
    get:
      description: Search cases.
      operationId: SearchCases
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/CaseSortableFieldParameter'
        - description: Search query
          in: query
          name: filter
          required: false
          schema:
            example: status:open (team:case-management OR team:event-management)
            type: string
        - description: Specify if order is ascending or not
          in: query
          name: sort[asc]
          required: false
          schema:
            default: false
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CasesResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_read
      summary: Search cases
      tags:
        - Case Management
      x-pagination:
        limitParam: page[size]
        pageParam: page[number]
        resultsPath: data
    post:
      description: Create a Case
      operationId: CreateCase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseCreateRequest'
        description: Case payload
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_write
      summary: Create a case
      tags:
        - Case Management
  /api/v2/cases/projects:
    get:
      description: Get all projects.
      operationId: GetProjects
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_read
      summary: Get all projects
      tags:
        - Case Management
    post:
      description: Create a project.
      operationId: CreateProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
        description: Project payload
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_write
      summary: Create a project
      tags:
        - Case Management
  /api/v2/cases/projects/{project_id}:
    delete:
      description: Remove a project using the project's `id`.
      operationId: DeleteProject
      parameters:
        - $ref: '#/components/parameters/ProjectIDPathParameter'
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: API error response
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_write
      summary: Remove a project
      tags:
        - Case Management
    get:
      description: Get the details of a project by `project_id`.
      operationId: GetProject
      parameters:
        - $ref: '#/components/parameters/ProjectIDPathParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_read
      summary: Get the details of a project
      tags:
        - Case Management
  /api/v2/cases/{case_id}:
    get:
      description: Get the details of case by `case_id`
      operationId: GetCase
      parameters:
        - $ref: '#/components/parameters/CaseIDPathParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_read
      summary: Get the details of a case
      tags:
        - Case Management
  /api/v2/cases/{case_id}/archive:
    post:
      description: Archive case
      operationId: ArchiveCase
      parameters:
        - $ref: '#/components/parameters/CaseIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseEmptyRequest'
        description: Archive case payload
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_write
      summary: Archive case
      tags:
        - Case Management
  /api/v2/cases/{case_id}/assign:
    post:
      description: Assign case to a user
      operationId: AssignCase
      parameters:
        - $ref: '#/components/parameters/CaseIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseAssignRequest'
        description: Assign case payload
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_write
      summary: Assign case
      tags:
        - Case Management
  /api/v2/cases/{case_id}/attributes:
    post:
      description: Update case attributes
      operationId: UpdateAttributes
      parameters:
        - $ref: '#/components/parameters/CaseIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseUpdateAttributesRequest'
        description: Case attributes update payload
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_write
      summary: Update case attributes
      tags:
        - Case Management
  /api/v2/cases/{case_id}/priority:
    post:
      description: Update case priority
      operationId: UpdatePriority
      parameters:
        - $ref: '#/components/parameters/CaseIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseUpdatePriorityRequest'
        description: Case priority update payload
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_write
      summary: Update case priority
      tags:
        - Case Management
  /api/v2/cases/{case_id}/status:
    post:
      description: Update case status
      operationId: UpdateStatus
      parameters:
        - $ref: '#/components/parameters/CaseIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseUpdateStatusRequest'
        description: Case status update payload
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_write
      summary: Update case status
      tags:
        - Case Management
  /api/v2/cases/{case_id}/unarchive:
    post:
      description: Unarchive case
      operationId: UnarchiveCase
      parameters:
        - $ref: '#/components/parameters/CaseIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseEmptyRequest'
        description: Unarchive case payload
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_write
      summary: Unarchive case
      tags:
        - Case Management
  /api/v2/cases/{case_id}/unassign:
    post:
      description: Unassign case
      operationId: UnassignCase
      parameters:
        - $ref: '#/components/parameters/CaseIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseEmptyRequest'
        description: Unassign case payload
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - cases_write
      summary: Unassign case
      tags:
        - Case Management
  /api/v2/downtime:
    get:
      description: Get all scheduled downtimes.
      operationId: ListDowntimes
      parameters:
        - description: Only return downtimes that are active when the request is made.
          in: query
          name: current_only
          required: false
          schema:
            type: boolean
        - description: >-
            Comma-separated list of resource paths for related resources to
            include in the response. Supported resource

            paths are `created_by` and `monitor`.
          in: query
          name: include
          required: false
          schema:
            example: created_by,monitor
            type: string
        - $ref: '#/components/parameters/PageOffset'
        - description: Maximum number of downtimes in the response.
          example: 100
          in: query
          name: page[limit]
          required: false
          schema:
            default: 30
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDowntimesResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - monitors_downtime
      summary: Get all downtimes
      tags:
        - Downtimes
      x-pagination:
        limitParam: page[limit]
        pageOffsetParam: page[offset]
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - monitors_downtime
    post:
      description: Schedule a downtime.
      operationId: CreateDowntime
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DowntimeCreateRequest'
        description: Schedule a downtime request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DowntimeResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - monitors_downtime
      summary: Schedule a downtime
      tags:
        - Downtimes
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - monitors_downtime
  /api/v2/downtime/{downtime_id}:
    delete:
      description: >-
        Cancel a downtime.


        **Note**: Downtimes canceled through the API are no longer active, but
        are retained for approximately two days before being permanently
        removed. The downtime may still appear in search results until it is
        permanently removed.
      operationId: CancelDowntime
      parameters:
        - description: ID of the downtime to cancel.
          in: path
          name: downtime_id
          required: true
          schema:
            example: 00000000-0000-1234-0000-000000000000
            type: string
      responses:
        '204':
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Downtime not found
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - monitors_downtime
      summary: Cancel a downtime
      tags:
        - Downtimes
      x-permission:
        operator: OR
        permissions:
          - monitors_downtime
    get:
      description: Get downtime detail by `downtime_id`.
      operationId: GetDowntime
      parameters:
        - description: ID of the downtime to fetch.
          in: path
          name: downtime_id
          required: true
          schema:
            example: 00000000-0000-1234-0000-000000000000
            type: string
        - description: >-
            Comma-separated list of resource paths for related resources to
            include in the response. Supported resource

            paths are `created_by` and `monitor`.
          in: query
          name: include
          required: false
          schema:
            example: created_by,monitor
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DowntimeResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - monitors_downtime
      summary: Get a downtime
      tags:
        - Downtimes
      x-permission:
        operator: OR
        permissions:
          - monitors_downtime
    patch:
      description: Update a downtime by `downtime_id`.
      operationId: UpdateDowntime
      parameters:
        - description: ID of the downtime to update.
          in: path
          name: downtime_id
          required: true
          schema:
            example: 00e000000-0000-1234-0000-000000000000
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DowntimeUpdateRequest'
        description: Update a downtime request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DowntimeResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Downtime not found
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - monitors_downtime
      summary: Update a downtime
      tags:
        - Downtimes
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - monitors_downtime
  /api/v2/error-tracking/issues/search:
    post:
      description: >-
        Search issues endpoint allows you to programmatically search for issues
        within your organization. This endpoint returns a list of issues that
        match a given search query, following the event search syntax. The
        search results are limited to a maximum of 100 issues per request.
      operationId: SearchIssues
      parameters:
        - $ref: '#/components/parameters/SearchIssuesIncludeQueryParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuesSearchRequest'
        description: Search issues request payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuesSearchResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - error_tracking_read
      summary: Search error tracking issues
      tags:
        - Error Tracking
  /api/v2/error-tracking/issues/{issue_id}:
    get:
      description: >-
        Retrieve the full details for a specific error tracking issue, including
        attributes and relationships.
      operationId: GetIssue
      parameters:
        - $ref: '#/components/parameters/IssueIDPathParameter'
        - $ref: '#/components/parameters/GetIssueIncludeQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - error_tracking_read
      summary: Get the details of an error tracking issue
      tags:
        - Error Tracking
  /api/v2/error-tracking/issues/{issue_id}/assignee:
    put:
      description: Update the assignee of an issue by `issue_id`.
      operationId: UpdateIssueAssignee
      parameters:
        - $ref: '#/components/parameters/IssueIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueUpdateAssigneeRequest'
        description: Update issue assignee request payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - error_tracking_read
            - error_tracking_write
            - cases_read
            - cases_write
      summary: Update the assignee of an issue
      tags:
        - Error Tracking
  /api/v2/error-tracking/issues/{issue_id}/state:
    put:
      description: >-
        Update the state of an issue by `issue_id`. Use this endpoint to move an
        issue between states such as `OPEN`, `RESOLVED`, or `IGNORED`.
      operationId: UpdateIssueState
      parameters:
        - $ref: '#/components/parameters/IssueIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueUpdateStateRequest'
        description: Update issue state request payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - error_tracking_read
            - error_tracking_write
      summary: Update the state of an issue
      tags:
        - Error Tracking
  /api/v2/events:
    get:
      description: >-
        List endpoint returns events that match an events search query.

        [Results are paginated similarly to
        logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).


        Use this endpoint to see your latest events.
      operationId: ListEvents
      parameters:
        - description: Search query following events syntax.
          in: query
          name: filter[query]
          required: false
          schema:
            type: string
        - description: Minimum timestamp for requested events, in milliseconds.
          in: query
          name: filter[from]
          required: false
          schema:
            type: string
        - description: Maximum timestamp for requested events, in milliseconds.
          in: query
          name: filter[to]
          required: false
          schema:
            type: string
        - description: Order of events in results.
          in: query
          name: sort
          required: false
          schema:
            $ref: '#/components/schemas/EventsSort'
        - description: List following results with a cursor provided in the previous query.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          in: query
          name: page[cursor]
          required: false
          schema:
            type: string
        - description: Maximum number of events in the response.
          example: 25
          in: query
          name: page[limit]
          required: false
          schema:
            default: 10
            format: int32
            maximum: 1000
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - events_read
      summary: Get a list of events
      tags:
        - Events
      x-pagination:
        cursorParam: page[cursor]
        cursorPath: meta.page.after
        limitParam: page[limit]
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - events_read
    post:
      description: >-
        This endpoint allows you to publish events.


        **Note:** To utilize this endpoint with our client libraries, please
        ensure you are using the latest version released on or after July 1,
        2025. Earlier versions do not support this functionality.


        ✅ **Only events with the `change` or `alert` category** are in General
        Availability. For change events, see [Change
        Tracking](https://docs.datadoghq.com/change_tracking) for more details.


        ❌ For use cases involving other event categories, use the V1 endpoint or
        reach out to [support](https://www.datadoghq.com/support/).


        ❌ Notifications are not yet supported for events sent to this endpoint.
        Use the V1 endpoint for notification functionality.
      operationId: CreateEvent
      requestBody:
        content:
          application/json:
            examples:
              json-request-body:
                value:
                  data:
                    attributes:
                      aggregation_key: aggregation_key_123
                      attributes:
                        author:
                          name: example@datadog.com
                          type: user
                        change_metadata:
                          dd:
                            team: datadog_team
                            user_email: datadog@datadog.com
                            user_id: datadog_user_id
                            user_name: datadog_username
                          resource_link: datadog.com/feature/fallback_payments_test
                        changed_resource:
                          name: fallback_payments_test
                          type: feature_flag
                        impacted_resources:
                          - name: payments_api
                            type: service
                        new_value:
                          enabled: true
                          percentage: 50%
                          rule:
                            datacenter: devcycle.us1.prod
                        prev_value:
                          enabled: true
                          percentage: 10%
                          rule:
                            datacenter: devcycle.us1.prod
                      category: change
                      integration_id: custom-events
                      message: payment_processed feature flag has been enabled
                      tags:
                        - env:api_client_test
                      timestamp: '2020-01-01T01:30:15.010000Z'
                      title: payment_processed feature flag updated
                    type: event
            schema:
              $ref: '#/components/schemas/EventCreateRequestPayload'
        description: Event creation request payload.
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCreateResponsePayload'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Bad request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONAPIErrorResponse'
          description: Forbidden
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
      servers:
        - url: https://{subdomain}.{site}
          variables:
            site:
              default: datadoghq.com
              description: The regional site for customers.
              enum:
                - datadoghq.com
                - us3.datadoghq.com
                - us5.datadoghq.com
                - ap1.datadoghq.com
                - datadoghq.eu
                - ddog-gov.com
            subdomain:
              default: event-management-intake
              description: The subdomain where the API is deployed.
        - url: '{protocol}://{name}'
          variables:
            name:
              default: event-management-intake.datadoghq.com
              description: Full site DNS name.
            protocol:
              default: https
              description: The protocol for accessing the API.
        - url: https://{subdomain}.{site}
          variables:
            site:
              default: datadoghq.com
              description: Any Datadog deployment.
            subdomain:
              default: event-management-intake
              description: The subdomain where the API is deployed.
      summary: Post an event
      tags:
        - Events
      x-codegen-request-body-name: body
  /api/v2/events/search:
    post:
      description: >-
        List endpoint returns events that match an events search query.

        [Results are paginated similarly to
        logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).


        Use this endpoint to build complex events filtering and search.
      operationId: SearchEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventsListRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Search events
      tags:
        - Events
      x-codegen-request-body-name: body
      x-pagination:
        cursorParam: body.page.cursor
        cursorPath: meta.page.after
        limitParam: body.page.limit
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - events_read
  /api/v2/events/{event_id}:
    get:
      description: Get the details of an event by `event_id`.
      operationId: GetEvent
      parameters:
        - description: The UID of the event.
          in: path
          name: event_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2EventResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - events_read
      summary: Get an event
      tags:
        - Events
      x-permission:
        operator: OR
        permissions:
          - events_read
  /api/v2/incidents:
    get:
      description: Get all incidents for the user's organization.
      operationId: ListIncidents
      parameters:
        - $ref: '#/components/parameters/IncidentIncludeQueryParameter'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageOffset'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get a list of incidents
      tags:
        - Incidents
      x-pagination:
        limitParam: page[size]
        pageOffsetParam: page[offset]
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    post:
      description: Create an incident.
      operationId: CreateIncident
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentCreateRequest'
        description: Incident payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_write
      summary: Create an incident
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_write
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/config/notification-rules:
    get:
      description: >-
        Lists all notification rules for the organization. Optionally filter by
        incident type.
      operationId: ListIncidentNotificationRules
      parameters:
        - $ref: >-
            #/components/parameters/IncidentNotificationRuleIncludeQueryParameter
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentNotificationRuleArray'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_notification_settings_read
      summary: List incident notification rules
      tags:
        - Incidents
      x-permission:
        operator: AND
        permissions:
          - incident_notification_settings_read
      x-unstable: >-
        **Note**: This endpoint is in Preview.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    post:
      description: Creates a new notification rule.
      operationId: CreateIncidentNotificationRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIncidentNotificationRuleRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentNotificationRule'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_notification_settings_write
      summary: Create an incident notification rule
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: AND
        permissions:
          - incident_notification_settings_write
      x-unstable: >-
        **Note**: This endpoint is in Preview.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/config/notification-rules/{id}:
    delete:
      description: Deletes a notification rule by its ID.
      operationId: DeleteIncidentNotificationRule
      parameters:
        - $ref: '#/components/parameters/IncidentNotificationRuleIDPathParameter'
        - $ref: >-
            #/components/parameters/IncidentNotificationRuleIncludeQueryParameter
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_notification_settings_write
      summary: Delete an incident notification rule
      tags:
        - Incidents
      x-permission:
        operator: AND
        permissions:
          - incident_notification_settings_write
      x-unstable: >-
        **Note**: This endpoint is in Preview.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    get:
      description: Retrieves a specific notification rule by its ID.
      operationId: GetIncidentNotificationRule
      parameters:
        - $ref: '#/components/parameters/IncidentNotificationRuleIDPathParameter'
        - $ref: >-
            #/components/parameters/IncidentNotificationRuleIncludeQueryParameter
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentNotificationRule'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_notification_settings_read
      summary: Get an incident notification rule
      tags:
        - Incidents
      x-permission:
        operator: AND
        permissions:
          - incident_notification_settings_read
      x-unstable: >-
        **Note**: This endpoint is in Preview.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    put:
      description: Updates an existing notification rule with a complete replacement.
      operationId: UpdateIncidentNotificationRule
      parameters:
        - $ref: '#/components/parameters/IncidentNotificationRuleIDPathParameter'
        - $ref: >-
            #/components/parameters/IncidentNotificationRuleIncludeQueryParameter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIncidentNotificationRuleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentNotificationRule'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_notification_settings_write
      summary: Update an incident notification rule
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: AND
        permissions:
          - incident_notification_settings_write
      x-unstable: >-
        **Note**: This endpoint is in Preview.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/config/notification-templates:
    get:
      description: Lists all notification templates. Optionally filter by incident type.
      operationId: ListIncidentNotificationTemplates
      parameters:
        - $ref: >-
            #/components/parameters/IncidentNotificationTemplateIncidentTypeFilterQueryParameter
        - $ref: >-
            #/components/parameters/IncidentNotificationTemplateIncludeQueryParameter
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentNotificationTemplateArray'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_settings_read
      summary: List incident notification templates
      tags:
        - Incidents
      x-permission:
        operator: AND
        permissions:
          - incident_notification_settings_read
      x-unstable: >-
        **Note**: This endpoint is in Preview.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    post:
      description: Creates a new notification template.
      operationId: CreateIncidentNotificationTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIncidentNotificationTemplateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentNotificationTemplate'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_notification_settings_write
      summary: Create incident notification template
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: AND
        permissions:
          - incident_notification_settings_write
      x-unstable: >-
        **Note**: This endpoint is in Preview.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/config/notification-templates/{id}:
    delete:
      description: Deletes a notification template by its ID.
      operationId: DeleteIncidentNotificationTemplate
      parameters:
        - $ref: '#/components/parameters/IncidentNotificationTemplateIDPathParameter'
        - $ref: >-
            #/components/parameters/IncidentNotificationTemplateIncludeQueryParameter
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_notification_settings_write
      summary: Delete a notification template
      tags:
        - Incidents
      x-permission:
        operator: AND
        permissions:
          - incident_notification_settings_write
      x-unstable: >-
        **Note**: This endpoint is in Preview.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    get:
      description: Retrieves a specific notification template by its ID.
      operationId: GetIncidentNotificationTemplate
      parameters:
        - $ref: '#/components/parameters/IncidentNotificationTemplateIDPathParameter'
        - $ref: >-
            #/components/parameters/IncidentNotificationTemplateIncludeQueryParameter
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentNotificationTemplate'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_settings_read
      summary: Get incident notification template
      tags:
        - Incidents
      x-permission:
        operator: OR
        permissions:
          - incident_settings_read
          - incident_write
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is in Preview.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    patch:
      description: Updates an existing notification template's attributes.
      operationId: UpdateIncidentNotificationTemplate
      parameters:
        - $ref: '#/components/parameters/IncidentNotificationTemplateIDPathParameter'
        - $ref: >-
            #/components/parameters/IncidentNotificationTemplateIncludeQueryParameter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchIncidentNotificationTemplateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentNotificationTemplate'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_notification_settings_write
      summary: Update incident notification template
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: AND
        permissions:
          - incident_notification_settings_write
      x-unstable: >-
        **Note**: This endpoint is in Preview.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/config/types:
    get:
      description: Get all incident types.
      operationId: ListIncidentTypes
      parameters:
        - $ref: '#/components/parameters/IncidentTypeIncludeDeletedParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTypeListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get a list of incident types
      tags:
        - Incidents
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    post:
      description: Create an incident type.
      operationId: CreateIncidentType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTypeCreateRequest'
        description: Incident type payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTypeResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_settings_write
      summary: Create an incident type
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_settings_write
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/config/types/{incident_type_id}:
    delete:
      description: Delete an incident type.
      operationId: DeleteIncidentType
      parameters:
        - $ref: '#/components/parameters/IncidentTypeIDPathParameter'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_settings_write
      summary: Delete an incident type
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_settings_write
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    get:
      description: Get incident type details.
      operationId: GetIncidentType
      parameters:
        - $ref: '#/components/parameters/IncidentTypeIDPathParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTypeResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get incident type details
      tags:
        - Incidents
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    patch:
      description: Update an incident type.
      operationId: UpdateIncidentType
      parameters:
        - $ref: '#/components/parameters/IncidentTypeIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTypePatchRequest'
        description: Incident type payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTypeResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_settings_write
      summary: Update an incident type
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_settings_write
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/search:
    get:
      description: Search for incidents matching a certain query.
      operationId: SearchIncidents
      parameters:
        - $ref: '#/components/parameters/IncidentSearchIncludeQueryParameter'
        - $ref: '#/components/parameters/IncidentSearchQueryQueryParameter'
        - $ref: '#/components/parameters/IncidentSearchSortQueryParameter'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageOffset'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentSearchResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Search for incidents
      tags:
        - Incidents
      x-pagination:
        limitParam: page[size]
        pageOffsetParam: page[offset]
        resultsPath: data.attributes.incidents
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/{incident_id}:
    delete:
      description: Deletes an existing incident from the users organization.
      operationId: DeleteIncident
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_write
      summary: Delete an existing incident
      tags:
        - Incidents
      x-permission:
        operator: OR
        permissions:
          - incident_write
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    get:
      description: Get the details of an incident by `incident_id`.
      operationId: GetIncident
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
        - $ref: '#/components/parameters/IncidentIncludeQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get the details of an incident
      tags:
        - Incidents
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    patch:
      description: >-
        Updates an incident. Provide only the attributes that should be updated
        as this request is a partial update.
      operationId: UpdateIncident
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
        - $ref: '#/components/parameters/IncidentIncludeQueryParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentUpdateRequest'
        description: Incident Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_write
      summary: Update an existing incident
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_write
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/{incident_id}/attachments:
    get:
      description: Get all attachments for a given incident.
      operationId: ListIncidentAttachments
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
        - $ref: '#/components/parameters/IncidentAttachmentIncludeQueryParameter'
        - $ref: '#/components/parameters/IncidentAttachmentFilterQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentAttachmentsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Get a list of attachments
      tags:
        - Incidents
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    patch:
      description: >-
        The bulk update endpoint for creating, updating, and deleting
        attachments for a given incident.
      operationId: UpdateIncidentAttachments
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
        - $ref: '#/components/parameters/IncidentAttachmentIncludeQueryParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentAttachmentUpdateRequest'
        description: Incident Attachment Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentAttachmentUpdateResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      summary: Create, update, and delete incident attachments
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_write
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/{incident_id}/relationships/integrations:
    get:
      description: Get all integration metadata for an incident.
      operationId: ListIncidentIntegrations
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentIntegrationMetadataListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get a list of an incident's integration metadata
      tags:
        - Incidents
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    post:
      description: Create an incident integration metadata.
      operationId: CreateIncidentIntegration
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentIntegrationMetadataCreateRequest'
        description: Incident integration metadata payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentIntegrationMetadataResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_write
      summary: Create an incident integration metadata
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_write
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/{incident_id}/relationships/integrations/{integration_metadata_id}:
    delete:
      description: Delete an incident integration metadata.
      operationId: DeleteIncidentIntegration
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
        - $ref: '#/components/parameters/IncidentIntegrationMetadataIDPathParameter'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_write
      summary: Delete an incident integration metadata
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    get:
      description: Get incident integration metadata details.
      operationId: GetIncidentIntegration
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
        - $ref: '#/components/parameters/IncidentIntegrationMetadataIDPathParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentIntegrationMetadataResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get incident integration metadata details
      tags:
        - Incidents
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    patch:
      description: Update an existing incident integration metadata.
      operationId: UpdateIncidentIntegration
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
        - $ref: '#/components/parameters/IncidentIntegrationMetadataIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentIntegrationMetadataPatchRequest'
        description: Incident integration metadata payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentIntegrationMetadataResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_write
      summary: Update an existing incident integration metadata
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/{incident_id}/relationships/todos:
    get:
      description: Get all todos for an incident.
      operationId: ListIncidentTodos
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoListResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get a list of an incident's todos
      tags:
        - Incidents
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    post:
      description: Create an incident todo.
      operationId: CreateIncidentTodo
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTodoCreateRequest'
        description: Incident todo payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_write
      summary: Create an incident todo
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_write
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/incidents/{incident_id}/relationships/todos/{todo_id}:
    delete:
      description: Delete an incident todo.
      operationId: DeleteIncidentTodo
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
        - $ref: '#/components/parameters/IncidentTodoIDPathParameter'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_write
      summary: Delete an incident todo
      tags:
        - Incidents
      x-permission:
        operator: OR
        permissions:
          - incident_write
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    get:
      description: Get incident todo details.
      operationId: GetIncidentTodo
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
        - $ref: '#/components/parameters/IncidentTodoIDPathParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get incident todo details
      tags:
        - Incidents
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
    patch:
      description: Update an incident todo.
      operationId: UpdateIncidentTodo
      parameters:
        - $ref: '#/components/parameters/IncidentIDPathParameter'
        - $ref: '#/components/parameters/IncidentTodoIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTodoPatchRequest'
        description: Incident todo payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_write
      summary: Update an incident todo
      tags:
        - Incidents
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_write
      x-unstable: >-
        **Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog
        support](https://docs.datadoghq.com/help/).
  /api/v2/on-call/escalation-policies:
    post:
      description: Create a new On-Call escalation policy
      operationId: CreateOnCallEscalationPolicy
      parameters:
        - description: >-
            Comma-separated list of included relationships to be returned.
            Allowed values: `teams`, `steps`, `steps.targets`.
          in: query
          name: include
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EscalationPolicyCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationPolicy'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Create On-Call escalation policy
      tags:
        - On-Call
      x-permission:
        operator: AND
        permissions:
          - on_call_write
  /api/v2/on-call/escalation-policies/{policy_id}:
    delete:
      description: Delete an On-Call escalation policy
      operationId: DeleteOnCallEscalationPolicy
      parameters:
        - description: The ID of the escalation policy
          in: path
          name: policy_id
          required: true
          schema:
            example: a3000000-0000-0000-0000-000000000000
            type: string
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Delete On-Call escalation policy
      tags:
        - On-Call
      x-permission:
        operator: AND
        permissions:
          - on_call_write
    get:
      description: Get an On-Call escalation policy
      operationId: GetOnCallEscalationPolicy
      parameters:
        - description: The ID of the escalation policy
          in: path
          name: policy_id
          required: true
          schema:
            example: a3000000-0000-0000-0000-000000000000
            type: string
        - description: >-
            Comma-separated list of included relationships to be returned.
            Allowed values: `teams`, `steps`, `steps.targets`.
          in: query
          name: include
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationPolicy'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Get On-Call escalation policy
      tags:
        - On-Call
      x-permission:
        operator: AND
        permissions:
          - on_call_read
    put:
      description: Update an On-Call escalation policy
      operationId: UpdateOnCallEscalationPolicy
      parameters:
        - description: The ID of the escalation policy
          in: path
          name: policy_id
          required: true
          schema:
            example: a3000000-0000-0000-0000-000000000000
            type: string
        - description: >-
            Comma-separated list of included relationships to be returned.
            Allowed values: `teams`, `steps`, `steps.targets`.
          in: query
          name: include
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EscalationPolicyUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationPolicy'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Update On-Call escalation policy
      tags:
        - On-Call
      x-permission:
        operator: AND
        permissions:
          - on_call_write
  /api/v2/on-call/pages:
    post:
      description: |
        Trigger a new On-Call Page.
      operationId: CreateOnCallPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePageRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePageResponse'
          description: OK.
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      servers:
        - url: https://{site}
          variables:
            site:
              default: navy.oncall.datadoghq.com
              description: The globally available endpoint for On-Call.
              enum:
                - lava.oncall.datadoghq.com
                - saffron.oncall.datadoghq.com
                - navy.oncall.datadoghq.com
                - coral.oncall.datadoghq.com
                - teal.oncall.datadoghq.com
                - beige.oncall.datadoghq.eu
        - url: '{protocol}://{name}'
          variables:
            name:
              default: api.datadoghq.com
              description: Full site DNS name.
            protocol:
              default: https
              description: The protocol for accessing the API.
        - url: https://{subdomain}.{site}
          variables:
            site:
              default: datadoghq.com
              description: Any Datadog deployment.
            subdomain:
              default: api
              description: The subdomain where the API is deployed.
      summary: Create On-Call Page
      tags:
        - On-Call Paging
  /api/v2/on-call/pages/{page_id}/acknowledge:
    post:
      description: |
        Acknowledges an On-Call Page.
      operationId: AcknowledgeOnCallPage
      parameters:
        - description: The page ID.
          in: path
          name: page_id
          required: true
          schema:
            example: 15e74b8b-f865-48d0-bcc5-453323ed2c8f
            format: uuid
            type: string
      responses:
        '202':
          description: Accepted.
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      servers:
        - url: https://{site}
          variables:
            site:
              default: navy.oncall.datadoghq.com
              description: The globally available endpoint for On-Call.
              enum:
                - lava.oncall.datadoghq.com
                - saffron.oncall.datadoghq.com
                - navy.oncall.datadoghq.com
                - coral.oncall.datadoghq.com
                - teal.oncall.datadoghq.com
                - beige.oncall.datadoghq.eu
        - url: '{protocol}://{name}'
          variables:
            name:
              default: api.datadoghq.com
              description: Full site DNS name.
            protocol:
              default: https
              description: The protocol for accessing the API.
        - url: https://{subdomain}.{site}
          variables:
            site:
              default: datadoghq.com
              description: Any Datadog deployment.
            subdomain:
              default: api
              description: The subdomain where the API is deployed.
      summary: Acknowledge On-Call Page
      tags:
        - On-Call Paging
  /api/v2/on-call/pages/{page_id}/escalate:
    post:
      description: |
        Escalates an On-Call Page.
      operationId: EscalateOnCallPage
      parameters:
        - description: The page ID.
          in: path
          name: page_id
          required: true
          schema:
            example: 15e74b8b-f865-48d0-bcc5-453323ed2c8f
            format: uuid
            type: string
      responses:
        '202':
          description: Accepted.
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      servers:
        - url: https://{site}
          variables:
            site:
              default: navy.oncall.datadoghq.com
              description: The globally available endpoint for On-Call.
              enum:
                - lava.oncall.datadoghq.com
                - saffron.oncall.datadoghq.com
                - navy.oncall.datadoghq.com
                - coral.oncall.datadoghq.com
                - teal.oncall.datadoghq.com
                - beige.oncall.datadoghq.eu
        - url: '{protocol}://{name}'
          variables:
            name:
              default: api.datadoghq.com
              description: Full site DNS name.
            protocol:
              default: https
              description: The protocol for accessing the API.
        - url: https://{subdomain}.{site}
          variables:
            site:
              default: datadoghq.com
              description: Any Datadog deployment.
            subdomain:
              default: api
              description: The subdomain where the API is deployed.
      summary: Escalate On-Call Page
      tags:
        - On-Call Paging
  /api/v2/on-call/pages/{page_id}/resolve:
    post:
      description: |
        Resolves an On-Call Page.
      operationId: ResolveOnCallPage
      parameters:
        - description: The page ID.
          in: path
          name: page_id
          required: true
          schema:
            example: 15e74b8b-f865-48d0-bcc5-453323ed2c8f
            format: uuid
            type: string
      responses:
        '202':
          description: Accepted.
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      servers:
        - url: https://{site}
          variables:
            site:
              default: navy.oncall.datadoghq.com
              description: The globally available endpoint for On-Call.
              enum:
                - lava.oncall.datadoghq.com
                - saffron.oncall.datadoghq.com
                - navy.oncall.datadoghq.com
                - coral.oncall.datadoghq.com
                - teal.oncall.datadoghq.com
                - beige.oncall.datadoghq.eu
        - url: '{protocol}://{name}'
          variables:
            name:
              default: api.datadoghq.com
              description: Full site DNS name.
            protocol:
              default: https
              description: The protocol for accessing the API.
        - url: https://{subdomain}.{site}
          variables:
            site:
              default: datadoghq.com
              description: Any Datadog deployment.
            subdomain:
              default: api
              description: The subdomain where the API is deployed.
      summary: Resolve On-Call Page
      tags:
        - On-Call Paging
  /api/v2/on-call/schedules:
    post:
      description: Create a new On-Call schedule
      operationId: CreateOnCallSchedule
      parameters:
        - description: >-
            Comma-separated list of included relationships to be returned.
            Allowed values: `teams`, `layers`, `layers.members`,
            `layers.members.user`.
          in: query
          name: include
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Create On-Call schedule
      tags:
        - On-Call
      x-permission:
        operator: AND
        permissions:
          - on_call_write
  /api/v2/on-call/schedules/{schedule_id}:
    delete:
      description: Delete an On-Call schedule
      operationId: DeleteOnCallSchedule
      parameters:
        - description: The ID of the schedule
          in: path
          name: schedule_id
          required: true
          schema:
            example: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: string
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Delete On-Call schedule
      tags:
        - On-Call
      x-permission:
        operator: AND
        permissions:
          - on_call_write
    get:
      description: Get an On-Call schedule
      operationId: GetOnCallSchedule
      parameters:
        - description: >-
            Comma-separated list of included relationships to be returned.
            Allowed values: `teams`, `layers`, `layers.members`,
            `layers.members.user`.
          in: query
          name: include
          schema:
            type: string
        - description: The ID of the schedule
          in: path
          name: schedule_id
          required: true
          schema:
            example: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Get On-Call schedule
      tags:
        - On-Call
      x-permission:
        operator: AND
        permissions:
          - on_call_read
    put:
      description: Update a new On-Call schedule
      operationId: UpdateOnCallSchedule
      parameters:
        - description: >-
            Comma-separated list of included relationships to be returned.
            Allowed values: `teams`, `layers`, `layers.members`,
            `layers.members.user`.
          in: query
          name: include
          schema:
            type: string
        - description: The ID of the schedule
          in: path
          name: schedule_id
          required: true
          schema:
            example: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Update On-Call schedule
      tags:
        - On-Call
      x-permission:
        operator: AND
        permissions:
          - on_call_write
  /api/v2/on-call/schedules/{schedule_id}/on-call:
    get:
      description: >-
        Retrieves the user who is on-call for the specified schedule at a given
        time.
      operationId: GetScheduleOnCallUser
      parameters:
        - description: >-
            Specifies related resources to include in the response as a
            comma-separated list. Allowed value: `user`.
          in: query
          name: include
          schema:
            type: string
        - description: The ID of the schedule.
          in: path
          name: schedule_id
          required: true
          schema:
            example: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: string
        - description: >-
            Retrieves the on-call user at the given timestamp (ISO-8601).
            Defaults to the current time if omitted."
          in: query
          name: filter[at_ts]
          schema:
            example: '2025-05-07T02:53:01Z'
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Get the schedule on-call user
      tags:
        - On-Call
  /api/v2/on-call/teams/{team_id}/on-call:
    get:
      description: Get a team's on-call users at a given time
      operationId: GetTeamOnCallUsers
      parameters:
        - description: >-
            Comma-separated list of included relationships to be returned.
            Allowed values: `responders`, `escalations`,
            `escalations.responders`.
          in: query
          name: include
          schema:
            type: string
        - description: The team ID
          in: path
          name: team_id
          required: true
          schema:
            example: 27590dae-47be-4a7d-9abf-8f4e45124020
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamOnCallResponders'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Get team on-call users
      tags:
        - On-Call
  /api/v2/on-call/teams/{team_id}/routing-rules:
    get:
      description: Get a team's On-Call routing rules
      operationId: GetOnCallTeamRoutingRules
      parameters:
        - description: The team ID
          in: path
          name: team_id
          required: true
          schema:
            example: 27590dae-47be-4a7d-9abf-8f4e45124020
            type: string
        - description: >-
            Comma-separated list of included relationships to be returned.
            Allowed values: `rules`, `rules.policy`.
          in: query
          name: include
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamRoutingRules'
          description: OK
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Get On-Call team routing rules
      tags:
        - On-Call
      x-permission:
        operator: AND
        permissions:
          - on_call_read
    put:
      description: Set a team's On-Call routing rules
      operationId: SetOnCallTeamRoutingRules
      parameters:
        - description: The team ID
          in: path
          name: team_id
          required: true
          schema:
            example: 27590dae-47be-4a7d-9abf-8f4e45124020
            type: string
        - description: >-
            Comma-separated list of included relationships to be returned.
            Allowed values: `rules`, `rules.policy`.
          in: query
          name: include
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRoutingRulesRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamRoutingRules'
          description: OK
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ: []
      summary: Set On-Call team routing rules
      tags:
        - On-Call
      x-permission:
        operator: AND
        permissions:
          - on_call_write
  /api/v2/services:
    get:
      deprecated: true
      description: >-
        Get all incident services uploaded for the requesting user's
        organization. If the `include[users]` query parameter is provided, the
        included attribute will contain the users related to these incident
        services.
      operationId: ListIncidentServices
      parameters:
        - $ref: '#/components/parameters/IncidentServiceIncludeQueryParameter'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/IncidentServiceSearchQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentServicesResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get a list of all incident services
      tags:
        - Incident Services
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: '**Note**: This endpoint is deprecated.'
    post:
      deprecated: true
      description: Creates a new incident service.
      operationId: CreateIncidentService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentServiceCreateRequest'
        description: Incident Service Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentServiceResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_settings_write
      summary: Create a new incident service
      tags:
        - Incident Services
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_settings_write
      x-unstable: '**Note**: This endpoint is deprecated.'
  /api/v2/services/definitions:
    get:
      description: Get a list of all service definitions from the Datadog Service Catalog.
      operationId: ListServiceDefinitions
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/SchemaVersion'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDefinitionsListResponse'
          description: OK
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_service_catalog_read
      summary: Get all service definitions
      tags:
        - Service Definition
      x-pagination:
        limitParam: page[size]
        pageParam: page[number]
        resultsPath: data
      x-permission:
        operator: OR
        permissions:
          - apm_service_catalog_read
    post:
      description: Create or update service definition in the Datadog Service Catalog.
      operationId: CreateOrUpdateServiceDefinitions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceDefinitionsCreateRequest'
        description: Service Definition YAML/JSON.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDefinitionCreateResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_service_catalog_write
      summary: Create or update service definition
      tags:
        - Service Definition
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - apm_service_catalog_write
  /api/v2/services/definitions/{service_name}:
    delete:
      description: Delete a single service definition in the Datadog Service Catalog.
      operationId: DeleteServiceDefinition
      parameters:
        - $ref: '#/components/parameters/ServiceName'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_service_catalog_write
      summary: Delete a single service definition
      tags:
        - Service Definition
      x-permission:
        operator: OR
        permissions:
          - apm_service_catalog_write
    get:
      description: Get a single service definition from the Datadog Service Catalog.
      operationId: GetServiceDefinition
      parameters:
        - $ref: '#/components/parameters/ServiceName'
        - $ref: '#/components/parameters/SchemaVersion'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDefinitionGetResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - apm_service_catalog_read
      summary: Get a single service definition
      tags:
        - Service Definition
      x-permission:
        operator: OR
        permissions:
          - apm_service_catalog_read
  /api/v2/services/{service_id}:
    delete:
      deprecated: true
      description: Deletes an existing incident service.
      operationId: DeleteIncidentService
      parameters:
        - $ref: '#/components/parameters/IncidentServiceIDPathParameter'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_settings_write
      summary: Delete an existing incident service
      tags:
        - Incident Services
      x-permission:
        operator: OR
        permissions:
          - incident_settings_write
      x-unstable: '**Note**: This endpoint is deprecated.'
    get:
      deprecated: true
      description: >-
        Get details of an incident service. If the `include[users]` query
        parameter is provided,

        the included attribute will contain the users related to these incident
        services.
      operationId: GetIncidentService
      parameters:
        - $ref: '#/components/parameters/IncidentServiceIDPathParameter'
        - $ref: '#/components/parameters/IncidentServiceIncludeQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentServiceResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get details of an incident service
      tags:
        - Incident Services
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: '**Note**: This endpoint is deprecated.'
    patch:
      deprecated: true
      description: >-
        Updates an existing incident service. Only provide the attributes which
        should be updated as this request is a partial update.
      operationId: UpdateIncidentService
      parameters:
        - $ref: '#/components/parameters/IncidentServiceIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentServiceUpdateRequest'
        description: Incident Service Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentServiceResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_settings_write
      summary: Update an existing incident service
      tags:
        - Incident Services
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_settings_write
      x-unstable: '**Note**: This endpoint is deprecated.'
  /api/v2/slo/report:
    post:
      description: >-
        Create a job to generate an SLO report. The report job is processed
        asynchronously and eventually results in a CSV report being available
        for download.


        Check the status of the job and download the CSV report using the
        returned `report_id`.
      operationId: CreateSLOReportJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SloReportCreateRequest'
        description: Create SLO report job request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOReportPostResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - slos_read
      summary: Create a new SLO report
      tags:
        - Service Level Objectives
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - slos_read
      x-unstable: >-
        **Note**: This feature is in private beta. To request access, use the
        request access form in the [Service Level
        Objectives](https://docs.datadoghq.com/service_management/service_level_objectives/#slo-csv-export)
        docs.
  /api/v2/slo/report/{report_id}/download:
    get:
      description: >-
        Download an SLO report. This can only be performed after the report job
        has completed.


        Reports are not guaranteed to exist indefinitely. Datadog recommends
        that you download the report as soon as it is available.
      operationId: GetSLOReport
      parameters:
        - $ref: '#/components/parameters/ReportID'
      responses:
        '200':
          content:
            text/csv:
              schema:
                type: string
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - slos_read
      summary: Get SLO report
      tags:
        - Service Level Objectives
      x-unstable: >-
        **Note**: This feature is in private beta. To request access, use the
        request access form in the [Service Level
        Objectives](https://docs.datadoghq.com/service_management/service_level_objectives/#slo-csv-export)
        docs.
  /api/v2/slo/report/{report_id}/status:
    get:
      description: Get the status of the SLO report job.
      operationId: GetSLOReportJobStatus
      parameters:
        - $ref: '#/components/parameters/ReportID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOReportStatusGetResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - slos_read
      summary: Get SLO report status
      tags:
        - Service Level Objectives
      x-unstable: >-
        **Note**: This feature is in private beta. To request access, use the
        request access form in the [Service Level
        Objectives](https://docs.datadoghq.com/service_management/service_level_objectives/#slo-csv-export)
        docs.
  /api/v2/teams:
    get:
      deprecated: true
      description: >-
        Get all incident teams for the requesting user's organization. If the
        `include[users]` query parameter is provided, the included attribute
        will contain the users related to these incident teams.
      operationId: ListIncidentTeams
      parameters:
        - $ref: '#/components/parameters/IncidentTeamIncludeQueryParameter'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/IncidentTeamSearchQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTeamsResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get a list of all incident teams
      tags:
        - Incident Teams
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is deprecated. See the [Teams API
        endpoints](https://docs.datadoghq.com/api/latest/teams/).
    post:
      deprecated: true
      description: Creates a new incident team.
      operationId: CreateIncidentTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTeamCreateRequest'
        description: Incident Team Payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTeamResponse'
          description: CREATED
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_settings_write
      summary: Create a new incident team
      tags:
        - Incident Teams
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_settings_write
      x-unstable: >-
        **Note**: This endpoint is deprecated. See the [Teams API
        endpoints](https://docs.datadoghq.com/api/latest/teams/).
  /api/v2/teams/{team_id}:
    delete:
      deprecated: true
      description: Deletes an existing incident team.
      operationId: DeleteIncidentTeam
      parameters:
        - $ref: '#/components/parameters/IncidentTeamIDPathParameter'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_settings_write
      summary: Delete an existing incident team
      tags:
        - Incident Teams
      x-permission:
        operator: OR
        permissions:
          - incident_settings_write
      x-unstable: >-
        **Note**: This endpoint is deprecated. See the [Teams API
        endpoints](https://docs.datadoghq.com/api/latest/teams/).
    get:
      deprecated: true
      description: >-
        Get details of an incident team. If the `include[users]` query parameter
        is provided,

        the included attribute will contain the users related to these incident
        teams.
      operationId: GetIncidentTeam
      parameters:
        - $ref: '#/components/parameters/IncidentTeamIDPathParameter'
        - $ref: '#/components/parameters/IncidentTeamIncludeQueryParameter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTeamResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_read
      summary: Get details of an incident team
      tags:
        - Incident Teams
      x-permission:
        operator: OR
        permissions:
          - incident_read
      x-unstable: >-
        **Note**: This endpoint is deprecated. See the [Teams API
        endpoints](https://docs.datadoghq.com/api/latest/teams/).
    patch:
      deprecated: true
      description: >-
        Updates an existing incident team. Only provide the attributes which
        should be updated as this request is a partial update.
      operationId: UpdateIncidentTeam
      parameters:
        - $ref: '#/components/parameters/IncidentTeamIDPathParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTeamUpdateRequest'
        description: Incident Team Payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTeamResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - incident_settings_write
      summary: Update an existing incident team
      tags:
        - Incident Teams
      x-codegen-request-body-name: body
      x-permission:
        operator: OR
        permissions:
          - incident_settings_write
      x-unstable: >-
        **Note**: This endpoint is deprecated. See the [Teams API
        endpoints](https://docs.datadoghq.com/api/latest/teams/).
components:
  schemas:
    CasesResponse:
      description: Response with cases
      properties:
        data:
          description: Cases response data
          items:
            $ref: '#/components/schemas/Case'
          type: array
        meta:
          $ref: '#/components/schemas/CasesResponseMeta'
      type: object
    CaseCreateRequest:
      description: Case create request
      properties:
        data:
          $ref: '#/components/schemas/CaseCreate'
      required:
        - data
      type: object
    CaseResponse:
      description: Case response
      properties:
        data:
          $ref: '#/components/schemas/Case'
      type: object
    ProjectsResponse:
      description: Response with projects
      properties:
        data:
          description: Projects response data
          items:
            $ref: '#/components/schemas/Project'
          type: array
      type: object
    ProjectCreateRequest:
      description: Project create request
      properties:
        data:
          $ref: '#/components/schemas/ProjectCreate'
      required:
        - data
      type: object
    ProjectResponse:
      description: Project response
      properties:
        data:
          $ref: '#/components/schemas/Project'
      type: object
    APIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          example:
            - Bad Request
          items:
            description: A list of items.
            example: Bad Request
            type: string
          type: array
      required:
        - errors
      type: object
    CaseEmptyRequest:
      description: Case empty request
      properties:
        data:
          $ref: '#/components/schemas/CaseEmpty'
      required:
        - data
      type: object
    CaseAssignRequest:
      description: Case assign request
      properties:
        data:
          $ref: '#/components/schemas/CaseAssign'
      required:
        - data
      type: object
    CaseUpdateAttributesRequest:
      description: Case update attributes request
      properties:
        data:
          $ref: '#/components/schemas/CaseUpdateAttributes'
      required:
        - data
      type: object
    CaseUpdatePriorityRequest:
      description: Case update priority request
      properties:
        data:
          $ref: '#/components/schemas/CaseUpdatePriority'
      required:
        - data
      type: object
    CaseUpdateStatusRequest:
      description: Case update status request
      properties:
        data:
          $ref: '#/components/schemas/CaseUpdateStatus'
      required:
        - data
      type: object
    ListDowntimesResponse:
      description: Response for retrieving all downtimes.
      properties:
        data:
          description: An array of downtimes.
          items:
            $ref: '#/components/schemas/DowntimeResponseData'
          type: array
        included:
          description: Array of objects related to the downtimes.
          items:
            $ref: '#/components/schemas/DowntimeResponseIncludedItem'
          type: array
        meta:
          $ref: '#/components/schemas/DowntimeMeta'
      type: object
    DowntimeCreateRequest:
      description: Request for creating a downtime.
      properties:
        data:
          $ref: '#/components/schemas/DowntimeCreateRequestData'
      required:
        - data
      type: object
    DowntimeResponse:
      description: |-
        Downtiming gives you greater control over monitor notifications by
        allowing you to globally exclude scopes from alerting.
        Downtime settings, which can be scheduled with start and end times,
        prevent all alerting related to specified Datadog tags.
      properties:
        data:
          $ref: '#/components/schemas/DowntimeResponseData'
        included:
          description: Array of objects related to the downtime that the user requested.
          items:
            $ref: '#/components/schemas/DowntimeResponseIncludedItem'
          type: array
      type: object
    DowntimeUpdateRequest:
      description: Request for editing a downtime.
      properties:
        data:
          $ref: '#/components/schemas/DowntimeUpdateRequestData'
      required:
        - data
      type: object
    IssuesSearchRequest:
      description: Search issues request payload.
      properties:
        data:
          $ref: '#/components/schemas/IssuesSearchRequestData'
      required:
        - data
      type: object
    IssuesSearchResponse:
      description: Search issues response payload.
      properties:
        data:
          description: Array of results matching the search query.
          items:
            $ref: '#/components/schemas/IssuesSearchResult'
          type: array
        included:
          description: Array of resources related to the search results.
          items:
            $ref: '#/components/schemas/IssuesSearchResultIncluded'
          type: array
      type: object
    IssueResponse:
      description: Response containing error tracking issue data.
      properties:
        data:
          $ref: '#/components/schemas/Issue'
        included:
          description: Array of resources related to the issue.
          items:
            $ref: '#/components/schemas/IssueIncluded'
          type: array
      type: object
    IssueUpdateAssigneeRequest:
      description: Update issue assignee request payload.
      properties:
        data:
          $ref: '#/components/schemas/IssueUpdateAssigneeRequestData'
      required:
        - data
      type: object
    IssueUpdateStateRequest:
      description: Update issue state request payload.
      properties:
        data:
          $ref: '#/components/schemas/IssueUpdateStateRequestData'
      required:
        - data
      type: object
    EventsSort:
      description: The sort parameters when querying events.
      enum:
        - timestamp
        - '-timestamp'
      type: string
      x-enum-varnames:
        - TIMESTAMP_ASCENDING
        - TIMESTAMP_DESCENDING
    EventsListResponse:
      description: >-
        The response object with all events matching the request and pagination
        information.
      properties:
        data:
          description: An array of events matching the request.
          items:
            $ref: '#/components/schemas/EventResponse'
          type: array
        links:
          $ref: '#/components/schemas/EventsListResponseLinks'
        meta:
          $ref: '#/components/schemas/EventsResponseMetadata'
      type: object
    EventCreateRequestPayload:
      description: Payload for creating an event.
      properties:
        data:
          $ref: '#/components/schemas/EventCreateRequest'
      required:
        - data
      type: object
    EventCreateResponsePayload:
      description: Event creation response.
      properties:
        data:
          $ref: '#/components/schemas/EventCreateResponse'
        links:
          $ref: '#/components/schemas/EventCreateResponsePayloadLinks'
      type: object
    JSONAPIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          items:
            $ref: '#/components/schemas/JSONAPIErrorItem'
          type: array
      required:
        - errors
      type: object
    EventsListRequest:
      description: >-
        The object sent with the request to retrieve a list of events from your
        organization.
      properties:
        filter:
          $ref: '#/components/schemas/EventsQueryFilter'
        options:
          $ref: '#/components/schemas/EventsQueryOptions'
        page:
          $ref: '#/components/schemas/EventsRequestPage'
        sort:
          $ref: '#/components/schemas/EventsSort'
      type: object
    V2EventResponse:
      description: Get an event response.
      properties:
        data:
          $ref: '#/components/schemas/V2Event'
      type: object
    IncidentsResponse:
      description: Response with a list of incidents.
      properties:
        data:
          description: An array of incidents.
          example:
            - attributes:
                created: '2020-04-21T15:34:08.627205+00:00'
                creation_idempotency_key: null
                customer_impact_duration: 0
                customer_impact_end: null
                customer_impact_scope: null
                customer_impact_start: null
                customer_impacted: false
                detected: '2020-04-14T00:00:00+00:00'
                incident_type_uuid: 00000000-0000-0000-0000-000000000001
                modified: '2020-09-17T14:16:58.696424+00:00'
                public_id: 1
                resolved: null
                severity: SEV-1
                time_to_detect: 0
                time_to_internal_response: 0
                time_to_repair: 0
                time_to_resolve: 0
                title: Example Incident
              id: 00000000-aaaa-0000-0000-000000000000
              relationships:
                attachments:
                  data:
                    - id: 00000000-9999-0000-0000-000000000000
                      type: incident_attachments
                    - id: 00000000-1234-0000-0000-000000000000
                      type: incident_attachments
                commander_user:
                  data:
                    id: 00000000-0000-0000-cccc-000000000000
                    type: users
                created_by_user:
                  data:
                    id: 00000000-0000-0000-cccc-000000000000
                    type: users
                integrations:
                  data:
                    - id: 00000000-0000-0000-4444-000000000000
                      type: incident_integrations
                    - id: 00000000-0000-0000-5555-000000000000
                      type: incident_integrations
                last_modified_by_user:
                  data:
                    id: 00000000-0000-0000-cccc-000000000000
                    type: users
              type: incidents
            - attributes:
                created: '2020-04-21T15:34:08.627205+00:00'
                creation_idempotency_key: null
                customer_impact_duration: 0
                customer_impact_end: null
                customer_impact_scope: null
                customer_impact_start: null
                customer_impacted: false
                detected: '2020-04-14T00:00:00+00:00'
                incident_type_uuid: 00000000-0000-0000-0000-000000000002
                modified: '2020-09-17T14:16:58.696424+00:00'
                public_id: 2
                resolved: null
                severity: SEV-5
                time_to_detect: 0
                time_to_internal_response: 0
                time_to_repair: 0
                time_to_resolve: 0
                title: Example Incident 2
              id: 00000000-1111-0000-0000-000000000000
              relationships:
                attachments:
                  data:
                    - id: 00000000-9999-0000-0000-000000000000
                      type: incident_attachments
                commander_user:
                  data:
                    id: 00000000-aaaa-0000-0000-000000000000
                    type: users
                created_by_user:
                  data:
                    id: 00000000-aaaa-0000-0000-000000000000
                    type: users
                integrations:
                  data:
                    - id: 00000000-0000-0000-0001-000000000000
                      type: incident_integrations
                    - id: 00000000-0000-0000-0002-000000000000
                      type: incident_integrations
                last_modified_by_user:
                  data:
                    id: 00000000-aaaa-0000-0000-000000000000
                    type: users
              type: incidents
          items:
            $ref: '#/components/schemas/IncidentResponseData'
          type: array
        included:
          description: Included related resources that the user requested.
          items:
            $ref: '#/components/schemas/IncidentResponseIncludedItem'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/IncidentResponseMeta'
      required:
        - data
      type: object
    IncidentCreateRequest:
      description: Create request for an incident.
      properties:
        data:
          $ref: '#/components/schemas/IncidentCreateData'
      required:
        - data
      type: object
    IncidentResponse:
      description: Response with an incident.
      properties:
        data:
          $ref: '#/components/schemas/IncidentResponseData'
        included:
          description: Included related resources that the user requested.
          items:
            $ref: '#/components/schemas/IncidentResponseIncludedItem'
          readOnly: true
          type: array
      required:
        - data
      type: object
    IncidentNotificationRuleArray:
      description: Response with notification rules.
      properties:
        data:
          description: The `NotificationRuleArray` `data`.
          items:
            $ref: '#/components/schemas/IncidentNotificationRuleResponseData'
          type: array
        included:
          description: Related objects that are included in the response.
          items:
            $ref: '#/components/schemas/IncidentNotificationRuleIncludedItems'
          type: array
        meta:
          $ref: '#/components/schemas/IncidentNotificationRuleArrayMeta'
      required:
        - data
      type: object
    CreateIncidentNotificationRuleRequest:
      description: Create request for a notification rule.
      properties:
        data:
          $ref: '#/components/schemas/IncidentNotificationRuleCreateData'
      required:
        - data
      type: object
    IncidentNotificationRule:
      description: Response with a notification rule.
      properties:
        data:
          $ref: '#/components/schemas/IncidentNotificationRuleResponseData'
        included:
          description: Related objects that are included in the response.
          items:
            $ref: '#/components/schemas/IncidentNotificationRuleIncludedItems'
          type: array
      required:
        - data
      type: object
    PutIncidentNotificationRuleRequest:
      description: Put request for a notification rule.
      properties:
        data:
          $ref: '#/components/schemas/IncidentNotificationRuleUpdateData'
      required:
        - data
      type: object
    IncidentNotificationTemplateArray:
      description: Response with notification templates.
      properties:
        data:
          description: The `NotificationTemplateArray` `data`.
          items:
            $ref: '#/components/schemas/IncidentNotificationTemplateResponseData'
          type: array
        included:
          description: Related objects that are included in the response.
          items:
            $ref: '#/components/schemas/IncidentNotificationTemplateIncludedItems'
          type: array
        meta:
          $ref: '#/components/schemas/IncidentNotificationTemplateArrayMeta'
      required:
        - data
      type: object
    CreateIncidentNotificationTemplateRequest:
      description: Create request for a notification template.
      properties:
        data:
          $ref: '#/components/schemas/IncidentNotificationTemplateCreateData'
      required:
        - data
      type: object
    IncidentNotificationTemplate:
      description: Response with a notification template.
      properties:
        data:
          $ref: '#/components/schemas/IncidentNotificationTemplateResponseData'
        included:
          description: Related objects that are included in the response.
          items:
            $ref: '#/components/schemas/IncidentNotificationTemplateIncludedItems'
          type: array
      required:
        - data
      type: object
    PatchIncidentNotificationTemplateRequest:
      description: Update request for a notification template.
      properties:
        data:
          $ref: '#/components/schemas/IncidentNotificationTemplateUpdateData'
      required:
        - data
      type: object
    IncidentTypeListResponse:
      description: Response with a list of incident types.
      properties:
        data:
          description: An array of incident type objects.
          items:
            $ref: '#/components/schemas/IncidentTypeObject'
          type: array
      required:
        - data
      type: object
    IncidentTypeCreateRequest:
      description: Create request for an incident type.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTypeCreateData'
      required:
        - data
      type: object
    IncidentTypeResponse:
      description: Incident type response data.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTypeObject'
      required:
        - data
      type: object
    IncidentTypePatchRequest:
      description: Patch request for an incident type.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTypePatchData'
      required:
        - data
      type: object
    IncidentSearchResponse:
      description: Response with incidents and facets.
      properties:
        data:
          $ref: '#/components/schemas/IncidentSearchResponseData'
        included:
          description: Included related resources that the user requested.
          items:
            $ref: '#/components/schemas/IncidentResponseIncludedItem'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/IncidentSearchResponseMeta'
      required:
        - data
      type: object
    IncidentUpdateRequest:
      description: Update request for an incident.
      properties:
        data:
          $ref: '#/components/schemas/IncidentUpdateData'
      required:
        - data
      type: object
    IncidentAttachmentsResponse:
      description: The response object containing an incident's attachments.
      properties:
        data:
          description: An array of incident attachments.
          example:
            - attributes:
                attachment:
                  documentUrl: ''
                  title: Postmortem IR-123
                attachment_type: postmortem
              id: 00000000-abcd-0002-0000-000000000000
              relationships:
                last_modified_by_user:
                  data:
                    id: 00000000-0000-0000-cccc-000000000000
                    type: users
              type: incident_attachments
          items:
            $ref: '#/components/schemas/IncidentAttachmentData'
          type: array
        included:
          description: Included related resources that the user requested.
          items:
            $ref: '#/components/schemas/IncidentAttachmentsResponseIncludedItem'
          type: array
      required:
        - data
      type: object
    IncidentAttachmentUpdateRequest:
      description: The update request for an incident's attachments.
      properties:
        data:
          description: >-
            An array of incident attachments. An attachment object without an
            "id" key indicates that you want to

            create that attachment. An attachment object without an "attributes"
            key indicates that you want to

            delete that attachment. An attachment object with both the "id" key
            and a populated "attributes" object

            indicates that you want to update that attachment.
          example:
            - attributes:
                attachment:
                  documentUrl: https://app.datadoghq.com/notebook/123
                  title: Postmortem IR-123
                attachment_type: postmortem
              id: 00000000-abcd-0002-0000-000000000000
              type: incident_attachments
            - attributes:
                attachment:
                  documentUrl: https://www.example.com/webstore-failure-runbook
                  title: Runbook for webstore service failures
                attachment_type: link
              type: incident_attachments
            - id: 00000000-abcd-0003-0000-000000000000
              type: incident_attachments
          items:
            $ref: '#/components/schemas/IncidentAttachmentUpdateData'
          type: array
      required:
        - data
      type: object
    IncidentAttachmentUpdateResponse:
      description: >-
        The response object containing the created or updated incident
        attachments.
      properties:
        data:
          description: >-
            An array of incident attachments. Only the attachments that were
            created or updated by the request are

            returned.
          example:
            - attributes:
                attachment:
                  documentUrl: ''
                  title: Postmortem IR-123
                attachment_type: postmortem
              id: 00000000-abcd-0002-0000-000000000000
              relationships:
                last_modified_by_user:
                  data:
                    id: 00000000-0000-0000-cccc-000000000000
                    type: users
              type: incident_attachments
          items:
            $ref: '#/components/schemas/IncidentAttachmentData'
          type: array
        included:
          description: Included related resources that the user requested.
          items:
            $ref: '#/components/schemas/IncidentAttachmentsResponseIncludedItem'
          type: array
      required:
        - data
      type: object
    IncidentIntegrationMetadataListResponse:
      description: Response with a list of incident integration metadata.
      properties:
        data:
          description: An array of incident integration metadata.
          items:
            $ref: '#/components/schemas/IncidentIntegrationMetadataResponseData'
          type: array
        included:
          description: Included related resources that the user requested.
          items:
            $ref: >-
              #/components/schemas/IncidentIntegrationMetadataResponseIncludedItem
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/IncidentResponseMeta'
      required:
        - data
      type: object
    IncidentIntegrationMetadataCreateRequest:
      description: Create request for an incident integration metadata.
      properties:
        data:
          $ref: '#/components/schemas/IncidentIntegrationMetadataCreateData'
      required:
        - data
      type: object
    IncidentIntegrationMetadataResponse:
      description: Response with an incident integration metadata.
      properties:
        data:
          $ref: '#/components/schemas/IncidentIntegrationMetadataResponseData'
        included:
          description: Included related resources that the user requested.
          items:
            $ref: >-
              #/components/schemas/IncidentIntegrationMetadataResponseIncludedItem
          readOnly: true
          type: array
      required:
        - data
      type: object
    IncidentIntegrationMetadataPatchRequest:
      description: Patch request for an incident integration metadata.
      properties:
        data:
          $ref: '#/components/schemas/IncidentIntegrationMetadataPatchData'
      required:
        - data
      type: object
    IncidentTodoListResponse:
      description: Response with a list of incident todos.
      properties:
        data:
          description: An array of incident todos.
          items:
            $ref: '#/components/schemas/IncidentTodoResponseData'
          type: array
        included:
          description: Included related resources that the user requested.
          items:
            $ref: '#/components/schemas/IncidentTodoResponseIncludedItem'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/IncidentResponseMeta'
      required:
        - data
      type: object
    IncidentTodoCreateRequest:
      description: Create request for an incident todo.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTodoCreateData'
      required:
        - data
      type: object
    IncidentTodoResponse:
      description: Response with an incident todo.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTodoResponseData'
        included:
          description: Included related resources that the user requested.
          items:
            $ref: '#/components/schemas/IncidentTodoResponseIncludedItem'
          readOnly: true
          type: array
      required:
        - data
      type: object
    IncidentTodoPatchRequest:
      description: Patch request for an incident todo.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTodoPatchData'
      required:
        - data
      type: object
    EscalationPolicyCreateRequest:
      description: >-
        Represents a request to create a new escalation policy, including the
        policy data.
      example:
        data:
          attributes:
            name: Escalation Policy 1
            resolve_page_on_policy_end: true
            retries: 2
            steps:
              - assignment: default
                escalate_after_seconds: 3600
                targets:
                  - id: 00000000-aba1-0000-0000-000000000000
                    type: users
                  - id: 00000000-aba2-0000-0000-000000000000
                    type: schedules
                  - id: 00000000-aba3-0000-0000-000000000000
                    type: teams
              - assignment: round-robin
                escalate_after_seconds: 3600
                targets:
                  - id: 00000000-aba1-0000-0000-000000000000
                    type: users
                  - id: 00000000-abb1-0000-0000-000000000000
                    type: users
          relationships:
            teams:
              data:
                - id: 00000000-da3a-0000-0000-000000000000
                  type: teams
          type: policies
      properties:
        data:
          $ref: '#/components/schemas/EscalationPolicyCreateRequestData'
      required:
        - data
      type: object
    EscalationPolicy:
      description: >-
        Represents a complete escalation policy response, including policy data
        and optionally included related resources.
      example:
        data:
          attributes:
            name: Escalation Policy 1
            resolve_page_on_policy_end: true
            retries: 2
          id: 00000000-aba1-0000-0000-000000000000
          relationships:
            steps:
              data:
                - id: 00000000-aba1-0000-0000-000000000000
                  type: steps
            teams:
              data:
                - id: 00000000-da3a-0000-0000-000000000000
                  type: teams
          type: policies
        included:
          - attributes:
              avatar: ''
              description: Team 1 description
              handle: team1
              name: Team 1
            id: 00000000-da3a-0000-0000-000000000000
            type: teams
          - attributes:
              assignment: default
              escalate_after_seconds: 3600
            id: 00000000-aba1-0000-0000-000000000000
            relationships:
              targets:
                data:
                  - id: 00000000-aba1-0000-0000-000000000000
                    type: users
                  - id: 00000000-aba2-0000-0000-000000000000
                    type: schedules
                  - id: 00000000-aba3-0000-0000-000000000000
                    type: teams
            type: steps
          - id: 00000000-aba1-0000-0000-000000000000
            type: users
          - id: 00000000-aba2-0000-0000-000000000000
            type: schedules
          - id: 00000000-aba3-0000-0000-000000000000
            type: teams
      properties:
        data:
          $ref: '#/components/schemas/EscalationPolicyData'
        included:
          description: >-
            Provides any included related resources, such as steps or targets,
            returned with the policy.
          items:
            $ref: '#/components/schemas/EscalationPolicyIncluded'
          type: array
      type: object
    EscalationPolicyUpdateRequest:
      description: >-
        Represents a request to update an existing escalation policy, including
        the updated policy data.
      example:
        data:
          attributes:
            name: Escalation Policy 1
            resolve_page_on_policy_end: false
            retries: 2
            steps:
              - assignment: default
                escalate_after_seconds: 3600
                id: 00000000-aba1-0000-0000-000000000000
                targets:
                  - id: 00000000-aba1-0000-0000-000000000000
                    type: users
                  - id: 00000000-aba2-0000-0000-000000000000
                    type: schedules
          id: a3000000-0000-0000-0000-000000000000
          relationships:
            teams:
              data:
                - id: 00000000-da3a-0000-0000-000000000000
                  type: teams
          type: policies
      properties:
        data:
          $ref: '#/components/schemas/EscalationPolicyUpdateRequestData'
      required:
        - data
      type: object
    CreatePageRequest:
      description: Full request to trigger an On-Call Page.
      example:
        data:
          attributes:
            description: Page details.
            tags:
              - service:test
            target:
              identifier: my-team
              type: team_handle
            title: Page title
            urgency: low
          type: pages
      properties:
        data:
          $ref: '#/components/schemas/CreatePageRequestData'
      type: object
    CreatePageResponse:
      description: The full response object after creating a new On-Call Page.
      example:
        data:
          id: 15e74b8b-f865-48d0-bcc5-453323ed2c8f
          type: pages
      properties:
        data:
          $ref: '#/components/schemas/CreatePageResponseData'
      type: object
    ScheduleCreateRequest:
      description: >-
        The top-level request body for schedule creation, wrapping a `data`
        object.
      example:
        data:
          attributes:
            layers:
              - effective_date: '2025-02-03T05:00:00Z'
                end_date: '2025-12-31T00:00:00Z'
                interval:
                  days: 1
                members:
                  - user:
                      id: 00000000-aba1-0000-0000-000000000000
                name: Layer 1
                restrictions:
                  - end_day: friday
                    end_time: '17:00:00'
                    start_day: monday
                    start_time: '09:00:00'
                rotation_start: '2025-02-01T00:00:00Z'
            name: On-Call Schedule
            time_zone: America/New_York
          relationships:
            teams:
              data:
                - id: 00000000-da3a-0000-0000-000000000000
                  type: teams
          type: schedules
      properties:
        data:
          $ref: '#/components/schemas/ScheduleCreateRequestData'
      required:
        - data
      type: object
    Schedule:
      description: >-
        Top-level container for a schedule object, including both the `data`
        payload and any related `included` resources (such as teams, layers, or
        members).
      example:
        data:
          attributes:
            name: On-Call Schedule
            time_zone: America/New_York
          id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
          relationships:
            layers:
              data:
                - id: 00000000-0000-0000-0000-000000000001
                  type: layers
            teams:
              data:
                - id: 00000000-da3a-0000-0000-000000000000
                  type: teams
          type: schedules
        included:
          - attributes:
              avatar: ''
              description: Team 1 description
              handle: team1
              name: Team 1
            id: 00000000-da3a-0000-0000-000000000000
            type: teams
          - attributes:
              effective_date: '2025-02-03T05:00:00Z'
              end_date: '2025-12-31T00:00:00Z'
              interval:
                days: 1
              name: Layer 1
              restrictions:
                - end_day: friday
                  end_time: '17:00:00'
                  start_day: monday
                  start_time: '09:00:00'
              rotation_start: '2025-02-01T00:00:00Z'
            id: 00000000-0000-0000-0000-000000000001
            relationships:
              members:
                data:
                  - id: 00000000-0000-0000-0000-000000000002
                    type: members
            type: layers
          - id: 00000000-0000-0000-0000-000000000002
            relationships:
              user:
                data:
                  id: 00000000-aba1-0000-0000-000000000000
                  type: users
            type: members
          - attributes:
              email: foo@bar.com
              name: User 1
            id: 00000000-aba1-0000-0000-000000000000
            type: users
      properties:
        data:
          $ref: '#/components/schemas/ScheduleData'
        included:
          description: >-
            Any additional resources related to this schedule, such as teams and
            layers.
          items:
            $ref: '#/components/schemas/ScheduleDataIncludedItem'
          type: array
      type: object
    ScheduleUpdateRequest:
      description: >-
        A top-level wrapper for a schedule update request, referring to the
        `data` object with the new details.
      example:
        data:
          attributes:
            layers:
              - effective_date: '2025-02-03T05:00:00Z'
                end_date: '2025-12-31T00:00:00Z'
                interval:
                  seconds: 3600
                members:
                  - user:
                      id: 00000000-aba1-0000-0000-000000000000
                name: Layer 1
                restrictions:
                  - end_day: friday
                    end_time: '17:00:00'
                    start_day: monday
                    start_time: '09:00:00'
                rotation_start: '2025-02-01T00:00:00Z'
            name: On-Call Schedule Updated
            time_zone: America/New_York
          id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
          relationships:
            teams:
              data:
                - id: 00000000-da3a-0000-0000-000000000000
                  type: teams
          type: schedules
      properties:
        data:
          $ref: '#/components/schemas/ScheduleUpdateRequestData'
      required:
        - data
      type: object
    Shift:
      description: An on-call shift with its associated data and relationships.
      example:
        data:
          attributes:
            end: '2025-05-07T03:53:01.206662873Z'
            start: '2025-05-07T02:53:01.206662814Z'
          id: 00000000-0000-0000-0000-000000000000
          relationships:
            user:
              data:
                id: 00000000-aba1-0000-0000-000000000000
                type: users
          type: shifts
        included:
          - attributes:
              email: foo@bar.com
              name: User 1
              status: ''
            id: 00000000-aba1-0000-0000-000000000000
            type: users
      properties:
        data:
          $ref: '#/components/schemas/ShiftData'
          nullable: true
        included:
          description: The `Shift` `included`.
          items:
            $ref: '#/components/schemas/ShiftIncluded'
          type: array
      type: object
    TeamOnCallResponders:
      description: Root object representing a team's on-call responder configuration.
      example:
        data:
          id: 111ee23r-aaaaa-aaaa-aaww-1234wertsd23
          relationships:
            escalations:
              data:
                - id: 111ee23r-aaaaa-aaaa-aaww-1234wertsd23
                  type: escalation_policy_steps
            responders:
              data:
                - id: 111ee23r-aaaaa-aaaa-aaww-1234wertsd23
                  type: users
          type: team_oncall_responders
        included:
          - attributes:
              email: test@test.com
              name: Test User
              status: active
            id: 111ee23r-aaaaa-aaaa-aaww-1234wertsd23
            type: users
          - id: 111ee23r-aaaaa-aaaa-aaww-1234wertsd23
            relationships:
              responders:
                data:
                  - id: 111ee23r-aaaaa-aaaa-aaww-1234wertsd23
                    type: users
            type: escalation_policy_steps
      properties:
        data:
          $ref: '#/components/schemas/TeamOnCallRespondersData'
        included:
          description: The `TeamOnCallResponders` `included`.
          items:
            $ref: '#/components/schemas/TeamOnCallRespondersIncluded'
          type: array
      type: object
    TeamRoutingRules:
      description: >-
        Represents a complete set of team routing rules, including data and
        optionally included related resources.
      example:
        data:
          id: 27590dae-47be-4a7d-9abf-8f4e45124020
          relationships:
            rules:
              data:
                - id: 03aff2d6-6cbf-496c-997f-a857bbe9a94a
                  type: team_routing_rules
                - id: 03aff2d6-6cbf-496c-997f-a857bbe9a94a
                  type: team_routing_rules
          type: team_routing_rules
        included:
          - attributes:
              actions: null
              query: tags.service:test
              time_restriction:
                restrictions:
                  - end_day: monday
                    end_time: '17:00:00'
                    start_day: monday
                    start_time: '09:00:00'
                  - end_day: tuesday
                    end_time: '17:00:00'
                    start_day: tuesday
                    start_time: '09:00:00'
                time_zone: ''
              urgency: high
            id: 03aff2d6-6cbf-496c-997f-a857bbe9a94a
            relationships:
              policy:
                data: null
            type: team_routing_rules
      properties:
        data:
          $ref: '#/components/schemas/TeamRoutingRulesData'
        included:
          description: Provides related routing rules or other included resources.
          items:
            $ref: '#/components/schemas/TeamRoutingRulesIncluded'
          type: array
      type: object
    TeamRoutingRulesRequest:
      description: >-
        Represents a request to create or update team routing rules, including
        the data payload.
      example:
        data:
          attributes:
            rules:
              - actions: null
                policy_id: ''
                query: tags.service:test
                time_restriction:
                  restrictions:
                    - end_day: monday
                      end_time: '17:00:00'
                      start_day: monday
                      start_time: '09:00:00'
                    - end_day: tuesday
                      end_time: '17:00:00'
                      start_day: tuesday
                      start_time: '09:00:00'
                  time_zone: ''
                urgency: high
              - actions:
                  - channel: channel
                    type: send_slack_message
                    workspace: workspace
                policy_id: fad4eee1-13f5-40d8-886b-4e56d8d5d1c6
                query: ''
                time_restriction: null
                urgency: low
          id: 27590dae-47be-4a7d-9abf-8f4e45124020
          type: team_routing_rules
      properties:
        data:
          $ref: '#/components/schemas/TeamRoutingRulesRequestData'
      type: object
    IncidentServicesResponse:
      description: Response with a list of incident service payloads.
      properties:
        data:
          description: An array of incident services.
          example:
            - id: 00000000-0000-0000-0000-000000000000
              type: services
          items:
            $ref: '#/components/schemas/IncidentServiceResponseData'
          type: array
        included:
          description: Included related resources which the user requested.
          items:
            $ref: '#/components/schemas/IncidentServiceIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/IncidentResponseMeta'
      required:
        - data
      type: object
    IncidentServiceCreateRequest:
      description: Create request with an incident service payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentServiceCreateData'
      required:
        - data
      type: object
    IncidentServiceResponse:
      description: Response with an incident service payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentServiceResponseData'
        included:
          description: Included objects from relationships.
          items:
            $ref: '#/components/schemas/IncidentServiceIncludedItems'
          readOnly: true
          type: array
      required:
        - data
      type: object
    ServiceDefinitionsListResponse:
      description: Create service definitions response.
      properties:
        data:
          description: Data representing service definitions.
          items:
            $ref: '#/components/schemas/ServiceDefinitionData'
          type: array
      type: object
    ServiceDefinitionsCreateRequest:
      description: Create service definitions request.
      oneOf:
        - $ref: '#/components/schemas/ServiceDefinitionV2Dot2'
        - $ref: '#/components/schemas/ServiceDefinitionV2Dot1'
        - $ref: '#/components/schemas/ServiceDefinitionV2'
        - $ref: '#/components/schemas/ServiceDefinitionRaw'
    ServiceDefinitionCreateResponse:
      description: Create service definitions response.
      properties:
        data:
          description: Create service definitions response payload.
          items:
            $ref: '#/components/schemas/ServiceDefinitionData'
          type: array
      type: object
    ServiceDefinitionGetResponse:
      description: Get service definition response.
      properties:
        data:
          $ref: '#/components/schemas/ServiceDefinitionData'
      type: object
    IncidentServiceUpdateRequest:
      description: Update request with an incident service payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentServiceUpdateData'
      required:
        - data
      type: object
    SloReportCreateRequest:
      description: The SLO report request body.
      properties:
        data:
          $ref: '#/components/schemas/SloReportCreateRequestData'
      required:
        - data
      type: object
    SLOReportPostResponse:
      description: The SLO report response.
      properties:
        data:
          $ref: '#/components/schemas/SLOReportPostResponseData'
      type: object
    SLOReportStatusGetResponse:
      description: The SLO report status response.
      properties:
        data:
          $ref: '#/components/schemas/SLOReportStatusGetResponseData'
      type: object
    IncidentTeamsResponse:
      description: Response with a list of incident team payloads.
      properties:
        data:
          description: An array of incident teams.
          example:
            - attributes:
                name: team name
              id: 00000000-7ea3-0000-0000-000000000000
              type: teams
          items:
            $ref: '#/components/schemas/IncidentTeamResponseData'
          type: array
        included:
          description: Included related resources which the user requested.
          items:
            $ref: '#/components/schemas/IncidentTeamIncludedItems'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/IncidentResponseMeta'
      required:
        - data
      type: object
    IncidentTeamCreateRequest:
      description: Create request with an incident team payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTeamCreateData'
      required:
        - data
      type: object
    IncidentTeamResponse:
      description: Response with an incident team payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTeamResponseData'
        included:
          description: Included objects from relationships.
          items:
            $ref: '#/components/schemas/IncidentTeamIncludedItems'
          readOnly: true
          type: array
      required:
        - data
      type: object
    IncidentTeamUpdateRequest:
      description: Update request with an incident team payload.
      properties:
        data:
          $ref: '#/components/schemas/IncidentTeamUpdateData'
      required:
        - data
      type: object
    CaseSortableField:
      description: Case field that can be sorted on
      enum:
        - created_at
        - priority
        - status
      example: created_at
      type: string
      x-enum-varnames:
        - CREATED_AT
        - PRIORITY
        - STATUS
    Case:
      description: A case
      properties:
        attributes:
          $ref: '#/components/schemas/CaseAttributes'
        id:
          description: Case's identifier
          example: aeadc05e-98a8-11ec-ac2c-da7ad0900001
          type: string
        relationships:
          $ref: '#/components/schemas/CaseRelationships'
        type:
          $ref: '#/components/schemas/CaseResourceType'
      required:
        - id
        - type
        - attributes
      type: object
    CasesResponseMeta:
      description: Cases response metadata
      properties:
        page:
          $ref: '#/components/schemas/CasesResponseMetaPagination'
      type: object
    CaseCreate:
      description: Case creation data
      properties:
        attributes:
          $ref: '#/components/schemas/CaseCreateAttributes'
        relationships:
          $ref: '#/components/schemas/CaseCreateRelationships'
        type:
          $ref: '#/components/schemas/CaseResourceType'
      required:
        - attributes
        - type
      type: object
    Project:
      description: A Project
      properties:
        attributes:
          $ref: '#/components/schemas/ProjectAttributes'
        id:
          description: The Project's identifier
          example: aeadc05e-98a8-11ec-ac2c-da7ad0900001
          type: string
        relationships:
          $ref: '#/components/schemas/ProjectRelationships'
        type:
          $ref: '#/components/schemas/ProjectResourceType'
      required:
        - id
        - type
        - attributes
      type: object
    ProjectCreate:
      description: Project create
      properties:
        attributes:
          $ref: '#/components/schemas/ProjectCreateAttributes'
        type:
          $ref: '#/components/schemas/ProjectResourceType'
      required:
        - attributes
        - type
      type: object
    CaseEmpty:
      description: Case empty request data
      properties:
        type:
          $ref: '#/components/schemas/CaseResourceType'
      required:
        - type
      type: object
    CaseAssign:
      description: Case assign
      properties:
        attributes:
          $ref: '#/components/schemas/CaseAssignAttributes'
        type:
          $ref: '#/components/schemas/CaseResourceType'
      required:
        - attributes
        - type
      type: object
    CaseUpdateAttributes:
      description: Case update attributes
      properties:
        attributes:
          $ref: '#/components/schemas/CaseUpdateAttributesAttributes'
        type:
          $ref: '#/components/schemas/CaseResourceType'
      required:
        - attributes
        - type
      type: object
    CaseUpdatePriority:
      description: Case priority status
      properties:
        attributes:
          $ref: '#/components/schemas/CaseUpdatePriorityAttributes'
        type:
          $ref: '#/components/schemas/CaseResourceType'
      required:
        - attributes
        - type
      type: object
    CaseUpdateStatus:
      description: Case update status
      properties:
        attributes:
          $ref: '#/components/schemas/CaseUpdateStatusAttributes'
        type:
          $ref: '#/components/schemas/CaseResourceType'
      required:
        - attributes
        - type
      type: object
    DowntimeResponseData:
      description: Downtime data.
      properties:
        attributes:
          $ref: '#/components/schemas/DowntimeResponseAttributes'
        id:
          description: The downtime ID.
          example: 00000000-0000-1234-0000-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/DowntimeRelationships'
        type:
          $ref: '#/components/schemas/DowntimeResourceType'
      type: object
    DowntimeResponseIncludedItem:
      description: An object related to a downtime.
      oneOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/DowntimeMonitorIncludedItem'
    DowntimeMeta:
      description: Pagination metadata returned by the API.
      properties:
        page:
          $ref: '#/components/schemas/DowntimeMetaPage'
      type: object
    DowntimeCreateRequestData:
      description: Object to create a downtime.
      properties:
        attributes:
          $ref: '#/components/schemas/DowntimeCreateRequestAttributes'
        type:
          $ref: '#/components/schemas/DowntimeResourceType'
      required:
        - type
        - attributes
      type: object
    DowntimeUpdateRequestData:
      description: Object to update a downtime.
      properties:
        attributes:
          $ref: '#/components/schemas/DowntimeUpdateRequestAttributes'
        id:
          description: ID of this downtime.
          example: 00000000-0000-1234-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/DowntimeResourceType'
      required:
        - id
        - type
        - attributes
      type: object
    SearchIssuesIncludeQueryParameterItem:
      description: Relationship object that should be included in the search response.
      enum:
        - issue
        - issue.assignee
        - issue.case
        - issue.team_owners
      example: issue.case
      type: string
      x-enum-varnames:
        - ISSUE
        - ISSUE_ASSIGNEE
        - ISSUE_CASE
        - ISSUE_TEAM_OWNERS
    IssuesSearchRequestData:
      description: Search issues request.
      properties:
        attributes:
          $ref: '#/components/schemas/IssuesSearchRequestDataAttributes'
        type:
          $ref: '#/components/schemas/IssuesSearchRequestDataType'
      required:
        - type
        - attributes
      type: object
    IssuesSearchResult:
      description: Result matching the search query.
      properties:
        attributes:
          $ref: '#/components/schemas/IssuesSearchResultAttributes'
        id:
          description: Search result identifier (matches the nested issue's identifier).
          example: c1726a66-1f64-11ee-b338-da7ad0900002
          type: string
        relationships:
          $ref: '#/components/schemas/IssuesSearchResultRelationships'
        type:
          $ref: '#/components/schemas/IssuesSearchResultType'
      required:
        - id
        - type
        - attributes
      type: object
    IssuesSearchResultIncluded:
      description: >-
        An array of related resources, returned when the `include` query
        parameter is used.
      oneOf:
        - $ref: '#/components/schemas/Issue'
        - $ref: '#/components/schemas/Case'
        - $ref: '#/components/schemas/IssueUser'
        - $ref: '#/components/schemas/IssueTeam'
    GetIssueIncludeQueryParameterItem:
      description: Relationship object that should be included in the response.
      enum:
        - assignee
        - case
        - team_owners
      example: case
      type: string
      x-enum-varnames:
        - ASSIGNEE
        - CASE
        - TEAM_OWNERS
    Issue:
      description: The issue matching the request.
      properties:
        attributes:
          $ref: '#/components/schemas/IssueAttributes'
        id:
          description: Issue identifier.
          example: c1726a66-1f64-11ee-b338-da7ad0900002
          type: string
        relationships:
          $ref: '#/components/schemas/IssueRelationships'
        type:
          $ref: '#/components/schemas/IssueType'
      required:
        - id
        - type
        - attributes
      type: object
    IssueIncluded:
      description: >-
        An array of related resources, returned when the `include` query
        parameter is used.
      oneOf:
        - $ref: '#/components/schemas/IssueCase'
        - $ref: '#/components/schemas/IssueUser'
        - $ref: '#/components/schemas/IssueTeam'
    IssueUpdateAssigneeRequestData:
      description: Update issue assignee request.
      properties:
        id:
          description: User identifier.
          example: 87cb11a0-278c-440a-99fe-701223c80296
          type: string
        type:
          $ref: '#/components/schemas/IssueUpdateAssigneeRequestDataType'
      required:
        - id
        - type
      type: object
    IssueUpdateStateRequestData:
      description: Update issue state request.
      properties:
        attributes:
          $ref: '#/components/schemas/IssueUpdateStateRequestDataAttributes'
        id:
          description: Issue identifier.
          example: c1726a66-1f64-11ee-b338-da7ad0900002
          type: string
        type:
          $ref: '#/components/schemas/IssueUpdateStateRequestDataType'
      required:
        - id
        - type
        - attributes
      type: object
    EventResponse:
      description: >-
        The object description of an event after being processed and stored by
        Datadog.
      properties:
        attributes:
          $ref: '#/components/schemas/EventResponseAttributes'
        id:
          description: the unique ID of the event.
          example: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
          type: string
        type:
          $ref: '#/components/schemas/EventType'
      type: object
    EventsListResponseLinks:
      description: Links attributes.
      properties:
        next:
          description: >-
            Link for the next set of results. Note that the request can also be
            made using the

            POST endpoint.
          example: >-
            https://app.datadoghq.com/api/v2/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
      type: object
    EventsResponseMetadata:
      description: The metadata associated with a request.
      properties:
        elapsed:
          description: The time elapsed in milliseconds.
          example: 132
          format: int64
          type: integer
        page:
          $ref: '#/components/schemas/EventsResponseMetadataPage'
        request_id:
          description: The identifier of the request.
          example: MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR
          type: string
        status:
          description: The request status.
          example: done
          type: string
        warnings:
          description: >-
            A list of warnings (non-fatal errors) encountered. Partial results
            might be returned if

            warnings are present in the response.
          items:
            $ref: '#/components/schemas/EventsWarning'
          type: array
      type: object
    EventCreateRequest:
      description: An event object.
      properties:
        attributes:
          $ref: '#/components/schemas/EventPayload'
        type:
          $ref: '#/components/schemas/EventCreateRequestType'
      required:
        - type
        - attributes
      type: object
    EventCreateResponse:
      description: Event object.
      properties:
        attributes:
          $ref: '#/components/schemas/EventCreateResponseAttributes'
        type:
          description: Entity type.
          example: event
          type: string
      type: object
    EventCreateResponsePayloadLinks:
      description: Links to the event.
      properties:
        self:
          description: >-
            The URL of the event. This link is only functional when using the
            default subdomain.
          type: string
      type: object
    JSONAPIErrorItem:
      description: API error response body
      properties:
        detail:
          description: >-
            A human-readable explanation specific to this occurrence of the
            error.
          example: Missing required attribute in body
          type: string
        meta:
          additionalProperties: {}
          description: Non-standard meta-information about the error
          type: object
        source:
          $ref: '#/components/schemas/JSONAPIErrorItemSource'
        status:
          description: Status code of the response.
          example: '400'
          type: string
        title:
          description: Short human-readable summary of the error.
          example: Bad Request
          type: string
      type: object
    EventsQueryFilter:
      description: The search and filter query settings.
      properties:
        from:
          default: now-15m
          description: >-
            The minimum time for the requested events. Supports date math and
            regular timestamps in milliseconds.
          example: now-15m
          type: string
        query:
          default: '*'
          description: The search query following the event search syntax.
          example: service:web* AND @http.status_code:[200 TO 299]
          type: string
        to:
          default: now
          description: >-
            The maximum time for the requested events. Supports date math and
            regular timestamps in milliseconds.
          example: now
          type: string
      type: object
    EventsQueryOptions:
      description: >-
        The global query options that are used. Either provide a timezone or a
        time offset but not both,

        otherwise the query fails.
      properties:
        timeOffset:
          description: The time offset to apply to the query in seconds.
          format: int64
          type: integer
        timezone:
          default: UTC
          description: >-
            The timezone can be specified as GMT, UTC, an offset from UTC (like
            UTC+1), or as a Timezone Database identifier (like
            America/New_York).
          example: GMT
          type: string
      type: object
    EventsRequestPage:
      description: Pagination settings.
      properties:
        cursor:
          description: The returned paging point to use to get the next results.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
        limit:
          default: 10
          description: The maximum number of logs in the response.
          example: 25
          format: int32
          maximum: 1000
          type: integer
      type: object
    V2Event:
      description: An event object.
      properties:
        attributes:
          $ref: '#/components/schemas/V2EventAttributes'
        id:
          description: The event's ID.
          example: ''
          type: string
        type:
          description: Entity type.
          example: event
          type: string
      type: object
    IncidentRelatedObject:
      description: Object related to an incident.
      enum:
        - users
        - attachments
      type: string
      x-enum-varnames:
        - USERS
        - ATTACHMENTS
    IncidentResponseData:
      description: Incident data from a response.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentResponseAttributes'
        id:
          description: The incident's ID.
          example: 00000000-0000-0000-1234-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentResponseRelationships'
        type:
          $ref: '#/components/schemas/IncidentType'
      required:
        - id
        - type
      type: object
    IncidentResponseIncludedItem:
      description: An object related to an incident that is included in the response.
      oneOf:
        - $ref: '#/components/schemas/IncidentUserData'
        - $ref: '#/components/schemas/IncidentAttachmentData'
    IncidentResponseMeta:
      description: The metadata object containing pagination metadata.
      properties:
        pagination:
          $ref: '#/components/schemas/IncidentResponseMetaPagination'
      readOnly: true
      type: object
    IncidentCreateData:
      description: Incident data for a create request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentCreateAttributes'
        relationships:
          $ref: '#/components/schemas/IncidentCreateRelationships'
        type:
          $ref: '#/components/schemas/IncidentType'
      required:
        - type
        - attributes
      type: object
    IncidentNotificationRuleResponseData:
      description: Notification rule data from a response.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentNotificationRuleAttributes'
        id:
          description: The unique identifier of the notification rule.
          example: 00000000-0000-0000-0000-000000000001
          format: uuid
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentNotificationRuleRelationships'
        type:
          $ref: '#/components/schemas/IncidentNotificationRuleType'
      required:
        - id
        - type
      type: object
    IncidentNotificationRuleIncludedItems:
      description: Objects related to a notification rule.
      oneOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/IncidentTypeObject'
        - $ref: '#/components/schemas/IncidentNotificationTemplateObject'
    IncidentNotificationRuleArrayMeta:
      description: Response metadata.
      properties:
        pagination:
          $ref: '#/components/schemas/IncidentNotificationRuleArrayMetaPage'
      type: object
    IncidentNotificationRuleCreateData:
      description: Notification rule data for a create request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentNotificationRuleCreateAttributes'
        relationships:
          $ref: '#/components/schemas/IncidentNotificationRuleCreateDataRelationships'
        type:
          $ref: '#/components/schemas/IncidentNotificationRuleType'
      required:
        - type
        - attributes
      type: object
    IncidentNotificationRuleUpdateData:
      description: Notification rule data for an update request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentNotificationRuleCreateAttributes'
        id:
          description: The unique identifier of the notification rule.
          example: 00000000-0000-0000-0000-000000000001
          format: uuid
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentNotificationRuleCreateDataRelationships'
        type:
          $ref: '#/components/schemas/IncidentNotificationRuleType'
      required:
        - id
        - type
        - attributes
      type: object
    IncidentNotificationTemplateResponseData:
      description: Notification template data from a response.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentNotificationTemplateAttributes'
        id:
          description: The unique identifier of the notification template.
          example: 00000000-0000-0000-0000-000000000001
          format: uuid
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentNotificationTemplateRelationships'
        type:
          $ref: '#/components/schemas/IncidentNotificationTemplateType'
      required:
        - id
        - type
      type: object
    IncidentNotificationTemplateIncludedItems:
      description: Objects related to a notification template.
      oneOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/IncidentTypeObject'
    IncidentNotificationTemplateArrayMeta:
      description: Response metadata.
      properties:
        page:
          $ref: '#/components/schemas/IncidentNotificationTemplateArrayMetaPage'
      type: object
    IncidentNotificationTemplateCreateData:
      description: Notification template data for a create request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentNotificationTemplateCreateAttributes'
        relationships:
          $ref: >-
            #/components/schemas/IncidentNotificationTemplateCreateDataRelationships
        type:
          $ref: '#/components/schemas/IncidentNotificationTemplateType'
      required:
        - type
        - attributes
      type: object
    IncidentNotificationTemplateUpdateData:
      description: Notification template data for an update request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentNotificationTemplateUpdateAttributes'
        id:
          description: The unique identifier of the notification template.
          example: 00000000-0000-0000-0000-000000000001
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/IncidentNotificationTemplateType'
      required:
        - id
        - type
      type: object
    IncidentTypeObject:
      description: Incident type response data.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentTypeAttributes'
        id:
          description: The incident type's ID.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentTypeRelationships'
        type:
          $ref: '#/components/schemas/IncidentTypeType'
      required:
        - id
        - type
      type: object
    IncidentTypeCreateData:
      description: Incident type data for a create request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentTypeAttributes'
        type:
          $ref: '#/components/schemas/IncidentTypeType'
      required:
        - type
        - attributes
      type: object
    IncidentTypePatchData:
      description: Incident type data for a patch request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentTypeUpdateAttributes'
        id:
          description: The incident type's ID.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/IncidentTypeType'
      required:
        - id
        - type
        - attributes
      type: object
    IncidentSearchSortOrder:
      description: The ways searched incidents can be sorted.
      enum:
        - created
        - '-created'
      type: string
      x-enum-varnames:
        - CREATED_ASCENDING
        - CREATED_DESCENDING
    IncidentSearchResponseData:
      description: Data returned by an incident search.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentSearchResponseAttributes'
        type:
          $ref: '#/components/schemas/IncidentSearchResultsType'
      type: object
    IncidentSearchResponseMeta:
      description: The metadata object containing pagination metadata.
      properties:
        pagination:
          $ref: '#/components/schemas/IncidentResponseMetaPagination'
      readOnly: true
      type: object
    IncidentUpdateData:
      description: Incident data for an update request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentUpdateAttributes'
        id:
          description: The incident's ID.
          example: 00000000-0000-0000-4567-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentUpdateRelationships'
        type:
          $ref: '#/components/schemas/IncidentType'
      required:
        - id
        - type
      type: object
    IncidentAttachmentRelatedObject:
      description: The object related to an incident attachment.
      enum:
        - users
      type: string
      x-enum-varnames:
        - USERS
    IncidentAttachmentAttachmentType:
      description: The type of the incident attachment attributes.
      enum:
        - link
        - postmortem
      example: link
      type: string
      x-enum-varnames:
        - LINK
        - POSTMORTEM
    IncidentAttachmentData:
      description: A single incident attachment.
      example:
        attributes:
          attachment:
            documentUrl: ''
            title: Postmortem IR-123
          attachment_type: postmortem
        id: 00000000-abcd-0002-0000-000000000000
        relationships:
          last_modified_by_user:
            data:
              id: 00000000-0000-0000-cccc-000000000000
              type: users
        type: incident_attachments
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentAttachmentAttributes'
        id:
          description: A unique identifier that represents the incident attachment.
          example: 00000000-abcd-0001-0000-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentAttachmentRelationships'
        type:
          $ref: '#/components/schemas/IncidentAttachmentType'
      required:
        - type
        - attributes
        - id
        - relationships
      type: object
    IncidentAttachmentsResponseIncludedItem:
      description: An object related to an attachment that is included in the response.
      oneOf:
        - $ref: '#/components/schemas/User'
    IncidentAttachmentUpdateData:
      description: A single incident attachment.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentAttachmentUpdateAttributes'
        id:
          description: A unique identifier that represents the incident attachment.
          example: 00000000-abcd-0001-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/IncidentAttachmentType'
      required:
        - type
      type: object
    IncidentIntegrationMetadataResponseData:
      description: Incident integration metadata from a response.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentIntegrationMetadataAttributes'
        id:
          description: The incident integration metadata's ID.
          example: 00000000-0000-0000-1234-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentIntegrationRelationships'
        type:
          $ref: '#/components/schemas/IncidentIntegrationMetadataType'
      required:
        - id
        - type
      type: object
    IncidentIntegrationMetadataResponseIncludedItem:
      description: >-
        An object related to an incident integration metadata that is included
        in the response.
      oneOf:
        - $ref: '#/components/schemas/User'
    IncidentIntegrationMetadataCreateData:
      description: Incident integration metadata data for a create request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentIntegrationMetadataAttributes'
        type:
          $ref: '#/components/schemas/IncidentIntegrationMetadataType'
      required:
        - type
        - attributes
      type: object
    IncidentIntegrationMetadataPatchData:
      description: Incident integration metadata data for a patch request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentIntegrationMetadataAttributes'
        type:
          $ref: '#/components/schemas/IncidentIntegrationMetadataType'
      required:
        - type
        - attributes
      type: object
    IncidentTodoResponseData:
      description: Incident todo response data.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentTodoAttributes'
        id:
          description: The incident todo's ID.
          example: 00000000-0000-0000-1234-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentTodoRelationships'
        type:
          $ref: '#/components/schemas/IncidentTodoType'
      required:
        - id
        - type
      type: object
    IncidentTodoResponseIncludedItem:
      description: An object related to an incident todo that is included in the response.
      oneOf:
        - $ref: '#/components/schemas/User'
    IncidentTodoCreateData:
      description: Incident todo data for a create request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentTodoAttributes'
        type:
          $ref: '#/components/schemas/IncidentTodoType'
      required:
        - type
        - attributes
      type: object
    IncidentTodoPatchData:
      description: Incident todo data for a patch request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentTodoAttributes'
        type:
          $ref: '#/components/schemas/IncidentTodoType'
      required:
        - type
        - attributes
      type: object
    EscalationPolicyCreateRequestData:
      description: >-
        Represents the data for creating an escalation policy, including its
        attributes, relationships, and resource type.
      properties:
        attributes:
          $ref: '#/components/schemas/EscalationPolicyCreateRequestDataAttributes'
        relationships:
          $ref: '#/components/schemas/EscalationPolicyCreateRequestDataRelationships'
        type:
          $ref: '#/components/schemas/EscalationPolicyCreateRequestDataType'
      required:
        - type
        - attributes
      type: object
    EscalationPolicyData:
      description: >-
        Represents the data for a single escalation policy, including its
        attributes, ID, relationships, and resource type.
      properties:
        attributes:
          $ref: '#/components/schemas/EscalationPolicyDataAttributes'
        id:
          description: Specifies the unique identifier of the escalation policy.
          example: ab000000-0000-0000-0000-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/EscalationPolicyDataRelationships'
        type:
          $ref: '#/components/schemas/EscalationPolicyDataType'
      required:
        - type
      type: object
    EscalationPolicyIncluded:
      description: >-
        Represents included related resources when retrieving an escalation
        policy, such as teams, steps, or targets.
      oneOf:
        - $ref: '#/components/schemas/TeamReference'
        - $ref: '#/components/schemas/EscalationPolicyStep'
        - $ref: '#/components/schemas/EscalationPolicyUser'
        - $ref: '#/components/schemas/ScheduleData'
    EscalationPolicyUpdateRequestData:
      description: >-
        Represents the data for updating an existing escalation policy,
        including its ID, attributes, relationships, and resource type.
      properties:
        attributes:
          $ref: '#/components/schemas/EscalationPolicyUpdateRequestDataAttributes'
        id:
          description: >-
            Specifies the unique identifier of the escalation policy being
            updated.
          example: 00000000-aba1-0000-0000-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/EscalationPolicyUpdateRequestDataRelationships'
        type:
          $ref: '#/components/schemas/EscalationPolicyUpdateRequestDataType'
      required:
        - type
        - id
        - attributes
      type: object
    CreatePageRequestData:
      description: The main request body, including attributes and resource type.
      properties:
        attributes:
          $ref: '#/components/schemas/CreatePageRequestDataAttributes'
        type:
          $ref: '#/components/schemas/CreatePageRequestDataType'
      required:
        - type
      type: object
    CreatePageResponseData:
      description: The information returned after successfully creating a page.
      properties:
        id:
          description: The unique ID of the created page.
          type: string
        type:
          $ref: '#/components/schemas/CreatePageResponseDataType'
      required:
        - type
      type: object
    ScheduleCreateRequestData:
      description: >-
        The core data wrapper for creating a schedule, encompassing attributes,
        relationships, and the resource type.
      properties:
        attributes:
          $ref: '#/components/schemas/ScheduleCreateRequestDataAttributes'
        relationships:
          $ref: '#/components/schemas/ScheduleCreateRequestDataRelationships'
        type:
          $ref: '#/components/schemas/ScheduleCreateRequestDataType'
      required:
        - type
        - attributes
      type: object
    ScheduleData:
      description: >-
        Represents the primary data object for a schedule, linking attributes
        and relationships.
      properties:
        attributes:
          $ref: '#/components/schemas/ScheduleDataAttributes'
        id:
          description: The schedule's unique identifier.
          example: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
          type: string
        relationships:
          $ref: '#/components/schemas/ScheduleDataRelationships'
        type:
          $ref: '#/components/schemas/ScheduleDataType'
      required:
        - type
      type: object
    ScheduleDataIncludedItem:
      description: >-
        Any additional resources related to this schedule, such as teams and
        layers.
      oneOf:
        - $ref: '#/components/schemas/TeamReference'
        - $ref: '#/components/schemas/Layer'
        - $ref: '#/components/schemas/ScheduleMember'
        - $ref: '#/components/schemas/ScheduleUser'
    ScheduleUpdateRequestData:
      description: >-
        Contains all data needed to update an existing schedule, including its
        attributes (such as name and time zone) and any relationships to teams.
      properties:
        attributes:
          $ref: '#/components/schemas/ScheduleUpdateRequestDataAttributes'
        id:
          description: The ID of the schedule to be updated.
          example: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
          type: string
        relationships:
          $ref: '#/components/schemas/ScheduleUpdateRequestDataRelationships'
        type:
          $ref: '#/components/schemas/ScheduleUpdateRequestDataType'
      required:
        - type
        - id
        - attributes
      type: object
    ShiftData:
      description: Data for an on-call shift.
      properties:
        attributes:
          $ref: '#/components/schemas/ShiftDataAttributes'
        id:
          description: The `ShiftData` `id`.
          type: string
        relationships:
          $ref: '#/components/schemas/ShiftDataRelationships'
        type:
          $ref: '#/components/schemas/ShiftDataType'
      required:
        - type
      type: object
    ShiftIncluded:
      description: Included data for shift operations.
      oneOf:
        - $ref: '#/components/schemas/ScheduleUser'
    TeamOnCallRespondersData:
      description: >-
        Defines the main on-call responder object for a team, including
        relationships and metadata.
      properties:
        id:
          description: Unique identifier of the on-call responder configuration.
          type: string
        relationships:
          $ref: '#/components/schemas/TeamOnCallRespondersDataRelationships'
        type:
          $ref: '#/components/schemas/TeamOnCallRespondersDataType'
      required:
        - type
      type: object
    TeamOnCallRespondersIncluded:
      description: >-
        Represents an union of related resources included in the response, such
        as users and escalation steps.
      oneOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/Escalation'
    TeamRoutingRulesData:
      description: >-
        Represents the top-level data object for team routing rules, containing
        the ID, relationships, and resource type.
      properties:
        id:
          description: Specifies the unique identifier of this team routing rules record.
          type: string
        relationships:
          $ref: '#/components/schemas/TeamRoutingRulesDataRelationships'
        type:
          $ref: '#/components/schemas/TeamRoutingRulesDataType'
      required:
        - type
      type: object
    TeamRoutingRulesIncluded:
      description: >-
        Represents additional included resources for team routing rules, such as
        associated routing rules.
      oneOf:
        - $ref: '#/components/schemas/RoutingRule'
    TeamRoutingRulesRequestData:
      description: >-
        Holds the data necessary to create or update team routing rules,
        including attributes, ID, and resource type.
      properties:
        attributes:
          $ref: '#/components/schemas/TeamRoutingRulesRequestDataAttributes'
        id:
          description: Specifies the unique identifier for this set of team routing rules.
          type: string
        type:
          $ref: '#/components/schemas/TeamRoutingRulesRequestDataType'
      required:
        - type
      type: object
    IncidentServiceResponseData:
      description: Incident Service data from responses.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentServiceResponseAttributes'
        id:
          description: The incident service's ID.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentServiceRelationships'
        type:
          $ref: '#/components/schemas/IncidentServiceType'
      required:
        - id
        - type
      type: object
    IncidentServiceIncludedItems:
      description: >-
        An object related to an incident service which is present in the
        included payload.
      oneOf:
        - $ref: '#/components/schemas/User'
    IncidentServiceCreateData:
      description: Incident Service payload for create requests.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentServiceCreateAttributes'
        relationships:
          $ref: '#/components/schemas/IncidentServiceRelationships'
        type:
          $ref: '#/components/schemas/IncidentServiceType'
      required:
        - type
      type: object
    ServiceDefinitionSchemaVersions:
      description: Schema versions
      enum:
        - v1
        - v2
        - v2.1
        - v2.2
      type: string
      x-enum-varnames:
        - V1
        - V2
        - V2_1
        - V2_2
    ServiceDefinitionData:
      description: Service definition data.
      properties:
        attributes:
          $ref: '#/components/schemas/ServiceDefinitionDataAttributes'
        id:
          description: Service definition id.
          type: string
        type:
          description: Service definition type.
          type: string
      type: object
    ServiceDefinitionV2Dot2:
      description: Service definition v2.2 for providing service metadata and integrations.
      properties:
        application:
          description: >-
            Identifier for a group of related services serving a product
            feature, which the service is a part of.
          example: my-app
          type: string
        ci-pipeline-fingerprints:
          description: A set of CI fingerprints.
          example:
            - j88xdEy0J5lc
            - eZ7LMljCk8vo
          items:
            type: string
          type: array
        contacts:
          description: A list of contacts related to the services.
          items:
            $ref: '#/components/schemas/ServiceDefinitionV2Dot2Contact'
          type: array
        dd-service:
          description: >-
            Unique identifier of the service. Must be unique across all services
            and is used to match with a service in Datadog.
          example: my-service
          type: string
        description:
          description: A short description of the service.
          example: My service description
          type: string
        extensions:
          additionalProperties: {}
          description: Extensions to v2.2 schema.
          example:
            myorg/extension: extensionValue
          type: object
        integrations:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot2Integrations'
        languages:
          description: >-
            The service's programming language. Datadog recognizes the following
            languages: `dotnet`, `go`, `java`, `js`, `php`, `python`, `ruby`,
            and `c++`.
          example:
            - dotnet
            - go
            - java
            - js
            - php
            - python
            - ruby
            - c++
          items:
            type: string
          type: array
        lifecycle:
          description: The current life cycle phase of the service.
          example: sandbox
          type: string
        links:
          description: A list of links related to the services.
          items:
            $ref: '#/components/schemas/ServiceDefinitionV2Dot2Link'
          type: array
        schema-version:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot2Version'
        tags:
          description: A set of custom tags.
          example:
            - my:tag
            - service:tag
          items:
            type: string
          type: array
        team:
          description: >-
            Team that owns the service. It is used to locate a team defined in
            Datadog Teams if it exists.
          example: my-team
          type: string
        tier:
          description: Importance of the service.
          example: High
          type: string
        type:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot2Type'
      required:
        - schema-version
        - dd-service
      type: object
    ServiceDefinitionV2Dot1:
      description: Service definition v2.1 for providing service metadata and integrations.
      properties:
        application:
          description: >-
            Identifier for a group of related services serving a product
            feature, which the service is a part of.
          example: my-app
          type: string
        contacts:
          description: A list of contacts related to the services.
          items:
            $ref: '#/components/schemas/ServiceDefinitionV2Dot1Contact'
          type: array
        dd-service:
          description: >-
            Unique identifier of the service. Must be unique across all services
            and is used to match with a service in Datadog.
          example: my-service
          type: string
        description:
          description: A short description of the service.
          example: My service description
          type: string
        extensions:
          additionalProperties: {}
          description: Extensions to v2.1 schema.
          example:
            myorg/extension: extensionValue
          type: object
        integrations:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot1Integrations'
        lifecycle:
          description: The current life cycle phase of the service.
          example: sandbox
          type: string
        links:
          description: A list of links related to the services.
          items:
            $ref: '#/components/schemas/ServiceDefinitionV2Dot1Link'
          type: array
        schema-version:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot1Version'
        tags:
          description: A set of custom tags.
          example:
            - my:tag
            - service:tag
          items:
            type: string
          type: array
        team:
          description: >-
            Team that owns the service. It is used to locate a team defined in
            Datadog Teams if it exists.
          example: my-team
          type: string
        tier:
          description: Importance of the service.
          example: High
          type: string
      required:
        - schema-version
        - dd-service
      type: object
    ServiceDefinitionV2:
      description: Service definition V2 for providing service metadata and integrations.
      properties:
        contacts:
          description: A list of contacts related to the services.
          items:
            $ref: '#/components/schemas/ServiceDefinitionV2Contact'
          type: array
        dd-service:
          description: >-
            Unique identifier of the service. Must be unique across all services
            and is used to match with a service in Datadog.
          example: my-service
          type: string
        dd-team:
          description: >-
            Experimental feature. A Team handle that matches a Team in the
            Datadog Teams product.
          example: my-team
          type: string
        docs:
          description: A list of documentation related to the services.
          items:
            $ref: '#/components/schemas/ServiceDefinitionV2Doc'
          type: array
        extensions:
          additionalProperties: {}
          description: Extensions to V2 schema.
          example:
            myorg/extension: extensionValue
          type: object
        integrations:
          $ref: '#/components/schemas/ServiceDefinitionV2Integrations'
        links:
          description: A list of links related to the services.
          items:
            $ref: '#/components/schemas/ServiceDefinitionV2Link'
          type: array
        repos:
          description: A list of code repositories related to the services.
          items:
            $ref: '#/components/schemas/ServiceDefinitionV2Repo'
          type: array
        schema-version:
          $ref: '#/components/schemas/ServiceDefinitionV2Version'
        tags:
          description: A set of custom tags.
          example:
            - my:tag
            - service:tag
          items:
            type: string
          type: array
        team:
          description: Team that owns the service.
          example: my-team
          type: string
      required:
        - schema-version
        - dd-service
      type: object
    ServiceDefinitionRaw:
      description: Service Definition in raw JSON/YAML representation.
      example: |
        ---
        schema-version: v2
        dd-service: my-service
      type: string
    IncidentServiceUpdateData:
      description: Incident Service payload for update requests.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentServiceUpdateAttributes'
        id:
          description: The incident service's ID.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentServiceRelationships'
        type:
          $ref: '#/components/schemas/IncidentServiceType'
      required:
        - type
      type: object
    SloReportCreateRequestData:
      description: The data portion of the SLO report request.
      properties:
        attributes:
          $ref: '#/components/schemas/SloReportCreateRequestAttributes'
      required:
        - attributes
      type: object
    SLOReportPostResponseData:
      description: The data portion of the SLO report response.
      properties:
        id:
          description: The ID of the report job.
          example: dc8d92aa-e0af-11ee-af21-1feeaccaa3a3
          type: string
        type:
          description: The type of ID.
          example: report_id
          type: string
      type: object
    SLOReportStatusGetResponseData:
      description: The data portion of the SLO report status response.
      properties:
        attributes:
          $ref: '#/components/schemas/SLOReportStatusGetResponseAttributes'
        id:
          description: The ID of the report job.
          example: dc8d92aa-e0af-11ee-af21-1feeaccaa3a3
          type: string
        type:
          description: The type of ID.
          example: report_id
          type: string
      type: object
    IncidentTeamResponseData:
      description: Incident Team data from a response.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentTeamResponseAttributes'
        id:
          description: The incident team's ID.
          example: 00000000-7ea3-0000-000a-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentTeamRelationships'
        type:
          $ref: '#/components/schemas/IncidentTeamType'
      type: object
    IncidentTeamIncludedItems:
      description: >-
        An object related to an incident team which is present in the included
        payload.
      oneOf:
        - $ref: '#/components/schemas/User'
    IncidentTeamCreateData:
      description: Incident Team data for a create request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentTeamCreateAttributes'
        relationships:
          $ref: '#/components/schemas/IncidentTeamRelationships'
        type:
          $ref: '#/components/schemas/IncidentTeamType'
      required:
        - type
      type: object
    IncidentTeamUpdateData:
      description: Incident Team data for an update request.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentTeamUpdateAttributes'
        id:
          description: The incident team's ID.
          example: 00000000-7ea3-0000-0001-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentTeamRelationships'
        type:
          $ref: '#/components/schemas/IncidentTeamType'
      required:
        - type
      type: object
    CaseAttributes:
      description: Case resource attributes
      properties:
        archived_at:
          description: Timestamp of when the case was archived
          format: date-time
          nullable: true
          readOnly: true
          type: string
        attributes:
          $ref: '#/components/schemas/CaseObjectAttributes'
        closed_at:
          description: Timestamp of when the case was closed
          format: date-time
          nullable: true
          readOnly: true
          type: string
        created_at:
          description: Timestamp of when the case was created
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description
          type: string
        jira_issue:
          $ref: '#/components/schemas/JiraIssue'
        key:
          description: Key
          example: CASEM-4523
          type: string
        modified_at:
          description: Timestamp of when the case was last modified
          format: date-time
          nullable: true
          readOnly: true
          type: string
        priority:
          $ref: '#/components/schemas/CasePriority'
        service_now_ticket:
          $ref: '#/components/schemas/ServiceNowTicket'
        status:
          $ref: '#/components/schemas/CaseStatus'
        title:
          description: Title
          example: Memory leak investigation on API
          type: string
        type:
          $ref: '#/components/schemas/CaseType'
      type: object
    CaseRelationships:
      description: Resources related to a case
      properties:
        assignee:
          $ref: '#/components/schemas/NullableUserRelationship'
        created_by:
          $ref: '#/components/schemas/NullableUserRelationship'
        modified_by:
          $ref: '#/components/schemas/NullableUserRelationship'
        project:
          $ref: '#/components/schemas/ProjectRelationship'
      type: object
    CaseResourceType:
      default: case
      description: Case resource type
      enum:
        - case
      example: case
      type: string
      x-enum-varnames:
        - CASE
    CasesResponseMetaPagination:
      description: Pagination metadata
      properties:
        current:
          description: Current page number
          format: int64
          type: integer
        size:
          description: Number of cases in current page
          format: int64
          type: integer
        total:
          description: Total number of pages
          format: int64
          type: integer
      type: object
    CaseCreateAttributes:
      description: Case creation attributes
      properties:
        description:
          description: Description
          type: string
        priority:
          $ref: '#/components/schemas/CasePriority'
        title:
          description: Title
          example: Security breach investigation
          type: string
        type:
          $ref: '#/components/schemas/CaseType'
      required:
        - title
        - type
      type: object
    CaseCreateRelationships:
      description: Relationships formed with the case on creation
      properties:
        assignee:
          $ref: '#/components/schemas/NullableUserRelationship'
        project:
          $ref: '#/components/schemas/ProjectRelationship'
      required:
        - project
      type: object
    ProjectAttributes:
      description: Project attributes
      properties:
        key:
          description: The project's key
          example: CASEM
          type: string
        name:
          description: Project's name
          type: string
      type: object
    ProjectRelationships:
      description: Project relationships
      properties:
        member_team:
          $ref: '#/components/schemas/RelationshipToTeamLinks'
        member_user:
          $ref: '#/components/schemas/UsersRelationship'
      type: object
    ProjectResourceType:
      default: project
      description: Project resource type
      enum:
        - project
      example: project
      type: string
      x-enum-varnames:
        - PROJECT
    ProjectCreateAttributes:
      description: Project creation attributes
      properties:
        key:
          description: Project's key. Cannot be "CASE"
          example: SEC
          type: string
        name:
          description: name
          example: Security Investigation
          type: string
      required:
        - name
        - key
      type: object
    CaseAssignAttributes:
      description: Case assign attributes
      properties:
        assignee_id:
          description: Assignee's UUID
          example: f98a5a5b-e0ff-45d4-b2f5-afe6e74de504
          type: string
      required:
        - assignee_id
      type: object
    CaseUpdateAttributesAttributes:
      description: Case update attributes attributes
      properties:
        attributes:
          $ref: '#/components/schemas/CaseObjectAttributes'
      required:
        - attributes
      type: object
    CaseUpdatePriorityAttributes:
      description: Case update priority attributes
      properties:
        priority:
          $ref: '#/components/schemas/CasePriority'
      required:
        - priority
      type: object
    CaseUpdateStatusAttributes:
      description: Case update status attributes
      properties:
        status:
          $ref: '#/components/schemas/CaseStatus'
      required:
        - status
      type: object
    DowntimeResponseAttributes:
      description: Downtime details.
      properties:
        canceled:
          description: Time that the downtime was canceled.
          example: 2020-01-02T03:04:05.282979+0000
          format: date-time
          nullable: true
          type: string
        created:
          description: Creation time of the downtime.
          example: 2020-01-02T03:04:05.282979+0000
          format: date-time
          type: string
        display_timezone:
          $ref: '#/components/schemas/DowntimeDisplayTimezone'
        message:
          $ref: '#/components/schemas/DowntimeMessage'
        modified:
          description: Time that the downtime was last modified.
          example: 2020-01-02T03:04:05.282979+0000
          format: date-time
          type: string
        monitor_identifier:
          $ref: '#/components/schemas/DowntimeMonitorIdentifier'
        mute_first_recovery_notification:
          $ref: '#/components/schemas/DowntimeMuteFirstRecoveryNotification'
        notify_end_states:
          $ref: '#/components/schemas/DowntimeNotifyEndStates'
        notify_end_types:
          $ref: '#/components/schemas/DowntimeNotifyEndTypes'
        schedule:
          $ref: '#/components/schemas/DowntimeScheduleResponse'
        scope:
          $ref: '#/components/schemas/DowntimeScope'
        status:
          $ref: '#/components/schemas/DowntimeStatus'
      type: object
    DowntimeRelationships:
      description: All relationships associated with downtime.
      properties:
        created_by:
          $ref: '#/components/schemas/DowntimeRelationshipsCreatedBy'
        monitor:
          $ref: '#/components/schemas/DowntimeRelationshipsMonitor'
      type: object
    DowntimeResourceType:
      default: downtime
      description: Downtime resource type.
      enum:
        - downtime
      example: downtime
      type: string
      x-enum-varnames:
        - DOWNTIME
    User:
      description: User object returned by the API.
      properties:
        attributes:
          $ref: '#/components/schemas/UserAttributes'
        id:
          description: ID of the user.
          type: string
        relationships:
          $ref: '#/components/schemas/UserResponseRelationships'
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    DowntimeMonitorIncludedItem:
      description: Information about the monitor identified by the downtime.
      properties:
        attributes:
          $ref: '#/components/schemas/DowntimeMonitorIncludedAttributes'
        id:
          description: ID of the monitor identified by the downtime.
          example: 12345
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/DowntimeIncludedMonitorType'
      type: object
    DowntimeMetaPage:
      description: Object containing the total filtered count.
      properties:
        total_filtered_count:
          description: Total count of elements matched by the filter.
          format: int64
          type: integer
      type: object
    DowntimeCreateRequestAttributes:
      description: Downtime details.
      properties:
        display_timezone:
          $ref: '#/components/schemas/DowntimeDisplayTimezone'
        message:
          $ref: '#/components/schemas/DowntimeMessage'
        monitor_identifier:
          $ref: '#/components/schemas/DowntimeMonitorIdentifier'
        mute_first_recovery_notification:
          $ref: '#/components/schemas/DowntimeMuteFirstRecoveryNotification'
        notify_end_states:
          $ref: '#/components/schemas/DowntimeNotifyEndStates'
        notify_end_types:
          $ref: '#/components/schemas/DowntimeNotifyEndTypes'
        schedule:
          $ref: '#/components/schemas/DowntimeScheduleCreateRequest'
        scope:
          $ref: '#/components/schemas/DowntimeScope'
      required:
        - scope
        - monitor_identifier
      type: object
    DowntimeUpdateRequestAttributes:
      description: Attributes of the downtime to update.
      properties:
        display_timezone:
          $ref: '#/components/schemas/DowntimeDisplayTimezone'
        message:
          $ref: '#/components/schemas/DowntimeMessage'
        monitor_identifier:
          $ref: '#/components/schemas/DowntimeMonitorIdentifier'
        mute_first_recovery_notification:
          $ref: '#/components/schemas/DowntimeMuteFirstRecoveryNotification'
        notify_end_states:
          $ref: '#/components/schemas/DowntimeNotifyEndStates'
        notify_end_types:
          $ref: '#/components/schemas/DowntimeNotifyEndTypes'
        schedule:
          $ref: '#/components/schemas/DowntimeScheduleUpdateRequest'
        scope:
          $ref: '#/components/schemas/DowntimeScope'
      type: object
    IssuesSearchRequestDataAttributes:
      description: Object describing a search issue request.
      properties:
        from:
          description: >-
            Start date (inclusive) of the query in milliseconds since the Unix
            epoch.
          example: 1671612804000
          format: int64
          type: integer
        order_by:
          $ref: '#/components/schemas/IssuesSearchRequestDataAttributesOrderBy'
        persona:
          $ref: '#/components/schemas/IssuesSearchRequestDataAttributesPersona'
        query:
          description: Search query following the event search syntax.
          example: service:orders-* AND @language:go
          type: string
        to:
          description: >-
            End date (exclusive) of the query in milliseconds since the Unix
            epoch.
          example: 1671620004000
          format: int64
          type: integer
        track:
          $ref: '#/components/schemas/IssuesSearchRequestDataAttributesTrack'
      required:
        - query
        - from
        - to
      type: object
    IssuesSearchRequestDataType:
      description: Type of the object.
      enum:
        - search_request
      example: search_request
      type: string
      x-enum-varnames:
        - SEARCH_REQUEST
    IssuesSearchResultAttributes:
      description: Object containing the information of a search result.
      properties:
        impacted_sessions:
          description: >-
            Count of sessions impacted by the issue over the queried time
            window.
          example: 12
          format: int64
          type: integer
        impacted_users:
          description: Count of users impacted by the issue over the queried time window.
          example: 4
          format: int64
          type: integer
        total_count:
          description: >-
            Total count of errors that match the issue over the queried time
            window.
          example: 82
          format: int64
          type: integer
      type: object
    IssuesSearchResultRelationships:
      description: Relationships between the search result and other resources.
      properties:
        issue:
          $ref: '#/components/schemas/IssuesSearchResultIssueRelationship'
      type: object
    IssuesSearchResultType:
      description: Type of the object.
      enum:
        - error_tracking_search_result
      example: error_tracking_search_result
      type: string
      x-enum-varnames:
        - ERROR_TRACKING_SEARCH_RESULT
    IssueUser:
      description: The user to whom the issue is assigned.
      properties:
        attributes:
          $ref: '#/components/schemas/IssueUserAttributes'
        id:
          description: User identifier.
          example: 87cb11a0-278c-440a-99fe-701223c80296
          type: string
        type:
          $ref: '#/components/schemas/IssueUserType'
      required:
        - id
        - type
        - attributes
      type: object
    IssueTeam:
      description: A team that owns an issue.
      properties:
        attributes:
          $ref: '#/components/schemas/IssueTeamAttributes'
        id:
          description: Team identifier.
          example: 221b0179-6447-4d03-91c3-3ca98bf60e8a
          type: string
        type:
          $ref: '#/components/schemas/IssueTeamType'
      required:
        - id
        - type
        - attributes
      type: object
    IssueAttributes:
      description: Object containing the information of an issue.
      properties:
        error_message:
          description: Error message associated with the issue.
          example: object of type 'NoneType' has no len()
          type: string
        error_type:
          description: Type of the error that matches the issue.
          example: builtins.TypeError
          type: string
        file_path:
          description: Path of the file where the issue occurred.
          example: /django-email/conduit/apps/core/utils.py
          type: string
        first_seen:
          description: >-
            Timestamp of the first seen error in milliseconds since the Unix
            epoch.
          example: 1671612804001
          format: int64
          type: integer
        first_seen_version:
          description: >-
            The application version (for example, git commit hash) where the
            issue was first observed.
          example: aaf65cd0
          type: string
        function_name:
          description: Name of the function where the issue occurred.
          example: filter_forbidden_tags
          type: string
        is_crash:
          description: Error is a crash.
          example: false
          type: boolean
        languages:
          description: Array of programming languages associated with the issue.
          example:
            - PYTHON
            - GO
          items:
            $ref: '#/components/schemas/IssueLanguage'
          type: array
        last_seen:
          description: >-
            Timestamp of the last seen error in milliseconds since the Unix
            epoch.
          example: 1671620003100
          format: int64
          type: integer
        last_seen_version:
          description: >-
            The application version (for example, git commit hash) where the
            issue was last observed.
          example: b6199f80
          type: string
        platform:
          $ref: '#/components/schemas/IssuePlatform'
        service:
          description: Service name.
          example: email-api-py
          type: string
        state:
          $ref: '#/components/schemas/IssueState'
      type: object
    IssueRelationships:
      description: Relationship between the issue and an assignee, case and/or teams.
      properties:
        assignee:
          $ref: '#/components/schemas/IssueAssigneeRelationship'
        case:
          $ref: '#/components/schemas/IssueCaseRelationship'
        team_owners:
          $ref: '#/components/schemas/IssueTeamOwnersRelationship'
      type: object
    IssueType:
      description: Type of the object.
      enum:
        - issue
      example: issue
      type: string
      x-enum-varnames:
        - ISSUE
    IssueCase:
      description: The case attached to the issue.
      properties:
        attributes:
          $ref: '#/components/schemas/IssueCaseAttributes'
        id:
          description: Case identifier.
          example: 2841440d-e780-4fe2-96cd-6a8c1d194da5
          type: string
        relationships:
          $ref: '#/components/schemas/IssueCaseRelationships'
        type:
          $ref: '#/components/schemas/IssueCaseResourceType'
      required:
        - id
        - type
        - attributes
      type: object
    IssueUpdateAssigneeRequestDataType:
      description: Type of the object.
      enum:
        - assignee
      example: assignee
      type: string
      x-enum-varnames:
        - ASSIGNEE
    IssueUpdateStateRequestDataAttributes:
      description: Object describing an issue state update request.
      properties:
        state:
          $ref: '#/components/schemas/IssueState'
      required:
        - state
      type: object
    IssueUpdateStateRequestDataType:
      description: Type of the object.
      enum:
        - error_tracking_issue
      example: error_tracking_issue
      type: string
      x-enum-varnames:
        - ERROR_TRACKING_ISSUE
    EventResponseAttributes:
      description: The object description of an event response attribute.
      properties:
        attributes:
          $ref: '#/components/schemas/EventAttributes'
        message:
          description: The message of the event.
          type: string
        tags:
          description: An array of tags associated with the event.
          example:
            - team:A
          items:
            description: The tag associated with the event.
            type: string
          type: array
        timestamp:
          description: The timestamp of the event.
          example: '2019-01-02T09:42:36.320Z'
          format: date-time
          type: string
      type: object
    EventType:
      default: event
      description: Type of the event.
      enum:
        - event
      example: event
      type: string
      x-enum-varnames:
        - EVENT
    EventsResponseMetadataPage:
      description: Pagination attributes.
      properties:
        after:
          description: >-
            The cursor to use to get the next results, if any. To make the next
            request, use the same

            parameters with the addition of the `page[cursor]`.
          example: >-
            eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==
          type: string
      type: object
    EventsWarning:
      description: A warning message indicating something is wrong with the query.
      properties:
        code:
          description: A unique code for this type of warning.
          example: unknown_index
          type: string
        detail:
          description: A detailed explanation of this specific warning.
          example: 'indexes: foo, bar'
          type: string
        title:
          description: A short human-readable summary of the warning.
          example: >-
            One or several indexes are missing or invalid. Results hold data
            from the other indexes.
          type: string
      type: object
    EventPayload:
      additionalProperties: false
      description: Event attributes.
      properties:
        aggregation_key:
          description: >-
            A string used for aggregation when
            [correlating](https://docs.datadoghq.com/service_management/events/correlation/)
            events. If you specify a key, events are deduplicated to alerts
            based on this key. Limited to 100 characters.
          example: aggregation_key_123
          maxLength: 100
          minLength: 1
          type: string
        attributes:
          $ref: '#/components/schemas/EventPayloadAttributes'
        category:
          $ref: '#/components/schemas/EventCategory'
        integration_id:
          $ref: '#/components/schemas/EventPayloadIntegrationId'
        message:
          description: >-
            Free formed text associated with the event. It's suggested to use
            `data.attributes.attributes.custom` for well-structured attributes.
            Limited to 4000 characters.
          example: payment_processed feature flag has been enabled
          maxLength: 4000
          minLength: 1
          type: string
        tags:
          description: >-
            A list of tags associated with the event. Maximum of 100 tags
            allowed.

            Refer to [Tags
            docs](https://docs.datadoghq.com/getting_started/tagging/).
          example:
            - env:api_client_test
          items:
            description: A tag.
            maxLength: 200
            minLength: 1
            type: string
          maxItems: 100
          minItems: 1
          type: array
        timestamp:
          description: >-
            Timestamp when the event occurred. Must follow [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format.

            For example `"2017-01-15T01:30:15.010000Z"`.

            Defaults to the timestamp of receipt. Limited to values no older
            than 18 hours.
          type: string
        title:
          description: The title of the event. Limited to 500 characters.
          example: payment_processed feature flag updated
          maxLength: 500
          minLength: 1
          type: string
      required:
        - title
        - category
        - attributes
      type: object
    EventCreateRequestType:
      description: Entity type.
      enum:
        - event
      example: event
      type: string
      x-enum-varnames:
        - EVENT
    EventCreateResponseAttributes:
      description: Event attributes.
      properties:
        attributes:
          $ref: '#/components/schemas/EventCreateResponseAttributesAttributes'
      type: object
    JSONAPIErrorItemSource:
      description: References to the source of the error.
      properties:
        header:
          description: >-
            A string indicating the name of a single request header which caused
            the error.
          example: Authorization
          type: string
        parameter:
          description: A string indicating which URI query parameter caused the error.
          example: limit
          type: string
        pointer:
          description: >-
            A JSON pointer to the value in the request document that caused the
            error.
          example: /data/attributes/title
          type: string
      type: object
    V2EventAttributes:
      description: Event attributes.
      properties:
        attributes:
          $ref: '#/components/schemas/V2EventAttributesAttributes'
        message:
          description: Free-form text associated with the event.
          example: The event message
          type: string
        tags:
          description: A list of tags associated with the event.
          example:
            - env:api_client_test
          items:
            description: A tag.
            type: string
          type: array
        timestamp:
          description: Timestamp when the event occurred.
          example: '2017-01-15T01:30:15.010000Z'
          type: string
      type: object
    IncidentResponseAttributes:
      description: The incident's attributes from a response.
      properties:
        archived:
          description: Timestamp of when the incident was archived.
          format: date-time
          nullable: true
          readOnly: true
          type: string
        case_id:
          description: The incident case id.
          format: int64
          nullable: true
          type: integer
        created:
          description: Timestamp when the incident was created.
          format: date-time
          readOnly: true
          type: string
        customer_impact_duration:
          description: >-
            Length of the incident's customer impact in seconds.

            Equals the difference between `customer_impact_start` and
            `customer_impact_end`.
          format: int64
          readOnly: true
          type: integer
        customer_impact_end:
          description: Timestamp when customers were no longer impacted by the incident.
          format: date-time
          nullable: true
          type: string
        customer_impact_scope:
          description: A summary of the impact customers experienced during the incident.
          example: An example customer impact scope
          nullable: true
          type: string
        customer_impact_start:
          description: Timestamp when customers began being impacted by the incident.
          format: date-time
          nullable: true
          type: string
        customer_impacted:
          description: A flag indicating whether the incident caused customer impact.
          example: false
          type: boolean
        detected:
          description: Timestamp when the incident was detected.
          format: date-time
          nullable: true
          type: string
        fields:
          additionalProperties:
            $ref: '#/components/schemas/IncidentFieldAttributes'
          description: A condensed view of the user-defined fields attached to incidents.
          example:
            severity:
              type: dropdown
              value: SEV-5
          type: object
        incident_type_uuid:
          description: A unique identifier that represents an incident type.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        is_test:
          description: A flag indicating whether the incident is a test incident.
          example: false
          type: boolean
        modified:
          description: Timestamp when the incident was last modified.
          format: date-time
          readOnly: true
          type: string
        non_datadog_creator:
          $ref: '#/components/schemas/IncidentNonDatadogCreator'
        notification_handles:
          description: >-
            Notification handles that will be notified of the incident during
            update.
          example:
            - display_name: Jane Doe
              handle: '@user@email.com'
            - display_name: Slack Channel
              handle: '@slack-channel'
            - display_name: Incident Workflow
              handle: '@workflow-from-incident'
          items:
            $ref: '#/components/schemas/IncidentNotificationHandle'
          nullable: true
          type: array
        public_id:
          description: The monotonically increasing integer ID for the incident.
          example: 1
          format: int64
          type: integer
        resolved:
          description: >-
            Timestamp when the incident's state was last changed from active or
            stable to resolved or completed.
          format: date-time
          nullable: true
          type: string
        severity:
          $ref: '#/components/schemas/IncidentSeverity'
        state:
          description: The state incident.
          nullable: true
          type: string
        time_to_detect:
          description: >-
            The amount of time in seconds to detect the incident.

            Equals the difference between `customer_impact_start` and
            `detected`.
          format: int64
          readOnly: true
          type: integer
        time_to_internal_response:
          description: >-
            The amount of time in seconds to call incident after detection.
            Equals the difference of `detected` and `created`.
          format: int64
          readOnly: true
          type: integer
        time_to_repair:
          description: >-
            The amount of time in seconds to resolve customer impact after
            detecting the issue. Equals the difference between
            `customer_impact_end` and `detected`.
          format: int64
          readOnly: true
          type: integer
        time_to_resolve:
          description: >-
            The amount of time in seconds to resolve the incident after it was
            created. Equals the difference between `created` and `resolved`.
          format: int64
          readOnly: true
          type: integer
        title:
          description: The title of the incident, which summarizes what happened.
          example: A test incident title
          type: string
        visibility:
          description: The incident visibility status.
          nullable: true
          type: string
      required:
        - title
      type: object
    IncidentResponseRelationships:
      description: The incident's relationships from a response.
      properties:
        attachments:
          $ref: '#/components/schemas/RelationshipToIncidentAttachment'
        commander_user:
          $ref: '#/components/schemas/NullableRelationshipToUser'
        created_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
        impacts:
          $ref: '#/components/schemas/RelationshipToIncidentImpacts'
        integrations:
          $ref: '#/components/schemas/RelationshipToIncidentIntegrationMetadatas'
        last_modified_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
        responders:
          $ref: '#/components/schemas/RelationshipToIncidentResponders'
        user_defined_fields:
          $ref: '#/components/schemas/RelationshipToIncidentUserDefinedFields'
      type: object
    IncidentType:
      default: incidents
      description: Incident resource type.
      enum:
        - incidents
      example: incidents
      type: string
      x-enum-varnames:
        - INCIDENTS
    IncidentUserData:
      description: User object returned by the API.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentUserAttributes'
        id:
          description: ID of the user.
          type: string
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    IncidentResponseMetaPagination:
      description: Pagination properties.
      properties:
        next_offset:
          description: >-
            The index of the first element in the next page of results. Equal to
            page size added to the current offset.
          example: 1000
          format: int64
          type: integer
        offset:
          description: The index of the first element in the results.
          example: 10
          format: int64
          type: integer
        size:
          description: Maximum size of pages to return.
          example: 1000
          format: int64
          type: integer
      type: object
    IncidentCreateAttributes:
      description: The incident's attributes for a create request.
      properties:
        customer_impact_scope:
          description: >-
            Required if `customer_impacted:"true"`. A summary of the impact
            customers experienced during the incident.
          example: Example customer impact scope
          type: string
        customer_impacted:
          description: A flag indicating whether the incident caused customer impact.
          example: false
          type: boolean
        fields:
          additionalProperties:
            $ref: '#/components/schemas/IncidentFieldAttributes'
          description: >-
            A condensed view of the user-defined fields for which to create
            initial selections.
          example:
            severity:
              type: dropdown
              value: SEV-5
          type: object
        incident_type_uuid:
          description: >-
            A unique identifier that represents an incident type. The default
            incident type will be used if this property is not provided.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        initial_cells:
          description: >-
            An array of initial timeline cells to be placed at the beginning of
            the incident timeline.
          items:
            $ref: '#/components/schemas/IncidentTimelineCellCreateAttributes'
          type: array
        is_test:
          description: A flag indicating whether the incident is a test incident.
          example: false
          type: boolean
        notification_handles:
          description: >-
            Notification handles that will be notified of the incident at
            creation.
          example:
            - display_name: Jane Doe
              handle: '@user@email.com'
            - display_name: Slack Channel
              handle: '@slack-channel'
            - display_name: Incident Workflow
              handle: '@workflow-from-incident'
          items:
            $ref: '#/components/schemas/IncidentNotificationHandle'
          type: array
        title:
          description: The title of the incident, which summarizes what happened.
          example: A test incident title
          type: string
      required:
        - title
        - customer_impacted
      type: object
    IncidentCreateRelationships:
      description: >-
        The relationships the incident will have with other resources once
        created.
      properties:
        commander_user:
          $ref: '#/components/schemas/NullableRelationshipToUser'
      required:
        - commander_user
      type: object
    IncidentNotificationRuleAttributes:
      description: The notification rule's attributes.
      properties:
        conditions:
          $ref: '#/components/schemas/IncidentNotificationRuleConditions'
        created:
          description: Timestamp when the notification rule was created.
          example: '2025-01-15T10:30:00Z'
          format: date-time
          readOnly: true
          type: string
        enabled:
          description: Whether the notification rule is enabled.
          example: true
          type: boolean
        handles:
          $ref: '#/components/schemas/IncidentNotificationRuleHandles'
        modified:
          description: Timestamp when the notification rule was last modified.
          example: '2025-01-15T14:45:00Z'
          format: date-time
          readOnly: true
          type: string
        renotify_on:
          $ref: '#/components/schemas/IncidentNotificationRuleRenotifyOn'
        trigger:
          description: The trigger event for this notification rule.
          example: incident_created_trigger
          type: string
        visibility:
          $ref: '#/components/schemas/IncidentNotificationRuleAttributesVisibility'
      required:
        - conditions
        - handles
        - visibility
        - trigger
        - enabled
        - created
        - modified
      type: object
    IncidentNotificationRuleRelationships:
      description: The notification rule's resource relationships.
      properties:
        created_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
        incident_type:
          $ref: '#/components/schemas/RelationshipToIncidentType'
        last_modified_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
        notification_template:
          $ref: '#/components/schemas/RelationshipToIncidentNotificationTemplate'
      type: object
    IncidentNotificationRuleType:
      description: Notification rules resource type.
      enum:
        - incident_notification_rules
      example: incident_notification_rules
      type: string
      x-enum-varnames:
        - INCIDENT_NOTIFICATION_RULES
    IncidentNotificationTemplateObject:
      description: A notification template object for inclusion in other resources.
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentNotificationTemplateAttributes'
        id:
          description: The unique identifier of the notification template.
          example: 00000000-0000-0000-0000-000000000001
          format: uuid
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentNotificationTemplateRelationships'
        type:
          $ref: '#/components/schemas/IncidentNotificationTemplateType'
      required:
        - id
        - type
      type: object
    IncidentNotificationRuleArrayMetaPage:
      description: Pagination metadata.
      properties:
        next_offset:
          description: The offset for the next page of results.
          example: 15
          format: int64
          type: integer
        offset:
          description: The current offset in the results.
          example: 0
          format: int64
          type: integer
        size:
          description: The number of results returned per page.
          example: 15
          format: int64
          type: integer
      type: object
    IncidentNotificationRuleCreateAttributes:
      description: The attributes for creating a notification rule.
      properties:
        conditions:
          $ref: '#/components/schemas/IncidentNotificationRuleConditions'
        enabled:
          default: false
          description: Whether the notification rule is enabled.
          example: true
          type: boolean
        handles:
          $ref: '#/components/schemas/IncidentNotificationRuleHandles'
        renotify_on:
          $ref: '#/components/schemas/IncidentNotificationRuleRenotifyOn'
        trigger:
          description: The trigger event for this notification rule.
          example: incident_created_trigger
          type: string
        visibility:
          $ref: >-
            #/components/schemas/IncidentNotificationRuleCreateAttributesVisibility
      required:
        - conditions
        - handles
        - trigger
      type: object
    IncidentNotificationRuleCreateDataRelationships:
      description: The definition of `NotificationRuleCreateDataRelationships` object.
      properties:
        incident_type:
          $ref: '#/components/schemas/RelationshipToIncidentType'
        notification_template:
          $ref: '#/components/schemas/RelationshipToIncidentNotificationTemplate'
      type: object
    IncidentNotificationTemplateAttributes:
      description: The notification template's attributes.
      properties:
        category:
          description: The category of the notification template.
          example: alert
          type: string
        content:
          description: The content body of the notification template.
          example: |-
            An incident has been declared.

            Title: {{incident.title}}
            Severity: {{incident.severity}}
            Affected Services: {{incident.services}}
            Status: {{incident.state}}

            Please join the incident channel for updates.
          type: string
        created:
          description: Timestamp when the notification template was created.
          example: '2025-01-15T10:30:00Z'
          format: date-time
          readOnly: true
          type: string
        modified:
          description: Timestamp when the notification template was last modified.
          example: '2025-01-15T14:45:00Z'
          format: date-time
          readOnly: true
          type: string
        name:
          description: The name of the notification template.
          example: Incident Alert Template
          type: string
        subject:
          description: The subject line of the notification template.
          example: '{{incident.severity}} Incident: {{incident.title}}'
          type: string
      required:
        - name
        - subject
        - content
        - category
        - created
        - modified
      type: object
    IncidentNotificationTemplateRelationships:
      description: The notification template's resource relationships.
      properties:
        created_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
        incident_type:
          $ref: '#/components/schemas/RelationshipToIncidentType'
        last_modified_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
      type: object
    IncidentNotificationTemplateType:
      description: Notification templates resource type.
      enum:
        - notification_templates
      example: notification_templates
      type: string
      x-enum-varnames:
        - NOTIFICATION_TEMPLATES
    IncidentNotificationTemplateArrayMetaPage:
      description: Pagination metadata.
      properties:
        total_count:
          description: Total number of notification templates.
          example: 42
          format: int64
          type: integer
        total_filtered_count:
          description: Total number of notification templates matching the filter.
          example: 15
          format: int64
          type: integer
      type: object
    IncidentNotificationTemplateCreateAttributes:
      description: The attributes for creating a notification template.
      properties:
        category:
          description: The category of the notification template.
          example: alert
          type: string
        content:
          description: The content body of the notification template.
          example: |-
            An incident has been declared.

            Title: {{incident.title}}
            Severity: {{incident.severity}}
            Affected Services: {{incident.services}}
            Status: {{incident.state}}

            Please join the incident channel for updates.
          type: string
        name:
          description: The name of the notification template.
          example: Incident Alert Template
          type: string
        subject:
          description: The subject line of the notification template.
          example: '{{incident.severity}} Incident: {{incident.title}}'
          type: string
      required:
        - name
        - subject
        - content
        - category
      type: object
    IncidentNotificationTemplateCreateDataRelationships:
      description: The definition of `NotificationTemplateCreateDataRelationships` object.
      properties:
        incident_type:
          $ref: '#/components/schemas/RelationshipToIncidentType'
      type: object
    IncidentNotificationTemplateUpdateAttributes:
      description: The attributes to update on a notification template.
      properties:
        category:
          description: The category of the notification template.
          example: update
          type: string
        content:
          description: The content body of the notification template.
          example: |-
            Incident Status Update:

            Title: {{incident.title}}
            New Status: {{incident.state}}
            Severity: {{incident.severity}}
            Services: {{incident.services}}
            Commander: {{incident.commander}}

            For more details, visit the incident page.
          type: string
        name:
          description: The name of the notification template.
          example: Incident Status Update Template
          type: string
        subject:
          description: The subject line of the notification template.
          example: 'Incident Update: {{incident.title}} - {{incident.state}}'
          type: string
      type: object
    IncidentTypeAttributes:
      description: Incident type's attributes.
      properties:
        createdAt:
          description: Timestamp when the incident type was created.
          format: date-time
          readOnly: true
          type: string
        createdBy:
          description: >-
            A unique identifier that represents the user that created the
            incident type.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        description:
          description: Text that describes the incident type.
          example: >-
            Any incidents that harm (or have the potential to) the
            confidentiality, integrity, or availability of our data.
          type: string
        is_default:
          default: false
          description: >-
            If true, this incident type will be used as the default incident
            type if a type is not specified during the creation of incident
            resources.
          example: false
          type: boolean
        lastModifiedBy:
          description: >-
            A unique identifier that represents the user that last modified the
            incident type.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        modifiedAt:
          description: Timestamp when the incident type was last modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: The name of the incident type.
          example: Security Incident
          type: string
        prefix:
          description: >-
            The string that will be prepended to the incident title across the
            Datadog app.
          example: IR
          readOnly: true
          type: string
      required:
        - name
      type: object
    IncidentTypeRelationships:
      additionalProperties: {}
      description: The incident type's resource relationships.
      properties:
        created_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
        google_meet_configuration:
          $ref: '#/components/schemas/GoogleMeetConfigurationReference'
        last_modified_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
        microsoft_teams_configuration:
          $ref: '#/components/schemas/MicrosoftTeamsConfigurationReference'
        zoom_configuration:
          $ref: '#/components/schemas/ZoomConfigurationReference'
      type: object
    IncidentTypeType:
      default: incident_types
      description: Incident type resource type.
      enum:
        - incident_types
      example: incident_types
      type: string
      x-enum-varnames:
        - INCIDENT_TYPES
    IncidentTypeUpdateAttributes:
      description: Incident type's attributes for updates.
      properties:
        createdAt:
          description: Timestamp when the incident type was created.
          format: date-time
          readOnly: true
          type: string
        createdBy:
          description: >-
            A unique identifier that represents the user that created the
            incident type.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        description:
          description: Text that describes the incident type.
          example: >-
            Any incidents that harm (or have the potential to) the
            confidentiality, integrity, or availability of our data. Note: This
            will notify the security team.
          type: string
        is_default:
          description: >-
            When true, this incident type will be used as the default type when
            an incident type is not specified.
          example: false
          type: boolean
        lastModifiedBy:
          description: >-
            A unique identifier that represents the user that last modified the
            incident type.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        modifiedAt:
          description: Timestamp when the incident type was last modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: The name of the incident type.
          example: Security Incident
          type: string
        prefix:
          description: >-
            The string that will be prepended to the incident title across the
            Datadog app.
          example: IR
          readOnly: true
          type: string
      type: object
    IncidentSearchResponseAttributes:
      description: Attributes returned by an incident search.
      properties:
        facets:
          $ref: '#/components/schemas/IncidentSearchResponseFacetsData'
        incidents:
          description: Incidents returned by the search.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseIncidentsData'
          type: array
        total:
          description: Number of incidents returned by the search.
          example: 10
          format: int32
          maximum: 2147483647
          type: integer
      required:
        - facets
        - incidents
        - total
      type: object
    IncidentSearchResultsType:
      default: incidents_search_results
      description: Incident search result type.
      enum:
        - incidents_search_results
      example: incidents_search_results
      type: string
      x-enum-varnames:
        - INCIDENTS_SEARCH_RESULTS
    IncidentUpdateAttributes:
      description: The incident's attributes for an update request.
      properties:
        customer_impact_end:
          description: Timestamp when customers were no longer impacted by the incident.
          format: date-time
          nullable: true
          type: string
        customer_impact_scope:
          description: A summary of the impact customers experienced during the incident.
          example: Example customer impact scope
          type: string
        customer_impact_start:
          description: Timestamp when customers began being impacted by the incident.
          format: date-time
          nullable: true
          type: string
        customer_impacted:
          description: A flag indicating whether the incident caused customer impact.
          example: false
          type: boolean
        detected:
          description: Timestamp when the incident was detected.
          format: date-time
          nullable: true
          type: string
        fields:
          additionalProperties:
            $ref: '#/components/schemas/IncidentFieldAttributes'
          description: >-
            A condensed view of the user-defined fields for which to update
            selections.
          example:
            severity:
              type: dropdown
              value: SEV-5
          type: object
        notification_handles:
          description: >-
            Notification handles that will be notified of the incident during
            update.
          example:
            - display_name: Jane Doe
              handle: '@user@email.com'
            - display_name: Slack Channel
              handle: '@slack-channel'
            - display_name: Incident Workflow
              handle: '@workflow-from-incident'
          items:
            $ref: '#/components/schemas/IncidentNotificationHandle'
          type: array
        title:
          description: The title of the incident, which summarizes what happened.
          example: A test incident title
          type: string
      type: object
    IncidentUpdateRelationships:
      description: The incident's relationships for an update request.
      properties:
        commander_user:
          $ref: '#/components/schemas/NullableRelationshipToUser'
        integrations:
          $ref: '#/components/schemas/RelationshipToIncidentIntegrationMetadatas'
        postmortem:
          $ref: '#/components/schemas/RelationshipToIncidentPostmortem'
      type: object
    IncidentAttachmentAttributes:
      description: The attributes object for an attachment.
      oneOf:
        - $ref: '#/components/schemas/IncidentAttachmentPostmortemAttributes'
        - $ref: '#/components/schemas/IncidentAttachmentLinkAttributes'
    IncidentAttachmentRelationships:
      description: The incident attachment's relationships.
      properties:
        last_modified_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
      type: object
    IncidentAttachmentType:
      default: incident_attachments
      description: The incident attachment resource type.
      enum:
        - incident_attachments
      example: incident_attachments
      type: string
      x-enum-varnames:
        - INCIDENT_ATTACHMENTS
    IncidentAttachmentUpdateAttributes:
      description: Incident attachment attributes.
      oneOf:
        - $ref: '#/components/schemas/IncidentAttachmentPostmortemAttributes'
        - $ref: '#/components/schemas/IncidentAttachmentLinkAttributes'
    IncidentIntegrationMetadataAttributes:
      description: Incident integration metadata's attributes for a create request.
      properties:
        created:
          description: Timestamp when the incident todo was created.
          format: date-time
          readOnly: true
          type: string
        incident_id:
          description: UUID of the incident this integration metadata is connected to.
          example: 00000000-aaaa-0000-0000-000000000000
          type: string
        integration_type:
          description: >-
            A number indicating the type of integration this metadata is for. 1
            indicates Slack;

            8 indicates Jira.
          example: 1
          format: int32
          maximum: 9
          type: integer
        metadata:
          $ref: '#/components/schemas/IncidentIntegrationMetadataMetadata'
        modified:
          description: Timestamp when the incident todo was last modified.
          format: date-time
          readOnly: true
          type: string
        status:
          description: >-
            A number indicating the status of this integration metadata. 0
            indicates unknown;

            1 indicates pending; 2 indicates complete; 3 indicates manually
            created;

            4 indicates manually updated; 5 indicates failed.
          format: int32
          maximum: 5
          type: integer
      required:
        - integration_type
        - metadata
      type: object
    IncidentIntegrationRelationships:
      description: The incident's integration relationships from a response.
      properties:
        created_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
        last_modified_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
      type: object
    IncidentIntegrationMetadataType:
      default: incident_integrations
      description: Integration metadata resource type.
      enum:
        - incident_integrations
      example: incident_integrations
      type: string
      x-enum-varnames:
        - INCIDENT_INTEGRATIONS
    IncidentTodoAttributes:
      description: Incident todo's attributes.
      properties:
        assignees:
          $ref: '#/components/schemas/IncidentTodoAssigneeArray'
        completed:
          description: Timestamp when the todo was completed.
          example: '2023-03-06T22:00:00.000000+00:00'
          nullable: true
          type: string
        content:
          description: The follow-up task's content.
          example: Restore lost data.
          type: string
        created:
          description: Timestamp when the incident todo was created.
          format: date-time
          readOnly: true
          type: string
        due_date:
          description: Timestamp when the todo should be completed by.
          example: '2023-07-10T05:00:00.000000+00:00'
          nullable: true
          type: string
        incident_id:
          description: UUID of the incident this todo is connected to.
          example: 00000000-aaaa-0000-0000-000000000000
          type: string
        modified:
          description: Timestamp when the incident todo was last modified.
          format: date-time
          readOnly: true
          type: string
      required:
        - content
        - assignees
      type: object
    IncidentTodoRelationships:
      description: The incident's relationships from a response.
      properties:
        created_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
        last_modified_by_user:
          $ref: '#/components/schemas/RelationshipToUser'
      type: object
    IncidentTodoType:
      default: incident_todos
      description: Todo resource type.
      enum:
        - incident_todos
      example: incident_todos
      type: string
      x-enum-varnames:
        - INCIDENT_TODOS
    EscalationPolicyCreateRequestDataAttributes:
      description: >-
        Defines the attributes for creating an escalation policy, including its
        description, name, resolution behavior, retries, and steps.
      properties:
        name:
          description: Specifies the name for the new escalation policy.
          example: On-Call Escalation Policy
          type: string
        resolve_page_on_policy_end:
          description: >-
            Indicates whether the page is automatically resolved when the policy
            ends.
          type: boolean
        retries:
          description: >-
            Specifies how many times the escalation sequence is retried if there
            is no response.
          format: int64
          type: integer
        steps:
          description: >-
            A list of escalation steps, each defining assignment, escalation
            timeout, and targets for the new policy.
          items:
            $ref: >-
              #/components/schemas/EscalationPolicyCreateRequestDataAttributesStepsItems
          type: array
      required:
        - name
        - steps
      type: object
    EscalationPolicyCreateRequestDataRelationships:
      description: >-
        Represents relationships in an escalation policy creation request,
        including references to teams.
      properties:
        teams:
          $ref: '#/components/schemas/DataRelationshipsTeams'
      type: object
    EscalationPolicyCreateRequestDataType:
      default: policies
      description: Indicates that the resource is of type `policies`.
      enum:
        - policies
      example: policies
      type: string
      x-enum-varnames:
        - POLICIES
    EscalationPolicyDataAttributes:
      description: >-
        Defines the main attributes of an escalation policy, such as its name
        and behavior on policy end.
      properties:
        name:
          description: Specifies the name of the escalation policy.
          example: On-Call Escalation Policy
          type: string
        resolve_page_on_policy_end:
          description: >-
            Indicates whether the page is automatically resolved when the policy
            ends.
          type: boolean
        retries:
          description: >-
            Specifies how many times the escalation sequence is retried if there
            is no response.
          format: int64
          type: integer
      required:
        - name
      type: object
    EscalationPolicyDataRelationships:
      description: >-
        Represents the relationships for an escalation policy, including
        references to steps and teams.
      properties:
        steps:
          $ref: '#/components/schemas/EscalationPolicyDataRelationshipsSteps'
        teams:
          $ref: '#/components/schemas/DataRelationshipsTeams'
      required:
        - steps
      type: object
    EscalationPolicyDataType:
      default: policies
      description: Indicates that the resource is of type `policies`.
      enum:
        - policies
      example: policies
      type: string
      x-enum-varnames:
        - POLICIES
    TeamReference:
      description: >-
        Provides a reference to a team, including ID, type, and basic
        attributes/relationships.
      properties:
        attributes:
          $ref: '#/components/schemas/TeamReferenceAttributes'
        id:
          description: The team's unique identifier.
          type: string
        type:
          $ref: '#/components/schemas/TeamReferenceType'
      required:
        - type
      type: object
    EscalationPolicyStep:
      description: >-
        Represents a single step in an escalation policy, including its
        attributes, relationships, and resource type.
      properties:
        attributes:
          $ref: '#/components/schemas/EscalationPolicyStepAttributes'
        id:
          description: Specifies the unique identifier of this escalation policy step.
          type: string
        relationships:
          $ref: '#/components/schemas/EscalationPolicyStepRelationships'
        type:
          $ref: '#/components/schemas/EscalationPolicyStepType'
      required:
        - type
      type: object
    EscalationPolicyUser:
      description: >-
        Represents a user object in the context of an escalation policy,
        including their `id`, type, and basic attributes.
      properties:
        attributes:
          $ref: '#/components/schemas/EscalationPolicyUserAttributes'
        id:
          description: The unique user identifier.
          type: string
        type:
          $ref: '#/components/schemas/EscalationPolicyUserType'
      required:
        - type
      type: object
    EscalationPolicyUpdateRequestDataAttributes:
      description: >-
        Defines the attributes that can be updated for an escalation policy,
        such as description, name, resolution behavior, retries, and steps.
      properties:
        name:
          description: Specifies the name of the escalation policy.
          example: On-Call Escalation Policy
          type: string
        resolve_page_on_policy_end:
          description: >-
            Indicates whether the page is automatically resolved when the policy
            ends.
          type: boolean
        retries:
          description: >-
            Specifies how many times the escalation sequence is retried if there
            is no response.
          format: int64
          type: integer
        steps:
          description: >-
            A list of escalation steps, each defining assignment, escalation
            timeout, and targets.
          items:
            $ref: >-
              #/components/schemas/EscalationPolicyUpdateRequestDataAttributesStepsItems
          type: array
      required:
        - name
        - steps
      type: object
    EscalationPolicyUpdateRequestDataRelationships:
      description: >-
        Represents relationships in an escalation policy update request,
        including references to teams.
      properties:
        teams:
          $ref: '#/components/schemas/DataRelationshipsTeams'
      type: object
    EscalationPolicyUpdateRequestDataType:
      default: policies
      description: Indicates that the resource is of type `policies`.
      enum:
        - policies
      example: policies
      type: string
      x-enum-varnames:
        - POLICIES
    CreatePageRequestDataAttributes:
      description: Details about the On-Call Page you want to create.
      properties:
        description:
          description: A short summary of the issue or context.
          type: string
        tags:
          description: Tags to help categorize or filter the page.
          items:
            type: string
          type: array
        target:
          $ref: '#/components/schemas/CreatePageRequestDataAttributesTarget'
        title:
          description: The title of the page.
          example: 'Service: Test is down'
          type: string
        urgency:
          $ref: '#/components/schemas/PageUrgency'
      required:
        - target
        - title
        - urgency
      type: object
    CreatePageRequestDataType:
      default: pages
      description: The type of resource used when creating an On-Call Page.
      enum:
        - pages
      example: pages
      type: string
      x-enum-varnames:
        - PAGES
    CreatePageResponseDataType:
      default: pages
      description: The type of resource used when creating an On-Call Page.
      enum:
        - pages
      example: pages
      type: string
      x-enum-varnames:
        - PAGES
    ScheduleCreateRequestDataAttributes:
      description: >-
        Describes the main attributes for creating a new schedule, including
        name, layers, and time zone.
      properties:
        layers:
          description: >-
            The layers of On-Call coverage that define rotation intervals and
            restrictions.
          items:
            $ref: >-
              #/components/schemas/ScheduleCreateRequestDataAttributesLayersItems
          type: array
        name:
          description: A human-readable name for the new schedule.
          example: Team A On-Call
          type: string
        time_zone:
          description: The time zone in which the schedule is defined.
          example: America/New_York
          type: string
      required:
        - name
        - time_zone
        - layers
      type: object
    ScheduleCreateRequestDataRelationships:
      description: >-
        Gathers relationship objects for the schedule creation request,
        including the teams to associate.
      properties:
        teams:
          $ref: '#/components/schemas/DataRelationshipsTeams'
      type: object
    ScheduleCreateRequestDataType:
      default: schedules
      description: Schedules resource type.
      enum:
        - schedules
      example: schedules
      type: string
      x-enum-varnames:
        - SCHEDULES
    ScheduleDataAttributes:
      description: >-
        Provides core properties of a schedule object such as its name and time
        zone.
      properties:
        name:
          description: A short name for the schedule.
          example: Primary On-Call
          type: string
        time_zone:
          description: The time zone in which this schedule operates.
          example: America/New_York
          type: string
      type: object
    ScheduleDataRelationships:
      description: >-
        Groups the relationships for a schedule object, referencing layers and
        teams.
      properties:
        layers:
          $ref: '#/components/schemas/ScheduleDataRelationshipsLayers'
        teams:
          $ref: '#/components/schemas/DataRelationshipsTeams'
      type: object
    ScheduleDataType:
      default: schedules
      description: Schedules resource type.
      enum:
        - schedules
      example: schedules
      type: string
      x-enum-varnames:
        - SCHEDULES
    Layer:
      description: >-
        Encapsulates a layer resource, holding attributes like rotation details,
        plus relationships to the members covering that layer.
      properties:
        attributes:
          $ref: '#/components/schemas/LayerAttributes'
        id:
          description: A unique identifier for this layer.
          type: string
        relationships:
          $ref: '#/components/schemas/LayerRelationships'
        type:
          $ref: '#/components/schemas/LayerType'
      required:
        - type
      type: object
    ScheduleMember:
      description: >-
        Represents a single member entry in a schedule, referencing a specific
        user.
      properties:
        id:
          description: The unique identifier for this schedule member.
          type: string
        relationships:
          $ref: '#/components/schemas/ScheduleMemberRelationships'
        type:
          $ref: '#/components/schemas/ScheduleMemberType'
      required:
        - type
      type: object
    ScheduleUser:
      description: >-
        Represents a user object in the context of a schedule, including their
        `id`, type, and basic attributes.
      properties:
        attributes:
          $ref: '#/components/schemas/ScheduleUserAttributes'
        id:
          description: The unique user identifier.
          type: string
        type:
          $ref: '#/components/schemas/ScheduleUserType'
      required:
        - type
      type: object
    ScheduleUpdateRequestDataAttributes:
      description: >-
        Defines the updatable attributes for a schedule, such as name, time
        zone, and layers.
      properties:
        layers:
          description: The updated list of layers (rotations) for this schedule.
          items:
            $ref: >-
              #/components/schemas/ScheduleUpdateRequestDataAttributesLayersItems
          type: array
        name:
          description: A short name for the schedule.
          example: Primary On-Call
          type: string
        time_zone:
          description: The time zone used when interpreting rotation times.
          example: America/New_York
          type: string
      required:
        - name
        - time_zone
        - layers
      type: object
    ScheduleUpdateRequestDataRelationships:
      description: >-
        Houses relationships for the schedule update, typically referencing
        teams.
      properties:
        teams:
          $ref: '#/components/schemas/DataRelationshipsTeams'
      type: object
    ScheduleUpdateRequestDataType:
      default: schedules
      description: Schedules resource type.
      enum:
        - schedules
      example: schedules
      type: string
      x-enum-varnames:
        - SCHEDULES
    ShiftDataAttributes:
      description: Attributes for an on-call shift.
      properties:
        end:
          description: The end time of the shift.
          format: date-time
          type: string
        start:
          description: The start time of the shift.
          format: date-time
          type: string
      type: object
    ShiftDataRelationships:
      description: Relationships for an on-call shift.
      properties:
        user:
          $ref: '#/components/schemas/ShiftDataRelationshipsUser'
      type: object
    ShiftDataType:
      default: shifts
      description: Indicates that the resource is of type 'shifts'.
      enum:
        - shifts
      example: shifts
      type: string
      x-enum-varnames:
        - SHIFTS
    TeamOnCallRespondersDataRelationships:
      description: >-
        Relationship objects linked to a team's on-call responder configuration,
        including escalations and responders.
      properties:
        escalations:
          $ref: >-
            #/components/schemas/TeamOnCallRespondersDataRelationshipsEscalations
        responders:
          $ref: '#/components/schemas/TeamOnCallRespondersDataRelationshipsResponders'
      type: object
    TeamOnCallRespondersDataType:
      default: team_oncall_responders
      description: >-
        Represents the resource type for a group of users assigned to handle
        on-call duties within a team.
      enum:
        - team_oncall_responders
      example: team_oncall_responders
      type: string
      x-enum-varnames:
        - TEAM_ONCALL_RESPONDERS
    Escalation:
      description: Represents an escalation policy step.
      properties:
        id:
          description: Unique identifier of the escalation step.
          type: string
        relationships:
          $ref: '#/components/schemas/EscalationRelationships'
        type:
          $ref: '#/components/schemas/EscalationType'
      required:
        - type
      type: object
    TeamRoutingRulesDataRelationships:
      description: >-
        Specifies relationships for team routing rules, including rule
        references.
      properties:
        rules:
          $ref: '#/components/schemas/TeamRoutingRulesDataRelationshipsRules'
      type: object
    TeamRoutingRulesDataType:
      default: team_routing_rules
      description: Team routing rules resource type.
      enum:
        - team_routing_rules
      example: team_routing_rules
      type: string
      x-enum-varnames:
        - TEAM_ROUTING_RULES
    RoutingRule:
      description: >-
        Represents a routing rule, including its attributes, relationships, and
        unique identifier.
      properties:
        attributes:
          $ref: '#/components/schemas/RoutingRuleAttributes'
        id:
          description: Specifies the unique identifier of this routing rule.
          type: string
        relationships:
          $ref: '#/components/schemas/RoutingRuleRelationships'
        type:
          $ref: '#/components/schemas/RoutingRuleType'
      required:
        - type
      type: object
    TeamRoutingRulesRequestDataAttributes:
      description: >-
        Represents the attributes of a request to update or create team routing
        rules.
      properties:
        rules:
          description: >-
            A list of routing rule items that define how incoming pages should
            be handled.
          items:
            $ref: '#/components/schemas/TeamRoutingRulesRequestRule'
          type: array
      type: object
    TeamRoutingRulesRequestDataType:
      default: team_routing_rules
      description: Team routing rules resource type.
      enum:
        - team_routing_rules
      example: team_routing_rules
      type: string
      x-enum-varnames:
        - TEAM_ROUTING_RULES
    IncidentServiceResponseAttributes:
      description: The incident service's attributes from a response.
      properties:
        created:
          description: Timestamp of when the incident service was created.
          format: date-time
          readOnly: true
          type: string
        modified:
          description: Timestamp of when the incident service was modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the incident service.
          example: service name
          type: string
      type: object
    IncidentServiceRelationships:
      description: The incident service's relationships.
      properties:
        created_by:
          $ref: '#/components/schemas/RelationshipToUser'
        last_modified_by:
          $ref: '#/components/schemas/RelationshipToUser'
      readOnly: true
      type: object
    IncidentServiceType:
      default: services
      description: Incident service resource type.
      enum:
        - services
      example: services
      type: string
      x-enum-varnames:
        - SERVICES
    IncidentServiceCreateAttributes:
      description: The incident service's attributes for a create request.
      properties:
        name:
          description: Name of the incident service.
          example: an example service name
          type: string
      required:
        - name
      type: object
    ServiceDefinitionDataAttributes:
      description: Service definition attributes.
      properties:
        meta:
          $ref: '#/components/schemas/ServiceDefinitionMeta'
        schema:
          $ref: '#/components/schemas/ServiceDefinitionSchema'
      type: object
    ServiceDefinitionV2Dot2Contact:
      description: Service owner's contacts information.
      properties:
        contact:
          description: Contact value.
          example: https://teams.microsoft.com/myteam
          type: string
        name:
          description: Contact Name.
          example: My team channel
          type: string
        type:
          description: >-
            Contact type. Datadog recognizes the following types: `email`,
            `slack`, and `microsoft-teams`.
          example: slack
          type: string
      required:
        - type
        - contact
      type: object
    ServiceDefinitionV2Dot2Integrations:
      description: Third party integrations that Datadog supports.
      properties:
        opsgenie:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot2Opsgenie'
        pagerduty:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot2Pagerduty'
      type: object
    ServiceDefinitionV2Dot2Link:
      description: Service's external links.
      properties:
        name:
          description: Link name.
          example: Runbook
          type: string
        provider:
          description: Link provider.
          example: Github
          type: string
        type:
          description: >-
            Link type. Datadog recognizes the following types: `runbook`, `doc`,
            `repo`, `dashboard`, and `other`.
          example: runbook
          type: string
        url:
          description: Link URL.
          example: https://my-runbook
          type: string
      required:
        - name
        - type
        - url
      type: object
    ServiceDefinitionV2Dot2Version:
      default: v2.2
      description: Schema version being used.
      enum:
        - v2.2
      example: v2.2
      type: string
      x-enum-varnames:
        - V2_2
    ServiceDefinitionV2Dot2Type:
      description: The type of service.
      example: web
      type: string
    ServiceDefinitionV2Dot1Contact:
      description: Service owner's contacts information.
      oneOf:
        - $ref: '#/components/schemas/ServiceDefinitionV2Dot1Email'
        - $ref: '#/components/schemas/ServiceDefinitionV2Dot1Slack'
        - $ref: '#/components/schemas/ServiceDefinitionV2Dot1MSTeams'
    ServiceDefinitionV2Dot1Integrations:
      description: Third party integrations that Datadog supports.
      properties:
        opsgenie:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot1Opsgenie'
        pagerduty:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot1Pagerduty'
      type: object
    ServiceDefinitionV2Dot1Link:
      description: Service's external links.
      properties:
        name:
          description: Link name.
          example: Runbook
          type: string
        provider:
          description: Link provider.
          example: Github
          type: string
        type:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot1LinkType'
        url:
          description: Link URL.
          example: https://my-runbook
          type: string
      required:
        - name
        - type
        - url
      type: object
    ServiceDefinitionV2Dot1Version:
      default: v2.1
      description: Schema version being used.
      enum:
        - v2.1
      example: v2.1
      type: string
      x-enum-varnames:
        - V2_1
    ServiceDefinitionV2Contact:
      description: Service owner's contacts information.
      oneOf:
        - $ref: '#/components/schemas/ServiceDefinitionV2Email'
        - $ref: '#/components/schemas/ServiceDefinitionV2Slack'
        - $ref: '#/components/schemas/ServiceDefinitionV2MSTeams'
    ServiceDefinitionV2Doc:
      description: Service documents.
      properties:
        name:
          description: Document name.
          example: Architecture
          type: string
        provider:
          description: Document provider.
          example: google drive
          type: string
        url:
          description: Document URL.
          example: https://gdrive/mydoc
          type: string
      required:
        - name
        - url
      type: object
    ServiceDefinitionV2Integrations:
      description: Third party integrations that Datadog supports.
      properties:
        opsgenie:
          $ref: '#/components/schemas/ServiceDefinitionV2Opsgenie'
        pagerduty:
          $ref: '#/components/schemas/ServiceDefinitionV2Pagerduty'
      type: object
    ServiceDefinitionV2Link:
      description: Service's external links.
      properties:
        name:
          description: Link name.
          example: Runbook
          type: string
        type:
          $ref: '#/components/schemas/ServiceDefinitionV2LinkType'
        url:
          description: Link URL.
          example: https://my-runbook
          type: string
      required:
        - name
        - type
        - url
      type: object
    ServiceDefinitionV2Repo:
      description: Service code repositories.
      properties:
        name:
          description: Repository name.
          example: Source Code
          type: string
        provider:
          description: Repository provider.
          example: GitHub
          type: string
        url:
          description: Repository URL.
          example: https://github.com/DataDog/schema
          type: string
      required:
        - name
        - url
      type: object
    ServiceDefinitionV2Version:
      default: v2
      description: Schema version being used.
      enum:
        - v2
      example: v2
      type: string
      x-enum-varnames:
        - V2
    IncidentServiceUpdateAttributes:
      description: The incident service's attributes for an update request.
      properties:
        name:
          description: Name of the incident service.
          example: an example service name
          type: string
      required:
        - name
      type: object
    SloReportCreateRequestAttributes:
      description: The attributes portion of the SLO report request.
      properties:
        from_ts:
          description: The `from` timestamp for the report in epoch seconds.
          example: 1690901870
          format: int64
          type: integer
        interval:
          $ref: '#/components/schemas/SLOReportInterval'
        query:
          description: >-
            The query string used to filter SLO results. Some examples of
            queries include `service:<service-name>` and `slo-name`.
          example: slo_type:metric
          type: string
        timezone:
          description: >-
            The timezone used to determine the start and end of each interval.
            For example, weekly intervals start at 12am on Sunday in the
            specified timezone.
          example: America/New_York
          type: string
        to_ts:
          description: The `to` timestamp for the report in epoch seconds.
          example: 1706803070
          format: int64
          type: integer
      required:
        - query
        - from_ts
        - to_ts
      type: object
    SLOReportStatusGetResponseAttributes:
      description: The attributes portion of the SLO report status response.
      properties:
        status:
          $ref: '#/components/schemas/SLOReportStatus'
      type: object
    IncidentTeamResponseAttributes:
      description: The incident team's attributes from a response.
      properties:
        created:
          description: Timestamp of when the incident team was created.
          format: date-time
          readOnly: true
          type: string
        modified:
          description: Timestamp of when the incident team was modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the incident team.
          example: team name
          type: string
      type: object
    IncidentTeamRelationships:
      description: The incident team's relationships.
      properties:
        created_by:
          $ref: '#/components/schemas/RelationshipToUser'
        last_modified_by:
          $ref: '#/components/schemas/RelationshipToUser'
      readOnly: true
      type: object
    IncidentTeamType:
      default: teams
      description: Incident Team resource type.
      enum:
        - teams
      example: teams
      type: string
      x-enum-varnames:
        - TEAMS
    IncidentTeamCreateAttributes:
      description: The incident team's attributes for a create request.
      properties:
        name:
          description: Name of the incident team.
          example: team name
          type: string
      required:
        - name
      type: object
    IncidentTeamUpdateAttributes:
      description: The incident team's attributes for an update request.
      properties:
        name:
          description: Name of the incident team.
          example: team name
          type: string
      required:
        - name
      type: object
    CaseObjectAttributes:
      additionalProperties:
        items:
          type: string
        type: array
      description: The definition of `CaseObjectAttributes` object.
      type: object
    JiraIssue:
      description: Jira issue attached to case
      nullable: true
      properties:
        result:
          $ref: '#/components/schemas/JiraIssueResult'
        status:
          $ref: '#/components/schemas/Case3rdPartyTicketStatus'
      readOnly: true
      type: object
    CasePriority:
      default: NOT_DEFINED
      description: Case priority
      enum:
        - NOT_DEFINED
        - P1
        - P2
        - P3
        - P4
        - P5
      example: NOT_DEFINED
      type: string
      x-enum-varnames:
        - NOT_DEFINED
        - P1
        - P2
        - P3
        - P4
        - P5
    ServiceNowTicket:
      description: ServiceNow ticket attached to case
      nullable: true
      properties:
        result:
          $ref: '#/components/schemas/ServiceNowTicketResult'
        status:
          $ref: '#/components/schemas/Case3rdPartyTicketStatus'
      readOnly: true
      type: object
    CaseStatus:
      description: Case status
      enum:
        - OPEN
        - IN_PROGRESS
        - CLOSED
      example: OPEN
      type: string
      x-enum-varnames:
        - OPEN
        - IN_PROGRESS
        - CLOSED
    CaseType:
      description: Case type
      enum:
        - STANDARD
      example: STANDARD
      type: string
      x-enum-varnames:
        - STANDARD
    NullableUserRelationship:
      description: Relationship to user.
      nullable: true
      properties:
        data:
          $ref: '#/components/schemas/NullableUserRelationshipData'
      required:
        - data
      type: object
    ProjectRelationship:
      description: Relationship to project
      properties:
        data:
          $ref: '#/components/schemas/ProjectRelationshipData'
      required:
        - data
      type: object
    RelationshipToTeamLinks:
      description: Relationship between a team and a team link
      properties:
        data:
          description: Related team links
          items:
            $ref: '#/components/schemas/RelationshipToTeamLinkData'
          type: array
        links:
          $ref: '#/components/schemas/TeamRelationshipsLinks'
      type: object
    UsersRelationship:
      description: Relationship to users.
      properties:
        data:
          description: Relationships to user objects.
          example: []
          items:
            $ref: '#/components/schemas/UserRelationshipData'
          type: array
      required:
        - data
      type: object
    DowntimeDisplayTimezone:
      default: UTC
      description: >-
        The timezone in which to display the downtime's start and end times in
        Datadog applications. This is not used

        as an offset for scheduling.
      example: America/New_York
      nullable: true
      type: string
    DowntimeMessage:
      description: >-
        A message to include with notifications for this downtime. Email
        notifications can be sent to specific users

        by using the same `@username` notation as events.
      example: Message about the downtime
      nullable: true
      type: string
    DowntimeMonitorIdentifier:
      description: Monitor identifier for the downtime.
      oneOf:
        - $ref: '#/components/schemas/DowntimeMonitorIdentifierId'
        - $ref: '#/components/schemas/DowntimeMonitorIdentifierTags'
    DowntimeMuteFirstRecoveryNotification:
      description: If the first recovery notification during a downtime should be muted.
      example: false
      type: boolean
    DowntimeNotifyEndStates:
      description: >-
        States that will trigger a monitor notification when the
        `notify_end_types` action occurs.
      example:
        - alert
        - warn
      items:
        $ref: '#/components/schemas/DowntimeNotifyEndStateTypes'
      type: array
    DowntimeNotifyEndTypes:
      description: >-
        Actions that will trigger a monitor notification if the downtime is in
        the `notify_end_types` state.
      example:
        - canceled
        - expired
      items:
        $ref: '#/components/schemas/DowntimeNotifyEndStateActions'
      type: array
    DowntimeScheduleResponse:
      description: >-
        The schedule that defines when the monitor starts, stops, and recurs.
        There are two types of schedules:

        one-time and recurring. Recurring schedules may have up to five
        RRULE-based recurrences. If no schedules are

        provided, the downtime will begin immediately and never end.
      oneOf:
        - $ref: '#/components/schemas/DowntimeScheduleRecurrencesResponse'
        - $ref: '#/components/schemas/DowntimeScheduleOneTimeResponse'
    DowntimeScope:
      description: >-
        The scope to which the downtime applies. Must follow the [common search
        syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
      example: env:(staging OR prod) AND datacenter:us-east-1
      type: string
    DowntimeStatus:
      description: The current status of the downtime.
      enum:
        - active
        - canceled
        - ended
        - scheduled
      example: active
      type: string
      x-enum-varnames:
        - ACTIVE
        - CANCELED
        - ENDED
        - SCHEDULED
    DowntimeRelationshipsCreatedBy:
      description: The user who created the downtime.
      properties:
        data:
          $ref: '#/components/schemas/DowntimeRelationshipsCreatedByData'
      type: object
    DowntimeRelationshipsMonitor:
      description: The monitor identified by the downtime.
      properties:
        data:
          $ref: '#/components/schemas/DowntimeRelationshipsMonitorData'
      type: object
    UserAttributes:
      description: Attributes of user object returned by the API.
      properties:
        created_at:
          description: Creation time of the user.
          format: date-time
          type: string
        disabled:
          description: Whether the user is disabled.
          type: boolean
        email:
          description: Email of the user.
          type: string
        handle:
          description: Handle of the user.
          type: string
        icon:
          description: URL of the user's icon.
          type: string
        mfa_enabled:
          description: If user has MFA enabled.
          readOnly: true
          type: boolean
        modified_at:
          description: Time that the user was last modified.
          format: date-time
          type: string
        name:
          description: Name of the user.
          nullable: true
          type: string
        service_account:
          description: Whether the user is a service account.
          type: boolean
        status:
          description: Status of the user.
          type: string
        title:
          description: Title of the user.
          nullable: true
          type: string
        verified:
          description: Whether the user is verified.
          type: boolean
      type: object
    UserResponseRelationships:
      description: Relationships of the user object returned by the API.
      properties:
        org:
          $ref: '#/components/schemas/RelationshipToOrganization'
        other_orgs:
          $ref: '#/components/schemas/RelationshipToOrganizations'
        other_users:
          $ref: '#/components/schemas/RelationshipToUsers'
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    UsersType:
      default: users
      description: Users resource type.
      enum:
        - users
      example: users
      type: string
      x-enum-varnames:
        - USERS
    DowntimeMonitorIncludedAttributes:
      description: Attributes of the monitor identified by the downtime.
      properties:
        name:
          description: The name of the monitor identified by the downtime.
          example: A monitor name
          type: string
      type: object
    DowntimeIncludedMonitorType:
      default: monitors
      description: Monitor resource type.
      enum:
        - monitors
      example: monitors
      type: string
      x-enum-varnames:
        - MONITORS
    DowntimeScheduleCreateRequest:
      description: Schedule for the downtime.
      oneOf:
        - $ref: '#/components/schemas/DowntimeScheduleRecurrencesCreateRequest'
        - $ref: '#/components/schemas/DowntimeScheduleOneTimeCreateUpdateRequest'
    DowntimeScheduleUpdateRequest:
      description: Schedule for the downtime.
      oneOf:
        - $ref: '#/components/schemas/DowntimeScheduleRecurrencesUpdateRequest'
        - $ref: '#/components/schemas/DowntimeScheduleOneTimeCreateUpdateRequest'
    IssuesSearchRequestDataAttributesOrderBy:
      description: The attribute to sort the search results by.
      enum:
        - TOTAL_COUNT
        - FIRST_SEEN
        - IMPACTED_SESSIONS
        - PRIORITY
      example: IMPACTED_SESSIONS
      type: string
      x-enum-varnames:
        - TOTAL_COUNT
        - FIRST_SEEN
        - IMPACTED_SESSIONS
        - PRIORITY
    IssuesSearchRequestDataAttributesPersona:
      description: Persona for the search. Either track(s) or persona(s) must be specified.
      enum:
        - ALL
        - BROWSER
        - MOBILE
        - BACKEND
      example: BACKEND
      type: string
      x-enum-varnames:
        - ALL
        - BROWSER
        - MOBILE
        - BACKEND
    IssuesSearchRequestDataAttributesTrack:
      description: >-
        Track of the events to query. Either track(s) or persona(s) must be
        specified.
      enum:
        - trace
        - logs
        - rum
      example: trace
      type: string
      x-enum-varnames:
        - TRACE
        - LOGS
        - RUM
    IssuesSearchResultIssueRelationship:
      description: Relationship between the search result and the corresponding issue.
      properties:
        data:
          $ref: '#/components/schemas/IssueReference'
      required:
        - data
      type: object
    IssueUserAttributes:
      description: Object containing the information of a user.
      properties:
        email:
          description: Email of the user.
          example: user@company.com
          type: string
        handle:
          description: Handle of the user.
          example: User Handle
          type: string
        name:
          description: Name of the user.
          example: User Name
          type: string
      type: object
    IssueUserType:
      description: Type of the object
      enum:
        - user
      example: user
      type: string
      x-enum-varnames:
        - USER
    IssueTeamAttributes:
      description: Object containing the information of a team.
      properties:
        handle:
          description: The team's identifier.
          example: team-handle
          type: string
        name:
          description: The name of the team.
          example: Team Name
          type: string
        summary:
          description: A brief summary of the team, derived from its description.
          example: This is a team.
          type: string
      type: object
    IssueTeamType:
      description: Type of the object.
      enum:
        - team
      example: team
      type: string
      x-enum-varnames:
        - TEAM
    IssueLanguage:
      description: Programming language associated with the issue.
      enum:
        - BRIGHTSCRIPT
        - C
        - C_PLUS_PLUS
        - C_SHARP
        - CLOJURE
        - DOT_NET
        - ELIXIR
        - ERLANG
        - GO
        - GROOVY
        - HASKELL
        - HCL
        - JAVA
        - JAVASCRIPT
        - JVM
        - KOTLIN
        - OBJECTIVE_C
        - PERL
        - PHP
        - PYTHON
        - RUBY
        - RUST
        - SCALA
        - SWIFT
        - TERRAFORM
        - TYPESCRIPT
        - UNKNOWN
      example: PYTHON
      type: string
      x-enum-varnames:
        - BRIGHTSCRIPT
        - C
        - C_PLUS_PLUS
        - C_SHARP
        - CLOJURE
        - DOT_NET
        - ELIXIR
        - ERLANG
        - GO
        - GROOVY
        - HASKELL
        - HCL
        - JAVA
        - JAVASCRIPT
        - JVM
        - KOTLIN
        - OBJECTIVE_C
        - PERL
        - PHP
        - PYTHON
        - RUBY
        - RUST
        - SCALA
        - SWIFT
        - TERRAFORM
        - TYPESCRIPT
        - UNKNOWN
    IssuePlatform:
      description: Platform associated with the issue.
      enum:
        - ANDROID
        - BACKEND
        - BROWSER
        - FLUTTER
        - IOS
        - REACT_NATIVE
        - ROKU
        - UNKNOWN
      example: BACKEND
      type: string
      x-enum-varnames:
        - ANDROID
        - BACKEND
        - BROWSER
        - FLUTTER
        - IOS
        - REACT_NATIVE
        - ROKU
        - UNKNOWN
    IssueState:
      description: State of the issue
      enum:
        - OPEN
        - ACKNOWLEDGED
        - RESOLVED
        - IGNORED
        - EXCLUDED
      example: RESOLVED
      type: string
      x-enum-varnames:
        - OPEN
        - ACKNOWLEDGED
        - RESOLVED
        - IGNORED
        - EXCLUDED
    IssueAssigneeRelationship:
      description: Relationship between the issue and assignee.
      properties:
        data:
          $ref: '#/components/schemas/IssueUserReference'
      required:
        - data
      type: object
    IssueCaseRelationship:
      description: Relationship between the issue and case.
      properties:
        data:
          $ref: '#/components/schemas/IssueCaseReference'
      required:
        - data
      type: object
    IssueTeamOwnersRelationship:
      description: Relationship between the issue and teams.
      properties:
        data:
          description: Array of teams that are owners of the issue.
          items:
            $ref: '#/components/schemas/IssueTeamReference'
          type: array
      required:
        - data
      type: object
    IssueCaseAttributes:
      description: Object containing the information of a case.
      properties:
        archived_at:
          description: Timestamp of when the case was archived.
          example: '2025-01-01T00:00:00Z'
          format: date-time
          type: string
        closed_at:
          description: Timestamp of when the case was closed.
          example: '2025-01-01T00:00:00Z'
          format: date-time
          type: string
        created_at:
          description: Timestamp of when the case was created.
          example: '2025-01-01T00:00:00Z'
          format: date-time
          type: string
        creation_source:
          description: Source of the case creation.
          example: ERROR_TRACKING
          type: string
        description:
          description: Description of the case.
          type: string
        due_date:
          description: Due date of the case.
          example: '2025-01-01'
          type: string
        insights:
          description: Insights of the case.
          items:
            $ref: '#/components/schemas/IssueCaseInsight'
          type: array
        jira_issue:
          $ref: '#/components/schemas/IssueCaseJiraIssue'
        key:
          description: Key of the case.
          example: ET-123
          type: string
        modified_at:
          description: Timestamp of when the case was last modified.
          example: '2025-01-01T00:00:00Z'
          format: date-time
          type: string
        priority:
          $ref: '#/components/schemas/CasePriority'
        status:
          $ref: '#/components/schemas/CaseStatus'
        title:
          description: Title of the case.
          example: 'Error: HTTP error'
          type: string
        type:
          description: Type of the case.
          example: ERROR_TRACKING_ISSUE
          type: string
      type: object
    IssueCaseRelationships:
      description: Resources related to a case.
      properties:
        assignee:
          $ref: '#/components/schemas/NullableUserRelationship'
        created_by:
          $ref: '#/components/schemas/NullableUserRelationship'
        modified_by:
          $ref: '#/components/schemas/NullableUserRelationship'
        project:
          $ref: '#/components/schemas/ProjectRelationship'
      type: object
    IssueCaseResourceType:
      description: Type of the object.
      enum:
        - case
      example: case
      type: string
      x-enum-varnames:
        - CASE
    EventAttributes:
      description: Object description of attributes from your event.
      properties:
        aggregation_key:
          description: Aggregation key of the event.
          type: string
        date_happened:
          description: >-
            POSIX timestamp of the event. Must be sent as an integer (no
            quotation marks).

            Limited to events no older than 18 hours.
          format: int64
          type: integer
        device_name:
          description: A device name.
          type: string
        duration:
          description: >-
            The duration between the triggering of the event and its recovery in
            nanoseconds.
          format: int64
          type: integer
        event_object:
          description: The event title.
          example: Did you hear the news today?
          type: string
        evt:
          $ref: '#/components/schemas/Event'
        hostname:
          description: |-
            Host name to associate with the event.
            Any tags associated with the host are also applied to this event.
          type: string
        monitor:
          $ref: '#/components/schemas/MonitorType'
        monitor_groups:
          description: List of groups referred to in the event.
          items:
            description: Group referred to in the event.
            type: string
          nullable: true
          type: array
        monitor_id:
          description: >-
            ID of the monitor that triggered the event. When an event isn't
            related to a monitor, this field is empty.
          format: int64
          nullable: true
          type: integer
        priority:
          $ref: '#/components/schemas/EventPriority'
        related_event_id:
          description: Related event ID.
          format: int64
          type: integer
        service:
          description: Service that triggered the event.
          example: datadog-api
          type: string
        source_type_name:
          description: >-
            The type of event being posted.

            For example, `nagios`, `hudson`, `jenkins`, `my_apps`, `chef`,
            `puppet`, `git` or `bitbucket`.

            The list of standard source attribute values is [available
            here](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).
          type: string
        sourcecategory:
          description: >-
            Identifier for the source of the event, such as a monitor alert, an
            externally-submitted event, or an integration.
          type: string
        status:
          $ref: '#/components/schemas/EventStatusType'
        tags:
          description: A list of tags to apply to the event.
          example:
            - environment:test
          items:
            description: A tag.
            type: string
          type: array
        timestamp:
          description: POSIX timestamp of your event in milliseconds.
          example: 1652274265000
          format: int64
          type: integer
        title:
          description: The event title.
          example: Oh boy!
          type: string
      type: object
    EventPayloadAttributes:
      description: >-
        JSON object for category-specific attributes. Schema is different per
        event category.
      oneOf:
        - $ref: '#/components/schemas/ChangeEventCustomAttributes'
        - $ref: '#/components/schemas/AlertEventCustomAttributes'
    EventCategory:
      description: Event category identifying the type of event.
      enum:
        - change
        - alert
      example: change
      type: string
      x-enum-varnames:
        - CHANGE
        - ALERT
    EventPayloadIntegrationId:
      description: Integration ID sourced from integration manifests.
      enum:
        - custom-events
      example: custom-events
      type: string
      x-enum-varnames:
        - CUSTOM_EVENTS
    EventCreateResponseAttributesAttributes:
      description: JSON object for category-specific attributes.
      properties:
        evt:
          $ref: '#/components/schemas/EventCreateResponseAttributesAttributesEvt'
      type: object
    V2EventAttributesAttributes:
      description: JSON object for category-specific attributes.
      oneOf:
        - $ref: '#/components/schemas/ChangeEventAttributes'
        - $ref: '#/components/schemas/AlertEventAttributes'
    IncidentFieldAttributes:
      description: >-
        Dynamic fields for which selections can be made, with field names as
        keys.
      oneOf:
        - $ref: '#/components/schemas/IncidentFieldAttributesSingleValue'
        - $ref: '#/components/schemas/IncidentFieldAttributesMultipleValue'
    IncidentNonDatadogCreator:
      description: Incident's non Datadog creator.
      nullable: true
      properties:
        image_48_px:
          description: Non Datadog creator `48px` image.
          type: string
        name:
          description: Non Datadog creator name.
          type: string
      type: object
    IncidentNotificationHandle:
      description: A notification handle that will be notified at incident creation.
      properties:
        display_name:
          description: The name of the notified handle.
          example: Jane Doe
          type: string
        handle:
          description: >-
            The handle used for the notification. This includes an email
            address, Slack channel, or workflow.
          example: '@test.user@test.com'
          type: string
      type: object
    IncidentSeverity:
      description: The incident severity.
      enum:
        - UNKNOWN
        - SEV-0
        - SEV-1
        - SEV-2
        - SEV-3
        - SEV-4
        - SEV-5
      example: UNKNOWN
      type: string
      x-enum-varnames:
        - UNKNOWN
        - SEV_0
        - SEV_1
        - SEV_2
        - SEV_3
        - SEV_4
        - SEV_5
    RelationshipToIncidentAttachment:
      description: A relationship reference for attachments.
      properties:
        data:
          description: An array of incident attachments.
          items:
            $ref: '#/components/schemas/RelationshipToIncidentAttachmentData'
          type: array
      required:
        - data
      type: object
    NullableRelationshipToUser:
      description: Relationship to user.
      nullable: true
      properties:
        data:
          $ref: '#/components/schemas/NullableRelationshipToUserData'
      required:
        - data
      type: object
    RelationshipToUser:
      description: Relationship to user.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToUserData'
      required:
        - data
      type: object
    RelationshipToIncidentImpacts:
      description: Relationship to impacts.
      properties:
        data:
          description: An array of incident impacts.
          items:
            $ref: '#/components/schemas/RelationshipToIncidentImpactData'
          type: array
      required:
        - data
      type: object
    RelationshipToIncidentIntegrationMetadatas:
      description: A relationship reference for multiple integration metadata objects.
      example:
        data:
          - id: 00000000-abcd-0005-0000-000000000000
            type: incident_integrations
          - id: 00000000-abcd-0006-0000-000000000000
            type: incident_integrations
      properties:
        data:
          description: Integration metadata relationship array
          example:
            - id: 00000000-abcd-0003-0000-000000000000
              type: incident_integrations
            - id: 00000000-abcd-0004-0000-000000000000
              type: incident_integrations
          items:
            $ref: '#/components/schemas/RelationshipToIncidentIntegrationMetadataData'
          type: array
      required:
        - data
      type: object
    RelationshipToIncidentResponders:
      description: Relationship to incident responders.
      properties:
        data:
          description: An array of incident responders.
          items:
            $ref: '#/components/schemas/RelationshipToIncidentResponderData'
          type: array
      required:
        - data
      type: object
    RelationshipToIncidentUserDefinedFields:
      description: Relationship to incident user defined fields.
      properties:
        data:
          description: An array of user defined fields.
          items:
            $ref: '#/components/schemas/RelationshipToIncidentUserDefinedFieldData'
          type: array
      required:
        - data
      type: object
    IncidentUserAttributes:
      description: Attributes of user object returned by the API.
      properties:
        email:
          description: Email of the user.
          type: string
        handle:
          description: Handle of the user.
          type: string
        icon:
          description: URL of the user's icon.
          type: string
        name:
          description: Name of the user.
          nullable: true
          type: string
        uuid:
          description: UUID of the user.
          type: string
      type: object
    IncidentTimelineCellCreateAttributes:
      description: The timeline cell's attributes for a create request.
      oneOf:
        - $ref: '#/components/schemas/IncidentTimelineCellMarkdownCreateAttributes'
    IncidentNotificationRuleConditions:
      description: The conditions that trigger this notification rule.
      example:
        - field: severity
          values:
            - SEV-1
            - SEV-2
      items:
        $ref: '#/components/schemas/IncidentNotificationRuleConditionsItems'
      type: array
    IncidentNotificationRuleHandles:
      description: The notification handles (targets) for this rule.
      example:
        - '@team-email@company.com'
        - '@slack-channel'
      items:
        description: A notification handle (email, Slack channel, etc.).
        type: string
      type: array
    IncidentNotificationRuleRenotifyOn:
      description: List of incident fields that trigger re-notification when changed.
      example:
        - status
        - severity
      items:
        description: An incident field name.
        type: string
      type: array
    IncidentNotificationRuleAttributesVisibility:
      description: The visibility of the notification rule.
      enum:
        - all
        - organization
        - private
      example: organization
      type: string
      x-enum-varnames:
        - ALL
        - ORGANIZATION
        - PRIVATE
    RelationshipToIncidentType:
      description: Relationship to an incident type.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToIncidentTypeData'
      required:
        - data
      type: object
    RelationshipToIncidentNotificationTemplate:
      description: A relationship reference to a notification template.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToIncidentNotificationTemplateData'
      required:
        - data
      type: object
    IncidentNotificationRuleCreateAttributesVisibility:
      description: The visibility of the notification rule.
      enum:
        - all
        - organization
        - private
      example: organization
      type: string
      x-enum-varnames:
        - ALL
        - ORGANIZATION
        - PRIVATE
    GoogleMeetConfigurationReference:
      description: A reference to a Google Meet Configuration resource.
      nullable: true
      properties:
        data:
          $ref: '#/components/schemas/GoogleMeetConfigurationReferenceData'
      required:
        - data
      type: object
    MicrosoftTeamsConfigurationReference:
      description: A reference to a Microsoft Teams Configuration resource.
      nullable: true
      properties:
        data:
          $ref: '#/components/schemas/MicrosoftTeamsConfigurationReferenceData'
      required:
        - data
      type: object
    ZoomConfigurationReference:
      description: A reference to a Zoom configuration resource.
      nullable: true
      properties:
        data:
          $ref: '#/components/schemas/ZoomConfigurationReferenceData'
      required:
        - data
      type: object
    IncidentSearchResponseFacetsData:
      description: Facet data for incidents returned by a search query.
      properties:
        commander:
          description: Facet data for incident commander users.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseUserFacetData'
          type: array
        created_by:
          description: Facet data for incident creator users.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseUserFacetData'
          type: array
        fields:
          description: Facet data for incident property fields.
          items:
            $ref: '#/components/schemas/IncidentSearchResponsePropertyFieldFacetData'
          type: array
        impact:
          description: Facet data for incident impact attributes.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseFieldFacetData'
          type: array
        last_modified_by:
          description: Facet data for incident last modified by users.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseUserFacetData'
          type: array
        postmortem:
          description: Facet data for incident postmortem existence.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseFieldFacetData'
          type: array
        responder:
          description: Facet data for incident responder users.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseUserFacetData'
          type: array
        severity:
          description: Facet data for incident severity attributes.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseFieldFacetData'
          type: array
        state:
          description: Facet data for incident state attributes.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseFieldFacetData'
          type: array
        time_to_repair:
          description: Facet data for incident time to repair metrics.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseNumericFacetData'
          type: array
        time_to_resolve:
          description: Facet data for incident time to resolve metrics.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseNumericFacetData'
          type: array
      type: object
    IncidentSearchResponseIncidentsData:
      description: Incident returned by the search.
      properties:
        data:
          $ref: '#/components/schemas/IncidentResponseData'
      required:
        - data
      type: object
    RelationshipToIncidentPostmortem:
      description: A relationship reference for postmortems.
      example:
        data:
          id: 00000000-0000-abcd-3000-000000000000
          type: incident_postmortems
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToIncidentPostmortemData'
      required:
        - data
      type: object
    IncidentAttachmentPostmortemAttributes:
      description: The attributes object for a postmortem attachment.
      properties:
        attachment:
          $ref: >-
            #/components/schemas/IncidentAttachmentsPostmortemAttributesAttachmentObject
        attachment_type:
          $ref: '#/components/schemas/IncidentAttachmentPostmortemAttachmentType'
      required:
        - attachment_type
        - attachment
      type: object
    IncidentAttachmentLinkAttributes:
      description: The attributes object for a link attachment.
      properties:
        attachment:
          $ref: >-
            #/components/schemas/IncidentAttachmentLinkAttributesAttachmentObject
        attachment_type:
          $ref: '#/components/schemas/IncidentAttachmentLinkAttachmentType'
        modified:
          description: Timestamp when the incident attachment link was last modified.
          format: date-time
          readOnly: true
          type: string
      required:
        - attachment_type
        - attachment
      type: object
    IncidentIntegrationMetadataMetadata:
      description: Incident integration metadata's metadata attribute.
      oneOf:
        - $ref: '#/components/schemas/SlackIntegrationMetadata'
        - $ref: '#/components/schemas/JiraIntegrationMetadata'
        - $ref: '#/components/schemas/MSTeamsIntegrationMetadata'
    IncidentTodoAssigneeArray:
      description: Array of todo assignees.
      example:
        - '@test.user@test.com'
      items:
        $ref: '#/components/schemas/IncidentTodoAssignee'
      type: array
    EscalationPolicyCreateRequestDataAttributesStepsItems:
      description: >-
        Defines a single escalation step within an escalation policy creation
        request. Contains assignment strategy, escalation timeout, and a list of
        targets.
      properties:
        assignment:
          $ref: '#/components/schemas/EscalationPolicyStepAttributesAssignment'
        escalate_after_seconds:
          description: Defines how many seconds to wait before escalating to the next step.
          example: 3600
          format: int64
          type: integer
        targets:
          description: Specifies the collection of escalation targets for this step.
          example:
            - users
          items:
            $ref: '#/components/schemas/EscalationPolicyStepTarget'
          type: array
      required:
        - targets
      type: object
    DataRelationshipsTeams:
      description: Associates teams with this schedule in a data structure.
      properties:
        data:
          description: An array of team references for this schedule.
          items:
            $ref: '#/components/schemas/DataRelationshipsTeamsDataItems'
          type: array
      type: object
    EscalationPolicyDataRelationshipsSteps:
      description: >-
        Defines the relationship to a collection of steps within an escalation
        policy. Contains an array of step data references.
      properties:
        data:
          description: >-
            An array of references to the steps defined in this escalation
            policy.
          items:
            $ref: >-
              #/components/schemas/EscalationPolicyDataRelationshipsStepsDataItems
          type: array
      type: object
    TeamReferenceAttributes:
      description: >-
        Encapsulates the basic attributes of a Team reference, such as name,
        handle, and an optional avatar or description.
      properties:
        avatar:
          description: URL or reference for the team's avatar (if available).
          type: string
        description:
          description: A short text describing the team.
          type: string
        handle:
          description: A unique handle/slug for the team.
          type: string
        name:
          description: The full, human-readable name of the team.
          type: string
      type: object
    TeamReferenceType:
      default: teams
      description: Teams resource type.
      enum:
        - teams
      example: teams
      type: string
      x-enum-varnames:
        - TEAMS
    EscalationPolicyStepAttributes:
      description: >-
        Defines attributes for an escalation policy step, such as assignment
        strategy and escalation timeout.
      properties:
        assignment:
          $ref: '#/components/schemas/EscalationPolicyStepAttributesAssignment'
        escalate_after_seconds:
          description: >-
            Specifies how many seconds to wait before escalating to the next
            step.
          format: int64
          type: integer
      type: object
    EscalationPolicyStepRelationships:
      description: Represents the relationship of an escalation policy step to its targets.
      properties:
        targets:
          $ref: '#/components/schemas/EscalationTargets'
      type: object
    EscalationPolicyStepType:
      default: steps
      description: Indicates that the resource is of type `steps`.
      enum:
        - steps
      example: steps
      type: string
      x-enum-varnames:
        - STEPS
    EscalationPolicyUserAttributes:
      description: >-
        Provides basic user information for an escalation policy, including a
        name and email address.
      properties:
        email:
          description: The user's email address.
          example: jane.doe@example.com
          type: string
        name:
          description: The user's name.
          example: Jane Doe
          type: string
        status:
          $ref: '#/components/schemas/UserAttributesStatus'
      type: object
    EscalationPolicyUserType:
      default: users
      description: Users resource type.
      enum:
        - users
      example: users
      type: string
      x-enum-varnames:
        - USERS
    EscalationPolicyUpdateRequestDataAttributesStepsItems:
      description: >-
        Defines a single escalation step within an escalation policy update
        request. Contains assignment strategy, escalation timeout, an optional
        step ID, and a list of targets.
      properties:
        assignment:
          $ref: '#/components/schemas/EscalationPolicyStepAttributesAssignment'
        escalate_after_seconds:
          description: Defines how many seconds to wait before escalating to the next step.
          example: 3600
          format: int64
          type: integer
        id:
          description: Specifies the unique identifier of this step.
          example: 00000000-aba1-0000-0000-000000000000
          type: string
        targets:
          description: Specifies the collection of escalation targets for this step.
          items:
            $ref: '#/components/schemas/EscalationPolicyStepTarget'
          type: array
      required:
        - targets
      type: object
    CreatePageRequestDataAttributesTarget:
      description: Information about the target to notify (such as a team or user).
      properties:
        identifier:
          description: Identifier for the target (for example, team handle or user ID).
          type: string
        type:
          $ref: '#/components/schemas/OnCallPageTargetType'
      type: object
    PageUrgency:
      default: high
      description: On-Call Page urgency level.
      enum:
        - low
        - high
      example: high
      type: string
      x-enum-varnames:
        - LOW
        - HIGH
    ScheduleCreateRequestDataAttributesLayersItems:
      description: >-
        Describes a schedule layer, including rotation intervals, members,
        restrictions, and timeline settings.
      properties:
        effective_date:
          description: The date/time when this layer becomes active (in ISO 8601).
          example: '2025-01-01T00:00:00Z'
          format: date-time
          type: string
        end_date:
          description: >-
            The date/time after which this layer no longer applies (in ISO
            8601).
          format: date-time
          type: string
        interval:
          $ref: '#/components/schemas/LayerAttributesInterval'
        members:
          description: A list of members who participate in this layer's rotation.
          items:
            $ref: >-
              #/components/schemas/ScheduleRequestDataAttributesLayersItemsMembersItems
          type: array
        name:
          description: The name of this layer.
          example: Primary On-Call Layer
          type: string
        restrictions:
          description: >-
            Zero or more time-based restrictions (for example, only weekdays,
            during business hours).
          items:
            $ref: '#/components/schemas/TimeRestriction'
          type: array
        rotation_start:
          description: The date/time when the rotation for this layer starts (in ISO 8601).
          example: '2025-01-01T00:00:00Z'
          format: date-time
          type: string
      required:
        - name
        - interval
        - rotation_start
        - effective_date
        - members
      type: object
    ScheduleDataRelationshipsLayers:
      description: Associates layers with this schedule in a data structure.
      properties:
        data:
          description: An array of layer references for this schedule.
          items:
            $ref: '#/components/schemas/ScheduleDataRelationshipsLayersDataItems'
          type: array
      type: object
    LayerAttributes:
      description: >-
        Describes key properties of a Layer, including rotation details, name,
        start/end times, and any restrictions.
      properties:
        effective_date:
          description: When the layer becomes active (ISO 8601).
          format: date-time
          type: string
        end_date:
          description: When the layer ceases to be active (ISO 8601).
          format: date-time
          type: string
        interval:
          $ref: '#/components/schemas/LayerAttributesInterval'
        name:
          description: The name of this layer.
          example: Weekend Layer
          type: string
        restrictions:
          description: >-
            An optional list of time restrictions for when this layer is in
            effect.
          items:
            $ref: '#/components/schemas/TimeRestriction'
          type: array
        rotation_start:
          description: The date/time when the rotation starts (ISO 8601).
          format: date-time
          type: string
      type: object
    LayerRelationships:
      description: >-
        Holds references to objects related to the Layer entity, such as its
        members.
      properties:
        members:
          $ref: '#/components/schemas/LayerRelationshipsMembers'
      type: object
    LayerType:
      default: layers
      description: Layers resource type.
      enum:
        - layers
      example: layers
      type: string
      x-enum-varnames:
        - LAYERS
    ScheduleMemberRelationships:
      description: >-
        Defines relationships for a schedule member, primarily referencing a
        single user.
      properties:
        user:
          $ref: '#/components/schemas/ScheduleMemberRelationshipsUser'
      type: object
    ScheduleMemberType:
      default: members
      description: Schedule Members resource type.
      enum:
        - members
      example: members
      type: string
      x-enum-varnames:
        - MEMBERS
    ScheduleUserAttributes:
      description: >-
        Provides basic user information for a schedule, including a name and
        email address.
      properties:
        email:
          description: The user's email address.
          example: jane.doe@example.com
          type: string
        name:
          description: The user's name.
          example: Jane Doe
          type: string
        status:
          $ref: '#/components/schemas/UserAttributesStatus'
      type: object
    ScheduleUserType:
      default: users
      description: Users resource type.
      enum:
        - users
      example: users
      type: string
      x-enum-varnames:
        - USERS
    ScheduleUpdateRequestDataAttributesLayersItems:
      description: >-
        Represents a layer within a schedule update, including rotation details,
        members,

        and optional restrictions.
      properties:
        effective_date:
          description: When this updated layer takes effect (ISO 8601 format).
          example: '2025-02-03T05:00:00Z'
          format: date-time
          type: string
        end_date:
          description: When this updated layer should stop being active (ISO 8601 format).
          example: '2025-12-31T00:00:00Z'
          format: date-time
          type: string
        id:
          description: A unique identifier for the layer being updated.
          example: 00000000-0000-0000-0000-000000000001
          type: string
        interval:
          $ref: '#/components/schemas/LayerAttributesInterval'
        members:
          description: The members assigned to this layer.
          items:
            $ref: >-
              #/components/schemas/ScheduleRequestDataAttributesLayersItemsMembersItems
          type: array
        name:
          description: The name for this layer (for example, "Secondary Coverage").
          example: Primary On-Call Layer
          type: string
        restrictions:
          description: Any time restrictions that define when this layer is active.
          items:
            $ref: '#/components/schemas/TimeRestriction'
          type: array
        rotation_start:
          description: The date/time at which the rotation begins (ISO 8601 format).
          example: '2025-02-01T00:00:00Z'
          format: date-time
          type: string
      required:
        - effective_date
        - interval
        - members
        - name
        - rotation_start
      type: object
    ShiftDataRelationshipsUser:
      description: >-
        Defines the relationship between a shift and the user who is working
        that shift.
      properties:
        data:
          $ref: '#/components/schemas/ShiftDataRelationshipsUserData'
      required:
        - data
      type: object
    TeamOnCallRespondersDataRelationshipsEscalations:
      description: >-
        Defines the escalation policy steps linked to the team's on-call
        configuration.
      properties:
        data:
          description: Array of escalation step references.
          items:
            $ref: >-
              #/components/schemas/TeamOnCallRespondersDataRelationshipsEscalationsDataItems
          type: array
      type: object
    TeamOnCallRespondersDataRelationshipsResponders:
      description: Defines the list of users assigned as on-call responders for the team.
      properties:
        data:
          description: Array of user references associated as responders.
          items:
            $ref: >-
              #/components/schemas/TeamOnCallRespondersDataRelationshipsRespondersDataItems
          type: array
      type: object
    EscalationRelationships:
      description: >-
        Contains the relationships of an escalation object, including its
        responders.
      properties:
        responders:
          $ref: '#/components/schemas/EscalationRelationshipsResponders'
      type: object
    EscalationType:
      default: escalation_policy_steps
      description: >-
        Represents the resource type for individual steps in an escalation
        policy used during incident response.
      enum:
        - escalation_policy_steps
      example: escalation_policy_steps
      type: string
      x-enum-varnames:
        - ESCALATION_POLICY_STEPS
    TeamRoutingRulesDataRelationshipsRules:
      description: Holds references to a set of routing rules in a relationship.
      properties:
        data:
          description: >-
            An array of references to the routing rules associated with this
            team.
          items:
            $ref: >-
              #/components/schemas/TeamRoutingRulesDataRelationshipsRulesDataItems
          type: array
      type: object
    RoutingRuleAttributes:
      description: >-
        Defines the configurable attributes of a routing rule, such as actions,
        query, time restriction, and urgency.
      properties:
        actions:
          description: >-
            Specifies the list of actions to perform when the routing rule
            matches.
          items:
            $ref: '#/components/schemas/RoutingRuleAction'
          type: array
        query:
          description: Defines the query or condition that triggers this routing rule.
          type: string
        time_restriction:
          $ref: '#/components/schemas/TimeRestrictions'
          nullable: true
        urgency:
          $ref: '#/components/schemas/Urgency'
      type: object
    RoutingRuleRelationships:
      description: >-
        Specifies relationships for a routing rule, linking to associated policy
        resources.
      properties:
        policy:
          $ref: '#/components/schemas/RoutingRuleRelationshipsPolicy'
      type: object
    RoutingRuleType:
      default: team_routing_rules
      description: Team routing rules resource type.
      enum:
        - team_routing_rules
      example: team_routing_rules
      type: string
      x-enum-varnames:
        - TEAM_ROUTING_RULES
    TeamRoutingRulesRequestRule:
      description: >-
        Defines an individual routing rule item that contains the rule data for
        the request.
      properties:
        actions:
          description: >-
            Specifies the list of actions to perform when the routing rule is
            matched.
          items:
            $ref: '#/components/schemas/RoutingRuleAction'
          type: array
        policy_id:
          description: Identifies the policy to be applied when this routing rule matches.
          type: string
        query:
          description: Defines the query or condition that triggers this routing rule.
          type: string
        time_restriction:
          $ref: '#/components/schemas/TimeRestrictions'
        urgency:
          $ref: '#/components/schemas/Urgency'
      type: object
    ServiceDefinitionMeta:
      description: Metadata about a service definition.
      properties:
        github-html-url:
          description: GitHub HTML URL.
          type: string
        ingested-schema-version:
          description: Ingestion schema version.
          type: string
        ingestion-source:
          description: Ingestion source of the service definition.
          type: string
        last-modified-time:
          description: Last modified time of the service definition.
          type: string
        origin:
          description: User defined origin of the service definition.
          type: string
        origin-detail:
          description: User defined origin's detail of the service definition.
          type: string
        warnings:
          description: A list of schema validation warnings.
          items:
            $ref: '#/components/schemas/ServiceDefinitionMetaWarnings'
          type: array
      type: object
    ServiceDefinitionSchema:
      description: Service definition schema.
      oneOf:
        - $ref: '#/components/schemas/ServiceDefinitionV1'
        - $ref: '#/components/schemas/ServiceDefinitionV2'
        - $ref: '#/components/schemas/ServiceDefinitionV2Dot1'
        - $ref: '#/components/schemas/ServiceDefinitionV2Dot2'
    ServiceDefinitionV2Dot2Opsgenie:
      description: Opsgenie integration for the service.
      properties:
        region:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot2OpsgenieRegion'
        service-url:
          description: Opsgenie service url.
          example: >-
            https://my-org.opsgenie.com/service/123e4567-e89b-12d3-a456-426614174000
          type: string
      required:
        - service-url
      type: object
    ServiceDefinitionV2Dot2Pagerduty:
      description: PagerDuty integration for the service.
      properties:
        service-url:
          description: PagerDuty service url.
          example: https://my-org.pagerduty.com/service-directory/PMyService
          type: string
      type: object
    ServiceDefinitionV2Dot1Email:
      description: Service owner's email.
      properties:
        contact:
          description: Contact value.
          example: contact@datadoghq.com
          type: string
        name:
          description: Contact email.
          example: Team Email
          type: string
        type:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot1EmailType'
      required:
        - type
        - contact
      type: object
    ServiceDefinitionV2Dot1Slack:
      description: Service owner's Slack channel.
      properties:
        contact:
          description: Slack Channel.
          example: https://yourcompany.slack.com/archives/channel123
          type: string
        name:
          description: Contact Slack.
          example: Team Slack
          type: string
        type:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot1SlackType'
      required:
        - type
        - contact
      type: object
    ServiceDefinitionV2Dot1MSTeams:
      description: Service owner's Microsoft Teams.
      properties:
        contact:
          description: Contact value.
          example: https://teams.microsoft.com/myteam
          type: string
        name:
          description: Contact Microsoft Teams.
          example: My team channel
          type: string
        type:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot1MSTeamsType'
      required:
        - type
        - contact
      type: object
    ServiceDefinitionV2Dot1Opsgenie:
      description: Opsgenie integration for the service.
      properties:
        region:
          $ref: '#/components/schemas/ServiceDefinitionV2Dot1OpsgenieRegion'
        service-url:
          description: Opsgenie service url.
          example: >-
            https://my-org.opsgenie.com/service/123e4567-e89b-12d3-a456-426614174000
          type: string
      required:
        - service-url
      type: object
    ServiceDefinitionV2Dot1Pagerduty:
      description: PagerDuty integration for the service.
      properties:
        service-url:
          description: PagerDuty service url.
          example: https://my-org.pagerduty.com/service-directory/PMyService
          type: string
      type: object
    ServiceDefinitionV2Dot1LinkType:
      description: Link type.
      enum:
        - doc
        - repo
        - runbook
        - dashboard
        - other
      example: runbook
      type: string
      x-enum-varnames:
        - DOC
        - REPO
        - RUNBOOK
        - DASHBOARD
        - OTHER
    ServiceDefinitionV2Email:
      description: Service owner's email.
      properties:
        contact:
          description: Contact value.
          example: contact@datadoghq.com
          type: string
        name:
          description: Contact email.
          example: Team Email
          type: string
        type:
          $ref: '#/components/schemas/ServiceDefinitionV2EmailType'
      required:
        - type
        - contact
      type: object
    ServiceDefinitionV2Slack:
      description: Service owner's Slack channel.
      properties:
        contact:
          description: Slack Channel.
          example: https://yourcompany.slack.com/archives/channel123
          type: string
        name:
          description: Contact Slack.
          example: Team Slack
          type: string
        type:
          $ref: '#/components/schemas/ServiceDefinitionV2SlackType'
      required:
        - type
        - contact
      type: object
    ServiceDefinitionV2MSTeams:
      description: Service owner's Microsoft Teams.
      properties:
        contact:
          description: Contact value.
          example: https://teams.microsoft.com/myteam
          type: string
        name:
          description: Contact Microsoft Teams.
          example: My team channel
          type: string
        type:
          $ref: '#/components/schemas/ServiceDefinitionV2MSTeamsType'
      required:
        - type
        - contact
      type: object
    ServiceDefinitionV2Opsgenie:
      description: Opsgenie integration for the service.
      properties:
        region:
          $ref: '#/components/schemas/ServiceDefinitionV2OpsgenieRegion'
        service-url:
          description: Opsgenie service url.
          example: >-
            https://my-org.opsgenie.com/service/123e4567-e89b-12d3-a456-426614174000
          type: string
      required:
        - service-url
      type: object
    ServiceDefinitionV2Pagerduty:
      description: PagerDuty service URL for the service.
      example: https://my-org.pagerduty.com/service-directory/PMyService
      type: string
    ServiceDefinitionV2LinkType:
      description: Link type.
      enum:
        - doc
        - wiki
        - runbook
        - url
        - repo
        - dashboard
        - oncall
        - code
        - link
      example: runbook
      type: string
      x-enum-varnames:
        - DOC
        - WIKI
        - RUNBOOK
        - URL
        - REPO
        - DASHBOARD
        - ONCALL
        - CODE
        - LINK
    SLOReportInterval:
      description: The frequency at which report data is to be generated.
      enum:
        - daily
        - weekly
        - monthly
      example: weekly
      type: string
      x-enum-varnames:
        - DAILY
        - WEEKLY
        - MONTHLY
    SLOReportStatus:
      description: The status of the SLO report job.
      enum:
        - in_progress
        - completed
        - completed_with_errors
        - failed
      example: completed
      type: string
      x-enum-varnames:
        - IN_PROGRESS
        - COMPLETED
        - COMPLETED_WITH_ERRORS
        - FAILED
    JiraIssueResult:
      description: Jira issue information
      properties:
        issue_id:
          description: Jira issue ID
          type: string
        issue_key:
          description: Jira issue key
          type: string
        issue_url:
          description: Jira issue URL
          type: string
        project_key:
          description: Jira project key
          type: string
      type: object
    Case3rdPartyTicketStatus:
      default: IN_PROGRESS
      description: Case status
      enum:
        - IN_PROGRESS
        - COMPLETED
        - FAILED
      example: COMPLETED
      readOnly: true
      type: string
      x-enum-varnames:
        - IN_PROGRESS
        - COMPLETED
        - FAILED
    ServiceNowTicketResult:
      description: ServiceNow ticket information
      properties:
        sys_target_link:
          description: Link to the Incident created on ServiceNow
          type: string
      type: object
    NullableUserRelationshipData:
      description: Relationship to user object.
      nullable: true
      properties:
        id:
          description: A unique identifier that represents the user.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/UserResourceType'
      required:
        - id
        - type
      type: object
    ProjectRelationshipData:
      description: Relationship to project object
      properties:
        id:
          description: A unique identifier that represents the project
          example: e555e290-ed65-49bd-ae18-8acbfcf18db7
          type: string
        type:
          $ref: '#/components/schemas/ProjectResourceType'
      required:
        - id
        - type
      type: object
    RelationshipToTeamLinkData:
      description: Relationship between a link and a team
      properties:
        id:
          description: The team link's identifier
          example: f9bb8444-af7f-11ec-ac2c-da7ad0900001
          type: string
        type:
          $ref: '#/components/schemas/TeamLinkType'
      required:
        - id
        - type
      type: object
    TeamRelationshipsLinks:
      description: Links attributes.
      properties:
        related:
          description: Related link.
          example: /api/v2/team/c75a4a8e-20c7-11ee-a3a5-da7ad0900002/links
          type: string
      type: object
    UserRelationshipData:
      description: Relationship to user object.
      properties:
        id:
          description: A unique identifier that represents the user.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/UserResourceType'
      required:
        - id
        - type
      type: object
    DowntimeMonitorIdentifierId:
      additionalProperties: {}
      description: Object of the monitor identifier.
      properties:
        monitor_id:
          description: ID of the monitor to prevent notifications.
          example: 123
          format: int64
          type: integer
      required:
        - monitor_id
      type: object
    DowntimeMonitorIdentifierTags:
      additionalProperties: {}
      description: Object of the monitor tags.
      properties:
        monitor_tags:
          description: >-
            A list of monitor tags. For example, tags that are applied directly
            to monitors,

            not tags that are used in monitor queries (which are filtered by the
            scope parameter), to which the downtime applies.

            The resulting downtime applies to monitors that match **all**
            provided monitor tags. Setting `monitor_tags`

            to `[*]` configures the downtime to mute all monitors for the given
            scope.
          example:
            - service:postgres
            - team:frontend
          items:
            description: A list of monitor tags.
            example: service:postgres
            type: string
          minItems: 1
          type: array
      required:
        - monitor_tags
      type: object
    DowntimeNotifyEndStateTypes:
      description: >-
        State that will trigger a monitor notification when the
        `notify_end_types` action occurs.
      enum:
        - alert
        - no data
        - warn
      example: alert
      type: string
      x-enum-varnames:
        - ALERT
        - NO_DATA
        - WARN
    DowntimeNotifyEndStateActions:
      description: >-
        Action that will trigger a monitor notification if the downtime is in
        the `notify_end_types` state.
      enum:
        - canceled
        - expired
      example: canceled
      type: string
      x-enum-varnames:
        - CANCELED
        - EXPIRED
    DowntimeScheduleRecurrencesResponse:
      description: A recurring downtime schedule definition.
      properties:
        current_downtime:
          $ref: '#/components/schemas/DowntimeScheduleCurrentDowntimeResponse'
        recurrences:
          description: A list of downtime recurrences.
          items:
            $ref: '#/components/schemas/DowntimeScheduleRecurrenceResponse'
          maxItems: 5
          minItems: 1
          type: array
        timezone:
          default: UTC
          description: >-
            The timezone in which to schedule the downtime. This affects
            recurring start and end dates.

            Must match `display_timezone`.
          example: America/New_York
          type: string
      required:
        - recurrences
      type: object
    DowntimeScheduleOneTimeResponse:
      description: A one-time downtime definition.
      properties:
        end:
          description: ISO-8601 Datetime to end the downtime.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          nullable: true
          type: string
        start:
          description: ISO-8601 Datetime to start the downtime.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          type: string
      required:
        - start
      type: object
    DowntimeRelationshipsCreatedByData:
      description: Data for the user who created the downtime.
      nullable: true
      properties:
        id:
          description: User ID of the downtime creator.
          example: 00000000-0000-1234-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    DowntimeRelationshipsMonitorData:
      description: Data for the monitor.
      nullable: true
      properties:
        id:
          description: Monitor ID of the downtime.
          example: '12345'
          type: string
        type:
          $ref: '#/components/schemas/DowntimeIncludedMonitorType'
      type: object
    RelationshipToOrganization:
      description: Relationship to an organization.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToOrganizationData'
      required:
        - data
      type: object
    RelationshipToOrganizations:
      description: Relationship to organizations.
      properties:
        data:
          description: Relationships to organization objects.
          example: []
          items:
            $ref: '#/components/schemas/RelationshipToOrganizationData'
          type: array
      required:
        - data
      type: object
    RelationshipToUsers:
      description: Relationship to users.
      properties:
        data:
          description: Relationships to user objects.
          example: []
          items:
            $ref: '#/components/schemas/RelationshipToUserData'
          type: array
      required:
        - data
      type: object
    RelationshipToRoles:
      description: Relationship to roles.
      properties:
        data:
          description: An array containing type and the unique identifier of a role.
          items:
            $ref: '#/components/schemas/RelationshipToRoleData'
          type: array
      type: object
    DowntimeScheduleRecurrencesCreateRequest:
      description: A recurring downtime schedule definition.
      properties:
        recurrences:
          description: A list of downtime recurrences.
          items:
            $ref: '#/components/schemas/DowntimeScheduleRecurrenceCreateUpdateRequest'
          type: array
        timezone:
          default: UTC
          description: The timezone in which to schedule the downtime.
          example: America/New_York
          type: string
      required:
        - recurrences
      type: object
    DowntimeScheduleOneTimeCreateUpdateRequest:
      additionalProperties: false
      description: A one-time downtime definition.
      properties:
        end:
          description: >-
            ISO-8601 Datetime to end the downtime. Must include a UTC offset of
            zero. If not provided, the

            downtime continues forever.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          nullable: true
          type: string
        start:
          description: >-
            ISO-8601 Datetime to start the downtime. Must include a UTC offset
            of zero. If not provided, the

            downtime starts the moment it is created.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          nullable: true
          type: string
      type: object
    DowntimeScheduleRecurrencesUpdateRequest:
      additionalProperties: false
      description: A recurring downtime schedule definition.
      properties:
        recurrences:
          description: A list of downtime recurrences.
          items:
            $ref: '#/components/schemas/DowntimeScheduleRecurrenceCreateUpdateRequest'
          type: array
        timezone:
          default: UTC
          description: The timezone in which to schedule the downtime.
          example: America/New_York
          type: string
      type: object
    IssueReference:
      description: The issue the search result corresponds to.
      properties:
        id:
          description: Issue identifier.
          example: c1726a66-1f64-11ee-b338-da7ad0900002
          type: string
        type:
          $ref: '#/components/schemas/IssueType'
      required:
        - id
        - type
      type: object
    IssueUserReference:
      description: The user the issue is assigned to.
      properties:
        id:
          description: User identifier.
          example: 87cb11a0-278c-440a-99fe-701223c80296
          type: string
        type:
          $ref: '#/components/schemas/IssueUserType'
      required:
        - id
        - type
      type: object
    IssueCaseReference:
      description: The case the issue is attached to.
      properties:
        id:
          description: Case identifier.
          example: 2841440d-e780-4fe2-96cd-6a8c1d194da5
          type: string
        type:
          $ref: '#/components/schemas/IssueCaseResourceType'
      required:
        - id
        - type
      type: object
    IssueTeamReference:
      description: A team that owns the issue.
      properties:
        id:
          description: Team identifier.
          example: 221b0179-6447-4d03-91c3-3ca98bf60e8a
          type: string
        type:
          $ref: '#/components/schemas/IssueTeamType'
      required:
        - id
        - type
      type: object
    IssueCaseInsight:
      description: Insight of the case.
      properties:
        ref:
          description: Reference of the insight.
          example: /error-tracking?issueId=2841440d-e780-4fe2-96cd-6a8c1d194da5
          type: string
        resource_id:
          description: Insight identifier.
          example: 2841440d-e780-4fe2-96cd-6a8c1d194da5
          type: string
        type:
          description: Type of the insight.
          example: ERROR_TRACKING
          type: string
      type: object
    IssueCaseJiraIssue:
      description: Jira issue of the case.
      properties:
        result:
          $ref: '#/components/schemas/IssueCaseJiraIssueResult'
        status:
          description: Creation status of the Jira issue.
          example: COMPLETED
          type: string
      type: object
    Event:
      description: The metadata associated with a request.
      properties:
        id:
          description: Event ID.
          example: '6509751066204996294'
          type: string
        name:
          description: The event name.
          type: string
        source_id:
          description: Event source ID.
          example: 36
          format: int64
          type: integer
        type:
          description: Event type.
          example: error_tracking_alert
          type: string
      type: object
    MonitorType:
      description: Attributes from the monitor that triggered the event.
      nullable: true
      properties:
        created_at:
          description: The POSIX timestamp of the monitor's creation in nanoseconds.
          example: 1646318692000
          format: int64
          type: integer
        group_status:
          description: Monitor group status used when there is no `result_groups`.
          format: int32
          maximum: 2147483647
          type: integer
        groups:
          description: Groups to which the monitor belongs.
          items:
            description: A group.
            type: string
          type: array
        id:
          description: The monitor ID.
          format: int64
          type: integer
        message:
          description: The monitor message.
          type: string
        modified:
          description: The monitor's last-modified timestamp.
          format: int64
          type: integer
        name:
          description: The monitor name.
          type: string
        query:
          description: The query that triggers the alert.
          type: string
        tags:
          description: A list of tags attached to the monitor.
          example:
            - environment:test
          items:
            description: A tag.
            type: string
          type: array
        templated_name:
          description: >-
            The templated name of the monitor before resolving any template
            variables.
          type: string
        type:
          description: The monitor type.
          type: string
      type: object
    EventPriority:
      description: The priority of the event's monitor. For example, `normal` or `low`.
      enum:
        - normal
        - low
      example: normal
      nullable: true
      type: string
      x-enum-varnames:
        - NORMAL
        - LOW
    EventStatusType:
      description: |-
        If an alert event is enabled, its status is one of the following:
        `failure`, `error`, `warning`, `info`, `success`, `user_update`,
        `recommendation`, or `snapshot`.
      enum:
        - failure
        - error
        - warning
        - info
        - success
        - user_update
        - recommendation
        - snapshot
      example: info
      type: string
      x-enum-varnames:
        - FAILURE
        - ERROR
        - WARNING
        - INFO
        - SUCCESS
        - USER_UPDATE
        - RECOMMENDATION
        - SNAPSHOT
    ChangeEventCustomAttributes:
      additionalProperties: false
      description: Change event attributes.
      properties:
        author:
          $ref: '#/components/schemas/ChangeEventCustomAttributesAuthor'
        change_metadata:
          additionalProperties: {}
          description: >-
            Free form JSON object with information related to the `change`
            event. Supports up to 100 properties per object and a maximum
            nesting depth of 10 levels.
          example:
            dd:
              team: datadog_team
              user_email: datadog@datadog.com
              user_id: datadog_user_id
              user_name: datadog_username
            resource_link: datadog.com/feature/fallback_payments_test
          type: object
        changed_resource:
          $ref: '#/components/schemas/ChangeEventCustomAttributesChangedResource'
        impacted_resources:
          description: >-
            A list of resources impacted by this change. It is recommended to
            provide an impacted resource to display

            the change event at the correct location. Only resources of type
            `service` are supported. Maximum of 100 impacted resources allowed.
          example:
            - name: payments_api
              type: service
          items:
            $ref: >-
              #/components/schemas/ChangeEventCustomAttributesImpactedResourcesItems
          maxItems: 100
          type: array
        new_value:
          additionalProperties: {}
          description: >-
            Free form JSON object representing the new state of the changed
            resource.
          example:
            enabled: true
            percentage: 50%
            rule:
              datacenter: devcycle.us1.prod
          type: object
        prev_value:
          additionalProperties: {}
          description: >-
            Free form JSON object representing the previous state of the changed
            resource.
          example:
            enabled: true
            percentage: 10%
            rule:
              datacenter: devcycle.us1.prod
          type: object
      required:
        - changed_resource
      type: object
    AlertEventCustomAttributes:
      additionalProperties: false
      description: Alert event attributes.
      properties:
        custom:
          $ref: '#/components/schemas/AlertEventCustomAttributesCustom'
        links:
          $ref: '#/components/schemas/AlertEventCustomAttributesLinks'
        priority:
          $ref: '#/components/schemas/AlertEventCustomAttributesPriority'
        status:
          $ref: '#/components/schemas/AlertEventCustomAttributesStatus'
      required:
        - status
      type: object
    EventCreateResponseAttributesAttributesEvt:
      description: JSON object of event system attributes.
      properties:
        id:
          deprecated: true
          description: >-
            Event identifier. This field is deprecated and will be removed in a
            future version. Use the `uid` field instead.
          type: string
        uid:
          description: >-
            A unique identifier for the event. You can use this identifier to
            query or reference the event.
          type: string
      type: object
    ChangeEventAttributes:
      description: Change event attributes.
      properties:
        aggregation_key:
          $ref: '#/components/schemas/V2EventAggregationKey'
        author:
          $ref: '#/components/schemas/ChangeEventAttributesAuthor'
        change_metadata:
          description: JSON object of change metadata.
          example:
            dd:
              team: datadog_team
              user_email: datadog@datadog.com
              user_id: datadog_user_id
              user_name: datadog_username
          type: object
        changed_resource:
          $ref: '#/components/schemas/ChangeEventAttributesChangedResource'
        evt:
          $ref: '#/components/schemas/EventSystemAttributes'
        impacted_resources:
          description: A list of resources impacted by this change.
          example:
            - name: service-name
              type: service
          items:
            $ref: '#/components/schemas/ChangeEventAttributesImpactedResourcesItem'
          type: array
        new_value:
          description: The new state of the changed resource.
          example:
            enabled: true
            percentage: 50%
            rule:
              datacenter: devcycle.us1.prod
          type: object
        prev_value:
          description: The previous state of the changed resource.
          example:
            enabled: true
            percentage: 10%
            rule:
              datacenter: devcycle.us1.prod
          type: object
        service:
          $ref: '#/components/schemas/V2EventService'
        timestamp:
          $ref: '#/components/schemas/V2EventTimestamp'
        title:
          $ref: '#/components/schemas/V2EventTitle'
      type: object
    AlertEventAttributes:
      description: Alert event attributes.
      properties:
        aggregation_key:
          $ref: '#/components/schemas/V2EventAggregationKey'
        custom:
          description: JSON object of custom attributes.
          example: {}
          type: object
        evt:
          $ref: '#/components/schemas/EventSystemAttributes'
        links:
          description: The links related to the event.
          example:
            - category: runbook
              title: Runbook Link
              url: https://app.datadoghq.com/runbook
          items:
            $ref: '#/components/schemas/AlertEventAttributesLinksItem'
          type: array
        priority:
          $ref: '#/components/schemas/AlertEventAttributesPriority'
        service:
          $ref: '#/components/schemas/V2EventService'
        status:
          $ref: '#/components/schemas/AlertEventAttributesStatus'
        timestamp:
          $ref: '#/components/schemas/V2EventTimestamp'
        title:
          $ref: '#/components/schemas/V2EventTitle'
      type: object
    IncidentFieldAttributesSingleValue:
      description: A field with a single value selected.
      properties:
        type:
          $ref: '#/components/schemas/IncidentFieldAttributesSingleValueType'
        value:
          description: The single value selected for this field.
          example: SEV-1
          nullable: true
          type: string
      type: object
    IncidentFieldAttributesMultipleValue:
      description: A field with potentially multiple values selected.
      properties:
        type:
          $ref: '#/components/schemas/IncidentFieldAttributesValueType'
        value:
          description: The multiple values selected for this field.
          example:
            - '1.0'
            - '1.1'
          items:
            description: A value which has been selected for the parent field.
            example: '1.1'
            type: string
          nullable: true
          type: array
      type: object
    RelationshipToIncidentAttachmentData:
      description: The attachment relationship data.
      properties:
        id:
          description: A unique identifier that represents the attachment.
          example: 00000000-0000-abcd-1000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/IncidentAttachmentType'
      required:
        - id
        - type
      type: object
    NullableRelationshipToUserData:
      description: Relationship to user object.
      nullable: true
      properties:
        id:
          description: A unique identifier that represents the user.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/UsersType'
      required:
        - id
        - type
      type: object
    RelationshipToUserData:
      description: Relationship to user object.
      properties:
        id:
          description: A unique identifier that represents the user.
          example: 00000000-0000-0000-2345-000000000000
          type: string
        type:
          $ref: '#/components/schemas/UsersType'
      required:
        - id
        - type
      type: object
    RelationshipToIncidentImpactData:
      description: Relationship to impact object.
      properties:
        id:
          description: A unique identifier that represents the impact.
          example: 00000000-0000-0000-2345-000000000000
          type: string
        type:
          $ref: '#/components/schemas/IncidentImpactsType'
      required:
        - id
        - type
      type: object
    RelationshipToIncidentIntegrationMetadataData:
      description: A relationship reference for an integration metadata object.
      example:
        id: 00000000-abcd-0002-0000-000000000000
        type: incident_integrations
      properties:
        id:
          description: A unique identifier that represents the integration metadata.
          example: 00000000-abcd-0001-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/IncidentIntegrationMetadataType'
      required:
        - id
        - type
      type: object
    RelationshipToIncidentResponderData:
      description: Relationship to impact object.
      properties:
        id:
          description: A unique identifier that represents the responder.
          example: 00000000-0000-0000-2345-000000000000
          type: string
        type:
          $ref: '#/components/schemas/IncidentRespondersType'
      required:
        - id
        - type
      type: object
    RelationshipToIncidentUserDefinedFieldData:
      description: Relationship to impact object.
      properties:
        id:
          description: A unique identifier that represents the responder.
          example: 00000000-0000-0000-2345-000000000000
          type: string
        type:
          $ref: '#/components/schemas/IncidentUserDefinedFieldType'
      required:
        - id
        - type
      type: object
    IncidentTimelineCellMarkdownCreateAttributes:
      description: Timeline cell data for Markdown timeline cells for a create request.
      properties:
        cell_type:
          $ref: '#/components/schemas/IncidentTimelineCellMarkdownContentType'
        content:
          $ref: >-
            #/components/schemas/IncidentTimelineCellMarkdownCreateAttributesContent
        important:
          default: false
          description: >-
            A flag indicating whether the timeline cell is important and should
            be highlighted.
          example: false
          type: boolean
      required:
        - content
        - cell_type
      type: object
    IncidentNotificationRuleConditionsItems:
      description: A condition that must be met to trigger the notification rule.
      properties:
        field:
          description: The incident field to evaluate
          example: severity
          type: string
        values:
          description: >-
            The value(s) to compare against. Multiple values are `ORed`
            together.
          example:
            - SEV-1
            - SEV-2
          items:
            type: string
          type: array
      required:
        - field
        - values
      type: object
    RelationshipToIncidentTypeData:
      description: Relationship to incident type object.
      properties:
        id:
          description: The incident type's ID.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/IncidentTypeType'
      required:
        - id
        - type
      type: object
    RelationshipToIncidentNotificationTemplateData:
      description: The notification template relationship data.
      properties:
        id:
          description: The unique identifier of the notification template.
          example: 00000000-0000-0000-0000-000000000001
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/IncidentNotificationTemplateType'
      required:
        - id
        - type
      type: object
    GoogleMeetConfigurationReferenceData:
      description: The Google Meet configuration relationship data object.
      nullable: true
      properties:
        id:
          description: The unique identifier of the Google Meet configuration.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          description: The type of the Google Meet configuration.
          example: google_meet_configurations
          type: string
      required:
        - id
        - type
      type: object
    MicrosoftTeamsConfigurationReferenceData:
      description: The Microsoft Teams configuration relationship data object.
      nullable: true
      properties:
        id:
          description: The unique identifier of the Microsoft Teams configuration.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          description: The type of the Microsoft Teams configuration.
          example: microsoft_teams_configurations
          type: string
      required:
        - id
        - type
      type: object
    ZoomConfigurationReferenceData:
      description: The Zoom configuration relationship data object.
      nullable: true
      properties:
        id:
          description: The unique identifier of the Zoom configuration.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          description: The type of the Zoom configuration.
          example: zoom_configurations
          type: string
      required:
        - id
        - type
      type: object
    IncidentSearchResponseUserFacetData:
      description: Facet data for user attributes of an incident.
      properties:
        count:
          $ref: '#/components/schemas/IncidentSearchResponseFacetCount'
        email:
          description: Email of the user.
          example: datadog.user@example.com
          type: string
        handle:
          description: Handle of the user.
          example: '@datadog.user@example.com'
          type: string
        name:
          description: Name of the user.
          example: Datadog User
          type: string
        uuid:
          description: ID of the user.
          example: 773b045d-ccf8-4808-bd3b-955ef6a8c940
          type: string
      type: object
    IncidentSearchResponsePropertyFieldFacetData:
      description: Facet data for the incident property fields.
      properties:
        aggregates:
          $ref: >-
            #/components/schemas/IncidentSearchResponseNumericFacetDataAggregates
        facets:
          description: Facet data for the property field of an incident.
          items:
            $ref: '#/components/schemas/IncidentSearchResponseFieldFacetData'
          type: array
        name:
          description: Name of the incident property field.
          example: Severity
          type: string
      required:
        - facets
        - name
      type: object
    IncidentSearchResponseFieldFacetData:
      description: >-
        Facet value and number of occurrences for a property field of an
        incident.
      properties:
        count:
          $ref: '#/components/schemas/IncidentSearchResponseFacetCount'
        name:
          description: The facet value appearing in search results.
          example: SEV-2
          type: string
      type: object
    IncidentSearchResponseNumericFacetData:
      description: Facet data numeric attributes of an incident.
      properties:
        aggregates:
          $ref: >-
            #/components/schemas/IncidentSearchResponseNumericFacetDataAggregates
        name:
          description: Name of the incident property field.
          example: time_to_repair
          type: string
      required:
        - name
        - aggregates
      type: object
    RelationshipToIncidentPostmortemData:
      description: The postmortem relationship data.
      example:
        id: 00000000-0000-abcd-2000-000000000000
        type: incident_postmortems
      properties:
        id:
          description: A unique identifier that represents the postmortem.
          example: 00000000-0000-abcd-1000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/IncidentPostmortemType'
      required:
        - id
        - type
      type: object
    IncidentAttachmentsPostmortemAttributesAttachmentObject:
      description: The postmortem attachment.
      properties:
        documentUrl:
          description: The URL of this notebook attachment.
          example: https://app.datadoghq.com/notebook/123
          type: string
        title:
          description: The title of this postmortem attachment.
          example: Postmortem IR-123
          type: string
      required:
        - documentUrl
        - title
      type: object
    IncidentAttachmentPostmortemAttachmentType:
      default: postmortem
      description: The type of postmortem attachment attributes.
      enum:
        - postmortem
      example: postmortem
      type: string
      x-enum-varnames:
        - POSTMORTEM
    IncidentAttachmentLinkAttributesAttachmentObject:
      description: The link attachment.
      properties:
        documentUrl:
          description: The URL of this link attachment.
          example: https://www.example.com/webstore-failure-runbook
          type: string
        title:
          description: The title of this link attachment.
          example: Runbook for webstore service failures
          type: string
      required:
        - documentUrl
        - title
      type: object
    IncidentAttachmentLinkAttachmentType:
      default: link
      description: The type of link attachment attributes.
      enum:
        - link
      example: link
      type: string
      x-enum-varnames:
        - LINK
    SlackIntegrationMetadata:
      description: Incident integration metadata for the Slack integration.
      properties:
        channels:
          description: Array of Slack channels in this integration metadata.
          example: []
          items:
            $ref: '#/components/schemas/SlackIntegrationMetadataChannelItem'
          type: array
      required:
        - channels
      type: object
    JiraIntegrationMetadata:
      description: Incident integration metadata for the Jira integration.
      properties:
        issues:
          description: Array of Jira issues in this integration metadata.
          example: []
          items:
            $ref: '#/components/schemas/JiraIntegrationMetadataIssuesItem'
          type: array
      required:
        - issues
      type: object
    MSTeamsIntegrationMetadata:
      description: Incident integration metadata for the Microsoft Teams integration.
      properties:
        teams:
          description: Array of Microsoft Teams in this integration metadata.
          example: []
          items:
            $ref: '#/components/schemas/MSTeamsIntegrationMetadataTeamsItem'
          type: array
      required:
        - teams
      type: object
    IncidentTodoAssignee:
      description: A todo assignee.
      example: '@test.user@test.com'
      oneOf:
        - $ref: '#/components/schemas/IncidentTodoAssigneeHandle'
        - $ref: '#/components/schemas/IncidentTodoAnonymousAssignee'
    EscalationPolicyStepAttributesAssignment:
      description: >-
        Specifies how this escalation step will assign targets (example
        `default` or `round-robin`).
      enum:
        - default
        - round-robin
      type: string
      x-enum-varnames:
        - DEFAULT
        - ROUND_ROBIN
    EscalationPolicyStepTarget:
      description: >-
        Defines a single escalation target within a step for an escalation
        policy creation request. Contains `id` and `type`.
      properties:
        id:
          description: Specifies the unique identifier for this target.
          example: 00000000-aba1-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/EscalationPolicyStepTargetType'
      type: object
    DataRelationshipsTeamsDataItems:
      description: >-
        Relates a team to this schedule, identified by `id` and `type` (must be
        `teams`).
      properties:
        id:
          description: The unique identifier of the team in this relationship.
          example: 00000000-da3a-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/DataRelationshipsTeamsDataItemsType'
      required:
        - type
        - id
      type: object
    EscalationPolicyDataRelationshipsStepsDataItems:
      description: >-
        Defines a relationship to a single step within an escalation policy.
        Contains the step's `id` and `type`.
      properties:
        id:
          description: Specifies the unique identifier for the step resource.
          example: 00000000-aba1-0000-0000-000000000000
          type: string
        type:
          $ref: >-
            #/components/schemas/EscalationPolicyDataRelationshipsStepsDataItemsType
      required:
        - type
        - id
      type: object
    EscalationTargets:
      description: A list of escalation targets for a step
      properties:
        data:
          description: The `EscalationTargets` `data`.
          items:
            $ref: '#/components/schemas/EscalationTarget'
          type: array
      type: object
    UserAttributesStatus:
      description: The user's status.
      enum:
        - active
        - deactivated
        - pending
      type: string
      x-enum-varnames:
        - ACTIVE
        - DEACTIVATED
        - PENDING
    OnCallPageTargetType:
      description: The kind of target, `team_id` | `team_handle` | `user_id`.
      enum:
        - team_id
        - team_handle
        - user_id
      example: team_id
      type: string
      x-enum-varnames:
        - TEAM_ID
        - TEAM_HANDLE
        - USER_ID
    LayerAttributesInterval:
      description: >-
        Defines how often the rotation repeats, using a combination of days and
        optional seconds. Should be at least 1 hour.
      properties:
        days:
          description: The number of days in each rotation cycle.
          example: 1
          format: int32
          maximum: 400
          type: integer
        seconds:
          description: Any additional seconds for the rotation cycle (up to 30 days).
          example: 300
          format: int64
          maximum: 2592000
          type: integer
      type: object
    ScheduleRequestDataAttributesLayersItemsMembersItems:
      description: >-
        Defines a single member within a schedule layer, including the reference
        to the underlying user.
      properties:
        user:
          $ref: >-
            #/components/schemas/ScheduleRequestDataAttributesLayersItemsMembersItemsUser
      type: object
    TimeRestriction:
      description: >-
        Defines a single time restriction rule with start and end times and the
        applicable weekdays.
      properties:
        end_day:
          $ref: '#/components/schemas/Weekday'
        end_time:
          description: Specifies the ending time for this restriction.
          type: string
        start_day:
          $ref: '#/components/schemas/Weekday'
        start_time:
          description: Specifies the starting time for this restriction.
          type: string
      type: object
    ScheduleDataRelationshipsLayersDataItems:
      description: >-
        Relates a layer to this schedule, identified by `id` and `type` (must be
        `layers`).
      properties:
        id:
          description: The unique identifier of the layer in this relationship.
          example: 00000000-0000-0000-0000-000000000001
          type: string
        type:
          $ref: '#/components/schemas/ScheduleDataRelationshipsLayersDataItemsType'
      required:
        - type
        - id
      type: object
    LayerRelationshipsMembers:
      description: >-
        Holds an array of references to the members of a Layer, each containing
        member IDs.
      properties:
        data:
          description: The list of members who belong to this layer.
          items:
            $ref: '#/components/schemas/LayerRelationshipsMembersDataItems'
          type: array
      type: object
    ScheduleMemberRelationshipsUser:
      description: Wraps the user data reference for a schedule member.
      properties:
        data:
          $ref: '#/components/schemas/ScheduleMemberRelationshipsUserData'
      required:
        - data
      type: object
    ShiftDataRelationshipsUserData:
      description: >-
        Represents a reference to the user assigned to this shift, containing
        the user's ID and resource type.
      properties:
        id:
          description: Specifies the unique identifier of the user.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/ShiftDataRelationshipsUserDataType'
      required:
        - type
        - id
      type: object
    TeamOnCallRespondersDataRelationshipsEscalationsDataItems:
      description: >-
        Represents a link to a specific escalation policy step associated with
        the on-call team.
      properties:
        id:
          description: Unique identifier of the escalation step.
          example: ''
          type: string
        type:
          $ref: >-
            #/components/schemas/TeamOnCallRespondersDataRelationshipsEscalationsDataItemsType
      required:
        - type
        - id
      type: object
    TeamOnCallRespondersDataRelationshipsRespondersDataItems:
      description: Represents a user responder associated with the on-call team.
      properties:
        id:
          description: Unique identifier of the responder.
          example: ''
          type: string
        type:
          $ref: >-
            #/components/schemas/TeamOnCallRespondersDataRelationshipsRespondersDataItemsType
      required:
        - type
        - id
      type: object
    EscalationRelationshipsResponders:
      description: Lists the users involved in a specific step of the escalation policy.
      properties:
        data:
          description: >-
            Array of user references assigned as responders for this escalation
            step.
          items:
            $ref: '#/components/schemas/EscalationRelationshipsRespondersDataItems'
          type: array
      type: object
    TeamRoutingRulesDataRelationshipsRulesDataItems:
      description: Defines a relationship item to link a routing rule by its ID and type.
      properties:
        id:
          description: Specifies the unique identifier for the related routing rule.
          example: ''
          type: string
        type:
          $ref: >-
            #/components/schemas/TeamRoutingRulesDataRelationshipsRulesDataItemsType
      required:
        - type
        - id
      type: object
    RoutingRuleAction:
      description: >-
        Defines an action that is executed when a routing rule matches certain
        criteria.
      oneOf:
        - $ref: '#/components/schemas/SendSlackMessageAction'
        - $ref: '#/components/schemas/SendTeamsMessageAction'
    TimeRestrictions:
      description: >-
        Holds time zone information and a list of time restrictions for a
        routing rule.
      properties:
        restrictions:
          description: Defines the list of time-based restrictions.
          items:
            $ref: '#/components/schemas/TimeRestriction'
          type: array
        time_zone:
          description: Specifies the time zone applicable to the restrictions.
          example: ''
          type: string
      required:
        - time_zone
        - restrictions
      type: object
    Urgency:
      description: >-
        Specifies the level of urgency for a routing rule (low, high, or
        dynamic).
      enum:
        - low
        - high
        - dynamic
      example: low
      type: string
      x-enum-varnames:
        - LOW
        - HIGH
        - DYNAMIC
    RoutingRuleRelationshipsPolicy:
      description: Defines the relationship that links a routing rule to a policy.
      properties:
        data:
          $ref: '#/components/schemas/RoutingRuleRelationshipsPolicyData'
          nullable: true
      type: object
    ServiceDefinitionMetaWarnings:
      description: Schema validation warnings.
      properties:
        instance-location:
          description: The warning instance location.
          type: string
        keyword-location:
          description: The warning keyword location.
          type: string
        message:
          description: The warning message.
          type: string
      type: object
    ServiceDefinitionV1:
      deprecated: true
      description: >-
        Deprecated - Service definition V1 for providing additional service
        metadata and integrations.
      properties:
        contact:
          $ref: '#/components/schemas/ServiceDefinitionV1Contact'
        extensions:
          additionalProperties: {}
          description: Extensions to V1 schema.
          example:
            myorg/extension: extensionValue
          type: object
        external-resources:
          description: A list of external links related to the services.
          items:
            $ref: '#/components/schemas/ServiceDefinitionV1Resource'
          type: array
        info:
          $ref: '#/components/schemas/ServiceDefinitionV1Info'
        integrations:
          $ref: '#/components/schemas/ServiceDefinitionV1Integrations'
        org:
          $ref: '#/components/schemas/ServiceDefinitionV1Org'
        schema-version:
          $ref: '#/components/schemas/ServiceDefinitionV1Version'
        tags:
          description: A set of custom tags.
          example:
            - my:tag
            - service:tag
          items:
            type: string
          type: array
      required:
        - schema-version
        - info
      type: object
    ServiceDefinitionV2Dot2OpsgenieRegion:
      description: Opsgenie instance region.
      enum:
        - US
        - EU
      example: US
      type: string
      x-enum-varnames:
        - US
        - EU
    ServiceDefinitionV2Dot1EmailType:
      description: Contact type.
      enum:
        - email
      example: email
      type: string
      x-enum-varnames:
        - EMAIL
    ServiceDefinitionV2Dot1SlackType:
      description: Contact type.
      enum:
        - slack
      example: slack
      type: string
      x-enum-varnames:
        - SLACK
    ServiceDefinitionV2Dot1MSTeamsType:
      description: Contact type.
      enum:
        - microsoft-teams
      example: microsoft-teams
      type: string
      x-enum-varnames:
        - MICROSOFT_TEAMS
    ServiceDefinitionV2Dot1OpsgenieRegion:
      description: Opsgenie instance region.
      enum:
        - US
        - EU
      example: US
      type: string
      x-enum-varnames:
        - US
        - EU
    ServiceDefinitionV2EmailType:
      description: Contact type.
      enum:
        - email
      example: email
      type: string
      x-enum-varnames:
        - EMAIL
    ServiceDefinitionV2SlackType:
      description: Contact type.
      enum:
        - slack
      example: slack
      type: string
      x-enum-varnames:
        - SLACK
    ServiceDefinitionV2MSTeamsType:
      description: Contact type.
      enum:
        - microsoft-teams
      example: microsoft-teams
      type: string
      x-enum-varnames:
        - MICROSOFT_TEAMS
    ServiceDefinitionV2OpsgenieRegion:
      description: Opsgenie instance region.
      enum:
        - US
        - EU
      example: US
      type: string
      x-enum-varnames:
        - US
        - EU
    UserResourceType:
      default: user
      description: User resource type.
      enum:
        - user
      example: user
      type: string
      x-enum-varnames:
        - USER
    TeamLinkType:
      default: team_links
      description: Team link type
      enum:
        - team_links
      example: team_links
      type: string
      x-enum-varnames:
        - TEAM_LINKS
    DowntimeScheduleCurrentDowntimeResponse:
      description: >-
        The most recent actual start and end dates for a recurring downtime. For
        a canceled downtime,

        this is the previously occurring downtime. For active downtimes, this is
        the ongoing downtime, and for scheduled

        downtimes it is the upcoming downtime.
      properties:
        end:
          description: The end of the current downtime.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          nullable: true
          type: string
        start:
          description: The start of the current downtime.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          type: string
      type: object
    DowntimeScheduleRecurrenceResponse:
      description: An RRULE-based recurring downtime.
      properties:
        duration:
          $ref: '#/components/schemas/DowntimeScheduleRecurrenceDuration'
        rrule:
          $ref: '#/components/schemas/DowntimeScheduleRecurrenceRrule'
        start:
          description: >-
            ISO-8601 Datetime to start the downtime. Must not include a UTC
            offset. If not provided, the

            downtime starts the moment it is created.
          example: 2020-01-02T03:04
          type: string
      type: object
    RelationshipToOrganizationData:
      description: Relationship to organization object.
      properties:
        id:
          description: ID of the organization.
          example: 00000000-0000-beef-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/OrganizationsType'
      required:
        - id
        - type
      type: object
    RelationshipToRoleData:
      description: Relationship to role object.
      properties:
        id:
          description: The unique identifier of the role.
          example: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
          type: string
        type:
          $ref: '#/components/schemas/RolesType'
      type: object
    DowntimeScheduleRecurrenceCreateUpdateRequest:
      additionalProperties: {}
      description: An object defining the recurrence of the downtime.
      properties:
        duration:
          $ref: '#/components/schemas/DowntimeScheduleRecurrenceDuration'
        rrule:
          $ref: '#/components/schemas/DowntimeScheduleRecurrenceRrule'
        start:
          description: >-
            ISO-8601 Datetime to start the downtime. Must not include a UTC
            offset. If not provided, the

            downtime starts the moment it is created.
          example: 2020-01-02T03:04
          nullable: true
          type: string
      required:
        - duration
        - rrule
      type: object
    IssueCaseJiraIssueResult:
      description: Contains the identifiers and URL for a successfully created Jira issue.
      properties:
        issue_id:
          description: Jira issue identifier.
          example: '1904866'
          type: string
        issue_key:
          description: Jira issue key.
          example: ET-123
          type: string
        issue_url:
          description: Jira issue URL.
          example: https://your-jira-instance.atlassian.net/browse/ET-123
          type: string
        project_key:
          description: Jira project key.
          example: ET
          type: string
      type: object
    ChangeEventCustomAttributesAuthor:
      additionalProperties: false
      description: >-
        The entity that made the change. Optional, if provided it must include
        `type` and `name`.
      properties:
        name:
          description: >-
            The name of the user or system that made the change. Limited to 128
            characters.
          example: example@datadog.com
          maxLength: 128
          minLength: 1
          type: string
        type:
          $ref: '#/components/schemas/ChangeEventCustomAttributesAuthorType'
      required:
        - name
        - type
      type: object
    ChangeEventCustomAttributesChangedResource:
      additionalProperties: false
      description: A uniquely identified resource.
      properties:
        name:
          description: >-
            The name of the resource that was changed. Limited to 128
            characters.
          example: fallback_payments_test
          maxLength: 128
          minLength: 1
          type: string
        type:
          $ref: '#/components/schemas/ChangeEventCustomAttributesChangedResourceType'
      required:
        - type
        - name
      type: object
    ChangeEventCustomAttributesImpactedResourcesItems:
      additionalProperties: false
      description: Object representing a uniquely identified resource.
      properties:
        name:
          description: The name of the impacted resource. Limited to 128 characters.
          example: payments_api
          maxLength: 128
          minLength: 1
          type: string
        type:
          $ref: >-
            #/components/schemas/ChangeEventCustomAttributesImpactedResourcesItemsType
      required:
        - type
        - name
      type: object
    AlertEventCustomAttributesCustom:
      additionalProperties: {}
      description: >-
        Free form JSON object for arbitrary data. Supports up to 100 properties
        per object and a maximum nesting depth of 10 levels.
      example: {}
      type: object
    AlertEventCustomAttributesLinks:
      description: The links related to the event. Maximum of 20 links allowed.
      items:
        $ref: '#/components/schemas/AlertEventCustomAttributesLinksItems'
      maxItems: 20
      minItems: 1
      type: array
    AlertEventCustomAttributesPriority:
      default: '5'
      description: The priority of the alert.
      enum:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
      example: '5'
      type: string
      x-enum-varnames:
        - PRIORITY_ONE
        - PRIORITY_TWO
        - PRIORITY_THREE
        - PRIORITY_FOUR
        - PRIORITY_FIVE
    AlertEventCustomAttributesStatus:
      description: The status of the alert.
      enum:
        - warn
        - error
        - ok
      example: warn
      type: string
      x-enum-varnames:
        - WARN
        - ERROR
        - OK
    V2EventAggregationKey:
      description: Aggregation key of the event.
      example: aggregation-key
      type: string
    ChangeEventAttributesAuthor:
      description: The entity that made the change.
      properties:
        name:
          description: The name of the user or system that made the change.
          example: example@datadog.com
          type: string
        type:
          $ref: '#/components/schemas/ChangeEventAttributesAuthorType'
      type: object
    ChangeEventAttributesChangedResource:
      description: A uniquely identified resource.
      properties:
        name:
          description: The name of the changed resource.
          type: string
        type:
          $ref: '#/components/schemas/ChangeEventAttributesChangedResourceType'
      type: object
    EventSystemAttributes:
      description: JSON object of event system attributes.
      properties:
        category:
          $ref: '#/components/schemas/EventSystemAttributesCategory'
        id:
          description: >-
            Event identifier. This field is deprecated and will be removed in a
            future version. Use the `uid` field instead.
          type: string
        integration_id:
          $ref: '#/components/schemas/EventSystemAttributesIntegrationId'
        source_id:
          description: The source type ID of the event.
          format: int64
          type: integer
        uid:
          description: >-
            A unique identifier for the event. You can use this identifier to
            query or reference the event.
          type: string
      type: object
    ChangeEventAttributesImpactedResourcesItem:
      description: A uniquely identified resource.
      properties:
        name:
          description: The name of the impacted resource.
          type: string
        type:
          $ref: '#/components/schemas/ChangeEventAttributesImpactedResourcesItemType'
      type: object
    V2EventService:
      description: Service that triggered the event.
      example: service-name
      type: string
    V2EventTimestamp:
      description: POSIX timestamp of the event.
      example: 175019386627
      format: int64
      type: integer
    V2EventTitle:
      description: The title of the event.
      example: The event title
      type: string
    AlertEventAttributesLinksItem:
      description: A link.
      properties:
        category:
          $ref: '#/components/schemas/AlertEventAttributesLinksItemCategory'
        title:
          description: The display text of the link.
          type: string
        url:
          description: The URL of the link.
          type: string
      type: object
    AlertEventAttributesPriority:
      description: The priority of the alert.
      enum:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
      example: '5'
      type: string
      x-enum-varnames:
        - PRIORITY_ONE
        - PRIORITY_TWO
        - PRIORITY_THREE
        - PRIORITY_FOUR
        - PRIORITY_FIVE
    AlertEventAttributesStatus:
      description: The status of the alert.
      enum:
        - warn
        - error
        - ok
      example: error
      type: string
      x-enum-varnames:
        - WARN
        - ERROR
        - OK
    IncidentFieldAttributesSingleValueType:
      default: dropdown
      description: Type of the single value field definitions.
      enum:
        - dropdown
        - textbox
      example: dropdown
      type: string
      x-enum-varnames:
        - DROPDOWN
        - TEXTBOX
    IncidentFieldAttributesValueType:
      default: multiselect
      description: Type of the multiple value field definitions.
      enum:
        - multiselect
        - textarray
        - metrictag
        - autocomplete
      example: multiselect
      type: string
      x-enum-varnames:
        - MULTISELECT
        - TEXTARRAY
        - METRICTAG
        - AUTOCOMPLETE
    IncidentImpactsType:
      description: The incident impacts type.
      enum:
        - incident_impacts
      example: incident_impacts
      type: string
      x-enum-varnames:
        - INCIDENT_IMPACTS
    IncidentRespondersType:
      description: The incident responders type.
      enum:
        - incident_responders
      example: incident_responders
      type: string
      x-enum-varnames:
        - INCIDENT_RESPONDERS
    IncidentUserDefinedFieldType:
      description: The incident user defined fields type.
      enum:
        - user_defined_field
      example: user_defined_field
      type: string
      x-enum-varnames:
        - USER_DEFINED_FIELD
    IncidentTimelineCellMarkdownContentType:
      default: markdown
      description: Type of the Markdown timeline cell.
      enum:
        - markdown
      example: markdown
      type: string
      x-enum-varnames:
        - MARKDOWN
    IncidentTimelineCellMarkdownCreateAttributesContent:
      description: The Markdown timeline cell contents.
      properties:
        content:
          description: The Markdown content of the cell.
          example: An example timeline cell message.
          nullable: false
          type: string
      type: object
    IncidentSearchResponseFacetCount:
      description: Count of the facet value appearing in search results.
      example: 5
      format: int32
      maximum: 2147483647
      type: integer
    IncidentSearchResponseNumericFacetDataAggregates:
      description: Aggregate information for numeric incident data.
      properties:
        max:
          description: Maximum value of the numeric aggregates.
          example: 1234
          format: double
          nullable: true
          type: number
        min:
          description: Minimum value of the numeric aggregates.
          example: 20
          format: double
          nullable: true
          type: number
      type: object
    IncidentPostmortemType:
      default: incident_postmortems
      description: Incident postmortem resource type.
      enum:
        - incident_postmortems
      example: incident_postmortems
      type: string
      x-enum-varnames:
        - INCIDENT_POSTMORTEMS
    SlackIntegrationMetadataChannelItem:
      description: Item in the Slack integration metadata channel array.
      properties:
        channel_id:
          description: Slack channel ID.
          example: C0123456789
          type: string
        channel_name:
          description: Name of the Slack channel.
          example: '#example-channel-name'
          type: string
        redirect_url:
          description: URL redirecting to the Slack channel.
          example: https://slack.com/app_redirect?channel=C0123456789&team=T01234567
          type: string
        team_id:
          description: Slack team ID.
          example: T01234567
          type: string
      required:
        - channel_id
        - channel_name
        - redirect_url
      type: object
    JiraIntegrationMetadataIssuesItem:
      description: Item in the Jira integration metadata issue array.
      properties:
        account:
          description: URL of issue's Jira account.
          example: https://example.atlassian.net
          type: string
        issue_key:
          description: Jira issue's issue key.
          example: PROJ-123
          type: string
        issuetype_id:
          description: Jira issue's issue type.
          example: '1000'
          type: string
        project_key:
          description: Jira issue's project keys.
          example: PROJ
          type: string
        redirect_url:
          description: URL redirecting to the Jira issue.
          example: https://example.atlassian.net/browse/PROJ-123
          type: string
      required:
        - project_key
        - account
      type: object
    MSTeamsIntegrationMetadataTeamsItem:
      description: Item in the Microsoft Teams integration metadata teams array.
      properties:
        ms_channel_id:
          description: Microsoft Teams channel ID.
          example: 19:abc00abcdef00a0abcdef0abcdef0a@thread.tacv2
          type: string
        ms_channel_name:
          description: Microsoft Teams channel name.
          example: incident-0001-example
          type: string
        ms_tenant_id:
          description: Microsoft Teams tenant ID.
          example: 00000000-abcd-0005-0000-000000000000
          type: string
        redirect_url:
          description: URL redirecting to the Microsoft Teams channel.
          example: >-
            https://teams.microsoft.com/l/channel/19%3Aabc00abcdef00a0abcdef0abcdef0a%40thread.tacv2/conversations?groupId=12345678-abcd-dcba-abcd-1234567890ab&tenantId=00000000-abcd-0005-0000-000000000000
          type: string
      required:
        - ms_tenant_id
        - ms_channel_id
        - ms_channel_name
        - redirect_url
      type: object
    IncidentTodoAssigneeHandle:
      description: Assignee's @-handle.
      example: '@test.user@test.com'
      type: string
    IncidentTodoAnonymousAssignee:
      description: Anonymous assignee entity.
      properties:
        icon:
          description: URL for assignee's icon.
          example: https://a.slack-edge.com/80588/img/slackbot_48.png
          type: string
        id:
          description: Anonymous assignee's ID.
          example: USLACKBOT
          type: string
        name:
          description: Assignee's name.
          example: Slackbot
          type: string
        source:
          $ref: '#/components/schemas/IncidentTodoAnonymousAssigneeSource'
      required:
        - id
        - icon
        - name
        - source
      type: object
    EscalationPolicyStepTargetType:
      description: >-
        Specifies the type of escalation target (example `users`, `schedules`,
        or `teams`).
      enum:
        - users
        - schedules
        - teams
      example: users
      type: string
      x-enum-varnames:
        - USERS
        - SCHEDULES
        - TEAMS
    DataRelationshipsTeamsDataItemsType:
      default: teams
      description: Teams resource type.
      enum:
        - teams
      example: teams
      type: string
      x-enum-varnames:
        - TEAMS
    EscalationPolicyDataRelationshipsStepsDataItemsType:
      default: steps
      description: Indicates that the resource is of type `steps`.
      enum:
        - steps
      example: steps
      type: string
      x-enum-varnames:
        - STEPS
    EscalationTarget:
      description: Represents an escalation target, which can be a team, user, or schedule.
      oneOf:
        - $ref: '#/components/schemas/TeamTarget'
        - $ref: '#/components/schemas/UserTarget'
        - $ref: '#/components/schemas/ScheduleTarget'
    ScheduleRequestDataAttributesLayersItemsMembersItemsUser:
      description: >-
        Identifies the user participating in this layer as a single object with
        an `id`.
      properties:
        id:
          description: The user's ID.
          example: 00000000-aba1-0000-0000-000000000000
          type: string
      type: object
    Weekday:
      description: A day of the week.
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
      type: string
      x-enum-varnames:
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
        - SATURDAY
        - SUNDAY
    ScheduleDataRelationshipsLayersDataItemsType:
      default: layers
      description: Layers resource type.
      enum:
        - layers
      example: layers
      type: string
      x-enum-varnames:
        - LAYERS
    LayerRelationshipsMembersDataItems:
      description: >-
        Represents a single member object in a layer's `members` array,
        referencing

        a unique Datadog user ID.
      properties:
        id:
          description: The unique user ID of the layer member.
          example: 00000000-0000-0000-0000-000000000002
          type: string
        type:
          $ref: '#/components/schemas/LayerRelationshipsMembersDataItemsType'
      required:
        - type
        - id
      type: object
    ScheduleMemberRelationshipsUserData:
      description: >-
        Points to the user data associated with this schedule member, including
        an ID and type.
      properties:
        id:
          description: The user's unique identifier.
          example: 00000000-aba1-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/ScheduleMemberRelationshipsUserDataType'
      required:
        - type
        - id
      type: object
    ShiftDataRelationshipsUserDataType:
      default: users
      description: Indicates that the related resource is of type 'users'.
      enum:
        - users
      example: users
      type: string
      x-enum-varnames:
        - USERS
    TeamOnCallRespondersDataRelationshipsEscalationsDataItemsType:
      default: escalation_policy_steps
      description: >-
        Identifies the resource type for escalation policy steps linked to a
        team's on-call configuration.
      enum:
        - escalation_policy_steps
      example: escalation_policy_steps
      type: string
      x-enum-varnames:
        - ESCALATION_POLICY_STEPS
    TeamOnCallRespondersDataRelationshipsRespondersDataItemsType:
      default: users
      description: >-
        Identifies the resource type for individual user entities associated
        with on-call response.
      enum:
        - users
      example: users
      type: string
      x-enum-varnames:
        - USERS
    EscalationRelationshipsRespondersDataItems:
      description: Represents a user assigned to an escalation step.
      properties:
        id:
          description: Unique identifier of the user assigned to the escalation step.
          example: ''
          type: string
        type:
          $ref: '#/components/schemas/EscalationRelationshipsRespondersDataItemsType'
      required:
        - type
        - id
      type: object
    TeamRoutingRulesDataRelationshipsRulesDataItemsType:
      default: team_routing_rules
      description: Indicates that the resource is of type 'team_routing_rules'.
      enum:
        - team_routing_rules
      example: team_routing_rules
      type: string
      x-enum-varnames:
        - TEAM_ROUTING_RULES
    SendSlackMessageAction:
      description: Sends a message to a Slack channel.
      properties:
        channel:
          description: The channel ID.
          example: CHANNEL
          type: string
        type:
          $ref: '#/components/schemas/SendSlackMessageActionType'
        workspace:
          description: The workspace ID.
          example: WORKSPACE
          type: string
      required:
        - type
        - channel
        - workspace
      type: object
    SendTeamsMessageAction:
      description: Sends a message to a Microsoft Teams channel.
      properties:
        channel:
          description: The channel ID.
          example: CHANNEL
          type: string
        team:
          description: The team ID.
          example: TEAM
          type: string
        tenant:
          description: The tenant ID.
          example: TENANT
          type: string
        type:
          $ref: '#/components/schemas/SendTeamsMessageActionType'
      required:
        - type
        - channel
        - tenant
        - team
      type: object
    RoutingRuleRelationshipsPolicyData:
      description: >-
        Represents the policy data reference, containing the policy's ID and
        resource type.
      properties:
        id:
          description: Specifies the unique identifier of the policy.
          example: ''
          type: string
        type:
          $ref: '#/components/schemas/RoutingRuleRelationshipsPolicyDataType'
      required:
        - type
        - id
      type: object
    ServiceDefinitionV1Contact:
      description: Contact information about the service.
      properties:
        email:
          description: Service owner’s email.
          example: contact@datadoghq.com
          type: string
        slack:
          description: Service owner’s Slack channel.
          example: https://yourcompany.slack.com/archives/channel123
          type: string
      type: object
    ServiceDefinitionV1Resource:
      description: Service's external links.
      properties:
        name:
          description: Link name.
          example: Runbook
          type: string
        type:
          $ref: '#/components/schemas/ServiceDefinitionV1ResourceType'
        url:
          description: Link URL.
          example: https://my-runbook
          type: string
      required:
        - name
        - type
        - url
      type: object
    ServiceDefinitionV1Info:
      description: Basic information about a service.
      properties:
        dd-service:
          description: >-
            Unique identifier of the service. Must be unique across all services
            and is used to match with a service in Datadog.
          example: myservice
          type: string
        description:
          description: A short description of the service.
          example: A shopping cart service
          type: string
        display-name:
          description: A friendly name of the service.
          example: My Service
          type: string
        service-tier:
          description: Service tier.
          example: Tier 1
          type: string
      required:
        - dd-service
      type: object
    ServiceDefinitionV1Integrations:
      description: Third party integrations that Datadog supports.
      properties:
        pagerduty:
          $ref: '#/components/schemas/ServiceDefinitionV1Pagerduty'
      type: object
    ServiceDefinitionV1Org:
      description: Org related information about the service.
      properties:
        application:
          description: App feature this service supports.
          example: E-Commerce
          type: string
        team:
          description: Team that owns the service.
          example: my-team
          type: string
      type: object
    ServiceDefinitionV1Version:
      default: v1
      description: Schema version being used.
      enum:
        - v1
      example: v1
      type: string
      x-enum-varnames:
        - V1
    DowntimeScheduleRecurrenceDuration:
      description: >-
        The length of the downtime. Must begin with an integer and end with one
        of 'm', 'h', d', or 'w'.
      example: 123d
      type: string
    DowntimeScheduleRecurrenceRrule:
      description: >-
        The `RRULE` standard for defining recurring events.

        For example, to have a recurring event on the first day of each month,
        set the type to `rrule` and set the `FREQ` to `MONTHLY` and `BYMONTHDAY`
        to `1`.

        Most common `rrule` options from the [iCalendar
        Spec](https://tools.ietf.org/html/rfc5545) are supported.


        **Note**: Attributes specifying the duration in `RRULE` are not
        supported (for example, `DTSTART`, `DTEND`, `DURATION`).

        More examples available in this [downtime
        guide](https://docs.datadoghq.com/monitors/guide/suppress-alert-with-downtimes/?tab=api).
      example: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
      type: string
    OrganizationsType:
      default: orgs
      description: Organizations resource type.
      enum:
        - orgs
      example: orgs
      type: string
      x-enum-varnames:
        - ORGS
    RolesType:
      default: roles
      description: Roles type.
      enum:
        - roles
      example: roles
      type: string
      x-enum-varnames:
        - ROLES
    ChangeEventCustomAttributesAuthorType:
      description: Author's type.
      enum:
        - user
        - system
        - api
        - automation
      example: user
      type: string
      x-enum-varnames:
        - USER
        - SYSTEM
        - API
        - AUTOMATION
    ChangeEventCustomAttributesChangedResourceType:
      description: The type of the resource that was changed.
      enum:
        - feature_flag
        - configuration
      example: feature_flag
      type: string
      x-enum-varnames:
        - FEATURE_FLAG
        - CONFIGURATION
    ChangeEventCustomAttributesImpactedResourcesItemsType:
      description: The type of the impacted resource.
      enum:
        - service
      example: service
      type: string
      x-enum-varnames:
        - SERVICE
    AlertEventCustomAttributesLinksItems:
      additionalProperties: false
      description: A link.
      properties:
        category:
          $ref: '#/components/schemas/AlertEventCustomAttributesLinksItemsCategory'
        title:
          description: The display text of the link. Limited to 300 characters.
          example: Runbook Link
          maxLength: 300
          minLength: 1
          type: string
        url:
          description: The URL of the link. Limited to 2048 characters.
          example: https://app.datadoghq.com/runbook
          maxLength: 2048
          minLength: 1
          type: string
      required:
        - url
        - category
      type: object
    ChangeEventAttributesAuthorType:
      description: The type of the author.
      enum:
        - user
        - system
        - api
        - automation
      example: user
      type: string
      x-enum-varnames:
        - USER
        - SYSTEM
        - API
        - AUTOMATION
    ChangeEventAttributesChangedResourceType:
      description: The type of the changed resource.
      enum:
        - feature_flag
        - configuration
      example: feature_flag
      type: string
      x-enum-varnames:
        - FEATURE_FLAG
        - CONFIGURATION
    EventSystemAttributesCategory:
      description: Event category identifying the type of event.
      enum:
        - change
        - alert
      example: change
      type: string
      x-enum-varnames:
        - CHANGE
        - ALERT
    EventSystemAttributesIntegrationId:
      description: Integration ID sourced from integration manifests.
      enum:
        - custom-events
      example: custom-events
      type: string
      x-enum-varnames:
        - CUSTOM_EVENTS
    ChangeEventAttributesImpactedResourcesItemType:
      description: The type of the impacted resource.
      enum:
        - service
      type: string
      x-enum-varnames:
        - SERVICE
    AlertEventAttributesLinksItemCategory:
      description: The category of the link.
      enum:
        - runbook
        - documentation
        - dashboard
      type: string
      x-enum-varnames:
        - RUNBOOK
        - DOCUMENTATION
        - DASHBOARD
    IncidentTodoAnonymousAssigneeSource:
      default: slack
      description: The source of the anonymous assignee.
      enum:
        - slack
        - microsoft_teams
      example: slack
      type: string
      x-enum-varnames:
        - SLACK
        - MICROSOFT_TEAMS
    TeamTarget:
      description: >-
        Represents a team target for an escalation policy step, including the
        team's ID and resource type.
      properties:
        id:
          description: Specifies the unique identifier of the team resource.
          example: 00000000-aba1-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/TeamTargetType'
      required:
        - type
        - id
      type: object
    UserTarget:
      description: >-
        Represents a user target for an escalation policy step, including the
        user's ID and resource type.
      properties:
        id:
          description: Specifies the unique identifier of the user resource.
          example: 00000000-aba1-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/UserTargetType'
      required:
        - type
        - id
      type: object
    ScheduleTarget:
      description: >-
        Represents a schedule target for an escalation policy step, including
        its ID and resource type.
      properties:
        id:
          description: Specifies the unique identifier of the schedule resource.
          example: 00000000-aba1-0000-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/ScheduleTargetType'
      required:
        - type
        - id
      type: object
    LayerRelationshipsMembersDataItemsType:
      default: members
      description: Members resource type.
      enum:
        - members
      example: members
      type: string
      x-enum-varnames:
        - MEMBERS
    ScheduleMemberRelationshipsUserDataType:
      default: users
      description: Users resource type.
      enum:
        - users
      example: users
      type: string
      x-enum-varnames:
        - USERS
    EscalationRelationshipsRespondersDataItemsType:
      default: users
      description: >-
        Represents the resource type for users assigned as responders in an
        escalation step.
      enum:
        - users
      example: users
      type: string
      x-enum-varnames:
        - USERS
    SendSlackMessageActionType:
      default: send_slack_message
      description: Indicates that the action is a send Slack message action.
      enum:
        - send_slack_message
      example: send_slack_message
      type: string
      x-enum-varnames:
        - SEND_SLACK_MESSAGE
    SendTeamsMessageActionType:
      default: send_teams_message
      description: Indicates that the action is a send Microsoft Teams message action.
      enum:
        - send_teams_message
      example: send_teams_message
      type: string
      x-enum-varnames:
        - SEND_TEAMS_MESSAGE
    RoutingRuleRelationshipsPolicyDataType:
      default: policies
      description: Indicates that the resource is of type 'policies'.
      enum:
        - policies
      example: policies
      type: string
      x-enum-varnames:
        - POLICIES
    ServiceDefinitionV1ResourceType:
      description: Link type.
      enum:
        - doc
        - wiki
        - runbook
        - url
        - repo
        - dashboard
        - oncall
        - code
        - link
      example: runbook
      type: string
      x-enum-varnames:
        - DOC
        - WIKI
        - RUNBOOK
        - URL
        - REPO
        - DASHBOARD
        - ONCALL
        - CODE
        - LINK
    ServiceDefinitionV1Pagerduty:
      description: PagerDuty service URL for the service.
      example: https://my-org.pagerduty.com/service-directory/PMyService
      type: string
    AlertEventCustomAttributesLinksItemsCategory:
      description: The category of the link.
      enum:
        - runbook
        - documentation
        - dashboard
      example: runbook
      type: string
      x-enum-varnames:
        - RUNBOOK
        - DOCUMENTATION
        - DASHBOARD
    TeamTargetType:
      default: teams
      description: Indicates that the resource is of type `teams`.
      enum:
        - teams
      example: teams
      type: string
      x-enum-varnames:
        - TEAMS
    UserTargetType:
      default: users
      description: Indicates that the resource is of type `users`.
      enum:
        - users
      example: users
      type: string
      x-enum-varnames:
        - USERS
    ScheduleTargetType:
      default: schedules
      description: Indicates that the resource is of type `schedules`.
      enum:
        - schedules
      example: schedules
      type: string
      x-enum-varnames:
        - SCHEDULES
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    UnauthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Unauthorized
    ForbiddenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Forbidden
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Too many requests
    NotAuthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Authorized
    ConflictResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Conflict
  parameters:
    PageSize:
      description: Size for a given page. The maximum allowed value is 100.
      in: query
      name: page[size]
      required: false
      schema:
        default: 10
        example: 10
        format: int64
        type: integer
    PageNumber:
      description: Specific page number to return.
      in: query
      name: page[number]
      required: false
      schema:
        default: 0
        example: 0
        format: int64
        type: integer
    CaseSortableFieldParameter:
      description: Specify which field to sort
      in: query
      name: sort[field]
      required: false
      schema:
        $ref: '#/components/schemas/CaseSortableField'
    ProjectIDPathParameter:
      description: Project UUID
      example: e555e290-ed65-49bd-ae18-8acbfcf18db7
      in: path
      name: project_id
      required: true
      schema:
        type: string
    CaseIDPathParameter:
      description: Case's UUID or key
      example: f98a5a5b-e0ff-45d4-b2f5-afe6e74de504
      in: path
      name: case_id
      required: true
      schema:
        type: string
    PageOffset:
      description: Specific offset to use as the beginning of the returned page.
      in: query
      name: page[offset]
      required: false
      schema:
        default: 0
        example: 0
        format: int64
        type: integer
    SearchIssuesIncludeQueryParameter:
      description: >-
        Comma-separated list of relationship objects that should be included in
        the response.
      explode: false
      in: query
      name: include
      required: false
      schema:
        items:
          $ref: '#/components/schemas/SearchIssuesIncludeQueryParameterItem'
        type: array
    IssueIDPathParameter:
      description: The identifier of the issue.
      example: c1726a66-1f64-11ee-b338-da7ad0900002
      in: path
      name: issue_id
      required: true
      schema:
        type: string
    GetIssueIncludeQueryParameter:
      description: >-
        Comma-separated list of relationship objects that should be included in
        the response.
      explode: false
      in: query
      name: include
      required: false
      schema:
        items:
          $ref: '#/components/schemas/GetIssueIncludeQueryParameterItem'
        type: array
    IncidentIncludeQueryParameter:
      description: >-
        Specifies which types of related objects should be included in the
        response.
      explode: false
      in: query
      name: include
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentRelatedObject'
        type: array
    IncidentNotificationRuleIncludeQueryParameter:
      description: >
        Comma-separated list of resources to include. Supported values:
        `created_by_user`, `last_modified_by_user`, `incident_type`,
        `notification_template`
      explode: false
      in: query
      name: include
      required: false
      schema:
        example: created_by_user,incident_type,notification_template
        type: string
    IncidentNotificationRuleIDPathParameter:
      description: The ID of the notification rule.
      in: path
      name: id
      required: true
      schema:
        example: 00000000-0000-0000-0000-000000000001
        format: uuid
        type: string
    IncidentNotificationTemplateIncidentTypeFilterQueryParameter:
      description: Optional incident type ID filter.
      explode: false
      in: query
      name: filter[incident-type]
      required: false
      schema:
        example: 00000000-0000-0000-0000-000000000001
        format: uuid
        type: string
    IncidentNotificationTemplateIncludeQueryParameter:
      description: >
        Comma-separated list of relationships to include. Supported values:
        `created_by_user`, `last_modified_by_user`, `incident_type`
      explode: false
      in: query
      name: include
      required: false
      schema:
        example: created_by_user,incident_type
        type: string
    IncidentNotificationTemplateIDPathParameter:
      description: The ID of the notification template.
      in: path
      name: id
      required: true
      schema:
        example: 00000000-0000-0000-0000-000000000001
        format: uuid
        type: string
    IncidentTypeIncludeDeletedParameter:
      description: Include deleted incident types in the response.
      in: query
      name: include_deleted
      schema:
        default: false
        type: boolean
    IncidentTypeIDPathParameter:
      description: The UUID of the incident type.
      in: path
      name: incident_type_id
      required: true
      schema:
        type: string
    IncidentSearchIncludeQueryParameter:
      description: >-
        Specifies which types of related objects should be included in the
        response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentSearchQueryQueryParameter:
      description: >-
        Specifies which incidents should be returned. The query can contain any
        number of incident facets

        joined by `ANDs`, along with multiple values for each of those facets
        joined by `OR`s. For

        example: `state:active AND severity:(SEV-2 OR SEV-1)`.
      explode: false
      in: query
      name: query
      required: true
      schema:
        type: string
    IncidentSearchSortQueryParameter:
      description: Specifies the order of returned incidents.
      explode: false
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/IncidentSearchSortOrder'
    IncidentIDPathParameter:
      description: The UUID of the incident.
      in: path
      name: incident_id
      required: true
      schema:
        type: string
    IncidentAttachmentIncludeQueryParameter:
      description: Specifies which types of related objects are included in the response.
      explode: false
      in: query
      name: include
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentAttachmentRelatedObject'
        type: array
    IncidentAttachmentFilterQueryParameter:
      description: Specifies which types of attachments are included in the response.
      explode: false
      in: query
      name: filter[attachment_type]
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentAttachmentAttachmentType'
        type: array
    IncidentIntegrationMetadataIDPathParameter:
      description: The UUID of the incident integration metadata.
      in: path
      name: integration_metadata_id
      required: true
      schema:
        type: string
    IncidentTodoIDPathParameter:
      description: The UUID of the incident todo.
      in: path
      name: todo_id
      required: true
      schema:
        type: string
    IncidentServiceIncludeQueryParameter:
      description: >-
        Specifies which types of related objects should be included in the
        response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentServiceSearchQueryParameter:
      description: A search query that filters services by name.
      in: query
      name: filter
      required: false
      schema:
        example: ExampleServiceName
        type: string
    SchemaVersion:
      description: The schema version desired in the response.
      in: query
      name: schema_version
      required: false
      schema:
        $ref: '#/components/schemas/ServiceDefinitionSchemaVersions'
    ServiceName:
      description: The name of the service.
      in: path
      name: service_name
      required: true
      schema:
        example: my-service
        type: string
    IncidentServiceIDPathParameter:
      description: The ID of the incident service.
      in: path
      name: service_id
      required: true
      schema:
        type: string
    ReportID:
      description: The ID of the report job.
      in: path
      name: report_id
      required: true
      schema:
        type: string
    IncidentTeamIncludeQueryParameter:
      description: >-
        Specifies which types of related objects should be included in the
        response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentTeamSearchQueryParameter:
      description: A search query that filters teams by name.
      in: query
      name: filter
      required: false
      schema:
        example: ExampleTeamName
        type: string
    IncidentTeamIDPathParameter:
      description: The ID of the incident team.
      in: path
      name: team_id
      required: true
      schema:
        type: string
  x-stackQL-resources:
    cases:
      id: datadog.service_management.cases
      name: cases
      title: Cases
      methods:
        search_cases:
          operation:
            $ref: '#/paths/~1api~1v2~1cases/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_case:
          operation:
            $ref: '#/paths/~1api~1v2~1cases/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_case:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1{case_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        archive_case:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1{case_id}~1archive/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        assign_case:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1{case_id}~1assign/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_attributes:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1{case_id}~1attributes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_priority:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1{case_id}~1priority/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_status:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1{case_id}~1status/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        unarchive_case:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1{case_id}~1unarchive/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        unassign_case:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1{case_id}~1unassign/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/cases/methods/get_case'
        insert:
          - $ref: '#/components/x-stackQL-resources/cases/methods/create_case'
        update: []
        delete: []
        replace: []
    projects:
      id: datadog.service_management.projects
      name: projects
      title: Projects
      methods:
        get_projects:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1projects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_project:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1projects/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_project:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1projects~1{project_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_project:
          operation:
            $ref: '#/paths/~1api~1v2~1cases~1projects~1{project_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/projects/methods/get_project'
          - $ref: '#/components/x-stackQL-resources/projects/methods/get_projects'
        insert:
          - $ref: '#/components/x-stackQL-resources/projects/methods/create_project'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/projects/methods/delete_project'
        replace: []
    downtimes:
      id: datadog.service_management.downtimes
      name: downtimes
      title: Downtimes
      methods:
        list_downtimes:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_downtime:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel_downtime:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime~1{downtime_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_downtime:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime~1{downtime_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_downtime:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime~1{downtime_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/downtimes/methods/get_downtime'
          - $ref: '#/components/x-stackQL-resources/downtimes/methods/list_downtimes'
        insert:
          - $ref: '#/components/x-stackQL-resources/downtimes/methods/create_downtime'
        update:
          - $ref: '#/components/x-stackQL-resources/downtimes/methods/update_downtime'
        delete:
          - $ref: '#/components/x-stackQL-resources/downtimes/methods/cancel_downtime'
        replace: []
    issues:
      id: datadog.service_management.issues
      name: issues
      title: Issues
      methods:
        search_issues:
          operation:
            $ref: '#/paths/~1api~1v2~1error-tracking~1issues~1search/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_issue:
          operation:
            $ref: '#/paths/~1api~1v2~1error-tracking~1issues~1{issue_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_issue_assignee:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1error-tracking~1issues~1{issue_id}~1assignee/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_issue_state:
          operation:
            $ref: '#/paths/~1api~1v2~1error-tracking~1issues~1{issue_id}~1state/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/issues/methods/get_issue'
        insert:
          - $ref: '#/components/x-stackQL-resources/issues/methods/search_issues'
        update: []
        delete: []
        replace: []
    events:
      id: datadog.service_management.events
      name: events
      title: Events
      methods:
        list_events:
          operation:
            $ref: '#/paths/~1api~1v2~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_event:
          operation:
            $ref: '#/paths/~1api~1v2~1events/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        search_events:
          operation:
            $ref: '#/paths/~1api~1v2~1events~1search/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_event:
          operation:
            $ref: '#/paths/~1api~1v2~1events~1{event_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/events/methods/get_event'
          - $ref: '#/components/x-stackQL-resources/events/methods/list_events'
        insert:
          - $ref: '#/components/x-stackQL-resources/events/methods/create_event'
          - $ref: '#/components/x-stackQL-resources/events/methods/search_events'
        update: []
        delete: []
        replace: []
    incidents:
      id: datadog.service_management.incidents
      name: incidents
      title: Incidents
      methods:
        list_incidents:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_incident:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        search_incidents:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1search/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        delete_incident:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1{incident_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_incident:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1{incident_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_incident:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1{incident_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/incidents/methods/get_incident'
          - $ref: '#/components/x-stackQL-resources/incidents/methods/list_incidents'
          - $ref: >-
              #/components/x-stackQL-resources/incidents/methods/search_incidents
        insert:
          - $ref: '#/components/x-stackQL-resources/incidents/methods/create_incident'
        update:
          - $ref: '#/components/x-stackQL-resources/incidents/methods/update_incident'
        delete:
          - $ref: '#/components/x-stackQL-resources/incidents/methods/delete_incident'
        replace: []
    incident_notification_rules:
      id: datadog.service_management.incident_notification_rules
      name: incident_notification_rules
      title: Incident Notification Rules
      methods:
        list_incident_notification_rules:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1config~1notification-rules/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_incident_notification_rule:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1config~1notification-rules/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_incident_notification_rule:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1config~1notification-rules~1{id}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_incident_notification_rule:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1config~1notification-rules~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_incident_notification_rule:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1config~1notification-rules~1{id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/incident_notification_rules/methods/get_incident_notification_rule
          - $ref: >-
              #/components/x-stackQL-resources/incident_notification_rules/methods/list_incident_notification_rules
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/incident_notification_rules/methods/create_incident_notification_rule
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/incident_notification_rules/methods/delete_incident_notification_rule
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/incident_notification_rules/methods/update_incident_notification_rule
    incident_notification_templates:
      id: datadog.service_management.incident_notification_templates
      name: incident_notification_templates
      title: Incident Notification Templates
      methods:
        list_incident_notification_templates:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1config~1notification-templates/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_incident_notification_template:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1config~1notification-templates/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_incident_notification_template:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1config~1notification-templates~1{id}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_incident_notification_template:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1config~1notification-templates~1{id}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_incident_notification_template:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1config~1notification-templates~1{id}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/incident_notification_templates/methods/get_incident_notification_template
          - $ref: >-
              #/components/x-stackQL-resources/incident_notification_templates/methods/list_incident_notification_templates
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/incident_notification_templates/methods/create_incident_notification_template
        update:
          - $ref: >-
              #/components/x-stackQL-resources/incident_notification_templates/methods/update_incident_notification_template
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/incident_notification_templates/methods/delete_incident_notification_template
        replace: []
    incident_types:
      id: datadog.service_management.incident_types
      name: incident_types
      title: Incident Types
      methods:
        list_incident_types:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1config~1types/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_incident_type:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1config~1types/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_incident_type:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1config~1types~1{incident_type_id}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_incident_type:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1config~1types~1{incident_type_id}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_incident_type:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1config~1types~1{incident_type_id}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/incident_types/methods/get_incident_type
          - $ref: >-
              #/components/x-stackQL-resources/incident_types/methods/list_incident_types
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/incident_types/methods/create_incident_type
        update:
          - $ref: >-
              #/components/x-stackQL-resources/incident_types/methods/update_incident_type
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/incident_types/methods/delete_incident_type
        replace: []
    incident_attachments:
      id: datadog.service_management.incident_attachments
      name: incident_attachments
      title: Incident Attachments
      methods:
        list_incident_attachments:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1{incident_id}~1attachments/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_incident_attachments:
          operation:
            $ref: '#/paths/~1api~1v2~1incidents~1{incident_id}~1attachments/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/incident_attachments/methods/list_incident_attachments
        insert: []
        update:
          - $ref: >-
              #/components/x-stackQL-resources/incident_attachments/methods/update_incident_attachments
        delete: []
        replace: []
    incident_integrations:
      id: datadog.service_management.incident_integrations
      name: incident_integrations
      title: Incident Integrations
      methods:
        list_incident_integrations:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1{incident_id}~1relationships~1integrations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_incident_integration:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1{incident_id}~1relationships~1integrations/post
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_incident_integration:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1{incident_id}~1relationships~1integrations~1{integration_metadata_id}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_incident_integration:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1{incident_id}~1relationships~1integrations~1{integration_metadata_id}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_incident_integration:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1{incident_id}~1relationships~1integrations~1{integration_metadata_id}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/incident_integrations/methods/get_incident_integration
          - $ref: >-
              #/components/x-stackQL-resources/incident_integrations/methods/list_incident_integrations
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/incident_integrations/methods/create_incident_integration
        update:
          - $ref: >-
              #/components/x-stackQL-resources/incident_integrations/methods/update_incident_integration
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/incident_integrations/methods/delete_incident_integration
        replace: []
    incident_todos:
      id: datadog.service_management.incident_todos
      name: incident_todos
      title: Incident Todos
      methods:
        list_incident_todos:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1{incident_id}~1relationships~1todos/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_incident_todo:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1{incident_id}~1relationships~1todos/post
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_incident_todo:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1{incident_id}~1relationships~1todos~1{todo_id}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_incident_todo:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1{incident_id}~1relationships~1todos~1{todo_id}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_incident_todo:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1incidents~1{incident_id}~1relationships~1todos~1{todo_id}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/incident_todos/methods/get_incident_todo
          - $ref: >-
              #/components/x-stackQL-resources/incident_todos/methods/list_incident_todos
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/incident_todos/methods/create_incident_todo
        update:
          - $ref: >-
              #/components/x-stackQL-resources/incident_todos/methods/update_incident_todo
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/incident_todos/methods/delete_incident_todo
        replace: []
    on_call_escalation_policies:
      id: datadog.service_management.on_call_escalation_policies
      name: on_call_escalation_policies
      title: On Call Escalation Policies
      methods:
        create_on_call_escalation_policy:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1escalation-policies/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_on_call_escalation_policy:
          operation:
            $ref: >-
              #/paths/~1api~1v2~1on-call~1escalation-policies~1{policy_id}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_on_call_escalation_policy:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1escalation-policies~1{policy_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_on_call_escalation_policy:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1escalation-policies~1{policy_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_escalation_policies/methods/get_on_call_escalation_policy
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_escalation_policies/methods/create_on_call_escalation_policy
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_escalation_policies/methods/delete_on_call_escalation_policy
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_escalation_policies/methods/update_on_call_escalation_policy
    on_call_page:
      id: datadog.service_management.on_call_page
      name: on_call_page
      title: On Call Page
      methods:
        create_on_call_page:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1pages/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        acknowledge_on_call_page:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1pages~1{page_id}~1acknowledge/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        escalate_on_call_page:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1pages~1{page_id}~1escalate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        resolve_on_call_page:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1pages~1{page_id}~1resolve/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select: []
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_page/methods/create_on_call_page
        update: []
        delete: []
        replace: []
    on_call_schedule:
      id: datadog.service_management.on_call_schedule
      name: on_call_schedule
      title: On Call Schedule
      methods:
        create_on_call_schedule:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1schedules/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_on_call_schedule:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1schedules~1{schedule_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_on_call_schedule:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1schedules~1{schedule_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_on_call_schedule:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1schedules~1{schedule_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_schedule/methods/get_on_call_schedule
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_schedule/methods/create_on_call_schedule
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_schedule/methods/delete_on_call_schedule
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_schedule/methods/update_on_call_schedule
    on_call_user_schedule:
      id: datadog.service_management.on_call_user_schedule
      name: on_call_user_schedule
      title: On Call User Schedule
      methods:
        get_schedule_on_call_user:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1schedules~1{schedule_id}~1on-call/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_user_schedule/methods/get_schedule_on_call_user
        insert: []
        update: []
        delete: []
        replace: []
    team_on_call_users:
      id: datadog.service_management.team_on_call_users
      name: team_on_call_users
      title: Team On Call Users
      methods:
        get_team_on_call_users:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1teams~1{team_id}~1on-call/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/team_on_call_users/methods/get_team_on_call_users
        insert: []
        update: []
        delete: []
        replace: []
    on_call_team_routing_rules:
      id: datadog.service_management.on_call_team_routing_rules
      name: on_call_team_routing_rules
      title: On Call Team Routing Rules
      methods:
        get_on_call_team_routing_rules:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1teams~1{team_id}~1routing-rules/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        set_on_call_team_routing_rules:
          operation:
            $ref: '#/paths/~1api~1v2~1on-call~1teams~1{team_id}~1routing-rules/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_team_routing_rules/methods/get_on_call_team_routing_rules
        insert: []
        update: []
        delete: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/on_call_team_routing_rules/methods/set_on_call_team_routing_rules
    incident_services:
      id: datadog.service_management.incident_services
      name: incident_services
      title: Incident Services
      methods:
        list_incident_services:
          operation:
            $ref: '#/paths/~1api~1v2~1services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_incident_service:
          operation:
            $ref: '#/paths/~1api~1v2~1services/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_incident_service:
          operation:
            $ref: '#/paths/~1api~1v2~1services~1{service_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_incident_service:
          operation:
            $ref: '#/paths/~1api~1v2~1services~1{service_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_incident_service:
          operation:
            $ref: '#/paths/~1api~1v2~1services~1{service_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/incident_services/methods/get_incident_service
          - $ref: >-
              #/components/x-stackQL-resources/incident_services/methods/list_incident_services
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/incident_services/methods/create_incident_service
        update:
          - $ref: >-
              #/components/x-stackQL-resources/incident_services/methods/update_incident_service
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/incident_services/methods/delete_incident_service
        replace: []
    service_definitions:
      id: datadog.service_management.service_definitions
      name: service_definitions
      title: Service Definitions
      methods:
        list_service_definitions:
          operation:
            $ref: '#/paths/~1api~1v2~1services~1definitions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_or_update_service_definitions:
          operation:
            $ref: '#/paths/~1api~1v2~1services~1definitions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_service_definition:
          operation:
            $ref: '#/paths/~1api~1v2~1services~1definitions~1{service_name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_service_definition:
          operation:
            $ref: '#/paths/~1api~1v2~1services~1definitions~1{service_name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/service_definitions/methods/get_service_definition
          - $ref: >-
              #/components/x-stackQL-resources/service_definitions/methods/list_service_definitions
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/service_definitions/methods/create_or_update_service_definitions
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/service_definitions/methods/delete_service_definition
        replace: []
    slo_report_job:
      id: datadog.service_management.slo_report_job
      name: slo_report_job
      title: Slo Report Job
      methods:
        create_sloreport_job:
          operation:
            $ref: '#/paths/~1api~1v2~1slo~1report/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_sloreport:
          operation:
            $ref: '#/paths/~1api~1v2~1slo~1report~1{report_id}~1download/get'
          response:
            mediaType: text/csv
            openAPIDocKey: '200'
        get_sloreport_job_status:
          operation:
            $ref: '#/paths/~1api~1v2~1slo~1report~1{report_id}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/slo_report_job/methods/get_sloreport_job_status
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/slo_report_job/methods/create_sloreport_job
        update: []
        delete: []
        replace: []
    incident_teams:
      id: datadog.service_management.incident_teams
      name: incident_teams
      title: Incident Teams
      methods:
        list_incident_teams:
          operation:
            $ref: '#/paths/~1api~1v2~1teams/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        create_incident_team:
          operation:
            $ref: '#/paths/~1api~1v2~1teams/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_incident_team:
          operation:
            $ref: '#/paths/~1api~1v2~1teams~1{team_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_incident_team:
          operation:
            $ref: '#/paths/~1api~1v2~1teams~1{team_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        update_incident_team:
          operation:
            $ref: '#/paths/~1api~1v2~1teams~1{team_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/incident_teams/methods/get_incident_team
          - $ref: >-
              #/components/x-stackQL-resources/incident_teams/methods/list_incident_teams
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/incident_teams/methods/create_incident_team
        update:
          - $ref: >-
              #/components/x-stackQL-resources/incident_teams/methods/update_incident_team
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/incident_teams/methods/delete_incident_team
        replace: []
servers:
  - url: >-
      https://{region:^(?:[^\:/]+(?:\:[0-9]+)?|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(?:\:[0-9]+)?)$}/
    variables:
      region:
        default: datadoghq.com
