openapi: 3.0.0
servers:
  - url: 'https://api.datadoghq.com'
    description: Datadog API
info:
  contact:
    email: support@datadoghq.com
    name: Datadog Support
    url: 'https://www.datadoghq.com/support/'
  version: '1.0'
  title: Datadog API V2 Collection - downtimes
  description: |-
    **Note**: Downtime V2 is currently in private beta. To request access, contact [Datadog support](https://docs.datadoghq.com/help/).

    [Downtiming](https://docs.datadoghq.com/monitors/notify/downtimes) gives
    you greater control over monitor notifications by allowing you to globally exclude
    scopes from alerting. Downtime settings, which can be scheduled with start and
    end times, prevent all alerting related to specified Datadog tags.
security:
  - apiKeyAuth: []
    appKeyAuth: []
tags:
  - description: 'Manage configuration of [APM retention filters](https://app.datadoghq.com/apm/traces/retention-filters) for your organization. You need an API and application key with Admin rights to interact with this endpoint.'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/tracing/trace_pipeline/trace_retention/'
    name: APM Retention Filters
  - description: Search your Audit Logs events over HTTP.
    name: Audit
  - description: |-
      [AuthN Mappings API](https://docs.datadoghq.com/account_management/authn_mapping/?tab=example)
      is used to automatically map group of users to roles in Datadog using attributes
      sent from Identity Providers.
    name: AuthN Mappings
  - description: Search or aggregate your CI Visibility pipeline events and send them to your Datadog site over HTTP.
    name: CI Visibility Pipelines
  - description: Search or aggregate your CI Visibility test events over HTTP.
    name: CI Visibility Tests
  - description: Workload activity security rules for generating events using the Datadog security Agent.
    name: Cloud Workload Security
  - description: Configure your Datadog Cloudflare integration directly through the Datadog API.
    name: Cloudflare Integration
  - description: Configure your Datadog Confluent Cloud integration directly through the Datadog API.
    name: Confluent Cloud
  - description: The Container Images API allows you to query Container Image data for your organization.
    name: Container Images
  - description: The Containers API allows you to query container data for your organization.
    name: Containers
  - description: Send events for DORA Metrics to measure and improve software delivery.
    name: DORA Metrics
  - description: |-
      Interact with your dashboard lists through the API to
      organize, find, and share all of your dashboards with your team and
      organization.
    name: Dashboard Lists
  - description: |-
      **Note**: Downtime V2 is currently in private beta. To request access, contact [Datadog support](https://docs.datadoghq.com/help/).

      [Downtiming](https://docs.datadoghq.com/monitors/notify/downtimes) gives
      you greater control over monitor notifications by allowing you to globally exclude
      scopes from alerting. Downtime settings, which can be scheduled with start and
      end times, prevent all alerting related to specified Datadog tags.
    name: Downtimes
  - description: |-
      The events service allows you to programmatically post events to the event stream
      and fetch events from the event stream. Events are limited to 4000 characters.
      If an event is sent out with a message containing more than 4000 characters, only the
      first 4000 characters are displayed.
    name: Events
  - description: Configure your Datadog Fastly integration directly through the Datadog API.
    name: Fastly Integration
  - description: |-
      Configure your Datadog-Google Cloud Platform (GCP) integration directly
      through the Datadog API. Read more about the [Datadog-Google Cloud Platform integration](https://docs.datadoghq.com/integrations/google_cloud_platform).
    externalDocs:
      url: 'https://docs.datadoghq.com/integrations/google_cloud_platform'
    name: GCP Integration
  - description: |-
      The IP allowlist API is used to manage the IP addresses that
      can access the Datadog API and web UI. It does not block
      access to intake APIs or public dashboards.

      This is an enterprise-only feature. Request access by
      contacting Datadog support.
    name: IP Allowlist
  - description: 'Create, update, delete, and retrieve services which can be associated with incidents.'
    name: Incident Services
  - description: 'The Incident Teams endpoints are deprecated. See the [Teams API endpoints](https://docs.datadoghq.com/api/latest/teams/) to create, update, delete, and retrieve teams which can be associated with incidents.'
    name: Incident Teams
  - description: Manage incident response.
    name: Incidents
  - description: |-
      Manage your Datadog API and application keys. You need an API key and
      an application key for a user with the required permissions to interact
      with these endpoints. The full list of API and application keys can be
      seen on your [Datadog API page](https://app.datadoghq.com/account/settings#api).
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/account_management/api-app-keys/'
    name: Key Management
  - description: Search your logs and send them to your Datadog platform over HTTP.
    name: Logs
  - description: |-
      Archives forward all the logs ingested to a cloud storage system.

      See the [Archives Page](https://app.datadoghq.com/logs/pipelines/archives)
      for a list of the archives currently configured in web UI.
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/logs/archives/'
    name: Logs Archives
  - description: 'Manage configuration of [log-based metrics](https://app.datadoghq.com/logs/pipelines/generate-metrics) for your organization.'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/logs/logs_to_metrics/'
    name: Logs Metrics
  - description: |-
      The metrics endpoint allows you to:

      - Post metrics data so it can be graphed on Datadogâ€™s dashboards
      - Query metrics from any time period (timeseries and scalar)
      - Modify tag configurations for metrics
      - View tags and volumes for metrics

      **Note**: A graph can only contain a set number of points
      and as the timeframe over which a metric is viewed increases,
      aggregation between points occurs to stay below that set number.

      The Post, Patch, and Delete `manage_tags` API methods can only be performed by
      a user who has the `Manage Tags for Metrics` permission.
    name: Metrics
  - description: |-
      [Monitors](https://docs.datadoghq.com/monitors) allow you to watch a metric or check that you care about and
      notifies your team when a defined threshold has exceeded.

      For more information, see [Creating Monitors](https://docs.datadoghq.com/monitors/create/types/) and
      [Tag Policies](https://docs.datadoghq.com/monitors/settings/).
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/monitors/create/types/'
    name: Monitors
  - description: Configure your Datadog Okta integration directly through the Datadog API.
    name: Okta Integration
  - description: |-
      Configure your [Datadog Opsgenie integration](https://docs.datadoghq.com/integrations/opsgenie/)
      directly through the Datadog API.
    externalDocs:
      url: 'https://docs.datadoghq.com/api/latest/opsgenie-integration'
    name: Opsgenie Integration
  - description: 'Create, edit, and manage your organizations. Read more about [multi-org accounts](https://docs.datadoghq.com/account_management/multi_organization).'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/account_management/multi_organization'
    name: Organizations
  - description: |-
      The powerpack endpoints allow you to:

      - Get a powerpack
      - Create a powerpack
      - Delete a powerpack
      - Get a list of all powerpacks

      The Patch and Delete API methods can only be performed on a powerpack by
      a user who has the powerpack create permission for that specific powerpack.
    name: Powerpack
  - description: The processes API allows you to query processes data for your organization.
    name: Processes
  - description: Search or aggregate your RUM events over HTTP.
    name: RUM
  - description: |-
      A restriction policy defines the access control rules for a resource, mapping a set of relations
      (such as editor and viewer) to a set of allowed principals (such as roles, teams, or users).
      The restriction policy determines who is authorized to perform what actions on the resource.
    name: Restriction Policies
  - description: |-
      The Roles API is used to create and manage Datadog roles, what
      [global permissions](https://docs.datadoghq.com/account_management/rbac/)
      they grant, and which users belong to them.

      Permissions related to specific account assets can be granted to roles
      in the Datadog application without using this API. For example, granting
      read access on a specific log index to a role can be done in Datadog from the
      [Pipelines page](https://app.datadoghq.com/logs/pipelines).
    name: Roles
  - description: |-
      Detection rules for generating signals and listing of generated
      signals.
    name: Security Monitoring
  - description: 'Create, update, delete, and retrieve sensitive data scanner groups and rules.'
    name: Sensitive Data Scanner
  - description: 'Create, edit, and disable service accounts.'
    name: Service Accounts
  - description: 'API to create, update, retrieve and delete service definitions.'
    externalDocs:
      url: 'https://docs.datadoghq.com/tracing/service_catalog/'
    name: Service Definition
  - description: |-
      API to create, update scorecard rules and outcomes.

      This feature is currently in BETA. If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).
    name: Service Scorecards
  - description: Search and aggregate your spans from your Datadog platform over HTTP.
    name: Spans
  - description: 'Manage configuration of [span-based metrics](https://app.datadoghq.com/apm/traces/generate-metrics) for your organization.'
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/tracing/metrics/metrics_namespace/'
    name: Spans Metrics
  - description: |-
      Datadog Synthetics uses simulated user requests and browser rendering to help you ensure uptime,
      identify regional issues, and track your application performance. Datadog Synthetics tests come in
      two different flavors, [API tests](https://docs.datadoghq.com/synthetics/api_tests/)
      and [browser tests](https://docs.datadoghq.com/synthetics/browser_tests). You can use Datadogâ€™s API to
      manage both test types programmatically.

      For more information about Synthetics, see the [Synthetics overview](https://docs.datadoghq.com/synthetics/).
    name: Synthetics
  - description: View and manage teams within Datadog.
    name: Teams
  - description: |-
      The usage metering API allows you to get hourly, daily, and
      monthly usage across multiple facets of Datadog.
      This API is available to all Pro and Enterprise customers.
      Usage is only accessible for [parent-level organizations](https://docs.datadoghq.com/account_management/multi_organization/).

      **Note**: Usage data is delayed by up to 72 hours from when it was incurred.
      It is retained for 15 months.

      You can retrieve up to 24 hours of hourly usage data for multiple organizations,
      and up to two months of hourly usage data for a single organization in one request.
    externalDocs:
      description: Find out more at
      url: 'https://docs.datadoghq.com/account_management/billing/usage_details/'
    name: Usage Metering
  - description: 'Create, edit, and disable users.'
    externalDocs:
      url: 'https://docs.datadoghq.com/account_management/users'
    name: Users
components:
  schemas:
    ListDowntimesResponse:
      description: Response for retrieving all downtimes.
      properties:
        data:
          description: An array of downtimes.
          items:
            $ref: '#/components/schemas/DowntimeResponseData'
          type: array
        included:
          description: Array of objects related to the downtimes.
          items:
            $ref: '#/components/schemas/DowntimeResponseIncludedItem'
          type: array
        meta:
          $ref: '#/components/schemas/DowntimeMeta'
      type: object
    APIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          items:
            description: A list of items.
            example: Bad Request
            type: string
          type: array
      required:
        - errors
      type: object
    DowntimeResponseData:
      description: Downtime data.
      properties:
        attributes:
          $ref: '#/components/schemas/DowntimeResponseAttributes'
        id:
          description: The downtime ID.
          example: 00000000-0000-1234-0000-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/DowntimeRelationships'
        type:
          $ref: '#/components/schemas/DowntimeResourceType'
      type: object
    DowntimeResponseIncludedItem:
      description: An object related to a downtime.
      oneOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/DowntimeMonitorIncludedItem'
    DowntimeMeta:
      description: Pagination metadata returned by the API.
      properties:
        page:
          $ref: '#/components/schemas/DowntimeMetaPage'
      type: object
    APIKeysSort:
      default: name
      description: Sorting options
      enum:
        - created_at
        - '-created_at'
        - last4
        - '-last4'
        - modified_at
        - '-modified_at'
        - name
        - '-name'
      type: string
      x-enum-varnames:
        - CREATED_AT_ASCENDING
        - CREATED_AT_DESCENDING
        - LAST4_ASCENDING
        - LAST4_DESCENDING
        - MODIFIED_AT_ASCENDING
        - MODIFIED_AT_DESCENDING
        - NAME_ASCENDING
        - NAME_DESCENDING
    ApplicationKeysSort:
      default: name
      description: Sorting options
      enum:
        - created_at
        - '-created_at'
        - last4
        - '-last4'
        - name
        - '-name'
      type: string
      x-enum-varnames:
        - CREATED_AT_ASCENDING
        - CREATED_AT_DESCENDING
        - LAST4_ASCENDING
        - LAST4_DESCENDING
        - NAME_ASCENDING
        - NAME_DESCENDING
    IncidentAttachmentAttachmentType:
      description: The type of the incident attachment attributes.
      enum:
        - link
        - postmortem
      example: link
      type: string
      x-enum-varnames:
        - LINK
        - POSTMORTEM
    IncidentAttachmentRelatedObject:
      description: The object related to an incident attachment.
      enum:
        - users
      type: string
      x-enum-varnames:
        - USERS
    IncidentRelatedObject:
      description: Object related to an incident.
      enum:
        - users
        - attachments
      type: string
      x-enum-varnames:
        - USERS
        - ATTACHMENTS
    IncidentSearchSortOrder:
      description: The ways searched incidents can be sorted.
      enum:
        - created
        - '-created'
      type: string
      x-enum-varnames:
        - CREATED_ASCENDING
        - CREATED_DESCENDING
    ServiceDefinitionSchemaVersions:
      description: Schema versions
      enum:
        - v1
        - v2
        - v2.1
        - v2.2
      type: string
      x-enum-varnames:
        - V1
        - V2
        - V2_1
        - V2_2
    DowntimeResponseAttributes:
      description: Downtime details.
      properties:
        canceled:
          description: Time that the downtime was canceled.
          example: '2020-01-02T03:04:05.282979+0000'
          format: date-time
          nullable: true
          type: string
        created:
          description: Creation time of the downtime.
          example: '2020-01-02T03:04:05.282979+0000'
          format: date-time
          type: string
        display_timezone:
          $ref: '#/components/schemas/DowntimeDisplayTimezone'
        message:
          $ref: '#/components/schemas/DowntimeMessage'
        modified:
          description: Time that the downtime was last modified.
          example: '2020-01-02T03:04:05.282979+0000'
          format: date-time
          type: string
        monitor_identifier:
          $ref: '#/components/schemas/DowntimeMonitorIdentifier'
        mute_first_recovery_notification:
          $ref: '#/components/schemas/DowntimeMuteFirstRecoveryNotification'
        notify_end_states:
          $ref: '#/components/schemas/DowntimeNotifyEndStates'
        notify_end_types:
          $ref: '#/components/schemas/DowntimeNotifyEndTypes'
        schedule:
          $ref: '#/components/schemas/DowntimeScheduleResponse'
        scope:
          $ref: '#/components/schemas/DowntimeScope'
        status:
          $ref: '#/components/schemas/DowntimeStatus'
      type: object
    DowntimeRelationships:
      description: All relationships associated with downtime.
      properties:
        created_by:
          $ref: '#/components/schemas/DowntimeRelationshipsCreatedBy'
        monitor:
          $ref: '#/components/schemas/DowntimeRelationshipsMonitor'
      type: object
    DowntimeResourceType:
      default: downtime
      description: Downtime resource type.
      enum:
        - downtime
      example: downtime
      type: string
      x-enum-varnames:
        - DOWNTIME
    User:
      description: User object returned by the API.
      properties:
        attributes:
          $ref: '#/components/schemas/UserAttributes'
        id:
          description: ID of the user.
          type: string
        relationships:
          $ref: '#/components/schemas/UserResponseRelationships'
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    DowntimeMonitorIncludedItem:
      description: Information about the monitor identified by the downtime.
      properties:
        attributes:
          $ref: '#/components/schemas/DowntimeMonitorIncludedAttributes'
        id:
          description: ID of the monitor identified by the downtime.
          example: 12345
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/DowntimeIncludedMonitorType'
      type: object
    DowntimeMetaPage:
      description: Object containing the total filtered count.
      properties:
        total_filtered_count:
          description: Total count of elements matched by the filter.
          format: int64
          type: integer
      type: object
    DowntimeDisplayTimezone:
      default: UTC
      description: |-
        The timezone in which to display the downtime's start and end times in Datadog applications. This is not used
        as an offset for scheduling.
      example: America/New_York
      nullable: true
      type: string
    DowntimeMessage:
      description: |-
        A message to include with notifications for this downtime. Email notifications can be sent to specific users
        by using the same `@username` notation as events.
      example: Message about the downtime
      nullable: true
      type: string
    DowntimeMonitorIdentifier:
      description: Monitor identifier for the downtime.
      oneOf:
        - $ref: '#/components/schemas/DowntimeMonitorIdentifierId'
        - $ref: '#/components/schemas/DowntimeMonitorIdentifierTags'
    DowntimeMuteFirstRecoveryNotification:
      description: If the first recovery notification during a downtime should be muted.
      example: false
      type: boolean
    DowntimeNotifyEndStates:
      description: States that will trigger a monitor notification when the `notify_end_types` action occurs.
      example:
        - alert
        - warn
      items:
        $ref: '#/components/schemas/DowntimeNotifyEndStateTypes'
      type: array
    DowntimeNotifyEndTypes:
      description: Actions that will trigger a monitor notification if the downtime is in the `notify_end_types` state.
      example:
        - canceled
        - expired
      items:
        $ref: '#/components/schemas/DowntimeNotifyEndStateActions'
      type: array
    DowntimeScheduleResponse:
      description: |-
        The schedule that defines when the monitor starts, stops, and recurs. There are two types of schedules:
        one-time and recurring. Recurring schedules may have up to five RRULE-based recurrences. If no schedules are
        provided, the downtime will begin immediately and never end.
      oneOf:
        - $ref: '#/components/schemas/DowntimeScheduleRecurrencesResponse'
        - $ref: '#/components/schemas/DowntimeScheduleOneTimeResponse'
    DowntimeScope:
      description: 'The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).'
      example: 'env:(staging OR prod) AND datacenter:us-east-1'
      type: string
    DowntimeStatus:
      description: The current status of the downtime.
      enum:
        - active
        - canceled
        - ended
        - scheduled
      example: active
      type: string
      x-enum-varnames:
        - ACTIVE
        - CANCELED
        - ENDED
        - SCHEDULED
    DowntimeRelationshipsCreatedBy:
      description: The user who created the downtime.
      properties:
        data:
          $ref: '#/components/schemas/DowntimeRelationshipsCreatedByData'
      type: object
    DowntimeRelationshipsMonitor:
      description: The monitor identified by the downtime.
      properties:
        data:
          $ref: '#/components/schemas/DowntimeRelationshipsMonitorData'
      type: object
    UserAttributes:
      description: Attributes of user object returned by the API.
      properties:
        created_at:
          description: Creation time of the user.
          format: date-time
          type: string
        disabled:
          description: Whether the user is disabled.
          type: boolean
        email:
          description: Email of the user.
          type: string
        handle:
          description: Handle of the user.
          type: string
        icon:
          description: URL of the user's icon.
          type: string
        modified_at:
          description: Time that the user was last modified.
          format: date-time
          type: string
        name:
          description: Name of the user.
          nullable: true
          type: string
        service_account:
          description: Whether the user is a service account.
          type: boolean
        status:
          description: Status of the user.
          type: string
        title:
          description: Title of the user.
          nullable: true
          type: string
        verified:
          description: Whether the user is verified.
          type: boolean
      type: object
    UserResponseRelationships:
      description: Relationships of the user object returned by the API.
      properties:
        org:
          $ref: '#/components/schemas/RelationshipToOrganization'
        other_orgs:
          $ref: '#/components/schemas/RelationshipToOrganizations'
        other_users:
          $ref: '#/components/schemas/RelationshipToUsers'
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    UsersType:
      default: users
      description: Users resource type.
      enum:
        - users
      example: users
      type: string
      x-enum-varnames:
        - USERS
    DowntimeMonitorIncludedAttributes:
      description: Attributes of the monitor identified by the downtime.
      properties:
        name:
          description: The name of the monitor identified by the downtime.
          example: A monitor name
          type: string
      type: object
    DowntimeIncludedMonitorType:
      default: monitors
      description: Monitor resource type.
      enum:
        - monitors
      example: monitors
      type: string
      x-enum-varnames:
        - MONITORS
    DowntimeMonitorIdentifierId:
      additionalProperties: {}
      description: Object of the monitor identifier.
      properties:
        monitor_id:
          description: ID of the monitor to prevent notifications.
          example: 123
          format: int64
          type: integer
      required:
        - monitor_id
      type: object
    DowntimeMonitorIdentifierTags:
      additionalProperties: {}
      description: Object of the monitor tags.
      properties:
        monitor_tags:
          description: |-
            A list of monitor tags. For example, tags that are applied directly to monitors,
            not tags that are used in monitor queries (which are filtered by the scope parameter), to which the downtime applies.
            The resulting downtime applies to monitors that match **all** provided monitor tags. Setting `monitor_tags`
            to `[*]` configures the downtime to mute all monitors for the given scope.
          example:
            - 'service:postgres'
            - 'team:frontend'
          items:
            description: A list of monitor tags.
            example: 'service:postgres'
            type: string
          minItems: 1
          type: array
      required:
        - monitor_tags
      type: object
    DowntimeNotifyEndStateTypes:
      description: State that will trigger a monitor notification when the `notify_end_types` action occurs.
      enum:
        - alert
        - no data
        - warn
      example: alert
      type: string
      x-enum-varnames:
        - ALERT
        - NO_DATA
        - WARN
    DowntimeNotifyEndStateActions:
      description: Action that will trigger a monitor notification if the downtime is in the `notify_end_types` state.
      enum:
        - canceled
        - expired
      example: canceled
      type: string
      x-enum-varnames:
        - CANCELED
        - EXPIRED
    DowntimeScheduleRecurrencesResponse:
      description: A recurring downtime schedule definition.
      properties:
        current_downtime:
          $ref: '#/components/schemas/DowntimeScheduleCurrentDowntimeResponse'
        recurrences:
          description: A list of downtime recurrences.
          items:
            $ref: '#/components/schemas/DowntimeScheduleRecurrenceResponse'
          maxItems: 5
          minItems: 1
          type: array
        timezone:
          default: UTC
          description: |-
            The timezone in which to schedule the downtime. This affects recurring start and end dates.
            Must match `display_timezone`.
          example: America/New_York
          type: string
      required:
        - recurrences
      type: object
    DowntimeScheduleOneTimeResponse:
      description: A one-time downtime definition.
      properties:
        end:
          description: ISO-8601 Datetime to end the downtime.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          nullable: true
          type: string
        start:
          description: ISO-8601 Datetime to start the downtime.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          type: string
      required:
        - start
      type: object
    DowntimeRelationshipsCreatedByData:
      description: Data for the user who created the downtime.
      nullable: true
      properties:
        id:
          description: User ID of the downtime creator.
          example: 00000000-0000-1234-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    DowntimeRelationshipsMonitorData:
      description: Data for the monitor.
      nullable: true
      properties:
        id:
          description: Monitor ID of the downtime.
          example: '12345'
          type: string
        type:
          $ref: '#/components/schemas/DowntimeIncludedMonitorType'
      type: object
    RelationshipToOrganization:
      description: Relationship to an organization.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToOrganizationData'
      required:
        - data
      type: object
    RelationshipToOrganizations:
      description: Relationship to organizations.
      properties:
        data:
          description: Relationships to organization objects.
          example: []
          items:
            $ref: '#/components/schemas/RelationshipToOrganizationData'
          type: array
      required:
        - data
      type: object
    RelationshipToUsers:
      description: Relationship to users.
      properties:
        data:
          description: Relationships to user objects.
          example: []
          items:
            $ref: '#/components/schemas/RelationshipToUserData'
          type: array
      required:
        - data
      type: object
    RelationshipToRoles:
      description: Relationship to roles.
      properties:
        data:
          description: An array containing type and the unique identifier of a role.
          items:
            $ref: '#/components/schemas/RelationshipToRoleData'
          type: array
      type: object
    DowntimeScheduleCurrentDowntimeResponse:
      description: |-
        The most recent actual start and end dates for a recurring downtime. For a canceled downtime,
        this is the previously occurring downtime. For active downtimes, this is the ongoing downtime, and for scheduled
        downtimes it is the upcoming downtime.
      properties:
        end:
          description: The end of the current downtime.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          nullable: true
          type: string
        start:
          description: The start of the current downtime.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          type: string
      type: object
    DowntimeScheduleRecurrenceResponse:
      description: An RRULE-based recurring downtime.
      properties:
        duration:
          $ref: '#/components/schemas/DowntimeScheduleRecurrenceDuration'
        rrule:
          $ref: '#/components/schemas/DowntimeScheduleRecurrenceRrule'
        start:
          description: |-
            ISO-8601 Datetime to start the downtime. Must not include a UTC offset. If not provided, the
            downtime starts the moment it is created.
          example: '2020-01-02T03:04'
          type: string
      type: object
    RelationshipToOrganizationData:
      description: Relationship to organization object.
      properties:
        id:
          description: ID of the organization.
          example: 00000000-0000-beef-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/OrganizationsType'
      required:
        - id
        - type
      type: object
    RelationshipToUserData:
      description: Relationship to user object.
      properties:
        id:
          description: A unique identifier that represents the user.
          example: 00000000-0000-0000-2345-000000000000
          type: string
        type:
          $ref: '#/components/schemas/UsersType'
      required:
        - id
        - type
      type: object
    RelationshipToRoleData:
      description: Relationship to role object.
      properties:
        id:
          description: The unique identifier of the role.
          example: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
          type: string
        type:
          $ref: '#/components/schemas/RolesType'
      type: object
    DowntimeScheduleRecurrenceDuration:
      description: 'The length of the downtime. Must begin with an integer and end with one of ''m'', ''h'', d'', or ''w''.'
      example: 123d
      type: string
    DowntimeScheduleRecurrenceRrule:
      description: |-
        The `RRULE` standard for defining recurring events.
        For example, to have a recurring event on the first day of each month, set the type to `rrule` and set the `FREQ` to `MONTHLY` and `BYMONTHDAY` to `1`.
        Most common `rrule` options from the [iCalendar Spec](https://tools.ietf.org/html/rfc5545) are supported.

        **Note**: Attributes specifying the duration in `RRULE` are not supported (for example, `DTSTART`, `DTEND`, `DURATION`).
        More examples available in this [downtime guide](https://docs.datadoghq.com/monitors/guide/suppress-alert-with-downtimes/?tab=api).
      example: FREQ=MONTHLY;BYSETPOS=3;BYDAY=WE;INTERVAL=1
      type: string
    OrganizationsType:
      default: orgs
      description: Organizations resource type.
      enum:
        - orgs
      example: orgs
      type: string
      x-enum-varnames:
        - ORGS
    RolesType:
      default: roles
      description: Roles type.
      enum:
        - roles
      example: roles
      type: string
      x-enum-varnames:
        - ROLES
    DowntimeCreateRequest:
      description: Request for creating a downtime.
      properties:
        data:
          $ref: '#/components/schemas/DowntimeCreateRequestData'
      required:
        - data
      type: object
    DowntimeResponse:
      description: |-
        Downtiming gives you greater control over monitor notifications by
        allowing you to globally exclude scopes from alerting.
        Downtime settings, which can be scheduled with start and end times,
        prevent all alerting related to specified Datadog tags.
      properties:
        data:
          $ref: '#/components/schemas/DowntimeResponseData'
        included:
          description: Array of objects related to the downtime that the user requested.
          items:
            $ref: '#/components/schemas/DowntimeResponseIncludedItem'
          type: array
      type: object
    DowntimeCreateRequestData:
      description: Object to create a downtime.
      properties:
        attributes:
          $ref: '#/components/schemas/DowntimeCreateRequestAttributes'
        type:
          $ref: '#/components/schemas/DowntimeResourceType'
      required:
        - type
        - attributes
      type: object
    DowntimeCreateRequestAttributes:
      description: Downtime details.
      properties:
        display_timezone:
          $ref: '#/components/schemas/DowntimeDisplayTimezone'
        message:
          $ref: '#/components/schemas/DowntimeMessage'
        monitor_identifier:
          $ref: '#/components/schemas/DowntimeMonitorIdentifier'
        mute_first_recovery_notification:
          $ref: '#/components/schemas/DowntimeMuteFirstRecoveryNotification'
        notify_end_states:
          $ref: '#/components/schemas/DowntimeNotifyEndStates'
        notify_end_types:
          $ref: '#/components/schemas/DowntimeNotifyEndTypes'
        schedule:
          $ref: '#/components/schemas/DowntimeScheduleCreateRequest'
        scope:
          $ref: '#/components/schemas/DowntimeScope'
      required:
        - scope
        - monitor_identifier
      type: object
    DowntimeScheduleCreateRequest:
      description: Schedule for the downtime.
      oneOf:
        - $ref: '#/components/schemas/DowntimeScheduleRecurrencesCreateRequest'
        - $ref: '#/components/schemas/DowntimeScheduleOneTimeCreateUpdateRequest'
    DowntimeScheduleRecurrencesCreateRequest:
      description: A recurring downtime schedule definition.
      properties:
        recurrences:
          description: A list of downtime recurrences.
          items:
            $ref: '#/components/schemas/DowntimeScheduleRecurrenceCreateUpdateRequest'
          type: array
        timezone:
          default: UTC
          description: The timezone in which to schedule the downtime.
          example: America/New_York
          type: string
      required:
        - recurrences
      type: object
    DowntimeScheduleOneTimeCreateUpdateRequest:
      additionalProperties: {}
      description: A one-time downtime definition.
      properties:
        end:
          description: |-
            ISO-8601 Datetime to end the downtime. Must include a UTC offset of zero. If not provided, the
            downtime continues forever.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          nullable: true
          type: string
        start:
          description: |-
            ISO-8601 Datetime to start the downtime. Must include a UTC offset of zero. If not provided, the
            downtime starts the moment it is created.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          nullable: true
          type: string
      type: object
    DowntimeScheduleRecurrenceCreateUpdateRequest:
      additionalProperties: {}
      description: An object defining the recurrence of the downtime.
      properties:
        duration:
          $ref: '#/components/schemas/DowntimeScheduleRecurrenceDuration'
        rrule:
          $ref: '#/components/schemas/DowntimeScheduleRecurrenceRrule'
        start:
          description: |-
            ISO-8601 Datetime to start the downtime. Must not include a UTC offset. If not provided, the
            downtime starts the moment it is created.
          example: '2020-01-02T03:04'
          nullable: true
          type: string
      required:
        - duration
        - rrule
      type: object
    DowntimeUpdateRequest:
      description: Request for editing a downtime.
      properties:
        data:
          $ref: '#/components/schemas/DowntimeUpdateRequestData'
      required:
        - data
      type: object
    DowntimeUpdateRequestData:
      description: Object to update a downtime.
      properties:
        attributes:
          $ref: '#/components/schemas/DowntimeUpdateRequestAttributes'
        id:
          description: ID of this downtime.
          example: 00000000-0000-1234-0000-000000000000
          type: string
        type:
          $ref: '#/components/schemas/DowntimeResourceType'
      required:
        - id
        - type
        - attributes
      type: object
    DowntimeUpdateRequestAttributes:
      description: Attributes of the downtime to update.
      properties:
        display_timezone:
          $ref: '#/components/schemas/DowntimeDisplayTimezone'
        message:
          $ref: '#/components/schemas/DowntimeMessage'
        monitor_identifier:
          $ref: '#/components/schemas/DowntimeMonitorIdentifier'
        mute_first_recovery_notification:
          $ref: '#/components/schemas/DowntimeMuteFirstRecoveryNotification'
        notify_end_states:
          $ref: '#/components/schemas/DowntimeNotifyEndStates'
        notify_end_types:
          $ref: '#/components/schemas/DowntimeNotifyEndTypes'
        schedule:
          $ref: '#/components/schemas/DowntimeScheduleUpdateRequest'
        scope:
          $ref: '#/components/schemas/DowntimeScope'
      type: object
    DowntimeScheduleUpdateRequest:
      description: Schedule for the downtime.
      oneOf:
        - $ref: '#/components/schemas/DowntimeScheduleRecurrencesUpdateRequest'
        - $ref: '#/components/schemas/DowntimeScheduleOneTimeCreateUpdateRequest'
    DowntimeScheduleRecurrencesUpdateRequest:
      description: A recurring downtime schedule definition.
      properties:
        recurrences:
          description: A list of downtime recurrences.
          items:
            $ref: '#/components/schemas/DowntimeScheduleRecurrenceCreateUpdateRequest'
          type: array
        timezone:
          default: UTC
          description: The timezone in which to schedule the downtime.
          example: America/New_York
          type: string
      type: object
    MonitorDowntimeMatchResponse:
      description: Response for retrieving all downtime matches for a monitor.
      properties:
        data:
          description: An array of downtime matches.
          items:
            $ref: '#/components/schemas/MonitorDowntimeMatchResponseData'
          type: array
        meta:
          $ref: '#/components/schemas/DowntimeMeta'
      type: object
    MonitorDowntimeMatchResponseData:
      description: A downtime match.
      properties:
        attributes:
          $ref: '#/components/schemas/MonitorDowntimeMatchResponseAttributes'
        id:
          description: The downtime ID.
          example: 00000000-0000-1234-0000-000000000000
          nullable: true
          type: string
        type:
          $ref: '#/components/schemas/MonitorDowntimeMatchResourceType'
      type: object
    MonitorDowntimeMatchResponseAttributes:
      description: Downtime match details.
      properties:
        end:
          description: The end of the downtime.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          nullable: true
          type: string
        groups:
          description: An array of groups associated with the downtime.
          example:
            - 'service:postgres'
            - 'team:frontend'
          items:
            description: An array of groups.
            example: 'service:postgres'
            type: string
          type: array
        scope:
          $ref: '#/components/schemas/DowntimeScope'
        start:
          description: The start of the downtime.
          example: '2020-01-02T03:04:00.000Z'
          format: date-time
          type: string
      type: object
    MonitorDowntimeMatchResourceType:
      default: downtime_match
      description: Monitor Downtime Match resource type.
      enum:
        - downtime_match
      example: downtime_match
      type: string
      x-enum-varnames:
        - DOWNTIME_MATCH
  parameters:
    APIKeyCategoryParameter:
      description: Filter API keys by category.
      in: query
      name: 'filter[category]'
      required: false
      schema:
        type: string
    APIKeyFilterCreatedAtEndParameter:
      description: Only include API keys created on or before the specified date.
      in: query
      name: 'filter[created_at][end]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterCreatedAtStartParameter:
      description: Only include API keys created on or after the specified date.
      in: query
      name: 'filter[created_at][start]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterModifiedAtEndParameter:
      description: Only include API keys modified on or before the specified date.
      in: query
      name: 'filter[modified_at][end]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterModifiedAtStartParameter:
      description: Only include API keys modified on or after the specified date.
      in: query
      name: 'filter[modified_at][start]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    APIKeyFilterParameter:
      description: Filter API keys by the specified string.
      in: query
      name: filter
      required: false
      schema:
        type: string
    APIKeyId:
      description: The ID of the API key.
      in: path
      name: api_key_id
      required: true
      schema:
        type: string
    APIKeyIncludeParameter:
      description: Comma separated list of resource paths for related resources to include in the response. Supported resource paths are `created_by` and `modified_by`.
      in: query
      name: include
      required: false
      schema:
        example: 'created_by,modified_by'
        type: string
    APIKeyReadConfigReadEnabledParameter:
      description: Filter API keys by remote config read enabled status.
      in: query
      name: 'filter[remote_config_read_enabled]'
      required: false
      schema:
        type: boolean
    APIKeysSortParameter:
      description: |-
        API key attribute used to sort results. Sort order is ascending
        by default. In order to specify a descending sort, prefix the
        attribute with a minus sign.
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/APIKeysSort'
    ApplicationKeyFilterCreatedAtEndParameter:
      description: Only include application keys created on or before the specified date.
      in: query
      name: 'filter[created_at][end]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    ApplicationKeyFilterCreatedAtStartParameter:
      description: Only include application keys created on or after the specified date.
      in: query
      name: 'filter[created_at][start]'
      required: false
      schema:
        example: '2020-11-24T18:46:21+00:00'
        type: string
    ApplicationKeyFilterParameter:
      description: Filter application keys by the specified string.
      in: query
      name: filter
      required: false
      schema:
        type: string
    ApplicationKeyID:
      description: The ID of the application key.
      in: path
      name: app_key_id
      required: true
      schema:
        type: string
    ApplicationKeyIncludeParameter:
      description: Resource path for related resources to include in the response. Only `owned_by` is supported.
      in: query
      name: include
      required: false
      schema:
        example: owned_by
        type: string
    ApplicationKeysSortParameter:
      description: |-
        Application key attribute used to sort results. Sort order is ascending
        by default. In order to specify a descending sort, prefix the
        attribute with a minus sign.
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/ApplicationKeysSort'
    ArchiveID:
      description: The ID of the archive.
      in: path
      name: archive_id
      required: true
      schema:
        type: string
    AuthNMappingID:
      description: The UUID of the AuthN Mapping.
      in: path
      name: authn_mapping_id
      required: true
      schema:
        type: string
    CloudWorkloadSecurityAgentRuleID:
      description: The ID of the Agent rule.
      example: 3b5-v82-ns6
      in: path
      name: agent_rule_id
      required: true
      schema:
        type: string
    ConfluentAccountID:
      description: Confluent Account id.
      in: path
      name: account_id
      required: true
      schema:
        type: string
    ConfluentResourceID:
      description: Confluent Account Resource ID.
      in: path
      name: resource_id
      required: true
      schema:
        type: string
    FastlyAccountID:
      description: Fastly Account id.
      in: path
      name: account_id
      required: true
      schema:
        type: string
    FastlyServiceID:
      description: Fastly Service ID.
      in: path
      name: service_id
      required: true
      schema:
        type: string
    GCPSTSServiceAccountID:
      description: Your GCP STS enabled service account's unique ID.
      in: path
      name: account_id
      required: true
      schema:
        type: string
    IncidentAttachmentFilterQueryParameter:
      description: Specifies which types of attachments are included in the response.
      explode: false
      in: query
      name: 'filter[attachment_type]'
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentAttachmentAttachmentType'
        type: array
    IncidentAttachmentIncludeQueryParameter:
      description: Specifies which types of related objects are included in the response.
      explode: false
      in: query
      name: include
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentAttachmentRelatedObject'
        type: array
    IncidentIDPathParameter:
      description: The UUID of the incident.
      in: path
      name: incident_id
      required: true
      schema:
        type: string
    IncidentIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      explode: false
      in: query
      name: include
      required: false
      schema:
        items:
          $ref: '#/components/schemas/IncidentRelatedObject'
        type: array
    IncidentIntegrationMetadataIDPathParameter:
      description: The UUID of the incident integration metadata.
      in: path
      name: integration_metadata_id
      required: true
      schema:
        type: string
    IncidentSearchIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentSearchQueryQueryParameter:
      description: |-
        Specifies which incidents should be returned. The query can contain any number of incident facets
        joined by `ANDs`, along with multiple values for each of those facets joined by `OR`s. For
        example: `state:active AND severity:(SEV-2 OR SEV-1)`.
      explode: false
      in: query
      name: query
      required: true
      schema:
        type: string
    IncidentSearchSortQueryParameter:
      description: Specifies the order of returned incidents.
      explode: false
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/IncidentSearchSortOrder'
    IncidentServiceIDPathParameter:
      description: The ID of the incident service.
      in: path
      name: service_id
      required: true
      schema:
        type: string
    IncidentServiceIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentServiceSearchQueryParameter:
      description: A search query that filters services by name.
      in: query
      name: filter
      required: false
      schema:
        example: ExampleServiceName
        type: string
    IncidentTeamIDPathParameter:
      description: The ID of the incident team.
      in: path
      name: team_id
      required: true
      schema:
        type: string
    IncidentTeamIncludeQueryParameter:
      description: Specifies which types of related objects should be included in the response.
      in: query
      name: include
      required: false
      schema:
        $ref: '#/components/schemas/IncidentRelatedObject'
    IncidentTeamSearchQueryParameter:
      description: A search query that filters teams by name.
      in: query
      name: filter
      required: false
      schema:
        example: ExampleTeamName
        type: string
    IncidentTodoIDPathParameter:
      description: The UUID of the incident todo.
      in: path
      name: todo_id
      required: true
      schema:
        type: string
    MetricID:
      description: The name of the log-based metric.
      in: path
      name: metric_id
      required: true
      schema:
        type: string
    MetricName:
      description: The name of the metric.
      example: dist.http.endpoint.request
      in: path
      name: metric_name
      required: true
      schema:
        type: string
    OpsgenieServiceIDPathParameter:
      description: The UUID of the service.
      in: path
      name: integration_service_id
      required: true
      schema:
        type: string
    PageNumber:
      description: Specific page number to return.
      in: query
      name: 'page[number]'
      required: false
      schema:
        default: 0
        example: 0
        format: int64
        type: integer
    PageOffset:
      description: Specific offset to use as the beginning of the returned page.
      in: query
      name: 'page[offset]'
      required: false
      schema:
        default: 0
        example: 0
        format: int64
        type: integer
    PageSize:
      description: Size for a given page. The maximum allowed value is 100.
      in: query
      name: 'page[size]'
      required: false
      schema:
        default: 10
        example: 10
        format: int64
        type: integer
    ResourceID:
      description: 'Identifier, formatted as `type:id`. Supported types: `connection`, `dashboard`, `notebook`, `security-rule`, `slo`.'
      example: 'dashboard:abc-def-ghi'
      in: path
      name: resource_id
      required: true
      schema:
        type: string
    RetentionFilterIdParam:
      description: The ID of the retention filter.
      in: path
      name: filter_id
      required: true
      schema:
        type: string
    RoleID:
      description: The unique identifier of the role.
      in: path
      name: role_id
      required: true
      schema:
        type: string
    RuleId:
      description: The ID of the rule/scorecard.
      in: path
      name: rule_id
      required: true
      schema:
        type: string
    SchemaVersion:
      description: The schema version desired in the response.
      in: query
      name: schema_version
      required: false
      schema:
        $ref: '#/components/schemas/ServiceDefinitionSchemaVersions'
    SecurityFilterID:
      description: The ID of the security filter.
      in: path
      name: security_filter_id
      required: true
      schema:
        type: string
    SecurityMonitoringRuleID:
      description: The ID of the rule.
      in: path
      name: rule_id
      required: true
      schema:
        type: string
    SensitiveDataScannerGroupID:
      description: The ID of a group of rules.
      in: path
      name: group_id
      required: true
      schema:
        type: string
    SensitiveDataScannerRuleID:
      description: The ID of the rule.
      in: path
      name: rule_id
      required: true
      schema:
        type: string
    ServiceAccountID:
      description: The ID of the service account.
      in: path
      name: service_account_id
      required: true
      schema:
        example: 00000000-0000-1234-0000-000000000000
        type: string
    ServiceName:
      description: The name of the service.
      in: path
      name: service_name
      required: true
      schema:
        example: my-service
        type: string
    SignalID:
      description: The ID of the signal.
      in: path
      name: signal_id
      required: true
      schema:
        type: string
    SpansMetricIDParameter:
      description: The name of the span-based metric.
      in: path
      name: metric_id
      required: true
      schema:
        type: string
    UserID:
      description: The ID of the user.
      in: path
      name: user_id
      required: true
      schema:
        example: 00000000-0000-9999-0000-000000000000
        type: string
  responses:
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Too many requests
  securitySchemes:
    AuthZ:
      description: This API uses OAuth 2 with the implicit grant flow.
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/v1/authorize
          scopes:
            apm_service_catalog_read: View service catalog and service definitions.
            apm_service_catalog_write: 'Add, modify, and delete service catalog definitions when those definitions are maintained by Datadog.'
            ci_visibility_pipelines_write: Create CI Visibility pipeline spans using the API.
            ci_visibility_read: View CI Visibility.
            create_webhooks: Create webhooks integrations.
            dashboards_public_share: Generate public and authenticated links to share dashboards or embeddable graphs externally.
            dashboards_read: View dashboards.
            dashboards_write: Create and change dashboards.
            events_read: Read Events data.
            incident_notification_settings_write: Configure Incidents Notification settings.
            incident_read: View incidents in Datadog.
            incident_settings_write: Configure Incident Settings.
            incident_write: 'Create, view, and manage incidents in Datadog.'
            metrics_read: View custom metrics.
            monitors_downtime: Set downtimes to suppress alerts from any monitor in an organization. Mute and unmute hosts. The ability to write monitors is not required to set downtimes.
            monitors_read: View monitors.
            monitors_write: Edit and delete individual monitors.
            security_monitoring_filters_read: Read Security Filters.
            security_monitoring_filters_write: 'Create, edit, and delete Security Filters.'
            security_monitoring_findings_read: View CSPM Findings.
            security_monitoring_rules_read: Read Detection Rules.
            security_monitoring_rules_write: Create and edit Detection Rules.
            security_monitoring_signals_read: View Security Signals.
            security_monitoring_suppressions_read: Read Rule Suppressions.
            security_monitoring_suppressions_write: Write Rule Suppressions.
            slos_corrections: 'Apply, edit, and delete SLO status corrections. A user with this permission can make status corrections, even if they do not have permission to edit those SLOs.'
            slos_read: View SLOs and status corrections.
            slos_write: 'Create, edit, and delete SLOs.'
            synthetics_global_variable_read: 'View, search, and use Synthetics global variables.'
            synthetics_global_variable_write: 'Create, edit, and delete global variables for Synthetics.'
            synthetics_private_location_read: 'View, search, and use Synthetics private locations.'
            synthetics_private_location_write: Create and delete private locations in addition to having access to the associated installation guidelines.
            synthetics_read: List and view configured Synthetic tests and test results.
            synthetics_write: 'Create, edit, and delete Synthetic tests.'
            teams_manage: 'Manage Teams. Create, delete, rename, and edit metadata of all Teams. To control Team membership across all Teams, use the User Access Manage permission.'
            teams_read: 'Read Teams data. A User with this permission can view Team names, metadata, and which Users are on each Team.'
            timeseries_query: Query Timeseries data.
            usage_read: View your organization's usage and usage attribution.
            user_access_invite: Invite other users to your organization.
            user_access_manage: 'Disable users, manage user roles, manage SAML-to-role mappings, and configure logs restriction queries.'
            user_access_read: View users and their roles and settings.
          tokenUrl: /oauth2/v1/token
      type: oauth2
    apiKeyAuth:
      description: Your Datadog API Key.
      in: header
      name: DD-API-KEY
      type: apiKey
      x-env-name: DD_API_KEY
    appKeyAuth:
      description: Your Datadog APP Key.
      in: header
      name: DD-APPLICATION-KEY
      type: apiKey
      x-env-name: DD_APP_KEY
  callbacks: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  x-stackQL-resources:
    downtimes:
      id: datadog.downtimes.downtimes
      name: downtimes
      title: Downtimes
      methods:
        list_downtimes:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _list_downtimes:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_downtime:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel_downtime:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime~1{downtime_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_downtime:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime~1{downtime_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _get_downtime:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime~1{downtime_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_downtime:
          operation:
            $ref: '#/paths/~1api~1v2~1downtime~1{downtime_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/downtimes/methods/get_downtime'
          - $ref: '#/components/x-stackQL-resources/downtimes/methods/list_downtimes'
        insert:
          - $ref: '#/components/x-stackQL-resources/downtimes/methods/create_downtime'
        update: []
        delete: []
    monitor_downtimes:
      id: datadog.downtimes.monitor_downtimes
      name: monitor_downtimes
      title: Monitor Downtimes
      methods:
        list_monitor_downtimes:
          operation:
            $ref: '#/paths/~1api~1v2~1monitor~1{monitor_id}~1downtime_matches/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.data
        _list_monitor_downtimes:
          operation:
            $ref: '#/paths/~1api~1v2~1monitor~1{monitor_id}~1downtime_matches/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/monitor_downtimes/methods/list_monitor_downtimes'
        insert: []
        update: []
        delete: []
paths:
  /api/v2/downtime:
    get:
      description: Get all scheduled downtimes.
      operationId: ListDowntimes
      parameters:
        - description: Only return downtimes that are active when the request is made.
          in: query
          name: current_only
          required: false
          schema:
            type: boolean
        - description: |-
            Comma-separated list of resource paths for related resources to include in the response. Supported resource
            paths are `created_by` and `monitor`.
          in: query
          name: include
          required: false
          schema:
            example: 'created_by,monitor'
            type: string
        - $ref: '#/components/parameters/PageOffset'
        - description: Maximum number of downtimes in the response.
          example: 100
          in: query
          name: 'page[limit]'
          required: false
          schema:
            default: 30
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDowntimesResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - monitors_downtime
      summary: Get all downtimes
      tags:
        - Downtimes
      x-pagination:
        limitParam: 'page[limit]'
        pageOffsetParam: 'page[offset]'
        resultsPath: data
    post:
      description: Schedule a downtime.
      operationId: CreateDowntime
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DowntimeCreateRequest'
        description: Schedule a downtime request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DowntimeResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - monitors_downtime
      summary: Schedule a downtime
      tags:
        - Downtimes
      x-codegen-request-body-name: body
  '/api/v2/downtime/{downtime_id}':
    delete:
      description: Cancel a downtime.
      operationId: CancelDowntime
      parameters:
        - description: ID of the downtime to cancel.
          in: path
          name: downtime_id
          required: true
          schema:
            example: 00000000-0000-1234-0000-000000000000
            type: string
      responses:
        '204':
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Downtime not found
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - monitors_downtime
      summary: Cancel a downtime
      tags:
        - Downtimes
    get:
      description: Get downtime detail by `downtime_id`.
      operationId: GetDowntime
      parameters:
        - description: ID of the downtime to fetch.
          in: path
          name: downtime_id
          required: true
          schema:
            example: 00000000-0000-1234-0000-000000000000
            type: string
        - description: |-
            Comma-separated list of resource paths for related resources to include in the response. Supported resource
            paths are `created_by` and `monitor`.
          in: query
          name: include
          required: false
          schema:
            example: 'created_by,monitor'
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DowntimeResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - monitors_downtime
      summary: Get a downtime
      tags:
        - Downtimes
    patch:
      description: Update a downtime by `downtime_id`.
      operationId: UpdateDowntime
      parameters:
        - description: ID of the downtime to update.
          in: path
          name: downtime_id
          required: true
          schema:
            example: 00e000000-0000-1234-0000-000000000000
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DowntimeUpdateRequest'
        description: Update a downtime request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DowntimeResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Downtime not found
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - monitors_downtime
      summary: Update a downtime
      tags:
        - Downtimes
      x-codegen-request-body-name: body
  '/api/v2/monitor/{monitor_id}/downtime_matches':
    get:
      description: Get all active downtimes for the specified monitor.
      operationId: ListMonitorDowntimes
      parameters:
        - description: The id of the monitor.
          in: path
          name: monitor_id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorDowntimeMatchResponse'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Monitor Not Found error
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
      security:
        - apiKeyAuth: []
          appKeyAuth: []
        - AuthZ:
            - monitors_downtime
      summary: Get active downtimes for a monitor
      tags:
        - Downtimes
      x-codegen-request-body-name: body
